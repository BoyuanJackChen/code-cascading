[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"lists must have same length\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            result.append(test_tup1[i])\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # test_tup1 = ('a', 'b', 'c', 'd')\n    # test_tup2 = ('e', 'f', 'g', 'h')\n    \n    # loop through both tuples\n    # loop through the two tuples\n    # check if the first element is the same as the second element\n    # return the tuple element\n    \n    # method 1\n    # [1,2,3]\n    # 1\n    # 1\n    # return\n    \n    # method 2\n    # [3,4]\n    # 3\n    # return\n    \n    # check if the first element of the tuples is the same as the second element\n    # if they are, return the tuple element\n    # return\n    \n    # loop through both tuples\n    # check if the second element of the tuples is the same as the first element\n    # if they are, return the tuple element\n    # return\n    \n    # loop through the two tuples\n    # check if the element of the first tuple is the same as the element of the second tuple\n    # if they are, return the tuple element\n    # return\n    \n    # if all the other tuples are the same, return the tuple element\n    # return\n    \n    # method 3\n    # {1,2}\n    # (1,2)\n    # return\n    \n    # loop through the two tuples\n    # check if the first element of the tuples is the same as the second element\n    # if they are, return the tuple element\n    # return\n    \n    # loop through the two tuples\n    # check if the second element of the tuples is the same as the first element\n    # if they are, return the tuple element\n    # return\n    \n    # return the first tuple\n    # return\n    \n    # return the second tuple\n    # return\n    \n    # method 4\n    # {a:b,c:d,d:e}\n    # a\n    # b\n    # c\n    # d\n    # e\n    # return\n    \n    # method 5\n    # {1,2,3}\n    # 1\n    # 2\n    # 3\n    # return\n    \n    # method 6\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 7\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 8\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 9\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 10\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 11\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 12\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 13\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 14\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 15\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 16\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 17\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 18\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 19\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 20\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 21\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 22\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 23\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 24\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 25\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 26\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 27\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 28\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 29\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 30\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 31\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 32\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 33\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 34\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 35\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 36\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 37\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 38\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 39\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 40\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 41\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 42\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 43\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 44\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 45\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 46\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 47\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 48\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 49\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 50\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 51\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 52\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 53\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 54\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 55\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 56\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 57\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 58\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 59\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 60\n    # {1,2}\n    # 1\n    # 2\n    # return\n    \n    # method 61\n    # {1"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    res = []\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    for item in set1:\n        if item in set2:\n            res.append(item)\n            \n    return res\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    a = set(test_tup1)\n    b = set(test_tup2)\n    return a & b\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print('Shared elements of ', test_tup1,'and ', test_tup2)\n    \n    # Create a new list to store the elements.\n    new_tup_1 = []\n    \n    # Create a new list to store the elements.\n    new_tup_2 = []\n    \n    # Iterate over the lists to calculate the sum of all elements.\n    for tup in zip(test_tup1, test_tup2):\n        sum = tup[0] + tup[1]\n        new_tup_1.append(sum)\n    \n    for tup in zip(test_tup2, test_tup1):\n        sum = tup[0] + tup[1]\n        new_tup_2.append(sum)\n    \n    # Find the elements that are not in both lists.\n    elements_not_in_both = [x for x in new_tup_1 if x not in new_tup_2]\n    \n    print('Number of elements not in both lists: ', len(elements_not_in_both))\n    \n    # Return the shared elements.\n    return elements_not_in_both\n    \n    \n    "
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Iterate through all the elements in both lists and find the shared elements\n    # Iterate through all the elements in the first list and find the shared elements\n    # Iterate through all the elements in the second list and find the shared elements\n    # Return the shared elements from both lists\n    # Write your code here.\n    ele1 = list(test_tup1[0])\n    ele2 = list(test_tup2[0])\n    for i in range(0,len(test_tup1)):\n        for j in range(0,len(test_tup2)):\n            if test_tup1[i] == test_tup2[j]:\n                ele1.append(test_tup1[i])\n                ele2.append(test_tup2[j])\n    #print(ele1)\n    #print(ele2)\n    #print(ele1)\n    return ele1, ele2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a list for the shared elements\n    shared_elements = []\n    # Copy the values from the test_tup1 to the shared_elements list\n    shared_elements = test_tup1[:]\n    # Loop through the shared elements\n    for element in shared_elements:\n        # Check if the element from the test_tup1 is in the shared elements list\n        if element in test_tup2:\n            # If it is, add it to the shared_elements list\n            shared_elements.remove(element)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    result.extend(test_tup1)\n    result.extend(test_tup2)\n    result = list(set(result))\n    result.sort()\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # your code here\n    print('test1', test_tup1)\n    print('test2', test_tup2)\n    # find the shared elements in the two lists\n    shared_elements_list = []\n    for index1 in range(len(test_tup1)):\n        for index2 in range(len(test_tup2)):\n            if test_tup1[index1] == test_tup2[index2]:\n                shared_elements_list.append(test_tup1[index1])\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [i for i in test_tup1 if i in test_tup2]\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    return is_not_prime(n-1)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 2:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    return is_not_prime(n-1)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1 or n == 2:\n        return True\n    else:\n        for i in range(3, n):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5,int(math.sqrt(n))+1,2):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\ndef prime(n):\n    '''\n    Finds the prime numbers of a number.\n    '''\n    if n == 2:\n        return True\n    if n == 3 or n == 5:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5,int(math.sqrt(n))+1,2):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    else:\n        if (n % 2 == 0):\n            return False\n        else:\n            for i in range(3, int(math.sqrt(n)) + 1, 2):\n                if n % i == 0:\n                    return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    s = int(math.sqrt(n))\n    \n    return (n < s) or (n == s and not is_prime(n-s))\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n == 1):\n        return False\n    if (n % 2 == 0):\n        return False\n    if (n == 3):\n        return True\n    i = 3\n    while (i * i <= n):\n        if (n % i == 0):\n            return False\n        i += 2\n        if (i * i > n):\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,[nums[i],i])\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq=[]\n    heapq.heapify(hq)\n    for i in range(n-1,-1,-1):\n        heapq.heappush(hq,-nums[i])\n    for i in range(n-1,-1,-1):\n        heapq.heappush(hq,-nums[i])\n    return(hq[0])\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to return the smallest values of a given list, sorted in descending order, given a given size n.\n    '''\n    hq=[]\n    heapq.heapify(hq)\n    for i in range(n-1,-1,-1):\n        heapq.heappush(hq,-nums[i])\n    for i in range(n-1,-1,-1):\n        heapq.heappush(hq,-nums[i])\n    return(hq[0])\ndef heap_queue_list(nums,n):\n    '''\n    Write a function to return the values of a given list in sorted order, given a given size n.\n    '''\n    hq=[]\n    for i in range(n):\n        heapq.heappush(hq,-nums[i])\n    for i in range(n):\n        heapq.heappush(hq,-nums[i])\n    return(hq[:])\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for num in nums:\n        heapq.heappush(heap,num)\n    for _ in range(n):\n        top = heapq.heappop(heap)\n        heapq.heappush(heap,top*-1)\n    return [x for x in heap]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    #bubble the nums array up as per given n\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        #if it's already been popped the prev nums is not actually popped\n        if len(heap)==1:\n            pass\n        #recursively pop the values from the heap until the top\n        else:\n            heapq.heappop(heap)\n            #pop the top nums from the heap\n            heapq.heappop(heap)\n            #pop the next nums\n            heapq.heappush(heap,nums[i])\n            #set it as the first num in the array\n            nums[i] = heap[0]\n    return heapq.heapify(heap)\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to return the n smallest numbers from a given list of numbers, sorted in ascending order.\n    '''\n    heap = []\n    #bubble the nums array up as per given n\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        if len(heap)==1:\n            pass\n        else:\n            heapq.heappop(heap)\n            #if it's already been popped the prev nums is not actually popped\n            if len(heap)==1:\n                pass\n            #recursively pop the values from the heap until the top\n            else:\n                heapq.heappop(heap)\n                heapq.heappush(heap,nums[i])\n                #set it as the first num in the array\n                nums[i] = heap[0]\n    return heapq.heapify(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        #for j in range(0,i):\n            #if nums[j]>nums[i]:\n                #heapq.heapreplace(heap,nums[j])\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # number of elements in the queue\n    c = len(nums)\n    if c < n:\n        return []\n    # create a heap of the elements in the list and put the largest element into the queue\n    heapq.heapify(nums)\n    # find the n largest element\n    for i in range(n):\n        # return the largest element\n        heapq.heappop(nums)\n    # return the largest element\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    result = sorted(nums)\n    return result[:n]\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    result = []\n    result = sorted(nums,reverse=True)\n    return result[:n]\ndef heap_queue_median(nums,n):\n    '''\n    Write a function to find the n median numbers from a given list of numbers, returned in ascending order.\n    '''\n    result = []\n    result = sorted(nums,reverse=True)\n    result.append(nums[0])\n    for i in range(1,len(nums)):\n        result.append(nums[i])\n        if len(result)%2==0:\n            result[i-1] = result[i]\n    return result[n//2]\ndef heap_queue_tail(nums,n):\n    '''\n    Write a function to find the n highest elements from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    result = sorted(nums,reverse=True)\n    result.append(nums[0])\n    for i in range(1,len(nums)):\n        result.append(nums[i])\n        if len(result)%2==0:\n            result[i-1] = result[i]\n    return result[n//2]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    hq.heapify(heap)\n    return_list = []\n    for i in range(n):\n        heapq.heappush(heap, -nums[i])\n    for i in range(n):\n        heapq.heappop(heap)\n    for i in range(n):\n        return_list.append(-heapq.heappop(heap))\n    return return_list\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    heap = []\n    for num in nums:\n        hq.heappush(heap,[-num,num])\n        \n    while len(heap) > n:\n        pop_val = hq.heappop(heap)[1]\n        \n        if pop_val not in nums:\n            return pop_val\n            \n    \n    \n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    return heapq.heappop(heap)\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    return heapq.heappop(heap)\ndef heap_queue_pop_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    return heapq.heappop(heap)\ndef heap_queue_pop_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    return heapq.heappop(heap)\ndef heap_queue_push(nums,n):\n    '''\n    Write a function to push all numbers in a list to a heap, maintaining the relative order of the numbers.\n    '''\n    for i in range(n-1,-1,-1):\n        heapq.heappush(heap,nums[i])\ndef heap_queue_pop(nums,n):\n    '''\n    Write a function to pop all numbers from a heap, maintaining the relative order of the numbers.\n    '''\n    for i in range(n,0,-1):\n        heapq.heappop(heap)\ndef heap_queue_pop_from_end(nums,n):\n    '''\n    Write a function to pop all numbers from a heap, keeping the largest and smallest numbers in the heap, maintaining the relative order of the numbers.\n    '''\n    for i in range(n,-1,-1):\n        heapq.heappop(heap)\ndef heap_queue_push_to_end(nums,n):\n    '''\n    Write a function to push all numbers in a heap to a heap, maintaining the relative order of the numbers.\n    '''\n    for i in range(n,0,-1):\n        heapq.heappush(heap,nums[i])\ndef heap_queue_pop_from_start(nums,n):\n    '''\n    Write a function to pop all numbers from a heap, keeping the largest and smallest numbers in the heap, maintaining the relative order of the numbers.\n    '''\n    for i in range(n,0,-1):\n        heapq.heappop(heap)\ndef heap_queue_pop_from_start(nums,n):\n    '''\n    Write a function to pop all numbers from a heap, keeping the largest and smallest numbers in the heap, maintaining the relative order of the numbers.\n    '''\n    for i in range(n,0,-1):\n        heapq.heappop(heap)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    '''\n    def power_of_two (num): \n        if num == 0: \n            return False\n        while num!= 0: \n            if num%2 == 0: \n                return False\n            num = num//2\n    '''\n    def power_of_two(num):\n        if num == 0:\n            return False\n        while num!= 0:\n            if num%2 == 0:\n                return False\n            num = num//2\n    return power_of_two(x)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>= 0: \n        if x == 1: \n            return True\n        elif x == 2: \n            return False\n        else: \n            return is_Power_Of_Two(x//2) \n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x<=0 or (x%2)!= 0: \n        print(\"Integer value is not a power of two\")\n    else:\n        if x == int(x): \n            print(\"Zero and one are both of a power of two\")\n        else: \n            if x==int(x**2):\n                print(\"The numbers are of the same type\")\n            else: \n                print(\"The numbers are different at one bit position\")\n                \nis_Power_Of_Two(7"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    temp=x\n    sum=0\n    while temp>0:\n        digit=temp%10\n        sum+=digit**2\n        temp//=10\n    if sum==x:\n        return True\n    else:\n        return False\n    \ndef is_Prime(x):\n    '''\n    Write a python function to check whether the number is prime or not.\n    '''\n    temp=x\n    i=2\n    while(i<=x):\n        if x%i==0:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y=x%2\n    if (y==0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    if x == 2:\n        return False\n    while x!= 1:\n        if x % 2 == 0:\n            return False\n        x = x // 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2 ** 31:\n        return True\n    elif x == 2 ** 32:\n        return False\n    elif x == 2 ** 31 or x == 2 ** 32:\n        return False\n    elif x == 2 ** 31 or x == 2 ** 32:\n        return True\n    elif x == 2 ** 31 or x == 2 ** 32:\n        return False\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    s = str(x)\n    if len(s) > 1:\n        if s[0] == s[1]:\n            return True\n    else:\n        if s[0] == s[1]:\n            return False\n    return True\ndef is_Power_Of_Two_V2 (x):\n    '''\n    Function to check whether x is power of two or not\n    '''\n    s = str(x)\n    if len(s) > 1:\n        if s[0] == '0' and s[1] == '0':\n            return True\n    else:\n        if s[0] == s[1]:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = abs(x)\n    if x == 2:\n        print(\"yes\")\n        return 0\n    elif x == 1:\n        print(\"yes\")\n        return 1\n    else:\n        print(\"not\")\n        return 2\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def powers_of_two(x):\n        if (x<2):\n            return False\n        return x == pow(x,2)\n    return powers_of_two(x)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[A-Za-z][A-Za-z0-9_]{4,}\\W'\n    return [word for word in re.findall(pattern,text) if len(word)>=4]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    characters_long = []\n    for i in text:\n        if len(i) >= 4:\n            characters_long.append(i)\n    return characters_long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = r'[a-zA-Z]+\\w*'\n    matches = re.finditer(regex, text, re.I)\n    all_words = []\n    for match in matches:\n        all_words.append(match.group())\n    return all_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    for line in text.splitlines():\n        line_words = re.findall(r'\\w+', line)\n        for word in line_words:\n            if len(word) >= 4:\n                long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    string_to_check = re.compile('[a-zA-Z0-9_]+')\n    return [word for word in string_to_check.findall(text) if len(word) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_list = []\n    for char in text:\n        if len(char)>=4:\n            char_list.append(char)\n    return char_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'[A-Za-z\\s]+'\n    text = re.sub(pattern,' ',text)\n    pattern = r'\\s\\d\\s'\n    text = re.sub(pattern,' ',text)\n    pattern = r'[A-Za-z\\s]+\\s*\\d\\s'\n    text = re.sub(pattern,' ',text)\n    pattern = r'\\s\\w\\s'\n    text = re.sub(pattern,' ',text)\n    pattern = r'\\s\\d\\s\\s\\d\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = []\n    for word in text.split():\n        if len(word) > 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Step 1: Find all words which are at least 4 characters long.\n    str_len = len(text)\n    res = []\n    for i in range(0,str_len):\n        if len(text[i]) >=4:\n            res.append(text[i])\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_pattern = re.compile(r\"\\b[a-zA-Z0-9]{4,}\\b\")\n    return word_pattern.findall(text)\ndef is_lower_case(text):\n    '''\n    Write a function to check whether the input string is in lower case.\n    '''\n    return text.islower()\ndef is_uppercase(text):\n    '''\n    Write a function to check whether the input string is in upper case.\n    '''\n    return text.isupper()\ndef is_digits(text):\n    '''\n    Write a function to check whether the input string is in digits.\n    '''\n    return text.isdigit()\ndef is_title(text):\n    '''\n    Write a function to check whether the input string is in title case.\n    '''\n    return text.istitle()\ndef is_alpha(text):\n    '''\n    Write a function to check whether the input string is in alphabetical order.\n    '''\n    return text.isalpha()\ndef is_number(text):\n    '''\n    Write a function to check whether the input string is in decimal numbers.\n    '''\n    return text.isdigit()\ndef is_symbol(text):\n    '''\n    Write a function to check whether the input string is in symbols.\n    '''\n    return text.isalpha()\ndef is_all_upper(text):\n    '''\n    Write a function to check whether the input string is in all uppercase.\n    '''\n    return text.isupper() and text.isalpha()\ndef is_all_lower(text):\n    '''\n    Write a function to check whether the input string is in all lowercase.\n    '''\n    return text.islower() and text.isalpha()\ndef is_capital(text):\n    '''\n    Write a function to check whether the input string is in all caps.\n    '''\n    return text.istitle() and text.isalpha()\ndef is_numeric(text):\n    '''\n    Write a function to check whether the input string is in all numeric symbols.\n    '''\n    return text.isdigit() and text.isalpha()\ndef is_symbol_and_number(text):\n    '''\n    Write a function to check whether the input string is in symbols, numbers, and numeric symbols.\n    '''\n    return text.isalnum() and text.isdigit() and text.isalpha()\ndef is_symbol_only(text):\n    '''\n    Write a function to check whether the input string is in symbols only.\n    '''\n    return text.isalnum() and text.isalpha() and text.isdigit()\ndef is_number_only(text):\n    '''\n    Write a function to check whether the input string is in numbers only.\n    '''\n    return text.isdigit() and text.isalpha() and text.isalpha()\ndef is_alpha_and_number_only(text):\n    '''\n    Write a function to check whether the input string is in all alpha and numbers.\n    '''\n    return text.isalnum() and text.isdigit() and text.isalpha()\ndef is_not_space(text):\n    '''\n    Write a function to check whether the input string is not a space character.\n    '''\n    return not text.isspace()\ndef is_not_word(text):\n    '''\n    Write a function to check whether the input string is not a word character.\n    '''\n    return not text.isalnum() and not text.isspace()\ndef is_not_title(text):\n    '''\n    Write a function to check whether the input string is not a title character.\n    '''\n    return not text.istitle() and not text.isalpha() and not text.isalnum()\ndef is_not_capital(text):\n    '''\n    Write a function to check whether the input string is not a capital character.\n    '''\n    return not text.istitle() and not text.isalpha() and not text.isalpha() and not text.isupper()\ndef is_not_digits(text):\n    '''\n    Write a function to check whether the input string is not a digits.\n    '''\n    return not text.isdigit() and not text.isalpha() and not text.isalnum()\ndef is_not_symbol(text):\n    '''\n    Write a function to check whether the input string is not a symbol.\n    '''\n    return not text.isalnum() and not text.isalpha() and not text.isupper()\ndef is_not_alpha_and_number_only(text):\n    '''\n    Write a function to check whether the input string is not a alpha and numbers only.\n    '''\n    return not text.isalnum() and not text.isalpha() and not text.isalpha() and not text.isdigit()\ndef is_not_title_and_capital(text):\n    '''\n    Write a function to check whether the input string is not a title and capital character.\n    '''\n    return not text.istitle() and not text.isalpha() and not text.isalpha() and not text.isupper()\ndef is_not_title_and_digits(text):\n    '''\n    Write a function to check whether the input string is not a title and digits.\n    '''\n    return not text.istitle() and not text.isalpha() and not text.isalnum() and not text.isdigit()\ndef is_not_title_and_symbol(text):\n    '''\n    Write a function to check whether the input string is not a title and symbol.\n    '''\n    return not text.istitle() and not text.isalpha() and not text.isalnum() and not text.isupper() and not text.isdigit()\ndef is_not_all_upper(text):\n    '''\n    Write a function to check whether the input string is not all uppercase.\n    '''\n    return not text.istitle() and not text.isalpha() and not text.isalnum() and not text.isupper()\ndef is_not_all_lower(text):\n    '''\n    Write a function to check whether the input string is not all lowercase.\n    '''\n    return not text.istitle() and not text.isalpha() and not text.isalnum() and not text.isupper()\ndef is_not_capital(text):\n    '''\n    Write a function to check whether the input string is not all capital.\n    '''\n    return not text.istitle() and not text.isalpha() and not text.isupper() and not text.isalpha() and not text.isdigit()\ndef is_not_numeric(text):\n    '''\n    Write a function to check whether the input string is not all numeric.\n    '''\n    return not text.isalnum() and not text.isalpha() and not text.isalnum() and not text.isdigit()\ndef is_not_symbol_and_number(text):\n    '''\n    Write a function to check whether the input string is not all symbols, numbers, and numeric symbols.\n    '''\n    return not text.isalnum() and not text.isalpha() and not text.isalnum() and not text.isdigit() and not text.isalpha()\ndef is_not_symbol_only(text):\n    '''\n    Write a function to check whether the input string is not all symbols, numbers, and numeric symbols.\n    '''\n    return not text.isalnum() and not text.isalpha() and not text.isalnum() and not text.isdigit() and not text.isalpha()\ndef is_not_number_only(text):\n    '''\n    Write a function to check whether the input string is not all numeric symbols.\n    '''\n    return not text.isalnum() and not text.isalpha() and not text.isalnum() and not text.isdigit() and not text.isalpha()\ndef is_not_alpha_and_number_only(text):\n    '''\n    Write a function to check whether the input string is not all alpha and numeric symbols.\n    '''\n    return not text.isalnum() and not text.isalpha() and not text.isalnum() and not text.isdigit() and not text.isalpha()\ndef is_not_title_and_capital(text):\n    '''\n    Write a function t"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for num in nums:\n        squared_list.append(num**2)\n    return squared_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = [num**2 for num in nums]\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares=[]\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_nums = []\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums if x%2==0]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums)):\n        nums[i]=num(nums[i])\n    for i in range(0,len(nums))"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square = []\n    for number in nums:\n        square.append(number**2)\n    return square\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    def squares(a,i):\n        return a ** 2\n    #Initializing empty list\n    squares_list = []\n    #Appending element to list\n    for j in range(len(nums)):\n        squares_list.append(nums[j] ** 2)\n    #Iterating through list\n    for k in range(len(squares_list)):\n        #If number in the list is square\n        if squares_list[k] % 2 == 0:\n            #Appending to list\n            squares_list.append(squares_list[k])\n    return squares_list\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(len(str)-1): \n        for j in range(i,len(str)): \n            if (str[i] == str[j]): \n                temp = min(i, j) \n                str = str[0:temp] + str[temp+1:] \n    return str\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(1, len(str)+1):\n        if(str[0:i] == str[0:i][::-1]):\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    index = 0\n    for i in range(0,len(str)):\n        if index % 2 == 0:\n            if str[i]!= str[i+1]:\n                index = index + 1\n        else:\n            if str[i]!= str[i+1]:\n                index = index - 1\n        rotations = rotations + 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    counter=0\n    for i in range(len(str)):\n        if (str[i]!=str[i-1]):\n            counter+=1\n    return counter\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # copy the string\n    str = str[::-1]\n    #count the number of rotations\n    count = 0\n    #count the rotation\n    for i in range(len(str)):\n        rotate_num = 0\n        for j in range(i, len(str)):\n            if str[j] == str[i]:\n                rotate_num += 1\n        if rotate_num > 0:\n            count += rotate_num\n            break\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0: \n        return 0\n    rotations = 0\n    str = list(str)\n    for i in range(len(str) - 1): \n        if str[i] == str[i + 1]: \n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=[]\n    for i in range(len(str)):\n        str1=str[:i] + str[i+1:]\n        rotations.append(str1)\n    rotations.sort()\n    minRot=0\n    for i in range(len(rotations)):\n        if rotations[i][0]!=rotations[i-1][0]:\n            minRot+=1\n    return minRot\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    min_rotations = []\n    max_rotations = []\n    print_rotations = []\n    print_rotations_in_str = []\n    def search_rotations(str, n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        if n == 5:\n            return 5\n        if n == 6:\n            return 6\n        if n == 7:\n            return 7\n        if n == 8:\n            return 8\n        if n == 9:\n            return 9\n        if n == 10:\n            return 10\n        if n == 11:\n            return 11\n        if n == 12:\n            return 12\n        if n == 13:\n            return 13\n        if n == 14:\n            return 14\n        if n == 15:\n            return 15\n        if n == 16:\n            return 16\n        if n == 17:\n            return 17\n        if n == 18:\n            return 18\n        if n == 19:\n            return 19\n        if n == 20:\n            return 20\n        if n == 21:\n            return 21\n        if n == 22:\n            return 22\n        if n == 23:\n            return 23\n        if n == 24:\n            return 24\n        if n == 25:\n            return 25\n        if n == 26:\n            return 26\n        if n == 27:\n            return 27\n        if n == 28:\n            return 28\n        if n == 29:\n            return 29\n        if n == 30:\n            return 30\n        if n == 31:\n            return 31\n        if n == 32:\n            return 32\n        if n == 33:\n            return 33\n        if n == 34:\n            return 34\n        if n == 35:\n            return 35\n        if n == 36:\n            return 36\n        if n == 37:\n            return 37\n        if n == 38:\n            return 38\n        if n == 39:\n            return 39\n        if n == 40:\n            return 40\n        if n == 41:\n            return 41\n        if n == 42:\n            return 42\n        if n == 43:\n            return 43\n        if n == 44:\n            return 44\n        if n == 45:\n            return 45\n        if n == 46:\n            return 46\n        if n == 47:\n            return 47\n        if n == 48:\n            return 48\n        if n == 49:\n            return 49\n        if n == 50:\n            return 50\n        if n == 51:\n            return 51\n        if n == 52:\n            return 52\n        if n == 53:\n            return 53\n        if n == 54:\n            return 54\n        if n == 55:\n            return 55\n        if n == 56:\n            return 56\n        if n == 57:\n            return 57\n        if n == 58:\n            return 58\n        if n == 59:\n            return 59\n        if n == 60:\n            return 60\n        if n == 61:\n            return 61\n        if n == 62:\n            return 62\n        if n == 63:\n            return 63\n        if n == 64:\n            return 64\n        if n == 65:\n            return 65\n        if n == 66:\n            return 66\n        if n == 67:\n            return 67\n        if n == 68:\n            return 68\n        if n == 69:\n            return 69\n        if n == 70:\n            return 70\n        if n == 71:\n            return 71\n        if n == 72:\n            return 72\n        if n == 73:\n            return 73\n        if n == 74:\n            return 74\n        if n == 75:\n            return 75\n        if n == 76:\n            return 76\n        if n == 77:\n            return 77\n        if n == 78:\n            return 78\n        if n == 79:\n            return 79\n        if n == 80:\n            return 80\n        if n == 81:\n            return 81\n        if n == 82:\n            return 82\n        if n == 83:\n            return 83\n        if n == 84:\n            return 84\n        if n == 85:\n            return 85\n        if n == 86:\n            return 86\n        if n == 87:\n            return 87\n        if n == 88:\n            return 88\n        if n == 89:\n            return 89\n        if n == 90:\n            return 90\n        if n == 91:\n            return 91\n        if n == 92:\n            return 92\n        if n == 93:\n            return 93\n        if n == 94:\n            return 94\n        if n == 95:\n            return 95\n        if n == 96:\n            return 96\n        if n == 97:\n            return 97\n        if n == 98:\n            return 98\n        if n == 99:\n            return 99\n        if n == 100:\n            return 100\n        if n == 101:\n            return 101\n        if n == 102:\n            return 102\n        if n == 103:\n            return 103\n        if n == 104:\n            return 104\n        if n == 105:\n            return 105\n        if n == 106:\n            return 106\n        if n == 107:\n            return 107\n        if n == 108:\n            return 108\n        if n == 109:\n            return 109\n        if n == 110:\n            return 110\n        if n == 111:\n            return 111\n        if n == 112:\n            return 112\n        if n == 113:\n            return 113\n        if n == 114:\n            return 114\n        if n == 115:\n            return 115\n        if n == 116:\n            return 116\n        if n == 117:\n            return 117\n        if n == 118:\n            return 118\n        if n == 119:\n            return 119\n        if n == 120:\n            return 120\n        if n == 121:\n            return 121\n        if n == 122:\n            return 122\n        if n == 123:\n            return 123\n        if n == 124:\n            return 124\n        if n == 125:\n            return 125\n        if n == 126:\n            return 126\n        if n == 127:\n            return 127\n        if n == 128:\n            return 128\n        if n == 129:\n            return 129\n        if n == 130:\n            return 130\n        if n == 131:\n            return 131\n        if n == 132:\n            return 132\n        if n == 133:\n            return 133\n        if n == 134:\n            return 134\n        if n == 135:\n            return 135\n        if n == 136:\n            return 136\n        if n == 137:\n            return 137\n        if n == 138:\n            return 138\n        if n == 139:\n            return 139\n        if n == 140:\n            return 140\n        if n == 141:\n            return 141\n        if n == 142:\n            return 142\n        if n == 143:\n            return 143\n        if n == 144:\n            return 144\n        if n == 145:\n            return 145\n        if n == 146:\n            return 146\n        if n == 147:\n            return 147\n        if n == 148:\n            return 148\n        if n == 149:\n            return 149\n        if n == 150:\n            return 150\n        if n == 151:\n            return 151\n        if n == 152:\n            return 152\n        if n == 153:\n            return 153\n        if n == 154:\n            return 154\n        if n == 155:\n            return 155\n        if n == 156:\n            return 156\n        if n == 157:\n            return 157\n        if n == 158:\n            return 158\n        if n == 159:\n            return 159\n        if n == 160:\n            return 160\n        if n == 161:\n            return 161\n        if n == 162:\n            return 162\n        if n == 163:\n            return 163\n        if n == 164:\n            return 164\n        if n == 165:\n            return 165\n        if n == 166:\n            return 166\n        if n == 167:\n            return 167\n        if n == 168:\n            return 168\n        if n == 169:\n            return 169\n        if n == 170:\n            return 170\n        if n == 171:\n            return 171\n        if n == 172:\n            return 172\n        if n == 173:\n            return 173\n        if n == 174:\n            return 174\n        if n == 175:\n            return 175\n        if n == 176:\n            return 176\n        if n == 177:\n            return 177\n        if n == 178:\n        "
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #instr = list(str)\n    #for i in range(len(instr)):\n        #instr[i] = ord(instr[i])\n    min_rotations = 0\n    rotations = 0\n    for i in range(len(str)):\n        if (ord(str[i])>=65 and ord(str[i])<=90):\n            rotations = rotations + 1\n        elif (ord(str[i])>=97 and ord(str[i])<=122):\n            rotations = rotations + 1\n        elif (ord(str[i])>=123 and ord(str[i])<=122):\n            rotations = rotations + 1\n        elif (ord(str[i])>=65 and ord(str[i])<=90):\n            rotations = rotations + 1\n    return min_rotations, rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    while (rotations < len(str)):\n        if (str[rotations] == str[rotations - 1]):\n            rotations += 1\n        else:\n            break\n    return rotations\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = s.find(ch) # get the index of the first occurrence of char\n    if i >= 0: \n        s = s[0:i] + s[i+1:] # set the string from beginning to end\n    else:\n        pass\n    i = s.find(ch) # get the index of the last occurrence of char\n    if i >= 0: \n        s = s[i+1:] # set the string from end to beginning\n    else:\n        pass\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = len(s)\n    if l<1: \n        return s\n    elif l<=2: \n        return s[:1]+s[-1]+s\n    else: \n        count = 1\n        for i in range(2,l): \n            if s[i]==ch: \n                count+=1\n            else: \n                count=1\n                break\n        \n        if count<=1: \n            return s[:l-count]+s[-1]\n        else: \n            return s[:l-count]+s[:count-1]+s[-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    if len(s) == 1: \n        if s[0] == ch: \n            print(s[1:], \"is removed\") \n            s = s[1:] \n        else: \n            print(\"The string can not be empty\") \n            return \n    else: \n        if s[0] == ch: \n            first_occ = s[0] \n            s = s[1:] \n        else: \n            print(\"The string can not be empty\") \n            return \n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    else: \n        last_occ = s[-1] \n        s = s[:-1] \n    print(first_occ, \"is removed from the string\") \n    print(last_occ, \"is removed from the string\") \n    return s\n    \ndef remove_double(s): \n    '''\n    Write a python function to remove all the double occurrences of a given character from the string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    if len(s) == 1: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == s[1]: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == s[-1]: \n        print(\"The string can not be empty\") \n        return \n    if s[-1] == s[-2]: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef replace(s, old, new): \n    '''\n    Write a python function to replace a given character with a given character from the string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    if len(s) == 1: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == old: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == s[-1]: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == s[-2]: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef replace_with(s, old, new): \n    '''\n    Write a python function to replace a given character with a given character from the string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    if len(s) == 1: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == old: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == s[-1]: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef capitalize(s): \n    '''\n    Write a python function to capitalize a given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef case_insensitive(s): \n    '''\n    Write a python function to replace all the letters of a given string with a given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    if len(s) == 1: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef count_unique_chars(s): \n    '''\n    Write a python function to count the number of unique characters in a given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef delete_at_end(s): \n    '''\n    Write a python function to delete a given character from the end of a given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef delete_at_beginning(s): \n    '''\n    Write a python function to delete a given character from the beginning of a given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef delete_at_start(s): \n    '''\n    Write a python function to delete a given character from the start of a given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef find(s,ch): \n    '''\n    Write a python function to find a given character in a given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == ch: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef find_all(s,ch): \n    '''\n    Write a python function to find all the occurrences of a given character in a given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == ch: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef count_occurrences(s,ch): \n    '''\n    Write a python function to find the number of occurrences of a given character in a given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == ch: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef count_occurrences_with_char(s,ch): \n    '''\n    Write a python function to find the number of occurrences of a given character in a given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == ch: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef delete_all_occurrences(s): \n    '''\n    Write a python function to delete all occurrences of a given character from the given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef delete_occurrences(s,ch): \n    '''\n    Write a python function to delete all occurrences of a given character from the given string.\n    '''\n    if len(s) == 0: \n        print(\"The string can not be empty\") \n        return \n    if s[0] == ch: \n        print(\"The string can not be empty\") \n        return \n    print(\"The string can not be empty\") \n    return \n    \ndef find_all_occurrences(s,ch): \n    '''\n    Write a python function to find all the occurrences of a given character in a given string.\n    ''"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == -1:\n        return False\n    else:\n        left = s.find(ch)\n        return s[:left] + s[left+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)>0:\n        # if first occurrence is found, then it will be replaced with the last occurrence.\n        s=s[1:]\n        # if last occurrence is found, then it will be replaced with the first occurrence.\n        s=s[:len(s)-1]\n        \n        # if last occurrence is not found, then it will be replaced with nothing.\n        if len(s)==0:\n            s=s[1:]\n    \n    # checking whether the string is empty or not.\n    if len(s)==0:\n        # if string is empty, it will be replaced with nothing.\n        s=s[1:]\n        # if string is not empty, it will be replaced with the first occurrence of the character.\n        return ch+s\n    \n    # if string is not empty, it will be replaced with the first occurrence of the character.\n    return ch+s[0]+remove_Occ(s,ch+s[0])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:ch]+s[-ch-1]+s[:-ch-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=len(s)\n    if ch in s: \n        s=s.replace(ch,'')\n        l-=1\n    if ch in s:\n        return s\n    else:\n        return ''\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s_1 = str.lower(s)\n    l = len(s_1)\n    \n    for i in range(0,l):\n        if s[i] == ch:\n            s_1 = s_1.replace(s[i],\"\")\n    return s_1\n    "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch = list(ch)\n    ch.pop(0)\n    ch.pop()\n    return ''.join(ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code goes here\n    # remove first occurrence, if there is one, save to output\n    if s[0] == ch: \n        s = s[1:] \n    # remove last occurrence, if there is one, save to output\n    elif s[-1] == ch: \n        s = s[:-1]\n    # else if it's empty, return empty string\n    else: \n        s = \"\"\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Assign a variable to the sorted matrix\n    sorted_matrix = [ [0 for i in range(len(M[0]))] for j in range(len(M))]\n    # Sort each row\n    for row in range(len(M)):\n        for col in range(len(M[0])):\n            sorted_matrix[row][col] = M[row][col]\n            if M[row][col] > 0:\n                row_index = row\n                col_index = col\n    # Calculate the sum of each row\n    for row in range(len(M)):\n        for col in range(len(M[0])):\n            sorted_matrix[row][col] = M[row][col] + sorted_matrix[row_index][col_index]\n            col_index = col\n        row_index = row\n    # Sort the sorted matrix\n    for row in range(len(M)):\n        for col in range(len(M[0])):\n            M[row][col] = sorted_matrix[row_index][col]\n            col_index = col\n        row_index = row\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #for row in M:\n        #print(row)\n    for i in range(len(M)):\n        for j in range(i+1,len(M)):\n            #if the sum of the rows is greater than the sum of columns\n            #then the matrix is not sorted\n            if sum(M[i]) > sum(M[j]):\n                #print(f\"row {i} and col {j} is not sorted\")\n                break\n            else:\n                #print(f\"row {i} and col {j} is sorted\")\n                M[i], M[j] = M[j], M[i]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = np.array(M)\n    rows_sum = np.sum(matrix, axis=1)\n    max_rows = np.argmax(rows_sum) + 1\n    return np.sort(matrix, axis=0)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M=M.T\n    if len(M)==0:\n        return\n    M=M.T\n    for j in range(len(M)):\n        sum=0\n        for i in range(len(M)):\n            sum+=M[i][j]\n        M[j].append(sum)\n    for i in range(len(M)):\n        for j in range(len(M)):\n            if M[j][i]>0:\n                M[j][i]=M[j][i]+M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # M = [[3,7,1],[2,4,5],[6,8,9]]\n    # print(M)\n    # M = [\n    #     [3,7,1],[2,4,5],[6,8,9],\n    #     [1,2,3],[4,5,6],[7,8,9]\n    # ]\n    M = [\n        [3,7,1,2,6,8],\n        [2,4,5,3,6,8],\n        [6,8,9,1,2,3],\n        [1,2,3,4,5,6],\n        [4,5,6,7,8,9]\n    ]\n    # M = [[3,7,1,2,6,8,3,4,5,7],[2,4,5,3,6,8,7,5,4,3]]\n    # M = [[3,7,1],[2,4,5],[6,8,9],[3,4,5],[7,8,9]]\n    # M = [[3,7,1,2,6,8,3,4,5,7],[2,4,5,3,6,8,7,5,4,3],[1,2,3,4,5,6,7,8,9,3],[4,5,6,7,8,9,1,2,3,4]]\n    # M = [[3,7,1,2,6,8,3,4,5,7],[2,4,5,3,6,8,7,5,4,3],[1,2,3,4,5,6,7,8,9,3],[4,5,6,7,8,9,1,2,3,4]]\n    # M = [[3,7,1,2,6,8,3,4,5,7],[2,4,5,3,6,8,7,5,4,3],[1,2,3,4,5,6,7,8,9,3],[4,5,6,7,8,9,1,2,3,4]]\n    # M = [[3,7,1,2,6,8,3,4,5,7],[2,4,5,3,6,8,7,5,4,3],[1,2,3,4,5,6,7,8,9,3],[4,5,6,7,8,9,1,2,3,4]]\n    # M = [[3,7,1,2,6,8,3,4,5,7],[2,4,5,3,6,8,7,5,4,3],[1,2,3,4,5,6,7,8,9,3],[4,5,6,7,8,9,1,2,3,4]]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort()\n    i=0\n    j=0\n    \n    while(i<len(M)):\n        if M[i][0]!=M[j][0]:\n            temp=M[i][0]\n            M[i][0]=M[j][0]\n            M[j][0]=temp\n            i+=1\n            j+=1\n        i+=1\n        j+=1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (M[i][j] > M[j][i]):\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M[0])\n    for i in range(n):\n        if M[0][i] == 0:\n            return\n        elif M[0][i] < 0:\n            M[0][i] *= -1\n    \n    M.sort(reverse=True)\n    for i in range(n):\n        for j in range(n):\n            if M[i][j] == 0:\n                M[i][j] = -M[i][j]\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if M[i][j] < 0:\n                M[i][j] *= -1\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n    for i in range(len(M)):\n        for j in range(len(M)):\n            if M[i][j] == s:\n                M[i][j], M[j][i] = M[j][i], M[i][j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    def sort_matrix_in_ascending_order(matrix, sum_rows):\n        '''\n        We're going to use the total sum of the rows.\n        We're going to start by sorting the rows.\n        '''\n        \n        # We're going to store the new matrix, so we'll have the same size as the input matrix\n        new_matrix = []\n        # We're going to sort the rows\n        for row in range(len(matrix)):\n            # We're going to store the total sum of the rows\n            total_sum_of_rows = 0\n            # We're going to iterate through the rows of the matrix\n            for column in range(len(matrix[row])):\n                # We're going to store the total sum of the columns\n                total_sum_of_columns = 0\n                # We're going to iterate through the columns of the matrix\n                for column_index in range(len(matrix[row])):\n                    # If the current row is the index of the column we're iterating through\n                    if column_index == column:\n                        # We're going to add the value of the matrix[row][column] to the total sum of the rows\n                        total_sum_of_columns += matrix[row][column]\n                # We're going to store the new row with the total sum of the columns\n                new_row = [total_sum_of_columns, total_sum_of_rows]\n                # We're going to append the new row to the matrix\n                new_matrix.append(new_row)\n                # We're going to set the new_row equal to the current row multiplied by the number of columns of the matrix\n                total_sum_of_rows = new_row[1]\n        # We're going to return the matrix\n        return new_matrix\n        \n    # We're going to create a new matrix with the same size as the input matrix\n    new_matrix = []\n    \n    # We're going to iterate through the rows of the matrix\n    for row in range(len(matrix)):\n        # We're going to iterate through the columns of the matrix\n        for column in range(len(matrix[row])):\n            # If the current row is the index of the column we're iterating through\n            if column == 0:\n                # We're going to add the value of the matrix[row][column] to the total sum of the rows\n                new_row = [matrix[row][column], matrix[row][column + 1]]\n                # We're going to append the new row to the matrix\n                new_matrix.append(new_row)\n            # If the current row is the index of the column we're iterating through\n            elif column == len(matrix[row]) - 1:\n                # We're going to add the value of the matrix[row][column] to the total sum of the rows\n                new_row = [matrix[row][column - 1], matrix[row][column]]\n                # We're going to append the new row to the matrix\n                new_matrix.append(new_row)\n            else:\n                # We're going to add the value of the matrix[row][column] to the total sum of the columns\n                new_row = [matrix[row][column - 1], matrix[row][column + 1], matrix[row][column]]\n                # We're going to append the new row to the matrix\n                new_matrix.append(new_row)\n    # We're returning the matrix\n    return new_matrix\n    \n    \ndef can_add(matrix, row, column, total_sum_of_rows, total_sum_of_columns):\n    '''\n    A helper function for test_matrix_can_add that returns True if the given matrix can be added, False otherwise.\n    '''\n    \n    # We're going to iterate through the rows of the matrix\n    for row_index in range(len(matrix)):\n        # We're going to iterate through the columns of the matrix\n        for column_index in range(len(matrix[row_index])):\n            # If the current row is the index of the column we're iterating through\n            if column_index == column:\n                # We're going to add the value of the matrix[row][column] to the total sum of the rows\n                total_sum_of_rows += matrix[row_index][column]\n                # We're going to check if the total sum of the rows is equal to the number of columns of the matrix\n                if total_sum_of_rows == total_sum_of_columns:\n                    # We're going to return True, since we can add the given matrix\n                    return True\n    # We're going to return False if the total sum of the rows is greater than the total sum of columns\n    return False\n    \n    \ndef test_matrix_can_add():\n    '''\n    A helper function to test the test_matrix_can_add function\n    '''\n    \n    # We're going to create a new matrix with the same size as the input matrix\n    matrix = []\n    \n    # We're going to iterate through the rows of the matrix\n    for row in range(5):\n        # We're going to iterate through the columns of the matrix\n        for column in range(5):\n            # If the current row is the index of the column we're iterating through\n            if column == 4:\n                # We're going to add the value of the matrix[row][column] to the total sum of the rows\n                matrix.append([row, column, row, column, row])\n            else:\n                # If the current row is the index of the column we're iterating through\n                if column == 0:\n                    # We're going to add the value of the matrix[row][column] to the total sum of the rows\n                    matrix.append([row, column, row, column, row + 1])\n                # If the current row is the index of the column we're iterating through\n                elif column == len(matrix[row]) - 1:\n                    # We're going to add the value of the matrix[row][column] to the total sum of the rows\n                    matrix.append([row, column, row + 1, column, row + 2])\n                else:\n                    # We're going to add the value of the matrix[row][column] to the total sum of the columns\n                    matrix.append([row, column, row + 1, column + 1, row + 2])\n    \n    # We're going to sort the matrix in ascending order according to the sum of the rows\n    matrix = sort_matrix_in_ascending_order(matrix, 0)\n    \n    # We're going to check if the matrix can be added\n    if can_add(matrix, 0, 4, 0, 4):\n        print(\"Can add\")\n    else:\n        print(\"Not can add\")\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v=h*b\n    for i in range(l,b):\n        for j in range(i+1,b):\n            for k in range(j+1,b):\n                v=max(v,abs(l-i)*abs(j-j)*abs(k-k))\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*h)/2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area_r=math.sqrt(l*b*h)\n    volume=b*h*math.pi\n    volume=volume*area_r\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if (l<0 or b<0 or h<0) : \n        print(\"Volume of a Triangle is infinite.\")\n        return None\n    print('Volume of a Triangle is :' + str(3.14*(b**2) - 3.14*(l**2) - 3.14*(h**2)))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    L = (b-l)*h\n    A = (l+b)/2\n    r = (L*h)\n    volume = 4*L*(((3*L*(A-b))-r)/3)\n    return volume\ndef find_Volume_again(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    L = (b-l)*h\n    A = (l+b)/2\n    r = (L*h)\n    volume = 4*L*(((3*L*(A-b))-r)/3)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a,b,c=l,b,h\n    v=a*(b*c)/(a**2+b**2+c**2)\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0 \n    for i in range(b,h+1) : \n        for j in range(l,i+1) :\n            volume += j*j \n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    '''\n    Convert the height and width of the prism to meters\n    '''\n    '''\n    Use the formula\n    \n    Volume = width^2 * height^2\n    '''\n    #Use a for loop for the height and width of the prism.\n    #Use a for loop to find the volume of the prism.\n    #Use a for loop to divide the height and width of the prisce by 100\n    '''\n    This formula gives the volume of the tetrahedron\n    '''\n    '''\n    Use the formula\n    Volume = width^2 * height^2 * a\n    '''\n    #Use a for loop to divide the height and width of the prisce by 100\n    #Use a for loop to divide the volume of the prisce by 1000\n    #Use a for loop to divide the volume of the prisce by 100\n    '''\n    This formula gives the volume of the tetrahedron\n    '''\n    volume = h*b*(2*l-b*h-h*b*l)/3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = int(l)\n    b = int(b)\n    h = int(h)\n    v = (b*(b+1))/2\n    print(\"Volume of the triangular prism with \",l, \" and \",b,\" and \",h,\" is\",(v*h))\n    \ndef main():\n    l,b,h = input(\"Enter the dimensions of the triangle (l,b,h): \").split()\n    l,b,h = int(l),int(b),int(h)\n    find_Volume(l,b,h)\n    \nmain()"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    i=0\n    v=0\n    while i<(len(l)-1):\n        if l[i]*l[i+1]>h:\n            break\n        else:\n            if l[i]==l[i+1]:\n                v+=l[i]*l[i+1]\n                i+=1\n            else:\n                v+=l[i]*l[i+1]\n                v=v+l[i+1]*l[i]\n                i+=2\n    return(v)\nprint(find_Volume([1,2,3],[2,3,4],[5,6,7]))"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # define a regex pattern\n    pattern = r\"([a-zA-Z0-9\\-_]+)_\"\n    # find all the matches\n    matches = re.findall(pattern, text)\n    # convert each match to lowercase\n    lowercase = []\n    for match in matches:\n        lowercase.append(match.lower())\n    # if the result is a sequence and contains lowercase letters\n    return len(lowercase) >= 2 and any(char.isupper() for char in lowercase)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(\\W|\\S)(\\d+)')\n    return pattern.match(text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not text:\n        return False\n    else:\n        text = text.lower()\n        for i in range(len(text)):\n            if text[i] not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'):\n                return False\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase = text.lower()\n    text_lowercase_underscore = text_lowercase.replace(\" \", \"_\")\n    if re.match(\"[a-zA-Z]\",text_lowercase_underscore):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    for char in text:\n        if not (char.isalpha() or char.isspace() or char.isdigit()):\n            return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lower = text.lower()\n    text_lower = text_lower.replace(' ','')\n    text_lower = text_lower.replace('-',' ')\n    text_lower = text_lower.replace('_',' ')\n    text_lower = text_lower.replace('.',' ')\n    text_lower = text_lower.replace('!',' ')\n    text_lower = text_lower.replace('?',' ')\n    text_lower = text_lower.replace('.',' ')\n    text_lower = text_lower.replace('<',' ')\n    text_lower = text_lower.replace('>',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower = text_lower.replace(']',' ')\n    text_lower = text_lower.replace('{',' ')\n    text_lower = text_lower.replace('}',' ')\n    text_lower = text_lower.replace('[',' ')\n    text_lower "
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #Iterate through the string.\n    for letter in text:\n        if letter.isalpha():\n            if letter.islower():\n                return True\n    #If the input string does not contain a letter, return false\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub('[^a-zA-Z0-9_]+','', text.lower())\n    return text\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text) < 3:\n        return False\n    else:\n        return text.count('_') > 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return text.replace('_',' ').lower().count('_') == 0\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square = a**2\n    return square\n    \ndef square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square = a**2\n    return square\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return(4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4/3) * a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a)!= int:\n        raise TypeError(\"Invalid type\")\n    if a < 0:\n        raise ValueError(\"Invalid size\")\n    if a == 0:\n        return 0\n    return a*a + 2*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # HINT: You may want to test your function with different inputs, if it works return the result!\n    \n    perimeter = 0\n    if a!= 0:\n        perimeter = 2 * a + 2\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return pow(a, 2) + pow(a, 2) + pow(a, 2) + pow(a, 2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a < 0:\n        print(\"Input must be non-negative\")\n    elif type(a)!= int:\n        print(\"Input must be of type int\")\n    else:\n        return a * 4 + 2 * a + (a * 4) + 2 * a * 2 + a * 2\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    clean_string = []\n    for i in range(len(string)):\n        if string[i] not in clean_string:\n            clean_string.append(string[i])\n    return clean_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if not isinstance(string, str) or not string: return string\n    arr = []\n    for char in string:\n        if char in arr:\n            arr.remove(char)\n        else: arr.append(char)\n    return \"\".join(arr)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.replace(string[0],\"\").replace(string[-1],\"\").split(\",\")\ndef main():\n    s = input(\"Enter string: \")\n    m = input(\"Enter m: \")\n    print(s, m)\n    s = str_to_list(s)\n    m = str_to_list(m)\n    print(s, m)\n    x = list(set(s) - set(m))\n    print(x)\n    print(len(x))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = []\n    for c in string:\n        if c in string:\n            l.append(c)\n    return l\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = list(string)\n    for i in range(len(string)):\n        if string[i] not in string[0:i]:\n            string[i] = string[i].upper()\n    return ''.join(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result_list = []\n    for i in range(len(string)):\n        if string[i] in string[:i]:\n            result_list.append(string[i])\n    return result_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    char_list = []\n    for i in range(0, len(string), 1):\n        if string[i] not in char_list:\n            char_list.append(string[i])\n        elif string[i] in char_list:\n            char_list.remove(string[i])\n    return char_list\n    \ndef search_char(string, char_list):\n    '''\n    Write a function to search a string for a given character\n    '''\n    \n    index = 0\n    found = 0\n    while index < len(string):\n        if string[index] in char_list:\n            found += 1\n        index += 1\n    if found > 0:\n        return True\n    else:\n        return False\n    \ndef main():\n    \n    print('Enter the string: ')\n    string = input()\n    char_list = str_to_list(string)\n    print('The characters in the given string are: ')\n    for char in char_list:\n        print(char)\n    search_char_response = search_char(string, char_list)\n    if search_char_response == True:\n        print(\"The character is present in the given string\")\n    else:\n        print(\"The character is not present in the given string\")\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a list of the characters\n    lst = list(string)\n    # get the index of the character\n    index = lst.index(string[0])\n    # now put it back in the original\n    lst[index] =''\n    # convert the list to a string\n    string_to_list = ''.join(lst)\n    return string_to_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output_string = \"\"\n    for char in string:\n        if char in first_string:\n            output_string += char\n        else:\n            output_string += '.'\n    return output_string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    for c in string:\n        if c in string:\n            output.append(c)\n    return ''.join(output)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Your code here\n    duplicate=[]\n    for i in arraynums:\n        if i not in duplicate:\n            duplicate.append(i)\n    return len(duplicate)>0\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # Solve\n    # O(n) time\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # print(arraynums)\n    # print(arraynums.count(arraynums[0]))\n    # print(len(arraynums))\n    # print(set(arraynums))\n    # print(arraynums.index(arraynums[0]))\n    if arraynums.count(arraynums[0]) > 1:\n        return 'False'\n    else:\n        return 'True'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums = arraynums.copy()\n    duplicates = []\n    for i in range(len(arraynums)):\n        if len(arraynums) > 1:\n            if arraynums[i] == arraynums[i + 1]:\n                duplicates.append(i)\n                arraynums.pop(i)\n    return len(duplicates) == 0\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # set duplicate to array\n    duplicate_array = []\n    for num in arraynums:\n        if num not in duplicate_array:\n            duplicate_array.append(num)\n    # print(duplicate_array)\n    # return count\n    return len(duplicate_array) == 0\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    array = sorted(array)\n    num_set = set()\n    for num in array:\n        if num in num_set:\n            return True\n        else:\n            num_set.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return arraynums in arraynums[:]\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # get list of unique numbers\n    duplicates = list(set(arraynums))\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]:\n        return False\n    elif x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 0:\n        return False\n    if (x - 1) % 3 == 0:\n        return True\n    if (x - 1) % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 1 == 0:\n        return True\n    else:\n        return False\n        \nprint(is_woodall(int(input(\"Enter a number: \"))))\nprint(is_woodall(int(input(\"Enter a number: \"))))\nprint(is_woodall(int(input(\"Enter a number: \"))))\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%1 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2:\n        return True\n    if x > 2:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 10: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x%2==0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x <= 0) :\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 1:\n        return False\n    elif x == 1:\n        return True\n    elif x <= 1:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    num = num.split()\n    num1 = ''\n    num2 = ''\n    for i in range(len(num)):\n        if i%2 == 0:\n            num1 = num[i]\n        else:\n            num2 = num[i]\n    num1 = int(num1)\n    num2 = int(num2)\n    rev_num = (num1 - num2)\n    if rev_num < 0:\n        return 'Error'\n    else:\n        return 'true'\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    rev_num = str(num)[::-1]\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_int = int(num)\n    if num_int < 2:\n        return 'Not one'\n    else:\n        return str(num_int) +'is one less than twice its reverse'\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        num = -num\n    rev = 0\n    while num > 0:\n        rev = rev*10 + num%10\n        num //= 10\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        print(\"Please enter a positive integer.\")\n    else:\n        if num == 1:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0: \n        return \"Incorrect Input\"\n    elif num == 0: \n        return \"0\"\n    elif num == 1: \n        return \"1\"\n    else:\n        return \"Not Equal\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    if num == 0:\n        return \"Negative Number\"\n    \n    elif num < 0:\n        rev(num * -1)\n        return num\n    else:\n        return num * -1\n        \n        \n    \n    \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num*2\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    new_num=str(num)\n    rev_num=new_num[::-1]\n    rev_reverse=rev_num[::-1]\n    rev_check=rev_reverse[::-1]\n    if int(rev_check)==num:\n        return True\n    else:\n        return False\n    \nprint(rev(1))\nprint(rev(2))\nprint(rev(3))\nprint(rev(4))\nprint(rev(5))\nprint(rev(6))\nprint(rev(7))\nprint(rev(8))\nprint(rev(9))\nprint(rev(10))\nprint(rev(11))\nprint(rev(12))\nprint(rev(13))\nprint(rev(14))\nprint(rev(15))\nprint(rev(16))\nprint(rev(17))\nprint(rev(18))\nprint(rev(19))\nprint(rev(20))\nprint(rev(21))\nprint(rev(22))\nprint(rev(23))\nprint(rev(24))\nprint(rev(25))\nprint(rev(26))\nprint(rev(27))\nprint(rev(28))\nprint(rev(29))\nprint(rev(30))\nprint(rev(31))\nprint(rev(32))\nprint(rev(33))\nprint(rev(34))\nprint(rev(35))\nprint(rev(36))\nprint(rev(37))\nprint(rev(38))\nprint(rev(39))\nprint(rev(40))\nprint(rev(41))\nprint(rev(42))\nprint(rev(43))\nprint(rev(44))\nprint(rev(45))\nprint(rev(46))\nprint(rev(47))\nprint(rev(48))\nprint(rev(49))\nprint(rev(50))\nprint(rev(51))\nprint(rev(52))\nprint(rev(53))\nprint(rev(54))\nprint(rev(55))\nprint(rev(56))\nprint(rev(57))\nprint(rev(58))\nprint(rev(59))\nprint(rev(60))\nprint(rev(61))\nprint(rev(62))\nprint(rev(63))\nprint(rev(64))\nprint(rev(65))\nprint(rev(66))\nprint(rev(67))\nprint(rev(68))\nprint(rev(69))\nprint(rev(70))\nprint(rev(71))\nprint(rev(72))\nprint(rev(73))\nprint(rev(74))\nprint(rev(75))\nprint(rev(76))\nprint(rev(77))\nprint(rev(78))\nprint(rev(79))\nprint(rev(80))\nprint(rev(81))\nprint(rev(82))\nprint(rev(83))\nprint(rev(84))\nprint(rev(85))\nprint(rev(86))\nprint(rev(87))\nprint(rev(88))\nprint(rev(89))\nprint(rev(90))\nprint(rev(91))\nprint(rev(92))\nprint(rev(93))\nprint(rev(94))\nprint(rev(95))\nprint(rev(96))\nprint(rev(97))\nprint(rev(98))\nprint(rev(99))\nprint(rev(100))\nprint(rev(101))\nprint(rev(102))\nprint(rev(103))\nprint(rev(104))\nprint(rev(105))\nprint(rev(106))\nprint(rev(107))\nprint(rev(108))\nprint(rev(109))\nprint(rev(110))\nprint(rev(111))\nprint(rev(112))\nprint(rev(113))\nprint(rev(114))\nprint(rev(115))\nprint(rev(116))\nprint(rev(117))\nprint(rev(118))\nprint(rev(119))\nprint(rev(120))\nprint(rev(121))\nprint(rev(122))\nprint(rev(123))\nprint(rev(124))\nprint(rev(125))\nprint(rev(126))\nprint(rev(127))\nprint(rev(128))\nprint(rev(129))\nprint(rev(130))\nprint(rev(131))\nprint(rev(132))\nprint(rev(133))\nprint(rev(134))\nprint(rev(135))\nprint(rev(136))\nprint(rev(137))\nprint(rev(138))\nprint(rev(139))\nprint(rev(140))\nprint(rev(141))\nprint(rev(142))\nprint(rev(143))\nprint(rev(144))\nprint(rev(145))\nprint(rev(146))\nprint(rev(147))\nprint(rev(148))\nprint(rev(149))\nprint(rev(150))\nprint(rev(151))\nprint(rev(152))\nprint(rev(153))\nprint(rev(154))\nprint(rev(155))\nprint(rev(156))\nprint(rev(157))\nprint(rev(158))\nprint(rev(159))\nprint(rev(160))\nprint(rev(161))\nprint(rev(162))\nprint(rev(163))\nprint(rev(164))\nprint(rev(165))\nprint(rev(166))\nprint(rev(167))\nprint(rev(168))\nprint(rev(169))\nprint(rev(170))\nprint(rev(171))\nprint(rev(172))\nprint(rev(173))\nprint(rev(174))\nprint(rev(175))\nprint(rev(176))\nprint(rev(177))\nprint(rev(178))\nprint(rev(179))\nprint(rev(180))\nprint(rev(181))\nprint(rev(182))\nprint(rev(183))\nprint(rev(184))\nprint(rev(185))\nprint(rev(186))\nprint(rev(187))\nprint(rev(188))\nprint(rev(189))\nprint(rev(190))\nprint(rev(191))\nprint(rev(192))\nprint(rev(193))\nprint(rev(194))\nprint(rev(195))\nprint(rev(196))\nprint(rev(197))\nprint(rev(198))\nprint(rev(199))\nprint(rev(200))\nprint(rev(201))\nprint(rev(202))\nprint(rev(203))\nprint(rev(204))\nprint(rev(205))\nprint(rev(206))\nprint(rev(207))\nprint(rev(208))\nprint(rev(209))\nprint(rev(210))\nprint(rev(211))\nprint(rev(212))\nprint(rev(213))\nprint(rev(214))\nprint(rev(215))\nprint(rev(216))\nprint(rev(217))\nprint(rev(218))\nprint(rev(219))\nprint(rev(220))\nprint(rev(221))\nprint(rev(222))\nprint(rev(223))\nprint(rev(224))\nprint(rev(225))\nprint(rev(226))\nprint(rev(227))\nprint(rev(228))\nprint(rev(229))\nprint(rev(230))\nprint(rev(231))\nprint(rev(232))\nprint(rev(233))\nprint(rev(234))\nprint(rev(235))\nprint(rev(236))\nprint(rev(237))\nprint(rev(238))\nprint(rev(239))\nprint(rev(240))\nprint(rev(241))\nprint(rev(242))\nprint(rev(243))\nprint(rev(244))\nprint(rev(245))\nprint(rev(246))\nprint(rev(247))\nprint(rev(248))\nprint(rev(249))\nprint(rev(250))\nprint(rev(251))\nprint(rev(252))\nprint(rev(253))\nprint(rev(254))\nprint(rev(255))\nprint(rev(256))\nprint(rev(257))\nprint(rev(258))\nprint(rev(259))\nprint(rev(260))\nprint(rev(261))\nprint(rev(262))\nprint(rev(263))\nprint(rev(264))\nprint(rev(265))\nprint(rev(266))\nprint(rev(267))\nprint(rev(268))\nprint(rev(269))\nprint(rev(270))\nprint(rev(271))\nprint(rev(272))\nprint(rev(273))\nprint(rev(274))\nprint(rev(275))\nprint(rev(276))\nprint(re"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    reverse = 0\n    reverse_num = 0\n    while num > 0:\n        remainder = num % 2\n        rev_num = num // 2\n        reverse_num = reverse_num * 2 + remainder\n        num = reverse_num\n        reverse = reverse * 2\n    if reverse == 0:\n        rev_num = reverse_num\n        return rev_num\n    else:\n        return -1"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maximum = arr[0]\n    for i in range(1,len(arr)) : \n        if arr[i] > maximum : \n            maximum = arr[i]\n    return maximum\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = arr[0]\n    for i in range(len(arr)) :\n        if arr[i] > num :\n            num = arr[i]\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # variables\n    max_num = 0\n    num_len = len(arr)\n    for i in arr:\n        for j in arr:\n            num = i + j\n            if num > max_num:\n                max_num = num\n    return max_num\n    \nif __name__ == \"__main__\":\n    print(find_Max_Num([1, 2, 3, 4, 5]))\n    print(find_Max_Num([1, 2, 2, 3, 4]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : return 0\n    \n    MAX_NUM = arr[0]\n    \n    for num in arr[1:] : \n        if num > MAX_NUM : \n            MAX_NUM = num\n    \n    return MAX_NUM\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(i,n):\n            if arr[i] > arr[j]:\n                arr[i],arr[j] = arr[j],arr[i]\n    return arr\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : return 0\n    \n    m = 0\n    for i in arr :\n        m = max(m, i)\n    return m\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : return 0\n    if len(arr) == 1 : return arr[0]\n    if arr[-1] > arr[-2] : \n        return arr[-1]\n    else : \n        return find_Max_Num(arr[:-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = -1\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = 0\n    for i in range(len(arr)):\n        if arr[i] > Max_Num:\n            Max_Num = arr[i]\n    return Max_Num\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return not x<y\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    else:\n        return False\ndef is_prime(x):\n    '''\n    Write a python function to check whether the given two integers have prime or not.\n    '''\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            return False\n    return True\ndef prime_check(x):\n    '''\n    Write a python function to check whether the given two integers have prime or not.\n    '''\n    if x == 2 or x == 3:\n        return True\n    if x > 1 and x < int(math.sqrt(x)):\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    return False\ndef prime_factors(x):\n    '''\n    Write a python function to check whether the given two integers have prime factors or not.\n    '''\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 3\n    if is_prime(x):\n        return prime_factors(x)\n    if x % 2 == 0 or x % 3 == 0:\n        return 0\n    for i in range(5, int(math.sqrt(x)) + 1, 6):\n        if x % i == 0:\n            return 0\n    return prime_factors(x - 1) + 1\ndef primes_up_to(x):\n    '''\n    Write a python function to check whether the given two integers have prime factors or not.\n    '''\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 3\n    if is_prime(x):\n        return primes_up_to(x)\n    if x % 2 == 0 or x % 3 == 0:\n        return 0\n    for i in range(5, int(math.sqrt(x)) + 1, 6):\n        if x % i == 0:\n            return 0\n    return primes_up_to(x - 1) + 1\ndef big_numbers(x):\n    '''\n    Write a python function to check whether the given two integers have big numbers or not.\n    '''\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 3\n    if x > 0 and is_prime(x):\n        return primes_up_to(x) + 1\n    if x > 0 and x % 2 == 0 or x % 3 == 0:\n        return 0\n    for i in range(5, int(math.sqrt(x)) + 1, 6):\n        if x % i == 0:\n            return 0\n    return primes_up_to(x - 1) + 1\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = [x for x in arr[1:] if x <= pivot]\n    right = [x for x in arr[1:] if x > pivot]\n    return quicksort(left) + [pivot] + quicksort(right)\ndef kthLargest(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    quicksort(arr)\n    return arr[len(arr) - k]\ndef kthLargest_2(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[k-1]\ndef kthLargest_3(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[k-1] if k >= 1 else -1\ndef kthLargest_4(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if k > 0 else -1\ndef kthLargest_5(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k-1] if len(arr) > k else -1\ndef kthLargest_6(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if len(arr) > k else -1\ndef kthLargest_7(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if k > 1 else -1\ndef kthLargest_8(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k - 1] if k >= 2 else -1\ndef kthLargest_9(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k-1] if k == 1 or k > len(arr) else -1\ndef kthLargest_10(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if k > 1 else -1\ndef kthLargest_11(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k - 1] if k == 1 or k > len(arr) else -1\ndef kthLargest_12(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if len(arr) > k else -1\ndef kthLargest_13(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if len(arr) == k and k >= 1 else -1\ndef kthLargest_14(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if k == len(arr) - 1 or len(arr) > k else -1\ndef kthLargest_15(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if len(arr) > k and k >= 1 else -1\ndef kthLargest_16(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if len(arr) > k and k >= 1 else -1\ndef kthLargest_17(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if len(arr) > k and k > 1 else -1\ndef kthLargest_18(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if len(arr) > k and k < k + 1 else -1\ndef kthLargest_19(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if len(arr) > k and k == 1 or k > len(arr) else -1\ndef kthLargest_20(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    return arr[-k] if len(arr) > k and k == 1 or k > len(arr) else -1\ndef kthLargest_21(arr, k):\n    '"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return -x\n    elif x < y:\n        return -y\n    return x\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = abs(x)\n    y = abs(y)\n    if x < y:\n        return 'Sign is less than zero'\n    elif x > y:\n        return 'Sign is greater than zero'\n    else:\n        return 'Sign is same'\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y<0) or (x>0 and y>0)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return x < y \n    else: \n        return y < x \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<y: \n        return True\n    else: \n        return False\n    \ndef check_Bishop_Move(x,y,c,d): \n    '''\n    Write a python function to check whether a bishop move is possible or not.\n    '''\n    if c==d: \n        return False\n    if (x>=0 and x<=3) and (y>=0 and y<=3): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return 1\n    elif y > x:\n        return -1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    #Converting the numbers\n    a = x \n    b = y\n    \n    #If the two numbers are equal then return the sign \n    if a == b: \n        return'sign'\n    elif a > b: \n        return'sign'\n    else:\n        return 'not'\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    elif x < y:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #Code here\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 3\n    if n==3:\n        return 5\n    if n%2==0:\n        return n/6\n    else:\n        return (n**2+3*n**2-n)/6\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while (i <= n):\n        if (n % i == 0):\n            return i\n        i += 1\n    return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 9\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 31\n    elif n == 8:\n        return 63\n    elif n == 9:\n        return 127\n    elif n == 10:\n        return 193\n    elif n == 11:\n        return 255\n    elif n == 12:\n        return 297\n    elif n == 13:\n        return 531\n    elif n == 14:\n        return 641\n    elif n == 15:\n        return 729\n    elif n == 16:\n        return 833\n    elif n == 17:\n        return 873\n    elif n == 18:\n        return 947\n    elif n == 19:\n        return 1047\n    elif n == 20:\n        return 1151\n    elif n == 21:\n        return 1321\n    elif n == 22:\n        return 1601\n    elif n == 23:\n        return 1741\n    elif n == 24:\n        return 1931\n    elif n == 25:\n        return 2071\n    elif n == 26:\n        return 2201\n    elif n == 27:\n        return 2351\n    elif n == 28:\n        return 2521\n    elif n == 29:\n        return 2761\n    elif n == 30:\n        return 2871\n    elif n == 31:\n        return 3201\n    elif n == 32:\n        return 3321\n    elif n == 33:\n        return 3541\n    elif n == 34:\n        return 3701\n    elif n == 35:\n        return 3841\n    elif n == 36:\n        return 4031\n    elif n == 37:\n        return 4241\n    elif n == 38:\n        return 4621\n    elif n == 39:\n        return 4741\n    elif n == 40:\n        return 4851\n    elif n == 41:\n        return 4941\n    elif n == 42:\n        return 5041\n    elif n == 43:\n        return 5381\n    elif n == 44:\n        return 5441\n    elif n == 45:\n        return 5601\n    elif n == 46:\n        return 5741\n    elif n == 47:\n        return 5841\n    elif n == 48:\n        return 5941\n    elif n == 49:\n        return 6041\n    elif n == 50:\n        return 6441\n    elif n == 51:\n        return 6541\n    elif n == 52:\n        return 6741\n    elif n == 53:\n        return 6841\n    elif n == 54:\n        return 6941\n    elif n == 55:\n        return 7041\n    elif n == 56:\n        return 7041\n    elif n == 57:\n        return 7441\n    elif n == 58:\n        return 7541\n    elif n == 59:\n        return 7551\n    elif n == 60:\n        return 7601\n    elif n == 61:\n        return 7741\n    elif n == 62:\n        return 7841\n    elif n == 63:\n        return 7941\n    elif n == 64:\n        return 8041\n    elif n == 65:\n        return 8141\n    elif n == 66:\n        return 8141\n    elif n == 67:\n        return 8551\n    elif n == 68:\n        return 8661\n    elif n == 69:\n        return 8781\n    elif n == 70:\n        return 9041\n    elif n == 71:\n        return 9551\n    elif n == 72:\n        return 9661\n    elif n == 73:\n        return 9781\n    elif n == 74:\n        return 10041\n    elif n == 75:\n        return 10141\n    elif n == 76:\n        return 10341\n    elif n == 77:\n        return 10641\n    elif n == 78:\n        return 10741\n    elif n == 79:\n        return 10841\n    elif n == 80:\n        return 10941\n    elif n == 81:\n        return 11041\n    elif n == 82:\n        return 11341\n    elif n == 83:\n        return 12351\n    elif n == 84:\n        return 13341\n    elif n == 85:\n        return 14341\n    elif n == 86:\n        return 15341\n    elif n == 87:\n        return 16341\n    elif n == 88:\n        return 17341\n    elif n == 89:\n        return 18341\n    elif n == 90:\n        return 19341\n    elif n == 91:\n        return 20041\n    elif n == 92:\n        return 20141\n    elif n == 93:\n        return 20241\n    elif n == 94:\n        return 20421\n    elif n == 95:\n        return 20621\n    elif n == 96:\n        return 20721\n    elif n == 97:\n        return 20821\n    elif n == 98:\n        return 20921\n    elif n == 99:\n        return 21021\n    elif n == 100:\n        return 21141\n    elif n == 101:\n        return 21241\n    elif n == 102:\n        return 21341\n    elif n == 103:\n        return 21441\n    elif n == 104:\n        return 21541\n    elif n == 105:\n        return 21641\n    elif n == 106:\n        return 21741\n    elif n == 107:\n        return 21841\n    elif n == 108:\n        return 21941\n    elif n == 109:\n        return 22041\n    elif n == 110:\n        return 22141\n    elif n == 111:\n        return 22241\n    elif n == 112:\n        return 22341\n    elif n == 113:\n        return 22441\n    elif n == 114:\n        return 22541\n    elif n == 115:\n        return 22641\n    elif n == 116:\n        return 22741\n    elif n == 117:\n        return 22841\n    elif n == 118:\n        return 22941\n    elif n == 119:\n        return 23041\n    elif n == 120:\n        return 23141\n    elif n == 121:\n        return 23241\n    elif n == 122:\n        return 23341\n    elif n == 123:\n        return 23441\n    elif n == 124:\n        return 23541\n    elif n == 125:\n        return 23641\n    elif n == 126:\n        return 23741\n    elif n == 127:\n        return 23841\n    elif n == 128:\n        return 23941\n    elif n == 129:\n        return 24041\n    elif n == 130:\n        return 24141\n    elif n == 131:\n        return 24241\n    elif n == 132:\n        return 24341\n    elif n == 133:\n        return 24441\n    elif n == 134:\n        return 24541\n    elif n == 135:\n        return 24641\n    elif n == 136:\n        return 24741\n    elif n == 137:\n        return 24841\n    elif n == 138:\n        return 24941\n    elif n == 139:\n        return 25041\n    elif n == 140:\n        return 25141\n    elif n == 141:\n        return 25241\n    elif n == 142:\n        return 25341\n    elif n == 143:\n        return 25441\n    elif n == 144:\n        return 25541\n    elif n == 145:\n        return 25641\n    elif n == 146:\n        return 25741\n    elif n == 147:\n        return 25841\n    elif n == 148:\n        return 25941\n    elif n == 149:\n        return 26041\n    elif n == 150:\n        return 26141\n    elif n == 151:\n        return 26241\n    elif n == 152:\n        return 26341\n    elif n == 153:\n        return 26441\n    elif n == 154:\n        return 26541\n    elif n == 155:\n        return 26641\n    eli"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0: \n        print(\"n must be greater than 0\") \n    elif n == 1: \n        print(\"1\") \n    elif n == 2: \n        print(\"2\") \n    elif n == 3: \n        print(\"3\") \n    elif n == 4: \n        print(\"4\") \n    elif n == 5: \n        print(\"5\") \n    elif n == 6: \n        print(\"6\") \n    elif n == 7: \n        print(\"7\") \n    elif n == 8: \n        print(\"8\") \n    elif n == 9: \n        print(\"9\") \n    elif n > 9: \n        print(\"n must be less than or equal to 9\") \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    n = int(n)\n    a = int(n/2)\n    \n    if n < a:\n        return 'Not a valid number'\n    elif n == a:\n        return n\n    elif n == 2*a:\n        return 2\n    elif n == 3*a:\n        return 3\n    elif n == 4*a:\n        return 4\n    else:\n        return n**(1/3)\n        \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = n\n    while a%2 == 0:\n        a /= 2\n    print(a)\n    return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n % 2 == 0: \n        return (n // 2) ** 2 + (n // 2) \n    else: \n        return (n // 2) ** 2 \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<=1: \n        return n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<=1: \n        return n\n    else: \n        return (n-1)**2 + is_octagonal(n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 1\n    while n > 1:\n        num = num * 3 + 1\n        n = n - 1\n    return num\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    i = 0\n    n = len(s)\n    n_sum = 0\n    while i < n:\n        dig = int(s[i:i+len(s)])\n        if n_sum == 0:\n            n_sum += dig\n        else:\n            n_sum += dig * (dig+1)\n        i += 1\n    return n_sum\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        count += 1\n        for j in range(i,len(s)):\n            if int(s[i:j+1]) == int(s[i:j+1][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    c = defaultdict(int)\n    \n    # To store the sum of digits of the length of the substring\n    sum = 0\n    \n    # For each substring of length k\n    for i in range(0, len(s)):\n        # To store the sum of digits of the substring\n        sum = 0\n        \n        # To iterate over the string of length k\n        for j in range(i, len(s)):\n            sum += int(s[j])\n            \n            # To stop if we reached the end of the substring\n            if sum == sum:\n                c[s[i:j+1]] += 1\n                break\n    \n    return c\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    N = len(s)\n    d = defaultdict(int)\n    for i in range(N):\n        d[s[i]] += 1\n    ans = 0\n    for i in d:\n        ans += d[i]*(d[i]+1)//2\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #create a dict of (num, count) and sort it by count\n    sub_string_dict = defaultdict(int)\n    for i in range(len(s)):\n        sub_string_dict[s[i]] = sub_string_dict[s[i]] + 1\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    count = 0\n    s_dic = {}\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_sub_dig(str):\n        '''\n        Count the number of substrings with the sum of their digits equal to their length.\n        '''\n        cnt = 0\n        for i in range(len(str)):\n            if str[i] == '0' and str[i+1] == '0':\n                cnt+=1\n            if str[i] == '0' and str[i+1] == '1':\n                cnt+=1\n            if str[i] == '1' and str[i+1] == '0':\n                cnt+=1\n            if str[i] == '1' and str[i+1] == '1':\n                cnt+=1\n        return cnt\n    \n    def count_sub_dig2(str):\n        '''\n        Count the number of substrings with the sum of their digits equal to their length.\n        '''\n        cnt = 0\n        for i in range(len(str)):\n            if str[i] == '0' and str[i+1] == '1':\n                cnt+=1\n            if str[i] == '0' and str[i+1] == '0':\n                cnt+=1\n            if str[i] == '1' and str[i+1] == '0':\n                cnt+=1\n            if str[i] == '1' and str[i+1] == '1':\n                cnt+=1\n        return cnt\n    \n    \n    n = len(s)\n    if n <= 3:\n        return 0\n    if n % 4 == 0:\n        return count_sub_dig(s)\n    if n % 4 == 2:\n        return count_sub_dig2(s)\n    if n % 4 == 3:\n        return count_sub_dig2(s[:-3])\n    else:\n        return count_sub_dig2(s[:-1]) + count_sub_dig2(s[1:])\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = len(s)\n    dic = defaultdict(int)\n    for i in range(m):\n        dic[s[i]]+=1\n    return dic[s[0]]\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_str = \"\"\n    for char in s:\n        if char not in sub_str:\n            sub_str += char\n    return len(sub_str)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    output = 0\n    for i in range(len(s)):\n        s[i] = int(s[i])\n        output = output + s[i]\n    return output\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    low = 0\n    high = len(xs) - 1\n    if xs[0] > xs[1]:\n        low = 1\n        high = 0\n    elif xs[0] < xs[1]:\n        low = 0\n        high = 1\n    else:\n        low = 0\n        high = len(xs) - 1\n    while low <= high:\n        mid = int((low + high)/2)\n        if xs[mid] < xs[mid - 1]:\n            low = mid + 1\n        elif xs[mid] > xs[mid - 1]:\n            high = mid - 1\n        else:\n            low = mid + 1\n            high = mid - 1\n    return xs[low - 1]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float('inf')\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for item in xs:\n        if item < min:\n            min = item\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    smallest_index = 0\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n            smallest_index = i\n    return smallest_index\n    \ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    largest = xs[0]\n    largest_index = 0\n    for i in range(1, len(xs)):\n        if xs[i] > largest:\n            largest = xs[i]\n            largest_index = i\n    return largest_index\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    smallest_index = 0\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n            smallest_index = i\n    return smallest, smallest_index\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    lowest = xs[0]\n    for item in xs:\n        if item < lowest:\n            lowest = item\n    return lowest\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return \"No numbers found\"\n    else:\n        return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = 0\n    for i in range(len(xs)):\n        smallest = xs[i] if xs[i] < smallest else smallest\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            # Check if the current pair is already present in the list\n            if test_list[i]!= test_list[j]:\n                break\n            # Check if the difference of the two pairs is greater than the maximum difference\n            elif abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    temp_list = []\n    temp_list_1 = []\n    temp_list_2 = []\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    min_index = 0\n    max_index = len(test_list) - 1\n    \n    while min_index < max_index:\n        max_difference = test_list[min_index + 1] - test_list[min_index]\n        min_index += 1\n        max_index -= 1\n    \n    return max_difference\n    \ndef find_k_diff_pair(test_list, k):\n    '''\n    Write a function to find the k-diff pairs in the given list.\n    '''\n    num_diff_pairs = 0\n    for idx in range(len(test_list) - k):\n        diff_pair = test_list[idx:idx + k]\n        if diff_pair!= sorted(diff_pair):\n            num_diff_pairs += 1\n    return num_diff_pairs\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #number of available pair\n    N = len(test_list)\n    #create a list\n    max_diff = 0\n    #create a min list\n    min_list = []\n    #create a max list\n    max_list = []\n    #set the min to 0\n    min_list.append(0)\n    #set the max to 0\n    max_list.append(0)\n    #loop through test_list, \n    #convert each value in the list to integers, \n    #then sum the values of the max and min lists and add the \n    #values of the max and min lists,\n    for i in range(0, N):\n        #check the second element in the list,\n        #if it is the max value, set it to the min value,\n        #if it is the min value, set it to the max value,\n        #else add the values of both lists\n        #and set the max value to the current value\n        if i < N-1:\n            if test_list[i] > test_list[i+1]:\n                max_diff += test_list[i]\n                max_list.append(max_diff)\n                min_list.append(min_list[i+1])\n            else:\n                min_list.append(min_list[i+1])\n                max_list.append(max_list[i+1])\n        else:\n            if test_list[i] > test_list[i+1]:\n                max_list.append(max_list[i])\n                min_list.append(min_list[i+1])\n            else:\n                min_list.append(min_list[i+1])\n                max_list.append(max_list[i+1])\n    #return the max and min lists\n    return max_list, min_list\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    max_i = 0\n    for i in range(1,len(test_list)):\n        if test_list[i][1] > test_list[max_i][1]:\n            max_diff = test_list[i][1] - test_list[max_i][1]\n            max_i = i\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] - test_list[j] > 0:\n                return (test_list[i] - test_list[j], test_list[i], test_list[j])\n    return ('0', '0', '0')\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    minimum_length = 0\n    maximum_difference = 0\n    for i in range(len(test_list)-1):\n        if test_list[i+1] - test_list[i]!= 1:\n            minimum_length += 1\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] - test_list[j]!= 1:\n                minimum_length += 1\n    return minimum_length\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = test_list[0] - test_list[1]\n    for x in range(2,len(test_list)):\n        max_diff = max(max_diff,abs(test_list[x] - test_list[x-1]))\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    maximum_difference = 0\n    temp = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            temp = abs(test_list[i][0] - test_list[j][0])\n            if temp > maximum_difference:\n                maximum_difference = temp\n    return maximum_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #  Use a lambda so that we can do things like\n    #  if a == b, lambda a,b: a*b\n    #\n    #  Don't worry about what happens if you leave the else part alone.\n    #\n    #  You don't need to worry about what happens if you leave the elif\n    #  part alone.\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list2 = []\n    for i in range(len(subjectmarks)):\n        list2.append(subjectmarks[i][1])\n    list2.sort()\n    subjectmarks = sorted(subjectmarks, key=lambda x:x[1])\n    return(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Implement the code here\n    marks=subjectmarks\n    a=[]\n    for i in marks:\n        a.append(i[1])\n    a.sort()\n    print(a)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    n=len(subjectmarks)\n    s=[]\n    for i in range(n):\n        s.append(subjectmarks[i][1])\n    s=sorted(s)\n    for i in range(n):\n        subjectmarks[i][1]=s[i]\n    return(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subject_marks_list = []\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    first_list = []\n    second_list = []\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    tup = []\n    for i in subjectmarks:\n        tup.append(i[1])\n    tup.sort(reverse=True)\n    return tup\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def list_sum(nums):\n        if len(nums) == 0:\n            return 0\n        else:\n            return nums[0] + list_sum(nums[1:])\n    return list_sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def sum_lists(l):\n        if type(l) == list:\n            return sum(l)\n        elif type(l) == int:\n            return l\n        else:\n            return sum_lists(l[0]) + sum_lists(l[1])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Get the length of the list\n    length = len(data_list)\n    \n    # For each element in the list\n    for index in range(length):\n        \n        # If the index is not the last index\n        if (index!= length - 1):\n            \n            # Add the current element to the result\n            result = data_list[index] + result\n        \n        # If the index is the last index\n        else:\n            \n            # Add the current element to the result\n            result = result + data_list[index]\n    \n    # Return the result\n    return result\n    \n    \n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for data in data_list:\n        if isinstance(data, list):\n            result += recursive_list_sum(data)\n        else:\n            result += data\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum([sum(data_list) for data_list in data_list])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if type(data_list[0]) == list:\n        for sub_list in data_list:\n            for item in sub_list:\n                total += item\n    else:\n        total += data_list\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(array):\n        if len(array) == 0:\n            return array\n        if type(array[0]) is list:\n            return flatten(array[0]) + flatten(array[1:])\n        return [array[0]] + flatten(array[1:])\n    return flatten(data_list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    '''\n    >>> pos_count([0,0,0,0,0,0,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # TODO: complete this function\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_count = 0\n    for element in list:\n        if element >= 0:\n            positive_count += 1\n    return positive_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    sum = 0\n    for x in list:\n        if x > 0:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive=0\n    for element in list:\n        if element>0:\n            positive+=1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for item in list:\n        if item >= 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    answer = 0\n    for i in range(1, n+1):\n        answer += (i * (i+1)) // 2\n    return answer\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return n\n    if n==2:\n        return 3\n    if n==3:\n        return 4\n    if n==4:\n        return 5\n    if n==5:\n        return 6\n    if n==6:\n        return 7\n    \n    \n    return bell_number(n-2) + bell_number(n-3) + bell_number(n-4) + bell_number(n-5) + bell_number(n-6)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return n\n    \n    return bell_number(n//2) + bell_number(n-1"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return n\n    if n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    from itertools import count\n    if n == 1:\n        return count(1)\n    \n    if n == 2:\n        return count(0)\n    \n    return count(n-1) + count(n-1) + count(n-2) + count(n-2) + count(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return (bell_number(n-1) + bell_number(n-2)) % 99\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    if n==4:\n        return 7\n    if n==5:\n        return 14\n    if n==6:\n        return 20\n    if n==7:\n        return 40\n    if n==8:\n        return 80\n    if n==9:\n        return 120\n    if n==10:\n        return 200\n    if n==11:\n        return 400\n    if n==12:\n        return 800\n    if n==13:\n        return 1000\n    if n==14:\n        return 2000\n    if n==15:\n        return 5000\n    if n==16:\n        return 10000\n    if n==17:\n        return 20000\n    if n==18:\n        return 50000\n    if n==19:\n        return 100000\n    if n==20:\n        return 200000\n    if n==21:\n        return 5000000\n    if n==22:\n        return 10000000\n    if n==23:\n        return 2000000\n    if n==24:\n        return 50000000\n    if n==25:\n        return 100000000\n    if n==26:\n        return 500000000\n    if n==27:\n        return 10000000000\n    if n==28:\n        return 50000000000\n    if n==29:\n        return 10000000000000\n    if n==30:\n        return 5000000000000\n    if n==31:\n        return 10000000000000000\n    if n==32:\n        return 50000000000000\n    if n==33:\n        return 100000000000000\n    if n==34:\n        return 50000000000000\n    if n==35:\n        return 1000000000000000\n    if n==36:\n        return 50000000000000\n    if n==37:\n        return 1000000000000000\n    if n==38:\n        return 50000000000000\n    if n==39:\n        return 1000000000000000\n    if n==40:\n        return 50000000000000\n    if n==41:\n        return 1000000000000000\n    if n==42:\n        return 50000000000000\n    if n==43:\n        return 1000000000000000\n    if n==44:\n        return 50000000000000\n    if n==45:\n        return 1000000000000000\n    if n==46:\n        return 50000000000000\n    if n==47:\n        return 1000000000000000\n    if n==48:\n        return 50000000000000\n    if n==49:\n        return 1000000000000000\n    if n==50:\n        return 50000000000000\n    if n==51:\n        return 1000000000000000\n    if n==52:\n        return 50000000000000\n    if n==53:\n        return 1000000000000000\n    if n==54:\n        return 50000000000000\n    if n==55:\n        return 1000000000000000\n    if n==56:\n        return 50000000000000\n    if n==57:\n        return 1000000000000000\n    if n==58:\n        return 50000000000000\n    if n==59:\n        return 1000000000000000\n    if n==60:\n        return 50000000000000\n    if n==61:\n        return 1000000000000000\n    if n==62:\n        return 50000000000000\n    if n==63:\n        return 1000000000000000\n    if n==64:\n        return 50000000000000\n    if n==65:\n        return 1000000000000000\n    if n==66:\n        return 50000000000000\n    if n==67:\n        return 1000000000000000\n    if n==68:\n        return 50000000000000\n    if n==69:\n        return 1000000000000000\n    if n==70:\n        return 50000000000000\n    if n==71:\n        return 1000000000000000\n    if n==72:\n        return 50000000000000\n    if n==73:\n        return 1000000000000000\n    if n==74:\n        return 50000000000000\n    if n==75:\n        return 1000000000000000\n    if n==76:\n        return 50000000000000\n    if n==77:\n        return 1000000000000000\n    if n==78:\n        return 50000000000000\n    if n==79:\n        return 1000000000000000\n    if n==80:\n        return 50000000000000\n    if n==81:\n        return 1000000000000000\n    if n==82:\n        return 50000000000000\n    if n==83:\n        return 1000000000000000\n    if n==84:\n        return 50000000000000\n    if n==85:\n        return 1000000000000000\n    if n==86:\n        return 50000000000000\n    if n==87:\n        return 1000000000000000\n    if n==88:\n        return 50000000000000\n    if n==89:\n        return 1000000000000000\n    if n==90:\n        return 50000000000000\n    if n==91:\n        return 1000000000000000\n    if n==92:\n        return 50000000000000\n    if n==93:\n        return 1000000000000000\n    if n==94:\n        return 50000000000000\n    if n==95:\n        return 1000000000000000\n    if n==96:\n        return 50000000000000\n    if n==97:\n        return 1000000000000000\n    if n==98:\n        return 50000000000000\n    if n==99:\n        return 1000000000000000\n    if n==100:\n        return 50000000000000\n    if n==101:\n        return 1000000000000000\n    if n==102:\n        return 50000000000000\n    if n==103:\n        return 1000000000000000\n    if n==104:\n        return 50000000000000\n    if n==105:\n        return 1000000000000000\n    if n==106:\n        return 50000000000000\n    if n==107:\n        return 1000000000000000\n    if n==108:\n        return 50000000000000\n    if n==109:\n        return 1000000000000000\n    if n==110:\n        return 50000000000000\n    if n==111:\n        return 1000000000000000\n    if n==112:\n        return 50000000000000\n    if n==113:\n        return 1000000000000000\n    if n==114:\n        return 50000000000000\n    if n==115:\n        return 1000000000000000\n    if n==116:\n        return 50000000000000\n    if n==117:\n        return 1000000000000000\n    if n==118:\n        return 50000000000000\n    if n==119:\n        return 1000000000000000\n    if n==120:\n        return 50000000000000\n    if n==121:\n        return 1000000000000000\n    if n==122:\n        return 50000000000000\n    if n==123:\n        return 1000000000000000\n    if n==124:\n        return 50000000000000\n    if n==125:\n        return 1000000000000000\n    if n==126:\n        return 50000000000000\n    if n==127:\n        return 1000000000000000\n    if n==128:\n        return 50000000000000\n    if n==129:\n        return 1000000000000000\n    if n==130:\n        return 50000000000000\n    if n==131:\n        return 1000000000000000\n    if n==132:\n        return 50000000000000\n    if n==133:\n        return 1000000000000000\n    if n==134:\n        return 50000000000000\n    if n==135:\n        return 1000000000000000\n    if n==136:\n        return 50000000000000\n    if n==137:\n        return 1000000000000000\n    if n==138:\n        return 50000000000000\n    if n==139:\n        return 1000000000000000\n    if n==140:\n        return 50000000000000\n    if n==141:\n        return 1000000000000000\n    if n==142:\n        return 50000000000000\n    if n==143:\n        return 1000000000000000\n    if n==144:\n        return 50000000000000\n    if n==145:\n        return 1000000000000000\n    if n==146:\n        return 50000000000000\n    if n==147:\n        return 1000000000000000\n    if n==148:\n        return 50000000000000\n    if n==149:\n        return 1000000000000000\n    if n==150:\n        return 50000000000000\n    if n==151:\n        return 1000000000000000\n    if n==152:\n        return 50000000000000\n    if n==153:\n        return 1000000000000000\n    if n==154:\n        return 50000000000000\n    if n==155:\n        return 1000000000000000\n    if n==156:\n        return 50000000000000\n    if n==157:\n        return 1000000000000000\n    if n==158:\n        return 50000000000000"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    if n == 1:\n        return 1\n    for i in range(1, n+1):\n        count += bell_number(i)\n    return count \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Write your code here\n    if A[0] >= A[1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Length of array\n    N = len(A)\n    if N <= 2:\n        return True\n    # If the array is not monotonic, we need to check all elements of the array.\n    else:\n        for i in range(0, N-1):\n            if A[i] < A[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)): \n        if A[i] < A[i-1]: \n            return False\n    return True \n    \n    # Your Code Here\ndef is_Fibonacci_Number(n): \n    '''\n    Write a python function to check whether the given array is fibonacci number or not.\n    '''\n    if n in [0,1]: \n        return True\n    elif n == 2: \n        return True\n    else: \n        for i in range(2, n+1): \n            if n % i == 0: \n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (A[0] < A[1]): \n        return False\n    elif (A[0] > A[1]): \n        return True\n    else:\n        return is_Monotonic(A[1:]) \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Iterate over each element \n    for i in range(len(A) - 1): \n        # Check if current element is smaller than the previous element\n        if A[i] > A[i+1]: \n            return False\n    # Return true if the whole array is monotonic \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    if len(A) == 1:\n        return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Code here\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if(n<2):\n        return True\n    else:\n        for i in range(n-1):\n            if(A[i]<A[i+1] and A[i]<A[i+2]):\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    j = len(A) - 1\n    if len(A) == 1:\n        return A[0] == A[0]\n    \n    while i < j:\n        if A[i] > A[i+1]:\n            i += 1\n        elif A[j] < A[j-1]:\n            j -= 1\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    sub = []\n    for i in range(len(s)):\n        if s[i] in l:\n            sub.append(s[i])\n    return sub == l\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    list_temp = []\n    result = []\n    for item in l:\n        if item not in list_temp:\n            list_temp.append(item)\n    for item in s:\n        if item not in list_temp:\n            list_temp.append(item)\n    if list_temp == s:\n        return True\n    return False\n    \ndef get_intersection(l1, l2):\n    '''\n    Write a function to find intersection of two lists.\n    '''\n    result = []\n    for item in l1:\n        if item in l2:\n            result.append(item)\n    if result == []:\n        return None\n    else:\n        return result\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l1=[]\n    for i in l:\n        l1.append(i)\n    if l1==s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < 1:\n        return False\n    if len(l) == 1:\n        return l[0] == s\n    i = 0\n    for j in range(len(l)):\n        if l[i] == s:\n            i += 1\n        else:\n            return False\n    return i == len(l)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Create a set to store the sorted element of the sublist\n    subset = set(l)\n    \n    # For each element in the list, check if it is a subset of it. If it is, return\n    # true. Else return false.\n    for ele in s:\n        if ele in subset:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return True\n    if s in l:\n        return True\n    else:\n        for i in range(len(l)):\n            if is_sublist(l[i:], s):\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l[0:len(s)]==s\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(s, (list, tuple, set, frozenset)):\n        return False\n    if not all(isinstance(x, (list, tuple, set, frozenset)) for x in s):\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = False\n    if len(Input)!= len(set(Input)):\n        Output = True\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def find_equal_tuple(Input):\n        if len(Input) < 2:\n            return False\n        for i in range(len(Input)-1):\n            for j in range(i+1,len(Input)):\n                if Input[i]!= Input[j]:\n                    return False\n        return True\n    if Input == []:\n        return False\n    return find_equal_tuple(Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # if all tuples are of equal length, then all tuples are equal\n    if len(Input) < 2:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # your code here\n    new_array = []\n    for i in range(len(Input)):\n        new_array.append(Input[i][0])\n    if len(set(new_array))==len(new_array):\n        return True\n    else:\n        return False\ndef find_nested_tuples(Input):\n    '''\n    Write a function to find the numbers of nested tuples where the number of nested tuples is one more than the number of tuples.\n    '''\n    # your code here\n    new_array = []\n    for i in range(len(Input)):\n        new_array.append(Input[i][0])\n    count = 1\n    if len(set(new_array))==len(new_array):\n        for i in range(len(new_array)):\n            if len(new_array[i])<len(Input):\n                count+=1\n        return count+1\n    else:\n        return -1\n    \ndef find_intersection(Input):\n    '''\n    Write a function to find whether all the given arrays have identical elements or not.\n    '''\n    # your code here\n    new_array = []\n    for i in range(len(Input)):\n        new_array.append(Input[i][0])\n    if len(set(new_array))==len(new_array):\n        return True\n    else:\n        return False\ndef find_union(Input):\n    '''\n    Write a function to find whether two given arrays have the same elements or not.\n    '''\n    # your code here\n    new_array = []\n    for i in range(len(Input)):\n        new_array.append(Input[i][0])\n    if len(set(new_array))==len(new_array):\n        return True\n    else:\n        return False\ndef main():\n    print(\"1) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"2) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"3) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"4) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"5) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"6) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"7) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"8) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"9) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"10) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"11) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"12) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"13) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"14) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"15) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"16) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"17) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"18) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"19) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"20) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"21) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"22) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"23) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"24) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"25) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"26) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"27) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"28) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"29) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"30) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"31) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"32) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"33) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"34) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"35) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"36) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"37) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"38) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"39) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"40) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"41) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"42) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"43) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"44) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"45) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"46) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"47) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"48) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"49) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"50) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"51) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"52) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"53) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"54) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"55) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"56) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"57) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"58) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"59) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"60) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"61) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"62) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"63) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"64) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"65) Find the number of tuples whose length is one more than the number of tuples\")\n    print(\"66) Fin"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        lst.append(Input[i])\n        lst.sort()\n    for i in range(len(Input)):\n        if lst[i]!= Input[i]:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_count = 0\n    for i in range(len(Input)-1):\n        if Input[i] == Input[i+1]:\n            equal_count = equal_count + 1\n    if equal_count == len(Input)-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for item in Input:\n        print(item)\n        print(len(item))\n    if len(Input) == len(set(Input)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input)\n    for i in range(length):\n        for j in range(i+1,length):\n            if (Input[i] == Input[j]) or (Input[j] == Input[i]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tup_list = []\n    for i in Input:\n        if len(tup_list) == 0:\n            tup_list.append(i)\n        else:\n            if len(tup_list) == 1:\n                tup_list.append(i)\n            else:\n                if tup_list[-1]!= i:\n                    tup_list.append(i)\n    \n    return tup_list == Input\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    for i in range(size):\n        for j in range(size - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length-1):\n        for j in range(length-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    l = 0\n    r = len(nums) - 1\n    while l < r:\n        v = nums[l]\n        j = nums[r]\n        while j > v and l < r:\n            nums[l] = nums[r]\n            j = nums[r]\n            r -= 1\n        nums[r] = v\n        while l < r and nums[l] > v:\n            l += 1\n        nums[l] = j\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # nums = [3, 4, 2, 1, 5]\n    # nums = [5, 1, 2, 4, 3]\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Get the length of the list\n    # Use the list as the pivot\n    # Use the left, right indexes\n    # Compare the elements to each of the rest elements\n    # Swap the element with the smallest one\n    # Repeat until the list is sorted\n    # Return the number of elements swapped\n    # Example:\n    # [1, 3, 2] [2, 1, 3] [1, 3, 2]\n    # Solution:\n    # Time: O(n**2)\n    # Space: O(n)\n    # Runtime: 76 ms (39.02%)\n    # Memory Usage: 15.6 MB (74.11%)\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    for i in range(l-1):\n        for j in range(0, l-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(a, l, r):\n        if l == r:\n            return\n        pivot = a[l]\n        low = l + 1\n        high = r\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # dp[i] represents the length of the i-th element in the original list.\n    # If the element at index i is smaller than the smallest element in the\n    # list, then swap it with the smallest element.\n    # If the element at index i is larger than the largest element in the\n    # list, then swap it with the largest element.\n    # At the end, return the sorted list.\n    #\n    # For example, if we take the array [1, 4, 2, 9, 8, 5],\n    #\n    # 1\n    # 5\n    # 4\n    # 9\n    # 2\n    # 8\n    #\n    # is sorted into [1, 4, 9, 2, 5, 8].\n    #\n    # We can also use the following trick:\n    # dp[i] = i+1 if i < n-1 and dp[i+1] > dp[i]\n    #\n    #\n    # O(n) and O(n) time\n    # O(1) space\n    #\n    n = len(nums)\n    if n < 1:\n        return\n    \n    # Sort by first element\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if nums[i] > nums[j]:\n                tmp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = tmp\n    # Reversed\n    for i in range(n-1,0,-1):\n        for j in range(i-1,n-1,-1):\n            if nums[i] > nums[j]:\n                tmp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = tmp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    print(n)\n    for i in range(1,n):\n        if n%i==0:\n            print(n//i)\n    return n%i==0\n    \ndef product(x, y): \n    '''\n    Write a python function to find the product of two integers.\n    '''\n    # print(x*y)\n    return x*y\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            print(i,j)\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n-2\nn=int(input())\nprint(dif_Square(n))"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return False\n    else:\n        l = 2\n        r = n - 1\n        while(l <= r):\n            if(l*l <= n and r*r <= n):\n                if(n % l == 0 and n % r == 0):\n                    return True\n                elif(n % l == 0):\n                    return dif_Square(l)\n                elif(n % r == 0):\n                    return dif_Square(r)\n                else:\n                    return False\n            elif(n % l == 0):\n                l += 1\n            elif(n % r == 0):\n                r -= 1\n            else:\n                l += 1\n                r -= 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    if(n==0): \n        return '0'\n    if(n==1): \n        return '1'\n    if(n==2): \n        return '2'\n    if(n==3): \n        return '3'\n    if(n==4): \n        return '4'\n    if(n==5): \n        return '5'\n    if(n==6): \n        return '6'\n    if(n==7): \n        return '7'\n    if(n==8): \n        return '8'\n    if(n==9): \n        return '9'\n    if(n==10): \n        return '10'\n    if(n==11): \n        return '11'\n    if(n==12): \n        return '12'\n    if(n==13): \n        return '13'\n    if(n==14): \n        return '14'\n    if(n==15): \n        return '15'\n    if(n==16): \n        return '16'\n    if(n==17): \n        return '17'\n    if(n==18): \n        return '18'\n    if(n==19): \n        return '19'\n    if(n==20): \n        return '20'\n    if(n==21): \n        return '21'\n    if(n==22): \n        return '22'\n    if(n==23): \n        return '23'\n    if(n==24): \n        return '24'\n    if(n==25): \n        return '25'\n    if(n==26): \n        return '26'\n    if(n==27): \n        return '27'\n    if(n==28): \n        return '28'\n    if(n==29): \n        return '29'\n    if(n==30): \n        return '30'\n    if(n==31): \n        return '31'\n    if(n==32): \n        return '32'\n    if(n==33): \n        return '33'\n    if(n==34): \n        return '34'\n    if(n==35): \n        return '35'\n    if(n==36): \n        return '36'\n    if(n==37): \n        return '37'\n    if(n==38): \n        return '38'\n    if(n==39): \n        return '39'\n    if(n==40): \n        return '40'\n    if(n==41): \n        return '41'\n    if(n==42): \n        return '42'\n    if(n==43): \n        return '43'\n    if(n==44): \n        return '44'\n    if(n==45): \n        return '45'\n    if(n==46): \n        return '46'\n    if(n==47): \n        return '47'\n    if(n==48): \n        return '48'\n    if(n==49): \n        return '49'\n    if(n==50): \n        return '50'\n    if(n==51): \n        return '51'\n    if(n==52): \n        return '52'\n    if(n==53): \n        return '53'\n    if(n==54): \n        return '54'\n    if(n==55): \n        return '55'\n    if(n==56): \n        return '56'\n    if(n==57): \n        return '57'\n    if(n==58): \n        return '58'\n    if(n==59): \n        return '59'\n    if(n==60): \n        return '60'\n    if(n==61): \n        return '61'\n    if(n==62): \n        return '62'\n    if(n==63): \n        return '63'\n    if(n==64): \n        return '64'\n    if(n==65): \n        return '65'\n    if(n==66): \n        return '66'\n    if(n==67): \n        return '67'\n    if(n==68): \n        return '68'\n    if(n==69): \n        return '69'\n    if(n==70): \n        return '70'\n    if(n==71): \n        return '71'\n    if(n==72): \n        return '72'\n    if(n==73): \n        return '73'\n    if(n==74): \n        return '74'\n    if(n==75): \n        return '75'\n    if(n==76): \n        return '76'\n    if(n==77): \n        return '77'\n    if(n==78): \n        return '78'\n    if(n==79): \n        return '79'\n    if(n==80): \n        return '80'\n    if(n==81): \n        return '81'\n    if(n==82): \n        return '82'\n    if(n==83): \n        return '83'\n    if(n==84): \n        return '84'\n    if(n==85): \n        return '85'\n    if(n==86): \n        return '86'\n    if(n==87): \n        return '87'\n    if(n==88): \n        return '88'\n    if(n==89): \n        return '89'\n    if(n==90): \n        return '90'\n    if(n==91): \n        return '91'\n    if(n==92): \n        return '92'\n    if(n==93): \n        return '93'\n    if(n==94): \n        return '94'\n    if(n==95): \n        return '95'\n    if(n==96): \n        return '96'\n    if(n==97): \n        return '97'\n    if(n==98): \n        return '98'\n    if(n==99): \n        return '99'\n    if(n==100): \n        return '100'\n    if(n==101): \n        return '101'\n    if(n==102): \n        return '102'\n    if(n==103): \n        return '103'\n    if(n==104): \n        return '104'\n    if(n==105): \n        return '105'\n    if(n==106): \n        return '106'\n    if(n==107): \n        return '107'\n    if(n==108): \n        return '108'\n    if(n==109): \n        return '109'\n    if(n==110): \n        return '110'\n    if(n==111): \n        return '111'\n    if(n==112): \n        return '112'\n    if(n==113): \n        return '113'\n    if(n==114): \n        return '114'\n    if(n==115): \n        return '115'\n    if(n==116): \n        return '116'\n    if(n==117): \n        return '117'\n    if(n==118): \n        return '118'\n    if(n==119): \n        return '119'\n    if(n==120): \n        return '120'\n    if(n==121): \n        return '121'\n    if(n==122): \n        return '122'\n    if(n==123): \n        return '123'\n    if(n==124): \n        return '124'\n    if(n==125): \n        return '125'\n    if(n==126): \n        return '126'\n    if(n==127): \n        return '127'\n    if(n==128): \n        return '128'\n    if(n==129): \n        return '129'\n    if(n==130): \n        return '130'\n    if(n==131): \n        return '131'\n    if(n==132): \n        return '132'\n    if(n==133): "
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n**2\n    dif = square % 10\n    return dif == 0\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    squares = []\n    for i in range(1, n+1):\n        squares.append(i*i)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def square_diff(x): \n        '''\n        Write a python function to check whether the given number can be represented as the difference of two squares or not.\n        '''\n        i = 0\n        while i < n: \n            if x % 2 == 1: \n                if x < 0: \n                    print(\"Square difference:\", abs(x - (i+1))) \n                else: \n                    print(\"Square difference:\", abs(x - (i+1)))\n            else: \n                if x > 0: \n                    print(\"Square difference:\", abs(x - (i+1))) \n                else: \n                    print(\"Square difference:\", abs(x - (i+1)))\n            i += 1\n    square_diff(n)\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0: \n        return 'Invalid Input'\n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return False\n    s = n - 1\n    if (s % 2 == 0): \n        dif = False\n    else: \n        dif = True\n    if dif: \n        return dif_Square(s - 1)\n    else: \n        return dif_Square(s - 1)\n    \ndef main(): \n    '''\n    test cases \n    1. dif_Square(10)\n    2. dif_Square(123)\n    '''\n    print(dif_Square(10)) \n    print(dif_Square(123))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i!=j and i+j!= n:\n                if i+j!= n:\n                    print(i, j, i+j)\n                    print(\"\\n\\n\")\n                else:\n                    print(\"\\n\\n\")\n                    print(\"Square is not a square\")\n                    print(\"\\n\\n\")\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n % 2) == 0: \n        print(\"Square\")\n    else: \n        print(\"Difference\")\n    if n == int(n/2) + 1: \n        print(\"Is Quadrilateral\")\n    elif n == int(n/2) - 1: \n        print(\"Is Circular\")\n    else: \n        print(\"Is Rectangle\")\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    ranges = []\n    for i in range(len(colors)):\n        ranges.append([0,len(colors[i])])\n    for i in range(len(patterns)):\n        ranges.append([0,len(patterns[i])])\n    ranges = sorted(ranges)\n    \n    def samepattern(r):\n        for i in range(len(r)):\n            if ranges[i]!= r[i]:\n                return False\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        for color in colors:\n            if pattern.lower() in color.lower():\n                return True\n            else:\n                return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # check the type of patterns\n    if type(patterns) == list:\n        patterns = list(patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for i, val in enumerate(colors):\n        if patterns[i][1]!= val:\n            count += 1\n    return count == len(patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_mapping = dict()\n    for pattern in patterns:\n        pattern_mapping[pattern] = len(pattern)\n    color_mapping = dict()\n    for color in colors:\n        color_mapping[color] = len(color)\n    for color, pattern in pattern_mapping.items():\n        if pattern not in color_mapping:\n            color_mapping[pattern] = 0\n            for j in range(pattern):\n                color_mapping[color] += pattern_mapping[color]\n    for color, pattern in color_mapping.items():\n        if color not in colors:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    m, n = len(patterns), len(colors)\n    is_patterns = [[1 for _ in range(n)] for _ in range(m)]\n    for row, pattern in enumerate(patterns):\n        for col, color in enumerate(colors):\n            is_patterns[row][col] = (patterns[row] == color)\n            \n    return all(all(is_patterns[r][c] for r in range(m)) for c in range(n))\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not is_samepatterns(colors, pattern):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if len(patterns[i])!= len(colors[i]):\n            return False\n        for j in range(len(patterns[i])):\n            if patterns[i][j]!= colors[i][j]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        same = True\n        for key in pattern:\n            if key not in colors:\n                same = False\n                break\n            for ele in pattern[key]:\n                if ele not in colors:\n                    same = False\n                    break\n        if not same:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tup_list = []\n    for tup in test_list:\n        new_tup = tuple([tup[0] for i in range(tup[1]) if i % K == 0])\n        if new_tup not in tup_list:\n            tup_list.append(new_tup)\n    return tup_list\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    tuples = []\n    for i in test_list:\n        if i[0] % K == 0:\n            tuples.append(i)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    if K <= 0:\n        return []\n    else:\n        for i in range(len(test_list)):\n            if test_list[i][0] % K == 0:\n                new_list.append(test_list[i])\n        return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for element in test_list:\n        if element[0] % K == 0:\n            yield element\n    \ndef find_numbers(test_list, K):\n    '''\n    Write a function to return all the elements which have all elements divisible by k from the given list of tuples.\n    '''\n    for element in test_list:\n        if all(element[1] % K == 0 for element in test_list):\n            yield element\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_list = []\n    for element in test_list:\n        if element[1] % K == 0:\n            tuples_list.append(element)\n    return tuples_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    for item in test_list:\n        if len(item) % K == 0:\n            for x in range(0,len(item),K):\n                tuple_list.append(item[x:x+K])\n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # step 1: get the list of numbers that are divisible by k\n    # step 2: get the number of elements in the list which are divisible by k\n    # step 3: get the number of tuples which are divisible by k\n    # step 4: create a new list to store the tuples of the same length as the list of tuples\n    # step 5: check if the length of the new list is same as the length of the list\n    # step 6: if the length of the new list is equal to the length of the list of tuples\n    # step 7: return the new list of tuples\n    \n    # step 1: get the list of numbers that are divisible by k\n    # step 2: get the number of elements in the list which are divisible by k\n    # step 3: get the number of tuples which are divisible by k\n    # step 4: create a new list to store the tuples of the same length as the list of tuples\n    # step 5: check if the length of the new list is same as the length of the list\n    # step 6: if the length of the new list is equal to the length of the list of tuples\n    # step 7: return the new list of tuples\n    \n    # step 1: get the list of numbers that are divisible by k\n    # step 2: get the number of elements in the list which are divisible by k\n    # step 3: get the number of tuples which are divisible by k\n    # step 4: create a new list to store the tuples of the same length as the list of tuples\n    # step 5: check if the length of the new list is same as the length of the list\n    # step 6: if the length of the new list is equal to the length of the list of tuples\n    # step 7: return the new list of tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    l = list(test_list)\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] % l[j] == 0:\n                l[i], l[j] = l[j], l[i]\n    return l\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # base case\n    if len(test_list) == 0:\n        return None\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    print('\\nFinding tuples...\\n')\n    def make_tuple_generator():\n        for n,e in test_list:\n            if n%K==0:\n                yield (n,e)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 11:\n        return True\n    else: \n        return False\n    \n    #Recursive function\n    def is_Diff_Rec(n, i): \n        if n == 1: \n            return True\n        elif n == 11: \n            return False\n        else: \n            return is_Diff_Rec(n - 1, i + 1) \n        \n    return is_Diff_Rec(n, 0)\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    def check(n):\n        if (n % 11) == 0:\n            return True\n        else:\n            return False\n    if check(n):\n        return \"The number is divisible by 11\"\n    else:\n        return \"The number is not divisible by 11\"\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # for every element in the list\n    for i in range(len(n)): \n        if n[i] == 0 or n[i] == 1: \n            return False\n        if n[i] == 2 or n[i] == 3 or n[i] == 4 or n[i] == 5: \n            return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n%10\n    if x==0: \n        print(f\"{n} is divisible by 11\")\n    else: \n        print(f\"{n} is not divisible by 11\")\n    \nis_Diff(64)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0: return True\n    elif n%10==1 or n%10==0: return False\n    return is_Diff(n/10)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n    \n    # Complete this function\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!= 0:\n        return \"Odd\"\n    else:\n        return \"Even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    total = 0\n    for i in s:\n        total += 1\n    if total % 2!= 0:\n        return True\n    else:\n        return False\nprint(word_len(\"abcdefgde\"))\nprint(word_len(\"AaBbCcDdEeEfF\"))\nprint(word_len(\"I am an Apple\"))\nprint(word_len(\"a Bc Ef Gd\"))\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #create a loop to return whether the length is odd or even\n    i = 0\n    while i < len(s):\n        if s[i] == \" \":\n            i += 1\n        else:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 1:\n        print(\"This is not a word\")\n        return False\n    else:\n        print(\"This is a word\")\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    count = 0\n    for char in s:\n        if char == \" \":\n            continue\n        count += 1\n    return count % 2"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len = len(s)\n    if len % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef get_word(s):\n    '''\n    Write a python function to get the word from the input string.\n    '''\n    word = s.split(' ')\n    return word\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return f'The word {s} is odd'\n    else:\n        return f'The word {s} is even'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'Odd'\n    else:\n        return 'Even'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    check_list = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # your code goes here\n    return n*(n+1)/2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # A list of all the triangles.\n    triangles = [[1,4,3],[2,3,5],[1,2,3]]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n_base = str(n)\n    n_base_int = int(n_base)\n    n_base_mod = n_base_int % 3\n    n_mod_int = n_base_mod // 2\n    n_mod_mod = n_mod_int % 2\n    n_mod_mod_int = n_mod_mod % 2\n    n_mod_mod_int_sub = n_mod_mod_int % 3\n    n_mod_mod_int_sub_mod = n_mod_mod_int % 3\n    n_mod_mod_int_mod_sub = n_mod_mod_int % 2\n    if n_mod_int_sub_mod == 0:\n        return n_mod_mod_int_sub_mod\n    elif n_mod_mod_int_sub_mod == 1:\n        return n_mod_mod_int_sub_mod\n    else:\n        return \"Error: n should not be greater than 3\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n + 1): \n        if (i * (i + 1)) == n: \n            return i \n    return None\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    # The x and y coordinates are calculated as the \n    # sum of the coefficients of the series.\n    for i in range(1, int(n ** 0.5) + 1):\n        x = 1\n        y = 1\n        for j in range(i):\n            if j == 0:\n                x += y\n            else:\n                y += x\n        \n        if n % i == 0:\n            count += i\n        else:\n            count += i + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n<2: \n        return n\n    elif n>10: \n        return 1\n    elif n==1:\n        return 2\n    elif n==2:\n        return 3\n    else:\n        return tetrahedral_number(n-1)+tetrahedral_number(n-2)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if (n == 0): \n        return 0\n    if (n == 1): \n        return 1\n    if (n == 2): \n        return 3\n    if (n == 3): \n        return 5\n    if (n > 3): \n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    else:\n        return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3) + tetrahedral_number(n - 4) \n \ndef read_file(): \n    '''\n    Read the input file and return the number of rows and columns.\n    '''\n    try:\n        with open('input.txt') as f:\n            num_rows = int(f.readline().strip())\n            num_cols = int(f.readline().strip())\n    except:\n        num_rows = 4\n        num_cols = 4\n    return num_rows, num_cols\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1, n+1): \n        if i%2==0: \n            print(i)\n        else: \n            if i%3==0: \n                print(i)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 3.14 * math.pi * (r ** 2)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r**3 * math.pi\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r**3.0*math.pi*2.0\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = 4*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r * 4.0 * math.pi * (3 ** 0.5)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    a = math.sqrt(r**2 - (4/3)*r*math.cos(math.radians(0.5))*math.cos(math.radians(0.5)))\n    return a\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = math.pi * (r**2)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 3\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_dome(r,h):\n    '''\n    Write a function to find the volume of a dome.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 3)\n    return volume\ndef volume_cylinder_dome(r,h):\n    '''\n    Write a function to find the volume of a cylinder and dome.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    return volume\ndef volume_cone_dome(r,h):\n    '''\n    Write a function to find the volume of a cone and dome.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * (h / 2)\n    return volume\ndef volume_dome_cylinder(r,h):\n    '''\n    Write a function to find the volume of a dome and cylinder.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    return volume\ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * (h / 2)\n    return volume\ndef volume_cylinder_dome(r,h):\n    '''\n    Write a function to find the volume of a cylinder and dome.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cone_cone(r,h):\n    '''\n    Write a function to find the volume of a cone and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * (h / 2)\n    return volume\ndef volume_dome_cone(r,h):\n    '''\n    Write a function to find the volume of a dome and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_dome_cylinder(r,h):\n    '''\n    Write a function to find the volume of a dome and cylinder.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * (h / 2)\n    return volume\ndef volume_dome_cone(r,h):\n    '''\n    Write a function to find the volume of a dome and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and cylinder.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * (h / 2)\n    return volume\ndef volume_dome_cylinder(r,h):\n    '''\n    Write a function to find the volume of a dome and cylinder.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * (h / 2)\n    return volume\ndef volume_dome_cone(r,h):\n    '''\n    Write a function to find the volume of a dome and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cylinder_dome(r,h):\n    '''\n    Write a function to find the volume of a cylinder and dome.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    return volume\ndef volume_cone_dome(r,h):\n    '''\n    Write a function to find the volume of a cone and dome.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    return volume\ndef volume_dome_cone(r,h):\n    '''\n    Write a function to find the volume of a dome and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder and cylinder.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    return volume\ndef volume_dome_cylinder(r,h):\n    '''\n    Write a function to find the volume of a dome and cylinder.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    return volume\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and cylinder.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_dome_cone(r,h):\n    '''\n    Write a function to find the volume of a dome and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cylinder_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder and cylinder.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    return volume\ndef volume_dome_cylinder(r,h):\n    '''\n    Write a function to find the volume of a dome and cylinder.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_dome_cone(r,h):\n    '''\n    Write a function to find the volume of a dome and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    return volume\ndef volume_cone_dome(r,h):\n    '''\n    Write a function to find the volume of a cone and dome.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cylinder_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    return volume\ndef volume_dome_cone(r,h):\n    '''\n    Write a function to find the volume of a dome and cone.\n    '''\n    volume = 4 * (math.pi ** 2) * (r ** 2) * h\n    return volume\ndef volume_cone_dome(r,h):\n    '''\n    Write a function to find the volume of a cone and dome.\n    '''\n    volume = 4 * (math.pi ** 2) * r ** 2 * h\n    retur"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for ch in strr:\n        if (ord(ch)%26)!= 0:\n            ch = ch + chr(ord(ch)%26+65)\n        print(ch,end='')\n    print()\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # To store the character made\n    char_made = ''\n    # To store the result\n    result = 0\n    # To store the number of the characters\n    num = 0\n    # To store the character\n    character = ''\n    # To store the result of the operation\n    operation_result = 0\n    # Loop until a match is found\n    while(num < len(strr)):\n        # To store the character with the ASCII value\n        character = chr(ord(strr[num]) + 1)\n        # To store the result of the operation\n        result += int(character) * int(strr[num])\n        # To check if the result is not equal to zero\n        if(result % 26 == 0):\n            # If the result is equal to 0, we add the result of the operation\n            # and add the character made\n            operation_result = result\n            char_made = strr[num]\n            break\n        # To store the result of the operation\n        else:\n            # If the result is greater than 0, we add the result of the operation\n            # and add the character made\n            operation_result += int(character) * int(strr[num])\n            # To check if the result is not equal to zero\n            if(operation_result % 26 == 0):\n                # If the result is equal to 0, we add the result of the operation\n                # and add the character made\n                operation_result = result\n                char_made = strr[num]\n                break\n        # To store the result of the operation\n        num += 1\n    # To return the characters made\n    return char_made, operation_result\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = \"\"\n    for i in range(len(strr)):\n        ans += chr(ord(strr[i]) + int((ord(strr[i]) + int(ord(strr[i]) - ord(strr[i])) % 26)))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    cnt = 0\n    for i in strr:\n        cnt = cnt + ord(i)\n    return cnt % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    i = 0\n    while i < len(strr):\n        print(\"char: \",strr[i],\"index: \",i,\"value: \",ord(strr[i]))\n        i+=1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    for i in range(0, len(strr)):\n        char = char + chr(int(strr[i]) % 26 + 65)\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if len(strr) == 0:\n        raise ValueError(\"No String\")\n    res = 0\n    for i in range(26):\n        res += ord(strr[i])\n    return res % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    for c in strr:\n        count += ord(c)\n    return count % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    lst = []\n    for i in strr:\n        lst.append(ord(i))\n    mod = int(''.join(str(x) for x in lst)) % 26\n    return chr(mod)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    return ''.join([chr(ord(c) - 97) for c in strr]) \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n > len(newman): \n        raise ValueError(f'n must be less than {len(newman)}') \n    elif n == 0: \n        return 1\n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 0\n    else: \n        count = 0 \n        for i in range(0, n-1): \n            count = count + sequence(i+1) + sequence(i+2)\n        return count \n "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = n%4\n    n = n//4\n    if s == 0:\n        return 0\n    elif s == 1:\n        return 1\n    elif s == 2:\n        return 3\n    elif s == 3:\n        return 5\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    return (list(map(int, input().split(' '))))\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    while n > 0: \n        n -= 1\n        yield n \n    #yield from(sequence(n-1)) \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n+((n*(n+1))//2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    n = int(n)\n    for i in range(n-1):\n        a = a*6+1\n        if(a == n):\n            return a\n    return n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1: \n        return 0\n    elif n == 1:\n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (math.pi * pow(r, 2)) - (2 * math.pi * pow(r, 3))\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Write your code here\n    surface_area = (3.14*(r**2))\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    from math import pi\n    print(\"Surface area of a Sphere is:\",math.pi*(r**2))\n    \n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef surfacearea_rectangle(x,y,w,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return (w*h)/2\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return 3.14*math.pi*r**2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\ndef volume_rectangle(x,y,w,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (w*h)/2\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return 3.14*math.pi*(r**2)\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    return 4/3*math.pi*(r**2)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\ndef volume_rectangle(x,y,w,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return (w*h)/2\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return 3.14*math.pi*(r**2)\ndef sphere_surface_area(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return surfacearea_sphere(r)\ndef sphere_volume_area(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_sphere(r)\ndef rectangle_surface_area(x,y,w,h):\n    '''\n    Write a function to calculate the surface area of a rectangle.\n    '''\n    return surfacearea_rectangle(x,y,w,h)\ndef rectangle_volume_area(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return volume_rectangle(x,y,w,h)\ndef rectangle_surface_circle_area(r):\n    '''\n    Write a function to calculate the surface area of a rectangle.\n    '''\n    return surfacearea_circle(r)\ndef rectangle_volume_circle_area(r):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return volume_circle(r)\ndef circle_surface_area(r):\n    '''\n    Write a function to calculate the surface area of a circle.\n    '''\n    return surfacearea_circle(r)\ndef circle_volume_area(r):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return volume_circle(r)\ndef sphere_surface_volume_area(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return surfacearea_sphere(r)\ndef sphere_volume_volume_area(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_sphere(r)\ndef rectangle_surface_volume_area(x,y,w,h):\n    '''\n    Write a function to calculate the surface area of a rectangle.\n    '''\n    return surfacearea_rectangle(x,y,w,h)\ndef rectangle_volume_volume_area(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return volume_rectangle(x,y,w,h)\ndef circle_surface_volume_area(r):\n    '''\n    Write a function to calculate the surface area of a circle.\n    '''\n    return surfacearea_circle(r)\ndef circle_volume_volume_area(r):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return volume_circle(r)\ndef surface_area_volume(x,y,w,h):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return surfacearea_sphere(x)\ndef volume_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_sphere(r)\ndef surface_area_volume(x,y,w,h):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return surfacearea_rectangle(x,y,w,h)\ndef volume_surface_volume(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_circle(x)\ndef surface_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_sphere(r)\ndef volume_surface_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_circle(r)\ndef surface_area_volume(x,y,w,h):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return surfacearea_sphere(x)\ndef volume_surface_volume(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_sphere(x)\ndef sphere_surface_volume_area(r):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return surfacearea_sphere(r)\ndef volume_surface_volume_area(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_sphere(r)\ndef rectangle_surface_volume_area(x,y,w,h):\n    '''\n    Write a function to calculate the surface area of a rectangle.\n    '''\n    return surfacearea_rectangle(x,y,w,h)\ndef rectangle_volume_volume_area(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return volume_rectangle(x,y,w,h)\ndef circle_surface_volume_area(r):\n    '''\n    Write a function to calculate the surface area of a circle.\n    '''\n    return surfacearea_circle(r)\ndef volume_surface_volume_area(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_sphere(x)\ndef volume_surface_volume(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_sphere(x)\ndef surface_area_volume(x,y,w,h):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return surfacearea_rectangle(x,y,w,h)\ndef volume_surface_volume(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_circle(x)\ndef volume_surface_volume_area(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_surface_volume(x,y,w,h)\ndef surface_volume_volume_area(x,y,w,h):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return volume_surface_volume(x,y,w,h)\ndef surface_volume_volume_area(x,y,w,h):\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (math.pi * (r**3))\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 3*(math.pi*r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4.0*math.pi)*r*r*math.acos((-2*r*r + 1)/2.0)\n    return area\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Top-left corner\n    if n < 0:\n        raise Exception(\"n must be non-negative\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return n\n    elif n == 2:\n        return 4 * n\n    elif n == 3:\n        return 8 * n\n    elif n == 4:\n        return 6 * n\n    elif n == 5:\n        return 10 * n\n    elif n == 6:\n        return 12 * n\n    elif n == 7:\n        return 14 * n\n    elif n == 8:\n        return 16 * n\n    elif n == 9:\n        return 18 * n\n    elif n == 10:\n        return 20 * n\n    elif n == 11:\n        return 22 * n\n    elif n == 12:\n        return 24 * n\n    elif n == 13:\n        return 26 * n\n    elif n == 14:\n        return 28 * n\n    elif n == 15:\n        return 30 * n\n    elif n == 16:\n        return 32 * n\n    elif n == 17:\n        return 34 * n\n    elif n == 18:\n        return 36 * n\n    elif n == 19:\n        return 38 * n\n    elif n == 20:\n        return 40 * n\n    elif n == 21:\n        return 42 * n\n    elif n == 22:\n        return 44 * n\n    elif n == 23:\n        return 46 * n\n    elif n == 24:\n        return 48 * n\n    elif n == 25:\n        return 50 * n\n    elif n == 26:\n        return 52 * n\n    elif n == 27:\n        return 54 * n\n    elif n == 28:\n        return 56 * n\n    elif n == 29:\n        return 58 * n\n    elif n == 30:\n        return 60 * n\n    elif n == 31:\n        return 62 * n\n    elif n == 32:\n        return 64 * n\n    elif n == 33:\n        return 66 * n\n    elif n == 34:\n        return 68 * n\n    elif n == 35:\n        return 70 * n\n    elif n == 36:\n        return 72 * n\n    elif n == 37:\n        return 74 * n\n    elif n == 38:\n        return 76 * n\n    elif n == 39:\n        return 78 * n\n    elif n == 40:\n        return 80 * n\n    elif n == 41:\n        return 82 * n\n    elif n == 42:\n        return 84 * n\n    elif n == 43:\n        return 86 * n\n    elif n == 44:\n        return 88 * n\n    elif n == 45:\n        return 90 * n\n    elif n == 46:\n        return 92 * n\n    elif n == 47:\n        return 94 * n\n    elif n == 48:\n        return 96 * n\n    elif n == 49:\n        return 98 * n\n    elif n == 50:\n        return 100 * n\n    elif n == 51:\n        return 102 * n\n    elif n == 52:\n        return 104 * n\n    elif n == 53:\n        return 106 * n\n    elif n == 54:\n        return 108 * n\n    elif n == 55:\n        return 110 * n\n    elif n == 56:\n        return 112 * n\n    elif n == 57:\n        return 114 * n\n    elif n == 58:\n        return 116 * n\n    elif n == 59:\n        return 118 * n\n    elif n == 60:\n        return 120 * n\n    elif n == 61:\n        return 122 * n\n    elif n == 62:\n        return 124 * n\n    elif n == 63:\n        return 126 * n\n    elif n == 64:\n        return 128 * n\n    elif n == 65:\n        return 130 * n\n    elif n == 66:\n        return 132 * n\n    elif n == 67:\n        return 134 * n\n    elif n == 68:\n        return 136 * n\n    elif n == 69:\n        return 138 * n\n    elif n == 70:\n        return 140 * n\n    elif n == 71:\n        return 142 * n\n    elif n == 72:\n        return 144 * n\n    elif n == 73:\n        return 146 * n\n    elif n == 74:\n        return 148 * n\n    elif n == 75:\n        return 150 * n\n    elif n == 76:\n        return 152 * n\n    elif n == 77:\n        return 154 * n\n    elif n == 78:\n        return 156 * n\n    elif n == 79:\n        return 158 * n\n    elif n == 80:\n        return 160 * n\n    elif n == 81:\n        return 162 * n\n    elif n == 82:\n        return 164 * n\n    elif n == 83:\n        return 166 * n\n    elif n == 84:\n        return 168 * n\n    elif n == 85:\n        return 170 * n\n    elif n == 86:\n        return 172 * n\n    elif n == 87:\n        return 174 * n\n    elif n == 88:\n        return 176 * n\n    elif n == 89:\n        return 178 * n\n    elif n == 90:\n        return 180 * n\n    elif n == 91:\n        return 182 * n\n    elif n == 92:\n        return 184 * n\n    elif n == 93:\n        return 186 * n\n    elif n == 94:\n        return 188 * n\n    elif n == 95:\n        return 190 * n\n    elif n == 96:\n        return 192 * n\n    elif n == 97:\n        return 194 * n\n    elif n == 98:\n        return 196 * n\n    elif n == 99:\n        return 198 * n\n    elif n == 100:\n        return 200 * n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = n + 1\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return n*(n+1)/6\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return int(n*(n+1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Declare d as a list of even numbers.\n    d = [i for i in range(1,n//2+1) if i%2==0]\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    #Write your code here\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return 2*(n-1)**2 + 3*centered_hexagonal_number(n-1) + 3*centered_hexagonal_number(n-2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return ((n-1)+(n-1)*2)//3\n        \ndef test_centered_hexagonal_number():\n    assert centered_hexagonal_number(0)==0\n    assert centered_hexagonal_number(1)==1\n    assert centered_hexagonal_number(2)==4\n    assert centered_hexagonal_number(3)==9\n    assert centered_hexagonal_number(4)==16\n    assert centered_hexagonal_number(5)==25\n    assert centered_hexagonal_number(6)==36\n    assert centered_hexagonal_number(7)==49\n    assert centered_hexagonal_number(8)==64\n    assert centered_hexagonal_number(9)==81\n    assert centered_hexagonal_number(10)==104\n    assert centered_hexagonal_number(11)==111\n    assert centered_hexagonal_number(12)==126\n    assert centered_hexagonal_number(13)==139\n    assert centered_hexagonal_number(14)==144\n    assert centered_hexagonal_number(15)==151\n    assert centered_hexagonal_number(16)==164\n    assert centered_hexagonal_number(17)==181\n    assert centered_hexagonal_number(18)==184\n    assert centered_hexagonal_number(19)==191\n    assert centered_hexagonal_number(20)==196\n    assert centered_hexagonal_number(21)==208\n    assert centered_hexagonal_number(22)==213\n    assert centered_hexagonal_number(23)==229\n    assert centered_hexagonal_number(24)==246\n    assert centered_hexagonal_number(25)==251\n    assert centered_hexagonal_number(26)==269\n    assert centered_hexagonal_number(27)==274\n    assert centered_hexagonal_number(28)==277\n    assert centered_hexagonal_number(29)==288\n    assert centered_hexagonal_number(30)==293\n    assert centered_hexagonal_number(31)==299\n    assert centered_hexagonal_number(32)==306\n    assert centered_hexagonal_number(33)==311\n    assert centered_hexagonal_number(34)==320\n    assert centered_hexagonal_number(35)==321\n    assert centered_hexagonal_number(36)==325\n    assert centered_hexagonal_number(37)==328\n    assert centered_hexagonal_number(38)==333\n    assert centered_hexagonal_number(39)==331\n    assert centered_hexagonal_number(40)==336\n    assert centered_hexagonal_number(41)==338\n    assert centered_hexagonal_number(42)==343\n    assert centered_hexagonal_number(43)==349\n    assert centered_hexagonal_number(44)==345\n    assert centered_hexagonal_number(45)==348\n    assert centered_hexagonal_number(46)==353\n    assert centered_hexagonal_number(47)==351\n    assert centered_hexagonal_number(48)==357\n    assert centered_hexagonal_number(49)==358\n    assert centered_hexagonal_number(50)==363\n    assert centered_hexagonal_number(51)==360\n    assert centered_hexagonal_number(52)==364\n    assert centered_hexagonal_number(53)==367\n    assert centered_hexagonal_number(54)==368\n    assert centered_hexagonal_number(55)==373\n    assert centered_hexagonal_number(56)==381\n    assert centered_hexagonal_number(57)==389\n    assert centered_hexagonal_number(58)==414\n    assert centered_hexagonal_number(59)==415\n    assert centered_hexagonal_number(60)==416\n    assert centered_hexagonal_number(61)==420\n    assert centered_hexagonal_number(62)==421\n    assert centered_hexagonal_number(63)==426\n    assert centered_hexagonal_number(64)==427\n    assert centered_hexagonal_number(65)==428\n    assert centered_hexagonal_number(66)==429\n    assert centered_hexagonal_number(67)==432\n    assert centered_hexagonal_number(68)==430\n    assert centered_hexagonal_number(69)==433\n    assert centered_hexagonal_number(70)==433\n    assert centered_hexagonal_number(71)==434\n    assert centered_hexagonal_number(72)==435\n    assert centered_hexagonal_number(73)==434\n    assert centered_hexagonal_number(74)==435\n    assert centered_hexagonal_number(75)==435\n    assert centered_hexagonal_number(76)==435\n    assert centered_hexagonal_number(77)==435\n    assert centered_hexagonal_number(78)==435\n    assert centered_hexagonal_number(79)==435\n    assert centered_hexagonal_number(80)==435\n    assert centered_hexagonal_number(81)==435\n    assert centered_hexagonal_number(82)==435\n    assert centered_hexagonal_number(83)==435\n    assert centered_hexagonal_number(84)==435\n    assert centered_hexagonal_number(85)==435\n    assert centered_hexagonal_number(86)==435\n    assert centered_hexagonal_number(87)==435\n    assert centered_hexagonal_number(88)==435\n    assert centered_hexagonal_number(89)==435\n    assert centered_hexagonal_number(90)==435\n    assert centered_hexagonal_number(91)==435\n    assert centered_hexagonal_number(92)==435\n    assert centered_hexagonal_number(93)==435\n    assert centered_hexagonal_number(94)==435\n    assert centered_hexagonal_number(95)==435\n    assert centered_hexagonal_number(96)==435\n    assert centered_hexagonal_number(97)==435\n    assert centered_hexagonal_number(98)==435\n    assert centered_hexagonal_number(99)==435\n    assert centered_hexagonal_number(100)==435\n    assert centered_hexagonal_number(101)==435\n    assert centered_hexagonal_number(102)==435\n    assert centered_hexagonal_number(103)==435\n    assert centered_hexagonal_number(104)==435\n    assert centered_hexagonal_number(105)==435\n    assert centered_hexagonal_number(106)==435\n    assert centered_hexagonal_number(107)==435\n    assert centered_hexagonal_number(108)==435\n    assert centered_hexagonal_number(109)==435\n    assert centered_hexagonal_number(110)==435\n    assert centered_hexagonal_number(111)==435\n    assert centered_hexagonal_number(112)==435\n    assert centered_hexagonal_number(113)==435\n    assert centered_hexagonal_number(114)==435\n    assert centered_hexagonal_number(115)==435\n    assert centered_hexagonal_number(116)==435\n    assert centered_hexagonal_number(117)==435\n    assert centered_hexagonal_number(118)==435\n    assert centered_hexagonal_number(119)==435\n    assert centered_hexagonal_number(120)==435\n    assert centered_hexagonal_number(121)==435\n    assert centered_hexagonal_number(122)==435\n    assert centered_hexagonal_number(123)==435\n    assert centered_hexagonal_number(124)==435\n    assert centered_hexagonal_number(125)==435\n    assert centered_hexagonal_number(126)==435\n    assert centered_hexagonal_number(127)==435\n    assert centered_hexagonal_number(128)==435\n    assert centered_hexagonal_number(129)==435\n    assert centered_hexagonal_number(130)==435\n    assert centered_hexagonal_number(131)==435\n    assert centered_hexagonal_number(132)==435\n    assert centered_hexagonal_number(133)==435\n    assert centered_hexagonal_number(134)==435\n    assert centered_hexagonal_number(135)==435\n    assert centered_hexagonal_number(136)==435\n    assert centered_hexagonal_number(137)==435\n    assert centered_hexagonal_number(138)==435\n    assert centered_hexagonal_number(139)==435\n    assert centered_hexagonal_number(14"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**3 + n**2 + n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    answer = 0\n    for i in range(n):\n        answer += 2**(i)\n    return answer\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # TODO: Complete this function\n    \n    if dict1 == dict2:\n        return dict1\n    elif dict2 == dict3:\n        return dict2\n    else:\n        return dict3\n    \ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    # TODO: Complete this function\n    if dict1 == dict2:\n        return dict1\n    elif dict2 == dict3:\n        return dict2\n    else:\n        return dict3\n    \ndef save_tuple(tup1,filename):\n    '''\n    Write a function to save a tuple as a new file.\n    '''\n    # TODO: Complete this function\n    \n    with open(filename, 'w') as file:\n        file.write('\\n'.join(map(str, tup1)))\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_new = dict1.copy()\n    dict_new.update(dict2)\n    dict_new.update(dict3)\n    return dict_new\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1 = dict1.copy()\n    d2 = dict2.copy()\n    d3 = dict3.copy()\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    dictionaries = [dict1, dict2, dict3]\n    #print(dict1)\n    for dictionary in dictionaries:\n        #print(dictionary)\n        for key in dictionary.keys():\n            #print(dictionary[key])\n            if type(dictionary[key]) is not dict:\n                dictionary[key] = {}\n            for key2 in dictionary.keys():\n                if key2 not in dictionary[key]:\n                    dictionary[key][key2] = 0\n                dictionary[key][key2] += dictionary[key2][key]\n    for key in dictionary:\n        #print(dictionary[key])\n        for key2 in dictionary.keys():\n            if key2 not in dictionary[key]:\n                dictionary[key][key2] = 0\n            dictionary[key][key2] += dictionary[key2][key]\n    #print(dictionary)\n    #print(type(dictionary))\n    return dictionary\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(dict1,dict2,dict3)\n    if(dict1.get('city') is not None):\n        dict1['city'] += dict2['city']\n    if(dict2.get('city') is not None):\n        dict2['city'] += dict3['city']\n    return dict1\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge dictionaries into a single dictionary.\n    '''\n    #print(dict1,dict2)\n    if(dict1.get('city') is not None):\n        dict1['city'] = dict1['city'] + dict2['city']\n    else:\n        dict1['city'] = dict2['city']\n    return dict1\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge dictionaries into a single dictionary.\n    '''\n    #print(dict1,dict2)\n    if(dict1.get('city') is not None):\n        dict1['city'] = dict1['city']\n    else:\n        dict1['city'] = dict2['city']\n    return dict1"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict2:\n        if key in dict1:\n            dict1[key] = dict1[key] + dict2[key]\n        else:\n            dict1[key] = dict2[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # merge with defaultdict\n    if dict1 is None:\n        return dict3\n    if dict2 is None:\n        return dict3\n    if dict3 is None:\n        return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\ndef merge_dictionaries_four(dict1,dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    merged.update(dict4)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result=dict1\n    for key in dict2:\n        if key in dict3:\n            result[key]=dict2[key]+dict3[key]\n        else:\n            result[key]=dict2[key]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    #c = dict1.copy()\n    #c1 = dict2.copy()\n    #c3 = dict3.copy()\n    \n    #if not c:\n    #    return c3\n    #for i in c.keys():\n    #    if i in c1:\n    #        if c1[i] in c3.keys():\n    #            c3[i] = c1[i] + c3[i]\n    #        else:\n    #            c3[i] = c1[i]\n    #    else:\n    #        c3[i] = c1[i]\n    \n    #return c3\n    #for i in dict1:\n    #    if i in c:\n    #        if c[i] in dict2:\n    #            dict2[c[i]] = dict1[i] + dict2[c[i]]\n    #        else:\n    #            dict2[c[i]] = dict1[i]\n    #    else:\n    #        dict2[i] = dict1[i]\n    #    for j in dict1[i]:\n    #        if j in c:\n    #            if c[j] in dict2:\n    #                dict2[c[j]] = dict1[i][j] + dict2[c[j]]\n    #            else:\n    #                dict2[c[j]] = dict1[i][j]\n    #        else:\n    #            dict2[j] = dict1[i][j]\n    #for i in dict1:\n    #    if i in c:\n    #        for j in dict1[i]:\n    #            if j in c:\n    #                if c[j] in dict3:\n    #                    dict3[c[j]] = dict1[i][j] + dict3[c[j]]\n    #                else:\n    #                    dict3[c[j]] = dict1[i][j]\n    #            else:\n    #                dict3[j] = dict1[i][j]\n    #    else:\n    #        dict3[i] = dict1[i]\n    #return dict3\n    '''\n    print('\\n\\n\\n')\n    print(dict1)\n    print(dict2)\n    print(dict3)\n    print(dict1.keys())\n    print(dict1.values())\n    print(dict2.keys())\n    print(dict2.values())\n    print(dict3.keys())\n    print(dict3.values())\n    print('\\n\\n\\n')\n    \n    return dict3\n    \n    '''\n    #for i in c:\n    #    if i in c1:\n    #        if c1[i] in dict2:\n    #            dict2[c1[i]] = dict1[i] + dict2[c1[i]]\n    #        else:\n    #            dict2[c1[i]] = dict1[i]\n    #    else:\n    #        dict2[i] = dict1[i]\n    #    for j in dict1[i]:\n    #        if j in c:\n    #            if c[j] in dict2:\n    #                dict2[c[j]] = dict1[i][j] + dict2[c[j]]\n    #            else:\n    #                dict2[c[j]] = dict1[i][j]\n    #        else:\n    #            dict2[j] = dict1[i][j]\n    #for i in dict1:\n    #    if i in c:\n    #        for j in dict1[i]:\n    #            if j in c:\n    #                if c[j] in dict2:\n    #                    dict2[c[j]] = dict1[i][j] + dict2[c[j]]\n    #                else:\n    #                    dict2[c[j]] = dict1[i][j]\n    #            else:\n    #                dict2[j] = dict1[i][j]\n    #    else:\n    #        dict2[i] = dict1[i]\n    #for i in dict1:\n    #    if i in c:\n    #        for j in dict1[i]:\n    #            if j in c:\n    #                if c[j] in dict2:\n    #                    dict2[c[j]] = dict1[i][j] + dict2[c[j]]\n    #                else:\n    #                    dict2[c[j]] = dict1[i][j]\n    #            else:\n    #                dict2[j] = dict1[i][j]\n    #    else:\n    #        dict2[i] = dict1[i]\n    #for i in dict1:\n    #    if i in c:\n    #        for j in dict1[i]:\n    #            if j in c:\n    #                if c[j] in dict2:\n    #                    dict2[c[j]] = dict1[i][j] + dict2[c[j]]\n    #                else:\n    #                    dict2[c[j]] = dict1[i][j]\n    #            else:\n    #                dict2[j] = dict1[i][j]\n    #    else:\n    #        dict2[i] = dict1[i]\n    #for i in dict2:\n    #    if i in c:\n    #        for j in dict2[i]:\n    #            if j in c:\n    #                if c[j] in dict1:\n    #                    dict1[c[j]] = dict2[i][j] + dict1[c[j]]\n    #                else:\n    #                    dict1[c[j]] = dict2[i][j]\n    #            else:\n    #                dict1[j] = dict2[i][j]\n    #    else:\n    #        dict2[i] = dict2[i]\n    #print(dict1)\n    #print(dict2)\n    #print(dict3)\n    #print(dict1.keys())\n    #print(dict1.values())\n    #print(dict2.keys())\n    #print(dict2.values())\n    #print(dict3.keys())\n    #print(dict3.values())\n    #print(dict1.keys())\n    #print(dict1.values())\n    #return dict3\n    \n    #return dict1, dict2, dict3\ndef merge_dictionaries_three_with_missing(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #c = dict1.copy()\n    #c1 = dict2.copy()\n    #c3 = dict3.copy()\n    \n    #if not c:\n    #    return c3\n    #for i in c:\n    #    if i in c1:\n    #        if c1[i] in c3.keys():\n    #            c3[i] = c1[i] + c3[i]\n    #        else:\n    #            c3[i] = c1[i]\n    #    else:\n    #        c3[i] = c1[i]\n    #    for j in dict1[i]:\n    #        if j in c:\n    #            if c[j] in dict2:\n    #                dict2[c[j]] = dict1[i][j] + dict2[c[j]]\n    #            else:\n    #                dict2[c[j]] = dict1[i][j]\n    #        else:\n    #            dict2[j] = dict1[i][j]\n    #    for j in dict1[i]:\n    #        if j in c:\n    #            if c[j] in dict2:\n    #                dict2[c[j]] = dict1[i][j] + dict2[c[j]]\n    #            else:\n    #                dict2[c[j]] = dict1[i][j]\n    #    for j in dict1[i]:\n    #        if j in c:\n    #            if c[j] in dict2:\n    #                dict2[c[j]] = dict1[i]["
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        else:\n            freq_dict[element] += 1\n    return freq_dict\ndef words_to_freq(list1):\n    '''\n    Write a function to convert a list of words into a dictionary of frequencies, where the keys are the words and the values are the frequency of the word.\n    '''\n    freq_dict = {}\n    for word in list1:\n        if word not in freq_dict:\n            freq_dict[word] = 0\n        freq_dict[word] += 1\n    return freq_dict\ndef list_to_dict(list1):\n    '''\n    Write a function to convert a list of words into a dictionary of lists.\n    '''\n    freq_dict = collections.defaultdict(list)\n    for word in list1:\n        freq_dict[word].append(word)\n    return freq_dict\ndef freq_words(list1):\n    '''\n    Write a function to get the frequency of all the words in a list.\n    '''\n    freq_dict = {}\n    for word in list1:\n        if word not in freq_dict:\n            freq_dict[word] = 0\n        freq_dict[word] += 1\n    return freq_dict\ndef merge_dict(freq_dict):\n    '''\n    Write a function to merge a dictionary of lists into a dictionary of lists.\n    '''\n    for key, value in freq_dict.items():\n        freq_dict[key] = []\n        for item in value:\n            freq_dict[key].append(item)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if list1:\n        return collections.Counter(list1)\n    else:\n        return {}\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    for x in list1:\n        counter = collections.Counter(x)\n        print(counter)\n        #print(counter.most_common(3))\n        return counter\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dict = collections.Counter(list1)\n    print(frequency_dict)\n    return frequency_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # your code here\n    dictionary = {}\n    for i in range(len(list1)):\n        if list1[i] in dictionary:\n            dictionary[list1[i]] = dictionary[list1[i]] + 1\n        else:\n            dictionary[list1[i]] = 1\n    return dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # YOUR CODE HERE\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        if i not in freq:\n            freq[i]=0\n        freq[i]+=1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\ndef freq_group(list1):\n    '''\n    Write a function to get the frequency of a group of the elements, returned as a dictionary.\n    '''\n    d = collections.defaultdict(int)\n    for i in list1:\n        d[i] += 1\n    return d\ndef sort_by_frequency(d, key):\n    '''\n    Write a function to sort a dictionary in descending order by the frequencies of the elements.\n    '''\n    sorted_dict = collections.OrderedDict(sorted(d.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\ndef sort_by_count(d, key):\n    '''\n    Write a function to sort a dictionary in ascending order by the count of the elements.\n    '''\n    sorted_dict = collections.OrderedDict(sorted(d.items(), key=lambda x: x[1], reverse=False))\n    return sorted_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counter = collections.Counter(list1)\n    return counter\ndef most_common(mylist):\n    '''\n    Write a function to get the most common elements in a list.\n    '''\n    return collections.Counter(mylist).most_common(1)[0][0]\ndef avg(list1):\n    '''\n    Write a function that gets the average of the numbers in a list and returns the average.\n    '''\n    return sum(list1)/len(list1)\ndef find_one(mylist, num):\n    '''\n    Write a function that returns the first occurence of the number with index num in a list of numbers.\n    '''\n    found = False\n    counter = 0\n    for item in mylist:\n        if item == num:\n            counter += 1\n        if counter == num:\n            found = True\n            break\n    if found == False:\n        raise ValueError(\"There are no such numbers in the list\")\n    return found\ndef find_nth(mylist, n):\n    '''\n    Write a function that returns the number of the first nth numbers in a list of numbers.\n    '''\n    counter = 0\n    numbers = []\n    for number in mylist:\n        if counter < n:\n            numbers.append(number)\n            counter += 1\n        else:\n            break\n    return numbers\ndef sum_it(mylist):\n    '''\n    Write a function that gets the sum of the numbers in a list and returns the sum.\n    '''\n    sum = 0\n    for item in mylist:\n        sum += item\n    return sum\ndef power_it(mylist):\n    '''\n    Write a function that gets the power of the numbers in a list and returns the power.\n    '''\n    sum = 1\n    for item in mylist:\n        sum *= item\n    return sum\ndef is_prime(num):\n    '''\n    Write a function that returns True if num is prime, and False otherwise.\n    '''\n    if num < 2:\n        return False\n    else:\n        for divisor in range(2, num):\n            if num % divisor == 0:\n                return False\n        return True\ndef count_words(mylist):\n    '''\n    Write a function that gets the number of words in a list, and returns the number of words.\n    '''\n    number = len(mylist)\n    words = 0\n    for i in range(0, number):\n        for j in range(0, number):\n            if i!= j and len(mylist[i]) > len(mylist[j]):\n                words += 1\n    return words\ndef reverse_words(mylist):\n    '''\n    Write a function that reverses the order of the words in a list and returns the list.\n    '''\n    reversed_list = []\n    for i in range(0, len(mylist)):\n        for j in range(0, len(mylist[i])):\n            reversed_list.append(mylist[i][j])\n    return reversed_list\ndef have_duplicates(mylist):\n    '''\n    Write a function that returns True if there are at least two numbers in a list, and False otherwise.\n    '''\n    counter = 0\n    for i in range(0, len(mylist)):\n        if mylist[i] not in mylist[i]:\n            counter += 1\n        if counter > 1:\n            return True\n    return False\ndef has_even_numbers(mylist):\n    '''\n    Write a function that returns True if there are at least two numbers in a list and False otherwise.\n    '''\n    counter = 0\n    for i in range(0, len(mylist)):\n        if mylist[i] not in mylist[i]:\n            counter += 1\n        if counter > 1:\n            return True\n    return False\ndef count_words_that_contain_even_numbers(mylist):\n    '''\n    Write a function that returns the number of words in a list that have at least two numbers in them.\n    '''\n    counter = 0\n    for i in range(0, len(mylist)):\n        if has_even_numbers(mylist[i]) == True:\n            counter += 1\n    return counter\ndef max_sub_array(array):\n    '''\n    Write a function that returns the maximum sub array.\n    '''\n    max_length = 0\n    sub_array = []\n    for i in range(0, len(array)):\n        for j in range(i, len(array)):\n            if array[i] > array[j]:\n                break\n        max_length += 1\n        sub_array.append(array[i])\n    return sub_array[:max_length]\ndef max_sub_array_2(array):\n    '''\n    Write a function that returns the maximum sub array.\n    '''\n    max_length = 0\n    sub_array = []\n    for i in range(0, len(array)):\n        for j in range(i, len(array)):\n            if array[i] > array[j]:\n                break\n        max_length += 1\n        sub_array.append(array[i])\n    return sub_array[:max_length]\ndef max_sub_array_3(array):\n    '''\n    Write a function that returns the maximum sub array.\n    '''\n    max_length = 0\n    sub_array = []\n    for i in range(0, len(array)):\n        for j in range(i, len(array)):\n            if array[i] > array[j]:\n                break\n        max_length += 1\n        sub_array.append(array[i])\n    return sub_array[:max_length]\ndef get_sum(array):\n    '''\n    Write a function that returns the sum of the numbers in a list.\n    '''\n    sum = 0\n    for item in array:\n        sum += item\n    return sum\ndef get_product(array):\n    '''\n    Write a function that returns the product of the numbers in a list.\n    '''\n    product = 1\n    for item in array:\n        product *= item\n    return product\ndef get_product_2(array):\n    '''\n    Write a function that returns the product of the numbers in a list.\n    '''\n    product = 1\n    for item in array:\n        product *= item\n    return product\ndef get_product_3(array):\n    '''\n    Write a function that returns the product of the numbers in a list.\n    '''\n    product = 1\n    for item in array:\n        product *= item\n    return product\ndef get_product_4(array):\n    '''\n    Write a function that returns the product of the numbers in a list.\n    '''\n    product = 1\n    for item in array:\n        product *= item\n    return product\ndef get_product_5(array):\n    '''\n    Write a function that returns the product of the numbers in a list.\n    '''\n    product = 1\n    for item in array:\n        product *= item\n    return product\ndef get_product_6(array):\n    '''\n    Write a function that returns the product of the numbers in a list.\n    '''\n    product = 1\n    for item in array:\n        product *= item\n    return product\ndef get_product_7(array):\n    '''\n    Write a function that returns the product of the numbers in a list.\n    '''\n    product = 1\n    for item in array:\n        product *= item\n    return product\ndef get_product_8(array):\n    '''\n    Write a function that returns the product of the numbers in a list.\n    '''\n    product = 1\n    for item in array:\n        product *= item\n    return product\ndef get_product_9(array):\n    '''\n    Write a function that returns the product of the numbers in a list.\n    '''\n    product = 1\n    for item in array:\n        product *= item\n    return product\ndef get_product_10(array):\n    '''\n    Write a function that returns the product of the numbers in a list.\n    '''\n    product = 1\n    for item in array:\n        product *= item\n    return product\ndef get_product_11(array):\n    '''\n    Writ"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = -1\n    for n in range(N+1):\n        if n in data:\n            count = 0\n            for i in range(len(data)):\n                if data[i] > n:\n                    count += 1\n            if count == 0:\n                closest = n\n    return closest\n    \n    \nN = int(input())\ndata = []\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(2, N+1):\n        if N % i == 0:\n            smallest = i\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Your code here\n    \n    closest = None\n    while (closest == None):\n        closest = N\n        for i in range(N-1):\n            if (closest < N-(i+1)):\n                closest = N-(i+1)\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0 or N == 1:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return int(str(N))\n    smallest = float('inf')\n    for n in range(10, N + 1):\n        if abs(n - int(str(n))) < abs(smallest - int(str(smallest))):\n            smallest = n\n    return int(str(smallest))\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Input: int N\n    # Output: int or float\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    elif N == 2:\n        return 1\n    elif N == 3:\n        return 2\n    elif N == 4:\n        return 3\n    elif N == 5:\n        return 4\n    elif N == 6:\n        return 5\n    elif N == 7:\n        return 6\n    elif N == 8:\n        return 7\n    elif N == 9:\n        return 8\n    elif N == 10:\n        return 9\n    elif N == 11:\n        return 10\n    elif N == 12:\n        return 11\n    elif N == 13:\n        return 12\n    elif N == 14:\n        return 13\n    elif N == 15:\n        return 14\n    elif N == 16:\n        return 15\n    elif N == 17:\n        return 16\n    elif N == 18:\n        return 17\n    elif N == 19:\n        return 18\n    elif N == 20:\n        return 19\n    elif N == 21:\n        return 20\n    elif N == 22:\n        return 21\n    elif N == 23:\n        return 22\n    elif N == 24:\n        return 23\n    elif N == 25:\n        return 24\n    elif N == 26:\n        return 25\n    elif N == 27:\n        return 26\n    elif N == 28:\n        return 27\n    elif N == 29:\n        return 28\n    elif N == 30:\n        return 29\n    elif N == 31:\n        return 30\n    elif N == 32:\n        return 31\n    elif N == 33:\n        return 32\n    elif N == 34:\n        return 33\n    elif N == 35:\n        return 34\n    elif N == 36:\n        return 35\n    elif N == 37:\n        return 36\n    elif N == 38:\n        return 37\n    elif N == 39:\n        return 38\n    elif N == 40:\n        return 39\n    elif N == 41:\n        return 40\n    elif N == 42:\n        return 41\n    elif N == 43:\n        return 42\n    elif N == 44:\n        return 43\n    elif N == 45:\n        return 44\n    elif N == 46:\n        return 45\n    elif N == 47:\n        return 46\n    elif N == 48:\n        return 47\n    elif N == 49:\n        return 48\n    elif N == 50:\n        return 49\n    elif N == 51:\n        return 50\n    elif N == 52:\n        return 51\n    elif N == 53:\n        return 52\n    elif N == 54:\n        return 53\n    elif N == 55:\n        return 54\n    elif N == 56:\n        return 55\n    elif N == 57:\n        return 56\n    elif N == 58:\n        return 57\n    elif N == 59:\n        return 58\n    elif N == 60:\n        return 59\n    elif N == 61:\n        return 60\n    elif N == 62:\n        return 61\n    elif N == 63:\n        return 62\n    elif N == 64:\n        return 63\n    elif N == 65:\n        return 64\n    elif N == 66:\n        return 65\n    elif N == 67:\n        return 66\n    elif N == 68:\n        return 67\n    elif N == 69:\n        return 68\n    elif N == 70:\n        return 69\n    elif N == 71:\n        return 70\n    elif N == 72:\n        return 71\n    elif N == 73:\n        return 72\n    elif N == 74:\n        return 73\n    elif N == 75:\n        return 74\n    elif N == 76:\n        return 75\n    elif N == 77:\n        return 76\n    elif N == 78:\n        return 77\n    elif N == 79:\n        return 78\n    elif N == 80:\n        return 79\n    elif N == 81:\n        return 80\n    elif N == 82:\n        return 81\n    elif N == 83:\n        return 82\n    elif N == 84:\n        return 83\n    elif N == 85:\n        return 84\n    elif N == 86:\n        return 85\n    elif N == 87:\n        return 86\n    elif N == 88:\n        return 87\n    elif N == 89:\n        return 88\n    elif N == 90:\n        return 89\n    elif N == 91:\n        return 90\n    elif N == 92:\n        return 91\n    elif N == 93:\n        return 92\n    elif N == 94:\n        return 93\n    elif N == 95:\n        return 94\n    elif N == 96:\n        return 95\n    elif N == 97:\n        return 96\n    elif N == 98:\n        return 97\n    elif N == 99:\n        return 98\n    elif N == 100:\n        return 99\n    elif N == 101:\n        return 100\n    elif N == 102:\n        return 101\n    elif N == 103:\n        return 102\n    elif N == 104:\n        return 103\n    elif N == 105:\n        return 104\n    elif N == 106:\n        return 105\n    elif N == 107:\n        return 106\n    elif N == 108:\n        return 107\n    elif N == 109:\n        return 108\n    elif N == 110:\n        return 109\n    elif N == 111:\n        return 110\n    elif N == 112:\n        return 111\n    elif N == 113:\n        return 112\n    elif N == 114:\n        return 113\n    elif N == 115:\n        return 114\n    elif N == 116:\n        return 115\n    elif N == 117:\n        return 116\n    elif N == 118:\n        return 117\n    elif N == 119:\n        return 118\n    elif N == 120:\n        return 119\n    elif N == 121:\n        return 120\n    elif N == 122:\n        return 121\n    elif N == 123:\n        return 122\n    elif N == 124:\n        return 123\n    elif N == 125:\n        return 124\n    elif N == 126:\n        return 125\n    elif N == 127:\n        return 126\n    elif N == 128:\n        return 127\n    elif N == 129:\n        return 128\n    elif N == 130:\n        return 129\n    elif N == 131:\n        return 130\n    elif N == 132:\n        return 131\n    elif N == 133:\n        return 132\n    elif N == 134:\n        return 133\n    elif N == 135:\n        return 134\n    elif N == 136:\n        return 135\n    elif N == 137:\n        return 136\n    elif N == 138:\n        return 137\n    elif N == 139:\n        return 138\n    elif N == 140:\n        return 139\n    elif N == 141:\n        return 140\n    elif N == 142:\n        return 141\n    elif N == 143:\n        return 142\n    elif N == 144:\n        return 143\n    elif N == 145:\n        return 144\n    elif N == 146:\n        return 145\n    elif N == 147:\n        return 146\n    elif N == 148:\n        return 147\n    elif N == 149:\n        return 148\n    elif N == 150:\n        return 149\n    elif N == 151:\n        return 150\n    elif N == 152:\n        return 151\n    elif N == 153:\n        return 152\n    elif N == 154:\n        return 153\n    elif N == 155:\n        return 154\n    elif N == 156:\n        return 155\n    elif N == 157:\n        return 156\n    elif N == 158:\n        return 157\n    elif N == 159:\n        return 158\n    elif N == 160:\n        return 159\n    elif N == 161:\n        return 160\n    elif N == 162:\n        return 161\n    elif N == 163:\n        return 162\n    elif N == 164:\n        return 163\n    elif N == 165:\n        return 164\n    elif N == 166:\n        return 165"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 1\n    elif N < 2:\n        return 0\n    else:\n        return closest_num(N-1) + closest_num(N-2)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # Get the smallest n\n    smallest_n = sorted(N)[-1]\n    # Iterate through the n\n    for n in N:\n        # If n is smaller than smallest n, then update the smallest n\n        if n < smallest_n:\n            smallest_n = n\n    # Return the smallest number\n    return smallest_n\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(str(N))\n    nums.sort()\n    return int(nums[-2])\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    '''\n    Write your code here.\n    '''\n    max_word_len = 0\n    for i in range(len(list1)):\n        if list1[i] == list1[i].upper():\n            continue\n        else:\n            if len(list1[i]) > max_word_len:\n                max_word_len = len(list1[i])\n    return max_word_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l = 0\n    for i in list1:\n        for j in range(len(i)):\n            if i[j]!='':\n                l = max(l, len(i[j]))\n    return l\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max:\n            max = len(list1[i])\n    return max\n    \n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > max_len:\n                max_len = list1[i][j]\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = []\n    for item in list1:\n        words.append(item)\n    return max(map(len, words))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = ''\n    for i in range(len(list1)):\n        words += list1[i]\n    return(len(words))\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2 = []\n    for item in list1:\n        for x in item:\n            list2.append(x)\n    return len(list2)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_word = ''\n    word_len = 0\n    for item in list1:\n        word_len = len(item)\n        if word_len > len(max_word):\n            max_word = item\n    return max_word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    '''\n    def len_log(list1):\n        '''\n        Write a python function to find the length of the longest word.\n        '''\n        list1 = list(str(list1))\n        string = ''\n        for i in range(0, len(list1)):\n            string = string + list1[i]\n        string = string.upper()\n        length = len(string)\n        return length\n    '''\n    print('Testing for len_log() function.')\n    test_case = ['hello', 'WORLD', 'longest_word', 'world']\n    result = len_log(test_case)\n    if result == int(len(test_case)):\n        print('Passed!')\n    else:\n        print('Failed. Expected', str(len(test_case)),'but got', str(result), '.')\n    print('\\n')\n    #print('Testing for len_log() function.')\n    test_case = ['HELLO', 'WORLD', 'l', 'WORD']\n    result = len_log(test_case)\n    if result == int(len(test_case)):\n        print('Passed!')\n    else:\n        print('Failed. Expected', str(len(test_case)),'but got', str(result), '.')\n    print('\\n')\n    \n    print('Testing for len_log() function.')\n    test_case = ['h', 'e', 'l', 'i', 'l', 'o', 'w', 'o', 'r', 'e', 'r', 'a', 'r', 'c', 'r', 'd', 'a', 'd']\n    result = len_log(test_case)\n    if result == int(len(test_case)):\n        print('Passed!')\n    else:\n        print('Failed. Expected', str(len(test_case)),'but got', str(result), '.')\n    print('\\n')\n    \n    print('Testing for len_log() function.')\n    test_case = ['hallo', 'e', 'WORD', 'r', 'WORD', 'r', 'r', 'a', 'r', 'r', 'd', 'r', 'd']\n    result = len_log(test_case)\n    if result == int(len(test_case)):\n        print('Passed!')\n    else:\n        print('Failed. Expected', str(len(test_case)),'but got', str(result), '.')\n    print('\\n')\n    \n    print('Testing for len_log() function.')\n    test_case = ['HELLO', 'WORLD', 'WORL', 'WORD', 'WORD', 'WORD', 'WORLD', 'WORL', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD']\n    result = len_log(test_case)\n    if result == int(len(test_case)):\n        print('Passed!')\n    else:\n        print('Failed. Expected', str(len(test_case)),'but got', str(result), '.')\n    print('\\n')\n    \n    print('Testing for len_log() function.')\n    test_case = ['HELLO', 'WORLD', 'WORL', 'WORD', 'WORD', 'WORLD', 'WORL', 'WORD', 'WORD', 'WORD', 'WORLD', 'WORL', 'WORD', 'WORD']\n    result = len_log(test_case)\n    if result == int(len(test_case)):\n        print('Passed!')\n    else:\n        print('Failed. Expected', str(len(test_case)),'but got', str(result), '.')\n    print('\\n')\n    \n    print('Testing for len_log() function.')\n    test_case = ['HELLO', 'WORLD', 'WORL', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORLD', 'WORL', 'WORD', 'WORD', 'WORD']\n    result = len_log(test_case)\n    if result == int(len(test_case)):\n        print('Passed!')\n    else:\n        print('Failed. Expected', str(len(test_case)),'but got', str(result), '.')\n    print('\\n')\n    \n    print('Testing for len_log() function.')\n    test_case = ['HELLO', 'WORLD', 'WORL', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', 'WORD', '"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1) == 0:\n        return False\n    for i in range(0, len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    index = 0\n    while index < len(str1):\n        if str1[index:index+len(sub_str)] == sub_str:\n            return True\n        index += 1\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_len = len(sub_str)\n    if len(str1) < sub_str_len:\n        return False\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i:j+1] == sub_str:\n            i = i + sub_str_len\n            j = j - sub_str_len\n        else:\n            i = i + 1\n            j = j - sub_str_len\n    return i!= len(str1) - 1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Method 1 - Brute Force\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = []\n    if len(sub_str) > 0:\n        for sub_str_val in sub_str:\n            sub_str_list.append(str1.count(sub_str_val))\n        return sub_str_list\n    else:\n        return None\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    '''\n    #Time Complexity: O(n)\n    #Space Complexity: O(n)\n    '''\n    sub_str = sub_str.lower()\n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1.lower()\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \n    \n    if len(sub_str) <= 0:\n        return False\n    sub_str = sub_str.strip()\n    if len(str1) <= 0:\n        return False\n    str1 = str1"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pattern_str = list(sub_str)\n    pattern_str.append('.')\n    pattern_str.extend(list('..'))\n    for i in range(len(str1)):\n        print(str1[i])\n        print('*' * len(str1))\n        print(str1[i] == '..')\n        if str1[i] == '..':\n            print('*' * len(str1))\n            print(str1[i] == '.')\n            print('*' * len(str1))\n            for j in range(i, len(str1)):\n                print(str1[j], end ='')\n                if str1[j] == '.':\n                    print('*' * len(str1))\n                    print(str1[j] == '.')\n                    print('*' * len(str1))\n                    print(str1[i] == '.')\n                    print('*' * len(str1))\n                    for k in range(i, j):\n                        print(str1[k], end ='')\n                        if str1[k] == '.':\n                            print('*' * len(str1))\n                            print(str1[k] == '.')\n                            print('*' * len(str1))\n                            print(str1[j] == '.')\n                            print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))\n                    print('*' * len(str1))"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = []\n    i = 0\n    for j in range(len(str1)):\n        result.append(str1[j:j + sub_str])\n    for k in result:\n        if k in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    new_str1 = []\n    for sub_str1 in sub_str:\n        # if the list is empty\n        if new_str1 == []:\n            # if the string is present in the list, return True\n            if sub_str1 in str1:\n                return True\n            else:\n                continue\n        # if the string is not present\n        elif new_str1!= []:\n            # if the string is present in the list, check if it is present in the list\n            if sub_str1 in new_str1:\n                return True\n            # if not present, check if the string is present in the list\n            else:\n                # if the string is present, return True\n                if sub_str1 in str1:\n                    return True\n                else:\n                    continue\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    if n % 10 == 1 and n % 100!= 11:\n        return True\n    if n % 10 == 0 and n % 100 == 0:\n        return False\n    if n % 10 > 1 and n % 10 <= 10:\n        return False\n    if n % 10 > 9 and n % 10 < 10:\n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    if n < 10:\n        return False\n    elif (n < 100 and n % 10 == 0) or (n % 10 == 9):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # get the sum of the digits\n    s = 0\n    while n:\n        s += n % 10\n        n = n // 10\n    \n    # check if the sum is divisible by 10\n    return s % 10!= 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2==0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return is_undulating(n // 2)\n    else: \n        return is_undulating(3 * n + 1)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n>0 and n%2==0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n >= 10 ** 5): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0: return False\n    if n==1: return True\n    if n==2: return n>=3\n    if n==3: return n>=5\n    if n==4: return n>=7\n    if n==5: return n>=10\n    if n==6: return n>=13\n    if n==7: return n>=15\n    if n==8: return n>=20\n    if n==9: return n>=24\n    if n==10: return n>=28\n    if n==11: return n>=34\n    if n==12: return n>=40\n    if n==13: return n>=43\n    if n==14: return n>=48\n    if n==15: return n>=53\n    if n==16: return n>=56\n    if n==17: return n>=59\n    if n==18: return n>=64\n    if n==19: return n>=68\n    if n==20: return n>=74\n    if n==21: return n>=78\n    if n==22: return n>=83\n    if n==23: return n>=86\n    if n==24: return n>=89\n    if n==25: return n>=94\n    if n==26: return n>=97\n    if n==27: return n>=100\n    if n==28: return n>=103\n    if n==29: return n>=106\n    if n==30: return n>=110\n    if n==31: return n>=115\n    if n==32: return n>=120\n    if n==33: return n>=123\n    if n==34: return n>=126\n    if n==35: return n>=129\n    if n==36: return n>=134\n    if n==37: return n>=135\n    if n==38: return n>=140\n    if n==39: return n>=143\n    if n==40: return n>=146\n    if n==41: return n>=149\n    if n==42: return n>=154\n    if n==43: return n>=155\n    if n==44: return n>=160\n    if n==45: return n>=163\n    if n==46: return n>=166\n    if n==47: return n>=169\n    if n==48: return n>=174\n    if n==49: return n>=177\n    if n==50: return n>=180\n    if n==51: return n>=183\n    if n==52: return n>=186\n    if n==53: return n>=189\n    if n==54: return n>=194\n    if n==55: return n>=195\n    if n==56: return n>=200\n    if n==57: return n>=203\n    if n==58: return n>=206\n    if n==59: return n>=209\n    if n==60: return n>=214\n    if n==61: return n>=217\n    if n==62: return n>=220\n    if n==63: return n>=223\n    if n==64: return n>=226\n    if n==65: return n>=229\n    if n==66: return n>=234\n    if n==67: return n>=235\n    if n==68: return n>=240\n    if n==69: return n>=243\n    if n==70: return n>=246\n    if n==71: return n>=249\n    if n==72: return n>=254\n    if n==73: return n>=257\n    if n==74: return n>=260\n    if n==75: return n>=263\n    if n==76: return n>=266\n    if n==77: return n>=269\n    if n==78: return n>=274\n    if n==79: return n>=275\n    if n==80: return n>=280\n    if n==81: return n>=283\n    if n==82: return n>=286\n    if n==83: return n>=291\n    if n==84: return n>=294\n    if n==85: return n>=297\n    if n==86: return n>=300\n    if n==87: return n>=303\n    if n==88: return n>=306\n    if n==89: return n>=309\n    if n==90: return n>=314\n    if n==91: return n>=317\n    if n==92: return n>=320\n    if n==93: return n>=323\n    if n==94: return n>=326\n    if n==95: return n>=329\n    if n==96: return n>=334\n    if n==97: return n>=337\n    if n==98: return n>=340\n    if n==99: return n>=343\n    if n==100: return n>=346\n    if n==101: return n>=349\n    if n==102: return n>=354\n    if n==103: return n>=357\n    if n==104: return n>=360\n    if n==105: return n>=364\n    if n==106: return n>=366\n    if n==107: return n>=369\n    if n==108: return n>=374\n    if n==109: return n>=375\n    if n==110: return n>=380\n    if n==111: return n>=381\n    if n==112: return n>=382\n    if n==113: return n>=383\n    if n==114: return n>=386\n    if n==115: return n>=390\n    if n==116: return n>=393\n    if n==117: return n>=396\n    if n==118: return n>=401\n    if n==119: return n>=404\n    if n==120: return n>=405\n    if n==121: return n>=406\n    if n==122: return n>=409\n    if n==123: return n>=414\n    if n==124: return n>=417\n    if n==125: return n>=420\n    if n==126: return n>=423\n    if n==127: return n>=426\n    if n==128: return n>=429\n    if n==129: return n>=434\n    if n==130: return n>=437\n    if n==131: return n>=440\n    if n==132: return n>=443\n    if n==133: return n>=446\n    if n==134: return n>=449\n    if n==135: return n>=454\n    if n==136: return n>=458\n    if n==137: return n>=450\n    if n==138: return n>=453\n    if n==139: return n>=455\n    if n==140: return n>=460\n    if n==141: return n>=461\n    if n==142: return n>=462\n    if n==143: return n>=463\n    if n==144: return n>=466\n    if n==145: return n>=469\n    if n==146: return n>=470\n    if n==147: return n>=471\n    if n==148: return n>=472\n    if n==149: return n>=473\n    if n==150: return n>=474\n    if n==151: return n>=475\n    if n==152: return n>=480\n    if n==153: return n>=481\n    if n==154: return n>=482\n    if n==155: return n>=483\n    if n==156: return n>=484\n    if n==157: return n>=485\n    if n==158: return n>=486\n    if n==159: return n>=487\n    if n==160: return n>=488\n    if n==161: return n>=489\n    if n==162: return n>=490\n    if n==163: return n>=491\n    if n==164: return n>=492\n    if n==165: return n>=493\n    if n==166: return n>=494\n    if n==167: return n>=495\n    if "
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        return a ** b\n    except TypeError:\n        print('Bad argument')\n    except ZeroDivisionError:\n        print('Cannot divide by zero')\n    except ValueError:\n        print('Invalid value')\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    def power_int(x):\n        return x**b\n    return power_int(a)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        print(a)\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][1]\n    for value in test_list:\n        if value[1] < minimum:\n            minimum = value[1]\n    return minimum\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    maximum = test_list[0][1]\n    for value in test_list:\n        if value[1] > maximum:\n            maximum = value[1]\n    return maximum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    result = sorted(test_list, key = itemgetter(1,2))\n    return result[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_value = sorted(test_list, key=itemgetter(0))\n    return minimum_value[0][1]\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    my_dict = dict()\n    for item in test_list:\n        if item[1] in my_dict:\n            my_dict[item[1]] += item[0]\n        else:\n            my_dict[item[1]] = item[0]\n    return my_dict.get(min(my_dict, key=my_dict.get), -1)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_second_value = test_list[0][1]\n    for i in test_list:\n        if i[1] < minimum_second_value:\n            minimum_second_value = i[1]\n            minimum_second_value_index = i[0]\n    return minimum_second_value_index\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][1]\n    second_minimum = test_list[1][1]\n    for value in test_list:\n        if value[1] < minimum:\n            minimum = value[1]\n        if value[1] < second_minimum:\n            second_minimum = value[1]\n    return minimum,second_minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    # create a variable for the lowest value in the list.\n    lowest_value = None\n    # create a variable for the index of the lowest value in the list.\n    index_of_lowest_value = None\n    # iterate through each value in the list.\n    for index, item in enumerate(test_list):\n        # if the value at the index is smaller than the lowest value\n        if item[1] < lowest_value and index > index_of_lowest_value:\n            # update the lowest value and index\n            lowest_value = item[1]\n            index_of_lowest_value = index\n        # add 1 to the index so that you don't have to add the index to the list.\n    return itemgetter(0)(test_list)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = test_list[0][0]\n    for i in range(len(test_list)):\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n    return min_val\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # TODO: Write your solution here\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < minimum:\n            minimum = test_list[i][1]\n    return minimum\n    pass\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    maximum = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] > maximum:\n            maximum = test_list[i][1]\n    return maximum\n    pass\ndef index_mean(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the tuple.\n    '''\n    total = 0\n    for i in range(1, len(test_list)):\n        total = total + test_list[i][1]\n    average = total / (len(test_list))\n    return average\n    pass\ndef count_values(test_list):\n    '''\n    Given a list of tuples, write a function that returns the number of values in the list.\n    '''\n    total = 0\n    for i in range(1, len(test_list)):\n        total = total + 1\n    return total\n    pass\ndef index_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the list in sorted order by the values of the tuple.\n    '''\n    test_list.sort(key = itemgetter(1))\n    return test_list\n    pass\ndef index_group(test_list, value):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples where the first element of the tuple is equal to the index of the tuple.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        if test_list[i][1] == value:\n            ans.append(test_list[i])\n    return ans\n    pass\ndef index_sorted_list(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples where the first element of the tuple is equal to the index of the tuple.\n    '''\n    test_list.sort(key = itemgetter(1))\n    return test_list\n    pass\ndef compare(test_list1, test_list2):\n    '''\n    Given two lists of tuples, write a function that returns a boolean variable that indicates whether they're equal.\n    '''\n    if test_list1 == test_list2:\n        return True\n    else:\n        return False\n    pass\ndef compare_sorted(test_list1, test_list2):\n    '''\n    Given two lists of tuples, write a function that returns a boolean variable that indicates whether they're equal.\n    '''\n    if test_list1 == test_list2:\n        return True\n    else:\n        return False\n    pass\ndef compare_value(test_list1, test_list2):\n    '''\n    Given two lists of tuples, write a function that returns a boolean variable that indicates whether they're equal.\n    '''\n    if test_list1 == test_list2:\n        return True\n    else:\n        return False\n    pass\ndef main():\n    test_list1 = []\n    test_list2 = []\n    index = input(\"What do you want to index? Write 'i' for the index, 'd' for the value,'s' for the sorted list, 'g' for the group, 'v' for the value, 't' for the test_list1 and'm' for the test_list2: \")\n    while index!='m' and index!= 't' and index!= 'v' and index!='s':\n        index = input(\"Wrong input, please try again: \")\n    if index =='s':\n        print(index_minimum(test_list1))\n        print(index_maximum(test_list1))\n        print(index_mean(test_list1))\n        print(index_group(test_list1, input(\"What number would you like to group by? \")))\n        print(index_sort(test_list1))\n        print(index_sorted_list(test_list1))\n    elif index == 'i':\n        print(index_minimum(test_list2))\n        print(index_maximum(test_list2))\n        print(index_mean(test_list2))\n        print(index_group(test_list2, input(\"What number would you like to group by? \")))\n        print(index_sort(test_list2))\n        print(index_sorted_list(test_list2))\n    elif index == 'd':\n        print(test_list1)\n        print(test_list2)\n    elif index == 'v':\n        print(test_list1)\n        print(test_list2)\n    elif index == 't':\n        print(test_list1)\n        print(test_list2)\n    elif index =='m':\n        print(test_list1)\n        print(test_list2)\n    pass\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    smallest_index = 0\n    for index, number in enumerate(lst):\n        if len(number) < len(smallest):\n            smallest = number\n            smallest_index = index\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for i in lst:\n        for j in i:\n            if len(j) < min_len:\n                min_len = len(j)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the minimum length to -1\n    min = -1\n    # Traverse all the sublists in the given list\n    for sublist in lst:\n        # Compare the sublist to all the sublists from the list\n        if(len(sublist) < min):\n            min = len(sublist)\n    # Return the minimum length\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=lst[0][0] #sorting in ascending order of the element\n    max_len=0\n    for i in range(len(lst)):\n        if lst[i][0]<min_len:\n            min_len=lst[i][0]\n        elif lst[i][0]>max_len:\n            max_len=lst[i][0]\n    return max_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][1]\n    min_index = 0\n    for i in range(0, len(lst)):\n        if lst[i][1] < min_length:\n            min_length = lst[i][1]\n            min_index = i\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    # Your code here\n    if len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum_length = len(lst[0])\n    for row in lst:\n        if len(row) < minimum_length:\n            minimum_length = len(row)\n    return minimum_length"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = lst[0]\n    min_length = 0\n    for i in range(len(lst)):\n        if lst[i][0] < min:\n            min = lst[i][0]\n            min_length = i\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(len(lst), key=len)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count+=1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return n // 2\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    while n%2 == 0:\n        divs += 1\n        n = n//2\n    if n==1:\n        divs -= 1\n    else:\n        divs += 2\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a given integer.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \ndef lucas(n):\n    '''\n    Write a python function to find the lucas number of a given integer.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        if n % 2 == 0:\n            return 1 + lucas(n // 2)\n        else:\n            return n + lucas(n // 2)\n    \ndef power(n, p):\n    '''\n    Write a python function to find the power of a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * power(n - 1, p - 1)\n    \ndef lucasFactorial(n):\n    '''\n    Return the factorial of a given integer.\n    '''\n    return lucas(power(n, 2))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #your code here\n    if n==0:\n        return 1\n    else:\n        return n//2+1 if n%2==0 else n//2\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Create a list to store divisors\n    divisors = []\n    # Start with the number itself\n    divisors.append(n)\n    # Iterate through all values up to 1\n    for i in range(2, n + 1):\n        # If the number is divisible by any two elements, increment the count\n        if (n % i) == 0:\n            divisors.append(i)\n    # Return the number of divisors\n    return len(divisors)"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n    # Write a python function to find the number of divisors of a given integer.\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    a = 1\n    b = 1\n    for i in range(1,n+1):\n        if (n%i) == 0:\n            a += 1\n            b += 1\n        else:\n            a = 1\n            b = 1\n    return a,b\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return len([x for x in range(1, n+1) if n % x == 0])\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Write your code here\n    frequency_dict = {}\n    for element in list1:\n        if element not in frequency_dict:\n            frequency_dict[element] = 1\n        else:\n            frequency_dict[element] += 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        frequency[element] = 0\n        for num in element:\n            frequency[num] = frequency[num] + 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    mydict = {}\n    for lst in list1:\n        for elem in lst:\n            if elem not in mydict:\n                mydict[elem] = 0\n            else:\n                mydict[elem] += 1\n    return mydict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create a dictionary that will keep track of the frequency of each element.\n    freq = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for lst in list1:\n        for element in lst:\n            if element in result:\n                result[element] += 1\n            else:\n                result[element] = 1\n    return result\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            freq_dict[list1[i][j]] = freq_dict.get(list1[i][j], 0) + 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    my_dict = {}\n    for list1_item in list1:\n        for i in list1_item:\n            if list1_item[i] in my_dict:\n                my_dict[list1_item[i]] += 1\n            else:\n                my_dict[list1_item[i]] = 1\n    return my_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    d = {}\n    for i in range(len(list1)):\n        for x in list1[i]:\n            if x in d:\n                d[x] += 1\n            else:\n                d[x] = 1\n    return d\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return numbers[0] * numbers[1]\n    elif len(numbers) == 3:\n        return numbers[0] * numbers[1] * numbers[2]\n    else:\n        m = len(numbers) // 3\n        return numbers[0] * numbers[1] * numbers[2] * m\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    l = len(numbers)\n    m = []\n    for i in range(l):\n        m.append(numbers[i]*l)\n    return m\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    a = 0\n    for i in range(len(numbers)):\n        a = a + numbers[i]\n    return a\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    \n    for i in range(len(numbers)):\n        result.append(numbers[i]*len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 0\n    for i in range(len(numbers)):\n        result += numbers[i]*i\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Base case.\n    if len(numbers) == 0:\n        return 0\n    \n    # If the length of the list is 1, return the list.\n    elif len(numbers) == 1:\n        return numbers[0]\n    \n    # Recursively call.\n    return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied_numbers = []\n    for number in numbers:\n        multiplied_numbers.append(number*number)\n    return multiplied_numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Start with a blank list\n    result = []\n    # Iterate over the list\n    for number in numbers:\n        # Calculate the result and add it to the list\n        result.append(number * len(numbers))\n    # Return the list\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    i=0\n    number=[]\n    while i<len(numbers):\n        sum=0\n        for number in numbers:\n            sum+=number\n        if sum%len(numbers)==0:\n            number.append(sum)\n        else:\n            number.append(sum)\n            i+=1\n    return numbers\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Note:\n    # The given decimal number is a positive integer.\n    # It should be represented as a string with no leading zeros.\n    # The length of the string should be no larger than 15 digits, and no leading zeros should be present.\n    #\n    # Examples:\n    #     decimal_to_binary(8) # '1010'\n    #     decimal_to_binary(9) # '10110011'\n    #     decimal_to_binary(10) # '10101011'\n    #     decimal_to_binary(11) # '101101011'\n    #     decimal_to_binary(20) # '1011100101010'\n    #     decimal_to_binary(-11) # '0111001'\n    #     decimal_to_binary(1234) # '100000000000000011110101101010'\n    #     decimal_to_binary(-123) # '1000000000000000000000000000000000000000000000001'\n    \n    binary_list = []\n    def decimal_to_binary_helper(n, b):\n        '''\n        Do not return anything, modify b in-place instead.\n        '''\n        # 1.Check if b is None or 0\n        if b is None:\n            return\n        # 2.Insert b into the front of the list\n        if n > 0:\n            binary_list.insert(0, b)\n            n -= 1\n            decimal_to_binary_helper(n, b)\n        # 3.Insert n into the end of the list\n        if n < 0:\n            binary_list.append(1)\n            n = -n\n            decimal_to_binary_helper(n, b)\n        # 4.Return\n        return\n    decimal_to_binary_helper(n, 0)\n    return binary_list\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    def to_binary(n,digits):\n        if digits == 0:\n            return f'{n:b}'\n        else:\n            return f'{int(n/2**digits):b}' + to_binary(n%2**digits,digits-1)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 0: \n        num_str = str(n) \n        return '0'*(len(num_str)-len(num_str.rstrip('0'))) + num_str.rstrip('0') \n    else: \n        return '0'*abs(n) \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return ''.join([format(int(i), 'b') for i in bin(n)[2:] if i.isnumeric()])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if type(n) == float: \n        return '{:b}'.format(int(n))\n    elif type(n) == int: \n        return '{:b}'.format(n).zfill(32)\n    elif type(n) == type(''): \n        return '{:b}'.format(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = \"\"\n    for i in range(n):\n        result = str(bin(i))[2:]\n    return result\n    \ndef number_to_decimal(number):\n    '''\n    Write a function to convert a binary string of digits to a decimal number.\n    '''\n    if number==\"\":\n        return 0\n    else:\n        result = 0\n        for i in range(len(number)-1,-1,-1):\n            result += int(number[i])*2**i\n        return result\n    \ndef addition_to_binary(n1,n2):\n    '''\n    Write a function to compute the addition of two binary strings\n    '''\n    result = \"\"\n    for i in range(len(n1)):\n        result += str(bin(n1[i])[2:])[-1]\n    for i in range(len(n2)):\n        result += str(bin(n2[i])[2:])[-1]\n    return result\n    \ndef decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = \"\"\n    for i in range(n):\n        result += str(bin(i))[2:]\n    return result\n    \ndef number_to_decimal(number):\n    '''\n    Write a function to convert a binary string of digits to a decimal number.\n    '''\n    if number==\"\":\n        return 0\n    else:\n        result = 0\n        for i in range(len(number)):\n            result += int(number[i])*2**i\n        return result\n    \ndef multiplication_to_binary(n1,n2):\n    '''\n    Write a function to compute the multiplication of two binary strings\n    '''\n    result = \"\"\n    for i in range(len(n1)):\n        result += str(bin(n1[i])[2:])[-1]\n    for i in range(len(n2)):\n        result += str(bin(n2[i])[2:])[-1]\n    return result\n    \ndef decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = \"\"\n    for i in range(n):\n        result += str(bin(i))[2:].zfill(8)\n    return result\n    \ndef binary_to_decimal(n):\n    '''\n    Write a function to convert a binary string of digits to a decimal number.\n    '''\n    result = 0\n    for i in range(len(n)):\n        result += int(n[i])*2**i\n    return result\n    \ndef power_to_binary(n,k):\n    '''\n    Write a function to compute the power of two a binary string of digits.\n    '''\n    result = \"\"\n    while n > 0:\n        result += str(bin(n%2)[2:])[-1]\n        n //= 2\n    for i in range(k-1):\n        result += \"0\"\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return str(bin(n)[2:])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    b = ''\n    while n!= 0:\n        b = str(n % 2) + b\n        n = n // 2\n    return b\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # TODO: write your code here\n    if num==0:\n        return 0\n    if num<0:\n        num=num*-1\n        num=int(num)\n    while (num%2==0):\n        num=num//2\n    while (num%3==0):\n        num=num//3\n    while (num%4==0):\n        num=num//4\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #https://www.w3schools.com/python/python_functions.asp?filename=functions_python_05\n    #https://stackoverflow.com/questions/4757251/how-to-reverse-a-number-in-python\n    '''\n    Implement this function\n    '''\n    #_dictionary_ = {'n':1}\n    #_dictionary_ = {'r':2}\n    #_dictionary_ = {'r':1}\n    _dictionary_ = {'t':1}\n    if num % 2 == 0:\n        _next = _dictionary_['t']\n    else:\n        _next = _dictionary_['n']\n    #print(_next, _dictionary_)\n    return _next\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # If the number is even, it's even.\n    if num % 2 == 0:\n        return 3*num+1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    \n    if num < 0:\n        print('Number must be nonnegative.')\n        return 0\n    \n    if num % 2 == 0:\n        return next_smallest_palindrome(num//2) + 1\n    else:\n        return next_smallest_palindrome(num//2)\n    \ndef next_biggest_palindrome(num):\n    '''\n    Write a function to find the next biggest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num < 0:\n        print('Number must be nonnegative.')\n        return 0\n    if num % 2 == 0:\n        return next_biggest_palindrome(num//2) + 1\n    else:\n        return next_biggest_palindrome(num//2)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pal_len = len(str(num))\n    # If the number is even, return the sum of the square roots of all the odd numbers.\n    if (pal_len % 2 == 0):\n        sqr_nums = []\n        for i in range(0, pal_len, 2):\n            sqr_nums.append(int(str(num)[i] + str(num)[i+1]))\n        nums_sqr = []\n        for i in sqr_nums:\n            nums_sqr.append(i**2)\n        nums_sqr.sort()\n        return sum(nums_sqr)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while num > 0:\n        if num % 10 == 1:\n            return num\n        if num % 10 == 0 and num % 100 == 0:\n            return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if(is_palindrome(num)):\n        return num\n    else:\n        while(True):\n            candidate = num-1\n            while(candidate>=0 and num%candidate!=0):\n                candidate = candidate*candidate\n            if(candidate!=0):\n                return candidate\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 1\n    if num % 10 == 0:\n        return int(num / 10) + next_smallest_palindrome(num // 10)\n    return int(num / 10) + next_smallest_palindrome(num % 10)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # base case\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    # binary search\n    start = 1\n    end = num\n    while start < end:\n        mid = (start+end)//2\n        if palindrome(mid):\n            start = mid\n        else:\n            end = mid\n    return end+1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    nums = [i for i in range(1, num+1)]\n    nums_copy = nums.copy()\n    nums.sort()\n    for i in range(0, len(nums)):\n        if nums[i] < num:\n            nums_copy[i], nums[i] = nums[i], nums[i]\n        elif nums[i] > num:\n            nums_copy[i], nums[i] = nums[i], nums[i]\n    \n    for i in range(1, len(nums)):\n        if nums[i] == nums[i-1]:\n            continue\n        if nums[i] > nums[i-1]:\n            continue\n        if nums[i] < nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n    return nums[len(nums)-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Find the index of the kth element in the array\n    k = k % len(arr)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k == 0:\n        return -1\n    elif k > len(arr):\n        return -1\n    else:\n        start = 0\n        end = len(arr) - 1\n        while start < end:\n            mid = start + (end - start) // 2\n            if arr[mid] == k:\n                return mid\n            elif arr[mid] > k:\n                end = mid - 1\n            else:\n                start = mid + 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Find the index of the kth element\n    start = 1\n    end = len(arr)\n    if (k < end):\n        # Return the index\n        return arr[k - 1]\n    else:\n        # Index of the element to return\n        return arr[start - 1"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Returns the kth element\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Your code here\n    \n    #Time complexity: O(log k)\n    #Space Complexity: O(1)\n    \n    return arr[k-1]\n    \narr = [1,2,3,4,5,6,7,8,9,10]\nk = 3\nprint(kth_element(arr, k))\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(0, len(arr)):\n        if i < k:\n            return arr[i]\n    return -1"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    # We have to start with the first element\n    first = arr[0]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0].isupper():\n        word = word[1:]\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    import string\n    if word[0].islower():\n        return word + string.uppercase[0] + word[1:]\n    else:\n        return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    # your code goes here\n    snake = word.split('_')\n    s = snake[1]\n    snake[1] = snake[0]\n    snake[0] = s[:1].lower() + s[1].upper() + snake[1][-1].lower()\n    return ''.join(snake)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = \"\"\n    for char in word:\n        if char.isupper():\n            camel_case_word += char.lower()\n        else:\n            camel_case_word += char.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # First try to get the first character and add it to the end of the string.\n    # If that fails, just return the original word.\n    # Example:\n    # if 'a' and 'z' and 'A' and 'Z' and 'AA' and 'ZZ' and 'AAZ' and 'ZZZ' and 'AAA'\n    # and 'ZZZ' and 'ZZZAA' return 'AZAA', 'ZZZZAA'\n    # If all the three numbers are found, then return the word.\n    # Example:\n    # if 'a' and 'z' and 'AA' and 'ZZ' and 'AAZ' and 'ZZZ' and 'AAA'\n    # and 'ZZZAA' and 'ZZZZAA' return 'AZAAA', 'ZZZZAAA'\n    # If all the numbers and the first character are found, then return the original word\n    if word.lower() == word[0]:\n        return word\n    elif word.lower()[0:2] == 'a' and word[1] == 'z':\n        return word[0] + word[2:].upper()\n    else:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError('Implement me!')\n    return word.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter = word[0]\n    last_letter = word[len(word)-1]\n    if first_letter =='s':\n        word = word[1:]\n    else:\n        word = word[1:] + first_letter\n    if last_letter =='s':\n        word = word[:-1]\n    else:\n        word = word[:-1] + last_letter\n    return word"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # The first letter of the string is the uppercase letter\n    new_word = ''\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    return word.lower()[0].upper()+word.lower()[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace(\"_\",\"\")\n    word = word.replace(\"-\",\"_\")\n    word = word.replace(\".\",\"_\")\n    word = word.replace(\" \",\"_\")\n    word = word.replace(\" \",\"_\")\n    word = word.replace(\"_\",\"\")\n    return word\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    total = 0 \n    for i in range(m, n+1):\n        for j in range(1, i):\n            total += j\n    return total \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    assert n == m, \"n and m must be equal\"\n    prime = [True for x in range(n + 1)]\n    prime[0] = False\n    prime[1] = False\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # find the minimum cycle in the graph\n    cycle = []\n    n1 = n-1\n    while True:\n        if n1 == 0:\n            break\n        elif n1 == 1:\n            cycle.append(n1)\n            n1 = 0\n        else:\n            cycle.append(n1)\n            n1 = n1 - 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= m:\n        return n\n    elif m < n:\n        return eulerian_num(n, m+1)\n    else:\n        return eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler = 0\n    for i in range(n):\n        euler += m**(n-i-1)\n    return euler\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    import math\n    if n == m:\n        return n\n    elif m == 0:\n        return math.factorial(n) // math.factorial(m)\n    elif n % m == 0:\n        return eulerian_num(n // m, m)\n    else:\n        return eulerian_num(n, m - 1) + eulerian_num(n // m, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Eulerian number of a(n, m) is the largest eulerian\n    # path of the m-path.\n    eulerian = n*m + 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    n = n % m\n    m = m % n\n    if n == 0:\n        return m\n    elif n == 1:\n        return n\n    elif n == 2:\n        return m + m + m\n    else:\n        return eulerian_num(n - 1, m) + m\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_cycle(x): \n        '''\n        Check if the given value x is a cycle. \n        '''\n        x = str(x)\n        if x[0] == x[-1]: \n            return False\n        if len(x) == 1: \n            return True\n        \n        if x[0] == '0' and x[-1] == '0': \n            return is_cycle(int(x[1:]))\n        if x[0] == '0' and x[-1] == '1': \n            return is_cycle(int(x[1:-1]))\n        if x[0] == '1' and x[-1] == '0': \n            return is_cycle(int(x[1:]))\n        if x[0] == '1' and x[-1] == '1': \n            return is_cycle(int(x[1:-1]))\n        return False\n        \n    def generate_eulerian(start_node):\n        '''\n        Find the Eulerian path from a starting node. \n        '''\n        path = []\n        visited = set()\n        \n        queue = []\n        queue.append(start_node)\n        visited.add(start_node)\n        \n        while queue:\n            node = queue.pop(0)\n            for edge in graph[node]:\n                if edge not in visited:\n                    queue.append(edge[0])\n                    visited.add(edge[0])\n        \n        print(path)\n        \n    def print_eulerian(path): \n        '''\n        Print the Eulerian path. \n        '''\n        i = 0\n        while i < len(path):\n            print(path[i], end=' ')\n            i += 1\n        print()\n    \n    generate_eulerian(m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    graph = [[] for _ in range(n+1)]\n    # for n, m in (0, 0), (1, 0), (2, 0), (0, 1), (1, 1), (2, 1), (0, 2), (1, 2), (2, 2):\n    for a, b in (0, 0), (1, 0), (2, 0), (0, 1), (1, 1), (2, 1), (0, 2), (1, 2), (2, 2):\n        graph[a].append(b)\n        graph[b].append(a)\n    # for i in range(3, n+1):\n    #     for j in range(i, n+1):\n    #         graph[i].append(j)\n    #         graph[j].append(i)\n    #     for k in range(i, n+1):\n    #         graph[i].append(k)\n    #         graph[k].append(i)\n    #         graph[i].append(k)\n    #     for l in range(i, n+1):\n    #         graph[i].append(l)\n    #         graph[l].append(i)\n    #         graph[i].append(l)\n    #     for m in range(i, n+1):\n    #         graph[i].append(m)\n    #         graph[m].append(i)\n    #         graph[i].append(m)\n    #         graph[m].append(i)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # start with an empty list\n    output_list = []\n    \n    # iterate through each sublist, in reverse order\n    for i in range(len(input_list)-1, 0, -1):\n        # for each iteration, check each sublist, if the first element\n        # of the sublist is greater than the last element of the sublist\n        # sort it\n        for j in range(i):\n            if input_list[j][0] > input_list[j+1][0]:\n                temp = input_list[j]\n                input_list[j] = input_list[j+1]\n                input_list[j+1] = temp\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=str.lower)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create an empty sorted list\n    sorted_list = []\n    # start the counting from 1\n    current_index = 0\n    # iterate over the list\n    for sublist in input_list:\n        # create a list to hold the index\n        index_list = []\n        # start the counting from 1\n        for i in range(len(sublist)):\n            # if the current index is less than the length of the array\n            if i == current_index:\n                # append the index list\n                index_list.append(i)\n            # if the current index is greater than the length of the array\n            elif i < len(sublist):\n                # append the index list\n                index_list.append(i)\n        # create a sorted index list\n        sorted_list.append(index_list)\n        # increment the current index\n        current_index += 1\n    # return the sorted list\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists_with_strings(list_of_lists):\n        '''\n        This is a function that sorts a list of lists using the user's input.\n        '''\n        # convert the list of lists into a list of strings\n        sublists = []\n        for item in list_of_lists:\n            sublists.append(','.join(item))\n        # sort the sublists by string\n        return sorted(sublists, key=lambda item: item.split(',')[0])\n    return sort_sublists_with_strings(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort(input_list):\n        print(f'Sorting {input_list}')\n        for i in range(len(input_list)):\n            for j in range(i+1, len(input_list)):\n                if input_list[i][j] > input_list[i][j-1]:\n                    temp = input_list[i]\n                    input_list[i] = input_list[j]\n                    input_list[j] = temp\n        print(input_list)\n    \n    if type(input_list)!= list:\n        raise TypeError(f'{type(input_list)} must be a list, not {type(input_list)}')\n    else:\n        sort(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Create a function to sort the sublists, using the.sort() method.\n    # Create a function to reverse the order, using the.reverse() method.\n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to create a sorted list of the sequence, using the.sort_by_seq() method.\n    # Create a function to reverse the sequence, using the.reverse() method.\n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to create a sorted list of the sequence, using the.sort_by_seq() method.\n    # Create a function to reverse the sequence, using the.reverse() method.\n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to create a sorted list of the sequence, using the.sort_by_seq() method.\n    \n    \n    # Create a function to create a sorted list of the sequence, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq() method.\n    \n    # Create a function to reverse the sequence, using the.reverse() method.\n    \n    # Create a function to sort the sublists, using the.sort_by_seq("
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        for item in sublist:\n            sorted_list.append(item)\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = []\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            output.append(input_list[i][j])\n    output = sorted(output)\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = output[j]\n    return input_list\n    \ndef main():\n    print(\"\\nSorting list of strings: \")\n    print(\"[5,4,3,2,1]\\n\")\n    input_list = input().split(',')\n    print(\"The input list is: \")\n    print(input_list)\n    print(\"\\nSorting the input list: \")\n    input_list = sort_sublists(input_list)\n    print(input_list)\n    print(\"\\nOutput of the input list after sorting is: \")\n    print(sort_sublists(input_list))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        new_list.append([i for i in sorted(sublist)])\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if input_list[i][0] > input_list[j][0]:\n                temp = input_list[i]\n                input_list[i] = input_list[j]\n                input_list[j] = temp\n    return input_list\n    "
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    if lst == []:\n        return 0\n    elif lst[0] == 1:\n        return 1 + count(lst[1:])\n    else:\n        return count(lst[1:])\n        \ndef main():\n    '''\n    Write a Python program to check whether a given word is a palindrome.\n    '''\n    lst = []\n    user_input = input('Enter the word: ')\n    print(count(user_input))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counts = {}\n    for element in lst:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    return counts\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i==True:\n            c = c+1\n    return c\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([True for i in lst if i==True])\n    \ndef is_odd(lst):\n    '''\n    Write a python function to check whether a list contains odd numbers.\n    '''\n    return count(lst)%2==1\n    \ndef is_prime(lst):\n    '''\n    Write a python function to check whether a list contains prime numbers.\n    '''\n    return len([x for x in lst if x>1])==0\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    c = 0\n    for i in lst:\n        if i == True:\n            c+=1\n    return c\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst_len = len(lst)\n    count_true = 0\n    for i in range(lst_len):\n        if lst[i] == True:\n            count_true += 1\n    return count_true\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code here\n    count = 0\n    for element in lst:\n        if element == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    \n    for i in range(0, len(test_list)):\n        test_tup.append(test_list[i])\n        test_tup[i] = test_tup[i] + test_tup[i+1]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list) == len(test_tup):\n        for num in range(0, len(test_list)):\n            test_tup[num] = test_list[num]\n    else:\n        print('invalid list')\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + [test_tup]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if type(test_list) == type(()):\n        test_list += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_tup) == type((())) and type(test_list) == type(()):\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_tup) == type(()) and type(test_list) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_tup) == type(()) and type(test_list) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_tup) == type(()) and type(test_list) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_tup) == type(()) and type(test_list) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_tup) == type(()) and type(test_list) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_tup) == type(()) and type(test_list) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(()):\n        test_list += (None,)\n        test_tup += (None,)\n        test_tup += (None,)\n        return add_lists(test_list[0], test_tup)\n    if type(test_list) == type(()) and type(test_tup) == type(())"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return_list = []\n    for item in test_list:\n        return_list.append(item)\n    return return_list, test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + test_list\n    return new_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list) == 0:\n        return\n    elif len(test_list) == 1:\n        test_tup.append(test_list)\n    else:\n        if isinstance(test_list[0], tuple):\n            test_tup.append(test_list)\n        else:\n            test_tup.append((test_list, test_list))\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_list == None:\n        return\n    if test_tup == None:\n        return\n    test_list.append(test_tup)\n    test_tup = None\n    return\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    mergedList = []\n    if len(num1)>0:\n        if len(num1)>1:\n            if num1[0] < num2[0]:\n                if num1[0] > num3[0]:\n                    mergedList.append(num1[0])\n                    mergedList.append(num2[0])\n                    mergedList.append(num3[0])\n            else:\n                if num1[0] > num3[0]:\n                    mergedList.append(num1[0])\n                    mergedList.append(num3[0])\n        else:\n            if num1[0] < num3[0]:\n                mergedList.append(num1[0])\n                mergedList.append(num3[0])\n    if len(num2)>0:\n        if len(num2)>1:\n            if num2[0] < num3[0]:\n                if num2[0] > num1[0]:\n                    mergedList.append(num2[0])\n                    mergedList.append(num1[0])\n                    mergedList.append(num3[0])\n            else:\n                if num2[0] > num1[0]:\n                    mergedList.append(num2[0])\n                    mergedList.append(num1[0])\n        else:\n            if num2[0] < num3[0]:\n                mergedList.append(num2[0])\n                mergedList.append(num3[0])\n    if len(num3)>0:\n        if len(num3)>1:\n            if num3[0] < num1[0]:\n                mergedList.append(num3[0])\n                mergedList.append(num1[0])\n            else:\n                mergedList.append(num3[0])\n        else:\n            if num3[0] < num1[0]:\n                mergedList.append(num3[0])\n                mergedList.append(num1[0])\n    return mergedList\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    \n    result = []\n    result_count = 0\n    \n    while(i < len(num1) and j < len(num2) and k < len(num3)):\n        if num1[i] < num2[j] and num2[j] < num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] < num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n            \n        result_count += 1\n        \n    while(i < len(num1)):\n        result.append(num1[i])\n        result_count += 1\n        i += 1\n        \n    while(j < len(num2)):\n        result.append(num2[j])\n        result_count += 1\n        j += 1\n        \n    while(k < len(num3)):\n        result.append(num3[k])\n        result_count += 1\n        k += 1\n        \n    result.sort()\n    \n    return result, result_count\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if not num1 or not num2 or not num3:\n        return []\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    \n    while len(num1)!= 0 and len(num2)!= 0 and len(num3)!= 0:\n        if num1[0] < num2[0] < num3[0]:\n            merged.append(num1[0])\n            num1.remove(num1[0])\n            num2.remove(num2[0])\n            num3.remove(num3[0])\n        elif num1[0] < num3[0] < num2[0]:\n            merged.append(num1[0])\n            num1.remove(num1[0])\n            num2.remove(num2[0])\n            num3.remove(num3[0])\n        elif num1[0] < num3[0] < num2[0]:\n            merged.append(num1[0])\n            num1.remove(num1[0])\n            num2.remove(num2[0])\n            num3.remove(num3[0])\n        else:\n            merged.append(num2[0])\n            num2.remove(num2[0])\n            num3.remove(num3[0])\n            \n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    #using min function to get the min value of each list\n    min1 = min(num1)\n    min2 = min(num2)\n    min3 = min(num3)\n    #using max function to get the max value of each list\n    max1 = max(num1)\n    max2 = max(num2)\n    max3 = max(num3)\n    #using sum function to get the total value of the merged list\n    s = (max1 + min1) + (max2 + min2) + (max3 + min3)\n    #using heapq.heappush method to add the values to the heap\n    heapq.heappush(sorted_list,s)\n    #using heapq.heappop method to remove the smallest element from the heap\n    sorted_list.pop()\n    return heapq.heappop(sorted_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    return merge(num1,num2,num3)\ndef merge(num1,num2,num3):\n    '''\n    This function takes three lists and merges them into a single list.\n    '''\n    mergedList = []\n    num1_index = 0\n    num2_index = 0\n    num3_index = 0\n    while (num1_index < len(num1)) and (num2_index < len(num2)):\n        if num1[num1_index] < num2[num2_index]:\n            mergedList.append(num2[num2_index])\n            num2_index = num2_index + 1\n        else:\n            mergedList.append(num1[num1_index])\n            num1_index = num1_index + 1\n    while (num2_index < len(num2)) and (num3_index < len(num3)):\n        if num2[num2_index] < num3[num3_index]:\n            mergedList.append(num1[num1_index])\n            num1_index = num1_index + 1\n        else:\n            mergedList.append(num2[num2_index])\n            num2_index = num2_index + 1\n        if num3_index < len(num3):\n            mergedList.append(num3[num3_index])\n            num3_index = num3_index + 1\n    while (num3_index < len(num3)) and (num1_index < len(num1)):\n        mergedList.append(num1[num1_index])\n        num1_index = num1_index + 1\n    return mergedList\ndef merge_sorted_list2(num1,num2,num3):\n    '''\n    This function takes three lists and merges them into a single list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    num1_index = 0\n    num2_index = 0\n    num3_index = 0\n    while (num1_index < len(num1)) and (num2_index < len(num2)):\n        if num1[num1_index] < num2[num2_index]:\n            num1[num1_index] = num2[num2_index]\n            num2_index = num2_index + 1\n        else:\n            num1[num1_index] = num1[num1_index] + num2[num2_index]\n            num2_index = num2_index + 1\n    while (num2_index < len(num2)) and (num3_index < len(num3)):\n        if num2[num2_index] < num3[num3_index]:\n            num1[num1_index] = num1[num1_index] + num2[num2_index]\n            num2_index = num2_index + 1\n        else:\n            num1[num1_index] = num1[num1_index] + num2[num2_index]\n            num2_index = num2_index + 1\n        if num3_index < len(num3):\n            num1[num1_index] = num1[num1_index] + num3[num3_index]\n            num3_index = num3_index + 1\n    while (num3_index < len(num3)) and (num1_index < len(num1)):\n        num1[num1_index] = num1[num1_index] + num3[num3_index]\n        num3_index = num3_index + 1\n    return num1\ndef merge_sorted_list3(num1,num2,num3):\n    '''\n    This function takes three lists and merges them into a single list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    num1_index = 0\n    num2_index = 0\n    num3_index = 0\n    while (num1_index < len(num1)) and (num2_index < len(num2)):\n        if num1[num1_index] < num2[num2_index]:\n            num1[num1_index] = num2[num2_index]\n            num2_index = num2_index + 1\n        else:\n            num1[num1_index] = num1[num1_index] + num2[num2_index]\n            num2_index = num2_index + 1\n        if num3_index < len(num3):\n            num1[num1_index] = num1[num1_index] + num3[num3_index]\n            num3_index = num3_index + 1\n    while (num2_index < len(num2)) and (num3_index < len(num3)):\n        num1[num1_index] = num1[num1_index] + num3[num3_index]\n        num2_index = num2_index + 1\n        if num3_index < len(num3):\n            num1[num1_index] = num1[num1_index] + num3[num3_index]\n            num3_index = num3_index + 1\n    while (num3_index < len(num3)) and (num1_index < len(num1)):\n        num1[num1_index] = num1[num1_index] + num3[num3_index]\n        num3_index = num3_index + 1\n    return num1\ndef merge_sorted_list3_reverse(num1,num2,num3):\n    '''\n    This function takes three lists and merges them into a single list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    num1_index = 0\n    num2_index = 0\n    num3_index = 0\n    while (num1_index < len(num1)) and (num2_index < len(num2)):\n        if num1[num1_index] < num2[num2_index]:\n            num1[num1_index] = num2[num2_index]\n            num2_index = num2_index + 1\n        else:\n            num1[num1_index] = num1[num1_index] + num2[num2_index]\n            num2_index = num2_index + 1\n        if num3_index < len(num3):\n            num1[num1_index] = num1[num1_index] + num3[num3_index]\n            num3_index = num3_index + 1\n    while (num2_index < len(num2)) and (num3_index < len(num3)):\n        num1[num1_index] = num1[num1_index] + num3[num3_index]\n        num2_index = num2_index + 1\n        if num3_index < len(num3):\n            num1[num1_index] = num1[num1_index] + num3[num3_index]\n            num3_index = num3_index + 1\n    while (num3_index < len(num3)) and (num1_index < len(num1)):\n        num1[num1_index] = num1[num1_index] + num3[num3_index]\n        num3_index = num3_index + 1\n    return num1\ndef merge_sorted_list_reverse(num1,num2,num3):\n    '''\n    This function takes three lists and merges them into a single list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    num1_index = 0\n    num2_index = 0\n    num3_index = 0\n    while (num1_index < len(num1)) and (num2_index < len(num2)):\n        if num1[num1_index] < num2[num2_index]:\n            num1[num1_index] = num2[num2_index]\n            num2_index = num2_index + 1\n        else:\n            num1[num1_index] = nu"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # # I know this is correct, but it's not.\n    # # my_list = num1 + num2 + num3\n    # # return my_list\n    # # num1_sorted = sorted(my_list)\n    # # num2_sorted = sorted(my_list)\n    # # num3_sorted = sorted(my_list)\n    # # return num1_sorted + num2_sorted + num3_sorted\n    # num1_sorted = []\n    # num2_sorted = []\n    # num3_sorted = []\n    # my_list = []\n    # num1.sort()\n    # num2.sort()\n    # num3.sort()\n    # for i in range(len(num1)):\n    #     my_list.append(num1[i])\n    # for j in range(len(num2)):\n    #     my_list.append(num2[j])\n    # for k in range(len(num3)):\n    #     my_list.append(num3[k])\n    # return my_list\n    num1_sorted = sorted(num1)\n    num2_sorted = sorted(num2)\n    num3_sorted = sorted(num3)\n    return num1_sorted + num2_sorted + num3_sorted\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    merged = []\n    i = 0\n    j = 0\n    while i < len(num1) and j < len(num2) and i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged.append(num1[i])\n            i += 1\n        else:\n            merged.append(num2[j])\n            j += 1\n    while i < len(num1):\n        merged.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged.append(num2[j])\n        j += 1\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i=0\n    j=0\n    k=0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] > num2[j] and num1[i] > num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] > num1[i] and num2[j] > num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        elif num3[k] > num1[i] and num3[k] > num2[j]:\n            merged_list.append(num3[k])\n            k += 1\n        else:\n            merged_list.append(num1[i])\n            i += 1\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n    return merged_list\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # solution: \n    # return int(s[n % len(s)] * (n - (s.count(s[n % len(s)]) % 2) - 1))\n    return sum(s[n % len(s)] for n in range(1,len(s) + 1))\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if int(s[i-1])%2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # your code here\n    i = 0\n    n = n % 2\n    for i in range(n):\n        if s[i] % 2 == 1:\n            i += 1\n    return len(s) - i\n    # return -1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    even = s[1::2]\n    even_count = s.count(even)\n    print(even_count)\n    odd_count = s.count('0')\n    print(odd_count)\n    if odd_count == even_count:\n        print('The number of even digits is',even_count)\n    else:\n        print('The number of odd digits is',odd_count)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(0, len(s)):\n        if (s[i % len(s)] + s[i % len(s) + 1]) % 2 == 1:\n            result += 1\n    print(result)\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def odd(a,n):\n        return a + n\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n%2 == 0:\n        return odd(s[n//2], odd(s, n//2))\n    else:\n        return odd(s[n//2], odd(s, (n-1)//2)) + odd(s[n//2], (n-1)//2)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s == '':\n        return 0\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 1\n    else:\n        return odd_Equivalent(s[1:],n-1) + odd_Equivalent(s[0],n)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    even = 0\n    odd = 0\n    for i in range(n):\n        if s[i] == '0':\n            even += 1\n        else:\n            odd += 1\n    return even + odd\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        if (s[i]%2==1):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Write your code here.\n    counter = 0\n    for i in s:\n        if(i%2!=0):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for nested_list in nestedlist:\n        for nested_item in nested_list:\n            if nested_item not in common_list:\n                common_list.append(nested_item)\n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    list_of_lists = []\n    list_of_lists = nestedlist\n    index = 0\n    for i in range(len(list_of_lists)):\n        if i==0:\n            list_of_lists[i] = list_of_lists[i][index:index+len(list_of_lists[i])]\n        elif index+len(list_of_lists[i]) < len(list_of_lists[i]):\n            list_of_lists[i] = list_of_lists[i][index:index+len(list_of_lists[i])]\n        else:\n            list_of_lists[i] = list_of_lists[i][:index] + list_of_lists[i][index+len(list_of_lists[i]):]\n        index += len(list_of_lists[i])\n    return list_of_lists\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    i=0\n    j=0\n    l1=[]\n    l2=[]\n    for l in nestedlist:\n        if type(l) is list:\n            i=i+1\n            j=j+len(l)\n            for k in range(len(l)):\n                l1.append(l[k])\n        elif type(l) is int:\n            l2.append(l)\n    common=list(set(l1).intersection(set(l2)))\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l1 = []\n    l2 = []\n    for x in nestedlist:\n        if isinstance(x, list):\n            l1.extend(x)\n        else:\n            l2.append(x)\n    return l1, l2\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if i.index(j) not in common:\n                common.append(i.index(j))\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        common_elements += sublist\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for element in nestedlist:\n        if type(element) is list:\n            common.extend(common_in_nested_lists(element))\n        else:\n            common.append(element)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # First, take the length of the list and store in the len variable\n    length_list = len(nestedlist)\n    # Declare empty dictionary for the result\n    result = {}\n    # Start loop for nested lists\n    for nestedlist_index in range(length_list):\n        # Declare empty string for the result\n        result_string = \"\"\n        # Iterate over each element in nested lists\n        for index in range(len(nestedlist)):\n            # If the index is less than the length of the list,\n            # add the list as string in the result_string\n            if index < nestedlist_index:\n                result_string += nestedlist[index]\n            else:\n                # If the index is greater than the length of the list,\n                # remove the element from the nested list and append it\n                # to the result_string\n                if nestedlist_index < length_list - 1:\n                    nestedlist_index -= 1\n                    result_string += nestedlist[nestedlist_index]\n                else:\n                    # If the index is greater than the length of the list,\n                    # remove the element from the nested list and append it\n                    # to the result_string\n                    result_string += nestedlist[nestedlist_index]\n                    break\n        # Check to see if the result string contains any elements\n        # from the nested lists\n        if result_string:\n            # Store the result in the result dictionary\n            result[nestedlist_index] = result_string\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    import itertools\n    return list(itertools.chain(*nestedlist))\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit() == False:\n        return False\n    else:\n        return True\n    \ndef main():\n    '''\n    Ask the user to enter their name and their surname. \n    Check if they entered a number. If so, ask them to enter a number.\n    \n    Return the letter or number of their surname in the proper format.\n    '''\n    print(\"Hello,\\n\\tWelcome to the Number checker.\")\n    \n    name = input(\"What is your name? \")\n    surname = input(\"What is your surname? \")\n    \n    name_surname = name + \" \" + surname\n    \n    while check_integer(name_surname) == False:\n        print(\"\\tInvalid input. Try again.\")\n        name = input(\"What is your name? \")\n        surname = input(\"What is your surname? \")\n    \n    print(\"\\t\" + name_surname)\n    return name_surname\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n    \ndef check_number(text):\n    '''\n    Write a function to check if a string represents a number or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n    \ndef check_float(text):\n    '''\n    Write a function to check if a string represents a number or not.\n    '''\n    try:\n        float(text)\n    except ValueError:\n        return False\n    return True\n    \ndef number_validator(a):\n    '''\n    Write a function to validate a number.\n    '''\n    while check_number(a):\n        a = input('Enter a valid number.\\n')\n    return a\n    \ndef float_validator(a):\n    '''\n    Write a function to validate a number.\n    '''\n    while check_float(a):\n        a = input('Enter a valid number.\\n')\n    return a\n    \ndef integer_validator(a):\n    '''\n    Write a function to validate a number.\n    '''\n    while check_integer(a):\n        a = input('Enter a valid number.\\n')\n    return a\n    \ndef add(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return a + b\n    \ndef subtract(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return a - b\n    \ndef multiply(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return a * b\n    \ndef divide(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return a / b\n    \ndef exponent(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return a ** b\n    \ndef factorial(a):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return a * factorial(a-1)\n    \ndef mod_factorial(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return a % b\n    \ndef power(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return a ** b\n    \ndef logical_or(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return a or b\n    \ndef logical_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return a and b\n    \ndef logical_not(a):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return not a\n    \ndef logical_or_not(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_or(a, b)\n    \ndef logical_and_not(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b)\n    \ndef logical_and_or(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b) or logical_or(a, b)\n    \ndef logical_and_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b) and logical_or(a, b)\n    \ndef logical_or_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_or(a, b) and logical_and(a, b)\n    \ndef logical_and_or_not(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b) or logical_or(a, b)\n    \ndef logical_and_and_not(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b) and logical_or(a, b)\n    \ndef logical_and_or_or(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b) or logical_or(a, b) or logical_and(a, b)\n    \ndef logical_and_and_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b) and logical_and(a, b) and logical_and(a, b)\n    \ndef logical_or_or_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_or(a, b) or logical_or(a, b) and logical_and(a, b)\n    \ndef logical_or_and_or(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_or(a, b) or logical_or(a, b) or logical_and(a, b)\n    \ndef logical_and_or_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b) and logical_or(a, b) or logical_and(a, b) and logical_and(a, b)\n    \ndef logical_or_or_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_or(a, b) or logical_or(a, b) and logical_and(a, b)\n    \ndef logical_or_and_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_or(a, b) and logical_and(a, b) or logical_and(a, b) and logical_and(a, b)\n    \ndef logical_and_or_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b) and logical_or(a, b) or logical_and(a, b) and logical_and(a, b)\n    \ndef logical_or_or_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_or(a, b) or logical_or(a, b) and logical_and(a, b)\n    \ndef logical_and_or_or(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b) or logical_or(a, b) or logical_and(a, b)\n    \ndef logical_and_and_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_and(a, b) and logical_and(a, b) and logical_and(a, b)\n    \ndef logical_or_and_and(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_or(a, b) and logical_and(a, b) and logical_and(a, b)\n    \ndef logical_or_and_or(a, b):\n    '''\n    Write a function to add a number, a and b.\n    '''\n    return logical_or(a, b) or logical_and(a, b) or logical_and(a, b)\n    \nde"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i is None:\n            print(\"Nothing is empty\")\n        else:\n            print(\"No empty strings in the dictionary\")\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if type(i) == dict:\n            empty_dit(i)\n        else:\n            pass\n    return list1\n    \n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # To do: define empty dictionaries\n    \n    # Empty dictionaries\n    empty = {}\n    # print(empty)\n    empty_dit = []\n    \n    # Check if empty dictionaries\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #Empty List is TRUE\n    empty_list = True\n    #Checking for each element in the list\n    for element in list1:\n        #Adding each element to the empty list\n        empty_list = empty_list and element == {}\n    #If all the elements in the list are empty, then the empty list is FALSE\n    if empty_list:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for list_dict in list1:\n        for key, value in list_dict.items():\n            if not value:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        for key, value in list1[i].items():\n            if key!= \"\":\n                if value == '':\n                    print(\"No empty dictionary\")\n                    return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0, len(list1)):\n        for j in range(0, len(list1[i])):\n            if(list1[i][j] == {}):\n                list1[i] = []\n                list1[i].append(list1[i][j])\n                list1[i][j]['sum'] = list1[i][j]['sum'] + 1\n                list1[i].remove(list1[i][j])\n    return list1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i]!= dict():\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        for dict2 in dict1.values():\n            if dict2 == {}:\n                return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        lst.append(nums[i])\n    return int(''.join(str(i) for i in lst))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # TODO: convert tuple to int\n    return nums[0] + nums[1] + nums[2]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # While loop to iterate over the tuples\n    for i in nums:\n        # if tuple contains only 1 element, continue\n        if len(i) == 1:\n            continue\n        # else convert tuple to int and increment count\n        else:\n            i = tuple_to_int(i)\n            i += 1\n            # if count is greater than 32, set i as the next value\n            if i > 32:\n                i = i - 32\n            # if count is less than 8, return 0\n            elif i < 8:\n                i = 0\n            return i\n    # if count is equal to 0, return 0\n    else:\n        return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return nums[0] + nums[1]*10 + nums[2]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # This code is needed to make the output of this function deterministic.\n    # The following code is used as a helper function.\n    return tuple(map(lambda x: int(x), nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = []\n    for num in nums:\n        int_list.append(num)\n    return int_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    res = []\n    for index in range(len(test_list)):\n        # print(type(test_list[index]))\n        res.append([float(x) for x in test_list[index]])\n    return res\n    # print(res)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    convert_fun = [float(x) for x in test_list]\n    return convert_fun\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # create empty list to store converted elements\n    converted_list = []\n    # iterate over each possible convertible elements in list\n    for index in range(len(test_list)):\n        for element in test_list[index]:\n            converted_list.append(element)\n    # check if the converted list has any items\n    if len(converted_list) > 0:\n        # convert all possible convertible elements in the converted list to floats\n        for element in converted_list:\n            try:\n                float(element)\n            except ValueError:\n                # check if element is a float\n                if element.is_integer() or element.is_float():\n                    converted_list.remove(element)\n                    # if list is empty, then error is raised\n                    if len(converted_list) == 0:\n                        raise ValueError\n        # convert remaining items to floats\n        for element in converted_list:\n            try:\n                float(element)\n            except ValueError:\n                # check if element is a float\n                if element.is_integer() or element.is_float():\n                    converted_list.remove(element)\n                    # if list is empty, then error is raised\n                    if len(converted_list) == 0:\n                        raise ValueError\n    else:\n        # if list is empty, raise error\n        if len(converted_list) == 0:\n            raise ValueError\n    return converted_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in i:\n            if isinstance(j, int):\n                j = float(j)\n            else:\n                j = float(j)\n            test_list.remove(j)\n            test_list.append(j)\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for e in test_list:\n        if isinstance(e, list):\n            test_list = list_to_float(e)\n        else:\n            test_list.append(e)\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for string in test_list:\n        if isinstance(string, list):\n            string = [list_to_float(item) for item in string]\n        else:\n            string = list_to_float(string)\n        float_list.append(string)\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_float = []\n    if isinstance(test_list, list):\n        for item in test_list:\n            for x in item:\n                list_float.append(float(x))\n    else:\n        raise TypeError(\"The input must be of type list\")\n    return list_float\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_float = []\n    for list_item in test_list:\n        for item in list_item:\n            if isinstance(item, list):\n                for item_item in item:\n                    if isinstance(item_item, list):\n                        for item_item_item in item_item:\n                            if isinstance(item_item_item, float):\n                                test_list_float.append(item_item_item)\n                    elif isinstance(item_item, float):\n                        if isinstance(item_item, list):\n                            for item_item_item in item_item:\n                                if isinstance(item_item_item, float):\n                                    test_list_float.append(item_item_item)\n    return test_list_float\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.strip().split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split()\n    print(l)\n    return l\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # create an empty list\n    # make a copy of the string\n    # make a variable named as 'name'\n    # pass the string to the function\n    # then, make a variable named as 'list'\n    # return the list\n    return list(string)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        elif arr[i] > arr[j]:\n            i += 1\n        else:\n            j -= 1\n    return arr[j]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # This array is sorted!\n    \n    # The entire array is checked\n    \n    # The first number is the head\n    \n    # The rest are the rest of the array\n    \n    # Use a counter to keep track of the number of occurences\n    \n    # Time complexity is O(n)\n    \n    # Space complexity is O(n)\n    \n    # Returns the head of the first value that appears only once\n    \n    counter = 0\n    for i in range(len(arr)):\n        \n        # If the value is in the array, then we've found a new occurrence, so increment the counter\n        # if the value in the array is the head, we've found a new occurrence, so increment the counter\n        # if the value in the array is not the head, the new element is the last element in the array\n        \n        if arr[i] == arr[counter]:\n            counter += 1\n        \n        # If the array is not sorted, then the result is not a valid index\n        # so return -1\n        # this makes the code a lot simpler and less error-prone, but the idea is to add a check to make sure\n        # that the array is sorted before we encounter this specific element\n        # to do this, we would have to add a counter to make sure the index is not 0\n        # if the number of elements in the array is greater than 1, this means the array is not sorted\n        # and the result is always -1\n        \n        # the only way to make this function work is by adding a counter to the end of the array\n        # thus, since we're not using a counter, if the array is empty, the counter becomes -1\n        # thus, the code can be simpler to use\n        # to implement this function, we're not making sure it works\n        \n        # because we're not using a counter, we'll keep track of the number of occurences\n        # in the array and make sure that there are no duplicates\n        \n        # we'll just use the last number in the array, to make sure that we're not trying to find a duplicate element\n        # but if the index in the array is not 0, then we'll have a duplicate element\n        \n        if counter > 0:\n            if arr[counter]!= arr[i]:\n                return arr[counter]\n            \n            # if the array is unsorted, we need to reset the counter to 0\n            # since we're not checking if the index is 0, so we'll just add 1 to the counter\n            # and check to make sure the array is not empty\n            # if it is, we've found a duplicate\n            counter = 0\n        \n    # this is the last code run. if it wasnt found a duplicate, we have a valid index\n        \n    # so return the last value of the array\n    # the index of the element that appears only once is the head, so we're returning that element\n    # to avoid having to do a loop again\n    \n    return arr[len(arr)-1]"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    idx = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[idx]:\n            idx += 1\n            count += 1\n    return count\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if current index is the first element\n        if arr[i] == i:\n            # Increment the loop counter\n            i += 1\n            # Check if current index is the last element\n            if arr[i] == i:\n                return i\n        # Check if current index is not the last element\n        if arr[i] > i:\n            # Increment the loop counter\n            i += 1\n            # Check if current index is the first element\n            if arr[i] > i:\n                return i\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    t=[]\n    for x in arr:\n        if x not in t:\n            t.append(x)\n        else:\n            if t.count(x)>1:\n                t.remove(x)\n            \n    return t[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # if the array is empty, return None\n    if arr == []:\n        return None\n    # if the array is not sorted, return None\n    if len(arr) <= 1:\n        return arr[0]\n    # if the array is sorted, return the middle element\n    else:\n        l = 0\n        r = len(arr) - 1\n        mid = 0\n        # while the mid is not equal to the last, l is the left half, r is right half, and mid is the mid element\n        while (l < r):\n            mid = (l + r) // 2\n            # if the mid element is in the array\n            if arr[mid] == mid:\n                # and the mid element is the first or the last element\n                if mid == 0:\n                    return mid\n                elif mid == len(arr) - 1:\n                    return arr[mid - 1]\n                # if the mid element is not the first or the last element\n                else:\n                    return arr[mid - 1]\n            # if the mid element is not in the array\n            elif arr[mid] > arr[mid - 1]:\n                # and the mid element is greater than the last element\n                r = mid - 1\n            else:\n                l = mid + 1\n        return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n    \n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid == 0 or arr[mid - 1]!= arr[mid]:\n            return arr[mid]\n        elif arr[mid] == arr[mid - 1]:\n            mid += 1\n        else:\n            end = mid - 1\n    \n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    first_index = 0\n    second_index = len(arr) - 1\n    while first_index < second_index:\n        if arr[first_index] == arr[second_index]:\n            first_index += 1\n            second_index -= 1\n        else:\n            return arr[first_index]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    lst = [x for x in arr]\n    lst.sort()\n    for i in range(len(lst)):\n        j = i\n        while j > 0 and lst[j-1]!= lst[j]:\n            lst[j-1], lst[j] = lst[j], lst[j-1]\n            j -= 1\n    return lst[0]\n    \ndef searchTest(arr, elem):\n    '''\n    Write a python function to test if a element is present in a sorted array.\n    '''\n    lst = [x for x in arr]\n    lst.sort()\n    for i in range(len(lst)):\n        j = i\n        while j > 0 and lst[j-1]!= lst[j]:\n            if lst[j-1] == elem:\n                return True\n            j -= 1\n    return False\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    return get_index_once_in_array(arr, arr[0])\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if(list1[i][0]>list1[j][0]):\n                temp_1=list1[i]\n                temp_2=list1[j]\n                temp_1=temp_1[1:]\n                temp_2=temp_2[1:]\n                temp_1=temp_1[0]\n                temp_2=temp_2[0]\n                product=temp_1*temp_2\n                if(product>max_product):\n                    max_product=product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list_of_tuples = list(zip(*list1)) #zip is a function that turns two lists into a tuple.\n    max_product = list_of_tuples[0][0] * list_of_tuples[1][0] #The first tuple is the first pair\n    for i in range(len(list_of_tuples)):\n        if max_product < list_of_tuples[i][0] * list_of_tuples[i][1]:\n            max_product = list_of_tuples[i][0] * list_of_tuples[i][1] #The second tuple is the first pair\n    print(max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    res = 1\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            res = max(res, list1[i][1]*list1[j][1])\n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] > list1[j][0]:\n                temp_max_product = max(list1[i][1], list1[j][1])\n                if temp_max_product > max_product:\n                    max_product = temp_max_product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = max(list1[i][0]*list1[i][1] for i in range(len(list1)))\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            max_product = max(list1[i] * list1[j], max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            new_list.append((list1[i][0]+list1[j][0],max(list1[i][1],list1[j][1])))\n    new_list=sorted(new_list,key=lambda x:x[0])\n    return new_list[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result=[]\n    max=-1\n    for item in list1:\n        item_as_tuple=tuple(item)\n        if item_as_tuple not in result:\n            result.append(item_as_tuple)\n    result.sort()\n    for i in result:\n        for j in result:\n            if(i==j):\n                if max<i*j:\n                    max=i*j\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    product = 1\n    list_length = len(list1)\n    \n    for i in range(list_length):\n        for j in range(i+1,list_length):\n            product *= list1[i][0] * list1[j][0]\n            \n    return product\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sums = []\n    sum_fibonacci = 0\n    i = 1\n    while i <= limit:\n        if i % 2 == 0:\n            sums.append(i)\n        elif i % 2 == 1:\n            sum_fibonacci = (sum_fibonacci + i)\n        i = i + 1\n    print(sums)\n    print(sum_fibonacci)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n    for i in range(1, limit + 1):\n        for j in range(i, limit + 1):\n            if j % i == 0:\n                amicable_numbers.append(j)\n                amicable_numbers_sum += j\n        return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    amicable_num = []\n    for num in range(1,limit+1):\n        n = num\n        check = 0\n        for num in range(1,num+1):\n            if n % num == 0 and n!= num:\n                check += 1\n        if check == 1:\n            amicable.append(n)\n        \n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    for i in range(1, limit + 1):\n        # sum up all the amicable numbers\n        # and except the number itself\n        if is_amicable(i):\n            amicable_numbers.append(i)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_sum = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    num = 1\n    while num <= limit:\n        num = num + sum\n        sum = sum + num\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit + 1):\n        number = 2\n        while True:\n            if is_amicable(number):\n                total += number\n                break\n            number += 1\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    def is_amicable(n):\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 4\n        while i**2 < n:\n            if n % i == 0 or n % i == i - 1:\n                return False\n            i += 2\n        return True\n    while len(amicable_numbers) <= limit:\n        n = 1\n        while is_amicable(n):\n            n += 2\n        amicable_numbers.append(n)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    number = 1\n    while number <= limit:\n        is_amicable = False\n        for number in range(1,number):\n            if number in amicable_numbers:\n                continue\n            elif number % number == 0:\n                is_amicable = True\n                break\n            if number % number == 0 and number!= 1:\n                break\n        if is_amicable:\n            amicable_numbers.append(number)\n        number += 1\n    print(sum(amicable_numbers))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b.imag == 0:\n        return atan(b.real)\n    else:\n        return atan(b.imag/abs(b.real))\n    \ndef check_angle(a,b,c,d,e,f):\n    '''\n    Check the angle of complex numbers.\n    '''\n    if cmath.isclose(a,b,rel_tol=2.0e-10):\n        if (d*d + e*e)/(2*a*b*c*d) > 1.0:\n            if f == 0:\n                return 0\n            else:\n                return -1\n        elif (d*d + e*e)/(2*a*b*c*d) < -1.0:\n            if f == 0:\n                return -1\n            else:\n                return 1\n        else:\n            return 0\n    elif cmath.isclose(a,c,rel_tol=2.0e-10):\n        if (d*d + e*e)/(2*a*b*c*d) > 1.0:\n            if f == 0:\n                return 0\n            else:\n                return -1\n        elif (d*d + e*e)/(2*a*b*c*d) < -1.0:\n            if f == 0:\n                return 1\n            else:\n                return -1\n        else:\n            return 0\n    elif cmath.isclose(a,f,rel_tol=2.0e-10):\n        if (d*d + e*e)/(2*a*b*c*d) > 1.0:\n            if f == 0:\n                return 0\n            else:\n                return -1\n        elif (d*d + e*e)/(2*a*b*c*d) < -1.0:\n            if f == 0:\n                return 1\n            else:\n                return -1\n        else:\n            return 0\n    else:\n        if (d*d + e*e)/(2*a*b*c*d) > 1.0:\n            if f == 0:\n                return 0\n            else:\n                return 1\n        elif (d*d + e*e)/(2*a*b*c*d) < -1.0:\n            if f == 0:\n                return -1\n            else:\n                return 1\n        else:\n            return 0\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag))\n    \ndef angle_complex_with_pi(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag)) + cmath.pi\n    \ndef angle_complex_with_180(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / cmath.cos(a.imag))\n    \ndef angle_complex_with_n_pi(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n)\n    \ndef angle_complex_with_n_180(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag))\n    \ndef angle_complex_with_180_and_n_180(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag)) + cmath.pi * n\n    \ndef angle_complex_with_180_and_n_pi(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi\n    \ndef angle_complex_with_180_and_n_n_pi(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi * n\n    \ndef angle_complex_with_180_and_n_n_pi_ratio(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag) / n)\n    \ndef angle_complex_with_180_and_n_n_pi_ratio(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi\n    \ndef angle_complex_with_180_and_n_n_pi_ratio(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi\n    \ndef angle_complex_with_180_and_n_n_pi_ratio(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi * n\n    \ndef angle_complex_with_180_and_n_n_pi_ratio(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi * n\n    \ndef angle_complex_with_180_and_n_n_pi_ratio(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi * n\n    \ndef angle_complex_with_n_n_pi_ratio(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi\n    \ndef angle_complex_with_n_n_pi_ratio(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi * n\n    \ndef angle_complex_with_n_n_pi_ratio(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi * n\n    \ndef angle_complex_with_n_n_pi_ratio_plus_phi(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Now we have to get the angle between a and b\n    return abs(b.imag) * cmath.acos(abs(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag) / n * cmath.cos(a.imag)) + n * cmath.pi * n + cmath.pi * n * n\n    \ndef angle_complex_with_n_n_pi_ratio_plus_phi(a,n):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # No"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.acos((cmath.sqrt(b.real**2 + a.real*b.real + b.imag*a.imag)*\n                (b.real*a.imag-b.imag*a.real)))/cmath.sqrt(a.real**2 + a.imag**2))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return complex(c.real,c.imag)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if type(a)==type([]):\n        a=a[0]\n        b=b[0]\n    if type(b)==type([]):\n        b=b[0]\n    angle=cmath.phase(a*b)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.imag==0 and b.imag==0:\n        return 0\n    \n    elif b.imag==0 and a.imag==0:\n        return math.acos(a.real)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c=complex(a,b)\n    angle=cmath.phase(c)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta = atan2(b,a)\n    return theta\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return acos(a.imag*b.imag + b.imag*a.imag)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c_real = cmath.rect(a,b)\n    c_imag = cmath.rect(b,a)\n    return complex(c_real.real,c_imag.imag)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    output = []\n    \n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n            \n        if count < 0:\n            output.append(count)\n            count = 0\n        if count > 0:\n            output.append(count)\n            count = 0\n    return max(output)\n        "
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def longest_difference(s, t, k): \n        \n        if k == 0: \n            return 0\n        elif k == 1: \n            return 1\n        else:\n            result = 0\n            for i in range(0, len(s) - k + 1): \n                result += abs(s[i:i + k]!= t)\n            return result\n        \n    length = 0\n    for i in range(0, len(string)): \n        length += longest_difference(string[i:i + k], string[i + k:i + 2*k], k)\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    i = 0\n    ans = 0\n    num_zeros = 0\n    num_ones = 0\n    while i < len(string):\n        if string[i] == '0':\n            num_zeros += 1\n        if string[i] == '1':\n            num_ones += 1\n        i += 1\n        ans = max(ans, num_zeros - num_ones)\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # make sure the string is a string \n    # if not make it a function\n    # return the max diff\n    \n    # takes the whole string and makes it lowercase \n    string=string.lower()\n    string_length=len(string)\n    \n    # set the counter to 0 \n    count=0\n    \n    # iterate through the string \n    for i in range(string_length): \n        # if we encounter 0\n        if string[i]=='0': \n            # increase the counter \n            count+=1\n            # if the counter is greater than the maximum diff \n            if count>=2: \n                # return the length \n                return string_length-i \n            # if the counter is less than the maximum diff \n            # then we need to add 1 \n            else: \n                # reset the counter \n                count=0 \n    # if we have reached the end of the string \n    # return the length of the string \n    return string_length-i \n    "
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    for i in range(len(string)-1):\n        if string[i]==\"1\" and string[i+1]==\"0\":\n            print(i)\n    return len(string)-i\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == \"\": \n        return 0\n    count = 0\n    for i in range(len(string)): \n        count += int(string[i])\n    if count == 0: \n        return 0\n    if count == 1: \n        return 1\n    return find_length(string[1:]) + find_length(string[0:-1]) + find_length(string[0])\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    result = 0\n    for i in string:\n        if i == '0':\n            result += 1\n        else:\n            result = 0\n    return result\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # O(N)\n    max_difference = 0\n    length_of_string = len(string)\n    for i in range(length_of_string):\n        count = 0\n        for j in range(i, length_of_string):\n            if string[j] == '0':\n                count += 1\n            if string[j] == '1':\n                count -= 1\n        if count > 0:\n            max_difference = max(max_difference, count)\n    return max_difference\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    temp = []\n    for i in range(len(string)):\n        temp.append(string[i])\n    print(temp)\n    max = 0\n    for i in range(len(temp)):\n        if temp[i] == '0':\n            max = max + 1\n        if temp[i] == '1':\n            max = max - 1\n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Write your code here\n    num = string[0]\n    num_1 = string[0]\n    i = 0\n    while i < len(string):\n        if string[i] == '0':\n            num += string[i]\n            num_1 += string[i]\n            i += 1\n        elif string[i] == '1':\n            num += string[i]\n            num_1 += '0'\n            i += 1\n    return abs(len(num) - len(num_1))\n    \n    \nprint(find_length(\"00110\"))"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    l = []\n    d = 0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            if a%i == 0 and b%j == 0:\n                l.append(i)\n                l.append(j)\n                d = d + 1\n    return d\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,min(a,b)+1):\n        if (a%i==0) and (b%i==0):\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    if a == b:\n        return a\n    else:\n        divisors = []\n        for i in range(1,a+1):\n            if (a%i == 0) and (b%i == 0):\n                divisors.append(i)\n        if len(divisors) == 0:\n            return a\n        else:\n            return sum(a,b) + sum(a,a) - sum(b,b) + sum(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a*b\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=0\n    if a==0 or b==0:\n        return 0\n    if a%b==0:\n        c=a\n    else:\n        c=b\n    for i in range(1,c+1):\n        if a%i==0 and b%i==0:\n            c=c+i\n    return c\ndef find_common_divisors(a,b):\n    '''\n    Write a python function to find the common divisors of two given numbers.\n    '''\n    c=0\n    if a==0 or b==0:\n        return 0\n    if a%b==0:\n        c=a\n    else:\n        c=b\n    for i in range(1,c+1):\n        if a%i==0 and b%i==0:\n            c=c+i\n    return c\ndef find_q(a,b):\n    '''\n    Write a python function to find the common divisors of two given numbers.\n    '''\n    c=0\n    if a==0 or b==0:\n        return 0\n    if a%b==0:\n        c=a\n    else:\n        c=b\n    for i in range(1,c+1):\n        if a%i==0 and b%i==0:\n            c=c+i\n    return c\ndef count_q(a,b):\n    '''\n    Write a python function to count the number of Q in a given range.\n    '''\n    c=0\n    if a==0 or b==0:\n        return 0\n    if a%b==0:\n        c=a\n    else:\n        c=b\n    for i in range(1,c+1):\n        if a%i==0 and b%i==0:\n            c=c+i\n    return c\ndef sqrt(a,b):\n    '''\n    Write a python function to find the square root of a given number.\n    '''\n    c=0\n    if a==0 or b==0:\n        return 0\n    if a%b==0:\n        c=a\n    else:\n        c=b\n    for i in range(1,c+1):\n        if a%i==0 and b%i==0:\n            c=c+i\n    return c\ndef euler_phi(a,b):\n    '''\n    Write a python function to find the euler-phi number.\n    '''\n    c=0\n    if a==0 or b==0:\n        return 0\n    if a%b==0:\n        c=a\n    else:\n        c=b\n    for i in range(1,c+1):\n        if a%i==0 and b%i==0:\n            c=c+i\n    return c\ndef chinese_remainder_theorem(a,b):\n    '''\n    Write a python function to find the Chinese Remainder Theorem: a%b.\n    '''\n    c=0\n    if a==0 or b==0:\n        return 0\n    if a%b==0:\n        c=a\n    else:\n        c=b\n    for i in range(1,c+1):\n        if a%i==0 and b%i==0:\n            c=c+i\n    return c\ndef main():\n    a=int(input(\"Enter the first number : \"))\n    b=int(input(\"Enter the second number : \"))\n    c=find_common_divisors(a,b)\n    d=find_q(a,b)\n    e=find_q(a,b)\n    f=count_q(a,b)\n    g=sqrt(a,b)\n    h=euler_phi(a,b)\n    i=chinese_remainder_theorem(a,b)\n    print(\"The Chinese Remainder Theorem is : \")\n    print(c)\n    print(\"The square root of the euler-phi is : \")\n    print(d)\n    print(\"The Q is : \")\n    print(e)\n    print(\"The square root of the euler-phi is : \")\n    print(f)\n    print(\"The Chinese Remainder Theorem is : \")\n    print(i)\n    print(\"The square root of the Chinese Remainder Theorem is : \")\n    print(g)\n    print(\"The euler-phi is : \")\n    print(h)\n    print(\"The Chinese Remainder Theorem is : \")\n    print(c)\n    print(\"The square root of the Chinese Remainder Theorem is : \")\n    print(d)\nmain("
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    pass \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return a + sum(a,b-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    if a%b == 0:\n        return sum\n    else:\n        for x in range(1,a+1):\n            if a%x == 0:\n                sum += x\n        for y in range(1,b+1):\n            if b%y == 0:\n                sum += y\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def dfs(n,d):\n        if d == 0:\n            return 0\n        else:\n            return 1 + dfs(n//d,d-1)\n    return dfs(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #''' input()''\n    #input()\n    #If one input is not a integer, raise TypeError exception\n    if type(a) is not int or type(b) is not int:\n        raise TypeError('please give both numbers as integer')\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if y == 0:\n        raise Exception(\"You cannot multiply by 0\")\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    multiply = 1\n    for x in range(len(x)):\n        multiply *= x\n    for y in range(len(y)):\n        multiply *= y\n    return multiply\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    z = x * y\n    print('z =', z)\n    return z\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x*y\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) > n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str_word =''.join(str.split())\n    \n    words = sorted(str_word.split())\n    # words = sorted(str_word.split(), key=len)\n    \n    if len(words) > n:\n        return''.join(words[n-1:len(words)])\n    else:\n        return''.join(words)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # initialize the variables\n    longest_word = ''\n    lst_length = len(str.split())\n    # find the longest word in the list\n    for i in range(lst_length):\n        if (len(str.split()) - i) > n:\n            # add to the longest word\n            longest_word = str.split()[i]\n    return longest_word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    from collections import defaultdict\n    \n    words = defaultdict(list)\n    \n    for word in str.split():\n        words[' '.join(word.split())].append(word)\n    \n    result = []\n    for k, v in words.items():\n        if len(v) > n:\n            result.extend(v)\n    \n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    longest_words = []\n    \n    for word in str.split():\n        if len(word) >= n:\n            longest_words.append(word)\n        \n    return longest_words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if n == 0:\n        return []\n    str = list(str)\n    str = [word for word in str if len(word) > n]\n    str = ''.join(str)\n    return str\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str:\n        if len(word) > n:\n            return True\n    return False\n    \ndef main():\n    \"\"\"\n    Tests the function on different inputs.\n    \"\"\"\n    print(\"Test 1: Long words\")\n    test1 = long_words(2, words)\n    if test1 == True:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"\")\n    \n    print(\"Test 2: Valid words\")\n    test2 = long_words(3, words)\n    if test2 == True:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"\")\n    \n    print(\"Test 3: Valid words\")\n    test3 = long_words(4, words)\n    if test3 == True:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n    print(\"\")\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Create a temporary string to store words\n    temp_str = ''\n    # Iterate through each word in the list to find words\n    for word in str:\n        # If the current word is longer than n, add it to the temporary string\n        if len(word) > n:\n            temp_str += word +''\n    # Return the temporary string\n    return temp_str\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import re\n    regex = \"[a-zA-Z]+[a-zA-Z0-9]*$\"\n    all_words = []\n    n_list = re.findall(regex, str)\n    #print(n_list)\n    for word in n_list:\n        if len(word) > n:\n            all_words.append(word)\n    return all_words\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code goes here\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if i >= j:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == 1:\n                return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if all(x==0 for x in my_matrix):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # If the square size is too big, return false\n    if len(my_matrix[0]) > 1:\n        return False\n    \n    # Check all the elements of the matrix, add them together\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= 0:\n                my_matrix[i][j] += my_matrix[i][j]\n            \n    # Check whether the square is a magic square, or not, then return true\n    if my_matrix[0][0]!= 0 and my_matrix[1][1]!= 0 and my_matrix[2][2]!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not isinstance(my_matrix, list):\n        return False\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    if is_square(my_matrix):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # create a matrix \n    matrix = my_matrix.copy()\n    # eliminate the number at the top and bottom of the matrix\n    matrix = eliminate_number_to_top_bottom(matrix)\n    # calculate the sum of each row and column\n    sum_of_rows = matrix.sum()\n    sum_of_cols = matrix.sum()\n    # check if the sum is equal to zero or not\n    if sum_of_rows == 0 or sum_of_cols == 0:\n        return False\n    # check if the number is there in the diagonal \n    if matrix[0][0]!= 0:\n        return False\n    # if the sum of all the rows is equal to 0\n    if matrix.sum() == 0:\n        return False\n    # if the sum of all the columns is equal to 0\n    if matrix.sum() == 0:\n        return False\n    # if the sum of both the rows and columns is equal to 0\n    if matrix.sum() == 0:\n        return False\n    # if the sum of the rows is 0 then the sum of the columns is 0\n    if matrix[0][0] == 0:\n        return False\n    # if the sum of the columns is 0 then the sum of the rows is 0\n    if matrix[0][0] == 0:\n        return False\n    # if the number is there in the diagonal then return\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        row_length = len(my_matrix)\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix[i])):\n                if j < row_length-1:\n                    if my_matrix[i][j] == my_matrix[i][j+1] == my_matrix[i][j+2] == my_matrix[i][j+3]:\n                        return True\n        return False\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    ## Your code here\n    \n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if(len(my_matrix) == len(my_matrix[0])):\n        # if square matrix is valid\n        # return True\n        for row in range(len(my_matrix)):\n            for col in range(len(my_matrix[0])):\n                if(row == col):\n                    # print(row, col)\n                    pass\n                elif(my_matrix[row][col] == \"*\"):\n                    return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n    m, n = len(my_matrix), len(my_matrix[0])\n    if (n*n)%4!= 0:\n        return False\n    if (n*n)%4 == 0 and n*n%4!= 0:\n        for i in range(n):\n            for j in range(n):\n                if my_matrix[i][j] == 1:\n                    continue\n                else:\n                    return False\n        return True\n    else:\n        return False\n    \ndef check_perms(permutation):\n    '''\n    Write a function that determines whether the permutation contains every\n    permutation of the list.\n    '''\n    for i in range(len(permutation)):\n        temp = permutation[:i] + permutation[i+1:]\n        if temp in my_perm:\n            return True\n    return False\n    \n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    table = defaultdict(int)\n    max_count = 0\n    table_ = []\n    for i in nums:\n        if i not in table:\n            table[i] = 1\n        else:\n            table[i] += 1\n            if table[i] > max_count:\n                max_count = table[i]\n                table_ = [i]\n        table_ += table.pop(i)\n    return table_\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrence = 0\n    dict = defaultdict(int)\n    for item in nums:\n        if item in dict:\n            dict[item] += 1\n        else:\n            dict[item] = 1\n    for item in dict:\n        if dict[item] > max_occurrence:\n            max_occurrence = dict[item]\n            max_occurrence_item = item\n    return max_occurrence_item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_d = {}\n    for n in nums:\n        if n in freq_d:\n            freq_d[n] += 1\n        else:\n            freq_d[n] = 1\n    max_freq = max(freq_d.values())\n    max_n = max(freq_d.keys(), key=lambda k: freq_d[k])\n    return max_n, max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Your code here\n    max_freq = 0\n    max_occurrence = []\n    for num in nums:\n        if num == 0:\n            continue\n        if num == 1:\n            if len(max_occurrence) > 0:\n                max_freq = max_occurrence[0]\n            else:\n                max_freq = num\n        else:\n            if len(max_occurrence) == 0:\n                max_occurrence = [max_freq]\n            if max_freq > num:\n                max_occurrence.append(num)\n                max_freq = num\n    if len(max_occurrence) > 0:\n        max_freq = max_occurrence[0]\n    return max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # 1. sort the nums list\n    nums.sort()\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = dict()\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return max(freq.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occur = defaultdict(int)\n    for num in nums:\n        occur[num] += 1\n    for i in range(len(occur)):\n        occur[i] = occur[i] - 1\n    print(occur)\n    return max(occur, key=occur.get)\nprint(max_occurrences([1,2,2,1,1,2,3,3])"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dictionary = {}\n    for n in nums:\n        if n in dictionary:\n            dictionary[n] += 1\n        else:\n            dictionary[n] = 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Initialize an empty dictionary to store frequency of item in each list\n    frequency = defaultdict(list)\n    # Iterate over the list, storing each item in a list as key and frequency\n    # value as value\n    for n in nums:\n        frequency[n].append(n)\n    # Return the maximum number of occurrences\n    # in the given list\n    return max(frequency.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrence_list = {}\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # vowels = ['a','e','i','o','u']\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    str1 = str1.lower()\n    out = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            out += str1[i] +''\n        else:\n            out += str1[i].upper() +''\n    return out\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    rev = ''\n    for x in str1:\n        if x in \"aeiouAEIOU\":\n            rev += x\n        else:\n            rev += \" \"\n    return rev.strip()\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if str1 == '' or str1 =='':\n        return str1\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    return ''.join([str1[i] for i in range(len(str1)) if str1[i] not in vowels])\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if not str1:\n        return str1\n    str1 = list(str1)\n    vowels = 'aeiou'\n    if len(str1) == 1:\n        return ''.join([vowels[len(str1)-i] for i in range(len(str1))])\n    else:\n        return ''.join([vowels[len(str1)-i] for i in range(len(str1), 0, -1)])\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # note:\n    # you cannot pass an empty string as input - the function must return the reverse of a string\n    # but you can return the string back to you by calling the function multiple times\n    # with a different string\n    \n    return str1[::-1]\n    \n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1[::-1].replace('y','')\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    str1 = str1.lower()\n    list1 = []\n    list2 = []\n    list3 = []\n    list4 = []\n    list5 = []\n    \n    for i in str1:\n        if i in vowels:\n            list1.append(i)\n    for i in range(len(list1)):\n        if list1[i] in vowels:\n            list2.append(list1[i])\n    for i in range(len(list2)):\n        list3.append(list2[i])\n    for i in range(len(list3)):\n        list4.append(list3[i])\n    for i in range(len(list4)):\n        list5.append(list4[i])\n    list6 = []\n    for i in range(len(list5)):\n        if list5[i] not in list6:\n            list6.append(list5[i])\n    for i in range(len(list6)):\n        list5[i] = list6[i]\n    for i in range(len(list5)):\n        list6.remove(list5[i])\n    str2 = \"\"\n    for i in list6:\n        str2 += i\n    return str2\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char not in 'aeiouAEIOU':\n            str2 += char\n    return str2\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels_letters = 'aeiou'\n    list1 = list(str1)\n    result = \"\"\n    count = 0\n    for letter in list1:\n        if letter in vowels_letters:\n            count += 1\n    for i in range(0, count):\n        if (count == 1):\n            result += vowel_letters[0]\n            count += 1\n        elif(count == 2):\n            result += vowel_letters[1]\n            count += 1\n        elif(count == 3):\n            result += vowel_letters[2]\n            count += 1\n        elif(count == 4):\n            result += vowel_letters[3]\n            count += 1\n        elif(count == 5):\n            result += vowel_letters[4]\n            count += 1\n        elif(count == 6):\n            result += vowel_letters[5]\n            count += 1\n        elif(count == 7):\n            result += vowel_letters[6]\n            count += 1\n        elif(count == 8):\n            result += vowel_letters[7]\n            count += 1\n        elif(count == 9):\n            result += vowel_letters[8]\n            count += 1\n        elif(count == 10):\n            result += vowel_letters[9]\n            count += 1\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tuple(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1=''\n    for i in tup1:\n        str1=str1+str(i)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    a_tuple = \",\".join(str(e) for e in tup1)\n    return a_tuple\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"\"\n    for i in tup1:\n        s += str(i)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for value in tup1:\n        string += str(value)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup2 = tuple(tup1)\n    # print(tup1)\n    # print(tup2)\n    return ','.join([str(x) for x in tup2])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    # Start the string with spaces\n    string = \"\"\n    \n    # Loop through the list of tuples\n    for i in tup1:\n        \n        # Add each list element to the string\n        string += f\"{i[0]}\" + \" \"\n        \n    # Return the string\n    return strin"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    res = \"(\"\n    for i in tup1:\n        res = res + str(i) + \" \"\n    res = res[:-1] + \")\"\n    return res\n    \ndef tup_to_str(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    res = \"(\"\n    for i in tup1:\n        res = res + str(i) + \" \"\n    res = res[:-1] + \")\"\n    return res\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1=''\n    for i in range(len(tup1)):\n        if i%2==0:\n            str1=str1+str(tup1[i])\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '('+','.join([str(x) for x in tup1])+')'\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(nums) - sum(set(nums))\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    # convert the list to a series of numbers\n    neg_nums = []\n    for num in nums:\n        neg_nums.append(-num)\n    \n    # calculate the sum of the negative numbers\n    return sum(neg_nums"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # find all negative numbers\n    negative_list = [num for num in nums if num < 0]\n    return sum(negative_list)\n    # return sum(negative_list)\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += -num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += -num\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    n = len(nums)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return nums[0]\n    else:\n        return nums[n-1] + sum_negativenum(nums[0:n-1])\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # If there are no negative numbers in the list, return 0\n    if len(nums) == 0:\n        return 0\n    # Iterate through the list\n    negative_nums = []\n    for num in nums:\n        if num < 0:\n            negative_nums.append(num)\n    # Return the sum of the negative numbers\n    sum = 0\n    for num in negative_nums:\n        sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg = sum_neg + num\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for i in nums:\n        if i < 0:\n            total += abs(i)\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # YOUR CODE HERE\n    \n    # HINT: You'll need to make use of the fact that your solution\n    # is a list of numbers. The fact that a list of numbers\n    # (x, y, z) is a list of lists of numbers, each corresponding\n    # to a new hexagonal coordinate. You could consider that the\n    # fact that a list of numbers (x, y, z) is a list of lists\n    # (x, y, z) is a list of lists, each corresponding to a\n    # new hexagonal coordinate.\n    \n    # TO DO: Write a helper function that can print the nth\n    # hexagonal number in standard algebraic notation.\n    \n    # HINT: Remember that a list of numbers is ordered from\n    # top to bottom.\n    # HINT: Remember that you can't create a new list\n    # from a list using append().\n    \n    # HINT: You can't create a new list from a list using\n    # extend() or insert().\n    \n    # HINT: You can't use append() and insert() in a list of\n    # numbers.\n    \n    # HINT: You can't use any built-in list methods in a list.\n    \n    # HINT: You can't use the string \"n\" anywhere in a list.\n    \n    # HINT: You can't use \"string.index\" in a list.\n    \n    return n**2\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n == 0 or n == 1):\n        return n \n    else: \n        return hexagonal_num(n-1) + hexagonal_num(n-2) \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 4: \n        return n\n    else: \n        return n - 3 + (n - 2) * 3\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    s = 0\n    while n > 0:\n        n = n - 1\n        s = s + 2 * n + (2 * n + 1) \n    return s\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n > 8 : \n        return \n    else: \n        return (n+1) * 6 - (n+2) * 5 \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        print(\"Incorrect input. Try again.\")\n        exit()\n    elif n == 0:\n        print(\"The hexagonal number is\", n)\n    elif n == 1:\n        print(\"The hexagonal number is\", n + 0.5)\n    elif n > 1:\n        print(\"The hexagonal number is\", n + 0.25)\n    else:\n        print(\"Incorrect input. Try again.\")\n        exit()\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_num = []\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            hexagonal_num.append(i)\n        else:\n            hexagonal_num.append((i + 1) % n)\n    return hexagonal_num\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return int((n*(n+1))/2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n==1: return 1\n    if n==2: return 3\n    if n==3: return 5\n    return (3*(n-1))+(3*n)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        zero_count = 0\n        non_zero_count = 0\n        for i in range(len(nums)):\n            if nums[i] == 0:\n                zero_count += 1\n            else:\n                non_zero_count += 1\n        return zero_count/non_zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero = sum(nums)\n    nonzero = 0\n    \n    for num in nums:\n        nonzero += num\n        \n    return zero / nonzero\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = []\n    for x in nums:\n        if x == 0:\n            zero_count.append(1)\n        else:\n            zero_count.append(0)\n    return zero_count/len(nums)\n    # raise NotImplementedError\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for element in nums:\n        if element!= 0:\n            zero_count += 1\n    return zero_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    a = array('i',nums)\n    c = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            c = c + 1\n    return c/len(a)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n=0\n    for num in nums:\n        n+=num\n    return n/len(nums)\ndef average_list(nums):\n    '''\n    A function to calculate the average of a list of numbers.\n    '''\n    sum=0\n    n=len(nums)\n    for i in range(n):\n        sum+=nums[i]\n    return sum/n\ndef mean(nums):\n    '''\n    A function to calculate the mean of a list of numbers.\n    '''\n    n=len(nums)\n    sum=0\n    for i in range(n):\n        sum+=nums[i]\n    return sum/n\ndef mode(nums):\n    '''\n    A function to calculate the mode of a list of numbers.\n    '''\n    m=0\n    n=len(nums)\n    for i in range(n):\n        if nums[i]==m:\n            m=i\n    return m\ndef median(nums):\n    '''\n    A function to calculate the median of a list of numbers.\n    '''\n    if len(nums)%2==0:\n        mid=int(len(nums)/2)\n        nums1=nums[:mid]\n        nums2=nums[mid:]\n        return (average(nums1)+average(nums2))/2\n    else:\n        return nums[int(len(nums)/2)]\ndef first_two_digits(n):\n    '''\n    A function to get the first two digits of a number.\n    '''\n    return int(n[0:2])\ndef last_two_digits(n):\n    '''\n    A function to get the last two digits of a number.\n    '''\n    return int(n[-2:])\ndef is_odd(n):\n    '''\n    A function to determine if a number is odd or even.\n    '''\n    return n%2!=0\ndef is_prime(n):\n    '''\n    A function to determine if a number is prime or not.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef prime_numbers(n):\n    '''\n    A function to get all the prime numbers up to a given number.\n    '''\n    numbers=[]\n    for i in range(2,n):\n        if is_prime(i)==True:\n            numbers.append(i)\n    return numbers\ndef sum_of_primes(n):\n    '''\n    A function to get the sum of all primes below a number.\n    '''\n    sum=0\n    for i in range(2,n):\n        if is_prime(i)==True:\n            sum+=i\n    return sum\ndef count_primes(n):\n    '''\n    A function to count all the primes below a number.\n    '''\n    numbers=[]\n    for i in range(2,n):\n        if is_prime(i)==True:\n            numbers.append(i)\n    return len(numbers)\ndef sum_of_primes_recursive(n):\n    '''\n    A function to get the sum of all primes below a number recursively.\n    '''\n    if n==0 or n==1:\n        return n\n    else:\n        return n+sum_of_primes_recursive(n-1)\ndef count_primes_recursive(n):\n    '''\n    A function to count all the primes below a number recursively.\n    '''\n    if n==0 or n==1:\n        return n\n    else:\n        return n+count_primes_recursive(n-1)\ndef find_prime_factors(n):\n    '''\n    A function to find all the prime factors of a number.\n    '''\n    numbers=[]\n    for i in range(1,n):\n        if n%i==0:\n            numbers.append(i)\n    return numbers\ndef prime_factors_recursive(n):\n    '''\n    A recursive function to get the prime factors of a number.\n    '''\n    if n==1 or n==0:\n        return []\n    else:\n        return find_prime_factors(n)\ndef prime_factors_iterative(n):\n    '''\n    A function to get the prime factors of a number.\n    '''\n    factors=[]\n    i=1\n    while i<=n:\n        if n%i==0:\n            factors.append(i)\n            n=n//i\n        else:\n            i+=1\n    return factors\ndef is_leap(n):\n    '''\n    A function to determine if a number is a leap year or not.\n    '''\n    if n%4==0:\n        if n%100==0:\n            if n%400==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef days_in_month(n):\n    '''\n    A function to calculate the days in a given month.\n    '''\n    if n==1 or n==3 or n==5 or n==7 or n==8 or n==10 or n==12:\n        return 31\n    elif n==2:\n        return 29\n    elif n==4 or n==6 or n==9 or n==11:\n        return 30\n    else:\n        return 31\ndef days_in_month_recursive(n):\n    '''\n    A recursive function to calculate the days in a given month.\n    '''\n    if n==1 or n==3 or n==5 or n==7 or n==8 or n==10 or n==12:\n        return 31\n    elif n==2:\n        return 29\n    elif n==4 or n==6 or n==9 or n==11:\n        return 30\n    else:\n        return 31\ndef days_in_month_iterative(n):\n    '''\n    A function to calculate the days in a given month.\n    '''\n    if n==1 or n==3 or n==5 or n==7 or n==8 or n==10 or n==12:\n        return 31\n    elif n==2:\n        return 29\n    elif n==4 or n==6 or n==9 or n==11:\n        return 30\n    else:\n        return 31\ndef days_in_month_and_year(n):\n    '''\n    A function to calculate the days in a given month and year.\n    '''\n    if n==1 or n==3 or n==5 or n==7 or n==8 or n==10 or n==12:\n        return 31\n    elif n==2:\n        return 29\n    elif n==4 or n==6 or n==9 or n==11:\n        return 30\n    else:\n        return 31\ndef days_in_month_and_year_recursive(n):\n    '''\n    A recursive function to calculate the days in a given month and year.\n    '''\n    if n==1 or n==3 or n==5 or n==7 or n==8 or n==10 or n==12:\n        return 31\n    elif n==2:\n        return 29\n    elif n==4 or n==6 or n==9 or n==11:\n        return 30\n    else:\n        return 31\ndef days_in_month_and_year_iterative(n):\n    '''\n    A function to calculate the days in a given month and year.\n    '''\n    if n==1 or n==3 or n==5 or n==7 or n==8 or n==10 or n==12:\n        return 31\n    elif n==2:\n        return 29\n    elif n==4 or n==6 or n==9 or n==11:\n        return 30\n    else:\n        return 31\ndef days_in_month_and_year_and_count(n):\n    '''\n    A function to calculate the days in a given month and year and calculate the count of days.\n    '''\n    if n==1 or n==3 or n==5 or n==7 or n==8 or n==10 or n==12:\n        return 31\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = 0\n    for i in nums:\n        result += i\n    return result/float(len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = []\n    non_zeroes = []\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # define a function to return whether the given number can be represented as sum of powers of 2 or not.\n    # find a function to check whether the given number can be represented as sum of powers of two or not.\n    # determine the recursive function that will calculate the sum of powers of two.\n    # if the number can be represented as sum of powers of two, return true; otherwise return false.\n    # return the recursive function if the given number can be represented as sum of powers of two or not.\n    # return false if the given number can not be represented as sum of powers of two or not.\n    \n    def is_sum_of_powers_of_two(n): \n        # define a function to return whether the given number can be represented as sum of powers of two or not.\n        # find a function to calculate the sum of powers of two.\n        # if the given number can be represented as sum of powers of two, return true; otherwise return false.\n        # return the recursive function if the given number can be represented as sum of powers of two or not.\n        # return false if the given number can not be represented as sum of powers of two or not.\n        \n        if n < 2:\n            return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        if n%2==0:\n            return False\n        else:\n            for i in range(3,n,2):\n                if n%i==0:\n                    return False\n            return True\n        \n    \ndef is_Sum_Of_Powers_Of_Three(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 3 or not.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        if n%3==0:\n            return False\n        else:\n            for i in range(4,n,3):\n                if n%i==0:\n                    return False\n            return True\n        \n    \ndef is_Sum_Of_Powers_Of_Four(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 4 or not.\n    '''\n    if n<2:\n        return False\n    elif n==2:\n        return True\n    else:\n        if n%4==0:\n            return False\n        else:\n            for i in range(5,n,4):\n                if n%i==0:\n                    return False\n            return True\n    \ndef main():\n    print(is_Sum_Of_Powers_Of_Two(5))\n    print(is_Sum_Of_Powers_Of_Three(5))\n    print(is_Sum_Of_Powers_Of_Four(5))\n    \nmain("
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n==0):\n        return True\n    elif(n==1):\n        return False\n    else:\n        if(n%2!=0):\n            return False\n        else:\n            l=n//2\n            return is_Sum_Of_Powers_Of_Two(l) and is_Sum_Of_Powers_Of_Two(n-l)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    if n < 0:\n        return False\n    if n == 1:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return 0 \n    elif n % 2 == 0: \n        return is_Sum_Of_Powers_Of_Two(n // 2) \n    else: \n        return is_Sum_Of_Powers_Of_Two(n * 3) \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<0:\n        raise ValueError\n    else:\n        count = 0\n        for i in range(2, n+1):\n            if n%i == 0:\n                count+=1\n        if count>1:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    num = str(n)\n    if n == int(num):\n        return True\n    else:\n        return False\ndef solve():\n    '''\n    Write a Python program to determine the content of a given file.\n    '''\n    import os\n    filenames = os.listdir('.')\n    content = 0\n    if filenames == []:\n        print('No files')\n    else:\n        print('Content of all files:')\n        for filename in filenames:\n            with open(filename, 'r') as f:\n                for line in f.readlines():\n                    line = line.strip()\n                    if is_Sum_Of_Powers_Of_Two(int(line)) == True:\n                        print(line)\n                        content += 1\n        print('Content of', filenames[0], 'is:', content)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n    return True\n    "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=1:\n        return True\n    if n%2==0:\n        return False\n    return is_Sum_Of_Powers_Of_Two(n//2)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    assert n > 0, \"number of elements must be positive\"\n    \n    # Calculate value of a number, if its power is greater than 1 then recur with the same value, if not, recur for the next power\n    def is_sum_of_pow_of_two(n,p):\n        # if power is 1 then return True\n        if p == 1:\n            return True\n        \n        # if power is lesser than 1 then recur for that power, if not recur for the next power\n        return is_sum_of_pow_of_two(n, p - 1) or (n % p == 0)\n    \n    # if there are at least two numbers in the array, then return True\n    if is_sum_of_pow_of_two(n, 2):\n        return True\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # YOUR CODE HERE\n    return 2 * 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 3.14 * (2 * r) + 2 * 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    print(circumference)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    print(\"Calculating circumference of circle of radius %.2f.\" % r)\n    return 3.14159 * r * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n    \ndef circle_area(r):\n    '''\n    Write a function to compute the area of a circle.\n    '''\n    return (math.pi * r ** 2)\n    \ndef circle_circumference(r):\n    '''\n    Write a function to compute the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n    \nif __name__ == \"__main__\":\n    print(circle_circumference(3))\n    print(circle_circumference(5))\n    print(circle_area(6))\n    print(circle_area(10))\n    print(circle_circumference(5))"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        for i in range(len(sub_list)):\n            flattened_list.append(sub_list[i])\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten_list(test_list):\n        flatten_list = []\n        if test_list is None:\n            return []\n        for item in test_list:\n            if isinstance(item, list):\n                flatten_list.extend(flatten_list(item))\n            else:\n                flatten_list.append(item)\n        return flatten_list\n    flatten_list = flatten_list(test_list)\n    return flatten_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    nested_list = []\n    for x in test_list:\n        if type(x) is list:\n            nested_list.extend(x)\n        else:\n            nested_list.append(x)\n    return nested_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for list in test_list:\n        for item in list:\n            if type(item) is list:\n                flatten_list.append(item)\n            else:\n                flatten_list.append(item)\n    return flatten_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [(list(i)) for i in zip(*test_list)]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def recurse(n, l):\n        if len(l) == 0:\n            return 0\n        \n        if len(l) == 1:\n            return l[0] + recurse(n+1, l[0])\n        \n        return n+recurse(n+1, l[0])\n    \n    return recurse(0, test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for test in test_list:\n        for item in test:\n            flattened.append(item)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for test_set in test_list:\n        for item in test_set:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_of_nums = []\n    for x in test_list:\n        if type(x) == int:\n            list_of_nums.append(x)\n        elif type(x) == str:\n            list_of_nums.extend(x.split(','))\n        else:\n            list_of_nums.extend(x)\n    return list_of_nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums)<=1:\n        return nums\n    else:\n        largest_index = 0\n        for index in range(len(nums)):\n            if largest_index < index:\n                largest_index = index\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    pancake_h = [0] * n\n    for i in range(n):\n        pancake_h[i] = i\n    for i in range(n-1, 0, -1):\n        index = pancakes_heap[i]\n        pancake_h[i] = pancakes_heap[n - i - 1]\n        heapq.heapreplace(pancakes_heap, index)\n    i = 0\n    for i in range(n-1, -1, -1):\n        index = pancakes_heap[i]\n        pancakes_heap[i] = pancakes_heap[n-i-1]\n        heapq.heapreplace(pancakes_heap, index)\n        i += 1\n    return pancakes_heap\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def bubble_sort(nums):\n        '''\n        Return a sorted list of the elements in the list in descending order.\n        '''\n        count = len(nums)\n        for i in range(count - 1):\n            for j in range(count - i - 1):\n                if nums[j] > nums[j + 1]:\n                    nums[j], nums[j + 1] = nums[j + 1], nums[j]\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    \n    #sort elements\n    nums.sort()\n    #swap the first and last elements\n    for i in range(len(nums)-1):\n        nums[i+1], nums[i] = nums[i], nums[i+1]\n    #return list\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Permute the elements and swap them if they are in different order.\n    # e.g. [1,2,3,4,5] --> [4,5,1,2,3]\n    if nums == []:\n        return []\n    p = len(nums)\n    for i in range(p):\n        for j in range(p-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    print(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    from heapq import *\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        if i!= 0 and nums[i] < nums[i-1]:\n            nums[i-1], nums[i] = nums[i], nums[i-1]\n        else:\n            pass\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    n = len(nums)\n    step = 1\n    for i in range(n-2, -1, -1):\n        if step % 2 == 0:\n            cur = nums[i]\n            position = i\n            while nums[position] > cur:\n                nums[position] = nums[position + 1]\n                position = position + 1\n        else:\n            cur = nums[i]\n            position = i + 1\n            while nums[position] > cur:\n                nums[position] = nums[position - 1]\n                position = position - 1\n        \n        step += 1\n        nums[position] = cur\n    \n    return nums\n    \nnums = [4,1,5,2,6,3,7,8,9,0]\nprint(pancake_sort(nums))"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_helper(nums):\n        if len(nums)<=1:\n            return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # Set all values to the\n        #  middle of the array\n        if i!= 0 and nums[i] > nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n        # In this case, we're done\n        #  swapping\n        if i == 0 or nums[i] < nums[i-1]:\n            # Swap the last element\n            # with the first one\n            nums[i], nums[0] = nums[0], nums[i]\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pos=0\n    if (list1[0]==list2[0]):\n        same_pos=same_pos+1\n    if (list1[2]==list2[2]):\n        same_pos=same_pos+1\n    if (list1[0]==list3[2]):\n        same_pos=same_pos+1\n    if (list1[0]==list3[1]):\n        same_pos=same_pos+1\n    if (list1[2]==list3[2]):\n        same_pos=same_pos+1\n    return same_pos\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(list1 == list2) + sum(list1 == list3) + sum(list2 == list3)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #get length of lists\n    n1 = len(list1)\n    n2 = len(list2)\n    n3 = len(list3)\n    #initialize counter\n    same_pair = 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    # create empty set\n    same_list = set()\n    \n    # iterate through three lists\n    for i in range(3):\n        for j in range(3):\n            # check if item is same\n            if list1[i] == list2[j]:\n                # if same, add to set\n                if list1[i] not in same_list:\n                    same_list.add(list1[i])\n            # if not same, break\n            if list1[i]!= list2[j]:\n                break\n    \n    # return sum of items that are identical\n    return len(same_list)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if(list1[i] == list2[j]):\n                if(i==j):\n                    count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_pair_count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            same_pair_count += 1\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            same_pair_count += 1\n    \n    for i in range(len(list1)):\n        if list1[i] == list3[i]:\n            same_pair_count += 1\n            \n    return same_pair_count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # 1. creating a loop for all three lists to store the count of elements\n    for i in range(0,3):\n        list_i = list1[i]\n        count_i = 0\n        for j in range(0,3):\n            list_j = list2[j]\n            if list_i == list_j:\n                count_i += 1\n        if count_i == 1:\n            return True\n        else:\n            return False\n    # 2. creating a loop for all three lists to store the count of elements\n    for i in range(0,3):\n        list_i = list1[i]\n        count_i = 0\n        for j in range(0,3):\n            list_j = list2[j]\n            if list_i == list_j:\n                count_i += 1\n        if count_i == 1:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2:\n            count += 1\n    for i in list1:\n        if i not in list2:\n            count -= 1\n    for i in list3:\n        if i not in list2:\n            count -= 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1)==len(list2) and len(list1)==len(list3):\n        for i in range(0,len(list1)):\n            if list1[i]==list2[i] and list1[i]==list3[i]:\n                count+=1\n        return count\n    else:\n        print(\"enter valid arguments\")\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #code here\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and i!= j:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n=0\n    for i in range(len(Input)):\n        if len(Input[i])==2:\n            n=n+1\n    return n\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    i = 0\n    while i < len(Input):\n        for j in range(len(Input)):\n            if Input[i] == j:\n                i += 1\n                break\n        else:\n            i += 1\n            break\n    return len(Input) - i\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Counter = 0\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i] == Input[j]:\n                Counter += 1\n    return Counter\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = len(Input)\n    for i in range(L):\n        if type(Input[i]) is tuple:\n            if type(Input[i][0]) is int:\n                pass\n            else:\n                return 1\n    return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print(\"Tuple: \",Input)\n    print(\"Number of lists: \",get_num_of_lists(Input))\n    return get_num_of_lists(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    for i in range(0, len(Input)):\n        for j in range(0, len(Input[i])):\n            if Input[i][j] == '[' or Input[i][j] == '{':\n                lst.append(i)\n    return len(lst)"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code goes here\n    tuple_to_find = (Input[0], Input[1], Input[2])\n    if tuple_to_find not in lists_tuple:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = []\n    for i in range(len(Input)):\n        l.append(len(Input[i]))\n    return l\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    from collections import Counter\n    dict = {}\n    for i in Input:\n        for j in range(i):\n            dict[j] = 0\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            dict[i] += dict[j]\n    return dict.values()\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    for i in Input:\n        if type(i)!= tuple:\n            return \"Error\"\n        else:\n            lst.append(len(i))\n    return lst"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    max_abs = arr[0] - arr[i]\n    \n    while (i < j):\n        temp = arr[i] - arr[j]\n        if (temp > max_abs):\n            max_abs = temp\n        if (temp < 0):\n            i = i + 1\n        else:\n            j = j - 1\n            \n    return max_abs\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 'Array must have at least 2 elements'\n    max_min = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        max_min = max(max_min, arr[i] - arr[i - 1])\n    return max_min\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            max_diff = max(arr[i] - arr[j], max_diff)\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            i += 1\n        elif arr[i] < arr[j]:\n            j -= 1\n        else:\n            return arr[i] - arr[j]\n    return None\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    l = len(arr)\n    max_diff = 0\n    for i in range(l-1): \n        for j in range(i+1,l): \n            diff = arr[j] - arr[i]\n            if(diff>max_diff): \n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -1\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            max_diff = max(arr[i], arr[j], max_diff)\n    return max_diff\n    \ndef min_Abs_Diff(arr): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    min_diff =  1\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            min_diff = min(min_diff, arr[i] - arr[j])\n    return min_diff\n    \ndef sub_arr_Sum(arr):\n    '''\n    Write a python function to find the sum of sub array.\n    '''\n    sum = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            sum += arr[i]\n    return sum\n    \ndef average(arr): \n    '''\n    Write a python function to find the average of given array.\n    '''\n    count = 0\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n        count += 1\n    return sum/count\n    \ndef mode(arr): \n    '''\n    Write a python function to find the mode of given array.\n    '''\n    count = 0\n    mode = -1\n    mode_count = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            count += 1\n        else:\n            if(count > mode_count):\n                mode_count = count\n                mode = arr[i]\n    return mode, mode_count\n    \ndef sort_arr(arr):\n    '''\n    Write a python function to sort the given array.\n    '''\n    temp = []\n    while(len(arr)>0):\n        if(len(arr)>1):\n            if(arr[0] >= arr[1]):\n                arr[0], arr[1] = arr[1], arr[0]\n            else:\n                arr[0], arr[1] = arr[1], arr[0]\n                \n        if(arr[0] == arr[1]):\n            temp.append(arr.pop(0))\n        else:\n            if(arr[0] < arr[1]):\n                temp.append(arr.pop(0))\n                temp.append(arr.pop(0))\n            else:\n                temp.append(arr.pop(0))\n                temp.append(arr.pop(0))\n                temp.append(arr.pop(0))\n    return temp\n        \ndef main(): \n    '''\n    To test the above function, write this:\n    >>> import unittest\n    >>> import my_func\n    >>> unittest.TestCase.assertEqual(my_func.my_func([1, 2, 3, 4, 5, 6]), 9)\n    >>> unittest.TestCase.assertEqual(my_func.my_func([1, 2, 3, 4, 5, 6]), 3)\n    '''\n    print(\"--------test case 1--------\")\n    arr1 = [1, 2, 3, 4, 5, 6]\n    print(f\"{arr1}\")\n    assert (max_Abs_Diff(arr1) == 5), \"max_abs_diff is incorrect\"\n    assert (min_Abs_Diff(arr1) == 2), \"min_abs_diff is incorrect\"\n    assert (sub_arr_Sum(arr1) == 30), \"sub_arr_sum is incorrect\"\n    print(\"----------test case 2-------\")\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(f\"{arr2}\")\n    assert (max_Abs_Diff(arr2) == 4), \"max_abs_diff is incorrect\"\n    assert (min_Abs_Diff(arr2) == 1), \"min_abs_diff is incorrect\"\n    assert (sub_arr_Sum(arr2) == 12), \"sub_arr_sum is incorrect\"\n    print(\"----------test case 3-------\")\n    arr3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(f\"{arr3}\")\n    assert (max_Abs_Diff(arr3) == 3), \"max_abs_diff is incorrect\"\n    assert (min_Abs_Diff(arr3) == 2), \"min_abs_diff is incorrect\"\n    assert (sub_arr_Sum(arr3) == 6), \"sub_arr_sum is incorrect\"\n    print(\"----------test case 4-------\")\n    arr4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(f\"{arr4}\")\n    assert (max_Abs_Diff(arr4) == 5), \"max_abs_diff is incorrect\"\n    assert (min_Abs_Diff(arr4) == 4), \"min_abs_diff is incorrect\"\n    assert (sub_arr_Sum(arr4) == 16), \"sub_arr_sum is incorrect\"\n    print(\"----------test case 5-------\")\n    arr5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    print(f\"{arr5}\")\n    assert (max_Abs_Diff(arr5) == 5), \"max_abs_diff is incorrect\"\n    assert (min_Abs_Diff(arr5) == 4), \"min_abs_diff is incorrect\"\n    assert (sub_arr_Sum(arr5) == 30), \"sub_arr_sum is incorrect\"\n    print(\"----------test case 6-------\")\n    arr6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(f\"{arr6}\")\n    assert (max_Abs_Diff(arr6) == 5), \"max_abs_diff is incorrect\"\n    assert (min_Abs_Diff(arr6) == 2), \"min_abs_diff is incorrect\"\n    assert (sub_arr_Sum(arr6) == 30), \"sub_arr_sum is incorrect\"\n    print(\"----------test case 7-------\")\n    arr7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(f\"{arr7}\")\n    assert (max_Abs_Diff(arr7) == 4), \"max_abs_diff is incorrect\"\n    assert (min_Abs_Diff(arr7) == 3), \"min_abs_diff is incorrect\"\n    assert (sub_arr_Sum(arr7) == 12), \"sub_arr_sum is incorrect\"\n    print(\"----------test case 8-------\")\n    arr8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(f\"{arr8}\")\n    assert (max_Abs_Diff(arr8) == 5), \"max_abs_diff is incorrect\"\n    assert (min_Abs_Diff(arr8) == 2), \"min_abs_diff is incorrect\"\n    assert (sub_arr_Sum(arr8) == 30), \"sub_arr_sum is incorrect\"\n    print(\"----------test case 9-------\")\n    arr9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(f\"{arr9}\")\n    assert (max_Abs_Diff(arr9) == 5), \"max_abs_diff is incorrect\"\n    assert (min_Abs_Diff(arr9) == 4), \"min_abs_diff is incorrect\"\n    assert (sub_arr_Sum(arr9) == 30), \"sub_arr_sum is incorrect\"\n    print(\"----------test case 10-------\")\n    arr10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(f\""
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        temp_arr = [x for x in arr]\n        max_val = temp_arr[0]\n        for i in range(1, len(temp_arr)):\n            if temp_arr[i] - max_val > 0:\n                max_val = temp_arr[i] - max_val\n        return max_val\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs = 0\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if max_abs < abs(arr[i] - max_val):\n            max_val = arr[i]\n        else:\n            max_abs = abs(arr[i] - max_val)\n    return max_abs\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i > j and arr[i] > arr[j]:\n                res = arr[j] - arr[i]\n    return res\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if arr == None:\n        return -1\n    else:\n        temp = arr[0]\n        count = 1\n        for i in range(1, len(arr)):\n            if arr[i] > temp:\n                temp = arr[i]\n            else:\n                count += 1\n            if temp!= arr[i]:\n                temp = arr[i]\n                count += 1\n        return count\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return (a, n)\n    else:\n        for i in range(2, n):\n            if a * i >= n:\n                return None\n            if b * i == n:\n                return (a * i, n)\n            x = find_solution(a * i, b * i, n)\n            y = find_solution(a, b * i, n)\n            if x!= None:\n                if x[0] < x[1]:\n                    a, b = b, a\n                    x, y = x[1], y[1]\n                elif x[0] > x[1]:\n                    a, b = a, b\n                    x, y = x[0], y[0]\n            if y!= None:\n                if y[0] < y[1]:\n                    a, b = b, a\n                    x, y = x, y[0]\n                elif y[0] > y[1]:\n                    a, b = a, b\n                    x, y = x, y[1]\n            if x == None or y == None:\n                return None\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b == n == 0:\n        return None\n    if b == 0:\n        return (a, b)\n    if a == 0:\n        return b\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # write your code here\n    if n == 1:\n        return (a,b)\n    if n < 1:\n        return None\n    if b%n!= 0:\n        return None\n    if a == b:\n        return (a,b)\n    if n % 2 == 0:\n        return None\n    else:\n        x = n//2\n        y = n//2\n        return find_solution(a, b, x) + find_solution(a, b, y)\n    \nif __name__ == '__main__':\n    print('Example 1:')\n    print('Input : ')\n    print('n = 2')\n    print('Exception :')\n    print(('1', '2'))\n    print('Output :')\n    print(find_solution(2, 2, 2))\n    \n    print('Example 2:')\n    print('Input : ')\n    print('n = 12')\n    print('Exception :')\n    print(('7', '8'))\n    print('Output :')\n    print(find_solution(12, 12, 12))\n    \n    print('Example 3:')\n    print('Input : ')\n    print('n = 17')\n    print('Exception :')\n    print(('13', '14'))\n    print('Output :')\n    print(find_solution(17, 17, 17))\n    \n    print('Example 4:')\n    print('Input : ')\n    print('n = 100')\n    print('Exception :')\n    print(('10', '11'))\n    print('Output :')\n    print(find_solution(100, 100, 100))"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    if a == 0:\n        return b\n    elif a == 1:\n        return n\n    elif a == 2:\n        return a, n\n    elif b == 0:\n        return a\n    elif b == 1:\n        return n\n    elif b == 2:\n        return b, n\n    elif n == 0:\n        return a\n    elif n == 1:\n        return b\n    elif n == 2:\n        return n, a, b\n    else:\n        x, y = find_solution(a//2, b//2, n//2)\n        if x == 0:\n            x, y = find_solution(a//2, b//2, n//2)\n        if y == 0:\n            x, y = find_solution(a//2, b//2, n//2)\n        return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if(n==0):\n        return\n    if(n<=a or n>=b):\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, n):\n        for j in range(0, n):\n            if (a[i] + b[j] == n):\n                return i, j\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = -1\n    y = -1\n    # loop through the solutions\n    for x in range(n):\n        for y in range(n):\n            # if there is a solution\n            if a[x] == b[y] and x!= y:\n                return x, y\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in range(0, len(list1)):\n        if list1[i] not in list2:\n            result.append(list1[i])\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # your code here\n    i=0\n    while i<len(list2):\n        j=0\n        while j<len(list1):\n            if list1[j]==list2[i]:\n                list1.pop(j)\n                i=i+1\n                j=j-1\n            j=j+1\n        i=i+1\n    return list1\n    \n    # your code here\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1.count(list2) > 1:\n        return print('Cannot remove more than once')\n    else:\n        # iterate through list1\n        for i in range(len(list1)):\n            list1.remove(list2)\n            # iterate through list2\n            for j in range(len(list2)):\n                list2.remove(list1[i])\n            print(list1)\n            print(list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1 == [] or list2 == []:\n        return\n    elif list1 == []:\n        return list2\n    elif list2 == []:\n        return list1\n    else:\n        if list1[0] in list2:\n            list1.remove(list1[0])\n            return remove_elements(list1, list2)\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(i)\n        else:\n            result.append(\"not present\")\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list_1 = list(list1)\n    list_2 = list(list2)\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list_1):\n        if list_1[i] in list_2:\n            list_2.remove(list_1[i])\n        else:\n            i = i + 1\n    while j < len(list_2):\n        if list_2[j] in list_1:\n            list_1.remove(list_2[j])\n        else:\n            j = j + 1\n    while k < len(list_1):\n        list_1.remove(list_1[k])\n        k = k + 1\n    return list_1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    print(\"List 1: {}\".format(list1))\n    print(\"List 2: {}\".format(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #empty_list = []\n    for i in list1:\n        for j in list2:\n            if(i == j):\n                #empty_list.append(i)\n                #list2.remove(i)\n                list1.remove(i)\n                #print(\"i is : \", i, \", \", list2, \", \", list1)\n                break\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    output_list = []\n    \n    for each in list1:\n        if each not in list2:\n            output_list.append(each)\n        \n    return output_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    n = int(n)\n    if n < 2:\n        return 0\n    else:\n        for i in range(0, n, 2):\n            total = total + i\n        return total + n + (n-2)\nprint(sum_series(2))\nprint(sum_series(3))\nprint(sum_series(4))\nprint(sum_series(5)"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum = sum + i\n        i = i + 2\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # n is the input number\n    # x is the x-th index\n    # i is the index\n    # sum is the sum\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n=int(n)\n    x=n\n    s=0\n    while x>0:\n        s+=x%10\n        x//=10\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([i for i in range(n, 0, -1)])\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n*(n+1)//2"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # start = 0\n    # end = n // 2 + 1\n    # while start < end:\n    #     sum = (end - start) * (n - start - 2*start)\n    #     end = end - 1\n    #     start = start + 2\n    # return sum\n    start = 0\n    end = n // 2 + 1\n    while start < end:\n        sum = (end - start) * (n - start - 2*start)\n        start = start + 2\n        end = end - 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if (n < 2):\n        return n\n    else:\n        return (sum_series(n - 2) + sum_series(n - 4))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(1, n//2 + 1):\n        sum = sum + n - 2*i\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #initiate the variables\n    area = 0\n    \n    #calculate the area of the regular polygon\n    for i in range(0, len(s)):\n        area += (l * s[i])\n    \n    #return the area of the regular polygon\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(s):\n        area += (tan(i/float(l))) * l**2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(len(s) - 2):\n        area += (l[i + 1] * (2 * s[i] + l[i + 2] - 2 * s[i + 1] + l[i + 2]))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # your code goes here\n    if l == 0:\n        return 0\n    elif l < 0:\n        return 0\n    else:\n        sides = len(s)\n        return sides * (s[0] * (l ** 2)) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    for i in range(s):\n        a += (i + 1) * l\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for n in range(len(s)):\n        area += tan(n/len(s)) * l\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area_polygon = l * (s / 2)\n    return area_polygon\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    h = 1.0/3.0\n    area = 0.0\n    for i in range(3):\n        area += h*s[i]\n    area += h*(l[0]+l[1])\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n)+1)): \n        if n % i == 0:\n            return False\n        if n % (i * i) == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    j = 1\n    k = 1\n    sum = 0\n    sum1 = 0\n    while(j <= n): \n        if(j % i == 0): \n            sum1 = sum1 + j \n            j = j + 1 \n        else: \n            i = i + 1\n        k = k + 1\n    if(sum1 == n): \n        return \"Yes\" \n    else: \n        return \"No\" \n    \n    \ndef isprime(n): \n    '''\n    Write a function to check if a number is a prime number or not.\n    '''\n    for i in range(2, math.floor(math.sqrt(n)) + 1): \n        if(n % i == 0): \n            return False \n    return True \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n % 2 == 0:\n        return True\n    else:\n        d = math.sqrt(n)\n        if n == d:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    # Define the next_divisor function\n    def next_divisor(divisor):\n        '''\n        Return the next divisor that divides n.\n        '''\n        if divisor % 2 == 0: \n            return divisor \n        else: \n            return divisor + 1\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum=n\n    for i in range(1,n+1):\n        sum=sum//i\n    return sum==n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0:\n        return True\n    elif n%2==0:\n        return div_sum(n//2)\n    elif n%2!=0:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_sum = []\n    for x in range(1, n):\n        if n % x == 0:\n            divisors_sum.append(x)\n    return divisors_sum\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    assert n > 0, \"integer must be positive\"\n    a = n\n    b = 0\n    while a:\n        b, a = a, a % 10\n    return b == 0\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1,n+1):\n        if n%i==0:\n            divs.append(i)\n    return divs==[1]*n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) == 2:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if str1==str1:\n        return str1.count('a')+str1.count('b')+str1.count('c')+str1.count('d')\n    else:\n        return len(str1)-str1.count('a')-str1.count('b')-str1.count('c')-str1.count('d')\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_char = 0\n    \n    for x in range(len(str1)):\n        for y in range(len(str1)):\n            if str1[x] == str1[y]:\n                count_char += 1\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = {}\n    for letter in str1:\n        if letter in counter.keys():\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_pos = []\n    for i in str1:\n        if i.isalpha():\n            char_pos.append(str1.index(i.lower()))\n        else:\n            pass\n    print(char_pos)\n    char_pos.sort()\n    print(char_pos)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # TODO: write your code here\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in str1.lower():\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #Remove leading and trailing whitespace\n    str1 = str1.strip()\n    #Remove any punctuation marks\n    str1 = str1.replace(\" \", \"\")\n    #Split the string into a list\n    str1 = str1.split()\n    #Create a new list to count the number of characters in each string\n    counts = []\n    for word in str1:\n        counts.append(len(word))\n    #Return the number of occurrences\n    return counts\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    positions = []\n    characters = []\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            positions.append(i)\n        elif str1[i].islower():\n            characters.append(i)\n    if len(positions)!= 0:\n        return len(positions)\n    else:\n        return len(characters)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_chars = 0\n    for i in range(len(str1)): \n        if str1[i] in alphabet: \n            count_chars = count_chars + 1\n    return count_chars\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    def count_char_position(str1):\n        '''\n        Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n        '''\n        \n        count = 0\n        for i in str1:\n            if i.isalpha():\n                count += 1\n        return count\n    \n    return count_char_position(str1.lower())\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in A:\n        for j in A:\n            if i!=j:\n                if i&j==0:\n                    count=count+1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # count pairs of numbers xor to an even number\n    count = 0\n    for x in A:\n        if x&1 == 0:\n            count += 1\n    # count pairs of numbers that are even\n    for x in A:\n        if x%2 == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in A:\n        for j in A:\n            if i == j or i ^ j:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)-1):\n        if A[i] & A[i+1] == 0:\n            even_count += 1\n    return even_count\n        \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # You'll need to return the number of pairs.\n    # The pairs returned should be sorted in order of their xor.\n    # For example, if A = [1, 2, 3, 5, 8, 9, 11, 15], then the pairs returned are [3, 6],\n    # [3, 9], [6, 11], [9, 15].\n    #\n    # In this case, the pairs returned should be the same as the pairs in the original list.\n    #\n    # Return 0 if the list is empty.\n    #\n    # EXAMPLE\n    # Input:\n    # A = [1, 2, 3, 5, 8, 9, 11, 15]\n    # Output:\n    # 3\n    #\n    # Explanation:\n    # The pairs [3, 6] and [3, 9] are counted as pairs.\n    #\n    # Note: You can return any pair.\n    #\n    #\n    # Constraints:\n    #\n    #\n    # 1 <= A.length <= 1000\n    # 0 <= A[i] < A.length\n    # All the integers in A are unique.\n    #\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    A_even = []\n    \n    for num in A:\n        if num%2 == 0:\n            A_even.append(num)\n    \n    if len(A_even) == 0:\n        return 0\n    \n    return len(A_even)\n        \nprint(find_even_pair([1,2,3,4,5,6,7,8,9,10])"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count=0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]==0:\n                even_count+=1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in A:\n        if i%2==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 0:\n        return 0\n    else:\n        return len(set(A))\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    c=0\n    for i in range(2,n):\n        c+=1\n        if n%2==0:\n            c=0\n            break\n        else:\n            c=1\n    return c\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    assert n >= 0, \"number of bits must be positive\"\n    \n    max_power = n\n    while (n % 2 == 0):\n        n = n//2\n        max_power = max_power if max_power >= n else n\n    return max_power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n%2 == 0:\n        n //= 2\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Take the input as a parameter.\n    n = int(n)\n    # Declare a new variable.\n    power = 0\n    # Check if n is an odd number.\n    if n%2!= 0:\n        return -1\n    # Find the largest power of 2.\n    while n!= 1:\n        power = power + 1\n        n = n//2\n    # Return the largest power of 2 found.\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 0\n    while n >= power_of_2:\n        power_of_2 += 1\n    return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return next_power_of_2(n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n == 1): \n        return 2\n    while (n > 0): \n        if (n % 2 == 0): \n            return n \n        else: \n            n = n / 2\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    output = n\n    while output > 1:\n        if output % 2 == 0:\n            output = output / 2\n        else:\n            output = 3 * output + 1\n    return output\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return next_power_of_2(3*n+1)\n    return next_power_of_2(3*n+2)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return sum([1 for i in range(len(a)) if a[i] == x])\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in a:\n        if i==x:\n            c+=1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    import math\n    \n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n        \n        \n        \ndef median(a):\n    '''\n    Write a function to compute the median of a list of numbers.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) % 2 == 0:\n        return (a[int(len(a)/2)-1] + a[int(len(a)/2)])/2\n    else:\n        return a[int(len(a)/2)]\n        \n        \ndef mean(a):\n    '''\n    Write a function to compute the mean of a list of numbers.\n    '''\n    if len(a) == 0:\n        return 0\n    return sum(a)/len(a)\n    \n        \ndef mode(a):\n    '''\n    Write a function to compute the mode of a list of numbers.\n    '''\n    if len(a) == 0:\n        return 0\n    return a[0]\n    \n    \ndef variance(a):\n    '''\n    Write a function to compute the variance of a list of numbers.\n    '''\n    n = len(a)\n    mean = mean(a)\n    dev = 0\n    for i in a:\n        dev += (i-mean)**2\n    dev = dev/n\n    return dev\n    \n    \ndef standardDeviation(a):\n    '''\n    Write a function to compute the standard deviation of a list of numbers.\n    '''\n    n = len(a)\n    mean = mean(a)\n    dev = variance(a)\n    std = dev/n\n    return std\n    \n    \ndef correlation(a,b):\n    '''\n    Write a function to compute the correlation coefficient (r) between a and b.\n    '''\n    cor = 0\n    n = len(a)\n    for i in range(n):\n        cor += (a[i]-mean(a)) * (b[i]-mean(b))\n    if (cor == 0):\n        return 0\n    return cor/n\n    \n    \ndef standardError(a):\n    '''\n    Write a function to compute the standard error of a list of numbers.\n    '''\n    dev = variance(a)\n    dev = standardDeviation(a)\n    dev = math.sqrt(dev)\n    return dev\n    \n    \ndef zScore(a):\n    '''\n    Write a function to compute the z-score of a list of numbers.\n    '''\n    dev = standardDeviation(a)\n    z = (a - mean(a))/dev\n    return z\n    \n    \ndef zScoreContinuous(a):\n    '''\n    Write a function to compute the z-score of a list of numbers.\n    '''\n    dev = standardDeviation(a)\n    z = (a-mean(a))/dev\n    return z\n    \n    \ndef pearsonCorrelation(a,b):\n    '''\n    Write a function to compute the Pearson Correlation Coefficient (r) between a and b.\n    '''\n    corr = 0\n    n = len(a)\n    for i in range(n):\n        corr += (a[i]-b[i])\n    if (corr == 0):\n        return 0\n    return corr/n\n    \n    \ndef pearsonError(a,b):\n    '''\n    Write a function to compute the Pearson Correlation Coefficient (r) between a and b.\n    '''\n    dev = standardDeviation(a)\n    dev = standardDeviation(b)\n    dev = math.sqrt(dev)\n    corr = pearsonCorrelation(a,b)\n    corr = math.sqrt(corr)\n    return dev/corr\n    \n    \ndef kendallCorrelation(a,b):\n    '''\n    Write a function to compute the Kendall Correlation Coefficient (r) between a and b.\n    '''\n    corr = 0\n    n = len(a)\n    for i in range(n):\n        corr += (a[i]-b[i])\n    if (corr == 0):\n        return 0\n    return corr/n\n    \n    \ndef kendallError(a,b):\n    '''\n    Write a function to compute the Kendall Correlation Coefficient (r) between a and b.\n    '''\n    dev = standardDeviation(a)\n    dev = standardDeviation(b)\n    dev = math.sqrt(dev)\n    corr = kendallCorrelation(a,b)\n    corr = math.sqrt(corr)\n    return dev/corr\n    \n    \ndef correlationGeo(a,b):\n    '''\n    Write a function to compute the geometric mean of a list of numbers.\n    '''\n    p = 0\n    n = len(a)\n    for i in range(n):\n        p += (a[i]-mean(a))*(b[i]-mean(b))\n    if (p == 0):\n        return 0\n    return p/n\n    \n    \ndef zScoreGeo(a):\n    '''\n    Write a function to compute the geometric mean of a list of numbers.\n    '''\n    z = 0\n    n = len(a)\n    for i in range(n):\n        z += (a[i]-mean(a))*(a[i]-mean(a))\n    if (z == 0):\n        return 0\n    return z/n\n    \n    \ndef getMeanAndStdDev(a,b):\n    '''\n    Write a function to get the mean and standard deviation of a list of numbers.\n    '''\n    m = mean(a)\n    s = standardDeviation(a)\n    m = mean(b)\n    s = standardDeviation(b)\n    return m,s\n    \n    \ndef zScoreContribution(a,b):\n    '''\n    Write a function to get the z-score contribution of a list of numbers.\n    '''\n    z = 0\n    n = len(a)\n    for i in range(n):\n        z += (a[i]-mean(a))*(b[i]-mean(b))\n    if (z == 0):\n        return 0\n    return z/n\n    \n    \ndef meanContribution(a,b):\n    '''\n    Write a function to get the mean contribution of a list of numbers.\n    '''\n    m = mean(a)\n    c = 0\n    n = len(a)\n    for i in range(n):\n        c += (a[i]-m) * (b[i]-m)\n    if (c == 0):\n        return 0\n    return c/n\n    \n    \ndef standardContribution(a,b):\n    '''\n    Write a function to get the standard contribution of a list of numbers.\n    '''\n    s = standardDeviation(a)\n    c = 0\n    n = len(a)\n    for i in range(n):\n        c += (a[i]-mean(a)) * (b[i]-mean(b))\n    if (c == 0):\n        return 0\n    return c/n\n    \n    \ndef standardErrorContribution(a,b):\n    '''\n    Write a function to get the standard error contribution of a list of numbers.\n    '''\n    dev = standardDeviation(a)\n    c = 0\n    n = len(a)\n    for i in range(n):\n        c += (a[i]-mean(a))*(b[i]-mean(b))\n    if (c == 0):\n        return 0\n    return dev/n\n    \n    \ndef correlationGeoContribution(a,b):\n    '''\n    Write a function to get the geometric mean of a list of numbers.\n    '''\n    p = 0\n    n = len(a)\n    for i in range(n):\n        p += (a[i]-mean(a))*(b[i]-mean(b))\n    if (p == 0):\n        return 0\n    return p/n\n    \n    \ndef correlation(a,b):\n    '''\n    Write a function to get the correlation coefficient (r) between a and b.\n    '''\n    corr = 0\n    n = len(a)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in x:\n        if a == num:\n            count += 1\n    return count\ndef graph(d,x):\n    '''\n    Write a function to generate a graph based on a dictionary.\n    '''\n    x = list(x.values())\n    for num in x:\n        d[num].append(x.index(num))\n    for x in d:\n        print(f'{x} - ', end = '')\n        for i in range(len(d[x])):\n            if d[x][i] == i:\n                print(f'{d[x][i]} ', end = '')\n        print('')\ndef main():\n    a = {}\n    x = []\n    for i in range(1,6):\n        d = {}\n        n = str(i)\n        print('*' * 15)\n        print(n, '-', n, '|', end = '')\n        print('*' * 15)\n        while True:\n            print('\\n')\n            print('Enter the name of an item to add or remove from the list: ')\n            print('*' * 15)\n            x = input()\n            if x == '':\n                print('Please input something.')\n                continue\n            if x in a:\n                print('Please input another name.')\n                continue\n            else:\n                if x not in a:\n                    d[x] = []\n                    a[x] = []\n                    print('You have entered: ', x)\n                    break\n            print('Please input another name.')\n        for i in range(len(d[x])):\n            if d[x][i] not in a[x]:\n                d[x][i] = 0\n                print('Added item: ', d[x][i])\n        print('*' * 15)\n        print('=' * 15)\n        print('Enter the name of an item to remove: ')\n        print('*' * 15)\n        print('Enter the number of occurrences of that item: ')\n        print('*' * 15)\n        print('=' * 15)\n        while True:\n            y = input()\n            if y == '':\n                print('Please input something.')\n                continue\n            if y in d:\n                print('Please input another name.')\n                continue\n            else:\n                if y not in a:\n                    print('Not in the list.')\n                    continue\n                else:\n                    print('Removing item: ', y)\n                    d[x].remove(int(y))\n                    print(d[x])\n                    print('*' * 15)\n                    break\n    print(d)\n    print(a)\n    print(graph(a,x))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    l = 0\n    c = 1\n    for i in range(len(a)):\n        if a[i] == x:\n            l += 1\n        c += 1\n    return c\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    dic = {} \n    for i in a:\n        if i in dic: \n            dic[i] += 1\n        else: \n            dic[i] = 1 \n    return dic\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    from collections import Counter\n    count=Counter(a)\n    #print(count)\n    return count[x]\na=[1,2,2,4,3,3,1,6,7,8,6,5,4,2]\nx=3"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):                                                                                                                                                                                                        \n        sum = sum + list1[i]\n    return sum\n    "
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0                                                                                                                                                                                        \n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m > len(list1) - 1 or n < 0 or n > len(list1) - 1:\n        return 0\n    return list1[m] + list1[n]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in list1:\n        s += i\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # write your code here\n    s = 0\n    for i in list1:\n        s += i\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(range(m, n))\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    print(f'{list1[m]} + {list1[n]} = {sum}')\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) < 1:\n        return 0\n    elif len(list1) > 1:\n        return sum_range_list(list1[len(list1)-2], m, n)\n    else:\n        if list1[m] < list1[n]:\n            return sum_range_list(list1[n], m+1, n)\n        elif list1[m] > list1[n]:\n            return sum_range_list(list1[m], m+1, n+1)\n        else:\n            return list1[m]\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    if a % 2!= 0:\n        raise ValueError('Input must be an even number')\n    # Calculate the perimeter\n    return 3 * (a / 2) * (math.sqrt(3)/4)\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    if a % 2!= 0:\n        raise ValueError('Input must be an even number')\n    # Calculate the perimeter\n    return math.sqrt(3) * a\ndef perimeter_cube(a):\n    '''\n    Write a function to find the perimeter of a regular cube from the length of its sides.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    if a % 2!= 0:\n        raise ValueError('Input must be an even number')\n    # Calculate the perimeter\n    return math.sqrt(9) * a\ndef perimeter_square_curved_triangle(a):\n    '''\n    Write a function to calculate the perimeter of a square that is a curved triangle.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    if a % 2!= 0:\n        raise ValueError('Input must be an even number')\n    # Calculate the perimeter\n    return math.sqrt(2) * (a / 3)\ndef perimeter_square_spherical_pentagon(a):\n    '''\n    Write a function to calculate the perimeter of a square that is a spherical pentagon.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    if a % 2!= 0:\n        raise ValueError('Input must be an even number')\n    # Calculate the perimeter\n    return math.sqrt(2) * (math.sqrt(a)/(a+1))\ndef perimeter_square_spherical_cube(a):\n    '''\n    Write a function to calculate the perimeter of a square that is a spherical cube.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    if a % 2!= 0:\n        raise ValueError('Input must be an even number')\n    # Calculate the perimeter\n    return math.sqrt(2) * (a/3)\ndef perimeter_rectangle(a):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return 2 * a\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2\ndef perimeter_triangle(a):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2 * math.sqrt(3)\ndef perimeter_square_rectangle(a):\n    '''\n    Write a function to calculate the perimeter of a rectangle.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2\ndef perimeter_triangle_rectangle(a):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2 * math.sqrt(3)\ndef perimeter_square_circle(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2\ndef perimeter_triangle_circle(a):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2 * math.sqrt(3)\ndef perimeter_square_square(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2 * math.sqrt(a)\ndef perimeter_square_pentagon(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2 * math.sqrt(3)\ndef perimeter_circle_circle(a):\n    '''\n    Write a function to calculate the perimeter of a circle.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2\ndef perimeter_square_square_square(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2 * math.sqrt(a)\ndef perimeter_square_triangle_triangle(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    # Calculate the perimeter\n    return a ** 2 * math.sqrt(3)\ndef perimeter_square_square_square_square(a):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    # Validate the input\n    if type(a) is not int:\n        raise TypeError('Input must be an int')\n    if a < 1:\n        raise ValueError('Input must be positive')\n    "
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 4\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 4\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 6\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 9\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    return a * a\ndef area_tetrahedron(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return a * 4\ndef area_tetrahedron(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return a * a\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a * 5\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 7\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 10\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return a * 6\ndef area_tetrahedron(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return a * a\ndef area_cube(a):\n    '''\n    Write a function to find the area of a regular cube from the length of its sides.\n    '''\n    return a * 3 * 3\ndef area_sphere(a):\n    '''\n    Write a function to find the area of a regular sphere from the length of its sides.\n    '''\n    return a * 4\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 4\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 4\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 6\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its sides.\n    '''\n    return a * 9\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_tetrahedron(a):\n    '''\n    Write a function to find the perimeter of a regular tetrahedron from the length of its sides.\n    '''\n    return a * 4\ndef area_tetrahedron(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return a * a\ndef area_cube(a):\n    '''\n    Write a function to find the area of a regular cube from the length of its sides.\n    '''\n    return a * 3 * 3\ndef area_sphere(a):\n    '''\n    Write a function to find the area of a regular sphere from the length of its sides.\n    '''\n    return a * 4\ndef area_cylinder(a):\n    '''\n    Write a function to find the area of a cylinder from the length of its sides.\n    '''\n    return a * 3.14159\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return a * a\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    return a * 5\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    return a * a\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    return a * 7\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    return a * 5\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    return a * 10\ndef area_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its sides.\n    '''\n    return a * a\ndef area_tetrahedron(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return a * 4\ndef area_tetrahedron(a):\n    '''\n    Write a function to find the area of a regular tetrahedron from the length of its sides.\n    '''\n    return a * a\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    return a * 4\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    P = 3.14 * (a * 3)\n    return P\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    A = 3.14 * (a * 3) ** 2\n    return A\ndef triangle_rectangle(a, b, c):\n    '''\n    Write a function to find the triangle area.\n    '''\n    P = (b * c) / 2\n    return P\ndef rectangle_triangle(a, b):\n    '''\n    Write a function to find the rectangle area.\n    '''\n    T = (((a * b) / 2) ** 2)\n    return T\ndef parallelogram_triangle(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    P = (((a * b) / 2) ** 2)\n    return P\ndef parallelogram_rectangle(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    A = math.sqrt((a * b) / 2)\n    return A\ndef parallelogram_parallelogram(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    P = (((a * b) / 2) ** 2)\n    return P\ndef parallelogram_parallelogram_with_divided_by(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    C = (a * b) / 2\n    return C\ndef parallelogram_parallelogram_with_divided_by_completed_with_variation(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    D = math.sqrt(a * b)\n    return D\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    E = ((a * b) / 2)\n    return E\ndef parallelogram_parallelogram_with_divided_by_completed_with_variation_and_closed_with_half_a(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    F = ((a * b) / 2)\n    return F\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation_and_closed_with_half_a(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    G = math.sqrt((a * b) / 2)\n    return G\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation_and_closed_without_half_a(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    H = math.sqrt((a * b) / 2)\n    return H\ndef parallelogram_parallelogram_with_divided_by_completed_with_variation_and_closed_with_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    I = a * b\n    return I\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation_and_closed_with_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    J = (a * b) / 2\n    return J\ndef parallelogram_parallelogram_with_divided_by_completed_with_variation_and_closed_with_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    K = math.sqrt((a * b) / 2)\n    return K\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation_and_closed_with_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    L = (a * b) / 2\n    return L\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation_and_closed_without_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    M = math.sqrt((a * b) / 2)\n    return M\ndef parallelogram_parallelogram_with_divided_by_completed_with_variation_and_closed_without_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    N = (a * b) / 2\n    return N\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation_and_closed_without_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    O = math.sqrt((a * b) / 2)\n    return O\ndef parallelogram_parallelogram_with_divided_by_completed_with_variation_and_closed_with_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    P = math.sqrt((a * b) / 2)\n    return P\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation_and_closed_with_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    R = (a * b) / 2\n    return R\ndef parallelogram_parallelogram_with_divided_by_completed_with_variation_and_closed_with_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    S = (a * b) / 2\n    return S\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation_and_closed_with_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    T = ((a * b) / 2)\n    return T\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation_and_closed_without_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    U = (a * b) / 2\n    return U\ndef parallelogram_parallelogram_with_divided_by_completed_with_variation_and_closed_with_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    V = math.sqrt((a * b) / 2)\n    return V\ndef parallelogram_parallelogram_with_divided_by_completed_without_variation_and_closed_with_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    W = math.sqrt((a * b) / 2)\n    return W\ndef parallelogram_parallelogram_with_divided_by_completed_with_variation_and_closed_without_half_a_and_square_height(a, b):\n    '''\n    Write a function to find the parallelogram area.\n    '''\n    X = math.sqrt((a * b) / 2)\n    return X"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sum_of_sides = 0\n    for i in range(0,a):\n        sum_of_sides += 2 * math.sqrt(i+1)\n    return sum_of_sides\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a<0:\n        raise ValueError(\"Perimeter of a pentagon must be positive.\")\n    elif a==0:\n        return 0\n    elif a==1:\n        return 4\n    elif a==2:\n        return 6\n    elif a==3:\n        return 8\n    elif a==4:\n        return 12\n    elif a==5:\n        return 14\n    elif a==6:\n        return 16\n    elif a==7:\n        return 18\n    elif a==8:\n        return 20\n    elif a==9:\n        return 22\n    elif a==10:\n        return 24\n    elif a==11:\n        return 26\n    elif a==12:\n        return 28\n    elif a==13:\n        return 30\n    elif a==14:\n        return 32\n    elif a==15:\n        return 34\n    elif a==16:\n        return 36\n    elif a==17:\n        return 38\n    elif a==18:\n        return 40\n    elif a==19:\n        return 42\n    elif a==20:\n        return 44\n    elif a==21:\n        return 46\n    elif a==22:\n        return 48\n    elif a==23:\n        return 50\n    elif a==24:\n        return 52\n    elif a==25:\n        return 54\n    elif a==26:\n        return 56\n    elif a==27:\n        return 58\n    elif a==28:\n        return 60\n    elif a==29:\n        return 62\n    elif a==30:\n        return 64\n    elif a==31:\n        return 66\n    elif a==32:\n        return 68\n    elif a==33:\n        return 70\n    elif a==34:\n        return 72\n    elif a==35:\n        return 74\n    elif a==36:\n        return 76\n    elif a==37:\n        return 78\n    elif a==38:\n        return 80\n    elif a==39:\n        return 82\n    elif a==40:\n        return 84\n    elif a==41:\n        return 86\n    elif a==42:\n        return 88\n    elif a==43:\n        return 90\n    elif a==44:\n        return 92\n    elif a==45:\n        return 94\n    elif a==46:\n        return 96\n    elif a==47:\n        return 98\n    elif a==48:\n        return 100\n    elif a==49:\n        return 102\n    elif a==50:\n        return 104\n    elif a==51:\n        return 106\n    elif a==52:\n        return 108\n    elif a==53:\n        return 110\n    elif a==54:\n        return 112\n    elif a==55:\n        return 114\n    elif a==56:\n        return 116\n    elif a==57:\n        return 118\n    elif a==58:\n        return 120\n    elif a==59:\n        return 122\n    elif a==60:\n        return 124\n    elif a==61:\n        return 126\n    elif a==62:\n        return 128\n    elif a==63:\n        return 130\n    elif a==64:\n        return 132\n    elif a==65:\n        return 134\n    elif a==66:\n        return 136\n    elif a==67:\n        return 138\n    elif a==68:\n        return 140\n    elif a==69:\n        return 142\n    elif a==70:\n        return 144\n    elif a==71:\n        return 146\n    elif a==72:\n        return 148\n    elif a==73:\n        return 150\n    elif a==74:\n        return 152\n    elif a==75:\n        return 154\n    elif a==76:\n        return 156\n    elif a==77:\n        return 158\n    elif a==78:\n        return 160\n    elif a==79:\n        return 162\n    elif a==80:\n        return 164\n    elif a==81:\n        return 166\n    elif a==82:\n        return 168\n    elif a==83:\n        return 170\n    elif a==84:\n        return 172\n    elif a==85:\n        return 174\n    elif a==86:\n        return 176\n    elif a==87:\n        return 178\n    elif a==88:\n        return 180\n    elif a==89:\n        return 182\n    elif a==90:\n        return 184\n    elif a==91:\n        return 186\n    elif a==92:\n        return 188\n    elif a==93:\n        return 190\n    elif a==94:\n        return 192\n    elif a==95:\n        return 194\n    elif a==96:\n        return 196\n    elif a==97:\n        return 198\n    elif a==98:\n        return 200\n    elif a==99:\n        return 202\n    elif a==100:\n        return 204\n    elif a==101:\n        return 206\n    elif a==102:\n        return 208\n    elif a==103:\n        return 210\n    elif a==104:\n        return 212\n    elif a==105:\n        return 214\n    elif a==106:\n        return 216\n    elif a==107:\n        return 218\n    elif a==108:\n        return 220\n    elif a==109:\n        return 222\n    elif a==110:\n        return 224\n    elif a==111:\n        return 226\n    elif a==112:\n        return 228\n    elif a==113:\n        return 230\n    elif a==114:\n        return 232\n    elif a==115:\n        return 234\n    elif a==116:\n        return 236\n    elif a==117:\n        return 238\n    elif a==118:\n        return 240\n    elif a==119:\n        return 242\n    elif a==120:\n        return 244\n    elif a==121:\n        return 246\n    elif a==122:\n        return 248\n    elif a==123:\n        return 250\n    elif a==124:\n        return 252\n    elif a==125:\n        return 254\n    elif a==126:\n        return 256\n    elif a==127:\n        return 258\n    elif a==128:\n        return 260\n    elif a==129:\n        return 262\n    elif a==130:\n        return 264\n    elif a==131:\n        return 266\n    elif a==132:\n        return 268\n    elif a==133:\n        return 270\n    elif a==134:\n        return 272\n    elif a==135:\n        return 274\n    elif a==136:\n        return 276\n    elif a==137:\n        return 278\n    elif a==138:\n        return 280\n    elif a==139:\n        return 282\n    elif a==140:\n        return 284\n    elif a==141:\n        return 286\n    elif a==142:\n        return 288\n    elif a==143:\n        return 290\n    elif a==144:\n        return 292\n    elif a==145:\n        return 294\n    elif a==146:\n        return 296\n    elif a==147:\n        return 298\n    elif a==148:\n        return 300\n    elif a==149:\n        return 302\n    elif a==150:\n        return 304\n    elif a==151:\n        return 306\n    elif a==152:\n        return 308\n    elif a==153:\n        return 310\n    elif a==154:\n        return 312\n    elif a==155:\n        return 314\n    elif a==156:\n        return 316\n    elif a==157:\n        return 318\n    elif a==158:\n        return 320\n    elif a==159:\n        return 322\n    elif a==160:\n        return 324\n    elif a==161:\n        return 326\n    elif a==162:\n        return 328\n    elif a==163:\n        return 330\n    elif a==164:\n        return 332\n    elif "
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 2:\n        return -1\n    p = 0\n    while a >= 3:\n        p += a\n        a -= 3\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    area = 0\n    for side in range(4):\n        area = area + (side ** 2)\n    return area\ndef area_of_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    area = side ** 2\n    return area\ndef perimeter_square(side):\n    '''\n    Write a function to calculate the perimeter of a square.\n    '''\n    perimeter = side * 4\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    b = a * 3\n    c = b * 2\n    d = c * 2\n    e = d * 2\n    return a + b + c + d + e\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3.14 * (a ** 2))\ndef area_of_a_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (3.14 * (a ** 2)) / 2\ndef area_of_a_circle(radius):\n    '''\n    Write a function to find the area of a circle with a specified radius.\n    '''\n    return (math.pi * (radius ** 2))\ndef area_of_a_square(side):\n    '''\n    Write a function to find the area of a square with a specified length.\n    '''\n    return (side ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return (math.pi * radius ** 2)\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return area_of_a_circle(radius) * math.pi * radius ** 2\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return area_of_a_square(side) * side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return area_of_a_circle(radius) * math.pi * radius ** 2\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return area_of_a_square(side) * side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return area_of_a_circle(radius) * math.pi * radius ** 2\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return area_of_a_square(side) * side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return area_of_a_circle(radius) * math.pi * radius ** 2\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return area_of_a_square(side) * side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return area_of_a_circle(radius) * math.pi * radius ** 2\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return area_of_a_square(side) * side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return area_of_a_circle(radius) * math.pi * radius ** 2\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return area_of_a_square(side) * side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return area_of_a_circle(radius) * math.pi * radius ** 2\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return area_of_a_square(side) * side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return area_of_a_circle(radius) * math.pi * radius ** 2\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return area_of_a_square(side) * side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return area_of_a_circle(radius) * math.pi * radius ** 2\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return area_of_a_square(side) * side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '''\n    Write a function to find the volume of a circle with a specified radius.\n    '''\n    return area_of_a_circle(radius) * math.pi * radius ** 2\ndef volume_of_a_square(side):\n    '''\n    Write a function to find the volume of a square with a specified length.\n    '''\n    return area_of_a_square(side) * side ** 2\ndef volume_of_a_pentagon(a):\n    '''\n    Write a function to find the volume of a regular pentagon with the specified length.\n    '''\n    return perimeter_pentagon(a) * (a ** 2)\ndef volume_of_a_circle(radius):\n    '"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if(a==1):\n        return 3*4\n    if(a==2):\n        return 3*6\n    if(a==3):\n        return 6*4\n    if(a==4):\n        return 6*6\n    if(a==5):\n        return 8*6\n    if(a==6):\n        return 8*4\n    if(a==7):\n        return 10*4\n    if(a==8):\n        return 10*6\n    if(a==9):\n        return 12*4\n    if(a==10):\n        return 12*6\n    if(a==11):\n        return 14*4\n    if(a==12):\n        return 14*6\n    if(a==13):\n        return 16*4\n    if(a==14):\n        return 16*6\n    if(a==15):\n        return 18*4\n    if(a==16):\n        return 18*6\n    if(a==17):\n        return 20*4\n    if(a==18):\n        return 20*6\n    if(a==19):\n        return 22*4\n    if(a==20):\n        return 22*6\n    if(a==21):\n        return 24*4\n    if(a==22):\n        return 24*6\n    if(a==23):\n        return 26*4\n    if(a==24):\n        return 26*6\n    if(a==25):\n        return 28*4\n    if(a==26):\n        return 28*6\n    if(a==27):\n        return 30*4\n    if(a==28):\n        return 30*6\n    if(a==29):\n        return 32*4\n    if(a==30):\n        return 32*6\n    if(a==31):\n        return 34*4\n    if(a==32):\n        return 34*6\n    if(a==33):\n        return 36*4\n    if(a==34):\n        return 36*6\n    if(a==35):\n        return 38*4\n    if(a==36):\n        return 38*6\n    if(a==37):\n        return 40*4\n    if(a==38):\n        return 40*6\n    if(a==39):\n        return 42*4\n    if(a==40):\n        return 42*6\n    if(a==41):\n        return 44*4\n    if(a==42):\n        return 44*6\n    if(a==43):\n        return 46*4\n    if(a==44):\n        return 46*6\n    if(a==45):\n        return 48*4\n    if(a==46):\n        return 48*6\n    if(a==47):\n        return 50*4\n    if(a==48):\n        return 50*6\n    if(a==49):\n        return 52*4\n    if(a==50):\n        return 52*6\n    if(a==51):\n        return 54*4\n    if(a==52):\n        return 54*6\n    if(a==53):\n        return 56*4\n    if(a==54):\n        return 56*6\n    if(a==55):\n        return 58*4\n    if(a==56):\n        return 58*6\n    if(a==57):\n        return 60*4\n    if(a==58):\n        return 60*6\n    if(a==59):\n        return 62*4\n    if(a==60):\n        return 62*6\n    if(a==61):\n        return 64*4\n    if(a==62):\n        return 64*6\n    if(a==63):\n        return 66*4\n    if(a==64):\n        return 66*6\n    if(a==65):\n        return 68*4\n    if(a==66):\n        return 68*6\n    if(a==67):\n        return 70*4\n    if(a==68):\n        return 70*6\n    if(a==69):\n        return 72*4\n    if(a==70):\n        return 72*6\n    if(a==71):\n        return 74*4\n    if(a==72):\n        return 74*6\n    if(a==73):\n        return 76*4\n    if(a==74):\n        return 76*6\n    if(a==75):\n        return 78*4\n    if(a==76):\n        return 78*6\n    if(a==77):\n        return 80*4\n    if(a==78):\n        return 80*6\n    if(a==79):\n        return 82*4\n    if(a==80):\n        return 82*6\n    if(a==81):\n        return 84*4\n    if(a==82):\n        return 84*6\n    if(a==83):\n        return 86*4\n    if(a==84):\n        return 86*6\n    if(a==85):\n        return 88*4\n    if(a==86):\n        return 88*6\n    if(a==87):\n        return 90*4\n    if(a==88):\n        return 90*6\n    if(a==89):\n        return 92*4\n    if(a==90):\n        return 92*6\n    if(a==91):\n        return 94*4\n    if(a==92):\n        return 94*6\n    if(a==93):\n        return 96*4\n    if(a==94):\n        return 96*6\n    if(a==95):\n        return 98*4\n    if(a==96):\n        return 98*6\n    if(a==97):\n        return 100*4\n    if(a==98):\n        return 100*6\n    if(a==99):\n        return 102*4\n    if(a==100):\n        return 102*6\n    if(a==101):\n        return 104*4\n    if(a==102):\n        return 104*6\n    if(a==103):\n        return 106*4\n    if(a==104):\n        return 106*6\n    if(a==105):\n        return 108*4\n    if(a==106):\n        return 108*6\n    if(a==107):\n        return 110*4\n    if(a==108):\n        return 110*6\n    if(a==109):\n        return 112*4\n    if(a==110):\n        return 112*6\n    if(a==111):\n        return 114*4\n    if(a==112):\n        return 114*6\n    if(a==113):\n        return 116*4\n    if(a==114):\n        return 116*6\n    if(a==115):\n        return 118*4\n    if(a==116):\n        return 118*6\n    if(a==117):\n        return 120*4\n    if(a==118):\n        return 120*6\n    if(a==119):\n        return 122*4\n    if(a==120):\n        return 122*6\n    if(a==121):\n        return 124*4\n    if(a==122):\n        return 124*6\n    if(a==123):\n        return 126*4\n    if(a==124):\n        return 126*6\n    if(a==125):\n        return 128*4\n    if(a==126):\n        return 128*6\n    if(a==127):\n        return 130*4\n    if(a==128):\n        return 130*6\n    if(a==129):\n        return 132*4\n    if(a==130):\n        return 132*6\n    if(a==131):\n        return 134*4\n    if(a==132):\n        return 134*6\n    if(a==133):\n        return 136*4\n    if(a==134):\n        return 136*6\n    if(a==135):\n        return 138*4\n    if(a==136):\n        return 138*6\n    if(a==137):\n        return 140*4\n    if(a==138):\n        return 140*6\n    if(a==139):\n        return 142*4\n    if(a==140):\n        return 142*6\n    if(a==141):\n        return 144*4\n    if(a==142):\n        return 144*6\n    if(a==143):\n        return 146*4\n    if(a="
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occur = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            occur += 1\n    return occur\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    my_dict = {}\n    for word in s:\n        if word in my_dict:\n            my_dict[word] = my_dict[word] + 1\n        else:\n            my_dict[word] = 1\n    return len(my_dict)\n    \n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = 0\n    for i in s:\n        if i =='s':\n            c += 1\n    return c\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occur = 0\n    for i in range(len(s)):\n        if s[i] == 't':\n            occur += 1\n        else:\n            occur = 0\n    return occur\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occ = 0\n    for i in range(len(s)):\n        if s[i] =='std':\n            occ += 1\n    return occ\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in s:\n        if s.count(i)>1:\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # TODO\n    dict1 = {}\n    dict2 = {}\n    dict3 = {}\n    for i in s:\n        if i not in dict1:\n            dict1[i] = 0\n        dict1[i] += 1\n        if i in dict2:\n            dict2[i] += 1\n        else:\n            dict2[i] = 1\n    for i in dict2:\n        dict3[i] = dict1[i] + dict2[i]\n    return dict3\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(s)\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i == \"std\":\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    s = s.lower()\n    for c in s:\n        if c =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    def check_tuple(tup):\n        '''\n        Check if all the elements in tuple have same data type or not.\n        '''\n        for i in range(0,len(tup)):\n            if isinstance(tup[i],tuple):\n                check_tuple(tup[i])\n            elif isinstance(tup[i],list):\n                for item in tup[i]:\n                    if isinstance(item,tuple):\n                        check_tuple(item)\n                    elif isinstance(item,list):\n                        for item in item:\n                            if isinstance(item,tuple):\n                                check_tuple(item)\n    check_tuple(test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for element in test_tuple:\n        if type(element) is not tuple:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Your code here\n    if(len(test_tuple)!= 0):\n        for i in test_tuple:\n            if type(i)!= int:\n                return \"Error: Type of data does not match\"\n        return \"Success\"\n    else:\n        return \"Error: Input tuple is empty\"\n    \n    \n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i, tuple):\n            raise TypeError(\"Argument must be a tuple\")\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = []\n    for x in test_tuple:\n        if type(x)!= tuple:\n            return False\n        else:\n            test_list.append(x)\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for data_type in test_tuple:\n        if type(data_type)!= type(1):\n            raise TypeError('Invalid data type')\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_type_list = []\n    for i in test_tuple:\n        check_type_list.append(type(i))\n    if(len(set(check_type_list)) == 1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if test_tuple[i] is None:\n            raise ValueError(\"Tuple should have at least one element.\")\n        if isinstance(test_tuple[i], list):\n            raise ValueError(\"Tuple should have at least one element.\")\n        if isinstance(test_tuple[i], dict):\n            raise ValueError(\"Tuple should have at least one element.\")\n        if isinstance(test_tuple[i], set):\n            raise ValueError(\"Tuple should have at least one element.\")\n        if isinstance(test_tuple[i], tuple):\n            raise ValueError(\"Tuple should have at least one element.\")\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if (len(test_tuple[0]) == 1):\n        if (type(test_tuple[0][0]) == type(test_tuple[1][0])):\n            return True\n        else:\n            return False\n    else:\n        return False\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_data = test_tuple[0]\n    type_dictionary = test_tuple[1]\n    for i in type_dictionary:\n        if type_data!= type_dictionary[i]:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    def get_majority(arr, n, x):\n        if n == 0:\n            return -1\n        if x > arr[n//2]:\n            return get_majority(arr, n//2, x)\n        elif arr[n//2] == x:\n            return n//2\n        else:\n            return get_majority(arr[:n//2], n//2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                continue\n            if arr[i] > x:\n                return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 1\n    \n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n            if count > n/2:\n                return True\n            \n            count = 1\n            \n        else:\n            count = 1\n            \n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # your code here\n    if n == 0:\n        return True\n    if n == 1:\n        return arr[0] == x\n    if arr[n-1] == x:\n        return True\n    if arr[n-1] > x:\n        return is_majority(arr[n:], n-1, x)\n    return is_majority(arr[:n-1], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    if n == 0:\n        return False\n    \n    if arr[n//2] == x:\n        return True\n    if arr[n//2] > x:\n        return is_majority(arr[n//2+1:], n, x)\n    return is_majority(arr[:n//2], n, x)\n        \n    \n    \n    \n    "
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TODO: Write your function here\n    majority = arr[0]\n    count = 1\n    for i in range(1, n):\n        if arr[i] == majority:\n            count += 1\n            if count == n/2:\n                return True\n        else:\n            count = 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    \n    left = 0\n    right = n - 1\n    if arr[left] == x:\n        left += 1\n    elif arr[left] > x:\n        right -= 1\n    while left <= right:\n        if arr[left] == x:\n            break\n        if arr[right] == x:\n            return True\n        if arr[left] > arr[right]:\n            left += 1\n        else:\n            right -= 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # if the array contains only one element, then return True\n    if n == 1 or arr[n] == x:\n        return True\n    \n    # if the array contains only two elements, return true\n    if n == 2 and arr[n] == x:\n        return True\n    \n    # if the array contains only one element and the array is sorted, return true\n    if n == 1 and arr[0] == x:\n        return True\n    \n    # if the array contains only one element and the array is not sorted, return false\n    if n == 2 and arr[1] == x:\n        return False\n    \n    # if there are n elements, and the array contains at least one element with value x, return false\n    if n > 1 and arr[0]!= x:\n        return False\n    \n    # if the array contains exactly one element with value x, return false\n    if n == 1 and arr[1] == x:\n        return False\n    \n    # if there are no elements with value x, return false\n    if n == 2 and arr[0] == x:\n        return False\n    \n    # if there are at least two elements with value x, return true\n    if n > 2:\n        return is_majority(arr[n], n-1, x)\n    \n    # if the array is empty, return false\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    half = n // 2\n    count = 0\n    for x in arr:\n        if x == x:\n            count += 1\n            if count > half:\n                return x\n        else:\n            count = 0\n    return None\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # arr = sorted(arr)\n    # print(arr)\n    # print(len(arr))\n    # print(arr[0])\n    if n == 0:\n        return True\n    # check the most-occurring element in arr\n    elif arr[0] == x:\n        return True\n    # if it's less than x, then check if the first occurrence of x occurs more than n/2 times\n    elif arr[0] < x:\n        return is_majority(arr[1:], n, x)\n    # if it's greater than x, then check if the second occurrence of x occurs more than n/2 times\n    elif arr[0] > x:\n        return is_majority(arr[1:], n, x)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count_set_bits = 0\n    while n!= 0: \n        count_set_bits += n & 1\n        n >>= 1\n    return count_set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    def count_bits(n): \n        '''\n        Count the number of set bits in a given number.\n        '''\n        c = 0\n        while n:\n            if n & 1:\n                c += 1\n            n >>= 1\n        return c\n    return count_bits(n)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return sum([(1 << bit) for bit in range(len(bin(n)[2:]))])\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    a = n\n    b = a\n    count_bits = 0\n    while b > 0:\n        if (b & 1) == 1:\n            count_bits += 1\n        b >>= 1\n        if b == 1:\n            break\n    return count_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n:\n        d = n & 1\n        if d == 1:\n            c = c + 1\n        n = n >> 1\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    import binascii\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    def count_Set_Bits_Iter(num, count):\n        while num:\n            if num & 1:\n                count += 1\n            num >>= 1\n        return count\n    \n    bits = bin(n)\n    res = count_Set_Bits_Iter(bits, 0)\n    return res\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(n):\n        if n % 2 == 0:\n            if (n % 2 == 0):\n                count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in str:\n        if i % 2!= 0:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace('Odd','Odd').replace('Even','Even')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            odd_values.append(str[i])\n    return ''.join(odd_values)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for i in range(len(str)):\n        if i%2 == 1:\n            lst.append(str[i])\n    return lst\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    def odd_values(str):\n        result = []\n        for i in range(len(str)):\n            if i%2 == 1:\n                result.append(str[i])\n        return result\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    try:\n        even_list = []\n        odd_list = []\n        for char in str:\n            if char % 2 == 0:\n                even_list.append(char)\n            else:\n                odd_list.append(char)\n        return even_list, odd_list\n    except TypeError:\n        print(\"Invalid string\")\n        exit()\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for char in str:\n        if char % 2!= 0:\n            lst.append(char)\n    return \"\".join(lst)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str)%2!= 0:\n        return 'String must have an even number of characters!'\n    else:\n        return str.strip()\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''.join(e for e in str if e % 2 == 1)\n    return result\n    \nodd_values_string('abcdefghi')"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c: \n        return a\n    elif b>a and b>c: \n        return b\n    else: \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c and b < a:\n        return b\n    elif c < a and c < b:\n        return c\n    else:\n        return a\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a == b == c):\n        return a\n    elif (a > b > c):\n        return a\n    elif (b > a > c):\n        return b\n    elif (c > a > b):\n        return c\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c:\n        return a\n    if b > a and b > c:\n        return b\n    if c > a and c > b:\n        return c\n    return 'Numbers not found'\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    elif b>c:\n        if b>a:\n            return b\n        else:\n            return a\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b == c:\n        return a\n    elif a > b > c:\n        return a\n    elif a > c > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and b < c:\n        return a\n    elif b < c and b < a:\n        return b\n    elif c < a and c < b:\n        return c\n    elif c < a and c < b:\n        return a\n    else:\n        return min(a,b,c)\n    \n    \nprint(min_of_three(1,3,5))\nprint(min_of_three(1,3,3))\nprint(min_of_three(1,1,3)"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and a > c: \n        return a \n    if b > a and b > c: \n        return b \n    if c > a and c > b: \n        return c \n    return -1\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 1:\n        return n == r\n    elif l <= n <= r:\n        return all_Bits_Set_In_The_Given_Range(n-1,l,r)\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_bits = 0\n    for i in range(l,r):\n        if (n & (1<<i)) == 0:\n            all_bits += 1\n    return all_bits == n\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def number_of_unset_bits(n):\n        result = 0\n        while n>0:\n            result += n%2\n            n = n//2\n        return result\n    \n    def check_bits(n,l,r):\n        result = number_of_unset_bits(n)\n        if result!= l and result!= r:\n            return False\n        return True\n        \n    for i in range(l,r+1):\n        if not check_bits(n,l,i):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l>=0 and l<=r and r>=0 and r<=i):\n            if (i==l or i==r):\n                print(\"bit\",i,\"is unset in given range\")\n            else:\n                print(\"bit\",i,\"is not unset\")\n        else:\n            print(\"Invalid range.\")\n            return 0\n    print(\"All bits are set.\")\n    return 1\n    \n    \n    \ndef main():\n    '''\n    Takes a number from the user and checks whether the bits in the given range are all unset.\n    '''\n    print(\"Enter the number for which you want the bits in the given range as a string\")\n    n=int(input())\n    if all_Bits_Set_In_The_Given_Range(n,0,7):\n        print(\"All bits are unset.\")\n    else:\n        print(\"The bits are set.\")\n    \n    \n    \nmain()\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def counter_bits(n):\n        '''\n        Function to count the number of bits for each bit in a given number n\n        '''\n        return int(bin(n)[2:].count('1'))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(l>r):\n        return 'range is not defined'\n    else:\n        return n&(n-1)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l>=n or r<=0:\n        return False\n    elif(n==1):\n        return True\n    else:\n        if(r==1):\n            return (all_Bits_Set_In_The_Given_Range(n-1,l-1,1))\n        elif(r==l):\n            return (all_Bits_Set_In_The_Given_Range(n-1,l-1,n))\n        else:\n            return (all_Bits_Set_In_The_Given_Range(n-1,l-1,r))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & (1 << i)!= 0):\n            print(\"Bits are set in range \" + str(i))\n        else:\n            print(\"Bits are not set in range \" + str(i))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return all(1 << i for i in range(l,r+1))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_Bits_Set=0\n    for i in range(l,r+1):\n        all_Bits_Set=all_Bits_Set+i\n    return all_Bits_Set==0\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return np.array(arr)[::-1].tolist()\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # TODO: Replace the pass statement with your code here\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Helper function to re-arrange the array\n    def helper(arr, n):\n        reversed_arr = [0] * n\n        for i in reversed(range(n)):\n            reversed_arr[i] = arr[i]\n        for i in reversed(range(n)):\n            if reversed_arr[i] < 0:\n                arr[i] *= -1\n        return arr\n    \n    # Do the actual re-arrangement\n    if len(arr) < n:\n        return arr\n    \n    # Helper function to re-arrange the array\n    def helper(arr, n):\n        reversed_arr = [0] * n\n        for i in reversed(range(n)):\n            reversed_arr[i] = arr[i]\n        return reversed_arr\n    \n    # Do the actual re-arrangement\n    arr = helper(arr, n)\n    for i in range(n):\n        arr[i] = abs(arr[i])\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    re_arr = []\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            re_arr.append(arr[i])\n            i += 1\n        else:\n            re_arr.append(arr[i])\n            i += 1\n            arr[i] = arr[i - 1]\n    arr[0:n] = re_arr[::-1]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_index = 0\n    arr_len = len(arr)\n    while arr_index < arr_len:\n        if arr[arr_index] < 0:\n            arr[arr_index] = arr[arr_index] + 1\n        elif arr[arr_index] > 0:\n            arr[arr_index] = arr[arr_index] - 1\n        arr_index += 1\n    for i in range(0, n):\n        arr[i] = -arr[i]\n    \n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = list(arr)\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] *= -1\n        arr.insert(0, arr[-1])\n        arr.pop()\n    return arr\n    \n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    for i in range(n):\n        if arr[i] < 0:\n            result.append(arr[i])\n            arr[i] *= -1\n    for i in range(n):\n        result.append(arr[i])\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return arr\n    if n % 2 == 0:\n        return [arr[n//2], arr[n//2-1]]\n    else:\n        return [arr[n//2-1], arr[n//2]]\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # TODO: Write your function here\n    if char =='':\n        return str1\n    else:\n        return str1.replace(char,' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str=''\n    for x in str1:\n        if x==' ':\n            new_str+=char\n        else:\n            new_str+=x\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for c in char:\n        str1 = str1.replace(c,'')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \",\"%20\")\n    new_str = new_str.replace(\"#\",\"\")\n    new_str = new_str.replace(\"=\",\"\")\n    new_str = new_str.replace(\"&\",\"\")\n    new_str = new_str.replace(\"(\",\"\")\n    new_str = new_str.replace(\")\",\"\")\n    new_str = new_str.replace(\"[\",\"\")\n    new_str = new_str.replace(\"]\",\"\")\n    new_str = new_str.replace(\";\",\"\")\n    new_str = new_str.replace(\"]\",\"\")\n    new_str = new_str.replace(\" \",\"\")\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    while char in str1:\n        str1=str1.replace(char,'*')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Your code here\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if char =='':\n        return str1.replace(' ','')\n    elif char == '\\n':\n        return str1.replace('\\n',' ')\n    else:\n        return str1.replace(' ','')+char\n    \ndef load_words(filename):\n    '''\n    Load a file with words and their frequencies.\n    '''\n    print('Loading words from file...')\n    with open(filename, 'r') as f:\n        words = f.readlines()\n    for word in words:\n        word = word.strip()\n        word = word.split(' ')\n        word = list(filter(None, word))\n        word = list(filter(None, word))\n        word = list(filter(None, word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(filter(None, word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(filter(None, word))\n        word = list(map(int,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(filter(None, word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(filter(None, word))\n        word = list(map(int,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(filter(None, word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(map(int,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(int,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(filter(None, word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(str,word))\n        word = list(map(st"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    temp_str = str1.replace(\" \",\"\")\n    temp_str = temp_str.replace(char,\"\")\n    return temp_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    output = []\n    for i in list1:\n        heapq.heappush(output,i)\n    output = sorted(output,reverse=True)\n    return output[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # TODO: complete this function\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pivot = int(len(list1)/n)\n    return_list = []\n    for i in range(n):\n        return_list.append(list1[pivot*i])\n    return return_list\ndef sort(list1):\n    '''\n    Write a function that takes in a list and sorts the elements in the list in ascending order.\n    '''\n    list1.sort()\ndef bs_sort(list1):\n    '''\n    Write a function that takes in a list and sorts the elements in the list in descending order.\n    '''\n    list1.sort(reverse=True)\ndef merge(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list containing the elements of both lists in sorted order.\n    '''\n    return_list = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            return_list.append(list1[i])\n            i += 1\n        else:\n            return_list.append(list2[j])\n            j += 1\n    while i < len(list1):\n        return_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        return_list.append(list2[j])\n        j += 1\n    return return_list\ndef merge_sort(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of both lists in sorted order.\n    '''\n    if len(list1) <= 1:\n        return list1\n    middle = int(len(list1)/2)\n    left = merge_sort(list1[:middle])\n    right = merge_sort(list1[middle:])\n    return merge(left,right)\ndef quick_sort(list1,i,n):\n    '''\n    Write a function that takes in a list, an integer i and a size n and returns a new list containing the elements of the list in sorted order.\n    '''\n    def is_sorted(i):\n        return i < n and list1[i] <= list1[i+1]\n    if i < n:\n        pivot = list1[i]\n        j = i + 1\n        for k in range(i,n):\n            if is_sorted(k):\n                continue\n            if list1[k] < pivot:\n                list1[j] = list1[k]\n                j += 1\n                if j == i + 1:\n                    break\n            elif list1[k] > pivot:\n                list1[j] = list1[k]\n                j += 1\n        list1[j] = pivot\n        return quick_sort(list1,i,j)\ndef partition(list1,pivot):\n    '''\n    Write a function that takes in a list and a pivot index and returns a new list containing the elements of the list where the pivot is located in the middle of the list.\n    '''\n    def partition_pivot(list1,pivot):\n        low,high = 0,len(list1)-1\n        while low<=high:\n            mid = low + (high-low)//2\n            if list1[mid] < pivot:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return low\n    def list_to_array(list1):\n        output_array = []\n        for i in list1:\n            output_array.append(i)\n        return output_array\n    def sort(list1):\n        output_array = list_to_array(list1)\n        pivot = partition_pivot(output_array,pivot)\n        return quick_sort(output_array,pivot,len(output_array))\n    return sort(list1)\ndef merge_heap(list1,list2):\n    '''\n    Write a function that takes in a list and list2, merges both lists and returns a new list containing the elements of both lists in sorted order.\n    '''\n    heapq.heapify(list1)\n    heapq.heapify(list2)\n    return merge(list1,list2)\ndef merge_sort(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the list in sorted order.\n    '''\n    def merge_sort_helper(list1,list2,left,right):\n        if left == right:\n            return list1[left]\n        middle = (left+right)//2\n        left_elem = merge_sort_helper(list1,list2,left,middle)\n        right_elem = merge_sort_helper(list1,list2,middle+1,right)\n        return merge(left_elem,right_elem)\n    def merge(list1,list2):\n        output_array = []\n        i = 0\n        j = 0\n        while i < len(list1) and j < len(list2):\n            if list1[i] < list2[j]:\n                output_array.append(list1[i])\n                i += 1\n            else:\n                output_array.append(list2[j])\n                j += 1\n        while i < len(list1):\n            output_array.append(list1[i])\n            i += 1\n        while j < len(list2):\n            output_array.append(list2[j])\n            j += 1\n        return output_array\n    return merge_sort_helper(list1,list2,0,len(list1)-1)\ndef merge_sort(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the list in sorted order.\n    '''\n    def merge_sort_helper(list1,list2):\n        output_array = []\n        def sort_helper(list1,list2,i,j):\n            if i > j:\n                return\n            if i == j:\n                output_array.append(list1[i])\n            else:\n                mid = (i+j)//2\n                sort_helper(list1,list2,i,mid)\n                sort_helper(list1,list2,mid+1,j)\n                output_array.append(list1[i])\n                output_array.append(list1[mid])\n                output_array.append(list1[j])\n        sort_helper(list1,list2,0,len(list1)-1)\n        return output_array\n    def sort(list1):\n        output_array = list_to_array(list1)\n        return merge_sort_helper(output_array,output_array)\n    return sort(list1)\ndef heap_sort(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the list in sorted order.\n    '''\n    heapq.heapify(list1)\n    return heap_sort(list1,0,len(list1)-1)\ndef heap_sort(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the list in sorted order.\n    '''\n    def heapsort_helper(list1):\n        output_array = []\n        heapq.heapify(list1)\n        for i in range(len(list1)):\n            output_array.append(heapq.heappop(list1))\n        return output_array\n    def heap_sort_helper(list1):\n        output_array = list_to_array(list1)\n        return heapsort_helper(output_array)\n    def heapsort_helper(list1):\n        output_array = []\n        heapq.heapify(list1)\n        for i in range(len(list1)):\n            output_array.append(heapq.heappop(list1))\n        return output_array\n    return heap_sort_helper(list1)\ndef priority(list1):\n    '''\n    Write a function that takes in a list and returns a new list containing the elements of the list in sorted order.\n    '''\n    def priority_helper(list1):\n    "
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n    #return sorted(list1)[:n]\n    #return sorted(list1)[-n:]\n    #return sorted(list1,reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create an empty list\n    n_list = []\n    # Get the first n items\n    for i in range(n):\n        n_list.append(list1[i])\n    # Return the sorted list\n    return n_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    ans=[]\n    for x in list1:\n        if x not in ans:\n            ans.append(x)\n    heapq.heapify(ans)\n    for i in range(n):\n        x=heapq.heappop(ans)\n        y=heapq.heappop(ans)\n        heapq.heappush(ans,x+y)\n    return ans\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n=int(n)\n    sorted_list=sorted(list1,reverse=True)\n    return sorted_list[:n]\ndef func(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n=int(n)\n    sorted_list=sorted(list1,reverse=True)\n    return sorted_list[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for element in list1:\n        heapq.heappush(heap, element)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # write your code here\n    sorted_list = sorted(list1,key=lambda x: x[n],reverse=True)\n    return sorted_list[:n]\ndef k_largest(list1,k):\n    '''\n    Write a function that takes in a list and an integer k and returns a list containing the k largest items from the list.\n    '''\n    # write your code here\n    return sorted(list1,key=lambda x: x[k],reverse=True)[:k]\ndef convert_set_to_list(list1):\n    '''\n    Write a function that takes in a list and returns a list containing all values in the list.\n    '''\n    # write your code here\n    return list1\ndef add_list(list1,lst):\n    '''\n    Write a function that takes in a list and a list and returns a list that contains the list of values in the first list followed by the list of values in the second list.\n    '''\n    # write your code here\n    return list1+lst\ndef remove_set(list1,lst):\n    '''\n    Write a function that takes in a list and a list and returns a list that contains the list of values in the first list followed by the list of values in the second list without them.\n    '''\n    # write your code here\n    return list1-lst\ndef remove_set_2(list1,lst):\n    '''\n    Write a function that takes in a list and a list and returns a list that contains the list of values in the first list followed by the list of values in the second list without them.\n    '''\n    # write your code here\n    return list1-lst\ndef remove_duplicate(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the list of values in the first list followed by the list of values in the second list without they being repeated.\n    '''\n    # write your code here\n    return list1-set(list1)\ndef are_sets_equal(list1,list2):\n    '''\n    Write a function that takes in a list and returns a list that contains the list of values in the first list followed by the list of values in the second list.\n    '''\n    # write your code here\n    return list1==list2\ndef find_max_and_min(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the list of values in the first list followed by the list of values in the second list.\n    '''\n    # write your code here\n    return list1[0],list1[0]\ndef reverse_string(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the list of values in the first list followed by the list of values in the second list.\n    '''\n    # write your code here\n    return list1[::-1]\ndef second_set_overlap(list1,list2):\n    '''\n    Write a function that takes in a list and returns a list that contains the list of values in the first list followed by the list of values in the second list.\n    '''\n    # write your code here\n    return list1[1],list1[1]\ndef is_subset(list1,list2):\n    '''\n    Write a function that takes in a list and returns a list that contains the list of values in the first list followed by the list of values in the second list.\n    '''\n    # write your code here\n    return list1[0:len(list2)]==list2\ndef swap_case(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the list of values in the first list followed by the list of values in the second list.\n    '''\n    # write your code here\n    return list1.lower().swapcase()\ndef swap_case_2(list1):\n    '''\n    Write a function that takes in a list and returns a list that contains the list of values in the first list followed by the list of values in the second list.\n    '''\n    # write your code here\n    return list1.upper().swapcase()\ndef add_string_to_end(list1,s):\n    '''\n    Write a function that takes in a list and a string and returns a list that contains the list of values in the first list followed by the string in the second list.\n    '''\n    # write your code here\n    return list1+s\ndef remove_string_from_end(list1,s):\n    '''\n    Write a function that takes in a list and a string and returns a list that contains the list of values in the first list followed by the string in the second list.\n    '''\n    # write your code here\n    return list1[0:len(list1)-1]+list1[len(list1)-1:]\ndef remove_string_from_end_2(list1,s):\n    '''\n    Write a function that takes in a list and a string and returns a list that contains the list of values in the first list followed by the string in the second list.\n    '''\n    # write your code here\n    return list1[:len(list1)-1]+s\ndef remove_string_from_start(list1,s):\n    '''\n    Write a function that takes in a list and a string and returns a list that contains the list of values in the first list followed by the string in the second list.\n    '''\n    # write your code here\n    return list1[1:len(list1)]+list1[0:-1]\ndef remove_string_from_start_2(list1,s):\n    '''\n    Write a function that takes in a list and a string and returns a list that contains the list of values in the first list followed by the string in the second list.\n    '''\n    # write your code here\n    return list1[:len(list1)-1]+list1[1:]\ndef add_string_to_start(list1,s):\n    '''\n    Write a function that takes in a list and a string and returns a list that contains the list of values in the first list followed by the string in the second list.\n    '''\n    # write your code here\n    return list1+s[0:1]\ndef remove_string_from_start_3(list1,s):\n    '''\n    Write a function that takes in a list and a string and returns a list that contains the list of values in the first list followed by the string in the second list.\n    '''\n    # write your code here\n    return list1[1:-1]\ndef add_string_to_start_4(list1,s):\n    '''\n    Write a function that takes in a list and a string and returns a list that contains the list of values in the first list followed by the string in the second list.\n    '''\n    # write your code here\n    return list1[:1]+s[1:len(list1)]+list1[len(list1):]\ndef number_of_char(string):\n    '''\n    Write a function that takes in a string and returns the number of characters in the string.\n    '''\n    # write your code here\n    return len(string)\ndef string_to_list(string):\n    '''\n    Write a function that takes in a string and returns a list that contains the string in the list.\n    '''\n    # write your code here\n    return string.split(',')\ndef string_to_dict(string):\n    '''\n    Write a function that takes in a string and returns a dictionary that contains the string in the dictionary.\n    '''\n    # write your code here\n    return dict(map(lambda x: x.split('=')[0], string.split(',')))\ndef second_dict_to_list(dictionary):\n    '''\n    Write a function that takes in a dictionary and returns a list that contains the values in the dictionary.\n    '''\n    # write your code here\n    return [dictionary[x] for x in dictionary]\ndef second_list_to_dict(list):\n    '''\n    Write a function that takes in a list and returns a dictionary that contains the list in the dictionary.\n    '''\n    # write your code here\n    return dict(map(lambda x: (x, 1), list))\ndef dict_to_list(dictionary):\n    '''\n    Write a function that takes i"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    from mpmath import mp\n    from math import pi\n    from math import sqrt\n    def cylinder(r,h):\n        '''\n        Write a function to find the lateral surface area of a cylinder.\n        '''\n        from mpmath import mp\n        from math import pi\n        def volume_cylinder(r,h):\n            '''\n            Write a function to find the lateral surface area of a cylinder.\n            '''\n            from mpmath import mp\n            return mp.pi*r*(r+h)\n        v=volume_cylinder(r,h)\n        return v\n    #Initial values\n    A=cylinder(r,h)\n    B=cylinder(r/2,h)\n    C=cylinder(r/3,h)\n    #Calculations\n    #If u = 0\n    if r==0:\n        #If u = pi/4\n        if h==0:\n            L=0.5*A\n            V=0.25*B\n        #Else if u = pi/6\n        elif h==pi/6:\n            L=A\n            V=C\n        #Else if u = pi/4\n        else:\n            L=C\n            V=A\n        return L,V\n    else:\n        #If u > 1\n        if r>1:\n            #If u >= pi/4\n            if h==pi/4:\n                L=A\n                V=B\n            #Else if u >= pi/6\n            else:\n                L=C\n                V=B\n            return L,V\n        else:\n            #If u = 0\n            if h==0:\n                L=A\n                V=B\n            #Else if u = pi/6\n            else:\n                L=C\n                V=B\n            return L,V\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A_lateral = (2*(r/h)**2) - (4/3) * (r/h) * (1-((r/h)**2))\n    return A_lateral\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area=math.pi*r*h*0.5\n    print(\"The lateral area of the cylinder is %s\" % lateral_area)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (4/3)*r*np.arcsin(2/3)*np.pi*(h**3)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # find inner circle of r (cx)**2 + h**2\n    # get the equation of the inner circle\n    # write the equation to a file\n    # return the value of the function\n    return((cx**2) + (h**2))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # the ratio of 2 pi and the radius\n    rpi = 2*pi\n    # create variables for the radius and height\n    r = r\n    h = h\n    # set up the variables for the cylinder\n    rho = 1\n    A = 1\n    # calculate the area\n    area = pi*r*h\n    # return the area\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    theta = 1.0 * np.arctan(r/h)\n    radius = r/np.cos(theta)\n    X = np.cos(theta)*radius\n    Y = np.sin(theta)*radius\n    Z = h*np.cos(theta)\n    return(X,Y,Z)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14159\n    r_c=r/2.0\n    h_c=h/2.0\n    area_cylinder=(4/3)*pi*(r_c**3)*(1-np.cos(h_c))\n    return area_cylinder\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 4*np.pi*h*r\n    return lateral_surface\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # YOUR CODE HERE\n    return 4*r*np.cos(np.pi/4)*h\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    s = l/3\n    v = 1\n    while s >= 1:\n        v *= s\n        s -= 1\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l*l*l*l*l\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(l)\n    print(\"volume of cube is :\", (l**3))\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = (l**3)*(3/4)\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def vol(l):\n        # Returns the volume of a cube of side l\n        if l == 0:\n            return 0\n        elif l == 1:\n            return 1\n        else:\n            return l ** 3\n    \n    return vol(l)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # your code here\n    \n    return 3*l**3"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = 0\n    for i in range(0,l):\n        for j in range(0,l):\n            for k in range(0,l):\n                vol = vol + math.pow(i + j + k,3)\n    return vol\n    \ndef volume_cube_2(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = 0\n    for i in range(0,l):\n        for j in range(0,l):\n            for k in range(0,l):\n                vol = vol + math.pow(i + j + k,3)\n    return vol\n    \ndef volume_cube_3(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = 0\n    for i in range(0,l):\n        for j in range(0,l):\n            for k in range(0,l):\n                vol = vol + math.pow(i + j + k,3)\n    return vol\n    \ndef volume_cube_4(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = 0\n    for i in range(0,l):\n        for j in range(0,l):\n            for k in range(0,l):\n                vol = vol + math.pow(i + j + k,3)\n    return vol\n    \ndef volume_cube_5(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = 0\n    for i in range(0,l):\n        for j in range(0,l):\n            for k in range(0,l):\n                vol = vol + math.pow(i + j + k,3)\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(\"Cube volume: \")\n    volume = 0\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                volume += l * ((i + 1)**2 + (j + 1)**2 + (k + 1)**2)\n    print(volume)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = 0\n    for x in range(0,4):\n        for y in range(0,4):\n            for z in range(0,4):\n                if l[x][y][z]==1:\n                    volume += 1\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = pow(4, 3)\n    l_sq = pow(l, 2)\n    l_3 = pow(l_sq, 3)\n    l_4 = pow(l_3, 4)\n    l_1 = pow(l_sq, 1)\n    l_2 = pow(l_sq, 2)\n    l_5 = pow(l_sq, 5)\n    l_10 = pow(l_sq, 10)\n    l_100 = pow(l_sq, 100)\n    l_1000 = pow(l_sq, 1000)\n    l_10000 = pow(l_sq, 10000)\n    l_1_1 = pow(l_1, 1)\n    l_2_1 = pow(l_2, 1)\n    l_5_1 = pow(l_5, 1)\n    l_10_1 = pow(l_10, 1)\n    l_100_1 = pow(l_100, 1)\n    l_1000_1 = pow(l_1000, 1)\n    l_10000_1 = pow(l_10000, 1)\n    l_1_2 = pow(l_1_1, 2)\n    l_2_2 = pow(l_2_1, 2)\n    l_5_2 = pow(l_5_1, 2)\n    l_10_2 = pow(l_10_1, 2)\n    l_100_2 = pow(l_100_1, 2)\n    l_1000_2 = pow(l_1000_1, 2)\n    l_10000_2 = pow(l_10000_1, 2)\n    l_1_3 = pow(l_1_2, 3)\n    l_2_3 = pow(l_2_2, 3)\n    l_5_3 = pow(l_5_2, 3)\n    l_10_3 = pow(l_10_2, 3)\n    l_100_3 = pow(l_100_2, 3)\n    l_1000_3 = pow(l_1000_2, 3)\n    l_10000_3 = pow(l_10000_2, 3)\n    l_1_4 = pow(l_1_3, 4)\n    l_2_4 = pow(l_2_3, 4)\n    l_5_4 = pow(l_5_3, 4)\n    l_10_4 = pow(l_10_3, 4)\n    l_100_4 = pow(l_100_3, 4)\n    l_1000_4 = pow(l_1000_3, 4)\n    l_10000_4 = pow(l_10000_3, 4)\n    l_1_5 = pow(l_1_4, 5)\n    l_2_5 = pow(l_2_4, 5)\n    l_5_5 = pow(l_5_4, 5)\n    l_10_5 = pow(l_10_4, 5)\n    l_100_5 = pow(l_100_4, 5)\n    l_1000_5 = pow(l_1000_4, 5)\n    l_10000_5 = pow(l_10000_4, 5)\n    l_1_6 = pow(l_1_5, 6)\n    l_2_6 = pow(l_2_5, 6)\n    l_5_6 = pow(l_5_5, 6)\n    l_10_6 = pow(l_10_5, 6)\n    l_100_6 = pow(l_100_5, 6)\n    l_1000_6 = pow(l_1000_5, 6)\n    l_10000_6 = pow(l_10000_5, 6)\n    l_1_7 = pow(l_1_6, 7)\n    l_2_7 = pow(l_2_6, 7)\n    l_5_7 = pow(l_5_6, 7)\n    l_10_7 = pow(l_10_6, 7)\n    l_100_7 = pow(l_100_6, 7)\n    l_1000_7 = pow(l_1000_6, 7)\n    l_10000_7 = pow(l_10000_6, 7)\n    l_1_8 = pow(l_1_7, 8)\n    l_2_8 = pow(l_2_7, 8)\n    l_5_8 = pow(l_5_7, 8)\n    l_10_8 = pow(l_10_7, 8)\n    l_100_8 = pow(l_100_7, 8)\n    l_1000_8 = pow(l_1000_7, 8)\n    l_10000_8 = pow(l_10000_7, 8)\n    l_1_9 = pow(l_1_8, 9)\n    l_2_9 = pow(l_2_8, 9)\n    l_5_9 = pow(l_5_8, 9)\n    l_10_9 = pow(l_10_8, 9)\n    l_100_9 = pow(l_100_8, 9)\n    l_1000_9 = pow(l_1000_8, 9)\n    l_10000_9 = pow(l_10000_8, 9)\n    l_1_10 = pow(l_1_9, 10)\n    l_2_10 = pow(l_2_9, 10)\n    l_5_10 = pow(l_5_9, 10)\n    l_10_10 = pow(l_10_8, 10)\n    l_100_10 = pow(l_100_8, 10)\n    l_1000_10 = pow(l_1000_8, 10)\n    l_10000_10 = pow(l_10000_8, 10)\n    l_1_11 = pow(l_1_10, 11)\n    l_2_11 = pow(l_2_10, 11)\n    l_5_11 = pow(l_5_10, 11)\n    l_10_11 = pow(l_10_8, 11)\n    l_100_11 = pow(l_100_8, 11)\n    l_1000_11 = pow(l_1000_8, 11)\n    l_10000_11 = pow(l_10000_8, 11)\n    l_1_12 = pow(l_1_10, 12)\n    l_2_12 = pow(l_2_10, 12)\n    l_5_12 = pow(l_5_10, 12)\n    l_10_12 = pow(l_10_8, 12)\n    l_100_12 = pow(l_100_8, 12)\n    l_1000_12 = pow(l_1000_8, 12)\n    l_10000_12 = pow(l_10000_8, 12)\n    l_1_13 = pow(l_1_10, 13)\n    l_2_13 = pow(l_2_10, 13)\n    l_5_13 = pow(l_5_10, 13)\n    l_10_13 = pow(l_10_8, 13)\n    l_100_13 = pow(l_100_8, 13)\n    l_1000_13 = pow(l_1000_8, 13)\n    l_10000_13 = pow(l_10000_8, 13)\n    l_1_14 = pow(l_1_10, 14)\n    l_2_14 = pow(l_2_10, 14)\n    l_5_14 = pow(l_5_10, 14)\n    l_10_14 = pow(l_10_8, 14)\n    l_100_14 = pow(l_100_8, 14)\n    l_1000_14 = pow(l_1000_8, 14)\n    l_10000_14 = pow(l_10000_8, 14)\n    l_1_15 = pow(l_1_10, 15)\n    l_2_15 = pow(l_2_10, 15)\n    l_5_15 = pow(l_5_10, 15)\n    l_10_15 = pow(l_10_8, 15)\n    l_100_15 = pow(l_100_8, 15)\n    l_1000_15 = pow(l_1000_8, 15)\n    l_10000_15 = pow"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n <= 0:\n        raise ValueError(\"Number should be positive\")\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    new_number = bin(n)[2:]\n    for i in range(len(new_number)): \n        if new_number[i] == '1': \n            new_number = new_number[:i] + '0' + new_number[i+1:]\n    return int(new_number, 2) \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return bin(n | (n >> 1))[2:]\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        n &= n - 1\n        if n & 1:\n            print(1, end=' ')\n        else:\n            print(0, end=' ')\n    print()\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_list = []\n    for i in range(n+1):\n        if (i%2):\n            n_list.append(i)\n    return n_list\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    tmp = n \n    x = 0 \n    for i in range(n):\n        if (tmp & 2) == 0:\n            tmp = tmp << 1 \n            x = x + 1 \n        elif (tmp & 2) == 1:\n            tmp = tmp << 1 \n            x = x + 1 \n        else:\n            x = x + 1 \n    return tmp, x\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bits = bin(n)[2:] #binary of the given number\n    count = 0 #counts the number of each bit\n    for i in range(len(bits)): #for each bit\n        if int(bits[i]) == 1: #if the bit is 1\n            count += 1 #add 1 to count\n    if count == 0: #if count is 0\n        return 1 #return the 1 to the function\n    else: #if count is not 0\n        return 0 #return 0\n    \ndef even_bit_set_number_v2(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n>0: #goes through and checks if n is even\n        if n%2 == 0: #if n is even\n            count += 1 #add 1 to count\n            n //= 2 #divide by 2 to get the next bit\n        else:\n            count -= 1 #if n is odd\n    return count #return the count to the function\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n&1\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n: \n        if n & 1 == 0: \n            print(f\"{n} is even bit set\")\n        else: \n            print(f\"{n} is odd bit set\") \n        n = n >> 1 \n        \n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary = {}\n    for tuple in test_list:\n        if tuple[0] in dictionary:\n            dictionary[tuple[0]] +=1\n        else:\n            dictionary[tuple[0]] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # TODO: complete this function\n    return {}\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_count = {}\n    for x in test_list:\n        if x[0] in dict_count:\n            dict_count[x[0]] += 1\n        else:\n            dict_count[x[0]] = 1\n    return dict_count\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    freq = Counter(test_list)\n    print(freq)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    d = {}\n    for entry in test_list:\n        d[entry[0]] = entry[1]\n        \n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(tuple(test_list)).most_common())\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    new_dict = {}\n    for tuple in test_list:\n        new_dict[tuple[0]] = new_dict.get(tuple[0], 0) + 1\n    return new_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # TODO: Replace this with a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list. \n    # Ex: check_occurences([(1, 1), (3, 2), (5, 1), (5, 2), (5, 3), (5, 4)]) --> {1: 2, 2: 1, 3: 1, 4: 1}\n    # return {}\n    return Counter(test_list)\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    \n    # if the string is empty\n    if len(str) == 0: \n        return count\n    \n    # if the string contains only one character\n    if len(str) == 1: \n        return 1\n    \n    # split the string \n    for i in range(len(str) - 1): \n        if (str[i:i + 2] == str[i + 1:i + 3]): \n            count += 1\n        \n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # count the number of substrings of a given string\n    count = 0\n    # initialize a string array to store all the substrings\n    subStrings = []\n    # initialize a counter variable to store the index of each non-empty substring\n    for i in range(0, len(str)):\n        if(str[i] == str[i]):\n            count = count + 1\n        else:\n            # store all the substrings\n            subStrings.append(str[i:i+count])\n            # reset the counter\n            count = 0\n    # return the number of substrings\n    return len(subStrings)\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code goes here\n    count=0\n    for i in range(len(str)-1):\n        if str[i]==str[i+1]:\n            count+=1\n    return count\nstr=\"ababb\"\nprint(number_of_substrings(str))"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num_substr = 0\n    \n    i = 0\n    while i < len(str):\n        if str[i] == str[i+1]:\n            num_substr += 1\n            i += 2\n        else:\n            i += 1\n    \n    return num_substr\n    \ndef get_index_of_first_word(str): \n    '''\n    Write a python function to get the index of the first word in a given string.\n    '''\n    i = 0\n    while i < len(str):\n        if str[i]!='':\n            break\n        i += 1\n    \n    return i\n    \ndef unique_string(str): \n    '''\n    Write a python function to get the unique characters of a given string.\n    '''\n    unique_string = set(str)\n    \n    return len(unique_string)\n    \ndef counter(str): \n    '''\n    Write a python function to count the occurrences of each letter in a given string.\n    '''\n    letters = {'a':0, 'b':0, 'c':0, 'd':0, 'e':0, 'f':0, 'g':0, 'h':0, 'i':0, 'j':0, 'k':0, 'l':0,'m':0, 'n':0, 'o':0, 'p':0, 'q':0, 'r':0,'s':0, 't':0, 'u':0, 'v':0, 'w':0, 'x':0, 'y':0, 'z':0}\n    \n    for char in str:\n        if char not in letters:\n            letters[char] = 0\n        else:\n            letters[char] += 1\n    \n    return letters\n    \ndef count_substring(str, sub_str): \n    '''\n    Write a python function to count the occurrence of the substring in a given string.\n    '''\n    count_dict = {}\n    \n    for i in range(len(str)):\n        if str[i] == sub_str:\n            count_dict[sub_str] = count_dict.get(sub_str, 0) + 1\n    \n    return count_dict\n    \ndef find_first_and_last_occurrence(str): \n    '''\n    Write a python function to find the first and last occurrence of a given string.\n    '''\n    start_index = get_index_of_first_word(str)\n    end_index = len(str) - 1\n    \n    if start_index == end_index:\n        return (start_index, end_index)\n    \n    else:\n        index = 0\n        while index < start_index:\n            if str[index] == str[end_index]:\n                end_index -= 1\n                index += 1\n            else:\n                index += 1\n                \n        return (start_index, end_index)\n    \ndef replace_letters(str, old_letter, new_letter): \n    '''\n    Write a python function to replace the occurrences of a letter in a given string.\n    '''\n    new_str = ''\n    \n    for i in range(len(str)):\n        if str[i] == old_letter:\n            new_str += new_letter\n        else:\n            new_str += str[i]\n    \n    return new_str\n    \ndef count_unique_substrings(str): \n    '''\n    Write a python function to count the occurrences of all the unique characters of a given string.\n    '''\n    unique_count = {}\n    \n    for i in range(len(str)):\n        sub_str = str[i:i+len(str)-1]\n        if sub_str not in unique_count:\n            unique_count[sub_str] = 0\n        unique_count[sub_str] += 1\n    \n    return unique_count\n    \ndef count_count_substrings(str): \n    '''\n    Write a python function to count the occurrences of all the substrings in a given string.\n    '''\n    count_dict = {}\n    \n    for i in range(len(str)):\n        count_dict[str[i]] = count_dict.get(str[i], 0) + 1\n    \n    return count_dict\n    \ndef convert_string_to_int_list(str): \n    '''\n    Write a python function to convert the string to an integer list.\n    '''\n    str_int = []\n    \n    for char in str:\n        str_int.append(ord(char))\n    \n    return str_int\n    \ndef reverse_string(str): \n    '''\n    Write a python function to reverse a given string.\n    '''\n    reverse_str = ''\n    \n    for char in str:\n        reverse_str += char\n    \n    return reverse_str\n    \ndef encrypt_message(message, shift_amount): \n    '''\n    Write a python function to encrypt a given message.\n    '''\n    message = message.lower()\n    \n    message_encrypt = []\n    \n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                letter = chr((ord(char) + shift_amount - 65) % 26 + 65)\n            else:\n                letter = chr((ord(char) + shift_amount - 97) % 26 + 97)\n            message_encrypt.append(letter)\n        else:\n            message_encrypt.append(char)\n    \n    message_encrypt = ''.join(message_encrypt)\n    \n    return message_encrypt\n    \ndef decrypt_message(message, shift_amount): \n    '''\n    Write a python function to decrypt a given message.\n    '''\n    message = message.lower()\n    \n    message_decrypt = []\n    \n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                letter = chr((ord(char) - shift_amount - 65) % 26 + 65)\n            else:\n                letter = chr((ord(char) - shift_amount - 97) % 26 + 97)\n            message_decrypt.append(letter)\n        else:\n            message_decrypt.append(char)\n    \n    message_decrypt = ''.join(message_decrypt)\n    \n    return message_decrypt\n    \ndef encrypt_message_to_file(message, file_name): \n    '''\n    Write a python function to encrypt a given message.\n    '''\n    f = open(file_name, 'w')\n    \n    message = message.lower()\n    \n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                letter = chr((ord(char) + shift_amount - 65) % 26 + 65)\n            else:\n                letter = chr((ord(char) + shift_amount - 97) % 26 + 97)\n            f.write(letter)\n        else:\n            f.write(char)\n    f.close()\n    \ndef decrypt_message_to_file(message, file_name): \n    '''\n    Write a python function to decrypt a given message.\n    '''\n    f = open(file_name, 'w')\n    \n    message = message.lower()\n    \n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                letter = chr((ord(char) - shift_amount - 65) % 26 + 65)\n            else:\n                letter = chr((ord(char) - shift_amount - 97) % 26 + 97)\n            f.write(letter)\n        else:\n            f.write(char)\n    f.close()\n    \ndef decrypt_message_to_file_2(message, file_name): \n    '''\n    Write a python function to decrypt a given message.\n    '''\n    f = open(file_name, 'w')\n    \n    message = message.lower()\n    \n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                letter = chr((ord(char) - shift_amount - 65) % 26 + 65)\n            else:\n                letter = chr((ord(char) - shift_amount - 97) % 26 + 97)\n            f.write(letter)\n        else:\n            "
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num_substrings = 0\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    str_length = len(str)\n    if str_length > 1:\n        for i in range(1,str_length):\n            if str[i] == str[i-1] and str[i]!= str[i-1]:\n                count += 1\n        return count\n    else:\n        return 0\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def count(string):\n        l = []\n        i = 0\n        j = 0\n        while i < len(string) - 1:\n            if string[i] == string[j]:\n                i = i + 1\n            else:\n                l.append(i)\n                j = i\n        return len(l)\n    l = count(str)\n    return l\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    s = str.lower().replace(',',' ').split()\n    return len(list(filter(lambda x: len(x) > 0, s)))\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(1, len(str) + 1):\n        if str[i - 1] == str[i]:\n            counter += 1\n        else:\n            counter = 0\n        if counter > 1:\n            break\n    return counter\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    m = min(m,n)\n    n = max(n,m)\n    numbers = []\n    for i in range(1,m+1):\n        numbers.append(i)\n    for j in range(1,n+1):\n        numbers.append(numbers[j-1]*2)\n    return numbers\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences = 0\n    for i in range(1,n+1):\n        for j in range(0,i):\n            if (m*i+j) % 2 == 0:\n                sequences += 1\n    return sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Your code here\n    # Read in the array\n    numbers = [int(num) for num in open(\"input.txt\", 'r').read().split()]\n    numbers = sorted(numbers)\n    # Write a function that returns the total number of sequences possible from m to n\n    # this code only has to be executed for integers that are less than m and greater than or equal to n\n    # and are greater than or equal to 0\n    return math.ceil(math.ceil(numbers[-1]/2)*math.ceil(numbers[-2]/2))\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # convert input into positive integers\n    m = int(m)\n    n = int(n)\n    \n    # determine sequence length\n    sequence_length = n-1\n    \n    # initialize sequence counters\n    possible_sequences = []\n    \n    # loop through sequence length\n    for x in range(0,sequence_length+1):\n        # initialize possible sequence count for current sequence length\n        possible_sequences.append(0)\n        \n    # loop through the integers\n    for x in range(0,m):\n        # initialize count of sequences\n        count = 0\n        \n        # loop through sequence length\n        for y in range(0,sequence_length+1):\n            \n            # increase counter if sequence is found\n            if(x+y*2 > n):\n                count+=1\n            # if sequence is found, increment counter by 1\n            elif(x+y*2 < m):\n                count+=1\n            # if sequence is not found, reset counter to 0\n            else:\n                count=0\n                break\n        \n        # add sequence count to corresponding array\n        possible_sequences[count]+=1\n        \n    # return array of possible sequence counts\n    return possible_sequences"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Your code here\n    \n    if m < 0 or n < 0:\n        return 0\n    \n    elif m == 0 or n == 0:\n        return 1\n    \n    elif m == 0 or n == 1:\n        return 2\n    \n    elif m == 1 or n == 1:\n        return 2+2*(m-1)\n    \n    else:\n        total = 2\n        \n        for i in range(1,n+1):\n            total = total + (2*i)\n            \n        return total\n    \n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return m*n*(n+1)/2\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    totals = 0\n    if m < 0 or n <= 0:\n        return 0\n    for i in range(0,m):\n        for j in range(0,n):\n            if j == 0:\n                totals += i\n            else:\n                totals += min(j,i)\n    return totals\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    number_of_sequences = 0\n    total = 0\n    \n    for i in range(m,n): \n        if(i > 0):\n            if(i % 2 == 1):\n                total += (i/2)\n        else:\n            total += i\n        \n        if(total > i):\n            number_of_sequences += 1\n            total = 0\n        \n    return number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(m*(m-1)/2) \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for num in list1:\n        new_list.append(num)\n    list1[0] = new_list\n    \n    for num in list2:\n        new_list.append(num)\n    list2[0] = new_list\n    return list1,list2\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #replace list element\n    if len(list1)!= len(list2):\n        print(\"Error! Lengths of the lists are not equal!\")\n        return False\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        return list1[0] + replace_list(list1[1:],list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    temp = list1[len(list1)-1]\n    list1[len(list1)-1] = list2[len(list2)-1]\n    list2[len(list2)-1] = temp\n    return list1,list2\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #Eliminate the last element of the first list\n    list1.pop()\n    #Eliminate the last element of the second list\n    list2.pop()\n    #Return the two lists in alternating order\n    return(list1,list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print('Original list: ', list1)\n    print('Replaced list: ', list2)\n    list1.remove(list2[-1])\n    list1.append(list2[0])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return [list1[-1]] + list2[:-1]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(\"***************************\")\n    print(\"Replace list\")\n    print(\"***************************\")\n    print(\"list1:\",list1)\n    print(\"list2:\",list2)\n    print(\"*********************************\")\n    print(\"Replaced values:\",list1[-1],\"=>\",list2[-1])\n    print(\"*********************************\")\n    list1.remove(list2[-1])\n    return list1\n    "
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list(list1),list(list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[2] = list2[2]\n    \n    # The code below is for testing purposes only\n    # list1 = ['abc',1,2,3,4,5]\n    # list2 = ['abc',2,3,4,5,6]\n    # list1[2] = list2[2]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-2] = list2[-2]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-1] = list2[-1]\n    \n    # The code below is for testing purposes only\n    # list1 = ['abc',1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-2] = list2[-2]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-1] = list2[-1]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-3] = list2[-3]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-4] = list2[-4]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-5] = list2[-5]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-6] = list2[-6]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-7] = list2[-7]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-8] = list2[-8]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-9] = list2[-9]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-10] = list2[-10]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-11] = list2[-11]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-12] = list2[-12]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-13] = list2[-13]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-14] = list2[-14]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-15] = list2[-15]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-16] = list2[-16]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-17] = list2[-17]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-18] = list2[-18]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-19] = list2[-19]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-20] = list2[-20]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-21] = list2[-21]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-22] = list2[-22]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-23] = list2[-23]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-24] = list2[-24]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-25] = list2[-25]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-26] = list2[-26]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n    # list1[-27] = list2[-27]\n    \n    # The code below is for testing purposes only\n    # list1 = [1,2,3,4,5]\n    # list2 = [6,7,8,9,10]\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i =='':\n            count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for i in str1:\n        charac += 1\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c=0\n    for i in str1:\n        c+=1\n    return c\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_list=[]\n    for i in str1:\n        if i not in char_list:\n            char_list.append(i)\n    return len(char_list)\n        \nprint(count_charac('dog cat'))\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_char = 0\n    for char in str1:\n        if char.isalnum():\n            total_char += 1\n    return total_char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for char in str1:\n        charac += 1\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    S = 0\n    for i in range(1, int(math.sqrt(N)) + 1):\n        if N % i == 0:\n            S = (N // i) + 1\n            break\n    return S\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.sqrt(N)\n    i = int(x)\n    while i**2 < N:\n        i += 1\n    return i**2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # the index of the last number which is not a perfect square\n    index = N\n    \n    # Initialize the value of the sum of squares\n    sum_squares = 0\n    \n    # While the index is smaller than or equal to N,\n    # calculate the sum of squares of the squares less than and equal to\n    # or larger than the current index.\n    while index <= N:\n        sum_squares += pow(index, 2)\n        \n        if index % 2 == 0:\n            if sum_squares > (sum_squares + index):\n                sum_squares += index\n        \n        index += 1\n    \n    # return the next perfect square greater than a given number\n    return sum_squares\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N < 0): \n        return -1\n    if (N == 0): \n        return 1\n    if (N == 1): \n        return 2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # create an array of perfect squares (of size N)\n    arr = [x for x in range(1,N+1)]\n    # find the perfect square that's greater than the given number\n    for i in range(len(arr)):\n        if i!= len(arr)-1:\n            if arr[i]**2 + arr[i+1]**2 > N:\n                # if it is, append it to the list\n                arr[i+1] = arr[i]**2 + arr[i+1]**2\n    # return the next perfect square\n    return arr[-1]"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # your code here\n    squares = []\n    for i in range(N+1):\n        if(i**2 < N):\n            squares.append(i**2)\n    if(len(squares)>0):\n        squares.sort()\n        for i in range(len(squares)):\n            if((squares[i]+squares[i+1])**2 == N):\n                return squares[i+1]\n    else:\n        return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_mod(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_1(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = N + 1\n    N2 = N + 1\n    N3 = N + 1\n    N4 = N + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_2(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_3(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_4(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_5(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_6(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_7(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_8(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_9(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_10(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n    else:\n        return 0\n    \ndef next_Perfect_Square_11(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N1 = math.floor(math.sqrt(N)) + 1\n    N2 = math.floor(math.sqrt(N))\n    N3 = math.floor(math.sqrt(N)) + 1\n    N4 = math.floor(math.sqrt(N)) + 1\n    \n    if(N >= N1 * N1 and N >= N2 * N2 and N >= N3 * N3 and N >= N4 * N4):\n        return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    fSq = 0\n    for i in range(1, int(math.sqrt(N))+1):\n        if (N % i == 0) and (N / i == i):\n            fSq = i\n    if fSq == 0:\n        return fSq + 1\n    else:\n        return fSq\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==0: \n        return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def next_perfect_square(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return n\n        else:\n            return next_perfect_square(n - 1) * n\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Time complexity is O(n^2)\n    # Space complexity is O(1)\n    \n    if len(arr) == 0: \n        return 0\n    \n    if len(arr) == 1: \n        return arr[0]\n    \n    # if the array is already sorted, we will return the maximum sub array\n    # which will help us to find the index of the first element of the array to use as the initial guess\n    if arr[0] < arr[1]: \n        return max_sum(arr[1:])\n    \n    else: \n        return max_sum(arr[:-1]) + arr[-1]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0: \n        return 0 \n    if len(arr) == 1: \n        return arr[0]\n    else: \n        return max(max_sum(arr[1:]), arr[0] + arr[1])\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    ans = 0\n    for i in range(len(arr) - 1): \n        if arr[i] < arr[i + 1]:\n            ans += arr[i + 1] - arr[i]\n            \n    return ans \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    current_max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < current_max:\n            max_sum = current_max + arr[i]\n        else:\n            max_sum = max(max_sum, arr[i])\n            current_max = arr[i]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Let's assume that the array has only one bitonic subsequence.\n    # The number of bitonic subsequences is the count of the number of ones and zeros in the array.\n    if len(arr) <= 1:\n        return arr[0]\n    # Let's assume the array is already sorted.\n    if arr[0] < arr[-1]:\n        # Return the sum of the two subarrays.\n        return arr[0] + max_sum(arr[1:])\n    return arr[-1]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # We use a counter to check if we need to repeat the same calculation (first increasing and then decreasing)\n    count = 1\n    for i in range(len(arr)-1): \n        # We are checking for the first decreasing bit \n        if arr[i] > arr[i+1]: \n            count += 1\n            # We are checking if the second decreasing bit is increasing \n        if arr[i] < arr[i+1]: \n            count += 1\n            # We are checking for the first increasing bit\n        if count == 1: \n            return arr[i]\n    # We are returning the maximum value since we don't have the sequence \n    return arr[-1]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 0\n    max_ending_here_add = 1\n    \n    for x in range(1, len(arr)): \n        if arr[x] < arr[x - 1]: \n            max_ending_here = max(max_ending_here_add, arr[x - 1]) \n            max_so_far += max_ending_here \n        else: \n            max_ending_here_add += 1\n            max_ending_here = 0\n        if max_ending_here_add > arr[x]: \n            max_ending_here_add = 0\n    return max_so_far \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sub_sum = [0] * len(arr) \n    \n    # Initialize the sub_sum with the first element as 0.\n    sub_sum[0] = arr[0] \n    \n    # Find the max_sum for each element in arr \n    for i in range(1, len(arr)): \n        if arr[i] <= arr[i-1]: \n            sub_sum[i] = sub_sum[i-1] + arr[i] \n        else: \n            sub_sum[i] = max(arr[i-1], sub_sum[i-2]) \n    \n    return sub_sum[-1] \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = 0\n    for i in range(n-1):\n        max_sum += arr[i] + arr[i+1]\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    babylonian_sqrt = []\n    for i in range(number):\n        babylonian_sqrt.append(babylonian(i))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if type(number)!= int:\n        raise TypeError('Please enter an integer.')\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n    def square_root(x):\n        return math.sqrt(x)\n    sqrt_array = []\n    for i in range(1,number+1):\n        if square_root(i) == int(square_root(i)):\n            sqrt_array.append(i)\n    return sqrt_array\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = 0\n    # If the number is prime, return the square root\n    if number >= 1:\n        if number == 2:\n            return 0\n        # If the number is not prime, check if it is abundant, then return a value\n        if number < 2:\n            return None\n        # Starting from the square root of the number, check if the number is either abundant, or has less than two factors. If so, return None.\n        for i in range(2, int(math.sqrt(number)) + 1):\n            if number % i == 0:\n                return None\n        # If the number is not prime, compute the square root.\n        for i in range(int(math.sqrt(number)) + 1, 2):\n            if number % i == 0:\n                square_root += 1\n        # If the square root is not greater than the number, then return the value.\n        if square_root > number:\n            return None\n        # If the number is greater than or equal to the square root, return the value.\n        return square_root\n    # Otherwise, return -1.\n    else:\n        return -1\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    if(number<0):\n        return -number\n    \n    x = 0.0\n    while(x**2 < number):\n        x += 1\n        \n    if(x**2 == number):\n        print(\"{} is a babylonian square root\".format(number))\n    else:\n        print(\"{} is not a babylonian square root\".format(number))\n    \n    return x\n    \n    \ndef power(base, exp, max_power = 100):\n    '''\n    Write a function for computing square roots using the power method.\n    '''\n    \n    x = 1\n    power = 0\n    \n    while(power <= max_power):\n        x = base*x\n        power = exp\n        \n        if(power <= max_power):\n            return x\n        \n    print(\"{} is not a valid power\".format(exp))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Make sure the input argument is a valid integer.\n    while(not isinstance(number, int)):\n        number = int(input(\"\\n\\nEnter a valid integer: \"))\n    \n    # Run the Babylonian Method for the given number.\n    return babylonian(number)\n    \n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = int(number ** 0.5)\n    if root == 1:\n        return 1\n    else:\n        return babylonian_squareroot(root)\n    \nprint(babylonian_squareroot(12))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # NOTE:  Don't use sqrt().\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        number = -number\n    return math.sqrt(number)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 1\n    while root**2 <= number:\n        root += 1\n    return root\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def longestPalSub(s):\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1 if s[0] == s[-1] else 0\n        left, right = 0, 1\n        res = 1\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                right += 1\n            else:\n                left = max(left, right)\n                res = max(res, right - left + 1)\n                right = i\n        left = 1\n        res = max(res, right - left + 1)\n        return res\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) == 1: \n        return 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_length = 0\n    sub_string = ''\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                if len(sub_string) > max_length:\n                    max_length = len(sub_string)\n                sub_string = ''\n            else:\n                sub_string += str[i]\n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # initiliaze the string array\n    str = str.lower()\n    L = [0]*256\n    # initilize the palindrome array\n    arr = [0]*256\n    for c in str:\n        L[ord(c) - ord('a')] += 1\n        if L[ord(c) - ord('a')] > arr[ord(c) - ord('a')]:\n            arr[ord(c) - ord('a')] = L[ord(c) - ord('a')]\n    # create the final array\n    res = 0\n    for i in range(256):\n        if arr[i] > 1:\n            res += 1\n    return res\n    \nstr = 'abcd'\nprint(lps(str)"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if len(str) == 0:\n        return 0\n    \n    if len(str) == 1:\n        return 1\n    \n    dp = [1] * len(str)\n    \n    for i in range(2, len(str)):\n        for j in range(len(str) - i):\n            if str[j:j+i] == str[j+i:j+i+1]:\n                dp[j] = dp[j+1] + 2\n                \n    return max(dp)\n            \nprint(lps('a')) # should return 5\nprint(lps('abc')) # should return 6\nprint(lps('abcddd')) # should return 3\nprint(lps('abcdefgh')) # should return 2\nprint(lps('x')) # should return 1\nprint(lps('y')) # should return 1"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def isPal(str): \n        '''\n        This function checks if the string is a palindrome.\n        '''\n        return str == str[::-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [0] * n\n    max_len = 0\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i] = max(dp[i], dp[j]+2)\n            if dp[i] > max_len:\n                max_len = dp[i]\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[0 for x in range(len(str) + 1)] for y in range(len(str) + 1)]\n    max_len = 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # if the string is empty or not a string\n    if n < 2:\n        return 0\n    if n == 1:\n        return 1 if str[0] == str[1] else 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 0: return 0\n    elif len(str) == 1: return 1\n    else:\n        f = [[0 for j in range(len(str))] for i in range(len(str))]\n        for i in range(1,len(str)):\n            f[i][i-1] = 1\n            for j in range(i-1, -1, -1):\n                if str[i-1] == str[j+1]:\n                    f[i][j+1] = f[i-1][j+1]+2\n                else:\n                    f[i][j+1] = f[i-1][j+1]\n        return max(f[-1])\n        \n        \ndef is_palindromic(s):\n    '''\n    Write a function that returns whether or not a string has all lowercase English letters.\n    '''\n    if len(s) == 0: return True\n    else:\n        for c in s:\n            if c.islower(): return False\n        return True\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harm = 0\n    for i in range(1, n):\n        harm += i\n    return harm\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==0:\n        return 0\n    else:\n        return 1+harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    h_sum = 1\n    for i in range(1,n+1):\n        h_sum = h_sum + i * i\n    return h_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 1\n    for i in range(2, n + 1):\n        harmonic = harmonic + 1 / i\n    return harmonic\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n+harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # YOUR CODE HERE\n    if n==0:\n        return 0\n    else:\n        return n+harmonic_sum(n-1)\n    \nharmonic_sum(5)"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i / (i + 1)\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + n) / (1 + 2 * n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (((n**3) + 1) / (3*n))\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if (n == 0):\n        return 0\n    elif (n == 1):\n        return 1\n    else:\n        return n+harmonic_sum(n-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # 1. First get all the elements in array_nums1 and array_nums2\n    # 2. Sort the array_nums1 and the array_nums2 in ascending order\n    # 3. get the index of the elements that are in both arrays\n    # 4. find the first index of the intersection of two elements\n    \n    # Write your code here\n    if array_nums1==array_nums2:\n        return None\n    intersection = [0]\n    p1 = 0\n    p2 = 0\n    for i in range(len(array_nums1)):\n        while p2<len(array_nums2) and p1<len(array_nums1) and array_nums1[p1]<=array_nums2[p2]:\n            p1+=1\n        if p1<len(array_nums1):\n            intersection.append(array_nums1[p1])\n        else:\n            intersection.append(array_nums2[p2])\n        p2+=1\n    return intersection\n    # Write your code here\n    "
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    #write your code here\n    new_array=[]\n    result=[]\n    for i in range(0,len(array_nums1)):\n        for j in range(0,len(array_nums2)):\n            if array_nums1[i]==array_nums2[j]:\n                result.append(array_nums1[i])\n    for i in result:\n        new_array.append(i)\n    return new_array\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    # Create two sets of the common elements\n    common = set(array_nums1) & set(array_nums2)\n    \n    # Add up the elements in common and return the intersection as a new array\n    return common\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 == array_nums2:\n        return array_nums1\n    else:\n        # loop through both arrays and find the common elements\n        # e.g. [1,3,4,5,6] and [4,3,5] have the intersection because 4 is in the\n        # common element and 3 is in the intersection and 5 is not\n        intersection = []\n        for num in array_nums1:\n            if num in array_nums2:\n                intersection.append(num)\n        return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_of_ints = []\n    array_of_ints.extend(array_nums1)\n    array_of_ints.extend(array_nums2)\n    array_of_ints.sort()\n    res = []\n    \n    for i in range(len(array_of_ints)):\n        for j in range(i+1,len(array_of_ints)):\n            if array_of_ints[i] == array_of_ints[j]:\n                res.append(array_of_ints[j])\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # step 1: sort the array_1\n    array_1 = sorted(array_nums1)\n    \n    # step 2: sort the array_2\n    array_2 = sorted(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in array_nums1 if x in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Write your code here.\n    return array_nums1[0]\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    # length of array 1\n    length_of_array1 = len(array_nums1)\n    # length of array 2\n    length_of_array2 = len(array_nums2)\n    index = 0\n    while index < length_of_array1:\n        if array_nums1[index] == array_nums2[index]:\n            index = index + 1\n        else:\n            return array_nums1[index], array_nums2[index]\n    return None\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if len(tup)!= len(x): \n        return 0\n    else: \n        return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    result = 0\n    for i in tup:\n        if i == x:\n            result += 1\n    return result\n        "
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(tup)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurence = tup.count(x)\n    return occurence\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    ans = 0\n    for i in tup:\n        if i == x:\n            ans += 1\n    return ans \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # Get the length of the tuple\n    l = len(tup)\n    # Initialize count variable\n    c = 0\n    # Iterate over the tuple, \n    # for each element in the tuple,\n    # add the count to c\n    for i in tup: \n        if i == x: \n            c = c + 1 \n    return c\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(list(filter(lambda x: x==x, tup)))\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup.count(x)\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a=tup[0]\n    b=tup[1]\n    return str(tup[0]).count(x)\n    #return str(x).count(a)\ndef count_X1(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a=tup[0]\n    b=tup[1]\n    return str(tup[0]).count(x)\n    #return str(x).count(a)\ndef count_X2(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a=tup[0]\n    b=tup[1]\n    return str(tup[0]).count(x)\n    #return str(x).count(a)\ndef count_X3(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a=tup[0]\n    b=tup[1]\n    return str(tup[0]).count(x)\n    #return str(x).count(a)\ndef count_X4(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    a=tup[0]\n    b=tup[1]\n    return str(tup[0]).count(x)\n    #return str(x).count(a)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    s = 0\n    for i in tup: \n        if i == x: \n            s += 1\n    return s \n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # if len(list) == 0:\n    #     return list\n    # if element not in list:\n    #     list.append(element)\n    #     return list\n    # else:\n    #     new_element = element\n    #     for i in range(0,len(list)-1):\n    #         if list[i] > element:\n    #             list[i] = new_element\n    #             new_element = element\n    #     list.append(new_element)\n    # return list\n    def insert_element_at_index(list,element,index):\n        '''\n        Insert element at a specific index\n        '''\n        if element not in list:\n            list.insert(index,element)\n            return list\n        else:\n            list.insert(index,element)\n            index = index+1\n            return list\n    def remove_first_element(list):\n        '''\n        Remove first element from list\n        '''\n        list.pop(0)\n    def remove_last_element(list):\n        '''\n        Remove last element from list\n        '''\n        list.pop()\n    def remove_element(list,element):\n        '''\n        Remove element from a list\n        '''\n        list.remove(element)\n    def replace_element(list,element,new_element):\n        '''\n        Replace element in a list\n        '''\n        list.remove(element)\n        list.append(new_element)\n    def count_occurances(list,element):\n        '''\n        Count occurencies in a list\n        '''\n        return list.count(element)\n    def sum_of_even(list):\n        '''\n        Find sum of even numbers in a list\n        '''\n        new_list = list\n        list = []\n        for i in range(0,len(new_list)):\n            if new_list[i] % 2 == 0:\n                list.append(new_list[i])\n            \n        return sum(list)\n    def average_of_even(list):\n        '''\n        Find average of even numbers in a list\n        '''\n        total = 0\n        for i in list:\n            total += i\n        return total/len(list)\n    def print_list(list):\n        '''\n        Prints a list\n        '''\n        for i in range(0,len(list)):\n            print(list[i],end=\" \")\n        print()\n    def print_list_recursive(list):\n        '''\n        Prints a list\n        '''\n        if list:\n            print_list_recursive(list[1:])\n            print(list[0],end=\" \")\n    def list_to_string(list):\n        '''\n        Converts a list into a string\n        '''\n        if len(list) == 0:\n            return \"\"\n        else:\n            return str(list[0])+\" \" +list_to_string(list[1:])\n    def string_to_list(string):\n        '''\n        Converts a string into a list\n        '''\n        if string == \"\":\n            return []\n        else:\n            new_list = string.split(\" \")\n            return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for x in list:\n        new_list.append(x)\n    new_list.insert(element,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n    for j in range(len(new_list)):\n        for i in range(len(list)):\n            if new_list[j] == list[i]:\n                new_list[j] = element\n                break\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    copy = list[:]\n    copy.insert(0,element)\n    return copy\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for el in range(len(list)-1):\n        list[el+1] = list[el]\n    list[len(list)-1] = element\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for element in list:\n        new_list.append(element)\n    new_list.insert(0,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return [element]\n    if element in list[0]:\n        index = list[0].index(element)\n        new_list = [element] + list[0][index+1:]\n        return insert_element(new_list,element)\n    else:\n        new_list = list[0] + [element]\n        return insert_element(new_list,element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(0,len(list)-1):\n        if list[i] == element:\n            if len(list[i+1]) > 0:\n                new_list.append(list[i])\n                new_list.append(list[i+1])\n                new_list = new_list[::-1]\n                return new_list\n            else:\n                new_list.append(list[i])\n                new_list = new_list[::-1]\n                return new_list\n    if len(list) > 1:\n        new_list.append(list[-1])\n        new_list = new_list[::-1]\n        return new_list\n    else:\n        return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # TODO: Implement this function!\n    if len(list)<1:\n        return list\n    else:\n        new_list = list[:]\n        new_list.insert(0,element)\n        return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # your code goes here\n    if list == []:\n        return []\n    \n    if element in list[0]:\n        return [list[0]]\n    elif element > list[0][-1]:\n        return insert_element(list[0],element)\n    else:\n        for i in range(1,len(list)):\n            if element == list[i][-1]:\n                list[i].insert(0,element)\n                return list\n            elif element > list[i][-1]:\n                return insert_element(list[i],element)\n            else:\n                return insert_element(list[i],element)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = []\n    y = []\n    for i in range(len(numbers)):\n        x.append(cmath.polar(numbers[i]))\n    for i in range(len(x)):\n        y.append(cmath.polar(x[i]))\n    return y\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = str(numbers)\n    a = float(numbers[:len(numbers)-2])\n    b = float(numbers[len(numbers)-2:len(numbers)])\n    return cmath.polar(a,b)"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print('==> Python function convert(numbers):')\n    print('\\t(numbers) ='+ str(numbers))\n    '''\n    for complex number in numbers:\n        # Round to 5 places\n        print('\\t\\t>>> Round to 5 places')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Complex number:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Number of decimal places:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Number of real numbers:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Number of imaginary numbers:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Number of magnitude:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t  > Number'+ str(complex(numbers)))\n        print('\\t\\t>>> Real and imaginary:')\n        print('\\t\\t "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"Your input is\", numbers)\n    converted = cmath.polar(numbers)\n    print(\"Polar coordinates of\", numbers, \"are\", converted)\n    return converted\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #getting the number of iterations\n    num = len(numbers)\n    #storing the polar coordinates of the numbers\n    polar = []\n    #for i in range(0,num):\n    #    polar.append(cmath.polar(numbers[i]))\n    #print(polar)\n    #converting to polar coordinates\n    for i in range(0,num):\n        #print(numbers[i], \"i\", i)\n        #print(type(numbers[i]))\n        #print(type(polar[i]))\n        polar.append(cmath.polar(numbers[i]))\n        #print(numbers[i], \"i\", i)\n        #print(type(numbers[i]))\n        #print(type(polar[i]))\n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # get n-th degree of the number and convert it to complex number\n    # if number is already in radians it will not be converted\n    number = cmath.polar(numbers)\n    return number\n    "
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for num in numbers:\n        d = cmath.polar(num)\n        polar_list.append(d)\n    return polar_list\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # YOUR CODE HERE\n    x = numbers[0] + numbers[1]*1j\n    y = cmath.phase(x)\n    print(y)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    p = [float(i) for i in numbers.split()]\n    c = complex(p[0], p[1])\n    theta = cmath.phase(c)\n    polar_value = [i for i in numbers.split()]\n    i = 0\n    while i < len(polar_value):\n        polar_value[i] = float(polar_value[i]) * (180 / (2 * math.pi))\n        i = i + 1\n    return polar_value\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_array = []\n    for n in numbers:\n        if n.imag == 0 and n.real > 0:\n            polar_array.append(complex(n.real, n.imag))\n        elif n.imag == 0 and n.real < 0:\n            polar_array.append(complex(n.real, -n.imag))\n        elif n.imag > 0:\n            polar_array.append(complex(n.real, n.imag))\n        else:\n            polar_array.append(complex(-n.real, -n.imag))\n    return polar_array\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n    \n    \ndef sum_of_list(list1):\n    '''\n    Write a python function that returns the sum of all the elements in a given list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum\n    \n    \ndef max_of_list(list1):\n    '''\n    Write a python function that returns the largest element in a given list.\n    '''\n    max = list1[0]\n    for i in list1:\n        if i > max:\n            max = i\n    return max\n    \n    \ndef min_of_list(list1):\n    '''\n    Write a python function that returns the smallest element in a given list.\n    '''\n    min = list1[0]\n    for i in list1:\n        if i < min:\n            min = i\n    return min\n    \n    \ndef even_odd_list(list1):\n    '''\n    Write a python function that returns a list with even elements in a given list and odd elements in a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return [even, odd]\n    \n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function that returns the sum of all the squares in a given list.\n    '''\n    s = 0\n    for i in list1:\n        s += i * i\n    return s\n    \n    \ndef sum_of_pow_3(list1):\n    '''\n    Write a python function that returns the sum of all the square of each power in a given list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i ** 2\n    return sum\n    \n    \ndef sum_of_nums(list1):\n    '''\n    Write a python function that returns the sum of all the elements in a given list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum\n    \n    \ndef factorial(num):\n    '''\n    Write a python function that returns the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(num):\n        fact *= i + 1\n    return fact\n    \n    \ndef factorial_of_two(num):\n    '''\n    Write a python function that returns the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, num):\n        fact *= i\n    return fact\n    \n    \ndef average_of_two_nums(num1, num2):\n    '''\n    Write a python function that returns the average of two numbers.\n    '''\n    return (num1 + num2) / 2\n    \n    \ndef biggest_number(num1, num2):\n    '''\n    Write a python function that returns the biggest number of two numbers.\n    '''\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n    \n    \ndef smallest_number(num1, num2):\n    '''\n    Write a python function that returns the smallest number of two numbers.\n    '''\n    if num1 < num2:\n        return num1\n    else:\n        return num2\n    \n    \ndef smallest_number_of_two(num1, num2):\n    '''\n    Write a python function that returns the smallest number of two numbers.\n    '''\n    if num1 == num2:\n        return num1\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n    \n    \ndef main():\n    print(\"Program to determine the average of two numbers\")\n    print(\"(a) \")\n    print(\"(b) \")\n    print(\"(c) \")\n    print(\"(d) \")\n    print(\"(e) \")\n    print(\"(f) \")\n    print(\"(g) \")\n    print(\"(h) \")\n    print(\"(i) \")\n    print(\"(j) \")\n    print(\"(k) \")\n    print(\"(l) \")\n    print(\"(m) \")\n    print(\"(n) \")\n    print(\"(o) \")\n    print(\"(p) \")\n    print(\"(q) \")\n    print(\"(r) \")\n    print(\"(s) \")\n    print(\"(t) \")\n    print(\"(u) \")\n    print(\"(v) \")\n    print(\"(w) \")\n    print(\"(x) \")\n    print(\"(y) \")\n    print(\"(z) \")\n    print(\"--------------------------------------------\")\n    print(\"(a): Sum of elements of list\")\n    print(\"(b): Max of list\")\n    print(\"(c): Min of list\")\n    print(\"(d): Even-Odd list\")\n    print(\"(e): Sum of squares of list\")\n    print(\"(f): Sum of squares of numbers in a list\")\n    print(\"(g): Sum of square of numbers in a list\")\n    print(\"(h): Sum of squares of numbers in a list\")\n    print(\"(i): Sum of squares of elements in a list\")\n    print(\"(j): Sum of squares of elements in a list\")\n    print(\"(k): Sum of squares of elements in a list\")\n    print(\"(l): Sum of squares of elements in a list\")\n    print(\"(m): Sum of squares of elements in a list\")\n    print(\"(n): Sum of squares of elements in a list\")\n    print(\"(o): Sum of squares of elements in a list\")\n    print(\"(p): Sum of squares of elements in a list\")\n    print(\"(q): Sum of squares of elements in a list\")\n    print(\"(r): Sum of squares of elements in a list\")\n    print(\"(s): Sum of squares of elements in a list\")\n    print(\"(t): Sum of squares of elements in a list\")\n    print(\"(u): Sum of squares of elements in a list\")\n    print(\"(v): Sum of squares of elements in a list\")\n    print(\"(w): Sum of squares of elements in a list\")\n    print(\"(x): Sum of squares of elements in a list\")\n    print(\"(y): Sum of squares of elements in a list\")\n    print(\"(z): Sum of squares of elements in a list\")\n    print(\"--------------------------------------------\")\n    print(\"(a): Sum of square of the elements in the list\")\n    print(\"(b): Sum of squares of the elements in the list\")\n    print(\"(c): Sum of squares of the elements in the list\")\n    print(\"(d): Sum of squares of the elements in the list\")\n    print(\"(e): Sum of squares of the elements in the list\")\n    print(\"(f): Sum of squares of the elements in the list\")\n    print(\"(g): Sum of squares of the elements in the list\")\n    print(\"(h): Sum of squares of the elements in the list\")\n    print(\"(i): Sum of squares of the elements in the list\")\n    print(\"(j): Sum of squares of the elements in the list\")\n    print(\"(k): Sum of squares of the elements in the list\")\n    print(\"(l): Sum of squares of the elements in the list\")\n    print(\"(m): Sum of squares of the elements in the list\")\n    print(\"(n): Sum of squares of the elements in the list\")\n    print(\"(o): Sum of squares of the elements in the list\")\n    print(\"(p): Sum of squares of the elements in the list\")\n    print(\"(q): Sum of squares of the elements in the list\")\n    print(\"(r): Sum of squares of the elements in the list\")\n    print(\"(s): Sum of squares of the elements in the list\")\n    print(\"(t): Sum of squares of the elements in the list\")\n    print(\"(u): Sum of squares of the elements in the list\")\n    print(\"(v): Sum of squares of the elements in the list\")\n    print(\"(w): Sum of squares of the elements in the list\")\n    print(\"--------------------------------------------\")\n    print(\"(a): Sum of squares of the elements in a list\")"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count = count + 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num = 0\n    for i in list1:\n        if isinstance(i,int):\n            num += 1\n    return num\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list2=[]\n    for element in list1:\n        if isinstance(element,int):\n            list2.append(element)\n    return len(list2)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i].isdigit() == True:\n            list2.append(list1[i])\n    return len(list2)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_comb = []\n    for i in range(n):\n        comb_comb.append(list(combinations(l,i)))\n    return comb_comb\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, n+1):\n        result += combinations_with_replacement(l, i)\n    return result\n    \n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    solutions = []\n    for i in range(n):\n        # base case: when you do not have any element in the list, return an empty list\n        if l == []:\n            return solutions\n        # base case: when the list is empty, return an empty list\n        if l == []:\n            return []\n        # for every element in the list, determine if it is part of the combination\n        if l[i] in l:\n            solutions.append(l[:i] + l[i + 1:])\n        # otherwise, recurse and return all combinations \n        else:\n            combinations_colors(l[:i] + l[i + 1:], n)\n    # return the solutions\n    return solutions\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for i in range(n):\n        for a in combinations_with_replacement(l, i+1):\n            res.append(tuple(a))\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == n: return l\n    else: return combinations_colors(l, n-1) + [l+[l[-1]]]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #create a list of combinations\n    comb = []\n    for i in range(0, len(l)):\n        for j in range(0, len(l)):\n            comb.append(tuple(l[i] + l[j]))\n    #check each combination if it's a combination of the original list\n    for i in combinations(comb, n):\n        #add all the combinations to a list\n        comb.append(i)\n    return comb\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    n = len(l)\n    if n == 0:\n        return []\n    combinations = []\n    for i in range(n):\n        for j in range(i, n):\n            combinations.append((l[i], l[j]))\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    allCombos = list(combinations_with_replacement(l, n))\n    combos = []\n    for c in allCombos:\n        combos.append(tuple(c))\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        result.append(tuple(l[:i] + l[i:]))\n    return result\n    \ndef combinations_color(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        result.append(tuple([l[:i] + l[i:], l[i]]))\n    return result\n    \ndef combinations_color_with_replacement(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, n + 1):\n        result.append(tuple(l[:i] + l[i:], l[i]))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Your code here\n    return [[i] + j for i in combinations_with_replacement(l, n) for j in combinations_colors(l, n - 1 - i)]\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #your code here\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    numbers = [i for i in range(2, n + 1)]\n    num_list = []\n    count_primes = 0\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    sum_of_primes = 0\n    for num in range(2, n + 1):\n        for prime in range(2, num):\n            if num % prime == 0:\n                break\n        else:\n            sum_of_primes = sum_of_primes + 1\n    return sum_of_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        primes = []\n        for i in range(2, n):\n            for j in range(i+1, n+1):\n                if i % j == 0:\n                    break\n            else:\n                primes.append(i)\n        return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if is_prime(i):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n):\n        if (n % i) == 0:\n            count += 1\n            print(i)\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return 0\n    elif n <= 2:\n        return 1\n    else:\n        count = 0\n        i = 3\n        while i <= n:\n            if n % i == 0:\n                count += 1\n                break\n            i += 1\n        return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    c = 0\n    # store all prime numbers from 2 to sqrt(n) inclusive\n    for i in range(2,n):\n        # check if prime number is not divisible by any other number\n        if not (isprime(i)):\n            c = c + 1\n    # return the number of prime numbers\n    return c\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_of_primes = 0\n    for i in range(1, n + 1):\n        if isPrime(i):\n            num_of_primes += 1\n    return num_of_primes\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Hint: Use a third variable to store the second number\n    \n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first_num = a\n    second_num = b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    t = (a,b)\n    return t\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = int(a)\n    b = int(b)\n    return a,b\n    \ndef convert_to_decimal(a):\n    '''\n    Write a function that takes in a number and returns the number in decimal form.\n    '''\n    \n    a = int(a)\n    return a\n    \ndef convert_to_octal(a):\n    '''\n    Write a function that takes in a number and returns the number in octal form.\n    '''\n    \n    a = int(a)\n    return a\n    \ndef convert_to_hexadecimal(a):\n    '''\n    Write a function that takes in a number and returns the number in hexadecimal form.\n    '''\n    \n    a = int(a)\n    return a\n    "
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # a=b\n    # b=a\n    # return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a>b:\n        b,a = a,b\n    a,b = b,a\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a > b:\n        swapped_a = a\n        swapped_b = b\n    else:\n        swapped_b = b\n        swapped_a = a\n    return swapped_b,swapped_a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n    return (second, first)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    print(f\"You have chosen to swap numbers {a} and {b}\")\n    print(f\"Your numbers are: {a}, {b}\")\n    a = b\n    b = a\n    print(f\"Your numbers are now {a}, {b}\")\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a, b\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    max_value = test_tup1[0]\n    for i in test_tup2:\n        if max_value < i:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup = test_tup1\n    max_sum = 0\n    for i in range(len(test_tup1)):\n        test_tup[i] += test_tup2[i]\n        if test_tup[i] > max_sum:\n            max_sum = test_tup[i]\n    return test_tup1, test_tup2, max_sum\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    sum = 0\n    if len(tup1) > 0:\n        for i in range(len(tup1)):\n            if i == len(tup1)-1:\n                break\n            if tup1[i][1] < tup1[i+1][1]:\n                sum += tup1[i][1]\n            else:\n                sum += tup1[i+1][1]\n        return (tup1[0][0], sum)\n    else:\n        return (tup2[0][0], tup2[0][1])\n    \ntest_tup1 = (1,2,3,4)\ntest_tup2 = (5,6,7,8)\nprint(maximize_elements(test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # convert tuples to lists\n    tup_list1 = list(test_tup1)\n    tup_list2 = list(test_tup2)\n    # add zeroes to the lists\n    for i in range(len(tup_list1)):\n        tup_list1[i] = 0\n    for i in range(len(tup_list2)):\n        tup_list2[i] = 0\n    # sort the lists\n    tup_list1.sort()\n    tup_list2.sort()\n    # find the longest tuple\n    longest_list = max(tup_list1, tup_list2)\n    # return the tuple with it\n    return tuple([longest_list[0], longest_list[1]])\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0] and test_tup1[0] > test_tup2[1]:\n        return (test_tup1[0], test_tup1[1])\n    elif test_tup1[1] > test_tup2[0] and test_tup1[1] > test_tup2[1]:\n        return (test_tup1[1], test_tup1[0])\n    else:\n        return (test_tup1[1], test_tup2[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup_1 = tup_type(test_tup1)\n    tup_2 = tup_type(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    try:\n        if len(test_tup1) > len(test_tup2):\n            return test_tup2\n        else:\n            return test_tup1\n    except:\n        return None\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # code goes here\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return None\n    min_x = min(test_tup1)\n    min_y = min(test_tup2)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = []\n    for i in range(2,n):\n        if is_prime(i):\n            prime_list.append(i)\n    if len(prime_list)==2:\n        return prime_list[0]\n    else:\n        return None\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    x = (1 + int(math.sqrt(n))) / 2\n    y = 1 - int(x)\n    while True:\n        if (y**2 - x**2) % n == 0:\n            return y**2 - x**2\n        y += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 5\n    elif n==4:\n        return 7\n    elif n==5:\n        return 11\n    elif n==6:\n        return 13\n    elif n==7:\n        return 17\n    elif n==8:\n        return 19\n    elif n==9:\n        return 23\n    elif n==10:\n        return 29\n    elif n==11:\n        return 31\n    elif n==12:\n        return 37\n    elif n==13:\n        return 41\n    elif n==14:\n        return 47\n    elif n==15:\n        return 53\n    elif n==16:\n        return 59\n    elif n==17:\n        return 61\n    elif n==18:\n        return 67\n    elif n==19:\n        return 71\n    elif n==20:\n        return 73\n    elif n==21:\n        return 79\n    elif n==22:\n        return 85\n    elif n==23:\n        return 89\n    elif n==24:\n        return 97\n    elif n==25:\n        return 101\n    elif n==26:\n        return 103\n    elif n==27:\n        return 107\n    elif n==28:\n        return 109\n    elif n==29:\n        return 113\n    elif n==30:\n        return 127\n    elif n==31:\n        return 131\n    elif n==32:\n        return 137\n    elif n==33:\n        return 139\n    elif n==34:\n        return 143\n    elif n==35:\n        return 149\n    elif n==36:\n        return 151\n    elif n==37:\n        return 157\n    elif n==38:\n        return 163\n    elif n==39:\n        return 167\n    elif n==40:\n        return 173\n    elif n==41:\n        return 179\n    elif n==42:\n        return 181\n    elif n==43:\n        return 187\n    elif n==44:\n        return 191\n    elif n==45:\n        return 193\n    elif n==46:\n        return 197\n    elif n==47:\n        return 203\n    elif n==48:\n        return 209\n    elif n==49:\n        return 211\n    elif n==50:\n        return 217\n    elif n==51:\n        return 219\n    elif n==52:\n        return 221\n    elif n==53:\n        return 227\n    elif n==54:\n        return 229\n    elif n==55:\n        return 233\n    elif n==56:\n        return 239\n    elif n==57:\n        return 241\n    elif n==58:\n        return 247\n    elif n==59:\n        return 251\n    elif n==60:\n        return 257\n    elif n==61:\n        return 263\n    elif n==62:\n        return 269\n    elif n==63:\n        return 271\n    elif n==64:\n        return 277\n    elif n==65:\n        return 281\n    elif n==66:\n        return 285\n    elif n==67:\n        return 293\n    elif n==68:\n        return 307\n    elif n==69:\n        return 311\n    elif n==70:\n        return 327\n    elif n==71:\n        return 341\n    elif n==72:\n        return 347\n    elif n==73:\n        return 363\n    elif n==74:\n        return 359\n    elif n==75:\n        return 367\n    elif n==76:\n        return 373\n    elif n==77:\n        return 379\n    elif n==78:\n        return 383\n    elif n==79:\n        return 389\n    elif n==80:\n        return 391\n    elif n==81:\n        return 407\n    elif n==82:\n        return 409\n    elif n==83:\n        return 411\n    elif n==84:\n        return 411\n    elif n==85:\n        return 419\n    elif n==86:\n        return 421\n    elif n==87:\n        return 439\n    elif n==88:\n        return 451\n    elif n==89:\n        return 463\n    elif n==90:\n        return 479\n    elif n==91:\n        return 491\n    elif n==92:\n        return 493\n    elif n==93:\n        return 499\n    elif n==94:\n        return 503\n    elif n==95:\n        return 521\n    elif n==96:\n        return 539\n    elif n==97:\n        return 551\n    elif n==98:\n        return 563\n    elif n==99:\n        return 587\n    elif n==100:\n        return 611\n    elif n==101:\n        return 641\n    elif n==102:\n        return 647\n    elif n==103:\n        return 651\n    elif n==104:\n        return 667\n    elif n==105:\n        return 673\n    elif n==106:\n        return 687\n    elif n==107:\n        return 691\n    elif n==108:\n        return 701\n    elif n==109:\n        return 739\n    elif n==110:\n        return 753\n    elif n==111:\n        return 767\n    elif n==112:\n        return 781\n    elif n==113:\n        return 797\n    elif n==114:\n        return 801\n    elif n==115:\n        return 811\n    elif n==116:\n        return 823\n    elif n==117:\n        return 841\n    elif n==118:\n        return 853\n    elif n==119:\n        return 867\n    elif n==120:\n        return 881\n    elif n==121:\n        return 897\n    elif n==122:\n        return 901\n    elif n==123:\n        return 911\n    elif n==124:\n        return 923\n    elif n==125:\n        return 941\n    elif n==126:\n        return 953\n    elif n==127:\n        return 967\n    elif n==128:\n        return 981\n    elif n==129:\n        return 997\n    elif n==130:\n        return 1011\n    elif n==131:\n        return 1041\n    elif n==132:\n        return 1049\n    elif n==133:\n        return 1063\n    elif n==134:\n        return 1079\n    elif n==135:\n        return 1091\n    elif n==136:\n        return 1097\n    elif n==137:\n        return 1111\n    elif n==138:\n        return 1141\n    elif n==139:\n        return 1149\n    elif n==140:\n        return 1163\n    elif n==141:\n        return 1181\n    elif n==142:\n        return 1193\n    elif n==143:\n        return 1201\n    elif n==144:\n        return 1211\n    elif n==145:\n        return 1223\n    elif n==146:\n        return 1241\n    elif n==147:\n        return 1253\n    elif n==148:\n        return 1267\n    elif n==149:\n        return 1281\n    elif n==150:\n        return 1297\n    elif n==151:\n        return 1301\n    elif n==152:\n        return 1311\n    elif n==153:\n        return 1323\n    elif n==154:\n        return 1341\n    elif n==155:\n        return 1353\n    elif n==156:\n        return 1367\n    elif n==157:\n        return 1381\n    elif n==158:\n        return 1397\n    elif n==159:\n        return 1401\n    elif n==160:\n        return 1411\n    elif n==161:\n        return 1423\n    elif "
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Your code goes here.\n    \n    if n < 2: \n        return n \n    \n    for k in range(3, n + 1): \n        if n % k == 0: \n            return 0 \n            \n    return n \n    \n    \ndef newman_quadratic_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Your code goes here.\n    \n    if n < 2: \n        return n \n    \n    for k in range(2, n + 1): \n        if n % k == 0: \n            return 0 \n    \n    return n \n    \ndef newman_cyclic_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Your code goes here.\n    \n    if n < 2: \n        return n \n    \n    for k in range(2, n + 1): \n        if n % k == 0: \n            return 0 \n    \n    return n \n    \ndef newman_quadratic_recursive(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Your code goes here.\n    \n    if n < 2: \n        return n \n    \n    if n <= 1: \n        return 0 \n    \n    for k in range(2, n + 1): \n        if n % k == 0: \n            return 0 \n        \n    return n \n    \ndef newman_cyclic_recursive(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Your code goes here.\n    \n    if n < 2: \n        return n \n    \n    if n <= 1: \n        return 0 \n    \n    for k in range(2, n + 1): \n        if n % k == 0: \n            return 0 \n        \n    return n \n    \ndef newman_quadratic_recursive_2(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Your code goes here.\n    \n    if n < 2: \n        return n \n    \n    for k in range(2, n + 1): \n        if n % k == 0: \n            return 0 \n        \n    return n \n    \ndef newman_quadratic_recursive_3(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Your code goes here.\n    \n    if n < 2: \n        return n \n    \n    if n <= 1: \n        return 0 \n    \n    for k in range(2, n + 1): \n        if n % k == 0: \n            return 0 \n    \n    return n \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2: \n        return n\n    elif n == 2: \n        return 2\n    else: \n        for i in range(3, n, 2): \n            if (n % i == 0): \n                return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    #Get the nth newman\u2013shanks\u2013williams prime number\n    for i in range(2,n+1):\n        if i < n:\n            print(i)\n            #If i is a prime number\n            if isprime(i):\n                #Set the prime numbers up to the i'th prime number\n                for j in range(i,n+1,i):\n                    #If i is a prime number\n                    if isprime(j):\n                        #add to the prime list\n                        prime.append(j)\n    #Return the nth prime number\n    return prime[n-1]\n    \ndef isprime(n):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    #Check if the number is divisible by itself\n    if n % 2 == 0:\n        #return false if it is divisible by 2\n        return False\n    else:\n        #Break the loop if the number is divisible by any other number\n        for i in range(3,n,2):\n            if n % i == 0:\n                return False\n        #return true if it is prime number\n        return True\n    "
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 3\n    elif n % 2 == 1:\n        return 4\n    else:\n        prime = n - 1 + newman_prime(n-1)\n        return prime\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True for i in range(n + 1)] \n    p = 2\n    while (p * p <= n): \n        if (sieve[p] == True): \n            for i in range(p * p, n + 1, p): \n                sieve[i] = False\n        p += 1\n    return nth_newman_shanks_williams_prime(n) \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 3:\n        return n\n    elif n == 3:\n        return 2\n    else:\n        for i in range(2, n // 2):\n            if n % i == 0:\n                return 0\n        return 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2, n): \n        if (n % i == 0): \n            return False\n    return True \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return((test_tup1[0]//test_tup2[0], test_tup1[1]//test_tup2[1]))\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup1[1]\n    c = test_tup2[0]\n    d = test_tup2[1]\n    e = 0\n    if a < b:\n        a, b = b, a\n    if b < c:\n        b, c = c, b\n    for i in range(len(a)):\n        e += a[i]/c[i]\n    for i in range(len(b)):\n        e += b[i]/c[i]\n    return e\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuples must be of equal length'\n    for i in range(0, len(test_tup1)):\n        if type(test_tup1[i]) == int or type(test_tup1[i]) == float:\n            test_tup1[i] /= test_tup2[i]\n        else:\n            return 'Invalid type for test_tup1 / test_tup2'\n    return test_tup1\n    "
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise TypeError('Tup1 and Tup2 must be the same size')\n    if len(test_tup1) == 1:\n        raise TypeError('Tup1 and Tup2 must be of the same size')\n    if len(test_tup2) == 1:\n        raise TypeError('Tup2 and Tup1 must be of the same size')\n    if test_tup1[0] == test_tup2[0]:\n        raise TypeError('Tup1 and Tup2 must be the same element')\n    if test_tup1[1] == test_tup2[1]:\n        raise TypeError('Tup1 and Tup2 must be the same element')\n    return [1 / test_tup1[0], 1 / test_tup2[0]]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TODO: Write your code here\n    return tuple([i/j for i, j in zip(test_tup1, test_tup2)])\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    divide = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= 0 and test_tup2[i]!= 0:\n            divide.append(test_tup1[i]/test_tup2[i])\n        else:\n            divide.append(0)\n    return tuple(divide)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TODO: Write your code here\n    num1 = test_tup1[0]\n    num2 = test_tup1[1]\n    num3 = test_tup1[2]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    numbers = []\n    for i in range(len(list1)):\n        numbers.append(list1[i:i+L])\n    return numbers\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L//2],list1[L//2:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    temp = []\n    i = 0\n    while i < len(list1):\n        temp.append(list1[i:i+L])\n        i += L\n    return tuple(temp)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split list into two parts\n    parts = []\n    length = L\n    if len(list1) % L > 0:\n        for i in range(len(list1)//L):\n            parts.append(list1[i*L:(i+1)*L])\n        parts.append(list1[(i+1)*L:] if len(list1) % L == 0 else list1[(i+1)*L:])\n    else:\n        parts.append(list1[0:len(list1)//L])\n        parts.append(list1[(i+1)*L:] if len(list1) % L == 0 else list1[(i+1)*L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first = list1[:L//2]\n    second = list1[L//2:]\n    return first, second\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #Remove item from list if it is less than L\n    if len(list1) > L:\n        list1.pop()\n    \n    #Split list into two parts\n    L1 = list1[:L]\n    L2 = list1[L:]\n    return (L1, L2)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = []\n    b = []\n    for i in range(0, L):\n        a.append(list1[i])\n    for i in range(0, len(a)):\n        b.append(a[i])\n    return (b, a)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return list1, None\n    else:\n        # init three empty lists\n        for i in range(L):\n            list2 = list1[:i]\n            list3 = list1[i:]\n            return list2, list3\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0 and h_age < 3:\n        print(h_age)\n    elif h_age >= 3 and h_age <= 4:\n        print(2*(h_age-3))\n    elif h_age >= 4 and h_age <= 6:\n        print(3*(h_age-4))\n    else:\n        print(4*(h_age-6))\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    if h_age in range(1,18):\n        return h_age\n    else:\n        for i in range(18,21):\n            if h_age in dogs:\n                return i\n    return h_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 5:\n        return 'young'\n    else:\n        return 'old'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 18:\n        return \"You are old enough to vote!\"\n    else:\n        return \"You are not old enough to vote!\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    import math\n    import datetime\n    today = datetime.datetime.now()\n    birthday = today.year - h_age\n    birth_days = math.ceil(birthday)\n    return birth_days\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    def dog_age(h_age):\n        h_age_new=str(h_age)+'years'\n        return h_age_new\n    print(dog_age(1.7))\n    print(dog_age(2.9))\n    print(dog_age(1.7))\n    print(dog_age(1.7))\n    print(dog_age(1.3))\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    Dog_age = (h_age + 1) * 12\n    return Dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    import math\n    import csv\n    import os\n    # import sys\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 1:\n        print(\"ERROR: 'h_age' must be between 1 and 100\")\n        return -1\n    elif h_age > 100:\n        print(\"ERROR: 'h_age' must be less than 100\")\n        return -1\n    else:\n        return h_age*365\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    assert type(S) is list\n    assert type(step) is int\n    # TODO: implement this\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not S:\n        return []\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def recursive_split(S, i, step):\n        if len(S) == 0:\n            return []\n        if step == 0:\n            return [S[:i]]\n        return [recursive_split(S[:i], i+1, step-1) + [S[i]] + recursive_split(S[i+1:], i, step-1) for i in range(i+1, len(S))]\n    return recursive_split(S, 0, step)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(0, len(S), step):\n        l.append(S[i:i+step])\n    return l\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L\n    \ndef reverse_string(S):\n    '''\n    Write a function that takes in a string S and returns it in reverse.\n    '''\n    return S[::-1]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: complete this function\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [[] for _ in range(len(S)//step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Create a list of lists\n    lists = []\n    # Start with one list\n    for i in range(0, len(S), step):\n        lists.append(S[i:i + step])\n    return lists\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    s = set(S)\n    k = step\n    ls = []\n    while k:\n        e = len(s) - 1\n        while e >= 0 and s[e]!= s[e - k]:\n            e -= 1\n        if e == -1:\n            e = 0\n        ls.append(s[:e + 1])\n        s = s[e + 1:]\n        k = k // 2\n    return ls\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(\"\\nThis is the function lateralsurface_cube\")\n    print(\"\")\n    print(\"Prints the lateral surface area of a cube given its side length\")\n    print(\"\")\n    print(\"The function takes the side length as an argument\")\n    print(\"\")\n    l = float(input(\"Side length:\"))\n    print(\"\")\n    print(\"You should now enter the area of the cube.\")\n    print(\"\")\n    return l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # WRITE YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from matplotlib import pyplot as plt\n    from numpy import sqrt\n    from numpy import array\n    from numpy import zeros, ones, floor\n    from numpy.polynomial.polynomial import Polynomial\n    from scipy.spatial import distance_matrix\n    from scipy.interpolate import interp1d\n    from scipy.interpolate import RectBivariateSpline\n    from scipy.interpolate import griddata\n    from scipy.interpolate import RectBivariateSpline\n    from scipy.interpolate import griddata\n    from scipy.interpolate import interp2d\n    from scipy.interpolate import griddata\n    from scipy.interpolate import InterpolatedUnivariateSpline\n    import numpy as np\n    from matplotlib.pyplot import *\n    from numpy import *\n    from numpy import polyfit\n    from numpy import ravel\n    from numpy import shape\n    from numpy import asarray\n    from numpy import asmatrix\n    from numpy.polynomial.polynomial import polyfit\n    from numpy.polynomial.polynomial import Polynomial\n    from numpy import polyval\n    from numpy import polyval1d\n    from numpy import pi\n    from numpy import inf\n    import scipy.linalg\n    from scipy.linalg import inv\n    from numpy import asarray\n    from numpy.linalg import norm\n    from numpy import abs\n    from numpy import asarray\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from numpy import asmatrix\n    from "
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    a = 1/3*l**3\n    b = 6/3*l**2\n    c = 3/2*l\n    d = 4/3*l**2\n    e = 1/2*l\n    f = l\n    lateralSurface = a + b + c + d + e + f\n    return lateralSurface\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #Your code goes here\n    return 0\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Define the area of a triangle surface\n    area = l * (l + 1) / 2 * 2\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def find_lateral_area(l):\n        if l==0:\n            return 0\n        else:\n            return (4/3)*(l**3)\n    #return find_lateral_area(l)\n    return find_lateral_area(l)\n    \n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from mpl_toolkits.mplot3d import Axes3D\n    from matplotlib.tri import Triangulation\n    import matplotlib.pyplot as plt\n    from matplotlib import cm\n    from matplotlib.ticker import LinearLocator\n    from matplotlib.tri.triangulation import Triangulation\n    import matplotlib.patches as patches\n    from mpl_toolkits.mplot3d import Axes3D\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #calculate length of the base\n    base_length = 2*l\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def vol_perimeter(l):\n        '''\n        Volume per circumference.\n        '''\n        return round(l**2*3.14*3, 2)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum+i**2\n        if (i % 2 == 0):\n            sum = sum + i\n    return sum\n    \n    "
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1, n):\n        s += i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    a=0\n    for i in range(1,n+1):\n        a+=i*i\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n    # Write your solution here\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum += (i ** 2)\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += i**2\n    return sum\nprint(square_Sum(12))"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i**2\n    return s\nn=int(input(\"Enter an integer greater than 0 to calculate the square sum of the first n natural numbers: \"))\nprint(\"The square sum of the first \", n,\" natural numbers is\", square_Sum(n))\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #  Declare a variable that stores the sum of the squares of the first n odd natural numbers.\n    sum = 0\n    #  Iterate through the numbers from 1 to the number of odd natural numbers.\n    for i in range(1, n, 2):\n        #  Check if the current number is odd and if it is return the square of the current number.\n        if i % 2!= 0:\n            sum = sum + i ** 2\n    #  Return the sum of the squares of the first odd natural numbers.\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return square_sum(n-1) + square_sum(n-2)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return (n * n)\nprint(square_Sum(10))\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n+1):\n        if i*i > n:\n            return i\n    return n\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    #This function takes an integer n and returns the firstn'th star number.\n    #Here, the input is n.\n    \n    def find_nth_star_number(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        return 3*(3*find_nth_star_number(n-1))/6\n    return find_nth_star_number(n)\nprint(find_star_num(5)"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import math\n    for i in range(1, n):\n        x = math.sqrt(i)\n        if (i % x) == 0:\n            return i\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 0: \n        return 0\n    if n == 1: \n        return 1\n    return n * find_star_num(n-1) \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Your code here\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            print(j, end = \" \")\n        print()\n    return\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 0:\n        return 'Not Found'\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    else:\n        return 6\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 3:\n        return n\n    else:\n        return find_star_num(n-2) + 10\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n+1): \n        if n % i == 0: \n            return i \n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n<=1: return 1\n    elif n==2: return 3\n    elif n%2==0: \n        return find_star_num(n/2)\n    else:\n        return find_star_num(n-1) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    from math import sqrt\n    count = 0\n    for i in range(1,n+1):\n        count += sqrt(i)\n    return count\ndef find_star(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    from math import sqrt\n    count = 0\n    for i in range(1,n+1):\n        count += sqrt(i)\n    return count\n    \n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, int):\n        return k\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    if type(k) == str:\n        return ord(k)\n    else:\n        return k\n    \n    \ndef print_nums(numbers):\n    '''\n    Print the numbers in a list, line-by-line.\n    '''\n    \n    for i in range(len(numbers)):\n        print(f'{i+1}. {numbers[i]}')\n        \n    \ndef sorted_nums(numbers):\n    '''\n    Return the sorted numbers from smallest to largest.\n    '''\n    \n    return sorted(numbers)\n    \n    \ndef reverse_words(text):\n    '''\n    Return a copy of text in reverse order.\n    '''\n    \n    return text[::-1]\n    \n    \ndef main():\n    '''\n    Write your main program here.\n    '''\n    \n    # DO NOT MODIFY ANY CODE BELOW THIS LINE\n    \n    print(\"-- Dictionary Comprehension --\")\n    \n    \n    print(\"Question 1:\")\n    d = {\"cat\": \"bark\", \"dog\": \"whale\", \"porcupine\": \"alive\"}\n    print(d)\n    \n    print(\"Question 2:\")\n    d = {k: v.upper() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 3:\")\n    d = {k: v.title() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 4:\")\n    d = {k: v.upper() for (k, v) in d.items() if v.isalpha()}\n    print(d)\n    \n    print(\"Question 5:\")\n    d = {v: k for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 6:\")\n    d = {k: v.title() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 7:\")\n    d = {k: v.isupper() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 8:\")\n    d = {k: v.isdigit() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 9:\")\n    d = {k: v.replace(\"e\", \"ex\") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 10:\")\n    d = {k: v.startswith(\"c\") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 11:\")\n    d = {k: len(v) for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 12:\")\n    d = {k: v.isalpha() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 13:\")\n    d = {k: \" \".join(v) for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 14:\")\n    d = {k: \" \".join([v, v.upper()]) for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 15:\")\n    d = {k: v.find(\"o\") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 16:\")\n    d = {k: v.count(\"o\") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 17:\")\n    d = {k: v.replace(\"o\", \"x\") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 18:\")\n    d = {k: \" \".join([v, v.upper()]) for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 19:\")\n    d = {k: \" \".join([v, v.title()]) for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 20:\")\n    d = {k: v.isupper() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 21:\")\n    d = {k: v.startswith(\"A\") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 22:\")\n    d = {k: v.endswith(\"Z\") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 23:\")\n    d = {k: \" \".join(v) for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 24:\")\n    d = {k: v.strip() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 25:\")\n    d = {k: v.replace(\" \", \"\") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 26:\")\n    d = {k: v.title() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 27:\")\n    d = {k: v.isdigit() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 28:\")\n    d = {k: v.isalnum() for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 29:\")\n    d = {k: \"\".join(v) for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 30:\")\n    d = {k: v.replace(\"-\", \" \") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 31:\")\n    d = {k: v.replace(\".\", \" \") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 32:\")\n    d = {k: v.replace(\"?\", \" \") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 33:\")\n    d = {k: \"\".join(v) for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 34:\")\n    d = {k: v.replace(\".\", \" \").replace(\" \", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"'\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"-\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"\\\\\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\";\", \"\").replace(\".\", \"\").replace(\"|\", \"\") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 35:\")\n    d = {k: v.replace(\"-\", \" \").replace(\" \", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"'\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"-\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"\\\\\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\";\", \"\").replace(\".\", \"\").replace(\"|\", \"\") for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 36:\")\n    d = {k: \"\".join(v) for (k, v) in d.items()}\n    print(d)\n    \n    print(\"Question 37:\")\n    d = {k: v.replace(\"_\", \" \").replace(\"-\", \" \").replace(\" \", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"'\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"-\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"\\\\\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\";\""
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char = []\n    for i in range(len(k)):\n        char.append(ord(k[i]))\n    return char\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    a = ord(k)\n    return a\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k > 255:\n        return 255\n    elif k < 0:\n        return 0\n    else:\n        return k\n    \ndef hex_to_ascii(string):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if string == \"\":\n        return 0\n    elif string[0] == \"#\":\n        return ascii_value(int(string[1:]))\n    else:\n        return ascii_value(ord(string[0]))\n    \ndef ascii_to_hex(string):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if string == \"\":\n        return \" \"\n    elif string[0] == \"#\":\n        return string[1:]\n    else:\n        return string[0] + hex_to_ascii(string[1:])\n    \ndef hex_to_bytes(string):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if string == \"\":\n        return b''\n    elif string[0] == \"#\":\n        return bytes(ascii_value(int(string[1:])))\n    else:\n        return bytes(hex_to_ascii(string[0] + hex_to_ascii(string[1:])))\n    \ndef bytes_to_hex(string):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if string == \"\":\n        return \" \"\n    elif string[0] == \"#\":\n        return bytes_to_ascii(string[1:])\n    else:\n        return bytes_to_ascii(bytes_to_hex(string[0] + bytes_to_hex(string[1:])))\n    \ndef decode_value(string):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if string == \"\":\n        return \" \"\n    elif string[0] == \"#\":\n        return bytes_to_hex(string[1:])\n    else:\n        return bytes_to_ascii(bytes_to_hex(string[0] + bytes_to_hex(string[1:])))\n    \ndef encode_value(string):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if string == \"\":\n        return \" \"\n    elif string[0] == \"#\":\n        return ascii_to_hex(string[1:])\n    else:\n        return ascii_to_bytes(string[0] + ascii_to_bytes(string[1:]))\n    \ndef n_to_hex(n):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return hex(n).replace('0x', '')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    c = k.encode('ascii')\n    return ord(c)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return chr(k)\n    except:\n        return chr(k+64)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # TODO: Write your code here :-)\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = []\n    for i in arr:\n        if i % 2 == 0:\n            even.append(i)\n    return sum(even)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even += arr[i]\n    return even\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in arr:\n        if i % 2 == 0:\n            even_index = even_index + 1\n        if i % 2 == 0:\n            if even_index < 2:\n                even_sum = even_sum + i\n            else:\n                even_sum = even_sum + i\n    print(\"The sum of even numbers is \", even_sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = []\n    for i in arr:\n        if i%2 == 0:\n            evens.append(i)\n    print(evens)\n    return sum(evens)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0,len(arr)):\n        if (arr[i] % 2 == 0):\n            even_sum += arr[i]\n            \n    return even_sum\n        "
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([item for item in arr if item%2==0])\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    i=0\n    sum=0\n    while i<len(arr):\n        if i%2==0:\n            sum+=arr[i]\n        i+=1\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if(i%2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # your code goes here\n    num = 1\n    for num in range(0, n):\n        num += 1\n        if num % 2 == 0:\n            if num % 3 == 0:\n                num += 5\n                return num\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n==1: return 1\n    else:\n        sum=0\n        i=0\n        while i<n:\n            sum+=even_power(i)\n            i+=1\n        return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    ans = 0\n    num_list = [x for x in range(n)]\n    for i in range(1,n):\n        if num_list[i] == 0:\n            continue\n        if i % 2 == 0:\n            ans += num_list[i]\n        else:\n            ans += num_list[i]**3\n    return ans\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    a = int(n)\n    total = 0\n    for i in range(1, a+1):\n        if i%2==0:\n            total = total + (i**5)\n    print(total)\neven_Power_Sum(10)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Your code goes here\n    print(n)\n    print(sum(filter(lambda n: n % 5 == 0, map(lambda n: n**5, range(n)))))\n    \neven_Power_Sum(10)"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    odd_Power_Sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_Power_Sum = even_Power_Sum + i\n    return even_Power_Sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Create a list of n natural numbers \n    # and a variable to store the sum \n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, "
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0: \n        return 0\n    else:\n        return n * (n + 1) // 2\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n==0:\n        return 0\n    elif n%2==0:\n        return even_Power_Sum(n-1)\n    else:\n        return even_Power_Sum(n/2) + even_Power_Sum(n/2+1)\n    \nprint(even_Power_Sum(n))    "
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for element in test_list:\n        rear.append(element[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[0])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for index in range(len(test_list)):\n        rear_list.append(test_list[index][1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for item in test_list:\n        result_list.append(item[1])\n    return result_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(len(test_list)):\n        rear.append(test_list[i][0])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_of_tuples = []\n    #loop through the elements in the list\n    for element in test_list:\n        #append element to the list_of_tuples\n        list_of_tuples.append(element)\n    #return the list_of_tuples\n    return list_of_tuples\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for num in test_tup1:\n        result.append(num-test_tup2[num])\n    return result\n    \ndef invert_a_list(test_list):\n    '''\n    Write a function that takes in a list, returns a new list inversion of the list.\n    '''\n    inversion = []\n    for num in test_list:\n        inversion.append(num)\n    inversion.reverse()\n    return inversion\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # write your code here\n    # set up the variable and iterator for the first tuple\n    first_tuple = test_tup1\n    # set up the variable and iterator for the second tuple\n    second_tuple = test_tup2\n    # set up a variable to check if the first tuple is shorter than the second tuple\n    is_longer = True\n    # set up a variable to check if the first tuple is longer than the second tuple\n    is_shorter = True\n    # loop through both tuples\n    while is_shorter == True:\n        # if the first tuple is shorter than the second tuple, then set the variable to True\n        if len(first_tuple) > len(second_tuple):\n            is_shorter = False\n        else:\n            # if the first tuple is longer than the second tuple, then set the variable to True\n            is_longer = False\n    # set up an iterator for the first tuple\n    iterator = 0\n    # set up a variable to check if the first tuple is longer than the second tuple\n    is_longer = True\n    # iterate through the first tuple\n    while is_longer == True:\n        # if the iterator is less than the total number of elements in the first tuple, then set the variable to True\n        if iterator < len(first_tuple):\n            # if the first tuple is longer than the second tuple, then set the variable to True\n            if len(first_tuple) > len(second_tuple):\n                is_longer = False\n            # if the first tuple is shorter than the second tuple, then set the variable to True\n            elif len(first_tuple) < len(second_tuple):\n                is_longer = False\n        # increment the iterator to the next element in the first tuple\n        iterator += 1\n    # set up an iterator for the second tuple\n    iterator = 0\n    # set up a variable to check if the first tuple is longer than the second tuple\n    is_shorter = True\n    # iterate through the second tuple\n    while is_shorter == True:\n        # if the iterator is less than the total number of elements in the second tuple, then set the variable to True\n        if iterator < len(second_tuple):\n            # if the second tuple is longer than the first tuple, then set the variable to True\n            if len(second_tuple) > len(first_tuple):\n                is_shorter = False\n            # if the second tuple is shorter than the first tuple, then set the variable to True\n            elif len(second_tuple) < len(first_tuple):\n                is_shorter = False\n        # increment the iterator to the next element in the second tuple\n        iterator += 1\n    # set up an iterator for the first tuple\n    iterator = 0\n    # set up a variable to check if the first tuple is shorter than the second tuple\n    is_shorter = True\n    # iterate through the first tuple\n    while is_shorter == True:\n        # if the iterator is less than the total number of elements in the first tuple, then set the variable to True\n        if iterator < len(first_tuple):\n            # if the first tuple is longer than the second tuple, then set the variable to True\n            if len(first_tuple) > len(second_tuple):\n                is_shorter = False\n            # if the first tuple is shorter than the second tuple, then set the variable to True\n            elif len(first_tuple) < len(second_tuple):\n                is_shorter = False\n        # increment the iterator to the next element in the first tuple\n        iterator += 1\n    # set up an iterator for the second tuple\n    iterator = 0\n    # set up a variable to check if the first tuple is longer than the second tuple\n    is_shorter = True\n    # iterate through the second tuple\n    while is_shorter == True:\n        # if the iterator is less than the total number of elements in the second tuple, then set the variable to True\n        if iterator < len(second_tuple):\n            # if the second tuple is longer than the first tuple, then set the variable to True\n            if len(second_tuple) > len(first_tuple):\n                is_shorter = False\n            # if the second tuple is shorter than the first tuple, then set the variable to True\n            elif len(second_tuple) < len(first_tuple):\n                is_shorter = False\n        # increment the iterator to the next element in the second tuple\n        iterator += 1\n    # set up an iterator for the first tuple\n    iterator = 0\n    # set up a variable to check if the first tuple is longer than the second tuple\n    is_shorter = True\n    # iterate through the first tuple\n    while is_shorter == True:\n        # if the iterator is less than the total number of elements in the first tuple, then set the variable to True\n        if iterator < len(first_tuple):\n            # if the first tuple is longer than the second tuple, then set the variable to True\n            if len(first_tuple) > len(second_tuple):\n                is_shorter = False\n            # if the first tuple is shorter than the second tuple, then set the variable to True\n            elif len(first_tuple) < len(second_tuple):\n                is_shorter = False\n        # increment the iterator to the next element in the first tuple\n        iterator += 1\n    # set up an iterator for the second tuple\n    iterator = 0\n    # set up a variable to check if the first tuple is longer than the second tuple\n    is_shorter = True\n    # iterate through the second tuple\n    while is_shorter == True:\n        # if the iterator is less than the total number of elements in the second tuple, then set the variable to True\n        if iterator < len(second_tuple):\n            # if the second tuple is longer than the first tuple, then set the variable to True\n            if len(second_tuple) > len(first_tuple):\n                is_shorter = False\n            # if the second tuple is shorter than the first tuple, then set the variable to True\n            elif len(second_tuple) < len(first_tuple):\n                is_shorter = False\n        # increment the iterator to the next element in the second tuple\n        iterator += 1\n    # set up an iterator for the first tuple\n    iterator = 0\n    # set up a variable to check if the first tuple is longer than the second tuple\n    is_shorter = True\n    # iterate through the first tuple\n    while is_shorter == True:\n        # if the iterator is less than the total number of elements in the first tuple, then set the variable to True\n        if iterator < len(first_tuple):\n            # if the first tuple is longer than the second tuple, then set the variable to True\n            if len(first_tuple) > len(second_tuple):\n                is_shorter = False\n            # if the first tuple is shorter than the second tuple, then set the variable to True\n            elif len(first_tuple) < len(second_tuple):\n                is_shorter = False\n        # increment the iterator to the next element in the first tuple\n        iterator += 1\n    # set up an iterator for the second tuple\n    iterator = 0\n    # set up a variable to check if the first tuple is longer than the second tuple\n    is_shorter = True\n    # iterate through the second tuple\n    while is_shorter == True:\n        # if the iterator is less than the total number of elements in the second tuple, then set the variable to True\n        if iterator < len(second_tuple):\n            # if the second tuple is longer than the first tuple, then set the variable to True\n            if len(second_tuple) > len(first_tuple):\n                is_shorter = False\n            # if the second tuple is shorter than the first tuple, then set the variable to True\n            elif len(second_tuple) < len(first_tuple):\n                is_shorter = False\n        # increment the iterator to the next element in the second tuple\n        iterator += 1\n    # set up an iterator for the first tuple\n    iterator = 0\n    # set up a variable to check if the first tuple is longer than the second tuple\n    is_shorter = True\n    # iterate through the first tuple\n    while is_shorter == True:\n        # if the iterator is less than the total number of elements in the first tuple, then set the variable to True\n        if iterator < len"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtracted_elements = []\n    for i in range(len(test_tup1)):\n        subtracted_elements.append(test_tup1[i] - test_tup2[i])\n    return subtracted_elements\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: replace the pass with your code\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n    \n    "
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(0,len(test_tup1[0])):\n        test_tup1[0][i] -= test_tup2[0][i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tuple_a = test_tup1[0]\n    tuple_b = test_tup2[0]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #calculate the sum of all even binomial coefficients\n    sum = 0\n    for i in range(n+1):\n        sum = sum + (int(math.pow(2,i))*int(math.pow(2,i-1)))\n    #return the sum\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += (i ** 2) * (i ** 2)\n    return sum\ndef get_sum_even_binomial_coeff(n):\n    '''\n    Returns the sum of the even binomial coefficients of the numbers from 2 to n.\n    '''\n    sum = 0\n    for i in range(2, n):\n        sum += (i ** 2) * (i ** 2)\n    return sum\ndef get_avg_even_binomial_coeff(n):\n    '''\n    Returns the average of the even binomial coefficients of the numbers from 2 to n.\n    '''\n    sum = 0\n    for i in range(2, n):\n        sum += (i ** 2) * (i ** 2)\n    return sum / (n-2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int((n-1)*(n-2)*(n-3)*(2*n+1))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n%2==0:\n        return (n//2)**2\n    else:\n        return (n//2)**2 + (n//2)**2\n    \ndef even_binomial_Coeff_Sum_Recursive(n, terms=1):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==1:\n        return terms\n    else:\n        return even_binomial_Coeff_Sum_Recursive(n-1, terms*2)\ndef odd_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if n%2==1:\n        return (n//2)**2\n    else:\n        return (n//2)**2 + (n//2)**2\n    \ndef odd_binomial_Coeff_Sum_Recursive(n, terms=1):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if n==1:\n        return terms\n    else:\n        return odd_binomial_Coeff_Sum_Recursive(n-1, terms*2)\ndef add_to_sum(n, a,b):\n    '''\n    Write a python function that takes in two positive integers a and b and adds them together.\n    '''\n    sum=0\n    i=0\n    while i<len(b):\n        sum=sum+(a[i]*b[i])\n        i=i+1\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return math.comb(n,2)*math.comb(n-1,2)*math.comb(n-2,2)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return(\"Invalid Input\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return n\n    \n    if n == 2:\n        return n\n    if n == 3:\n        return n ** 2\n        \n    if n % 2 == 0:\n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n    else:\n        return even_binomial_Coeff_Sum(n // 2) + even_binomial_Coeff_Sum(n - 1)\n        \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # if n is less than or equal to 1, return 0\n    if n <= 1:\n        return 0\n    # if n is greater than the number of digits in n, return -1\n    elif n > len(str(n)):\n        return -1\n    # if n is even, return 1\n    elif n % 2 == 0:\n        return 1\n    # if n is odd, return 0\n    else:\n        return 0\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    a = n\n    while a%2 == 0:\n        a/=2\n    b = (n+1)*(n+3)\n    c = (n+1)*(n-1)\n    d = (n+2)*(n-2)\n    even_index = (b + c + d)//3\n    sum = (even_index*(b+(even_index-1)*(c+(even_index-2)*(d))))//10\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Write your code here\n    result = 0\n    for i in range(1,n+1):\n        result = result + ((i ** (n-i)) * math.factorial(i))\n    return result\nprint(even_binomial_Coeff_Sum(10))\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # you can use numpy for this step, even_binomial_Coeff_Sum.py\n    # calculate the sum of even index binomial coefficients\n    # then return this sum\n    \n    # hint: how do you get this sum?\n    # use math.factorial function to get the value of n\n    # multiply the value with the math.factorial function and add to get the sum\n    # in order to find the result\n    # return the result\n    #\n    # if you can't do this, you will have to do two rounds:\n    #  1. if you multiply every number by 3 and add the value of each binomial coefficient (then the sum of the values)\n    #   will be 1\n    #  2. if you multiply every number by 2 and add the value of each binomial coefficient (then the sum of the values)\n    #   will be 1.5\n    \n    # solution: https://stackoverflow.com/questions/13436356/finding-sum-of-even-index-binomial-coefficients-in-python\n    \n    # if you have a positive integer n, then there are n even index binomial coefficients\n    # so the sum of the even index binomial coefficients is equal to the sum of the odd index binomial coefficients\n    # multiply the result by the factorial function to get the number of index binomial coefficients\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3) * pi * (r*r) * (h**3)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # EOF\n    pass"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # your code goes here\n    return 4/3 * (r*h)**3"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 4*math.pi*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return(3/4*h**2)"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #for this function we get the radius and height, convert it to a float and store it in a variable\n    r = float(input('Enter the radius of the cylinder: '))\n    h = float(input('Enter the height of the cylinder: '))\n    #we calculate the area and the volume of the cylinder\n    volume = (4/3)*3.14*(r*h)\n    print('The volume of the cylinder is:',volume)\n    print('\\n')\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*3.14159\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Determine the radius of the cylinder\n    r = r*100\n    # Determine the height of the cylinder\n    h = h*100\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    res = dict.copy()\n    for i in res:\n        if res[i] >= n:\n            del res[i]\n    return res\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k, v in dict.items():\n        if k > n:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict=dict.copy()\n    for key in dict:\n        if dict[key] >= n:\n            del dict[key]\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict={}\n    for value in dict.values():\n        if value <= n:\n            newDict[value] = True\n    return newDict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return [k for k,v in dict.items() if v >= n]\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    res = {}\n    for i in dict.keys():\n        if dict[i] >= n:\n            res[i] = dict[i]\n    return res\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = {}\n    for key in dict:\n        if dict[key] >= n:\n            filtered[key] = dict[key]\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.values()\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    if n==0:\n        return dict\n    else:\n        s=set(dict.keys())\n        s.remove(0)\n        return dict.copy()\n    #return dict[s.pop()]\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output = {}\n    for key, value in dict.items():\n        if value >= n:\n            output[key] = value\n    return output\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            return i\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 1\n    return len(test_tup[0]) + count_first_elements(test_tup[1:])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def count_before(test_tup, tup_element):\n        '''\n        Iterate through the tuple elements and check if they occur before the given element in the given tuple.\n        '''\n        for i in range(len(tup_element)):\n            if tup_element[i] < test_tup[i]:\n                return i\n        return len(tup_element)\n    return count_before(test_tup, test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elem_dict = {}\n    for ele in test_tup:\n        if ele in first_elem_dict.keys():\n            first_elem_dict[ele] += 1\n        else:\n            first_elem_dict[ele] = 1\n    return first_elem_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return 0\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for t in test_tup:\n        if t < test_tup[count+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # TODO: Write your code here\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= i:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 0\n    while True:\n        if n < 2**i:\n            break\n        i += 1\n    \n    j = 0\n    while True:\n        if n < 2**j:\n            break\n        j += 1\n        \n    if n < 2**(2**i + 2**j):\n        return n\n    else:\n        return is_num_decagonal(n//2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 0: \n        return 0\n    \n    # Corner case: \n    if n == 0: \n        return 0\n    \n    # Corner cases: \n    elif n == 1: \n        return 1\n    \n    elif n == 2: \n        return 1\n    \n    # Corner cases: \n    elif n == 3: \n        return 2\n    \n    elif n == 4: \n        return 2\n    \n    elif n == 5: \n        return 2\n    \n    # Quadratic Cases: \n    else: \n        return 2*is_num_decagonal(n-1) + is_num_decagonal(n-2) + is_num_decagonal(n-3) \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # your code here\n    return None\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    \n    while i<=n:\n        if n%i==0:\n            return i\n        i+=1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def odd(num):\n        if num%2==0:\n            return num\n        else:\n            return odd(num//2+1)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n > 0:\n        for i in range(0, n, 2):\n            if i == n-1:\n                print(n+1)\n                return\n            else:\n                print(n+1)\n                return\n    else:\n        print(0)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    n = int(n)\n    if n == 1:\n        return 1\n    return (n + 1) ** 2\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        nth_decimal = n % (2*n - 1) \n        if nth_decimal == 1: \n            return 1\n        else: \n            return nth_decimal\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i=0\n    if n==0:\n        return 0\n    else:\n        while True:\n            i+=1\n            if i>n:\n                return 0\n            else:\n                if i%2==0:\n                    return i\n                else:\n                    return i+1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n >= 1:\n        nth_decagon = n // 2\n        nth_decagon = nth_decagon - 1\n        \n        for i in range(1, n):\n            if i % 2 == 0:\n                print('{} | {}'.format(i, i+1))\n                print('{} | {}'.format(i+1, i+2))\n                print('| {} | {}'.format(i+2, i+3))\n                print()\n        \n        if nth_decagon % 2 == 0:\n            print('\\n')\n            \n    else:\n        print('Invalid input\\n')\n        \n        \n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, val in enumerate(dlist):\n        if item == val:\n            return i, dlist.index(item)\n            \n    return False\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i,val in enumerate(dlist):\n        if item == val:\n            return (True,i)\n    return (False,i)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for index, item in enumerate(dlist):\n        if item == item:\n            return (True, index)\n    return (False, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #if it is not in the array\n    if item not in dlist:\n        return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i,dlist.index(item)\n    return -1, -1\n    \n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return (len(dlist)!= 0, item in dlist)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return(i, dlist.index(item))\n    return (-1, -1"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return(i, dlist.index(item,i))\n    return(-1, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    if len(unique_list)!= len(test_list):\n        return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    unique = False\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = True\n    if unique:\n        print(\"The given list is unique\")\n    else:\n        print(\"The given list is not unique\")\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    res = []\n    for i in test_list:\n        if i not in res:\n            res.append(i)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if i not in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if i in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for i in test_list:\n        if i not in unique:\n            unique.append(i)\n    return unique\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list)!= len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = [int(i) for i in test_list]\n    set_test_list = set(test_list)\n    return len(set_test_list)==len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp_list = []\n    for i in test_list:\n        if i not in temp_list:\n            temp_list.append(i)\n    return len(temp_list) == len(set(temp_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result = True\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert len(nums1) == len(nums2), \"len(nums1)!= len(nums2)\"\n    assert all(len(nums) == len(nums1[0]) for nums in (nums1,nums2) ), \"all the numbers must be of equal length\"\n    \n    def add_nums(a,b):\n        '''\n        Return the sum of the lists a and b.\n        '''\n        assert all(len(a) == len(b[0]) for a,b in (a,b) ), \"all the numbers must be of equal length\"\n        \n        return [ sum([nums[i] for nums in (a,b)]) for i in range(len(a)) ]\n    \n    nums1,nums2 = zip(*nums2)\n    #\n    nums1 = list(map(add_nums,zip(nums1,nums2)))\n    nums2 = zip(*nums2)\n    #\n    return add_nums(nums1,nums2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    num1,num2=nums1[:],nums2[:]\n    for i in range(len(num1)):\n        num1[i]+=1\n    for i in range(len(num2)):\n        num2[i]+=1\n    return num1,num2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Your code here\n    a=nums1\n    b=nums2\n    c=[]\n    for i in range(len(a)):\n        c.append(a[i]-b[i])\n    return c\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    temp = []\n    for i in nums1:\n        temp.append(i)\n    for i in nums2:\n        temp.append(i)\n    for i in range(len(temp)):\n        if temp[i] > 0:\n            temp[i] = temp[i] * -1\n    return temp\n    \ndef solution(nums):\n    answer = []\n    for i in range(len(nums)):\n        temp = sub_list(nums,nums[:i] + nums[i+1:])\n        for j in range(len(temp)):\n            if temp[j] == 0:\n                answer.append(i+1+j)\n    return answer\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #\n    # SOLUTION\n    #\n    #\n    newlist = []\n    for i in nums1:\n        newlist.append(i - nums2[i-1])\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res=[]\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            res.append(nums1[i]-nums2[j])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #convert the lists to a set\n    nums1=set(nums1)\n    nums2=set(nums2)\n    \n    nums1=list(nums1)\n    nums2=list(nums2)\n    \n    #do the operation\n    new_list=[]\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    \n    return new_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # O(n) solution\n    # for i in range(0, len(nums1)):\n    #     for j in range(0, len(nums2)):\n    #         if nums1[i] == nums2[j]:\n    #             nums1[i] = nums1[i]*-1\n    #         else:\n    #             if nums2[j] < nums1[i]:\n    #                 nums1[i] = nums2[j]*-1\n    #             else:\n    #                 nums1[i] = nums1[i]*-1\n    # return nums1\n    \n    # n = len(nums1)\n    # if nums1[0] == nums2[0]:\n    #     nums1[0] = nums1[0]*-1\n    #     nums2[0] = nums2[0]*-1\n    #     return nums1[0:n] + nums2[0:n]\n    # elif nums1[-1] == nums2[-1]:\n    #     nums1[-1] = nums1[-1]*-1\n    #     nums2[-1] = nums2[-1]*-1\n    #     return nums1[:-1] + nums2[:-1]\n    # elif nums1[0] == nums2[-1]:\n    #     nums1[0] = nums1[0]*-1\n    #     nums2[-1] = nums2[-1]*-1\n    #     return nums1[0:n] + nums2[0:n]\n    # elif nums1[-1] == nums2[0]:\n    #     nums1[-1] = nums1[-1]*-1\n    #     nums2[0] = nums2[0]*-1\n    #     return nums1[:-1] + nums2[:-1]\n    # elif nums1[-1] == nums2[0]:\n    #     nums1[-1] = nums1[-1]*-1\n    #     nums2[0] = nums2[0]*-1\n    #     return nums1[:-1] + nums2[:-1]\n    # return nums1[:-1] + nums2[:-1]\n    # return nums1 + nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n for n in nums2 if n not in nums1]\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n))!=10:\n        return False\n    else:\n        check = True\n        for i in range(1, 10):\n            if n%i == 0:\n                check = False\n                break\n        if check == True:\n            return True\n        else:\n            return False\n        \n    \ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n))!=10:\n        return False\n    else:\n        check = True\n        for i in range(1, 10):\n            if n%i == 0:\n                check = False\n                break\n        if check == True:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return(len(str(n)) <= 1)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in range(1, n+1): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0:\n        print(\"Input must be positive\")\n        return \"Error\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Get the list of digits\n    digits = n\n    digits_list = list(str(digits))\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def count_digits(num):\n        # check if it's a valid integer\n        try:\n            # convert num into an integer\n            int_num = int(num)\n        except:\n            return \"Please enter an Integer!\"\n        # if not convert it to an integer\n        if int_num <= 0:\n            return \"Please enter an Integer greater than or equal to zero!\"\n        else:\n            count = 0\n            # iterate through the numbers\n            for i in str(int_num):\n                # if the number is not a number\n                if i.isalpha() == False:\n                    return \"Please enter an Integer with only digits!\"\n                else:\n                    count += 1\n            # return the count of digits\n            return count\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in range(n):\n        if (n%2)!= 0:\n            count += 1\n    if count >= n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n))<=1:\n        raise ValueError(\"The number must be greater than 1\")\n    elif n%10==0 and n%100!=0:\n        raise ValueError(\"The number must be divisible by 10 and 100\")\n    elif n%10==0:\n        raise ValueError(\"The number must be divisible by 10\")\n    else:\n        return n\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if(n==0):\n        return -1\n    while(n>0):\n        if((n%10)==0):\n            n=n//10\n        else:\n            n=n%10\n    if(n==0):\n        return 1\n    return -1\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    counter=0\n    for i in list:\n        if i==element:\n            counter+=1\n    if counter==len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    # Check if all items in list are equal to element\n    if element in list:\n        return True\n    else:\n        return False\n    \n    \ndef equal_string(list_str):\n    '''\n    Write a function that takes in a list and returns a new list of all strings in the list. \n    \n    Example:\n    >>> equal_string([\"hello\",\"hi\", \"bye\"])\n    ['hello', 'hi', 'bye']\n    '''\n    \n    # Split each item in list_str\n    list_str = list_str.split()\n    \n    # Check for each item in list_str\n    #   (if it's equal to the element return True)\n    # (else return False)\n    for item in list_str:\n        if(check_element(list_str, item)):\n            list_str.remove(item)\n    \n    # Join the remaining items back together and return the result\n    return list_str\n    \n    \nif __name__ == '__main__':\n    print(equal_string(['hello', 'hi', 'bye']))"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #Your code here\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list[0] == element:\n        return True\n    else:\n        return False\n    \ndef boolean_check(a):\n    '''\n    Write a function that checks if the given string is boolean (e.g. \"False\")\n    '''\n    if a == \"False\":\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('a') + text.count('b') == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = re.split(\"[a-z]\",text)\n    if len(text) == 2 and (text[0]=='a' or text[0]=='A'):\n        if text[1]=='b':\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains two or three characters\n    elif re.search(r'[a-zA-Z]\\s{2,3}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_three_four(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by three or four 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains three or four characters\n    elif re.search(r'[a-zA-Z]\\s{3,4}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by four or five 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains four or five characters\n    elif re.search(r'[a-zA-Z]\\s{4,5}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_five_six(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by five or six 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains five or six characters\n    elif re.search(r'[a-zA-Z]\\s{5,6}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by six or seven 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains six or seven characters\n    elif re.search(r'[a-zA-Z]\\s{6,7}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by seven or eight 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains seven or eight characters\n    elif re.search(r'[a-zA-Z]\\s{8,9}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_eight_nine(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by eight or nine 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains eight or nine characters\n    elif re.search(r'[a-zA-Z]\\s{9,10}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_nine_ten(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by nine or ten 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains nine or ten characters\n    elif re.search(r'[a-zA-Z]\\s{10}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by ten or eleven 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains ten or eleven characters\n    elif re.search(r'[a-zA-Z]\\s{11,12}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_eleven_twelve(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by eleven or twelve 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains eleven or twelve characters\n    elif re.search(r'[a-zA-Z]\\s{12,13}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_twelve_twenty(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by twelve or twenty 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains twelve or twenty characters\n    elif re.search(r'[a-zA-Z]\\s{2,3}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_twenty_one(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by twenty or one 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains twenty or one characters\n    elif re.search(r'[a-zA-Z]\\s{2,3}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_one_two(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by one or two 'b' characters.\n    '''\n    # Check if input string contains a character\n    if re.search(r'[a-zA-Z]', text):\n        # Return the result\n        return True\n    # Check if input string contains one or two characters\n    elif re.search(r'[a-zA-Z]\\s{2,3}', text):\n        # Return the result\n        return True\n    # Return false if input string is not a string of a character\n    return False\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains 'a' followed by two or three 'b' characters.\n    '''\n    # Check if input strin"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # define a regexp to match the pattern of the 'b' character\n    b_regex = re.compile(r'[ab]')\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Check whether the string starts with the 'a' character followed by two or three 'b' characters.\n    check_a_b = re.compile(r'a.b')\n    #print(check_a_b.findall(text))\n    #print(check_a_b.search(text))\n    return check_a_b.search(text)\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    for i in range(len(text)):\n        if text[i:i+2].startswith('a'):\n            if i+3 < len(text) and text[i+3:i+4].startswith('b'):\n                return True\n        elif text[i:i+2].startswith('b'):\n            if i+3 < len(text) and text[i+3:i+4].startswith('a'):\n                return True\n        elif text[i:i+2].startswith('b'):\n            if i+3 < len(text) and text[i+3:i+4].startswith('b'):\n                return True\n        elif text[i:i+2].startswith('b'):\n            if i+2 < len(text) and text[i+2:i+3].startswith('a'):\n                return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex_2 = r\"[a-z][a-z]*\"\n    regex_3 = r\"\\b[a-z]*\\b\"\n    if(text.count(regex_3) > 1):\n        return True\n    elif(text.count(regex_2) == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_copy = text.replace('a','')\n    text_copy = text_copy.replace('b','')\n    print(text_copy)\n    count = 0\n    result = []\n    for i in range(0, len(text_copy)):\n        if (text_copy[i] == 'a' or text_copy[i] == 'b'):\n            count += 1\n            if (count == 2 or count == 3):\n                result.append(i)\n    return result\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search(r'[a-b]\\w+',text)\n    return match\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #string = 'aabcc'\n    #out = 'aabbc'\n    #out = out.replace('a','1')\n    #out = out.replace('b','1')\n    #out = out.replace('b','2')\n    #out = out.replace('c','3')\n    \n    \n    match = re.search('[a-z][a-z]{2,}',text)\n    \n    if match:\n        match2 = re.search('[a-z][a-z]{2,}',text)\n        \n        if match2:\n            if match.group(0) == 'a':\n                return 'No'\n            else:\n                return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    left = 0\n    right = n - 1\n    mid = n//2\n    \n    #calculating the sum of the sub array k times\n    #if k is odd the sub array is always even, so for even number of k it is counted as even\n    #if k is odd the sub array is always odd so for odd number of k it is counted as odd\n    while right - left >= 1: \n        left_sum = 0\n        right_sum = 0\n        mid_sum = 0\n        \n        #print(\"left\",left,\"right\", right)\n        for i in range(left, right + 1):\n            #print(i)\n            left_sum += a[i]\n        \n        for i in range(mid - 1, left - 1, -1):\n            #print(i)\n            right_sum += a[i]\n        \n        for i in range(mid, right + 1):\n            #print(i)\n            mid_sum += a[i]\n        \n        if k % 2 == 1:\n            left_sum = left_sum % (10**9 + 7)\n            right_sum = right_sum % (10**9 + 7)\n            mid_sum = mid_sum % (10**9 + 7)\n        else:\n            left_sum = left_sum % (10**9 + 7)\n            right_sum = right_sum % (10**9 + 7)\n            mid_sum = mid_sum % (10**9 + 7)\n        \n        left_sum = left_sum * (10**9 + 7)\n        right_sum = right_sum * (10**9 + 7)\n        mid_sum = mid_sum * (10**9 + 7)\n        #print(left_sum,right_sum,mid_sum)\n        \n        #print(left_sum,right_sum,mid_sum)\n        \n        #finding the max sum of sub array of length k\n        max_sum = max(left_sum, right_sum, mid_sum)\n        #print(max_sum)\n        \n        if (max_sum + left_sum + right_sum + mid_sum) % (10**9 + 7)!= 0:\n            #print(left_sum,right_sum,mid_sum)\n            return max_sum + left_sum + right_sum + mid_sum\n        else:\n            return max_sum + left_sum + right_sum + mid_sum\n    else:\n        return max_sum + left_sum + right_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    result = 0\n    sub_arr_sum = a[0]\n    for i in range(0, n):\n        result += a[i]\n        sub_arr_sum = max(sub_arr_sum, result)\n    return sub_arr_sum\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Defining the max_sum_sub_array_sum_repeated function\n    def max_sum_sub_array_sum_repeated(a, n, k): \n        # Initializing the variable max_sum_sub_array_sum_repeated\n        max_sum_sub_array_sum_repeated = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Time: O(n^2)\n    # Space: O(k)\n    \n    # Solution 1\n    '''\n    sum = 0\n    for i in range(k):\n        sum += a[i]\n    return max(sum, sum + max_sub_array_sum_repeated(a, n, k-i))\n    '''\n    \n    # Solution 2\n    # Time: O(n^2)\n    # Space: O(k)\n    \n    # Solution 3\n    '''\n    if k <= 1:\n        return sum(a)\n    \n    a.insert(0, 0)\n    \n    for i in range(1, len(a)):\n        \n        a[i] += a[i-1]\n    \n    return a[-1]\n    '''"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum of all the numbers in the array\n    numbers = list(a)\n    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i]\n    return sum % (10**9 + 7)\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k > len(a): \n        return 0 \n    if k == 0: \n        return 0 \n    sub_array = [0] * k \n    sub_array[0] = a[0] \n    i = 1 \n    j = 1 \n    max_sum = 0 \n    for i in range(1, len(a)): \n        max_sum = max(max_sum + a[i - 1], sub_array[j] - sub_array[i - 1]) \n        if i == k: \n            j += 1 \n        sub_array[j] = a[i] \n    return max_sum "
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    s = sum(a[0:k])\n    for i in range(n):\n        sum_sub = s + a[i]\n        if sum_sub > max_sum:\n            max_sum = sum_sub\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # To keep track of the running sum of a sub array\n    total = 0\n    # To keep track of the total sub array size\n    count = 0\n    # Initialize start and end pointer to keep track of the sub array\n    start, end = 0, 0\n    # Create a sub array to store the sub array's sum\n    sub_array = []\n    # Traverse through all the elements of the array\n    for i in range(n):\n        # if the current element is even append to the sub array\n        if i % 2 == 0:\n            sub_array.append(a[i])\n        # if the current element is odd append to the sub array\n        else:\n            sub_array.append(a[start + count])\n            # Increment the count\n            count += 1\n        # if the sub array size is reached then append the value to the array\n        if count == k:\n            total += sum(sub_array)\n            # reset start and end pointer\n            count = 0\n            start += 1\n            end += 1\n    return total\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n_list = []\n    for i in range(0, n):\n        n_list.append(a[i])\n    for i in range(0, k):\n        s = sum(n_list)\n        if s % n == 0:\n            n_list[-1] = s//n\n    return sum(n_list"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n):\n        sum_of_squares += i**2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1,n+1):\n        sum_squares += i\n    return sum_squares\n    \n    \ndef factorial(n):  \n    '''\n    Write a python function takes in an integer n and returns the factorial of that number.\n    '''\n    fact = 1\n    for i in range(2, n+1):\n        fact *= i\n    return fact\n    \ndef main():\n    '''\n    Test cases to understand the output of the functions\n    '''\n    assert(square_Sum(10) == 100)\n    assert(square_Sum(40) == 16)\n    assert(square_Sum(10) == 100)\n    assert(square_Sum(101) == 100)\n    assert(square_Sum(7) == 28)\n    assert(square_Sum(0) == 1)\n    print(\"All test cases passed!\")\n    \n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    \n    elif n < 0:\n        return \"Please enter a positive number\"\n    \n    else:\n        sum = 0\n        while n >= 2:\n            \n            sum = sum + (n * n)\n            n = n - 1\n        \n        return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    # your code goes here\n    if (n == 0):\n        return 0\n    else:\n        return n * n + square_Sum(n - 1)\n    \n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += (i**2)\n    print(sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum = sum + (i ** 2)\n        i += 1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum = sum + i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum = 0\n    for x in range(1,n+1):\n        if x%2 == 0:\n            sum+=x\n            print(sum)\n    print(sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    return max([len(x) for x in list1])"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_values = []\n    for sublist in list1:\n        for ele in sublist:\n            if len(ele) > max_length:\n                max_length = len(ele)\n                max_values = sublist\n    return max_length, max_values\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maximum = 0\n    for list2 in list1:\n        if len(list2) > maximum:\n            maximum = len(list2)\n    return maximum\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # for loop for the longest element in the list\n    longest = 0\n    # for loop for the length of the list\n    for i in range(len(list1)):\n        # add the maximum length of each element\n        # if its not equal to 0 then append the index to the shortest\n        # if its equal to 0 then return\n        if len(str(list1[i])) > longest:\n            longest = len(str(list1[i]))\n    return longest\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for i in list1:\n        length = len(i)\n        break\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return 0\n    else:\n        return max([len(l) for l in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Create a loop to iterate through a list\n    for i in list1:\n        # Iterate through the list\n        for j in range(len(i)):\n            if len(str(i[j])) > len(str(i[j])[::-1]):\n                i[j] = i[j][::-1]\n                # Find the index of the first non-zero element\n                i.remove(i[j])\n                # Append this value to the list\n                i.insert(j, i[j][::-1])\n                # Return the list\n                return i\n    # Return False if there is no non-zero element\n    return False\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            if list1[i] > list1[j]:\n                if list1[i] > max_length:\n                    max_length = list1[i]\n                if list1[j] > max_length:\n                    max_length = list1[j]\n    return max_length\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==2: return 1\n    if n<=2: return 0\n    if n<=3: return 0\n    if n<=4: return 0\n    \n    # Run a DFS on the fence, each time using an array of colors for every adjacent pixel. The number of ways to paint the fence is the sum of the 2 adjacent ways.\n    ways_of_fence = [0] * n\n    ways_of_fence[0] = 1\n    for i in range(1,n):\n        ways_of_fence[i] = ways_of_fence[i-1] + ways_of_fence[i-2]\n    ways_of_fence[n-1] = ways_of_fence[n-2]\n    for i in range(2,n):\n        ways_of_fence[i] = ways_of_fence[i-1] + ways_of_fence[i-2] + ways_of_fence[i-3]\n    ways_of_fence[n-2] = ways_of_fence[n-3]\n    ways_of_fence[n-3] = ways_of_fence[n-4]\n    \n    # Run a BFS on the fence and calculate the number of ways to paint the fence.\n    # Note that we have to use a visited array, which is pre-filled with False in the BFS.\n    return dfs(ways_of_fence, 0, 0, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # the number of ways to paint the fence\n    ways = [0 for _ in range(n+1)]\n    ways[1] = 1\n    # iterate from 1 to n+1\n    for i in range(1,n+1):\n        # check all possible ways\n        for j in range(i):\n            if (j+1)%k == 0:\n                ways[i] += ways[j]\n            else:\n                ways[i] += ways[j]*2\n    return ways[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # if the number of ways is not defined then return the default value\n    if n == 1 and k == 2:\n        return 1\n    # if the number of ways is defined then return the default value\n    elif n == 1:\n        return 2**k\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # getting the number of ways\n    count = 0\n    # iterate over the fence\n    for i in range(1, k + 1):\n        # for each post\n        for j in range(1, n + 1):\n            # checking if the colors are the same\n            if (i == 1):\n                # if so, put the number of ways\n                if (j == 1 or j == n):\n                    # count the number of ways\n                    count += 1\n            elif (j == 1 or j == n):\n                # if so, put the number of ways\n                if (i == 1):\n                    # count the number of ways\n                    count += 1\n            elif (j == 1 or j == n):\n                # if so, put the number of ways\n                if (i == 2):\n                    # count the number of ways\n                    count += 1\n            elif (i == 2):\n                # if so, put the number of ways\n                if (j == 1 or j == n):\n                    # count the number of ways\n                    count += 1\n            else:\n                # if so, put the number of ways\n                if (i == 2):\n                    # count the number of ways\n                    count += 1\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # pattern of 2 of k -1 = 2 * (k - 2) -1\n    # pattern of k - 2 = k - 1 * k - 2\n    \n    cache = {0: 1}\n    \n    def count(i, n, k):\n        if i in cache:\n            return cache[i]\n        if n == 2 * k - 1 and k == k - 1:\n            return 2\n        \n        cache[i] = count(i * 2, n, k) + count(i * 2 + 1, n - 1, k)\n        return cache[i]\n    \n    return count(1, n, k"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 8\n    if n == 6:\n        return 12\n    if n == 7:\n        return 24\n    if n == 8:\n        return 48\n    if n == 9:\n        return 72\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 0:\n        return 1\n    elif n == 2 and k > 0:\n        return 2\n    elif n > 2 and k > 0:\n        return n*count_no_of_ways(n-2, k-1) + 2 * count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n == 0):\n        return 0\n    elif (k == 0):\n        return 1\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n: \n        print('Invalid fence') \n        return 0 \n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    \n    # Fill dp[i][j] with the number of ways to draw the fence\n    for i in range(1, n + 1):\n        for j in range(1, k + 1): \n            if (i - 1) % 2 == 0: \n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j] \n            elif (i - 1) % 2 == 1: \n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] \n            else: \n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + dp[i - 1][j - 1] \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (k > n):\n        return 0\n    elif (k == 0):\n        return 1\n    elif (n == 2):\n        return 2\n    elif (n == 1 or k == 1):\n        return 1\n    else:\n        return count_no_of_ways(n-1,k)+count_no_of_ways(n-2,k)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # base case\n    if n == m:\n        return n\n    \n    # recursive case\n    # if n>m, only n can be divided into two\n    if n>m:\n        if n%m == 0:\n            return m\n        else:\n            return find(n//m,m)\n    \n    # return n if n<m\n    # else return find(n,m-n)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    def n_m(n,m):\n        return n//m\n    if m<=0:\n        return 0\n    return n_m(n_m(n,m),m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n <= 0 or m <= 0 or n <= m:\n        return None\n    else:\n        return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        # n and m are the same\n        # n is the smallest number\n        # m is the largest number\n        # return n/m\n        return round(n/m)\n    else:\n        # n is the largest number\n        # m is the smallest number\n        # return m/n\n        return m/n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    from math import floor\n    num1=floor(m/n)\n    num2=m%n\n    return num1,num2\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    result = 0\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    if n > m:\n        n, m = m, n\n    temp = 0\n    i = m\n    while i >= 0:\n        temp += i%10\n        i = i//10\n    return temp\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # %100 will make the decimal place of 1 integer\n    if n<0 and m<0:\n        return -1\n    elif m<0:\n        n,m=abs(n),abs(m)\n    # if n<m, then we can't find a solution\n    if n<m:\n        return -1\n    else:\n        # n is even and m is odd\n        if n%2==0:\n            if n==m:\n                return n\n            elif n%2==1:\n                return (n-m)/2+m\n            else:\n                return n-m\n        else:\n            return (n-m)/2+m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    from math import floor\n    if n <= 0 or m <= 0:\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return find(n-1,m) + find(n-2,m)\n    else:\n        return find(n,m)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s1 = (((w**2 + h**2)**0.5)/2)\n    if (s1**2) < (w**2 + h**2):\n        if (s1 > w/2):\n            return s1\n        elif (s1 > h/2):\n            return s1\n        else:\n            return w/2\n    else:\n        if (s1 > w/2):\n            return s1\n        elif (s1 > h/2):\n            return s1\n        else:\n            return w/2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Define side lengths\n    A=w\n    B=h\n    C=2*(A+B)\n    D=B\n    #Find A and B\n    while (C > D):\n        C = (C+D)/2\n        D = (C+D)/2\n    #Find C\n    while (C < A):\n        C = (C+D)/2\n        D = (C+D)/2\n    #Find D\n    while (D < B):\n        D = (C+D)/2\n        C = (C+D)/2\n    #Return the side lengths\n    return(A,B,C,D)\ndef getSideLengths(s,L1,L2,L3):\n    '''\n    Write a function that returns the lengths of two sides of a triangle.\n    '''\n    if (s == \"I\"):\n        if (L1 == L2):\n            return (L1,L1)\n        elif (L1 == L3):\n            return (L2,L2)\n        else:\n            return (L3,L2)\n    elif (s == \"II\"):\n        if (L2 == L1):\n            return (L1,L1)\n        elif (L2 == L3):\n            return (L3,L3)\n        else:\n            return (L2,L3)\n    elif (s == \"III\"):\n        if (L3 == L1):\n            return (L1,L1)\n        elif (L3 == L2):\n            return (L2,L2)\n        else:\n            return (L3,L2)\n    elif (s == \"IV\"):\n        if (L1 == L3):\n            return (L1,L1)\n        elif (L1 == L2):\n            return (L2,L2)\n        else:\n            return (L3,L2)\n    elif (s == \"V\"):\n        if (L1 == L2):\n            return (L1,L1)\n        elif (L1 == L3):\n            return (L2,L3)\n        else:\n            return (L3,L3)\n    elif (s == \"VI\"):\n        if (L2 == L3):\n            return (L1,L1)\n        elif (L2 == L4):\n            return (L4,L4)\n        elif (L2 == L5):\n            return (L5,L5)\n        else:\n            return (L2,L5)\n    elif (s == \"VII\"):\n        if (L1 == L4):\n            return (L1,L1)\n        elif (L1 == L2):\n            return (L2,L2)\n        elif (L1 == L5):\n            return (L5,L5)\n        else:\n            return (L1,L5)\n    elif (s == \"VIII\"):\n        if (L2 == L4):\n            return (L2,L2)\n        elif (L2 == L3):\n            return (L3,L3)\n        elif (L2 == L6):\n            return (L6,L6)\n        elif (L2 == L7):\n            return (L7,L7)\n        elif (L2 == L8):\n            return (L8,L8)\n        else:\n            return (L2,L8)\n    elif (s == \"IX\"):\n        if (L1 == L2):\n            return (L1,L2)\n        elif (L1 == L3):\n            return (L3,L3)\n        elif (L1 == L4):\n            return (L4,L4)\n        else:\n            return (L1,L4)\n    elif (s == \"X\"):\n        if (L1 == L2):\n            return (L1,L2)\n        elif (L1 == L3):\n            return (L3,L3)\n        elif (L1 == L4):\n            return (L4,L4)\n        else:\n            return (L1,L4)\n    elif (s == \"XI\"):\n        if (L2 == L3):\n            return (L2,L3)\n        elif (L2 == L4):\n            return (L4,L4)\n        elif (L2 == L5):\n            return (L5,L5)\n        elif (L2 == L6):\n            return (L6,L6)\n        else:\n            return (L2,L6)\n    elif (s == \"XII\"):\n        if (L3 == L4):\n            return (L3,L4)\n        elif (L3 == L5):\n            return (L5,L5)\n        elif (L3 == L6):\n            return (L6,L6)\n        elif (L3 == L7):\n            return (L7,L7)\n        elif (L3 == L8):\n            return (L8,L8)\n        else:\n            return (L3,L8)\n    elif (s == \"XIII\"):\n        if (L4 == L5):\n            return (L4,L5)\n        elif (L4 == L6):\n            return (L6,L6)\n        elif (L4 == L7):\n            return (L7,L7)\n        elif (L4 == L8):\n            return (L8,L8)\n        else:\n            return (L4,L8)\n    elif (s == \"XIV\"):\n        if (L3 == L4):\n            return (L3,L4)\n        elif (L3 == L5):\n            return (L5,L5)\n        elif (L3 == L6):\n            return (L6,L6)\n        elif (L3 == L7):\n            return (L7,L7)\n        elif (L3 == L8):\n            return (L8,L8)\n        else:\n            return (L3,L8)\n    elif (s == \"XV\"):\n        if (L3 == L4):\n            return (L3,L4)\n        elif (L3 == L5):\n            return (L5,L5)\n        elif (L3 == L6):\n            return (L6,L6)\n        elif (L3 == L7):\n            return (L7,L7)\n        elif (L3 == L8):\n            return (L8,L8)\n        else:\n            return (L3,L8)\n    elif (s == \"XVI\"):\n        if (L4 == L5):\n            return (L4,L5)\n        elif (L4 == L6):\n            return (L6,L6)\n        elif (L4 == L7):\n            return (L7,L7)\n        elif (L4 == L8):\n            return (L8,L8)\n        else:\n            return (L4,L8)\n    elif (s == \"XVII\"):\n        if (L5 == L6):\n            return (L5,L6)\n        elif (L5 == L7):\n            return (L7,L7)\n        elif (L5 == L8):\n            return (L8,L8)\n        else:\n            return (L5,L8)\n    elif (s == \"XVIII\"):\n        if (L6 == L7):\n            return (L6,L7)\n        elif (L6 == L8):\n            return (L8,L8)\n        elif (L6 == L9):\n            return (L9,L9)\n        else:\n            return (L6,L8)\n    elif (s == \"XX\"):\n        if (L2 == L3):\n            return (L2,L2)\n        elif (L2 == L4):\n            return (L4,L4)\n        elif (L2 == L5):\n            return (L5,L5)\n        elif (L2 == L6):\n            return (L6,L6)\n        elif (L2 == L7):\n            return (L7,L"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = math.pi * w * h\n    return (area * (1 - math.cos(math.pi * 0.5)) / 2)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    l = 2*math.sqrt(w*h)/math.sqrt(3)\n    x = l*(h/w)\n    y = l*math.sqrt(1-3*h/w)\n    z = h*(1-l/w)\n    if (x < 0):\n        x = 0\n    if (y < 0):\n        y = 0\n    if (z < 0):\n        z = 0\n    if (x > 1):\n        x = 1\n    if (y > 1):\n        y = 1\n    if (z > 1):\n        z = 1\n    return x,y,z\ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle\n    '''\n    return math.sqrt(4*b*c/3)\ndef side_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle\n    '''\n    return 2*(a+b+c)\ndef trapezoid(a,b,c,d,e):\n    '''\n    Write a function to find the perimeter of a trapezoid\n    '''\n    return (a+b+c)/2*(e**2+2*a*e+2*b*e+c*e+d*e)\ndef square(x):\n    '''\n    Write a function to find the area of a square\n    '''\n    return math.sqrt(x**2)\ndef circle(x,r):\n    '''\n    Write a function to find the area of a circle\n    '''\n    return math.pi*r*(x**2)\ndef circle_perimeter(x,r):\n    '''\n    Write a function to find the perimeter of a circle\n    '''\n    return 2*math.pi*r*(x**2)\ndef square_perimeter(x,r):\n    '''\n    Write a function to find the perimeter of a square\n    '''\n    return 2*r*(x**2)\ndef square_perimeter_circle(x,r):\n    '''\n    Write a function to find the perimeter of a square\n    '''\n    return 2*r*(x**2)*(math.sqrt(1-r**2))\ndef circle_perimeter_square(x,r):\n    '''\n    Write a function to find the perimeter of a circle\n    '''\n    return 2*math.pi*r*(x**2)\ndef triangle_perimeter_square(a,b,c,d,e,f):\n    '''\n    Write a function to find the perimeter of a triangle\n    '''\n    return (2*b*c)/3 + (a*b*c)/3 + (a*d*c)/3 + (a*e*c)/3 + (a*f*c)/3\ndef parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return 4*(a+b+c)\ndef parallelogram_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*b+c)**2\ndef parallelogram_perimeter_circle(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return 2*a+b+c\ndef parallelogram_perimeter_square(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-b**2)\ndef parallelogram_perimeter_circle_square(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)\ndef parallelogram_perimeter_circle_square_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)*math.sqrt(1-b**2)\ndef parallelogram_perimeter_square_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)*math.sqrt(1-b**2)*math.sqrt(1-a**2)\ndef parallelogram_perimeter_square_parallelogram_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)*math.sqrt(1-b**2)*math.sqrt(1-a**2)*math.sqrt(1-c**2)\ndef parallelogram_perimeter_square_parallelogram_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)*math.sqrt(1-b**2)*math.sqrt(1-a**2)*math.sqrt(1-c**2)*math.sqrt(1-b**2)\ndef parallelogram_perimeter_square_parallelogram_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)*math.sqrt(1-b**2)*math.sqrt(1-a**2)*math.sqrt(1-c**2)*math.sqrt(1-b**2)\ndef parallelogram_perimeter_square_parallelogram_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)*math.sqrt(1-b**2)*math.sqrt(1-a**2)*math.sqrt(1-c**2)*math.sqrt(1-b**2)\ndef parallelogram_perimeter_square_parallelogram_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)*math.sqrt(1-b**2)*math.sqrt(1-a**2)*math.sqrt(1-c**2)*math.sqrt(1-b**2)\ndef parallelogram_perimeter_square_parallelogram_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)*math.sqrt(1-b**2)*math.sqrt(1-a**2)*math.sqrt(1-c**2)*math.sqrt(1-b**2)\ndef parallelogram_perimeter_square_parallelogram_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)*math.sqrt(1-b**2)*math.sqrt(1-a**2)*math.sqrt(1-c**2)*math.sqrt(1-b**2)\ndef parallelogram_perimeter_square_parallelogram_parallelogram(a,b,c):\n    '''\n    Write a function to find the perimeter of a parallelogram\n    '''\n    return (2*a+b+c)*math.sqrt(1-c**2)*math.sqrt(1-b**2)*math.sqrt(1-a**2)*math.sqrt(1-c**"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_center(w,h):\n    '''\n    Write a function to find the third side of a center triangle.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_polar(w,h):\n    '''\n    Write a function to find the third side of a polar triangle.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_paralellipse(w,h):\n    '''\n    Write a function to find the third side of a parallax circle.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_cuboctahedron(w,h):\n    '''\n    Write a function to find the third side of a cubic octahedron.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_trimmedcuboctahedron(w,h):\n    '''\n    Write a function to find the third side of a trimmed cubic octahedron.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_paralellipse_alt(w,h):\n    '''\n    Write a function to find the third side of a parallax circle.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_cuboctahedron_alt(w,h):\n    '''\n    Write a function to find the third side of a cubic octahedron.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_trimmedcuboctahedron_alt(w,h):\n    '''\n    Write a function to find the third side of a trimmed cubic octahedron.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_paralellipse_alt_quad(w,h):\n    '''\n    Write a function to find the third side of a parallax quad.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_cuboctahedron_quad(w,h):\n    '''\n    Write a function to find the third side of a cubic octahedron.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_trimmedcuboctahedron_quad(w,h):\n    '''\n    Write a function to find the third side of a trimmed cubic octahedron.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n    return angle\ndef otherside_parallellipse(w,h):\n    '''\n    Write a function to find the third side of a parallellipse.\n    '''\n    x1=w/2\n    y1=h/2\n    x2=w\n    y2=h\n    s=math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))\n    angle=math.degrees(math.acos((x2*x2+y2*y2-s*s)/(2*s*s)))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = ((math.sqrt(w**2+h**2))/2)\n    a = (math.sqrt(math.fabs(w/c))/2)\n    b = (math.sqrt(h/c))/2\n    return (a,b,c)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*(math.cos(h/2)))-(h*(math.sin(w/2)))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Find the width of the triangle\n    triangle_width = math.sqrt(3/4 * w**2 - (h**2 + w**2))\n    #Find the width of the base of the triangle\n    base_width = (math.sqrt(3/4 * w**2 - (h**2 + w**2)))\n    #Find the height of the base\n    base_height = math.sqrt(3/4 * w**2 - (h**2 + w**2))\n    #Find the height of the side of the triangle\n    side_height = base_height * h / triangle_width\n    #Find the length of the side\n    side_length = triangle_width * w / base_width\n    #Find the angle of the triangle\n    angle = math.atan2(side_height, side_length)\n    return angle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=h*(w/2)\n    print(a)\n    if a<0:\n        a=0\n    b=math.sqrt(h*h-a*a)\n    print(b)\n    if b<0:\n        b=0\n    c=h+math.sqrt(h*h-b*b)\n    print(c)\n    if c<0:\n        c=0\n    d=a+math.sqrt(a*a-b*b)\n    print(d)\n    if d<0:\n        d=0\n    e=math.sqrt(h*h-c*c)\n    print(e)\n    if e<0:\n        e=0\n    f=math.sqrt(h*h-d*d)\n    print(f)\n    if f<0:\n        f=0\n    return d,e,f\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #comparison = w*h > h*w\n    #if comparison:\n    #    return w*h\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # YOUR CODE HERE\n    if len(listval) == 0:\n        return 0\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for num in listval:\n        if num > max_val:\n            max_val = num\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for val in listval:\n        if val > 0:\n            print(val)\n            return val\n        elif val == 0:\n            print(\"Zero\")\n            return 0\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return 0\n    else:\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # write your code here\n    max = listval[0]\n    for item in listval:\n        if item > max:\n            max = item\n    return max\n    #raise NotImplementedError\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Create a variable to store the maximum value\n    maximum = listval[0]\n    # Iterate through the list\n    for element in listval:\n        # Compare the values\n        if element > maximum:\n            maximum = element\n    # Return the maximum element as a string\n    return maximum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    try:\n        if not isinstance(number, (int, float)):\n            raise TypeError\n        return sum([i for i in range(1, number) if number % i == 0])\n    except TypeError:\n        print(\"Please enter a whole number!\")\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # your code goes here\n    if number == 0:\n        return 0\n    if number < 0:\n        return -1\n    if number in [1,3,5,7,11,13,17,19,23]:\n        return number\n    return number % sum_div(number - 1)"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    if number % 2 == 0:\n        sum = (number // 2) + 1\n    else:\n        sum = (number // 2)\n    for i in range(3, int(sum)):\n        if number % i == 0:\n            sum = i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # define a variable to get the number\n    num = number\n    # initialize a list of divisors\n    divisors = []\n    # if the number is divisible by 2, add the divisor to the list\n    # if not, then add 1 to the sum\n    while num % 2 == 0:\n        divisors.append(2)\n        num = num // 2\n    # if the number is not divisible by 2, then add 1 to the sum\n    while num % 3 == 0:\n        divisors.append(3)\n        num = num // 3\n    # if the number is not divisible by 2, then add 1 to the sum\n    while num % 5 == 0:\n        divisors.append(5)\n        num = num // 5\n    # if the number is not divisible by 3, then add 1 to the sum\n    while num % 7 == 0:\n        divisors.append(7)\n        num = num // 7\n    # if the number is not divisible by 5, then add 1 to the sum\n    while num % 11 == 0:\n        divisors.append(11)\n        num = num // 11\n    # if the number is not divisible by 7, then add 1 to the sum\n    while num % 13 == 0:\n        divisors.append(13)\n        num = num // 13\n    # if the number is not divisible by 11, then add 1 to the sum\n    while num % 17 == 0:\n        divisors.append(17)\n        num = num // 17\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 19 == 0:\n        divisors.append(19)\n        num = num // 19\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 23 == 0:\n        divisors.append(23)\n        num = num // 23\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 29 == 0:\n        divisors.append(29)\n        num = num // 29\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 31 == 0:\n        divisors.append(31)\n        num = num // 31\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 37 == 0:\n        divisors.append(37)\n        num = num // 37\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 41 == 0:\n        divisors.append(41)\n        num = num // 41\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 43 == 0:\n        divisors.append(43)\n        num = num // 43\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 47 == 0:\n        divisors.append(47)\n        num = num // 47\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 49 == 0:\n        divisors.append(49)\n        num = num // 49\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 53 == 0:\n        divisors.append(53)\n        num = num // 53\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 59 == 0:\n        divisors.append(59)\n        num = num // 59\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 61 == 0:\n        divisors.append(61)\n        num = num // 61\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 67 == 0:\n        divisors.append(67)\n        num = num // 67\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 71 == 0:\n        divisors.append(71)\n        num = num // 71\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 73 == 0:\n        divisors.append(73)\n        num = num // 73\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 79 == 0:\n        divisors.append(79)\n        num = num // 79\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 83 == 0:\n        divisors.append(83)\n        num = num // 83\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 89 == 0:\n        divisors.append(89)\n        num = num // 89\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 97 == 0:\n        divisors.append(97)\n        num = num // 97\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 101 == 0:\n        divisors.append(101)\n        num = num // 101\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 103 == 0:\n        divisors.append(103)\n        num = num // 103\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 109 == 0:\n        divisors.append(109)\n        num = num // 109\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 113 == 0:\n        divisors.append(113)\n        num = num // 113\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 119 == 0:\n        divisors.append(119)\n        num = num // 119\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 123 == 0:\n        divisors.append(123)\n        num = num // 123\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 131 == 0:\n        divisors.append(131)\n        num = num // 131\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 137 == 0:\n        divisors.append(137)\n        num = num // 137\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 139 == 0:\n        divisors.append(139)\n        num = num // 139\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 143 == 0:\n        divisors.append(143)\n        num = num // 143\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 149 == 0:\n        divisors.append(149)\n        num = num // 149\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 151 == 0:\n        divisors.append(151)\n        num = num // 151\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 157 == 0:\n        divisors.append(157)\n        num = num // 157\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 161 == 0:\n        divisors.append(161)\n        num = num // 161\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 167 == 0:\n        divisors.append(167)\n        num = num // 167\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 171 == 0:\n        divisors.append(171)\n        num = num // 171\n    # if the number is not divisible by 17, then add 1 to the sum\n    while num % 173 == 0:\n        divisors.append(173)\n        num = num // 173\n    # if the number is not divisible by 19, then add 1 to the sum\n    while num % 179 == 0:\n        divisors.appen"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number < 1:\n        return 0\n    elif number == 2:\n        return 1\n    elif number % 2 == 0:\n        return 0\n    else:\n        return number * sum_div(number-1)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for divisor in range(1, number + 1):\n        if number % divisor == 0:\n            divisors.append(divisor)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1, number + 1):\n        if i % 2 == 0:\n            s += i\n        else:\n            s += i // 2\n            \n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return number + sum_div(number - 1)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    arr.sort()\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count=0\n    for i in arr:\n        if i>0:\n            inv_count+=1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count=0\n    s=set()\n    for i in range(len(arr)-1):\n        s.add(arr[i])\n        for j in range(i,len(arr)):\n            if arr[j] < arr[i]:\n                count+=1\n                s.add(arr[j])\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inversion_Count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j] > arr[i]:\n                Inversion_Count += 1\n    return Inversion_Count\n    \ndef get_median(arr):\n    '''\n    Write a python function to return the median of an array.\n    '''\n    N = len(arr)\n    if N % 2 == 0:\n        return (arr[N//2] + arr[N//2 - 1])/2\n    else:\n        return arr[N//2]\n    \ndef get_median_index(arr, k):\n    '''\n    Write a python function to get the index of the median of an array.\n    '''\n    N = len(arr)\n    if N%2 == 0:\n        mid_idx = (N//2) - k\n        if arr[mid_idx] > arr[mid_idx + 1]:\n            return mid_idx\n        else:\n            return (N//2) - k\n    else:\n        mid_idx = (N//2) - k\n        if arr[mid_idx] > arr[mid_idx + 1]:\n            return mid_idx\n        else:\n            return (N//2) - k\n        \ndef get_median_2(arr, k):\n    '''\n    Write a python function to get the median of an array using the bisection method.\n    '''\n    N = len(arr)\n    if N % 2 == 0:\n        mid_idx = (N//2) - k\n        if arr[mid_idx] > arr[mid_idx + 1]:\n            return arr[mid_idx]\n        else:\n            return arr[mid_idx]\n    else:\n        mid_idx = (N//2) - k\n        if arr[mid_idx] > arr[mid_idx + 1]:\n            return arr[mid_idx]\n        else:\n            return arr[mid_idx]\n        \ndef get_median_index_2(arr, k):\n    '''\n    Write a python function to get the index of the median of an array using the bisection method.\n    '''\n    N = len(arr)\n    if N % 2 == 0:\n        mid_idx = (N//2) - k\n        if arr[mid_idx] > arr[mid_idx + 1]:\n            return mid_idx\n        else:\n            return (N//2) - k\n    else:\n        mid_idx = (N//2) - k\n        if arr[mid_idx] > arr[mid_idx + 1]:\n            return mid_idx\n        else:\n            return (N//2) - k\n    \ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"inversion_count = \",get_Inv_Count(arr))\n    print(\"Median = \",get_median(arr))\n    print(\"median_index = \",get_median_index(arr, 1))\n    print(\"median_index_2 = \",get_median_index_2(arr, 2))\n    print(\"median_index_3 = \",get_median_index_3(arr, 3))\n    \nmain()"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n==1:\n        return 0\n    if n==2:\n        return 0\n    \n    count = 0\n    i = 1\n    j = 2\n    \n    while (i<n and j<n):\n        if arr[i] > arr[j]:\n            arr[i],arr[j] = arr[j],arr[i]\n            i+=1\n            j+=1\n            count+=1\n        i+=1\n        j+=1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i=0\n    j=0\n    inv_count=0\n    while i<len(arr) and j<len(arr):\n        if arr[i]<arr[j]:\n            i+=1\n        elif arr[i]>arr[j]:\n            j+=1\n        else:\n            inv_count+=1\n            i+=1\n            j+=1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    Inv_Count = 0\n    for i in range(len(arr)-1): \n        if arr[i] > arr[i+1]: \n            Inv_Count = Inv_Count+1\n            arr[i],arr[i+1] = arr[i+1],arr[i] \n    return Inv_Count \n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv = 0\n    for i in range(len(arr)):\n        inv += arr[i]\n        inv = inv % 10\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Declare an array as a list of lists\n    a = [[0 for x in range(10)] for x in range(10)]\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] < 0:\n                a[i][j] = a[i][j]\n            else:\n                a[i][j] = 1\n                \n    # Process the array and print the result\n    i = 0\n    while i < len(a):\n        for j in range(len(a[i])):\n            if a[i][j] == 1:\n                for k in range(j, len(a[i])):\n                    if a[i][k] > a[i][j]:\n                        a[i][j], a[i][k] = a[i][k], a[i][j]\n        i += 1\n    \n    # Now we have printed the array in the right format\n    ans = 0\n    for i in range(10):\n        for j in range(10):\n            ans += a[i][j]\n    return ans\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    for i in range(0,n):\n        for j in range(0,n-i-1):\n            if arr[j] > arr[j+1] and arr[j] > arr[j+1] and arr[j] > arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    return arr\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten = []\n    for l in list1:\n        if type(l) == type([]):\n            flatten.extend(flatten_list(l))\n        else:\n            flatten.append(l)\n    return flatten\n    \ndef find_max_value(my_list):\n    '''\n    Write a function to find the maximum value of the given list.\n    '''\n    max_val = my_list[0]\n    for el in my_list:\n        if el > max_val:\n            max_val = el\n    return max_val\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # write your code here\n    flatten_list = []\n    for i in list1:\n        if type(i) == type([]):\n            flatten_list.extend(flatten_list)\n            flatten_list = flatten_list + flatten_list(i)\n        else:\n            flatten_list.append(i)\n    return flatten_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for item in list1:\n        if type(item) == list:\n            for ele in item:\n                output.append(ele)\n        else:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for list_el in list1:\n        if type(list_el) is list:\n            new_list.extend(flatten_list(list_el))\n        else:\n            new_list.append(list_el)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    if isinstance(list1, list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    return list(itertools.chain.from_iterable(list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 is None:\n        return None\n    \n    if list1 is True:\n        return None\n    \n    if list1 is False:\n        return None\n    \n    if list1 is not None:\n        \n        flat_list = []\n        \n        for item in list1:\n            if type(item) == type([]) and type(item[0]) == type([]) and type(item[-1]) == type([]):\n                flatten_list(item)\n                flat_list.extend(item)\n                \n            else:\n                flat_list.append(item)\n        \n        return flat_list\n    \n    return None\n    \ndef is_one_of(list_1, list_2):\n    '''\n    Return True if the given lists are one of each other.\n    '''\n    if len(list_1)!= len(list_2):\n        return False\n    \n    for index in range(len(list_1)):\n        if not is_one_of(list_1[index], list_2[index]):\n            return False\n    return True\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    #return list(map(lambda x: flatten_list(x), list1))\n    if len(list1) == 0:\n        return list1\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        temp = list1[0]\n        for i in list1[1:]:\n            if isinstance(temp, list):\n                temp += flatten_list(i)\n            else:\n                temp.append(i)\n        return temp\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return list1\n    else:\n        return list(flatten_list(list1[0])) + flatten_list(list1[1:])\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate=0\n    for t in stdata:\n        aggregate=0\n        for f in t:\n            aggregate+=f\n        if aggregate>max_aggregate:\n            max_aggregate=aggregate\n    return max_aggregate\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    min_aggregate=0\n    for t in stdata:\n        aggregate=0\n        for f in t:\n            aggregate+=f\n        if aggregate<min_aggregate:\n            min_aggregate=aggregate\n    return min_aggregate\ndef compute_frequency_table(stdata):\n    '''\n    Write a function to count the frequencies from a list of tuples\n    '''\n    frequency_table=defaultdict(int)\n    for t in stdata:\n        for f in t:\n            if f in frequency_table:\n                frequency_table[f]+=1\n    return frequency_table\ndef compute_frequency_table2(stdata):\n    '''\n    Write a function to count the frequencies from a list of tuples\n    '''\n    frequency_table=defaultdict(int)\n    for t in stdata:\n        for f in t:\n            if f in frequency_table:\n                frequency_table[f]+=1\n    return frequency_table\ndef remove_duplicates(stdata):\n    '''\n    Write a function to remove duplicate values from a list of tuples.\n    '''\n    new_stdata=[]\n    for t in stdata:\n        if t not in new_stdata:\n            new_stdata.append(t)\n    return new_stdata\ndef find_min_max(stdata):\n    '''\n    Write a function to find the minimum and maximum values in a list of tuples.\n    '''\n    min_max=0\n    for t in stdata:\n        if t[1]<min_max:\n            min_max=t[1]\n    return min_max\ndef find_mean(stdata):\n    '''\n    Write a function to find the mean values in a list of tuples.\n    '''\n    mean=0\n    for t in stdata:\n        mean+=t[1]\n    return mean/len(stdata)\ndef find_median(stdata):\n    '''\n    Write a function to find the median values in a list of tuples.\n    '''\n    median=0\n    for t in stdata:\n        median+=t[1]\n    return median/len(stdata)\ndef find_mode(stdata):\n    '''\n    Write a function to find the mode values in a list of tuples.\n    '''\n    mode=0\n    freq_sorted=compute_frequency_table(stdata)\n    for k, v in freq_sorted.items():\n        if v>mode:\n            mode=v\n    return mode\ndef find_variance(stdata):\n    '''\n    Write a function to find the variance values in a list of tuples.\n    '''\n    variance=0\n    freq_sorted=compute_frequency_table(stdata)\n    for k, v in freq_sorted.items():\n        if v>variance:\n            variance=v\n    return variance\ndef find_stdev(stdata):\n    '''\n    Write a function to find the standard deviation values in a list of tuples.\n    '''\n    stdev=0\n    for t in stdata:\n        stdev+=t[1]**2\n    return stdev/len(stdata)\ndef find_max_min(stdata):\n    '''\n    Write a function to find the maximum and minimum values in a list of tuples.\n    '''\n    max_min=0\n    for t in stdata:\n        if t[1]>max_min:\n            max_min=t[1]\n    return max_min\ndef find_mean_median_mode(stdata):\n    '''\n    Write a function to find the mean, median, and mode values in a list of tuples.\n    '''\n    mean=0\n    median=0\n    mode=0\n    for t in stdata:\n        mean+=t[1]\n        median+=t[1]**2\n        if t[0]=='Median':\n            mode=t[1]\n        elif t[0]=='Mode':\n            mode=find_mode(t[1])\n    return (mean/len(stdata),median/len(stdata),mode)\ndef find_min_max_mean_median(stdata):\n    '''\n    Write a function to find the minimum and maximum values in a list of tuples.\n    '''\n    min_max=0\n    mean=0\n    median=0\n    mode=0\n    for t in stdata:\n        if t[0]=='Min':\n            min_max=t[1]\n        elif t[0]=='Max':\n            max_min=t[1]\n        elif t[0]=='Mean':\n            mean+=t[1]\n        elif t[0]=='Median':\n            median+=t[1]**2\n            mode+=t[1]\n    return min_max,max_min,mean,median,mode\ndef find_median_mode_stdev(stdata):\n    '''\n    Write a function to find the median, mode, and standard deviation of a list of tuples.\n    '''\n    median=0\n    mode=0\n    stdev=0\n    for t in stdata:\n        if t[0]=='Median':\n            median=t[1]\n        elif t[0]=='Mode':\n            mode=find_mode(t[1])\n        elif t[0]=='Stdev':\n            stdev+=t[1]**2\n            if t[1]>mode:\n                mode=t[1]\n    return (median/len(stdata),mode/len(stdata),stdev/len(stdata))\ndef find_mode_stdev(stdata):\n    '''\n    Write a function to find the mode value and its standard deviation.\n    '''\n    mode=0\n    stdev=0\n    for t in stdata:\n        if t[0]=='Mode':\n            mode=t[1]\n        elif t[0]=='Stdev':\n            stdev+=t[1]**2\n            if t[1]>mode:\n                mode=t[1]\n    return mode,stdev/len(stdata)\ndef find_max_min_mean_median(stdata):\n    '''\n    Write a function to find the maximum and minimum values in a list of tuples.\n    '''\n    max_min=0\n    mean=0\n    median=0\n    mode=0\n    for t in stdata:\n        if t[0]=='Max':\n            max_min=t[1]\n        elif t[0]=='Min':\n            min_max=t[1]\n        elif t[0]=='Mean':\n            mean+=t[1]\n        elif t[0]=='Median':\n            median+=t[1]**2\n            mode+=t[1]\n    return max_min,min_max,mean,median,mode\ndef find_mean_max_median(stdata):\n    '''\n    Write a function to find the mean, maximum and mode values in a list of tuples.\n    '''\n    mean=0\n    max_min=0\n    median=0\n    mode=0\n    for t in stdata:\n        if t[0]=='Mean':\n            mean+=t[1]\n        elif t[0]=='Max':\n            max_min=t[1]\n        elif t[0]=='Median':\n            median+=t[1]**2\n            mode+=t[1]\n    return mean/len(stdata),max_min,median/len(stdata),mode/len(stdata)\ndef find_mean_max_min(stdata):\n    '''\n    Write a function to find the mean, maximum and minimum values in a list of tuples"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = sorted(stdata, key=lambda x: x[1])\n    max_aggregate_tuple = stdata[0]\n    max_aggregate_key = stdata[0][0]\n    # for each tuple\n    for i in range(len(stdata)):\n        if stdata[i][0] > max_aggregate_tuple[0]:\n            max_aggregate_tuple = stdata[i]\n            max_aggregate_key = stdata[i][0]\n    return max_aggregate_key, max_aggregate_tuple[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(lambda: 0)\n    for id in stdata:\n        aggregate[id[0]] += id[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dct = defaultdict(int)\n    for row in stdata:\n        aggregate_dct[row[0]] = aggregate_dct.get(row[0], 0) + row[1]\n    print(aggregate_dct)\n    return max(aggregate_dct.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = 0\n    for i in range(len(stdata)):\n        aggregate = aggregate + stdata[i][1]\n    return aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = sorted(stdata, key=lambda x:x[2], reverse=True)\n    stdata = sorted(stdata, key=lambda x:x[1])\n    return sum(stdata, [])\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #Create an empty dictionary\n    mydict = defaultdict(int)\n    #Go through the list of tuples and compute the total\n    for st in stdata:\n        mydict[st[0]] = mydict[st[0]] + st[1]\n    \n    #Return the maximum aggregate\n    return max(mydict.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #Write your code here\n    #print(stdata)\n    results = list(map(lambda x: (x[0], x[1]), stdata))\n    #print(results)\n    max_result = max(results, key = lambda x: x[1])[1]\n    #print(max_result)\n    return max_result\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    \n    for i in range(0, len(stdata)):\n        if stdata[i][2] > max_aggregate:\n            max_aggregate = stdata[i][2]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) < 2:\n        return stdata[0][0]\n    if len(stdata) == 2:\n        return max(stdata[0][0], stdata[1][0])\n    #print(stdata)\n    #print(len(stdata))\n    #print(max([stdata[x][0] for x in range(len(stdata))], default=0))\n    return max([stdata[x][0] for x in range(len(stdata))], default=0)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_1 = 0 \n    sum_2 = 0 \n    \n    for i in range(1, n+1): \n        sum_1 = sum_1 ^ i \n        sum_2 = sum_2 ^ i \n        \n    if sum_1 == sum_2: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    result = 0\n    for bit in bin(n)[2:]:\n        if bit=='1': result+=1\n    return result\ndef count_binary_seq_fast(n):\n    '''\n    Given a positive integer n,\n    count the number of all binary sequence such that the sum of the first 2n-1 bits is (modulo 10^k).\n    '''\n    result = 0\n    for i in range(n-1):\n        result+=count_binary_seq(i)\n    return result%(10**9+7)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #code:\n    bin_seq = []\n    for i in range(n):\n        bin_seq.append(bin(i)[2:])\n    count = 0\n    for i in range(n):\n        if bin_seq[i] == bin(i)[2:]:\n            count+=1\n    return count\ndef count_bitwise_seq(n): \n    '''\n    Write a function that computes the number of bitwise combinations of length n of given numbers.\n    '''\n    #code:\n    count = 0\n    for i in range(1,n+1):\n        count+=count_binary_seq(i) * count_binary_seq(n-i)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    s = sum(bin(n)[2:])\n    #print(s)\n    x = 0\n    for i in range(0, n):\n        #print(bin(n)[2:])\n        if i % 2 == 0:\n            x = x + bin(n)[2:]\n        else:\n            x = x + bin(n)[2:][::-1]\n    return x\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n <= 0:\n        raise ValueError\n    elif n == 1:\n        return 1\n    else:\n        num_of_zeros = n - 1\n        first_bit_sum = 0\n        last_bit_sum = 0\n        for i in range(num_of_zeros):\n            first_bit_sum += bin(int(bin(n)[:-1])).count('1')\n            last_bit_sum += bin(int(bin(n)[:-1])).count('1')\n        return first_bit_sum + last_bit_sum"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    for x in range(2, n + 1):\n        for y in range(n):\n            if x & 1 == 1:\n                x += 1\n                if x & 1 == 1:\n                    x -= 1\n            else:\n                x = 0\n            if x == 0:\n                for k in range(y, n, y):\n                    if k + 1 == n:\n                        break\n                    print('1' if k % 2 == 0 else '0', end=' ')\n        print()\n    return\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    from math import comb\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    S = [0]\n    for i in range(len(n)-1):\n        S.append(S[-1] + S[-2])\n    for i in range(len(n)):\n        if (S[i] - S[-i-1] == n):\n            print(n, i, S[i] - S[-i-1])\n    return\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count_2 = 0\n    for i in range(n+1):\n        if bin(i)[-1] == '1':\n            count_2 += 1\n    return count_2\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    i = 1\n    num_seq = 0\n    while i < n:\n        while i < n and number[i] == '1':\n            i += 1\n        while i < n and number[i] == '0':\n            i += 1\n        while i < n and number[i] == '1':\n            i += 1\n        num_seq += i - n\n        i += 1\n    return num_seq\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    elif len(d) == 1:\n        return 1\n    else:\n        return 1 + dict_depth(d[1:])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if '__dict__' in d:\n        return 2\n    elif '__weakref__' in d:\n        return 2\n    elif '__doc__' in d:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    print(d)\n    l = len(d)\n    return 1 + max(dict_depth(d[k]) for k in d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key,value in d.items():\n        if type(value) == dict:\n            depth += dict_depth(value)\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if '_' not in d:\n        return 0\n    else:\n        depth = 0\n        for k in d.keys():\n            if k[0] == '_':\n                depth += 1\n            else:\n                depth += dict_depth(d[k])\n        return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    for i in d:\n        print(i)\n        print(d[i])\n        if d[i] < 0:\n            print(i)\n        else:\n            print('\\t')\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    else:\n        return 1 + dict_depth(d.items())\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if '__module__' not in d:\n        return -1\n    else:\n        module = d['__module__']\n        if module == '__builtin__':\n            module = 'builtins'\n        elif module == '__builtin__.filter':\n            module = 'builtins.filter'\n        elif module == '__builtin__.map':\n            module = 'builtins.map'\n        else:\n            return -1\n        \n        if '__dict__' not in d:\n            return -1\n        else:\n            dict = d['__dict__']\n            if dict == None:\n                return -1\n            else:\n                return 1 + dict_depth(dict)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return d[list(d.keys())[0]]\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d,dict):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if arr == [] : return []\n    elif len(arr) == 1 :\n        for i in range(len(ranges)) :\n            if ranges[i][0] <= index < ranges[i][1] : return arr[0]\n        return find_Element(arr[1:],ranges,rotations,index+1)\n    else :\n        for i in range(len(ranges)) :\n            if ranges[i][0] <= index < ranges[i][1] :\n                # if ranges[i][0] <= index < ranges[i][1]:\n                #     return arr[0]\n                return find_Element(arr[1:],ranges,rotations,index+1)\n        return arr[0]\n        \ndef min_max(array):\n    '''\n    Find the minimum and maximum number in a given array.\n    '''\n    if len(array)==0 : return (None,None)\n    min=array[0]\n    max=array[0]\n    for i in range(1,len(array)) :\n        if array[i]<min : min=array[i]\n        if array[i]>max : max=array[i]\n    return (min,max)\n        \ndef is_possible(arr,max,min) :\n    '''\n    Check if a given array can be operated on by numbers between 0 to maximum.\n    '''\n    if max >= min :\n        if len(arr)<=max :\n            return True\n        else : return False\n    else :\n        return False\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = (index+1)%len(ranges)\n    rotations = rotations - 1\n    rotations = rotations + (ranges[index] + 1) % len(ranges[index+1:])\n    return arr[rotations]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initialize variables\n    count = 0\n    temp = -1\n    for i in range(len(arr)) :\n        # find the index in the array where the element is present\n        if arr[i] == index :\n            temp = i\n            count += 1\n    # if the element was found\n    if (count!= 0) :\n        # rotate array\n        rotate_array(arr,rotations)\n        # find the index after the rotation\n        for i in range(len(arr)):\n            if (i < len(arr)) :\n                if (arr[i] == index) :\n                    temp = i\n                    break\n    # if element was not found\n    if (temp!= -1) :\n        # remove from the array\n        arr.pop(temp)\n        # insert the element after the given index\n        arr.insert(temp + count,index)\n        # if we are at the end of the array\n        if (len(arr) == 0) :\n            return -1\n        # if we are at the beginning\n        elif (len(arr) == 1) :\n            return arr[0]\n        # if the element was rotated more than once\n        elif (count!= 1) :\n            rotate_array(arr,rotations)\n            return find_Element(arr,ranges,rotations,index)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = []\n    rotations_list = []\n    if(index!= 0) :\n        arr[0] = arr[index - 1]\n        arr[index] = 0\n        rotations.append(1)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #Initialize the output array\n    output = []\n    #Loop through the array\n    for r in ranges :\n        for rot in rotations :\n            #Make index an integer\n            index = int(index)\n            #If the range is the same as the current index\n            if(r[0] <= index and index <= r[1]):\n                #Check to make sure the index is not already in the output array\n                if(r[2]!= rot):\n                    output.append(arr[index])\n                #If the index is within the range and the rotations are not the same as the current rotation, move to the next index\n                if(index < r[0] and index >= r[1] and rot!= r[2]):\n                    index += 1\n    #If the index is outside the range, go to the next index\n    if(index < r[0] or index > r[1] or index < r[2]):\n        return False\n    else:\n        return(output)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    print(arr)\n    for i in range(len(arr)) :\n        print(arr[i])\n        for j in range(len(ranges)) :\n            print(ranges[j])\n            if ranges[j] == index :\n                for k in range(len(rotations)) :\n                    print(rotations[k])\n                    if rotations[k] == i :\n                        print(arr[j+1])\n            else :\n                print(\"Wrong value \")\n    return arr[i]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[0] >= ranges[1] :\n        print('Range is larger than min and max')\n        return -1\n    else :\n        #print(rotations)\n        print(index)\n        if rotations == 0 :\n            print('rotations is 0')\n            return arr[index]\n        else :\n            index_of_rotations = int(index) % len(ranges)\n            #print(ranges[index_of_rotations])\n            print('the index is',index_of_rotations)\n            print('the min is',ranges[index_of_rotations])\n            print('the max is',ranges[(index_of_rotations+1) % len(ranges)])\n            print('which is',arr[index_of_rotations])\n            index_of_rotations += 1\n            return find_Element(arr,ranges,rotations - 1,index_of_rotations)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if not arr or len(arr) == 0 :\n        return None\n    if index >= len(arr) :\n        return None\n    \n    for i in range(0,len(arr),2) :\n        if index % 2 == 1 :\n            return arr[i] + find_Element(arr[i+1:],ranges,rotations,index//2)\n        else :\n            return arr[i] + find_Element(arr[i+1:i+3],ranges,rotations,index//2) + arr[i+2]\n    \ndef find_sorted(arr, ranges) :\n    '''\n    Write a python function to find first sorted element.\n    '''\n    sorted_arr = []\n    for i in range(len(arr)-1) :\n        if arr[i+1] - arr[i] > 0 :\n            sorted_arr.append((arr[i],arr[i+1]))\n    if len(sorted_arr) == 0 :\n        return None\n    \n    sorted_arr.sort()\n    \n    print(*sorted_arr)\n    return sorted_arr[0][0]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    global count\n    global length\n    global x\n    global y\n    global x_bound\n    global y_bound\n    global length_rotations\n    global x_rotations\n    global y_rotations\n    global x_bound_rotations\n    global y_bound_rotations\n    if (arr == []):\n        return False\n    if (index == 0) :\n        return arr[index]\n    if (index < 0) :\n        return False\n    if (index > (length-1)) :\n        return False\n    if (index >= length) :\n        return False\n    if (ranges[index] == [0,0]):\n        return arr[index]\n    for i in range(index,len(ranges)-1) :\n        for j in range(i,index+1) :\n            if (ranges[i][0] <= ranges[j][0] <= ranges[i][1] and ranges[j][1] <= ranges[i][0] <= ranges[j][1]):\n                if (j+1 == i) :\n                    x_bound = ranges[i][0]\n                    y_bound = ranges[i][1]\n                    length = j\n                    x = ranges[i][0]\n                    y = ranges[i][1]\n                    x_rotations = i+1\n                    y_rotations = j+1\n                    if (index == length-1) :\n                        return arr[length-1]\n                    if (count == 0) :\n                        count = count + 1\n                        return arr[length-1]\n                    if (count == 2) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 3) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 4) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 5) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 6) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 7) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 8) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 9) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 10) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 11) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 12) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 13) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 14) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 15) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 16) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 17) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 18) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 19) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 20) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 21) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 22) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 23) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 24) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 25) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 26) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 27) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 28) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 29) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 30) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 31) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 32) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 33) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 34) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 35) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 36) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 37) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 38) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 39) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 40) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 41) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 42) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 43) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 44) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 45) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 46) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 47) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 48) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 49) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 50) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 51) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 52) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 53) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 54) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 55) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 56) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 57) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 58) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 59) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 60) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 61) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 62) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 63) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 64) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 65) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 66) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 67) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 68) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 69) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 70) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 71) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 72) :\n                        count = 0\n                        return arr[length-1]\n                    if (count == 73"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index = 0\n    rotations = 0\n    rotations = 0\n    while index < len(arr) :\n        index = index + 1\n        rotations = rotations + 1\n        #print(rotations)\n        if rotations % 2 == 1 :\n            for i in range(rotations) :\n                if index < len(arr) :\n                    if index == arr[index] :\n                        return arr[index]\n                elif index > arr[index] :\n                    return arr[index]\n        else :\n            for i in range(rotations) :\n                if index < len(arr) :\n                    if index == arr[index] :\n                        return arr[index]\n                elif index > arr[index] :\n                    return arr[index]\n    return -1\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            yield word\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            first_word = words[i][1:]\n            return first_word, words[i][1:]\n    return \"\", \"\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    flag = True\n    for i in words:\n        if i[0]!= 'p':\n            flag = False\n        if flag:\n            yield i\n        flag = True\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    try:\n        new_list = []\n        for i in words:\n            if i[0] == 'p':\n                new_list.append(i)\n    except:\n        return \"Failed to return two words\"\n    else:\n        return new_list\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    word_list = []\n    word_p = []\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0]=='p':\n            return (i[1:],i[0])\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return \"\".join(words[0:len(words)-2])\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = words[0]\n    for word in words:\n        if word[0] == p[0]:\n            return word, p\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for x in words:\n        if x.startswith('p'):\n            return x, x[2:]\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    def p_start(words):\n        for word in words:\n            if word[0]!= 'p':\n                return word\n    return p_start(words)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[n]\n    if k == n - index:\n        return max(a[index:n])\n    else:\n        if k > n - index:\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n        return max(a[index:n] + max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= 0 or index < 0 or k <= 0 or a[index] < a[index + 1]:\n        return a[index]\n    max_sum = a[index]\n    l = max_sum_increasing_subseq(a, n, index, k)\n    r = a[index + 1]\n    for i in range(index + 1, n):\n        max_sum = max(max_sum, r + a[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    res = float('-inf')\n    i = index\n    while i < n:\n        res = max(res, a[i] + k * (i + 1))\n        if a[i] + k > index:\n            res = max(res, a[i] + k * (index + 1))\n        i += 1\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum = 0\n    max_sum = 0\n    idx = 0\n    prefix = []\n    for i in range(index, n):\n        prefix.append(a[i])\n        if k < i:\n            sum = max_sum\n            break\n        if sum < k:\n            sum = 0\n        if sum < k:\n            sum = prefix[idx]\n            idx += 1\n    max_sum = max(sum, prefix[idx])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if k == 1:\n    #     return sum(a[index:])\n    #\n    #     # dp[i][index] = max(a[index:i] + dp[i-1][index-1], a[index:i] + dp[i-1][index-2])\n    #     dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    #     for i in range(1, n+1):\n    #         dp[1][i] = i\n    #     for i in range(1, k+1):\n    #         dp[i][0] = 0\n    #     for i in range(1, k+1):\n    #         for i2 in range(1, n+1):\n    #             if i2 + i >= i:\n    #                 dp[i][i2] = max(a[i2] + dp[i-1][i2-1], a[i2] + dp[i-1][i2-2])\n    #             else:\n    #                 dp[i][i2] = max(a[i2] + dp[i-1][i2-1], a[i2] + dp[i-1][i2-2])\n    #\n    #     return dp[k][n]\n    #\n    # return max_sum_increasing_subseq(a, n, index, k)\n    if k == 1:\n        return a[index]\n    else:\n        return max_sum_increasing_subseq(a, n, index, k - 1) + max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Write your code here\n    res = 0\n    max_sum = -math.inf\n    # res - 1 because we have already know the starting index for the subsequence\n    # max_sum - 1 because this is already max_sum >= 0 for max_sum < 0\n    for i in range(index, n):\n        # find the previous element\n        pre = index - 1 - i\n        # if the element is greater than the max sum, we can stop here\n        if a[pre] > max_sum:\n            # we found the maximum of the current element and the previous element\n            max_sum = a[pre]\n            # increment the res\n            res = i - index\n    return res, max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    start = index\n    for i in range(index, n):\n        if max_sum < a[i]:\n            max_sum = a[i]\n            start = i\n    if k < start:\n        return -1\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if index == n + 1:\n        return sum(a)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    k = k % n\n    max_sum = a[index]\n    i = index\n    while i < n and k > 0:\n        if a[i] > max_sum:\n            max_sum = a[i]\n        elif a[i] < max_sum:\n            i += 1\n        k -= 1\n    return max_sum + a[i]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k < 0:\n        return 0\n    elif k == 0:\n        return sum(a[index:])\n    else:\n        return max(max_sum_increasing_subseq(a, n, index, k - 1), max_sum_increasing_subseq(a, n, index, k)) + a[index]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(tuplex[i][n])\n    return col\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m):\n        for j in range(n):\n            tuplex[i][j] = m[i][j]\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #raise NotImplementedError('Need to figure out a way to solve this problem')\n    c = ''\n    if tuplex[m]!='.':\n        c = tuplex[m]+'='\n    #print(tuplex)\n    #print(tuplex[n])\n    #print('----')\n    for i in range(n+1):\n        if tuplex[i]!=tuplex[n+i]:\n            c+=tuplex[i]+' '\n    return c\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    out = []\n    if m == 0:\n        out = tuplex[n:]\n    else:\n        for i in range(n):\n            out.append(tuplex[i])\n        if m > 1:\n            for i in range(m-2):\n                out.append(tuplex[i])\n            out.extend(tuplex[n:])\n        else:\n            out = tuplex[:n]\n    return out\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(tuplex[i][n])\n    return col\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)!= 2:\n        raise Exception('Colon is not a tuple')\n    for i in range(m):\n        tuplex[i] = tuplex[i][:n]\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m=deepcopy(m)\n    n=deepcopy(n)\n    tuplex=deepcopy(tuplex)\n    if len(tuplex)==0:\n        return (0, 0)\n    elif len(tuplex)==1:\n        return tuplex[0]\n    elif len(tuplex)==2:\n        return tuplex[0][0]+tuplex[1][0]\n    else:\n        for i in range(len(tuplex)-1):\n            for j in range(len(tuplex)-i-1):\n                if tuplex[j][0]==tuplex[j+1][0]:\n                    temp=tuplex[j][1]+tuplex[j+1][1]\n                    tuplex[j]=tuplex[j][0]\n                    tuplex[j+1]=temp\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Find the number of columns\n    cols=len(tuplex[0])\n    # Initialize a new tuple\n    t=tuplex[0]\n    # Loop through each element and split them into columns\n    for i in range(len(tuplex)):\n        # If the column size is less than the required\n        if(len(tuplex[i])<n):\n            # Insert the value in the correct position\n            t=t+(tuplex[i])\n        # If the column size is bigger than the required\n        elif(len(tuplex[i])>n):\n            # Update the column size\n            t=t+(tuplex[i][:n])\n    # Return the new tuple\n    return t\ndef find_cols(tuplex,n):\n    '''\n    Find the number of columns in a tuple\n    '''\n    # Find the number of columns\n    cols=len(tuplex[0])\n    # Return the number of columns\n    return cols\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    for i in range(m):\n        tuplex_copy.insert(n,(tuplex_copy.pop(n) * n))\n    return tuplex_copy\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    r_tuplex = []\n    for t in tuplex:\n        r_tuplex.append(t[m])\n    return r_tuplex\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return max(large_product_helper(nums1, nums2, N, 0, 0, 0), large_product_helper(nums2, nums1, N, 0, 0, 0))\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for n in nums1:\n        for m in nums2:\n            if n * m == N:\n                res.append(n * m)\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    i = 0\n    for j in range(N):\n        for k in range(i, N):\n            if nums1[j] * nums2[k] > 0:\n                result.append([nums1[j], nums2[k]])\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Base case\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    \n    # Base case for the most common case\n    if nums1 == [] or nums2 == []:\n        return 0\n    if nums1[0] < nums2[0]:\n        return large_product(nums1[1:], nums2[1:], N-1)\n    else:\n        return large_product(nums1, nums2[1:], N-1)\n        \n    \ndef main():\n    print(large_product([2,3,5,1], [3,4,6,1], 5))\n    print(large_product([1,2,3,4,5], [1,3,4,2,5], 4))\n    print(large_product([1,2,3,4,5], [1,3,4,2,5], 5))\n    print(large_product([], [], 0))\n    print(large_product([1,2,3,4,5], [], 5))\n    print(large_product([1,2,3,4,5], [], 5))\n    \n    \nmain()"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    candidates = []\n    result = []\n    \n    # 2, 3, 5, 9, 15, \u2026\u2026\n    for num1 in nums1:\n        # 3, 6, 9, 15, \u2026\u2026\n        for num2 in nums2:\n            # 4, 8, 12, \u2026\u2026\n            for num3 in range(N):\n                if num1 * num2 * num3 == num1 * num2 * num3:\n                    candidates.append([num1, num2, num3])\n                    result.append(num1 * num2 * num3)\n    \n    # Find product of all candidates and return the largest product.\n    # If there are multiple products, return the product with the largest product.\n    return max(result)\n    \n    "
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # nums1 = [1, 2, 5]\n    # nums2 = [1, 2, 4]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    L = nums1\n    R = nums2\n    if len(L) < len(R):\n        small = L\n        large = R\n    else:\n        small = R\n        large = L\n    \n    # make a table to store the products\n    product_table = []\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    nums1_plus_nums2 = []\n    for i in range(len(nums1)):\n        nums1_plus_nums2.append(nums1[i] + nums2[i])\n    result = 0\n    for i in range(len(nums1_plus_nums2)):\n        if len(nums1_plus_nums2) > N:\n            break\n        if nums1_plus_nums2[i] >= N:\n            result += N\n            nums1_plus_nums2.remove(nums1_plus_nums2[i])\n    return result\n    "
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    l_prod = []\n    l_prod = [[] for i in range(N)]\n    #print(l_prod)\n    for i in range(N):\n        for j in range(i+1,N):\n            if nums1[i] > nums1[j]:\n                l_prod[i] = l_prod[i] + [nums1[i]]\n            else:\n                l_prod[j] = l_prod[j] + [nums1[i]]\n    #print(l_prod)\n    #print(l_prod[0])\n    \n    for i in range(N-1, -1, -1):\n        for j in range(i+1,N):\n            if nums2[i] > nums2[j]:\n                l_prod[i] = l_prod[i] + [nums2[j]]\n            else:\n                l_prod[j] = l_prod[j] + [nums2[i]]\n    #print(l_prod)\n    \n    #print(l_prod[0])\n    \n    max_prod = 0\n    for i in range(N):\n        prod = 0\n        for j in range(i+1,N):\n            #print(l_prod[i], l_prod[j])\n            prod = prod + int(l_prod[i][0]) * int(l_prod[j][0])\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod\n    \ndef largest_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    l_prod = []\n    l_prod = [[] for i in range(N)]\n    for i in range(N):\n        for j in range(i+1,N):\n            if nums1[i] > nums1[j]:\n                l_prod[i] = l_prod[i] + [nums1[i]]\n            else:\n                l_prod[j] = l_prod[j] + [nums1[i]]\n    for i in range(N-1, -1, -1):\n        for j in range(i+1,N):\n            if nums2[i] > nums2[j]:\n                l_prod[i] = l_prod[i] + [nums2[j]]\n            else:\n                l_prod[j] = l_prod[j] + [nums2[i]]\n    #print(l_prod)\n    \n    #print(l_prod[0])\n    \n    max_prod = 0\n    for i in range(N):\n        prod = 0\n        for j in range(i+1,N):\n            #print(l_prod[i], l_prod[j])\n            prod = prod + int(l_prod[i][0]) * int(l_prod[j][0])\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod\n    \ndef largest_product_naive(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_prod = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            temp = 0\n            for k in range(i,j):\n                temp = temp + int(nums1[k]) * int(nums2[k])\n            if temp > max_prod:\n                max_prod = temp\n    return max_prod\n    \n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def add_smaller_num(nums1, nums2, N):\n        '''\n        Add smaller number from given list to list.\n        '''\n        num_greater_num = []\n        for i in nums1:\n            if i > nums2[N-1]:\n                num_greater_num.append(i)\n        return num_greater_num\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)!= int:\n        raise TypeError('a must be an integer')\n    if type(b)!= int:\n        raise TypeError('b must be an integer')\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if type(a)!= int:\n        raise TypeError('a must be an integer')\n    if type(b)!= int:\n        raise TypeError('b must be an integer')\n    if a<b:\n        return a\n    else:\n        return b\ndef sum_list(l):\n    '''\n    This function returns the sum of the elements in a list.\n    '''\n    if type(l) == list:\n        sum = 0\n        for x in l:\n            sum = sum + x\n        return sum\n    else:\n        raise TypeError('list must be of type list')\ndef index(l,x):\n    '''\n    This function returns the index of the element x in a list.\n    '''\n    if type(l) == list:\n        try:\n            return l.index(x)\n        except:\n            raise ValueError('The value {} is not in the list'.format(x))\n    else:\n        raise TypeError('list must be of type list')\ndef product_list(l):\n    '''\n    This function returns the product of the elements in a list.\n    '''\n    if type(l) == list:\n        result = 1\n        for x in l:\n            result = result * x\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef product_dict(d):\n    '''\n    This function returns the product of the dictionary keys and their values.\n    '''\n    result = 1\n    for k in d:\n        result = result * d[k]\n    return result\ndef count_list(l):\n    '''\n    This function returns the number of elements in a list.\n    '''\n    if type(l) == list:\n        result = len(l)\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef all_even_num_list(l):\n    '''\n    This function returns all the elements of a list whose value are even.\n    '''\n    if type(l) == list:\n        result = []\n        for x in l:\n            if x % 2 == 0:\n                result.append(x)\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef all_even_num_dict(d):\n    '''\n    This function returns all the elements of a dictionary whose value are even.\n    '''\n    if type(d) == dict:\n        result = {}\n        for k in d:\n            if d[k] % 2 == 0:\n                result[k] = d[k]\n        return result\n    else:\n        raise TypeError('dict must be of type dict')\ndef all_even_num_list(l):\n    '''\n    This function returns all the elements of a list whose value are even.\n    '''\n    if type(l) == list:\n        result = []\n        for x in l:\n            if x % 2 == 0:\n                result.append(x)\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef divide_list(l):\n    '''\n    This function returns the list divided by a number.\n    '''\n    if type(l) == list:\n        if l == []:\n            return []\n        if len(l) == 1:\n            return [l[0]]\n        result = []\n        for x in l:\n            result.append(x / l[0])\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef divide_dict(d):\n    '''\n    This function returns the dict divided by a number.\n    '''\n    if type(d) == dict:\n        if d == {}:\n            return {}\n        result = {}\n        for k in d:\n            result[k] = d[k] / d[k]\n        return result\n    else:\n        raise TypeError('dict must be of type dict')\ndef multiply_list(l):\n    '''\n    This function returns the list multiplied by a number.\n    '''\n    if type(l) == list:\n        if l == []:\n            return []\n        if len(l) == 1:\n            return l[0]\n        result = []\n        for x in l:\n            result.append(l[0] * x)\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef multiply_dict(d):\n    '''\n    This function returns the dict multiplied by a number.\n    '''\n    if type(d) == dict:\n        if d == {}:\n            return {}\n        result = {}\n        for k in d:\n            result[k] = d[k] * d[k]\n        return result\n    else:\n        raise TypeError('dict must be of type dict')\ndef divide_even_num(l):\n    '''\n    This function returns the list divided by an even number.\n    '''\n    if type(l) == list:\n        if l == []:\n            return []\n        if len(l) == 1:\n            return [l[0]]\n        result = []\n        for x in l:\n            if x % 2 == 0:\n                result.append(x)\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef divide_by_n_even_num(l, n):\n    '''\n    This function returns the list divided by an even number.\n    '''\n    if type(l) == list:\n        if l == []:\n            return []\n        if len(l) == 1:\n            return [l[0]]\n        result = []\n        for x in l:\n            if x % n == 0:\n                result.append(x)\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef divide_by_even_n_even_num(l, n):\n    '''\n    This function returns the list divided by an even number.\n    '''\n    if type(l) == list:\n        if l == []:\n            return []\n        if len(l) == 1:\n            return [l[0]]\n        result = []\n        for x in l:\n            if x % n == 0:\n                result.append(x)\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef multiply_even_num_list(l):\n    '''\n    This function returns the list multiplied by an even number.\n    '''\n    if type(l) == list:\n        if l == []:\n            return []\n        if len(l) == 1:\n            return [l[0]]\n        result = []\n        for x in l:\n            if x % 2 == 0:\n                result.append(x)\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef multiply_by_n_even_num_list(l, n):\n    '''\n    This function returns the list multiplied by an even number.\n    '''\n    if type(l) == list:\n        if l == []:\n            return []\n        if len(l) == 1:\n            return [l[0]]\n        result = []\n        for x in l:\n            if x % n == 0:\n                result.append(x)\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef multiply_by_even_n_even_num_list(l, n):\n    '''\n    This function returns the list multiplied by an even number.\n    '''\n    if type(l) == list:\n        if l == []:\n            return []\n        if len(l) == 1:\n            return [l[0]]\n        result = []\n        for x in l:\n            if x % n == 0:\n                result.append(x)\n        return result\n    else:\n        raise TypeError('list must be of type list')\ndef multiply_even_num_dict(d):\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(a, b)\n    if a>b:\n        return a\n    else:\n        return b\na=int(input(\"Enter a number: \"))\nb=int(input(\"Enter a number: \"))\nprint(maximum(a,b)"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return (a+b)/2\ndef rounding(a,b):\n    '''\n    Write a python function to find the rounded version of two numbers.\n    '''\n    return round(a,2)\ndef is_odd(n):\n    '''\n    Write a python function to check whether an integer is odd or even.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\ndef main():\n    print('The following data type is being stored: ')\n    print('1. Integer\\n2. Float\\n3. Boolean\\n4. List\\n5. String')\n    a = input('Please enter an integer: ')\n    b = input('Please enter another integer: ')\n    print(f'Your integer ({a}) is {type(a)}')\n    print(f'Your integer ({b}) is {type(b)}')\n    print(f'Your integer ({a}+{b}) is {rounding(a,b)}')\n    print(f'Your integer ({a}-{b}) is {rounding(-a,b)}')\n    print(f'Your integer ({a}*{b}) is {a}')\n    print(f'Your integer ({a}/{b}) is {rounding(a/b,a)}')\n    print(f'Your integer ({a}/{b})*{b} is {a}')\n    print(f'Your integer ({a}/{b})*{b} is {rounding(a/b,b)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,a)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,b)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,a)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,a)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,a)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,b)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,b)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,a)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,b)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,a)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,b)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,a)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,a)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,b)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,b)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,a)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,b)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,a)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,b)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,a)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,b)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,a)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,b)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,b)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,b)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,a)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,b)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,a)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,b)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,a)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,b)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,a)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,b)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,b)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,b)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,a)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,b)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,a)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,b)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,a)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,b)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,a)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,b)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,a)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,b)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,a)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,b)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,b)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,a)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,b)}')\n    print(f'Your integer ({a}<{b}) is {rounding(a<b,b)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,a)}')\n    print(f'Your integer ({a}%{b}) is {rounding(a%b,b)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,a)}')\n    print(f'Your integer ({a}=={b}) is {rounding(a==b,b)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,a)}')\n    print(f'Your integer ({a}>{b}) is {rounding(a>b,b)}')\n    print(f'Your integer ({a}>{b}) is {roundin"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    c=a\n    if b==0:\n        return a\n    while(b>0):\n        c=a%b\n        a=b\n        b=c\n    return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        print('Input must be of integer type')\n    elif a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return 0\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\na=int(input(\"Enter a: \"))\nb=int(input(\"Enter b: \"))\nprint(\"Maximum of the two number is: \",maximum(a,b))\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = list(str1)\n    return tuple(list1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = tuple(str1)\n    return t\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    result = tuple(str1)\n    return result\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_of_characters = []\n    for character in str1:\n        tuple_of_characters.append(character)\n    return tuple_of_characters\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = list(str1)\n    return tuple(lst)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str_list = str1.split()\n    return tuple(str_list)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for c in str1:\n        lst.append(c)\n    return tuple(lst)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split(' ')\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = list(str1)\n    return tuple1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & (1 << 15)) > 0 \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Your code here\n    # Read the bit array and put it in the bit array\n    # then check for the most significant bit\n    # i.e. bit 5 of our bit array\n    # if the most significant bit is set, replace it with 1\n    # else set it as 0\n    # you'll need to make the bit array a numpy array\n    # because you can only set one bit at a time\n    # so you need to convert the binary number to an integer\n    # and use a bitwise operator with 0 in the left-most bit\n    # to find the number of bits set to 1\n    # you'll need to take the bit array and then convert to an integer\n    # you can convert a bit number to a string by using str()\n    # note that the code above convert the bit array to a string\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # assume n is a number\n    n &= n-1\n    while n:\n        # if n is 1, set n-1 to 1\n        # if n is 0, set n-1 to 0\n        n -= 1\n    # convert n to a binary number\n    return bin(n).lstrip('0b')[-1]\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & n - 1:\n        n -= 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n in range(0, 0xFFFF):\n        return n\n    else:\n        return 0\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n &= n - 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 3\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Define the bits\n    bits = n.to_bytes(8, 'little')\n    # Create bit\n    bit = b'\\x00'\n    # Go through all bits\n    for i in range(len(bits)):\n        # Check if bit is set\n        if bits[i] == '1':\n            # Set bit\n            bit = bit + '1'\n        else:\n            # Flip bit\n            bit = bit + '0'\n    return bit\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & n - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert type(n) is int, 'Argument n must be an int.'\n    assert n >= 0, 'Argument n must be non-negative.'\n    assert n & (n - 1) == 0, 'Argument n must be a power of 2.'\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(0, n): \n        if (not m.get(i)): \n            m[i] = True\n    return m\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 4/3 * math.pi * r * h**3\n    return v\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = (4/3) * math.pi * r * h**3\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #log volume of cone\n    vol = math.pi*r**2*h**2\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    m=1\n    n=1\n    while n<=(r-1):\n        m=(m+1)*(n+1)\n        n=n+1\n    return (m*math.pi)*(math.pow(h,m/2))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    c = 4*math.pi*r**2\n    d = 2*h*math.pi*r\n    v = c*d\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    c = math.pi*(r**2)*h**3\n    return c\ndef angle_between(a,b):\n    '''\n    Write a function to find the angle between two vectors.\n    '''\n    \n    return math.atan2(math.sin(a)*math.sin(b),math.cos(a)*math.cos(b))\ndef angle_between_two_vectors(v1,v2):\n    '''\n    Write a function to find the angle between two vectors.\n    '''\n    \n    return math.atan2(math.sin(v1[0])*math.sin(v1[1])*math.cos(v1[2])*math.cos(v2[2])+math.sin(v1[0])*math.sin(v2[0])*math.sin(v1[1])*math.sin(v2[1])*math.sin(v1[2]),math.cos(v1[0])*math.sin(v1[1])*math.cos(v1[2])*math.cos(v2[2])-math.cos(v1[0])*math.sin(v2[0])*math.sin(v1[1])*math.sin(v2[1])+math.cos(v1[0])*math.sin(v2[0])*math.cos(v1[1])*math.cos(v2[2]))\ndef angle_between_two_vectors_linear(v1,v2):\n    '''\n    Write a function to find the angle between two vectors.\n    '''\n    \n    return math.atan2(math.sin(v1[0])*math.sin(v1[1])*math.sin(v2[2])+math.sin(v1[0])*math.sin(v2[0])*math.sin(v1[1])*math.sin(v2[2]),math.cos(v1[0])*math.sin(v1[1])*math.cos(v2[2])-math.cos(v1[0])*math.sin(v2[0])*math.sin(v1[1])*math.cos(v2[2]))\ndef distance_between_two_vectors(v1,v2):\n    '''\n    Write a function to find the distance between two vectors.\n    '''\n    \n    return math.sqrt((v1[0]-v2[0])**2+(v1[1]-v2[1])**2+(v1[2]-v2[2])**2)\ndef azimuth_between_two_vectors(v1,v2):\n    '''\n    Write a function to find the azimuth between two vectors.\n    '''\n    \n    return math.atan2(v1[1]*math.cos(v1[2])-v1[0]*math.sin(v1[2]),v1[0]*math.cos(v1[2])-v1[1]*math.sin(v1[2]))\ndef normal_between_two_vectors(v1,v2):\n    '''\n    Write a function to find the normal between two vectors.\n    '''\n    \n    return math.sqrt(math.pow(v1[0]-v2[0],2)+math.pow(v1[1]-v2[1],2)+math.pow(v1[2]-v2[2],2))\ndef normal_between_two_vectors_linear(v1,v2):\n    '''\n    Write a function to find the normal between two vectors.\n    '''\n    \n    return math.sqrt(math.pow(v1[0]-v2[0],2)+math.pow(v1[1]-v2[1],2)+math.pow(v1[2]-v2[2],2))\ndef distance_between_two_vectors_one(v1,v2):\n    '''\n    Write a function to find the distance between two vectors.\n    '''\n    \n    return math.sqrt(math.pow(v1[0]-v2[0],2)+math.pow(v1[1]-v2[1],2)+math.pow(v1[2]-v2[2],2))\ndef horizontal_angle_between_two_vectors(v1,v2):\n    '''\n    Write a function to find the horizontal angle between two vectors.\n    '''\n    \n    return math.atan2(v1[1]*math.cos(v1[2])-v1[0]*math.sin(v1[2]),v1[0]*math.cos(v1[2])-v1[1]*math.sin(v1[2]))\ndef vertical_angle_between_two_vectors(v1,v2):\n    '''\n    Write a function to find the vertical angle between two vectors.\n    '''\n    \n    return math.atan2(v1[0]*math.sin(v1[2])-v1[1]*math.cos(v1[2]),v1[1]*math.sin(v1[2])-v1[0]*math.cos(v1[2]))\ndef horizontal_angle_between_two_vectors_one(v1,v2):\n    '''\n    Write a function to find the horizontal angle between two vectors.\n    '''\n    \n    return math.atan2(v1[1]*math.cos(v1[2])-v1[0]*math.sin(v1[2]),v1[0]*math.cos(v1[2])-v1[1]*math.sin(v1[2]))\ndef vertical_angle_between_two_vectors_one(v1,v2):\n    '''\n    Write a function to find the vertical angle between two vectors.\n    '''\n    \n    return math.atan2(v1[0]*math.sin(v1[2])-v1[1]*math.cos(v1[2]),v1[1]*math.sin(v1[2])-v1[0]*math.cos(v1[2]))\ndef angle_between_two_vectors_two(v1,v2):\n    '''\n    Write a function to find the angle between two vectors.\n    '''\n    \n    return math.atan2(v1[1]*math.sin(v1[2])-v1[0]*math.cos(v1[2]),v1[0]*math.sin(v1[2])-v1[1]*math.cos(v1[2]))\ndef vertical_angle_between_two_vectors_two(v1,v2):\n    '''\n    Write a function to find the vertical angle between two vectors.\n    '''\n    \n    return math.atan2(v1[0]*math.sin(v1[2])-v1[1]*math.cos(v1[2]),v1[1]*math.sin(v1[2])-v1[0]*math.cos(v1[2]))\ndef angle_between_two_vectors_three(v1,v2):\n    '''\n    Write a function to find the angle between two vectors.\n    '''\n    \n    return math.atan2(v1[1]*math.sin(v1[2])-v1[0]*math.cos(v1[2]),v1[0]*math.sin(v1[2])-v1[1]*math.cos(v1[2]))\ndef angle_between_two_vectors_three_one(v1,v2):\n    '''\n    Write a function to find the angle between two vectors.\n    '''\n    \n    return math.atan2(v1[0]*math.sin(v1[2])-v1[1]*math.cos(v1[2]),v1[1]*math.sin(v1[2])-v1[0]*math.cos(v1[2]))\ndef angle_between_two_vectors_two_one(v1,v2):\n    '''\n    Write a function to find the angle between two vectors.\n    '''\n    \n    return math.atan2(v1[0]*math.sin"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 0.5*h*(math.pi*r**2)*(1/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Initialize the volume of the cone to 0\n    volume = 0\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4 * r ** 3 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h**3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*math.pi\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 0\n    while n > 1:\n        n = n//2\n        if n%2 == 1:\n            p = p + 1\n    return p\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # To find the highest power of 2 that is less than or equal to n\n    low = 2\n    i = 1\n    high = n\n    while (i <= high):\n        if (low == high):\n            break\n        if (low % 2 == 0 and high % 2 == 0):\n            break\n        i += 1\n        if (low == high):\n            break\n        if (low % 2!= 0 and high % 2!= 0):\n            break\n        low = low + 2\n        high = high + 2\n    return high\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<=0: \n        return 0\n    while n%2==0: \n        n=n//2\n    if n==1:\n        return 2\n    return highest_Power_of_2(n//2) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n <= 0:\n        return 0\n    else:\n        for i in range(1, n+1):\n            if n%i==0:\n                return i\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # define a loop that will run until n is greater than 2\n    # if the current number is greater than 2, then it will be returned\n    # this loop is run and the function will stop at n \n    # if n is less than 2, then it will not run the loop\n    # loop will return until n is greater than 2 \n    n_loop = 0\n    while n > 0:\n        n_loop = n_loop + 1\n        if n % 2 == 1:\n            return n_loop\n        n = n // 2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    ans = 0\n    for i in range(n+1): \n        ans = ans + i \n        if ans % 2 == 0: \n            print(ans)\n    print(ans) \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    maximum = 0\n    for i in range(2, n):\n        if n % i == 0:\n            maximum = maximum + i\n    if maximum < n:\n        return maximum\n    return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1:\n        return 0\n    if n < 1:\n        return -1\n    while n%2:\n        n = n//2\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<=1:\n        return 'We only want n > 1'\n    else:\n        power=1\n        while n%2==0:\n            n=n//2\n            power+=1\n        return power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = int(n)\n    if x >= 1:\n        return highest_Power_of_2(x - 1)\n    else:\n        return 1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = []\n    for a in range(0, n + 1):\n        if a == 0:\n            lucas_numbers.append(a + 1)\n            continue\n        if a == 1:\n            lucas_numbers.append(a + 2)\n            continue\n        if a == 2:\n            lucas_numbers.append(a + 3)\n            continue\n        if a == 3:\n            lucas_numbers.append(a + 4)\n            continue\n        if a == 4:\n            lucas_numbers.append(a + 5)\n            continue\n        if a == 5:\n            lucas_numbers.append(a + 6)\n            continue\n        if a == 6:\n            lucas_numbers.append(a + 7)\n            continue\n        if a == 7:\n            lucas_numbers.append(a + 8)\n            continue\n        if a == 8:\n            lucas_numbers.append(a + 9)\n            continue\n        if a == 9:\n            lucas_numbers.append(a + 10)\n            continue\n    return lucas_numbers\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = [3, 1]\n    y = [1, 1]\n    for i in range(2, n + 1):\n        z = [x[0] + 2*x[1] - z[0] - z[1] for x in x]\n        x = [x[0] + 2*x[1] - z[0] - z[1] for x in x]\n        y = [y[0] + 2*y[1] - z[0] - z[1] for y in y]\n        z = [z[0] + 2*z[1] - z[0] - z[1] for z in z]\n        if z[0] == 0:\n            return 0\n        else:\n            return i\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n<=1: return n\n    if n==2: return 1\n    if n%2==0: return find_lucas(n-1)\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(1, n+1): \n        if i==1: \n            return i \n        elif i==2: \n            return i*2 \n        elif i==3: \n            return i*3 \n        else: \n            return i*4 \n    \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    count = n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 28\n    elif n == 9:\n        return 35\n    elif n == 10:\n        return 46\n    elif n == 11:\n        return 55\n    elif n == 12:\n        return 66\n    elif n == 13:\n        return 77\n    elif n == 14:\n        return 92\n    elif n == 15:\n        return 105\n    elif n == 16:\n        return 140\n    elif n == 17:\n        return 185\n    elif n == 18:\n        return 216\n    elif n == 19:\n        return 275\n    elif n == 20:\n        return 320\n    elif n == 21:\n        return 405\n    elif n == 22:\n        return 460\n    elif n == 23:\n        return 575\n    elif n == 24:\n        return 600\n    elif n == 25:\n        return 630\n    elif n == 26:\n        return 710\n    elif n == 27:\n        return 740\n    elif n == 28:\n        return 840\n    elif n == 29:\n        return 900\n    elif n == 30:\n        return 1020\n    elif n == 31:\n        return 1060\n    elif n == 32:\n        return 1180\n    elif n == 33:\n        return 1270\n    elif n == 34:\n        return 1310\n    elif n == 35:\n        return 1440\n    elif n == 36:\n        return 1560\n    elif n == 37:\n        return 1690\n    elif n == 38:\n        return 1780\n    elif n == 39:\n        return 1870\n    elif n == 40:\n        return 1935\n    elif n == 41:\n        return 1988\n    elif n == 42:\n        return 2170\n    elif n == 43:\n        return 2350\n    elif n == 44:\n        return 2460\n    elif n == 45:\n        return 2690\n    elif n == 46:\n        return 2780\n    elif n == 47:\n        return 2980\n    elif n == 48:\n        return 3150\n    elif n == 49:\n        return 3270\n    elif n == 50:\n        return 3380\n    elif n == 51:\n        return 3510\n    elif n == 52:\n        return 3690\n    elif n == 53:\n        return 3740\n    elif n == 54:\n        return 3870\n    elif n == 55:\n        return 3920\n    elif n == 56:\n        return 4070\n    elif n == 57:\n        return 4100\n    elif n == 58:\n        return 4210\n    elif n == 59:\n        return 4300\n    elif n == 60:\n        return 4360\n    elif n == 61:\n        return 4400\n    elif n == 62:\n        return 4370\n    elif n == 63:\n        return 4800\n    elif n == 64:\n        return 4500\n    elif n == 65:\n        return 4650\n    elif n == 66:\n        return 4710\n    elif n == 67:\n        return 4740\n    elif n == 68:\n        return 4800\n    elif n == 69:\n        return 4870\n    elif n == 70:\n        return 4910\n    elif n == 71:\n        return 4940\n    elif n == 72:\n        return 5020\n    elif n == 73:\n        return 5060\n    elif n == 74:\n        return 5100\n    elif n == 75:\n        return 5250\n    elif n == 76:\n        return 5270\n    elif n == 77:\n        return 5380\n    elif n == 78:\n        return 5450\n    elif n == 79:\n        return 5510\n    elif n == 80:\n        return 5550\n    elif n == 81:\n        return 5600\n    elif n == 82:\n        return 5670\n    elif n == 83:\n        return 5700\n    elif n == 84:\n        return 5770\n    elif n == 85:\n        return 5850\n    elif n == 86:\n        return 5920\n    elif n == 87:\n        return 5960\n    elif n == 88:\n        return 6010\n    elif n == 89:\n        return 6070\n    elif n == 90:\n        return 6100\n    elif n == 91:\n        return 6150\n    elif n == 92:\n        return 6200\n    elif n == 93:\n        return 6260\n    elif n == 94:\n        return 6310\n    elif n == 95:\n        return 6350\n    elif n == 96:\n        return 6420\n    elif n == 97:\n        return 6460\n    elif n == 98:\n        return 6510\n    elif n == 99:\n        return 6550\n    elif n == 100:\n        return 6620\n    elif n == 101:\n        return 6660\n    elif n == 102:\n        return 6710\n    elif n == 103:\n        return 6750\n    elif n == 104:\n        return 6810\n    elif n == 105:\n        return 6850\n    elif n == 106:\n        return 6920\n    elif n == 107:\n        return 6960\n    elif n == 108:\n        return 7020\n    elif n == 109:\n        return 7060\n    elif n == 110:\n        return 7100\n    elif n == 111:\n        return 7250\n    elif n == 112:\n        return 7300\n    elif n == 113:\n        return 7350\n    elif n == 114:\n        return 7410\n    elif n == 115:\n        return 7450\n    elif n == 116:\n        return 7510\n    elif n == 117:\n        return 7550\n    elif n == 118:\n        return 7610\n    elif n == 119:\n        return 7650\n    elif n == 120:\n        return 7710\n    elif n == 121:\n        return 7750\n    elif n == 122:\n        return 7810\n    elif n == 123:\n        return 7850\n    elif n == 124:\n        return 7910\n    elif n == 125:\n        return 7950\n    elif n == 126:\n        return 8020\n    elif n == 127:\n        return 8160\n    elif n == 128:\n        return 8190\n    elif n == 129:\n        return 8200\n    elif n == 130:\n        return 8250\n    elif n == 131:\n        return 8300\n    elif n == 132:\n        return 8350\n    elif n == 133:\n        return 8400\n    elif n == 134:\n        return 8450\n    elif n == 135:\n        return 8500\n    elif n == 136:\n        return 8550\n    elif n == 137:\n        return 8620\n    elif n == 138:\n        return 8660\n    elif n == 139:\n        return 8720\n    elif n == 140:\n        return 8760\n    elif n == 141:\n        return 8820\n    elif n == 142:\n        return 8860\n    elif n == 143:\n        return 8920\n    elif n == 144:\n        return 8960\n    elif n == 145:\n        return 9020\n    elif n == 146:\n        return 9060\n    elif n == 147:\n        return 9100\n    elif n == 148:\n        return 9250\n    elif n == 149:\n        return 9300\n    elif n == 150:\n        return 9350\n    elif n == 151:\n        return 9420\n    elif n == 152:\n        return 9460\n    elif n == 153:\n        return 9510\n    elif n == 154:\n        return 9550\n    elif n == 155:\n        return 9610\n    elif n == 156:\n        return 9"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return (4*n+1)//2\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # the lucas numbers are x[1]*x[2]*...*x[n]\n    # where n is the number of digits\n    x = []\n    for i in range(1, n+1):\n        x.append(i)\n    return x[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1: \n        raise ValueError \n    elif n <= 3: \n        return 1 \n    else: \n        return (find_lucas(n-1) + find_lucas(n-2)) % 15732\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 2: \n        return 1\n    elif n == 3: \n        return 3\n    elif n == 4: \n        return 7\n    elif n == 5: \n        return 15\n    else: \n        return find_lucas(n-3) + find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        list_[list_.index(element)] = string\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    i = 0\n    while(i < len(list_)):\n        list_[i] = list_[i].replace('{', '').replace('}', '').replace('\\'', '')\n        i += 1\n    list_[0] = list_[0] + string + list_[0]\n    return list_\n    \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # create new list\n    new_list = []\n    for i in range(len(list_)):\n        new_list.append(list_[i])\n        if type(list_[i]) is str:\n            new_list.append(list_[i].format(string))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    #print(list_)\n    if(type(string) is str):\n        for i in range(len(list_)):\n            #print(i)\n            list_[i] = string.format(i+1)\n        #print(list_)\n    elif(type(string) is list):\n        for i in range(len(list_)):\n            list_[i] = add_string(list_[i], string[i])\n        #print(list_)\n    else:\n        print(\"string is not a string\")\n        return\n    #print(list_)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(string)\n    for element in list_:\n        list_ = element.split(\",\")\n        list_[0] = \"\\\"\" + str(list_[0]) + \"\\\"\"\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(element.format(string))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_ + [string]\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result_list = []\n    for item in list_:\n        if isinstance(item, str):\n            result_list.append(item.replace(string, \"*\" * len(item)))\n        else:\n            result_list.append(item)\n    return result_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return ''.join([str(i) + string for i in list_])\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        try:\n            list_[list_.index(element)].append(string.format(element))\n        except:\n            list_.append(element)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # get the items in the lists\n    l4 = [x for x in l1 if x not in l2]\n    l5 = [x for x in l3 if x not in l2]\n    # create nested dictionary\n    d = {}\n    # loop through nested dictionaries\n    for i in range(len(l4)):\n        # get the keys from the dictionary\n        keys = list(d.keys())\n        # if the keys list is empty, set the new key\n        if len(keys) == 0:\n            d[keys[0]] = l4[i]\n        # if the keys list isn't empty, add it to the nested dictionary\n        else:\n            # if the value is a list, loop through the nested dictionary\n            if type(l5[i]) == list:\n                for k in l5[i]:\n                    d[k] = l4[i][k]\n            else:\n                d[l5[i]] = l4[i]\n    # return the dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for key in l1:\n        if l1[key] in res:\n            res[l1[key]].append(l2[key])\n        else:\n            res[l1[key]] = [l2[key]]\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    out = {}\n    if isinstance(l1, list):\n        for i in l1:\n            if isinstance(i, dict):\n                out[i.get('id')] = i\n            elif isinstance(i, list):\n                out[i.get('id')] = convert_list_dictionary(i, l2, l3)\n            else:\n                out[i.get('id')] = [i]\n    elif isinstance(l1, dict):\n        out[l1.get('id')] = [l1]\n    elif isinstance(l1, list):\n        out[l1.get('id')] = l1\n    return out\n    \n    \ndef convert_list_to_string(l1):\n    '''\n    Write a function to convert a list of dictionaries into a string.\n    '''\n    return \" \".join([str(k) + \": \" + str(v) for k,v in l1.items()])\n    \n    \ndef convert_string_to_list(str):\n    '''\n    Write a function to convert a string of the form:\n    key1: value1\n    key2: value2\n    ...\n    key n: value n\n    ...\n    Where:\n    key is a string\n    value is a list of strings\n    '''\n    l = []\n    for i in str.split():\n        if i.startswith(\"key:\"):\n            l.append(i.replace(\"key:\", \"\"))\n        elif i.startswith(\"value:\"):\n            l.append(i.replace(\"value:\", \"\"))\n    return l\n    \n    \ndef convert_list_to_string(l):\n    '''\n    Write a function to convert a list of dictionaries into a string.\n    '''\n    return \" \".join([str(k) + \": \" + str(v) for k,v in l.items()])\n    \n    \ndef convert_string_to_list(str):\n    '''\n    Write a function to convert a string of the form:\n    key1: value1\n    key2: value2\n    ...\n    key n: value n\n    ...\n    Where:\n    key is a string\n    value is a list of strings\n    '''\n    l = []\n    for i in str.split():\n        if i.startswith(\"key:\"):\n            l.append(i.replace(\"key:\", \"\"))\n        elif i.startswith(\"value:\"):\n            l.append(i.replace(\"value:\", \"\"))\n    return l\n    \n    \ndef convert_string_to_list(str):\n    '''\n    Write a function to convert a string of the form:\n    key1: value1\n    key2: value2\n    ...\n    key n: value n\n    ...\n    Where:\n    key is a string\n    value is a list of strings\n    '''\n    return convert_string_to_list(str.replace(\"key:\", \"\"))\n    \n    \ndef get_json_list(key):\n    '''\n    Write a function to convert a string of the form:\n    key1: value1\n    key2: value2\n    ...\n    key n: value n\n    ...\n    Where:\n    key is a string\n    value is a list of strings\n    '''\n    l = []\n    for i in key.split(\" \"):\n        if i.startswith(\"key:\"):\n            l.append(i.replace(\"key:\", \"\"))\n        elif i.startswith(\"value:\"):\n            l.append(i.replace(\"value:\", \"\"))\n    return l\n    \n    \ndef get_json_list(key):\n    '''\n    Write a function to convert a string of the form:\n    key1: value1\n    key2: value2\n    ...\n    key n: value n\n    ...\n    Where:\n    key is a string\n    value is a list of strings\n    '''\n    return key.split(\" \")\n    \n    \ndef get_json_list(key):\n    '''\n    Write a function to convert a string of the form:\n    key1: value1\n    key2: value2\n    ...\n    key n: value n\n    ...\n    Where:\n    key is a string\n    value is a list of strings\n    '''\n    return key.split(\" \")\n    \n    \ndef is_empty(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    if json_list:\n        return False\n    else:\n        return True\n    \n    \ndef is_empty(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n    Write a function to check if the given list is empty.\n    '''\n    return len(json_list) == 0\n    \n    \ndef is_empty_list(json_list):\n    '''\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) and len(l3) == len(l2):\n        return dict(zip(l1, l2, l3))\n    else:\n        return l1, l2, l3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2):\n        return None\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # --- Your code ---\n    # return a dictionary with the keys as the column names\n    # and the values as the values.\n    # --- end of your code ---\n    l3 = [(l3[i][j], l3[i+1][j]) for i in range(0, len(l3), 2) for j in range(0, len(l3[i+1]), 2)]\n    d1 = {}\n    for i in range(0, len(l2)):\n        if l2[i] not in d1:\n            d1[l2[i]] = {}\n        if l2[i] not in d1[l2[i]]:\n            d1[l2[i]][l3[i][0]] = l3[i][1]\n    return d1"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if type(l1) == list:\n        d1 = {}\n        d1['k1'] = l1\n    else:\n        d1 = l1\n        \n    if type(l2) == list:\n        d2 = {}\n        d2['k2'] = l2\n    else:\n        d2 = l2\n        \n    if type(l3) == list:\n        d3 = {}\n        d3['k3'] = l3\n    else:\n        d3 = l3\n        \n    return d1, d2, d3\n        \n    \n    \ndef empty_frozen_set(s):\n    '''\n    Write a function to remove all the zeros in a given string.\n    '''\n    d = {}\n    for i in s:\n        if i == 0:\n            d.clear()\n        else:\n            d[i] = 1\n    return d\n    \n    \ndef find_index(s, k):\n    '''\n    Write a function to find the index of a given string in a given string.\n    '''\n    d = {}\n    for i in range(len(s)):\n        if s[i] in d:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    for i in range(len(s)):\n        if s[i] == k:\n            return i\n        \n    return -1\n    \n    \ndef main():\n    '''\n    Write a function that returns an array that contains the reverse of a given list of\n    integers.\n    '''\n    s = []\n    l = []\n    l = input('Enter a list of integers: ').split()\n    for i in range(len(l)):\n        l[i] = int(l[i])\n    l.sort()\n    empty_frozen_set(l)\n    l.reverse()\n    d = empty_frozen_set(l)\n    d = convert_list_dictionary(l, l, l)\n    l = []\n    for i in range(len(d[1][1])):\n        l.append(d[1][1][i])\n    l.reverse()\n    \n    \n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict()\n    for i in l1:\n        if i in l2 and i not in d1:\n            d1[i] = l2[i]\n    for i in l3:\n        if i in l1:\n            d1[i] = l3[i]\n    return d1\n    \n    \n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    converted_dict = dict()\n    if type(l1) == list and type(l2) == list and type(l3) == list:\n        #for item in l1:\n        #    converted_dict[item] = dict()\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    elif type(l1) == list and type(l2) == list and type(l3) == dict:\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    elif type(l1) == list and type(l2) == list and type(l3) == dict:\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    elif type(l1) == dict and type(l2) == list and type(l3) == list:\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    elif type(l1) == dict and type(l2) == list and type(l3) == dict:\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    elif type(l1) == list and type(l2) == list and type(l3) == dict:\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    elif type(l1) == dict and type(l2) == list and type(l3) == dict:\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    elif type(l1) == list and type(l2) == dict and type(l3) == list:\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    elif type(l1) == dict and type(l2) == dict and type(l3) == dict:\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    elif type(l1) == dict and type(l2) == dict and type(l3) == list:\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    elif type(l1) == dict and type(l2) == dict and type(l3) == list:\n        for item in l1:\n            converted_dict[item] = convert_list_dictionary(l2, l3, l1[item])\n    else:\n        converted_dict = dict()\n    return converted_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for k, v in l3.items():\n        l2[k].append(v)\n    return l2\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum(n):\n        if n <= 0:\n            return 0\n        return (f(n/2) + f(n/3) + f(n/4) + f(n/5)) % n\n    return max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1 or n==0:\n        return n\n    max_f = get_max_sum(n//3)\n    if n%2 == 0:\n        return max(max_f, get_max_sum(n//2))\n    else:\n        return get_max_sum(n-1) + max_f\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    a = 2\n    while a <= n:\n        b = (a+n)/2\n        c = 2\n        if a!= 0 and b!= 0:\n            while c <= n:\n                x = a + (b**2)\n                if x < n and x!= 0:\n                    c = c + 1\n                elif x == n:\n                    return max(max(a,b), c)\n                x = a + (b**2) + c\n                if x < n:\n                    c = c + 1\n        a = a + 2\n    return -1\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    return f(n)\n    \ndef get_sum_of_triplets (n):\n    '''\n    Return the sum of triplets (n,3,5).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/3) + f(n/5)\n    return f(n)\n    \ndef get_sum_of_triplets_sum (n):\n    '''\n    Return the sum of triplets (n,3,5).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/3) + f(n/5)\n    return sum(list(map(f, range(n))))\n    \ndef get_sum_of_triplets_sum_multi (n):\n    '''\n    Return the sum of triplets (n,3,5).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/3) + f(n/5)\n    return sum(list(map(f, range(1,n+1))))\n    \ndef get_sum_of_doubles (n):\n    '''\n    Return the sum of doubles (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3)\n    return f(n)\n    \ndef get_sum_of_doubles_sum (n):\n    '''\n    Return the sum of doubles (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3)\n    return f(n)\n    \ndef get_sum_of_doubles_sum_multi (n):\n    '''\n    Return the sum of doubles (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum_multi (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum_multi_plus_doubles (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3) + f(n/4)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum_multi_plus_doubles_sum (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum_multi_plus_doubles_sum_plus_doubles (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5) + f(n/6)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum_multi_plus_doubles_sum_plus_doubles (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5) + f(n/6) + f(n/7)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum_multi_plus_doubles_sum_plus_doubles (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5) + f(n/6) + f(n/7) + f(n/8)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum_multi_plus_doubles_sum_plus_doubles (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5) + f(n/6) + f(n/7) + f(n/8) + f(n/9)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum_multi_plus_doubles_sum_plus_doubles_sum (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5) + f(n/6) + f(n/7) + f(n/8) + f(n/9) + f(n/10)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum_multi_plus_doubles_sum_plus_doubles_sum_plus_doubles (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5) + f(n/6) + f(n/7) + f(n/8) + f(n/9) + f(n/10) + f(n/11)\n    return f(n)\n    \ndef get_sum_of_triplets_sum_plus_doubles_sum_multi_plus_doubles_sum_plus_doubles_sum_plus_doubles (n):\n    '''\n    Return the sum of triplets (n,2,3).\n    '''\n    def f(n):\n        if n == 0: return 0\n        return f(n/2) "
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = lambda n: (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5)\n    \n    return max( max(f(i), max(f(i/2), f(i/3), f(i/4), f(i/5))))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    for n in range (1, 10):\n        print (n,'sum = ', max_sum(n))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    s = 0\n    for i in range (1, n + 1):\n        s += (i/6)\n    return s\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n*(n+1)\n    elif n > 5:\n        return n*(n+1)\n    else:\n        return n*(n+1)\n    # write your code here\n    "
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def recur(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return recur(n/2)\n        elif n % 3 == 0:\n            return recur(n/3) + recur(n/3)\n        else:\n            return recur(n/4) + recur(n/4) + recur(n/4) + recur(n/4)\n    return recur(n)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #return max(input_list, key=len)\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) <= 0:\n        return None\n    elif len(input_list) == 1:\n        return input_list\n    elif len(input_list) == 2:\n        return input_list\n    else:\n        return max(input_list, key=len)\n        \n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return []\n    if len(input_list) == 1:\n        return [input_list]\n    max_length = max(input_list, key=len)\n    return [max_length] + max_length_list(input_list[1:])\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    length = 1\n    for item in input_list:\n        if item > max_length:\n            max_length = item\n            length = 1\n        else:\n            length = length + 1\n    return max_length, length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list)==0:\n        return 0\n    if len(input_list)==1:\n        return 1\n    if len(input_list)==2:\n        if input_list[0]>input_list[1]:\n            return 1\n        else:\n            return 2\n    if len(input_list)==3:\n        if input_list[0]>input_list[1] and input_list[0]>input_list[2]:\n            return 1\n        elif input_list[0]>input_list[1] and input_list[0]>input_list[2]:\n            return 2\n        elif input_list[0]>input_list[1] and input_list[0]>input_list[2]:\n            return 3\n        else:\n            return 4\n    else:\n        return 0\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function that returns the frequency of a substring in a given string.\n    '''\n    if len(string)<=len(sub_string):\n        return 0\n    if len(string)==len(sub_string):\n        return 1\n    if string[len(sub_string)-1]==sub_string[0]:\n        return 1+count_substring(string[len(sub_string)-2:], sub_string[1:])\n    else:\n        return 1+count_substring(string[:len(sub_string)-1], sub_string)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    for i in input_list:\n        if len(i) > length:\n            length = len(i)\n    return length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for element in input_list:\n        if len(element) > max_len:\n            max_len = len(element)\n    return max_len\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for x in test_tup:\n        if x in seen:\n            return False\n        seen.add(x)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if not test_tup:\n        raise Exception(\"tuple cannot be empty\")\n    \n    else:\n        # check if the tuple is in a dictionary\n        try:\n            # create a dictionary of the tuple\n            test_dict = {}\n            for el in test_tup:\n                if el in test_dict:\n                    raise Exception(\"Duplicate found\")\n                else:\n                    test_dict[el] = 1\n        except Exception as e:\n            raise Exception(\"Error creating dictionary:\", e)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup=tuple(test_tup)\n    return len(set(tup))==len(tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return all(tuple(tup) not in tup for tup in test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Your code here\n    lst = set(test_tup)\n    for i in lst:\n        if test_tup.count(i)>1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for i in test_tup:\n        if i in test_tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # DO NOT CHANGE THIS FUNCTION IN ANY WAY\n    return tuple.count(tuple)!= len(tuple)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for i in test_tup:\n        if i in test_tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = True\n    if len(test_tup)!= len(set(test_tup)):\n        distinct = False\n    return distinct\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    dct = {i[0] for i in test_tup}\n    return len(dct) == 0\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # define empty list to store characters in\n    char_list = []\n    # loop through string\n    for i in range(len(str1)):\n        # check if letter is not repeating\n        if str1[i] not in char_list:\n            # put letter into list\n            char_list.append(str1[i])\n    # return first non-repeating character\n    return char_list[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # creating an empty dictionary, key = characters, value = occurance of each character in str1\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to find the first non-repeating character\n    # and add it to a list\n    char_frequency = {}\n    for i in str1:\n        if i in char_frequency:\n            char_frequency[i] += 1\n        else:\n            char_frequency[i] = 1\n    # Find the first non-repeating character\n    return next(i for i, value in char_frequency.items() if value == 1)\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #create a list of characters\n    list_of_characters = list(str1)\n    #create a dictionary of characters\n    dictionary = dict.fromkeys(list_of_characters, 0)\n    #loop through the string\n    for char in str1:\n        #check if the char is in the dictionary\n        if char in dictionary:\n            #increment the index\n            dictionary[char] += 1\n        else:\n            dictionary[char] = 1\n    #return the first non-repeating character\n    return list(dictionary.keys())[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    # time complexity: O(n)\n    # space complexity: O(n)\n    return str1[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    def make_string(str1):\n        if str1 == str1[::-1]:\n            return str1\n        else:\n            return str1 + str(str1[::-1].find(str1) + 1)\n    \n    count = {}\n    for char in str1:\n        count[char] = count.get(char, 0) + 1\n    \n    for key in count:\n        if count[key] == 1:\n            return key\n    \n    return \"NO CHARACTERS\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = list(str1)\n    char_list.sort()\n    for i in char_list:\n        if str1.count(i) == 1:\n            return i\n        elif str1.count(i) == 0:\n            return \" \"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a regex pattern\n    regex = r'[^a-zA-Z]{1,}'\n    # iterate through the string\n    for char in str1:\n        # check if the character is a letter\n        if char.isalpha():\n            # if so, add it to the regex\n            regex += char.lower()\n    # return the first non-repeating character\n    return regex[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str2 = str1.replace(str1[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')\n    str2 = str2.replace(str2[0], '')"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    reg = r'^([a-z].*)\\1'\n    if re.search(reg, string):\n        print('ok')\n    else:\n        print('not ok')\n    \n    # print(string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) == 0: \n        return False\n    if string[0]!= string[-1]: \n        return False\n    return True\ndef check_name(name):\n    '''\n    Write a function to check whether a string starts or ends with the same name or not.\n    '''\n    if len(name) == 0: \n        return False\n    if name[0]!= name[-1]: \n        return False\n    return True\ndef check_email(email):\n    '''\n    Write a function to check whether a string starts or ends with the same email or not.\n    '''\n    if len(email) == 0: \n        return False\n    if email[0]!= email[-1]: \n        return False\n    return True\ndef is_valid(s):\n    '''\n    Write a function to check whether a string is valid or not.\n    '''\n    if s[0] =='' or s[-1] =='':\n        return False\n    if not s.isalnum():\n        return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith('\"'):\n        return False\n    elif string.endswith('\"'):\n        return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_space(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_special_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_email(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_domain(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_mail(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_url(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_uri(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_exclude(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_phone(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_domain(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_token(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_beyond_phone(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_beyond_email(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_beyond_domain(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_beyond_mail(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_beyond_url(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\ndef check_beyond_uri(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    elif(string[0] == string[0]):\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # remove empty string\n    if string.strip() == \"\":\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    l = string.split()\n    #print(l)\n    if len(l) == 1:\n        #print(l[0])\n        return True\n    elif l[-1] == l[-2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.match(regex, string) else False\ndef check_number(string): \n    '''\n    Write a function to check whether the given string is a valid number.\n    '''\n    try: \n        number = float(string)\n    except ValueError: \n        return False\n    else: \n        return True\ndef check_period(string): \n    '''\n    Write a function to check whether the given string is a valid period or not.\n    '''\n    try: \n        period = str(string)[0]\n    except IndexError: \n        return False\n    else: \n        return True\ndef check_currency(string): \n    '''\n    Write a function to check whether the given string is a valid currency or not.\n    '''\n    currency_list = ['usd', 'eur', 'rsd', 'rub', 'rub3', 'jpy', 'jpy3', 'cny', 'cny3']\n    try: \n        currency = string.split(' ')[0]\n    except IndexError: \n        return False\n    else: \n        return True if currency not in currency_list else False\ndef check_email(string): \n    '''\n    Write a function to check whether the given string is a valid email or not.\n    '''\n    email_list = ['1@1.com', '2@2.com', '3@3.com', '4@4.com', '5@5.com', '6@6.com']\n    try: \n        email = string.split('@')[0]\n    except IndexError: \n        return False\n    else: \n        return True if email not in email_list else False\ndef check_url(string): \n    '''\n    Write a function to check whether the given string is a valid url or not.\n    '''\n    url_list = ['http://google.com', 'http://facebook.com', 'http://youtube.com', 'http://apple.com', 'http://facebook.com', 'http://youtube.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http://amazon.com', 'http:/"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)!= None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0]==string[-1] and len(string)==len(string[0]):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    def get_char(char):\n        if re.search(regex, char):\n            return True\n        else:\n            return False\n    if get_char(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted([a, b, c])\n    if len(a) % 2 == 0:\n        x = int(len(a)/2)\n    else:\n        x = int(len(a)/2) + 1\n    x = x - 1\n    if a[x] > a[x-1]:\n        return a[x]\n    else:\n        return a[x-1]\n    \n    \ndef main():\n    print(median_numbers(4,6,7))\n    print(median_numbers(6,10,8))\n    print(median_numbers(1,1,0))\n    print(median_numbers(1,0,2))\n    print(median_numbers(0,1,1))\n    print(median_numbers(0,1,2))\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if a<b:\n        x=a\n        y=b\n    if a<c:\n        x=c\n        y=a\n    if b<c:\n        x=b\n        y=c\n    \n    x=int((x+y)/2)\n    \n    return x\n        \ndef is_even(a):\n    '''\n    Returns True if a is even and False otherwise.\n    '''\n    \n    if a%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #print('Median of three numbers:', (a+b+c)/3)\n    #input()\n    return (a+b+c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    a,b,c = sorted([a,b,c])\n    if a+b<c:\n        return a+b\n    else:\n        return c/2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    import math\n    if len(a) == 3:\n        n = len(a)\n    else:\n        n = 3\n    if len(b) == 3:\n        m = len(b)\n    else:\n        m = 3\n    if len(c) == 3:\n        median = (a+b+c)/3\n    else:\n        median = (a+b+c)/3\n    if n>m:\n        for i in range(n-m):\n            if i == m-1:\n                if median < b[m-2]:\n                    median = b[m-2]\n                if median < a[m-2]:\n                    median = a[m-2]\n                if median < c[m-2]:\n                    median = c[m-2]\n                if median < c[0]:\n                    median = c[0]\n            elif i == m-1:\n                if median < a[m-2]:\n                    median = a[m-2]\n                if median < b[m-2]:\n                    median = b[m-2]\n                if median < c[m-2]:\n                    median = c[m-2]\n                if median < c[0]:\n                    median = c[0]\n            elif i == m-1:\n                if median < b[m-2]:\n                    median = b[m-2]\n                if median < c[m-2]:\n                    median = c[m-2]\n                if median < c[0]:\n                    median = c[0]\n    elif n>m:\n        for i in range(n-m):\n            if i == m-1:\n                if median < a[m-2]:\n                    median = a[m-2]\n                if median < b[m-2]:\n                    median = b[m-2]\n                if median < c[m-2]:\n                    median = c[m-2]\n                if median < c[0]:\n                    median = c[0]\n            elif i == m-1:\n                if median < b[m-2]:\n                    median = b[m-2]\n                if median < c[m-2]:\n                    median = c[m-2]\n                if median < c[0]:\n                    median = c[0]\n            elif i == m-1:\n                if median < a[m-2]:\n                    median = a[m-2]\n                if median < b[m-2]:\n                    median = b[m-2]\n                if median < c[m-2]:\n                    median = c[m-2]\n                if median < c[0]:\n                    median = c[0]\n    elif n==3:\n        if a[0]+b[0]+c[0]>median:\n            median = a[0]+b[0]+c[0]\n        elif a[0]+b[0]+c[0]==median:\n            median = a[0]+b[0]+c[0]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) >= 3 or len(b) >= 3 or len(c) >= 3:\n        raise ValueError('median_numbers() should have 3 numbers.')\n    if a == b or a == c or b == c:\n        return a\n    b = sorted(b)\n    a = sorted(a)\n    if a[0] == a[1] and a[1] == a[2]:\n        return a[0]\n    if b[0] == b[1] and b[1] == b[2]:\n        return b[0]\n    if a[0] == b[0] and b[0] == a[0]:\n        return a[0]\n    if a[0] == a[2] and a[2] == a[1]:\n        return a[0]\n    if a[0] == b[0] and b[0] == a[2]:\n        return a[0]\n    if b[0] == b[2] and b[2] == b[1]:\n        return b[0]\n    return (a[0] + b[0] + c[0])//3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==b==c:\n        return a\n    if a<b or b<c or a>c:\n        return None\n    if a==b or b==c or a==c:\n        return a\n    if a>b+c:\n        a=a-b\n        b=c\n        c=a\n    return a,b,c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)==len(b)==len(c):\n        return sorted(a+b+c)[len(a)//2]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list1 = [a,b,c]\n    if len(list1)%2 == 0:\n        median = (list1[int(len(list1)/2)] + list1[int(len(list1)/2)-1])/2\n        return median\n    else:\n        median = list1[int(len(list1)/2)]\n        return median\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in nums:\n        sum_of_digits += i\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #initialize sum to 0\n    sum = 0\n    #iterate through each number and add the number to the sum\n    for num in nums:\n        sum += num\n    #return the sum\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_ = 0\n    for n in nums:\n        sum_ += n\n    return sum_\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum = sum + nums[i]\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums.sort()\n    n = len(nums)\n    total = 0\n    for i in range(n):\n        total += nums[i]\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    nums = sorted(nums)\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n    \n    \n    \ndef add_digits(x):\n    '''\n    Given an integer x, return x with all the digits of x right-justified.\n    \n    >>> add_digits(12) # Should return 13\n    122\n    >>> add_digits(4224) # Should return 4321\n    4320\n    >>> add_digits(1) # Should return 1\n    1\n    '''\n    \n    numbers = list(str(x))\n    i = 0\n    while i < len(numbers):\n        numbers[i] = \"0\" + numbers[i]\n        i += 1\n    return \"\".join(numbers)\n    \n    \n    \n    \ndef add_ending_zeros(numbers):\n    '''\n    Given a list of numbers, return a list of numbers with all the digits of each number\n    added right-justified.\n    \n    >>> add_ending_zeros([1, 2, 3, 0, 5]) # Should return [1, 2, 3, 5]\n    >>> add_ending_zeros([1, 1]) # Should return [1, 1, 1]\n    >>> add_ending_zeros([1, 9]) # Should return [1, 9, 1]\n    >>> add_ending_zeros([5, 2, 8]) # Should return [5, 2, 8]\n    >>> add_ending_zeros([0, 1, 1, 1, 0, 0, 1]) # Should return [1, 1, 1, 1, 0, 0, 0]\n    >>> add_ending_zeros([0, 0, 1, 1]) # Should return [1, 1, 1]\n    '''\n    \n    def get_digits(n):\n        i = 0\n        while i < len(str(n)):\n            if str(n)[i] == '0':\n                i += 1\n            else:\n                break\n        return int(''.join([str(n)[i] for i in range(i, len(str(n)))]))\n    \n    def add_zeros(n):\n        return [x if x > 9 else str(x) for x in range(get_digits(n))]\n    \n    return add_zeros(numbers)\n    \n    \n    \ndef add_leading_zeros(numbers):\n    '''\n    Given a list of integers, return a list of integers with all the leading zeros removed.\n    \n    >>> add_leading_zeros([0, 1, 2, 3, 4]) # Should return [1, 2, 3, 4]\n    >>> add_leading_zeros([1, 9]) # Should return [1, 9]\n    >>> add_leading_zeros([5, 2, 8]) # Should return [5, 2, 8]\n    >>> add_leading_zeros([0, 1, 1, 1, 0, 0, 1]) # Should return [1, 1, 1, 1, 0, 0, 0]\n    >>> add_leading_zeros([0, 0, 1, 1]) # Should return [1, 1, 1]\n    '''\n    \n    def get_leading_zeros(n):\n        i = 0\n        while i < len(str(n)):\n            if str(n)[i] == '0':\n                i += 1\n            else:\n                break\n        return int(''.join([str(n)[i] for i in range(i, len(str(n)))]))\n    \n    def remove_leading_zeros(n):\n        return [x if x > 0 else '0' for x in range(get_leading_zeros(n))]\n    \n    return remove_leading_zeros(numbers)\n    \n    \n    \n    \n    \ndef sum_digits(nums):\n    '''\n    Given a sorted array nums, return the sum of all the numbers.\n    \n    >>> sum_digits([2, 1])\n    3\n    >>> sum_digits([3, 4, -1, 1])\n    9\n    >>> sum_digits([4, 3, 2, 1])\n    6\n    '''\n    \n    def get_sum(nums):\n        i = 0\n        sum = 0\n        while i < len(nums):\n            sum += nums[i]\n            i += 1\n        return sum\n    \n    def add_digits(n):\n        return str(n % 10)\n    \n    \n    \n    \n    def sum_digits(nums):\n        nums = sorted(nums)\n        sum = 0\n        for i in range(len(nums)):\n            sum += add_digits(nums[i])\n        return sum\n    \n    return sum_digits(nums)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(num % 10)\n    return sum(sum_of_digits_list)\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup = test_tup1+test_tup2\n    test_tup = tuple(test_tup)\n    print(test_tup)\n    return test_tup\n    \n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = [int(i) for i in test_tup1]\n    test_tup2 = [int(i) for i in test_tup2]\n    return [x ^ y for x, y in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_bitwise_xor = []\n    for item in test_tup1:\n        test_tup1_bitwise_xor.append(item ^ test_tup2[test_tup1.index(item)])\n    return test_tup1_bitwise_xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    print(\"\\n# Bitwise XOR operation\")\n    tup_1, tup_2 = test_tup1, test_tup2\n    bitwise_xor = tup_1[0] ^ tup_2[0]\n    print(\"Bitwise xor result: {}\\n\".format(bitwise_xor))\n    return bitwise_xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # the input is tuple that is equivalent to tuple (1, 2, 3)\n    # the output is tuple that is equivalent to tuple (3, 1, 2)\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = tuple(test_tup1)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            test_tup3[i] = 0\n        else:\n            test_tup3[i] = 1\n    return test_tup3\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for x in test_tup1:\n        result = result ^ x\n    for x in test_tup2:\n        result = result ^ x\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Your code here\n    result = [None] * len(test_tup1)\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result[i] = 1\n        else:\n            result[i] = 0\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    n = max(len(test_tup1), len(test_tup2))\n    assert n == len(test_tup1), \"The tuples don't match up\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Create the output tuple\n    out_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            out_tuple += (test_tup1[i], test_tup2[i])\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    # write your code here\n    f = Counter(test_list)\n    return f[tuple(f.keys())]\n    \ndef main():\n    '''\n    You should write your main program here.\n    '''\n    test_list = []\n    print(\"Enter the file name:\")\n    filename = input()\n    f = open(filename)\n    if f.mode == 'r':\n        test_list = f.read()\n        test_list = test_list.split()\n    # remove all empty spaces at the end of the list\n    test_list = [i.strip() for i in test_list]\n    # remove any characters other than alphabets, numbers, and spaces\n    for i in test_list:\n        i = re.sub(r'[^a-zA-Z0-9 ]', '', i)\n    # remove numbers only\n    for i in test_list:\n        i = re.sub(r'\\d+', '', i)\n    # remove any leading zeros and trailing zeros\n    for i in test_list:\n        i = re.sub(r'^\\d+', '', i)\n        i = re.sub(r'\\d+$', '', i)\n    # remove duplicate characters\n    for i in test_list:\n        i = re.sub(r'[^a-zA-Z0-9 ]', '', i)\n    # remove all words containing spaces\n    for i in test_list:\n        i = re.sub(r'\\w+\\s', '', i)\n        # remove all word with less than 5 letters\n        i = re.sub(r'\\w+', '', i)\n        i = re.sub(r'\\w+\\s\\d+', '', i)\n        i = re.sub(r'\\w+\\s\\w+', '', i)\n        i = re.sub(r'\\w+\\s\\w+\\s\\w+', '', i)\n    # remove multiple spaces\n    test_list = [i.strip() for i in test_list]\n    # remove numbers\n    test_list = [i for i in test_list if not i.isdigit()]\n    test_list = [i for i in test_list if not i.isdigit()]\n    # remove words containing spaces\n    test_list = [i for i in test_list if not i.isalpha()]\n    # remove numbers\n    test_list = [i for i in test_list if not i.isdigit()]\n    test_list = [i for i in test_list if not i.isdigit()]\n    test_list = [i for i in test_list if not i.isdigit()]\n    test_list = [i for i in test_list if not i.isdigit()]\n    test_list = [i for i in test_list if not i.isdigit()]\n    test_list = [i for i in test_list if not i.isdigit()]\n    test_list = [i for i in test_list if not i.isdigit()]\n    test_list = [i for i in test_list if not i.isdigit()]\n    test_list = [i for i in test_list if not i.isdigit()]\n    test_list = [i for i in test_list if not i.isdigit()]\n    # remove words containing characters\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.isalpha()]\n    test_list = [i for i in test_list if not i.i"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for line in test_list:\n        if line[0] == '#':\n            continue\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = set(test_list)\n    return len(test_list)"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #write your code here\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    dict = {}\n    for element in test_list:\n        if element in dict:\n            dict[element] += 1\n        else:\n            dict[element] = 1\n    return dict\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for item in test_list:\n        if type(item) == list:\n            count += len(item)\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for i in range(0, len(test_list)):\n        if test_list[i] not in unique_list:\n            unique_list.append(test_list[i])\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    # count the number of items in the list\n    return Counter(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] == 1:\n                freq_count += 1\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    n = 0\n    for i in test_list:\n        if type(i)!= list:\n            return \"This is not a list.\"\n        for j in range(0,len(i)):\n            if type(i[j]) == list:\n                n+=1\n    return n\n    \ndef extract_group(test_list):\n    '''\n    Write a function to extract the list of tuples from a given list of lists.\n    '''\n    n = 0\n    for i in test_list:\n        if type(i)!= list:\n            return \"This is not a list.\"\n        for j in range(0,len(i)):\n            if type(i[j]) == list:\n                n+=1\n    return n\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = tuple(test_tup1 + test_tup2)\n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # Write your code here\n    print('\\n')\n    print('\\t\\t Addition of tuples')\n    print('\\t\\t', test_tup1,'and ', test_tup2)\n    print('\\t\\t')\n    print('\\t\\t Addition of tuples is', test_tup1 + test_tup2)\n    print('\\n')\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #indexed_tup1 = tuple(map(lambda x,y: x+y, test_tup1, test_tup2))\n    #indexed_tup2 = tuple(map(lambda x,y: x+y, test_tup2, test_tup1))\n    indexed_tup1 = test_tup1\n    indexed_tup2 = test_tup2\n    for i in range(len(test_tup1)):\n        indexed_tup1[i] = indexed_tup1[i] + indexed_tup2[i]\n    return indexed_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested(tup1, tup2):\n        '''\n        Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n        '''\n        if not isinstance(tup1, (list, tuple)):\n            tup1 = (tup1,)\n        if not isinstance(tup2, (list, tuple)):\n            tup2 = (tup2,)\n        for i in range(len(tup1)):\n            tup1[i] = (tup1[i], tup2[i])\n        return tup1\n    return add_nested(test_tup1, test_tup2)\n    \n    \n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # get the length of each tuple\n    n1 = len(test_tup1)\n    n2 = len(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    index_tup1 = tuple(test_tup1)\n    index_tup2 = tuple(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples do not have same length.')\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #Write your code here\n    tup_1 = test_tup1[0]\n    tup_2 = test_tup1[1]\n    tup_3 = test_tup1[2]\n    tup_4 = test_tup2[0]\n    tup_5 = test_tup2[1]\n    tup_6 = test_tup2[2]\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # check the type of the two tuples\n    if type(test_tup1)!= tuple:\n        raise TypeError(\"test_tup1 is not a tuple\")\n    if type(test_tup2)!= tuple:\n        raise TypeError(\"test_tup2 is not a tuple\")\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Write your code here.\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum = a\n    if b<a:\n        minimum = b\n    return minimum\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min=a\n    min2=b\n    if(a>b):\n        min=a\n    else:\n        min=b\n    for i in range(min,max(a,b)+1):\n        if(i!=min):\n            if(a<i):\n                min2=i\n                break\n    return min2\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        if a<b:\n            return a\n        else:\n            return b\n    else:\n        if a>b:\n            return b\n        else:\n            return a\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a<b):\n        if a>b:\n            return a\n        else:\n            return b\n    else:\n        if a>b:\n            return b\n        else:\n            return a\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        if a<b:\n            return a\n        else:\n            return b\n    else:\n        if a>b:\n            return b\n        else:\n            return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    if b>a:\n        return b\n    return a\nprint(minimum(6,3))\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \n    \ndef median(a,b):\n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    if (len(a)>0):\n        return sorted(a)[(len(a)//2)-1]\n    else:\n        return float('inf')\n    \n    \ndef mode(a,b):\n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if len(a)>0:\n        if a==b:\n            return a\n        else:\n            return sorted(a)[len(a)//2]\n    else:\n        return float('inf')\n    \n    \ndef max(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if len(a)>0:\n        if a>b:\n            return a\n        else:\n            return b\n    else:\n        return float('inf')\n    \n    \ndef nth_root(x,n):\n    '''\n    Write a python function to find the nth root of a number.\n    '''\n    if len(x)==1:\n        return x\n    else:\n        return sorted(x)[n//2]\n    \n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(s)==0:\n        return s\n    else:\n        return s[::-1]\n        \n        \ndef string_compression(s):\n    '''\n    Write a python function to compress a given string.\n    '''\n    if len(s)==1:\n        return s\n    else:\n        return s[1:]+s[0]\n        \n        \ndef count_from_to(x,y):\n    '''\n    Write a python function to count the number of occurrences of the numbers in two strings.\n    '''\n    if len(x)>len(y):\n        return len(x)-len(y)\n    else:\n        return len(y)-len(x)\n        \n    \ndef round_up(x,b=3):\n    '''\n    Write a python function to round a number up.\n    '''\n    if b>x:\n        return x\n    else:\n        return b\n    \n    \ndef reverse_string_reversed(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(s)==0:\n        return s\n    else:\n        return s[1:-1]\n        \n        \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n>0:\n        return n*factorial(n-1)\n    else:\n        return float('inf')\n    \n    \ndef factorial_reversed(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n>0:\n        return n*factorial_reversed(n-1)\n    else:\n        return float('inf')\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to compute the fibonacci sequence of a number.\n    '''\n    if n>0:\n        if n==1:\n            return 1\n        elif n==2:\n            return 1\n        else:\n            return fibonacci(n-1)+fibonacci(n-2)\n    else:\n        return float('inf')\n    \n    \ndef fibonacci_reversed(n):\n    '''\n    Write a python function to compute the fibonacci sequence of a number.\n    '''\n    if n>0:\n        if n==1:\n            return 1\n        elif n==2:\n            return 1\n        else:\n            return fibonacci_reversed(n-1)+fibonacci_reversed(n-2)\n    else:\n        return float('inf')\n    \n    \ndef factorial_prime(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n>0:\n        if n==1:\n            return 1\n        else:\n            return factorial_prime(n-1)+factorial_prime(n-2)\n    else:\n        return float('inf')\n    \n    \ndef factorial_reversed_prime(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n>0:\n        if n==1:\n            return 1\n        else:\n            return factorial_reversed_prime(n-1)+factorial_reversed_prime(n-2)\n    else:\n        return float('inf')\n    \n    \ndef fibonacci_prime_reversed(n):\n    '''\n    Write a python function to compute the fibonacci sequence of a number.\n    '''\n    if n>0:\n        if n==1:\n            return 1\n        else:\n            return fibonacci_prime_reversed(n-1)+fibonacci_prime_reversed(n-2)\n    else:\n        return float('inf')\n    \n    \ndef fibonacci_prime_reversed_prime(n):\n    '''\n    Write a python function to compute the fibonacci sequence of a number.\n    '''\n    if n>0:\n        if n==1:\n            return 1\n        else:\n            return fibonacci_prime_reversed_prime(n-1)+fibonacci_prime_reversed_prime(n-2)\n    else:\n        return float('inf')\n    \n    \ndef fibonacci_prime_reversed_prime_reversed(n):\n    '''\n    Write a python function to compute the fibonacci sequence of a number.\n    '''\n    if n>0:\n        if n==1:\n            return 1\n        else:\n            return fibonacci_prime_reversed_prime_reversed(n-1)+fibonacci_prime_reversed_prime_reversed(n-2)\n    else:\n        return float('inf')\n    \n    \ndef prime(n):\n    '''\n    Write a python function to compute the prime numbers of a given number.\n    '''\n    if n>0:\n        return sorted(int(i) for i in range(n) if is_prime(i))\n    else:\n        return float('inf')\n    \n    \ndef prime_reversed(n):\n    '''\n    Write a python function to compute the prime numbers of a given number.\n    '''\n    if n>0:\n        return sorted(int(i) for i in range(n) if is_prime_reversed(i))\n    else:\n        return float('inf')\n    \n    \ndef prime_prime_reversed(n):\n    '''\n    Write a python function to compute the prime numbers of a given number.\n    '''\n    if n>0:\n        return sorted(int(i) for i in range(n) if is_prime_reversed_prime(i))\n    else:\n        return float('inf')\n    \n    \ndef find_string_shifted(string,shifted):\n    '''\n    Write a python function to find the string with the highest frequency.\n    '''\n    if len(string)<len(shifted):\n        return string\n    else:\n        return shifted[-len(string):]\n        \n    \ndef find_string_shifted_reversed(string,shifted):\n    '''\n    Write a python function to find the string with the highest frequency.\n    '''\n    if len(string)<len(shifted):\n        return shifted\n    else:\n        return string[::-1]\n        \n    \ndef fibonacci_shifted(n):\n    '''\n    Write a python function to compute the fibonacci sequence of the given number.\n    '''\n    if n>0:\n        return fibonacci_shifted(n-1)+fibonacci_shifted(n-2)\n    else:\n        return float('inf')\n    \n    \ndef fibonacci_shifted_reversed(n):\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n    "
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    \n    if a < b:\n        a,b = b,a\n    \n    min = a + b\n    \n    return min\n    \n    \n    \n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        minimum = a\n    else:\n        minimum = b\n    return minimum\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 not in tuplex:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    '''\n    a tuple can contain a number of tuples.\n    '''\n    '''\n    checking the tuple is of a minimum length and it has the same length as the tuple.\n    '''\n    '''\n    tuple must be of minimum length.\n    '''\n    # checking if the length of the tuple is greater than the length of the tuple \n    if len(tuplex)!= len(tuple1):\n        return False\n    '''\n    if there is a mismatch between the length of the tuple and the length of the tuple.\n    '''\n    '''\n    checking the elements of the tuple are unique and there are no duplicate elements.\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    check if the elements in tuple are unique\n    '''\n    if len(set(tuplex))!= len(tuplex):\n        return False\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''\n    checking for duplicate elements\n    '''\n    '''"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)!= tuple:\n        return False\n    elif len(tuplex) == len(tuple1):\n        for i in range(len(tuplex)):\n            if tuplex[i]!= tuple1[i]:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #check tuple\n    if tuple1[0] == tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return (tuplex[0] in tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        check = tuplex.index(tuple1)\n    except:\n        check = -1\n    if(check >= 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i==tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for el in tuplex: \n        if el in tuple1: \n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    flag = False\n    try: \n        for x in tuplex: \n            if x[0] == tuple1: \n                flag = True \n                break\n    except: \n        pass \n    return flag \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    for i in range(x):\n        if (x % 2) == 0:\n            print(\"The parity of\", x, \"is even\")\n        else:\n            print(\"The parity of\", x, \"is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # x = int(input(\"Please enter the number: \"))\n    # return x % 2 == 1\n    \n    # def is_odd(num):\n    #     return num % 2!= 0\n    # return any(is_odd(i) for i in range(1, x+1))\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = str(x)\n    if(x[0]=='-') : x=x[1:]\n    if(x[0]=='+') : x=x[1:]\n    if(x=='0') : return True\n    if(x=='1') : return False\n    if(x[0]=='2'): return True\n    if(x[0]=='3') : return False\n    if(x[0]=='4') : return True\n    if(x[0]=='5') : return False\n    if(x[0]=='6') : return True\n    if(x[0]=='7') : return False\n    if(x[0]=='8') : return True\n    if(x[0]=='9') : return False\n    if(x[0]=='-'): return True\n    if(x[0]=='+') : return False\n    if(x[0]=='3'): return True\n    if(x[0]=='4'): return False\n    if(x[0]=='5'): return True\n    if(x[0]=='6'): return False\n    if(x[0]=='7'): return True\n    if(x[0]=='8'): return False\n    if(x[0]=='9'): return True\n    if(x[0]=='-') : return False\n    if(x[0]=='+') : return True\n    if(x[0]=='2'): return False\n    if(x[0]=='1') : return True\n    if(x[0]=='3') : return False\n    if(x[0]=='4') : return True\n    if(x[0]=='5') : return False\n    if(x[0]=='6') : return True\n    if(x[0]=='7') : return False\n    if(x[0]=='8') : return True\n    if(x[0]=='9') : return False\n    if(x[0]=='0') : return True\n    if(x[0]=='1') : return False\n    if(x[0]=='2') : return True\n    if(x[0]=='3') : return False\n    if(x[0]=='4') : return True\n    if(x[0]=='5') : return False\n    if(x[0]=='6') : return True\n    if(x[0]=='7') : return False\n    if(x[0]=='8') : return True\n    if(x[0]=='9') : return False\n    if(x[0]=='-'): return True\n    if(x[0]=='+') : return False\n    if(x[0]=='2'): return True\n    if(x[0]=='1') : return False\n    if(x[0]=='3') : return True\n    if(x[0]=='4') : return False\n    if(x[0]=='5') : return True\n    if(x[0]=='6') : return False\n    if(x[0]=='7') : return True\n    if(x[0]=='8') : return False\n    if(x[0]=='9') : return True\n    if(x[0]=='0') : return True\n    if(x[0]=='1') : return False\n    if(x[0]=='2') : return True\n    if(x[0]=='3') : return False\n    if(x[0]=='4') : return True\n    if(x[0]=='5') : return False\n    if(x[0]=='6') : return True\n    if(x[0]=='7') : return False\n    if(x[0]=='8') : return True\n    if(x[0]=='9') : return False\n    if(x[0]=='-'): return True\n    if(x[0]=='+') : return False\n    if(x[0]=='2'): return True\n    if(x[0]=='1') : return False\n    if(x[0]=='3') : return True\n    if(x[0]=='4') : return False\n    if(x[0]=='5') : return True\n    if(x[0]=='6') : return False\n    if(x[0]=='7') : return True\n    if(x[0]=='8') : return False\n    if(x[0]=='9') : return True\n    if(x[0]=='-'): return False\n    if(x[0]=='+') : return True\n    if(x[0]=='2'): return False\n    if(x[0]=='1') : return True\n    if(x[0]=='3') : return False\n    if(x[0]=='4') : return True\n    if(x[0]=='5') : return False\n    if(x[0]=='6') : return True\n    if(x[0]=='7') : return False\n    if(x[0]=='8') : return True\n    if(x[0]=='9') : return False\n    if(x[0]=='-'): return True\n    if(x[0]=='0') : return False\n    if(x[0]=='1') : return True\n    if(x[0]=='2') : return False\n    if(x[0]=='3') : return True\n    if(x[0]=='4') : return False\n    if(x[0]=='5') : return True\n    if(x[0]=='6') : return False\n    if(x[0]=='7') : return True\n    if(x[0]=='8') : return False\n    if(x[0]=='9') : return True\n    if(x[0]=='-'): return False\n    if(x[0]=='+') : return True\n    if(x[0]=='2'): return False\n    if(x[0]=='1') : return True\n    if(x[0]=='3') : return False\n    if(x[0]=='4') : return True\n    if(x[0]=='5') : return False\n    if(x[0]=='6') : return True\n    if(x[0]=='7') : return False\n    if(x[0]=='8') : return True\n    if(x[0]=='9') : return False\n    if(x[0]=='-'): return True\n    if(x[0]=='0') : return False\n    if(x[0]=='1') : return True\n    if(x[0]=='2') : return False\n    if(x[0]=='3') : return True\n    if(x[0]=='4') : return False\n    if(x[0]=='5') : return True\n    if(x[0]=='6') : return False\n    if(x[0]=='7') : return True\n    if(x[0]=='8') : return False\n    if(x[0]=='9') : return True\n    if(x[0]=='-'): return False\n    if(x[0]=='+') : return True\n    if(x[0]=='2') : return False\n    if(x[0]=='1') : return True\n    if(x[0]=='3') : return False\n    if(x[0]=='4') : return True\n    if(x[0]=='5') : return False\n    if(x[0]=='6') : return True\n    if(x[0]=='7') : return False\n    if(x[0]=='8') : return True\n    if(x[0]=='9') : return False\n    if(x[0]=='-'): return True\n    if(x[0]=='0') : return False\n    if(x[0]=='1') : return True\n    if(x[0]=='2') : return False\n    if(x[0]=='3') : return True\n    i"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    odd = 0\n    for i in range(1, x):\n        if (x % i == 0):\n            if (x % (i * 2)) == 0:\n                odd = odd + 1\n    if (odd == 2):\n        print(\"This number is a partern.\")\n    else:\n        print(\"This number is not a partern.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x%2 == 0):\n        return True\n    else:\n        return False\n    \ndef find_Square(x):\n    '''\n    Write a python function to find whether a given number is square or not.\n    '''\n    if(x==1):\n        return True\n    elif(x==2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 0\n    \ndef find_Prime(x): \n    '''\n    Write a python function to find whether the given number is prime or not. \n    '''\n    for i in range(2, x):\n        if x % i == 0: \n            return False\n    return True\n    "
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0: \n        return True\n    elif x % 2 == 0: \n        return False\n    else: \n        return True\n    "
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    def is_odd(number):\n        return number % 2 == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = str(x)\n    a = []\n    for i in range(0, len(x)): \n        a.append(x[i])\n    b = []\n    for j in range(0, len(a)): \n        b.append(int(a[j]) % 2)\n    c = []\n    for k in range(0, len(b)): \n        c.append(b[k])\n    d = []\n    for l in range(0, len(c)): \n        d.append(c[l])\n    e = []\n    for m in range(0, len(d)): \n        e.append(d[m])\n    f = []\n    for n in range(0, len(e)): \n        f.append(e[n])\n    g = []\n    for o in range(0, len(f)): \n        g.append(f[o])\n    h = []\n    for p in range(0, len(g)): \n        h.append(g[p])\n    i = []\n    for q in range(0, len(h)): \n        i.append(h[q])\n    j = []\n    for r in range(0, len(i)): \n        j.append(i[r])\n    k = []\n    for s in range(0, len(j)): \n        k.append(j[s])\n    l = []\n    for t in range(0, len(k)): \n        l.append(k[t])\n    m = []\n    for u in range(0, len(l)): \n        m.append(l[u])\n    n = []\n    for v in range(0, len(m)): \n        n.append(m[v])\n    o = []\n    for w in range(0, len(n)): \n        o.append(n[w])\n    p = []\n    for x in range(0, len(o)): \n        p.append(o[x])\n    q = []\n    for y in range(0, len(p)): \n        q.append(p[y])\n    r = []\n    for z in range(0, len(q)): \n        r.append(q[z])\n    s = []\n    for w in range(0, len(r)): \n        s.append(r[w])\n    t = []\n    for x in range(0, len(s)): \n        t.append(s[x])\n    u = []\n    for y in range(0, len(t)): \n        u.append(t[y])\n    v = []\n    for z in range(0, len(u)): \n        v.append(u[z])\n    w = []\n    for x in range(0, len(v)): \n        w.append(v[x])\n    x = []\n    for y in range(0, len(w)): \n        x.append(w[y])\n    y = []\n    for z in range(0, len(x)): \n        y.append(x[z])\n    z = []\n    for x in range(0, len(y)): \n        z.append(y[x])\n    i = []\n    for y in range(0, len(z)): \n        i.append(z[y])\n    j = []\n    for x in range(0, len(i)): \n        j.append(i[x])\n    k = []\n    for y in range(0, len(j)): \n        k.append(j[y])\n    l = []\n    for x in range(0, len(k)): \n        l.append(k[x])\n    m = []\n    for y in range(0, len(l)): \n        m.append(l[y])\n    n = []\n    for x in range(0, len(m)): \n        n.append(m[x])\n    o = []\n    for y in range(0, len(n)): \n        o.append(n[y])\n    p = []\n    for x in range(0, len(o)): \n        p.append(o[x])\n    q = []\n    for y in range(0, len(p)): \n        q.append(p[y])\n    r = []\n    for x in range(0, len(q)): \n        r.append(q[x])\n    s = []\n    for y in range(0, len(r)): \n        s.append(r[y])\n    t = []\n    for x in range(0, len(s)): \n        t.append(s[x])\n    u = []\n    for y in range(0, len(t)): \n        u.append(t[y])\n    v = []\n    for x in range(0, len(u)): \n        v.append(u[x])\n    w = []\n    for y in range(0, len(v)): \n        w.append(v[y])\n    x = []\n    for y in range(0, len(w)): \n        x.append(w[y])\n    y = []\n    for x in range(0, len(x)): \n        y.append(x[y])\n    z = []\n    for y in range(0, len(y)): \n        z.append(y[z])\n    i = []\n    for y in range(0, len(z)): \n        i.append(z[y])\n    j = []\n    for y in range(0, len(i)): \n        j.append(i[y])\n    k = []\n    for y in range(0, len(j)): \n        k.append(j[y])\n    l = []\n    for y in range(0, len(k)): \n        l.append(k[y])\n    m = []\n    for y in range(0, len(l)): \n        m.append(l[y])\n    n = []\n    for y in range(0, len(m)): \n        n.append(m[y])\n    o = []\n    for y in range(0, len(n)): \n        o.append(n[y])\n    p = []\n    for y in range(0, len(o)): \n        p.append(o[y])\n    q = []\n    for y in range(0, len(p)): \n        q.append(p[y])\n    r = []\n    for y in range(0, len(q)): \n        r.append(q[y])\n    s = []\n    for y in range(0, len(r)): \n        s.append(r[y])\n    t = []\n    for y in range(0, len(s)): \n        t.append(s[y])\n    u = []\n    for y in range(0, len(t)): \n        u.append(t[y])\n    v = []\n    for y in range(0, len(u)): \n        v.append(u[y])\n    w = []\n    for y in range(0, len(v)): \n        w.append(v[y])\n    x = []\n    for y in range(0, len(w)): \n        x.append(w[y])\n    y = []\n    for y in range(0, len(x)): \n        y.append(x[y])\n    z = []\n    for y in range(0, len(y)): \n        z.append(y[z])\n    i = []\n    for y in range(0, len(z)): \n        i.append(z[y])\n    j = []\n    for y in range(0, len(i)): \n        j.append(i[y])\n    k = []\n    for y in range(0, len(j)): \n        k.append(j[y])\n    l = []\n    for y in range(0, len(k)): \n        l.append(k[y])\n    m = []\n    for y in range(0, len(l)):"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    ans = 0\n    if n == 0:\n        return 0\n    \n    while n > 0:\n        n, r = divmod(n, 10)\n        ans += r\n    \n    return ans\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return sum(c[::-1] for c in list(str(n)))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # form a string\n    str_n=str(n)\n    #reverse the string\n    str_n = str_n[::-1]\n    #subtract all the digits from the string\n    digits = str_n[::-1]\n    #create a list of the digits\n    digits = list(digits)\n    #convert digits to int\n    digits = list(map(int,digits))\n    #convert the digits to the numbers\n    numbers = [i for i in digits]\n    #create an empty array\n    final = []\n    #rearrange the numbers\n    for i in range(0,len(numbers),2):\n        final.append(numbers[i])\n        final.append(numbers[i+1])\n    #return the new bigger number\n    return(sum(final))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = int(n)\n    return n if n>0 else n+10**(n%2)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    num_list = list(num)\n    num_list.reverse()\n    num = ''.join(num_list)\n    return int(num)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    for i in range(len(digits)):\n        if digits[i] == \"9\":\n            digits[i] = \"0\"\n        elif digits[i] == \"8\":\n            digits[i] = \"1\"\n        elif digits[i] == \"7\":\n            digits[i] = \"2\"\n        else:\n            digits[i] = \"3\"\n    for i in range(len(digits)):\n        digits[i] = int(digits[i])\n    return int(''.join(digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) < n:\n        return n\n    num_rearrange = str(n)[-n:]\n    return int(num_rearrange)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    l = []\n    c = 0\n    while n > 0:\n        c += 1\n        n //= 10\n        l.append(n)\n    l.reverse()\n    for i in l:\n        n = i * 10 + c\n        if n < 10**9:\n            return n\n    \n    # if n < 10**9:\n    #     return n\n    \n    # i = 0\n    # n = 10**9\n    # while i < 10**9:\n    #     if n < 10**9:\n    #         n *= 10\n    #         n += i\n    #         break\n    #     n //= 10\n    #     i += 1\n    #     n *= 10\n    #     n += i\n    # return n\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = 0\n    rev = 0\n    digits = []\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    if n % 10 > 9:\n        n = n//10\n        return n+rearrange_bigger(n)\n    return n+rearrange_bigger(n//10)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or len(nums1) < len(nums2):\n        return -1\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k == 0:\n        return -1\n    n = len(nums1)\n    h = []\n    for i in range(n):\n        heapq.heappush(h, (-nums1[i], nums1[i]))\n    for i in range(n):\n        heapq.heappush(h, (-nums2[i], nums2[i]))\n    for i in range(n-k):\n        if h:\n            smallest_val, smallest_element = heapq.heappop(h)\n            if smallest_element!= nums1[i] and smallest_element!= nums2[i]:\n                heapq.heappush(h, (-nums1[i], nums1[i]))\n                heapq.heappush(h, (-nums2[i], nums2[i]))\n    result = []\n    for i in range(k):\n        result.append([heapq.heappop(h)[1], heapq.heappop(h)[1]])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums2) < len(nums1):\n        nums1, nums2 = nums1, nums2\n    heap = []\n    i = 0\n    for j in range(len(nums1)):\n        #\u00a0we need to change the result of nums1[j] to nums2[i]\n        heapq.heappush(heap, (nums1[j], i))\n        i += 1\n    j = 0\n    for i in range(len(nums2)):\n        #\u00a0we need to change the result of nums2[i] to nums1[j]\n        heapq.heappush(heap, (nums2[i], j))\n        j += 1\n    # we need to remove all the duplicate elements\n    while heap:\n        val, index = heapq.heappop(heap)\n        if index == len(nums1) - 1:\n            break\n        for j in range(index, len(nums1)):\n            heapq.heappush(heap, (nums1[j], index + 1))\n    if k < len(nums1):\n        result = []\n        for j in range(k):\n            result.append((heapq.heappop(heap)[1], heapq.heappop(heap)[0]))\n    else:\n        result = []\n        for j in range(k, len(nums2)):\n            result.append((heapq.heappop(heap)[1], heapq.heappop(heap)[0]))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 1:\n        return quick_sort(nums1), quick_sort(nums2)\n    else:\n        pairs = []\n        result = []\n        left, right = quick_sort(nums1), quick_sort(nums2)\n        left, right = left[:k], right[:k]\n        print(left, right)\n        print(\"Left:\", left)\n        print(\"Right:\", right)\n        for i in range(k):\n            pairs.append([left[i], right[i]])\n        pairs.sort()\n        print(\"Pairs:\", pairs)\n        print(\"Result:\", result)\n        print(\"Left:\", left)\n        print(\"Right:\", right)\n        print(\"Result:\", result)\n        print(\"Left:\", left)\n        print(\"Right:\", right)\n        return pairs, result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    elif len(nums1)<len(nums2):\n        #nums1 = sorted(nums1)\n        #nums2 = sorted(nums2)\n        return k_smallest_pairs(nums2,nums1,k)\n    elif len(nums2)<len(nums1):\n        #nums1 = sorted(nums1)\n        #nums2 = sorted(nums2)\n        return k_smallest_pairs(nums1,nums2,k)\n    else:\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i]<nums2[j]:\n                    heapq.heappush(heap, (nums1[i]*nums2[j],i,j))\n                    heapq.heappush(heap, (nums1[i]*nums2[j],j,i))\n                    heapq.heappush(heap, (nums1[i]*nums2[j],i,j))\n                    heapq.heappush(heap, (nums1[i]*nums2[j],j,i))\n                    heapq.heappush(heap, (nums1[i]*nums2[j],i,j))\n                    heapq.heappush(heap, (nums1[i]*nums2[j],j,i))\n        \n        count = 0\n        for i in range(k):\n            for j in range(len(heap)):\n                if heap[j][0]*heap[j][1]>=heap[i][0]:\n                    heapq.heappop(heap)\n                    heapq.heappop(heap)\n                    count += 1\n                    break\n        return count\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for i in range(len(nums1)):\n        heapq.heappush(h, (-nums1[i], nums1[i], i))\n    for i in range(k):\n        heapq.heappop(h)\n    while h:\n        a, b, idx = heapq.heappop(h)\n        if idx!= n-1:\n            heapq.heappush(h, (-nums2[idx], nums2[idx], idx))\n    \n    return h\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                heapq.heappush(heap, (nums1[i] + nums2[j], i + 1, j + 1))\n    k_smallest = []\n    \n    while len(heap) > 0 and k > 0:\n        smallest, first, second = heapq.heappop(heap)\n        if smallest > k:\n            k -= smallest\n            k_smallest.append([first, second])\n            heapq.heappush(heap, smallest)\n        else:\n            heapq.heappush(k_smallest, smallest)\n    if k < 0:\n        return 'No'\n    if len(k_smallest) == 0:\n        return 'No'\n    else:\n        return k_smallest\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pair_heap = []\n    result = []\n    #initialize a pair array to store values\n    pair_array = []\n    #initialize a pair heap to store values\n    pair_heap = []\n    #push value to the pair array, the value should be higher than the value on the leftmost element of the array\n    #pop the element from the pair array\n    pair_array.append(nums1[0])\n    for i in range(len(nums1)):\n        if nums1[i] > nums1[0]:\n            heapq.heappush(pair_heap, (nums1[i], nums1[i]))\n            heapq.heappush(pair_heap, (nums1[0], nums1[i]))\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, (num, 1))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    min_product_product = list1[0][0]*list1[1][1]\n    min_product_min = list1[0][0]*list1[0][1]\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_product_product = list1[i][0]*list1[j][1]\n                min_product_min = list1[i][0]*list1[j][1]\n    return min_product, min_product_product, min_product_min\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return list1[0][0] * list1[1][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    lst1 = []\n    if len(list1)==0:\n        return\n    for i in range(0,len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if list1[i]*list1[j]<0:\n                lst1.append((list1[i],list1[j]))\n    return (min(lst1))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 0\n    min_tuple = ()\n    \n    for index in range(len(list1)):\n        if list1[index][0] < list1[index][1]:\n            product = list1[index][0]\n            min_tuple = list1[index]\n        else:\n            product = list1[index][1]\n            min_tuple = list1[index]\n    \n    return min_tuple, product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        raise Exception(\"List is empty\")\n    t = tuple(list1)\n    min_product = []\n    if t[0] < t[1]:\n        min_product = [t[0]]\n    else:\n        min_product = [t[1]]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_p = list1[0]\n    min_p_d = 0\n    for i in list1:\n        if i < min_p:\n            min_p = i\n            min_p_d = list1.index(i)\n    return (min_p, min_p_d)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # your code goes here\n    min_tuple = (min(list1))\n    return min_tuple\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0]\n    i = 0\n    for j in range(1, len(list1)):\n        if min_prod < list1[j]:\n            min_prod = list1[j]\n            i = j\n    return (min_prod, i)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    min_product = list1[0][0] * list1[1][0]\n    for x in list1:\n        for y in x:\n            if y[0] < min_product:\n                min_product = y[0]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_num = list1[0][1]\n    min_index = 0\n    for i in range(len(list1)):\n        if list1[i][1] < min_num:\n            min_num = list1[i][1]\n            min_index = i\n    print(\"The minimum product is \",min_num)\n    print(\"The index of the minimum product is \",min_index)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    \n    for el in listval:\n        if el < min_val:\n            min_val = el\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Case: array is empty\n    if len(listval) == 0:\n        return -1\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # base case\n    if len(listval) == 0:\n        return 0\n    # get the min\n    min = listval[0]\n    for val in listval:\n        if val < min:\n            min = val\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    i=0\n    while i < len(listval):\n        j=i+1\n        while j < len(listval):\n            if listval[i]<listval[j]:\n                listval[i], listval[j] = listval[j], listval[i]\n                i=j\n            j+=1\n        i+=1\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = 0\n    for x in range(len(listval)):\n        if listval[x] < minval:\n            minval = listval[x]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in range(0, len(listval)):\n        if listval[i] < listval[0]:\n            return listval[i]\n    return 0\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    min_index = 0\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            min_index = i\n    return min_val, min_index\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = \"\"\n    for i in word.split(\"_\"):\n        result += i.capitalize()\n    return result\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    result = \"\"\n    for i in word.split(\"_\"):\n        result += i.title()\n    return result\ndef swap_case(word):\n    '''\n    Write a function to swap the case of the given word.\n    '''\n    result = \"\"\n    for i in word.lower():\n        if i.isupper():\n            result += i.swapcase()\n        else:\n            result += i\n    return result\ndef split_word(word):\n    '''\n    Write a function that will split the given word into words by spaces.\n    '''\n    return word.split()\ndef replace_letter(word):\n    '''\n    Write a function to replace the letter of the given word.\n    '''\n    result = \"\"\n    for i in word.lower():\n        if i.islower():\n            result += i.upper()\n        else:\n            result += i\n    return result\ndef strip_spaces(word):\n    '''\n    Write a function to strip spaces from the given word.\n    '''\n    result = \"\"\n    for i in word.lower():\n        if i.isalpha() or i.isspace():\n            result += i\n    return result\ndef is_number(word):\n    '''\n    Write a function to check if the word contains numbers.\n    '''\n    result = False\n    if re.search('^[0-9]$', word):\n        result = True\n    return result\ndef is_letter(word):\n    '''\n    Write a function to check if the word contains letters.\n    '''\n    result = False\n    if re.search('^[a-zA-Z]$', word):\n        result = True\n    return result\ndef is_upper(word):\n    '''\n    Write a function to check if the word contains upper letters.\n    '''\n    result = False\n    if re.search('^[a-zA-Z]', word):\n        result = True\n    return result\ndef is_lower(word):\n    '''\n    Write a function to check if the word contains lower letters.\n    '''\n    result = False\n    if re.search('^[a-zA-Z]', word):\n        result = True\n    return result\ndef is_digit(word):\n    '''\n    Write a function to check if the word contains digits.\n    '''\n    result = False\n    if re.search('^[0-9]$', word):\n        result = True\n    return result\ndef is_stop(word):\n    '''\n    Write a function to check if the word ends in a digit.\n    '''\n    result = False\n    if re.search('^[0-9]$', word):\n        result = True\n    return result\ndef is_letter_lower(word):\n    '''\n    Write a function to check if the word contains letter lower case letters.\n    '''\n    result = False\n    if re.search('^[a-zA-Z]', word):\n        result = True\n    return result\ndef is_letter_uppercase(word):\n    '''\n    Write a function to check if the word contains letter upper case letters.\n    '''\n    result = False\n    if re.search('^[A-Z]', word):\n        result = True\n    return result\ndef is_digit_uppercase(word):\n    '''\n    Write a function to check if the word contains digit upper case letters.\n    '''\n    result = False\n    if re.search('^[0-9]$', word):\n        result = True\n    return result\ndef is_uppercase(word):\n    '''\n    Write a function to check if the word contains uppercase letters.\n    '''\n    result = False\n    if re.search('^[A-Z]$', word):\n        result = True\n    return result\ndef is_stop_uppercase(word):\n    '''\n    Write a function to check if the word ends in a uppercase letter.\n    '''\n    result = False\n    if re.search('^[A-Z]$', word):\n        result = True\n    return result\ndef is_stop_lower(word):\n    '''\n    Write a function to check if the word ends in a lower case letter.\n    '''\n    result = False\n    if re.search('^[a-z]$', word):\n        result = True\n    return result\ndef is_stop_lower_upper(word):\n    '''\n    Write a function to check if the word ends in a lower case letter and upper case letters.\n    '''\n    result = False\n    if re.search('^[a-z]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    return result\ndef is_lower_upper(word):\n    '''\n    Write a function to check if the word ends in lower case letters and upper case letters.\n    '''\n    result = False\n    if re.search('^[a-z]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    if re.search('^[a-z]$', word):\n        result = True\n    return result\ndef is_lower_uppercase(word):\n    '''\n    Write a function to check if the word ends in lower case letters and upper case letters.\n    '''\n    result = False\n    if re.search('^[a-z]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    if re.search('^[a-z]$', word):\n        result = True\n    return result\ndef is_digit_uppercase(word):\n    '''\n    Write a function to check if the word ends in digits and uppercase letters.\n    '''\n    result = False\n    if re.search('^[0-9]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    if re.search('^[a-z]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    return result\ndef is_stop_digit(word):\n    '''\n    Write a function to check if the word ends in digits and uppercase letters.\n    '''\n    result = False\n    if re.search('^[0-9]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    if re.search('^[a-z]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    return result\ndef is_stop_letter(word):\n    '''\n    Write a function to check if the word ends in lower case letters and uppercase letters.\n    '''\n    result = False\n    if re.search('^[a-z]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    if re.search('^[a-z]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    return result\ndef is_stop_lower_upper(word):\n    '''\n    Write a function to check if the word ends in lower case letters and upper case letters.\n    '''\n    result = False\n    if re.search('^[a-z]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    if re.search('^[a-z]$', word):\n        result = True\n    if re.search('^[A-Z]$', word):\n        result = True\n    return result\ndef is_lower_uppercase(word):\n    '''\n    Write a function to check if th"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Your code goes here\n    if re.search('^[A-Z][a-z]+$',word):\n        return re.sub('(.)([A-Z][a-z]+)','\\\\1_\\\\2',word)\n    else:\n        return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = word.replace(\"_\",\"\")\n    if \"_\" in new_word:\n        return new_word.replace(\"_\", \"S\")\n    else:\n        return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'[A-Z]+$')\n    snake_case_dict = {\n        'VAR': 'variable',\n        'ARG': 'arguments',\n        'FUN': 'function',\n        'FAC': 'facilities',\n        'SUB':'subscriptions',\n        'COMMA': 'commas',\n        'LPAR': 'lpar',\n        'RPAR': 'rpar',\n        'DOT': 'dots',\n        'LBRACE': 'lbrace',\n        'RBRACE': 'rbrace',\n        'SEMICOLON':'semicolon',\n        'COLON': 'colon',\n        'COLONCOLON': 'coloncolon',\n        'ELLIPSIS': 'ellipsis',\n        'COMMACOLON': 'commacolon',\n        'LPARCOLON': 'lparcolon',\n        'RPARCOLON': 'rparcolon',\n        'EQUALS': 'equals',\n        'NOTEQUALS': 'notequal',\n        'GREATER': 'greater',\n        'GREATEREQUAL': 'greaterequal',\n        'LESSTHAN': 'lessthan',\n        'LESSTHANEQUAL': 'lessthanequal',\n        'GREATEREQUAL': 'greaterequal',\n        'NOTEQUALS': 'notequal',\n        'NOTNOTEQUALS': 'notnotequal',\n        'GREATERINTAKE': 'greaterthan',\n        'GREATERINEQUAL': 'greaterinequal',\n        'LESSTHAN': 'lessthan',\n        'LESSTHANINEQUAL': 'lessthanequal',\n        'GREATEREQUALINEQUAL': 'greaterequalinequal',\n        'NOTEQUALINEQUAL': 'notequalinequal',\n        'GREATERTAN': 'greaterthan',\n        'GREATERINEQUALINEQUAL': 'greaterinequalinequal',\n        'LESSTANINEQUAL': 'lessthaninequal',\n        'LESSTANINEQUALINEQUAL': 'lessthanequalinequal',\n        'REQUIRED':'required',\n        'REQUIREDINTAKE':'requiredintake',\n        'REQUIREDINEQUAL':'requiredinequal',\n        'REQUIREDTANINEQUAL':'requiredtaninequal',\n        'REQUIREDTANINEQUALINEQUAL':'requiredtaninequalinequal',\n        'REQUIREDEQUALINEQUAL':'requiredequalinequal',\n        'REQUIREDEQUALINEQUALINEQUAL':'requiredequalinequalinequal',\n        'NOTREQUIRED': 'notrequired',\n        'NOTREQUIREDINTAKE': 'notrequiredintake',\n        'NOTREQUIREDINEQUAL': 'notrequiredinequal',\n        'NOTREQUIREDINEQUALINEQUAL': 'notrequiredinequalinequal',\n        'NOTREQUIREDTANINEQUAL': 'notrequiredtaninequal',\n        'NOTREQUIREDTANINEQUALINEQUAL': 'notrequiredtaninequalinequal',\n        'NOTREQUIREDEQUALINEQUAL': 'notrequiredequalinequal',\n        'NOTREQUIREDEQUALINEQUALINEQUAL': 'notrequiredequalinequalinequal',\n        'NOTREQUIREDEQUALINEQUALINEQUAL': 'notrequiredequalinequalinequalinequal',\n        'NOTREQUIREDINTAKE': 'notrequiredintake',\n        'NOTREQUIREDINTAKEINEQUAL': 'notrequiredintakeinequal',\n        'NOTREQUIREDINTAKEINEQUALLINEQUAL': 'notrequiredintakeinequallinequal',\n        'NOTREQUIREDINEQUALINEQUAL': 'notrequiredinequalinequal',\n        'NOTREQUIREDINEQUALINEQUAL': 'notrequiredinequalinequallinequal',\n        'NOTREQUIREDTANINEQUAL': 'notrequiredtaninequal',\n        'NOTREQUIREDTANINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDEQUALINEQUAL': 'notrequiredequalinequal',\n        'NOTREQUIREDEQUALINEQUALINEQUAL': 'notrequiredequalinequallinequal',\n        'NOTREQUIREDEQUALINEQUALINEQUAL': 'notrequiredequalinequallinequal',\n        'NOTREQUIREDINEQUALINEQUAL': 'notrequiredinequallinequal',\n        'NOTREQUIREDINEQUALINEQUAL': 'notrequiredinequallinequal',\n        'NOTREQUIREDINEQUALINEQUALLINEQUAL': 'notrequiredinequallinequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUAL': 'notrequiredtaninequalinequal',\n        'NOTREQUIREDTANINEQUALINEQUAL': 'notrequiredtaninequalinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal',\n        'NOTREQUIREDTANINEQUALINEQUALLINEQUAL': 'notrequiredtaninequallinequal'"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return \"\"\n    word = word.lower()\n    return re.sub('[^A-Z]', '', word).strip().title()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    w = word.split(\"_\")\n    return \"\".join(i[0].upper() + i[1:] for i in w)\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    w = re.split(\"(.)([A-Z][a-z]+)\", word)\n    return \"\".join(i[1].upper() + i[0] for i in w)\ndef to_camel(string):\n    '''\n    Write a function to convert a given string to camel case.\n    '''\n    return re.sub(\"(.)([A-Z][a-z]+)\", lambda x: x[1].upper(), string)\ndef to_snake(string):\n    '''\n    Write a function to convert a given string to snake case.\n    '''\n    return re.sub(\"(.)([a-z])\", lambda x: x[1].upper(), string)\ndef to_snake_to_camel(string):\n    '''\n    Write a function to convert a given string to snake case.\n    '''\n    return re.sub(\"([a-z])\", lambda x: x.upper(), string)\ndef to_camel_to_snake(string):\n    '''\n    Write a function to convert a given string to camel case.\n    '''\n    return re.sub(\"([a-z])\", lambda x: x.upper(), string)\ndef main():\n    if len(sys.argv) < 2:\n        print(f\"Usage: {sys.argv[0]} <input file>\")\n        sys.exit(1)\n    # Get file name\n    fileName = sys.argv[1]\n    # Open file\n    f = open(fileName, \"r\")\n    # Read file\n    line = f.readline()\n    # Loop through all lines and convert them to camel case\n    while line:\n        line = line.rstrip()\n        line = to_camel(line)\n        line = snake_to_camel(line)\n        line = to_snake(line)\n        line = to_snake_to_camel(line)\n        line = to_camel_to_snake(line)\n        line = to_snake_to_camel(line)\n        line = to_camel_to_snake(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(line)\n        line = to_snake_to_camel(lin"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #TODO\n    #1.\n    #\n    #2.\n    #3.\n    #4.\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            l[i] = l[i]//2\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    i = 0\n    while i < len(l):\n        if l[i] % 2!= 0:\n            new_list.append(l[i])\n        i = i + 1\n    l = new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = []\n    for x in l:\n        if x % 2 == 0:\n            l2.append(x)\n    return l2\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #print(l)\n    evens = []\n    for x in l:\n        if x % 2 == 0:\n            evens.append(x)\n    \n    print(evens)\n    return evens\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n        else:\n            continue\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in range(len(l)):\n        if l[i]%2 == 1:\n            result.append(l[i])\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    res = []\n    for i in l:\n        if i % 2!= 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2!=0]\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n    \ndef main():\n    '''\n    Ask the user to enter some numbers\n    Then print all odd numbers.\n    Then print all even numbers.\n    Finally print the new list.\n    '''\n    num1 = int(input(\"Enter a number: \"))\n    print(remove_odd(num1))\n    print(remove_even(num1))\n    print(num1)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    count = 0\n    while count < len(l):\n        if l[count % 2] % 2 == 0:\n            l.remove(l[count % 2])\n        count += 1\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return (list1[n])\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == len(list1):\n        return list1[n][1]\n    else:\n        return extract_nth_element(list1, n+1)\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) < len(list2):\n        for elem in list2:\n            if elem in list1:\n                return True\n    elif len(list1) > len(list2):\n        for elem in list1:\n            if elem in list2:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1[0] in list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list_1=list(list1)\n    list_2=list(list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # your code goes here\n    #print(type(list1),type(list2))\n    if len(list1)>len(list2):\n        for x in range(len(list1)):\n            if list1[x] in list2:\n                return True\n    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list1.count(list2[0])!=list1.count(list2[1])!=list1.count(list2[2])!=list1.count(list2[3])!=list1.count(list2[4])!=list1.count(list2[5])!=list1.count(list2[6])!=list1.count(list2[7])!=list1.count(list2[8])!=list1.count(list2[9])!=list1.count(list2[10])!=list1.count(list2[11])!=list1.count(list2[12])!=list1.count(list2[13])!=list1.count(list2[14])!=list1.count(list2[15])!=list1.count(list2[16])!=list1.count(list2[17])!=list1.count(list2[18])!=list1.count(list2[19])!=list1.count(list2[20])!=list1.count(list2[21])!=list1.count(list2[22])!=list1.count(list2[23])!=list1.count(list2[24])!=list1.count(list2[25])!=list1.count(list2[26])!=list1.count(list2[27])!=list1.count(list2[28])!=list1.count(list2[29])!=list1.count(list2[30])!=list1.count(list2[31])!=list1.count(list2[32])!=list1.count(list2[33])!=list1.count(list2[34])!=list1.count(list2[35])!=list1.count(list2[36])!=list1.count(list2[37])!=list1.count(list2[38])!=list1.count(list2[39])!=list1.count(list2[40])!=list1.count(list2[41])!=list1.count(list2[42])!=list1.count(list2[43])!=list1.count(list2[44])!=list1.count(list2[45])!=list1.count(list2[46])!=list1.count(list2[47])!=list1.count(list2[48])!=list1.count(list2[49])!=list1.count(list2[50])!=list1.count(list2[51])!=list1.count(list2[52])!=list1.count(list2[53])!=list1.count(list2[54])!=list1.count(list2[55])!=list1.count(list2[56])!=list1.count(list2[57])!=list1.count(list2[58])!=list1.count(list2[59])!=list1.count(list2[60])!=list1.count(list2[61])!=list1.count(list2[62])!=list1.count(list2[63])!=list1.count(list2[64])!=list1.count(list2[65])!=list1.count(list2[66])!=list1.count(list2[67])!=list1.count(list2[68])!=list1.count(list2[69])!=list1.count(list2[70])!=list1.count(list2[71])!=list1.count(list2[72])!=list1.count(list2[73])!=list1.count(list2[74])!=list1.count(list2[75])!=list1.count(list2[76])!=list1.count(list2[77])!=list1.count(list2[78])!=list1.count(list2[79])!=list1.count(list2[80])!=list1.count(list2[81])!=list1.count(list2[82])!=list1.count(list2[83])!=list1.count(list2[84])!=list1.count(list2[85])!=list1.count(list2[86])!=list1.count(list2[87])!=list1.count(list2[88])!=list1.count(list2[89])!=list1.count(list2[90])!=list1.count(list2[91])!=list1.count(list2[92])!=list1.count(list2[93])!=list1.count(list2[94])!=list1.count(list2[95])!=list1.count(list2[96])!=list1.count(list2[97])!=list1.count(list2[98])!=list1.count(list2[99])!=list1.count(list2[100])!=list1.count(list2[101])!=list1.count(list2[102])!=list1.count(list2[103])!=list1.count(list2[104])!=list1.count(list2[105])!=list1.count(list2[106])!=list1.count(list2[107])!=list1.count(list2[108])!=list1.count(list2[109])!=list1.count(list2[110])!=list1.count(list2[111])!=list1.count(list2[112])!=list1.count(list2[113])!=list1.count(list2[114])!=list1.count(list2[115])!=list1.count(list2[116])!=list1.count(list2[117])!=list1.count(list2[118])!=list1.count(list2[119])!=list1.count(list2[120])!=list1.count(list2[121])!=list1.count(list2[122])!=list1.count(list2[123])!=list1.count(list2[124])!=list1.count(list2[125])!=list1.count(list2[126])!=list1.count(list2[127])!=list1.count(list2[128])!=list1.count(list2[129])!=list1.count(list2[130])!=list1.count(list2[131])!=list1.count(list2[132])!=list1.count(list2[133])!=list1.count(list2[134])!=list1.count(list2[135])!=list1.count(list2[136])!=list1.count(list2[137])!=list1.count(list2[138])!=list1.count(list2[139])!=list1.count(list2[140])!=list1.count(list2[141])!=list1.count(list2[142])!=list1.count(list2[143])!=list1.count(list2[144])!=list1.count(list2[145])!=list1.count(list2[146])!=list1.count(list2[147])!=list1.count(list2[148])!=list1.count(list2[149])!=list1.count(list2[150])!=list1.count(list2[151])!=list1.count(list2[152])!=list1.count(list2[153])!=list1.count(list2[154])!=list1.count(list2[155])!=list1.count(list2[156])!=list1.count(list2[157])!=list1.count(list2[158])!=list1.count(list2[159])!=list1.count(list2[160])!=list1.count(list2[161])!=list1.count(list2[162])!=list1.count(list2[163])!=list1.count(list2[164])!=list1.count(list2[165])!=list1.count(list2[166])!=list"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    \n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    l=[]\n    for x in range(len(list1)):\n        if x in list2:\n            l.append(x)\n    return l\n    \n    \nprint(overlapping([1,2,3,4,5,6,7,8,9,10],range(10)))    \n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if(len(arr) == 0):\n        return None\n    n = len(arr)\n    max_p = max_p_item = arr[0]\n    for i in range(1,n):\n        max_p_item = max(arr[i],max_p_item*arr[i])\n        if max_p_item > max_p:\n            max_p = max_p_item\n    return [arr.index(max_p_item),max_p_item]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p = arr[0]\n    for i in range(1,len(arr)): \n        if arr[i] > max_p:\n            max_p = arr[i]\n    return max_p\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 1:\n        return (arr[0], 1)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    i = 0\n    j = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > arr[j] * arr[i]:\n                print(arr[i], arr[j])\n                break\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    dictionary = {}\n    for i in arr:\n        if i in dictionary:\n            dictionary[i] = dictionary[i] + 1\n        else:\n            dictionary[i] = 1\n    maximum = -1\n    key_max = None\n    for k, v in dictionary.items():\n        if v > maximum:\n            maximum = v\n            key_max = k\n    return key_max\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    p = 1\n    i = 0\n    while i < len(arr):\n        if arr[i] % arr[p] == 0:\n            arr[i], arr[p] = arr[p], arr[i]\n            i += 1\n            p += 1\n        else:\n            i += 1\n    return arr\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    Max = 0\n    i = 0\n    while i<len(arr):\n        val = arr[i]\n        j = i+1\n        while j<len(arr):\n            if arr[j]*val > Max:\n                Max = arr[j]*val\n            j+=1\n        i+=1\n    return Max\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[0]\n    for num in arr:\n        for i in range(len(arr)):\n            product = num * arr[i]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    if len(arr) < 2:\n        return None\n    \n    p1 = arr[0]\n    p2 = arr[1]\n    \n    for i in range(2, len(arr)):\n        if arr[i] > p1:\n            p2 = p2 + p1\n            p1 = arr[i]\n        elif arr[i] > p2:\n            p2 = arr[i] + p1\n            p1 = arr[i]\n    if arr[0] == p1:\n        return arr[0], p2\n    else:\n        return p1, p2\n    \n    \n    \n    \n    \n    \ndef array_to_matrix(arr): \n    \n    # Find the max product\n    max_product = max_Product(arr)\n    \n    # Create matrix with same dimensions as arr\n    matrix = [[0 for i in range(len(arr) + 1)] for j in range(len(arr) + 1)]\n    \n    # If max product is 0 return None\n    if max_product == None:\n        return None\n    \n    # Save the first and last element of arr\n    matrix[1][1] = arr[0]\n    matrix[len(arr)][len(arr)] = arr[len(arr) - 1]\n    \n    # Save max product\n    for i in range(2, len(arr) + 1):\n        matrix[i][len(arr) - 1] = max_product[0] * matrix[i - 2][len(arr) - 1]\n        \n        # If this element is greater than max product of that element\n        # then set max product as new element\n        if matrix[i][len(arr) - 1] > max_product[0]:\n            matrix[i][len(arr) - 1] = max_product[0]\n            \n    return matrix\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef matrix_to_array(matrix): \n    # Turn in matrix into list\n    arr = []\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            arr.append(matrix[i][j])\n    \n    return arr\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef count_trees(i, j): \n    # Check if the current square is a tree\n    if i < 0 or i >= len(matrix) or j < 0 or j >= len(matrix[i]) or matrix[i][j] == '#':\n        return 0\n    \n    # Add 1 to the count for each tree \n    count = matrix[i][j] + count_trees(i - 1, j) + count_trees(i, j - 1)\n    \n    # Return the count \n    return count\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = -1\n    min_prod = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_prod:\n            max_prod = arr[i]\n        if arr[i] < min_prod:\n            min_prod = arr[i]\n    return max_prod, min_prod\n    \ndef find_min(arr):\n    '''\n    Write a python function to find the minimum number from a given array of integers.\n    '''\n    min_prod = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < min_prod:\n            min_prod = arr[i]\n    return min_prod\n    \ndef find_max(arr):\n    '''\n    Write a python function to find the highest number from a given array of integers.\n    '''\n    max_prod = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_prod:\n            max_prod = arr[i]\n    return max_prod\n    \ndef find_max_and_min(arr):\n    '''\n    Write a python function to find the maximum and minimum number from a given array of integers.\n    '''\n    max_prod = arr[0]\n    min_prod = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > max_prod:\n            max_prod = arr[i]\n        if arr[i] < min_prod:\n            min_prod = arr[i]\n    return max_prod, min_prod\n    \ndef sum_of_digits(n):\n    '''\n    Find the sum of digits of a given number.\n    '''\n    sum = 0\n    while n > 0:\n        n, i = divmod(n, 10)\n        sum += i\n    return sum\n    \ndef factorize(n):\n    '''\n    Find a factor of a given number.\n    '''\n    factor = []\n    while n > 1:\n        if n % 2 == 0:\n            factor.append(2)\n        else:\n            factor.append(1)\n        n = n // 2\n    return factor\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if type(Input)!= tuple:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    Tuple_list = []\n    for i in range(len(Input)):\n        Tuple_list.append(Input[i])\n    \n    return Tuple_list[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # TODO: Create a function to check whether there is any other element in the list that is not\n    # first element.\n    \n    for x in range(len(Input)):\n        for y in range(len(Input)):\n            if x!= y:\n                if Input[x][1] == Input[y][1]:\n                    return Input[x][0]\n    \n    return \"First element not found\"\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l = len(Input)\n    a = [0]*l\n    for i in range(l):\n        a[i] = Input[i]\n    return a\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    First = []\n    for i in Input:\n        if i[0] not in First:\n            First.append(i[0])\n    return First\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    tuple = []\n    for i in range(len(Input)):\n        tuple = Input[i]\n        for j in range(len(tuple)):\n            if tuple[j] in Output:\n                continue\n            else:\n                Output.append(tuple[j])\n    print(Output)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Solution:\n    # lst = [('a',1),('b',2),('a',3)]\n    # lst = [['a','b'],[1,2]]\n    # Output: [a,b]\n    lst = []\n    for i in range(len(Input)):\n        for j in range(i,len(Input)):\n            if (Input[i][1] == Input[j][1]):\n                lst.append((Input[i][0],Input[j][0]))\n    return lst\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # make a dict to store pairs\n    lst = {}\n    # loop through each pair in list\n    for i in range(len(Input)):\n        # if index in dict, set to value, else index = index + 1\n        if Input[i] in lst:\n            lst[Input[i]] += 1\n        else:\n            lst[Input[i]] = 1\n    # return first element\n    return lst[min(lst)]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # start = time.time()\n    # element = []\n    # for i in Input:\n    #     if i not in element:\n    #         element.append(i)\n    # return element\n    # end = time.time()\n    # print(end-start)\n    # return element\n    \n    # group_tuple = set(Input)\n    # return group_tuple.pop()\n    # return group_tuple\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in lst:\n        if max < i:\n            max = i\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(0, len(lst)):\n        if lst[i] > max:\n            max = lst[i]\n    return max\n    \ndef find_Max(arr): \n    max = 0\n    for i in range(0, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        return max(lst, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst == []:\n        return \"Empty\"\n    else:\n        return max(lst)\n    \n    \n    #Use python function\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return (\"No element in list\")\n    elif len(lst) == 1:\n        return (lst[0])\n    else:\n        max_length = 0\n        current_len = 0\n        for i in range(len(lst)):\n            current_len += 1\n            if current_len > max_length:\n                max_length = current_len\n            if max_length == len(lst):\n                return (lst[i])\n        return (\"No elements in list\")\n    \nlst = []\nprint(Find_Max(lst))"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Your code here\n    if len(lst) == 0:\n        return\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return max(lst[1:len(lst)-1])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n    \n    \ndef Remove_Duplicates(lst):\n    '''\n    Write a python function to remove all duplicate elements from a list.\n    '''\n    unique_list = []\n    for i in lst:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n    \n    \ndef Append_to_List(lst,x):\n    '''\n    Write a python function to append a given element to a list.\n    '''\n    lst.append(x)\n    return lst\n    \n    \ndef Update_List(lst,x,y):\n    '''\n    Write a python function to update an element of a list.\n    '''\n    lst[x] = y\n    return lst\n    \n    \ndef Remove_From_List(lst,x):\n    '''\n    Write a python function to remove an element from a list.\n    '''\n    lst.pop(x)\n    return lst\n    \n    \ndef Remove_From_List_at(lst,x):\n    '''\n    Write a python function to remove an element from a list.\n    '''\n    lst.pop(x)\n    return lst\n    \n    \ndef Sort_by_Length(lst):\n    '''\n    Write a python function to sort a given list of length by taking the largest element as the first element.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i])\n    new_lst = sorted(new_lst,reverse=True)\n    return new_lst\n    \n    \ndef Remove_Duplicates_by_Length(lst):\n    '''\n    Write a python function to remove all duplicate elements of a given list.\n    '''\n    max_length = Find_Max(lst)\n    new_lst = []\n    for i in lst:\n        if len(i) == max_length:\n            new_lst.append(i)\n    return new_lst\n    \n    \ndef Reverse_List(lst):\n    '''\n    Write a python function to reverse the given list.\n    '''\n    lst[:] = lst[::-1]\n    return lst\n    \n    \ndef Sort_by_Index(lst):\n    '''\n    Write a python function to sort a given list by index.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][1])\n    new_lst = sorted(new_lst,reverse=True)\n    return new_lst\n    \n    \ndef Reverse_List_by_Index(lst):\n    '''\n    Write a python function to reverse the given list by index.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(lst[i][::-1])\n    return new_lst\n    \n    \ndef Sum_by_Index(lst):\n    '''\n    Write a python function to sum all elements in a given list by index.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[1])\n    new_lst = sum(new_lst)\n    return new_lst\n    \n    \ndef Get_Index_of_Element(lst, x):\n    '''\n    Write a python function to find the index of the given element.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == x:\n            return i\n    return -1\n    \n    \ndef Find_Index_of_Element(lst, x):\n    '''\n    Write a python function to find the index of the given element.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == x:\n            return i\n    return -1\n    \n    \ndef Get_List_Length(lst):\n    '''\n    Write a python function to return the length of the given list.\n    '''\n    return len(lst)\n    \n    \ndef Get_Length_of_List(lst):\n    '''\n    Write a python function to return the length of the given list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(len(i))\n    return max(new_lst)\n    \n    \ndef Get_Length_of_List_by_index(lst, x):\n    '''\n    Write a python function to return the length of the given list by index.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            new_lst.append(lst[i][1])\n    return max(new_lst)\n    \n    \ndef Get_List_of_Length(lst):\n    '''\n    Write a python function to return the length of the given list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(len(i))\n    return max(new_lst)\n    \n    \ndef Get_List_Length_by_index(lst, x):\n    '''\n    Write a python function to return the length of the given list by index.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            new_lst.append(lst[i][1])\n    return max(new_lst)\n    \n    \ndef Get_List_Length_of_List(lst):\n    '''\n    Write a python function to return the length of the given list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(len(i))\n    return max(new_lst)\n    \n    \ndef Get_Length_of_List_by_index(lst, x):\n    '''\n    Write a python function to return the length of the given list by index.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            new_lst.append(lst[i][1])\n    return max(new_lst)\n    \n    \ndef Get_Length_of_List_by_index(lst, x):\n    '''\n    Write a python function to return the length of the given list by index.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            new_lst.append(lst[i][1])\n    return max(new_lst)\n    \n    \ndef Get_Length_of_List(lst):\n    '''\n    Write a python function to return the length of the given list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(len(i))\n    return max(new_lst)\n    \n    \ndef Get_Length_of_List_by_index(lst, x):\n    '''\n    Write a python function to return the length of the given list by index.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            new_lst.append(lst[i][1])\n    return max(new_lst)\n    \n    \ndef Get_Length_of_List_by_index(lst, x):\n    '''\n    Write a python function to return the length of the given list by index.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            new_lst.appen"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # your code here\n    return lst[0] \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    i = 0\n    max = lst[0]\n    for j in range(len(lst)):\n        if lst[j] > max:\n            max = lst[j]\n            i = j\n    return i\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum([i*j for i,j in zip(list1,range(1,len(list1)+1))])\ndef mini_max_list(list_of_numbers):\n    '''\n    Write a function to find the min and max of a given list of numbers.\n    '''\n    min = max = list_of_numbers[0]\n    for i in range(1,len(list_of_numbers)):\n        if list_of_numbers[i] < list_of_numbers[i-1]:\n            min = list_of_numbers[i]\n        elif list_of_numbers[i] > list_of_numbers[i-1]:\n            max = list_of_numbers[i]\n    return(min,max)\ndef get_even(list_of_numbers):\n    '''\n    Write a function to find the even numbers of a given list of numbers.\n    '''\n    even_numbers = []\n    for i in range(len(list_of_numbers)):\n        if list_of_numbers[i] % 2 == 0:\n            even_numbers.append(list_of_numbers[i])\n    return even_numbers\ndef filter_odd(list_of_numbers):\n    '''\n    Write a function to find the odd numbers of a given list of numbers.\n    '''\n    odd_numbers = []\n    for i in range(len(list_of_numbers)):\n        if list_of_numbers[i] % 2!= 0:\n            odd_numbers.append(list_of_numbers[i])\n    return odd_numbers\ndef is_prime(number):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    for i in range(2,int(math.sqrt(number))+1):\n        if number%i==0:\n            return False\n    return True\ndef num_fibonacci(number):\n    '''\n    Write a function to print the numbers in the Fibonacci sequence.\n    '''\n    num = []\n    num.append(0)\n    num.append(1)\n    for i in range(2,number+1):\n        num.append(num[i-1]+num[i-2])\n    return num\ndef factorial(number):\n    '''\n    Write a function to find the factorial of a given number.\n    '''\n    if number == 0:\n        return 1\n    elif number == 1:\n        return 1\n    else:\n        return number*factorial(number-1)\ndef plus_minus(num1,num2):\n    '''\n    Write a function to find the sum and product of two numbers.\n    '''\n    sum = num1 + num2\n    product = num1 * num2\n    return(sum,product)\ndef swap(list_of_numbers,index_1,index_2):\n    '''\n    Write a function to swap the values of two given lists.\n    '''\n    list_of_numbers[index_1],list_of_numbers[index_2] = list_of_numbers[index_2],list_of_numbers[index_1]\n    return(list_of_numbers)\ndef reverse_list(list_of_numbers):\n    '''\n    Write a function to reverse a given list.\n    '''\n    return list_of_numbers[::-1]\ndef sort(list_of_numbers):\n    '''\n    Write a function to sort a given list.\n    '''\n    list_of_numbers.sort()\n    return list_of_numbers\ndef reverse_sort(list_of_numbers):\n    '''\n    Write a function to sort a given list using reverse order.\n    '''\n    list_of_numbers.sort(reverse=True)\n    return list_of_numbers\ndef swap_method(list_of_numbers):\n    '''\n    Write a function to swap two given lists.\n    '''\n    list_of_numbers[0],list_of_numbers[1] = list_of_numbers[1],list_of_numbers[0]\n    return(list_of_numbers)\ndef compare_method(list_of_numbers):\n    '''\n    Write a function to compare two given lists.\n    '''\n    return list_of_numbers[0]<list_of_numbers[1]\ndef bubble_sort(list_of_numbers):\n    '''\n    Write a function to sort a given list using the bubble sort algorithm.\n    '''\n    for i in range(len(list_of_numbers)):\n        for j in range(len(list_of_numbers)-1):\n            if list_of_numbers[j] > list_of_numbers[j+1]:\n                list_of_numbers[j],list_of_numbers[j+1] = list_of_numbers[j+1],list_of_numbers[j]\n    return list_of_numbers\ndef bubble_sort2(list_of_numbers):\n    '''\n    Write a function to sort a given list using the bubble sort algorithm.\n    '''\n    for i in range(len(list_of_numbers)):\n        for j in range(len(list_of_numbers)-1):\n            if list_of_numbers[j] < list_of_numbers[j+1]:\n                list_of_numbers[j],list_of_numbers[j+1] = list_of_numbers[j+1],list_of_numbers[j]\n    return list_of_numbers\ndef insertion_sort(list_of_numbers):\n    '''\n    Write a function to sort a given list using the insertion sort algorithm.\n    '''\n    for i in range(len(list_of_numbers)-1):\n        for j in range(i+1,len(list_of_numbers)):\n            if list_of_numbers[j] < list_of_numbers[j-1]:\n                list_of_numbers[j],list_of_numbers[j-1] = list_of_numbers[j-1],list_of_numbers[j]\n    return list_of_numbers\ndef insertion_sort2(list_of_numbers):\n    '''\n    Write a function to sort a given list using the insertion sort algorithm.\n    '''\n    for i in range(len(list_of_numbers)):\n        for j in range(i,0,-1):\n            if list_of_numbers[j] < list_of_numbers[j-1]:\n                list_of_numbers[j],list_of_numbers[j-1] = list_of_numbers[j-1],list_of_numbers[j]\n    return list_of_numbers\ndef selection_sort(list_of_numbers):\n    '''\n    Write a function to sort a given list using the selection sort algorithm.\n    '''\n    for i in range(len(list_of_numbers)):\n        min_index = i\n        for j in range(i+1,len(list_of_numbers)):\n            if list_of_numbers[j] < list_of_numbers[min_index]:\n                min_index = j\n        list_of_numbers[i],list_of_numbers[min_index] = list_of_numbers[min_index],list_of_numbers[i]\n    return list_of_numbers\ndef selection_sort2(list_of_numbers):\n    '''\n    Write a function to sort a given list using the selection sort algorithm.\n    '''\n    for i in range(len(list_of_numbers)-1):\n        min_index = i\n        for j in range(i+1,len(list_of_numbers)):\n            if list_of_numbers[j] < list_of_numbers[min_index]:\n                min_index = j\n        list_of_numbers[i],list_of_numbers[min_index] = list_of_numbers[min_index],list_of_numbers[i]\n    return list_of_"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Use a variable to store the sum of the numbers in the list.\n    sum = 0\n    # Loop through the numbers in the list.\n    for i in range(len(list1)):\n        sum += list1[i]\n    # Return the sum multiplied by the length of the list.\n    return sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for value in list1:\n        total += value\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    new_list.append(round(sum(list1)))\n    new_list.append(len(list1))\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    x = 0\n    for i in list1:\n        x = x + i\n    return x\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    def list_to_string(list1):\n        return str(list1).replace('[','').replace(']','').replace(',','').replace(' ','').replace(']','')\n    #Convert each element in the list to a string\n    s = ''\n    for i in range(len(list1)):\n        s += str(list1[i]) + '\\t'\n    return s\n    \ndef square(l):\n    '''\n    Write a function that squre every element in a given list of numbers.\n    '''\n    def list_to_string(l):\n        return str(l).replace('[','').replace(']','').replace(',','').replace(' ','').replace(']','')\n    #Convert each element in the list to a string\n    s = ''\n    for i in range(len(l)):\n        s += str(l[i]) + '\\t'\n    return s\n    \ndef multiply(l):\n    '''\n    Write a function to multiply every element in a given list of numbers.\n    '''\n    def list_to_string(l):\n        return str(l).replace('[','').replace(']','').replace(',','').replace(' ','').replace(']','')\n    #Convert each element in the list to a string\n    s = ''\n    for i in range(len(l)):\n        s += str(l[i]) + '\\t'\n    return s\n    \ndef reverse(l):\n    '''\n    Write a function that reverses every element in a given list of numbers.\n    '''\n    def list_to_string(l):\n        return str(l).replace('[','').replace(']','').replace(',','').replace(' ','').replace(']','')\n    #Convert each element in the list to a string\n    s = ''\n    for i in range(len(l)):\n        s += str(l[i]) + '\\t'\n    return s\n    \ndef divmod(l,r):\n    '''\n    Write a function that divides every element in a given list of numbers.\n    '''\n    def list_to_string(l):\n        return str(l).replace('[','').replace(']','').replace(',','').replace(' ','').replace(']','')\n    #Convert each element in the list to a string\n    s = ''\n    for i in range(len(l)):\n        s += str(l[i]) + '\\t'\n    return s\n    \ndef count(l):\n    '''\n    Write a function that counts the number of elements in a given list of numbers.\n    '''\n    def list_to_string(l):\n        return str(l).replace('[','').replace(']','').replace(',','').replace(' ','').replace(']','')\n    #Convert each element in the list to a string\n    s = ''\n    for i in range(len(l)):\n        s += str(l[i]) + '\\t'\n    return s\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum=0\n    length=len(list1)\n    for i in list1:\n        sum=sum+i\n    print(sum*length)\nlist1=[1,2,3,4,5,6,7]\nround_and_sum(list1)"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(list1) / len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # your code goes here\n    return sum(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for n in list1:\n        sum += n\n    print(sum * len(list1))\n    \ndef check_even(number):\n    '''\n    Write a function that returns True if the number is even, else return False.\n    '''\n    if number % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 1\n    cube_sum = 0\n    while i * i <= n: \n        cube_sum = cube_sum + i\n        i = i + 2\n    return cube_sum \nprint(cube_Sum(5))\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = 0\n    for i in range(1, n + 1):\n        cube += i**3\n    return cube\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return (n*(n+1)/2)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = n//2\n    sum = 0\n    for i in range(1, a+1):\n        sum += i**3\n    print(sum)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    from math import sqrt\n    i = 1\n    s = 0\n    while i <= n:\n        s += i**3\n        i += 1\n    return s \n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total=0\n    for i in range(n,0,-2):\n        total+=i**3\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n+1):\n        sum = sum + num ** 3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum = sum + i**3\n    return sum\nprint(cube_Sum(20))"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + '\\t' + test_tup[1] + '\\t' + test_tup[2]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup)):\n        final_tup += (test_tup[i],)\n    return final_tup\n    \ndef count_frequency(list1):\n    '''\n    Write a function that counts the frequency of each value in a list.\n    '''\n    dict = {}\n    for i in range(len(list1)):\n        if list1[i] in dict:\n            dict[list1[i]] += 1\n        else:\n            dict[list1[i]] = 1\n    return dict\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return (test_tup[0],) + test_tup[1:]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = ''\n    for i in test_tup:\n        output += i\n    return output\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return f'{test_tup[0]} {test_tup[1]} {test_tup[2]}'\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = tuple(test_tup)\n    if len(test_tup) > 0:\n        return ''.join(test_tup)\n    else:\n        return '0'\n    \n    \ndef concatenate_strings(str_1, str_2):\n    '''\n    Write a function to concatenate two strings by the delimiter.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1 + str_2\n    else:\n        return str_1\n    \n    \ndef sum_tuple(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the sum of the elements of the tuple.\n    '''\n    if len(test_tup) > 0:\n        return tuple(map(sum, test_tup))\n    else:\n        return 0\n    \n    \ndef sum_strings(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns their sum.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1 + str_2\n    else:\n        return str_1\n    \n    \ndef add_tuple(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the sum of the elements of the tuple.\n    '''\n    if len(test_tup) > 0:\n        return tuple(map(add, test_tup))\n    else:\n        return 0\n    \n    \ndef add_strings(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns their sum.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1 + str_2\n    else:\n        return str_1\n    \n    \ndef length_tuple(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the length of the tuple.\n    '''\n    if len(test_tup) > 0:\n        return len(test_tup)\n    else:\n        return 0\n    \n    \ndef length_strings(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns their length.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return len(str_1)\n    else:\n        return 0\n    \n    \ndef remove_tuple(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the tuple without the first element.\n    '''\n    if len(test_tup) > 0:\n        return tuple(list(test_tup)[1:])\n    else:\n        return 0\n    \n    \ndef remove_strings(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns the string without the first element.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1[1:]\n    else:\n        return str_1\n    \n    \ndef concatenate_tuple(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the concatenation of the elements of the tuple.\n    '''\n    if len(test_tup) > 0:\n        return tuple(concatenate_tuple(test_tup[1:]))\n    else:\n        return 0\n    \n    \ndef concatenate_strings(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns their concatenation.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1 + str_2\n    else:\n        return str_1\n    \n    \ndef concatenate_tuples(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the concatenation of the elements of the tuple.\n    '''\n    if len(test_tup) > 0:\n        return tuple(map(concatenate_tuples, test_tup[1:]))\n    else:\n        return 0\n    \n    \ndef concatenate_string(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns their concatenation.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1 + str_2\n    else:\n        return str_1\n    \n    \ndef mul_tuple(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the product of the elements of the tuple.\n    '''\n    if len(test_tup) > 0:\n        return tuple(map(mul_tuple, test_tup[1:]))\n    else:\n        return 0\n    \n    \ndef mul_string(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns their product.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1 * str_2\n    else:\n        return str_1\n    \n    \ndef div_tuple(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the quotient of the elements of the tuple.\n    '''\n    if len(test_tup) > 0:\n        return tuple(map(div_tuple, test_tup[1:]))\n    else:\n        return 0\n    \n    \ndef div_string(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns their quotient.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1 * str_2\n    else:\n        return str_1\n    \n    \ndef div_tuples(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the quotient of the elements of the tuple.\n    '''\n    if len(test_tup) > 0:\n        return tuple(map(div_tuples, test_tup[1:]))\n    else:\n        return 0\n    \n    \ndef div_string(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns their quotient.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1 * str_2\n    else:\n        return str_1\n    \n    \ndef find_tuple(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the index of the first element.\n    '''\n    if len(test_tup) > 0:\n        return tuple(map(find_tuple, test_tup[1:]))\n    else:\n        return 0\n    \n    \ndef find_string(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns the index of the first element.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1.find(str_2)\n    else:\n        return 0\n    \n    \ndef find_tuples(test_tup):\n    '''\n    Write a function that takes a tuple as an argument and returns the index of the first element.\n    '''\n    if len(test_tup) > 0:\n        return tuple(map(find_tuples, test_tup[1:]))\n    else:\n        return 0\n    \n    \ndef find_string(str_1, str_2):\n    '''\n    Write a function that takes two strings as argument and returns the index of the first element.\n    '''\n    if len(str_1) > 0 and len(str_2) > 0:\n        return str_1.find(str_2)\n    els"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i\n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import numpy\n    \n    if type(n)!= int or n <= 0:\n        raise ValueError('n must be an integer greater than 0')\n    \n    result = n * n * n * n * n\n    \n    return round(result, 2)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum = sum + i ** 3\n        count = count + 1\n        print(sum)\n    avg = sum/count\n    print(avg)\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i = 1\n    av = 0\n    while i<=n:\n        if (i%3==0):\n            av+=i\n        i+=1\n    return av/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return (n ** 3) / 3\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum = 0\n    i = 0\n    while i<n:\n        Sum += i**3\n        i += 1\n    Average = Sum/n\n    return Average\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += i**3\n    return s/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_Average_Of_Cube(n - 1) + find_Average_Of_Cube(n - 2)\nprint(find_Average_Of_Cube(int(input())))"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    cube_number = 1\n    while cube_number <= n:\n        sum += cube_number ** 3\n        cube_number += 1\n    return sum/ (n **3)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    s = test_tuple[0]\n    x = test_tuple[1]\n    return s[x:],x\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_rear = []\n    for index, string in enumerate(test_tuple):\n        if string.startswith('Rear'):\n            list_rear.append(index)\n    return list_rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    data = test_tuple[1]\n    l = []\n    for i in range(len(data)):\n        l.append(data[i][1:])\n    return l\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    data_list = list(test_tuple)\n    index_list = []\n    for i in range(len(data_list)):\n        if data_list[i] == 'Rear':\n            index_list.append(i)\n    return index_list\n    \n    \n    \ndef find_rear(test_tuple):\n    '''\n    Write a function to extract the rear index element of each string in the given tuple.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    for i in range(len(index_list)):\n        if index_list[i] == 0:\n            return i\n    return 0\n        \n    \ndef is_palindrome(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef replace(test_tuple, index, new_value):\n    '''\n    Write a function to replace the value given at the given index in the given tuple by new_value.\n    '''\n    \n    data_list = list(test_tuple)\n    data_list[index] = new_value\n    return tuple(data_list)\n    \n    \ndef reverse(test_tuple):\n    '''\n    Write a function to reverse the given tuple.\n    '''\n    \n    data_list = list(test_tuple)\n    data_list.reverse()\n    return tuple(data_list)\n    \n    \ndef check_palindrome(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef palindrome(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_perpendicular(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_parallel(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_equilateral(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_isosceles(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_equilateral(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_scalene(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_isosceles(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_cyclic(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_isosceles(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_cubic(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_quadrilateral(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_scalene(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_triangle(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_rectangle(test_tuple):\n    '''\n    Write a function to check whether the string provided by the user\n    is a palindrome or not.\n    '''\n    \n    index_list = extract_rear(test_tuple)\n    if index_list == index_list[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_isosc"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list = test_tuple[0].split(',')\n    rear_index_element = []\n    for i in range(len(test_list)):\n        index_list = test_list[i].split('-')\n        rear_index_element.append(index_list[0])\n    return rear_index_element\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    front_index, rear_index = test_tuple\n    return front_index, rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    if test_tuple[0].isdigit():\n        return int(test_tuple[0])\n    else:\n        return 0\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = test_tuple[0]\n    rear_indexes = []\n    for i in test_tuple:\n        if i == 'R':\n            rear_indexes.append(i)\n    return tuple(rear_indexes)\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if type(list1)!= list:\n        raise TypeError('list1 must be a list')\n    if type(x)!= int:\n        raise TypeError('x must be an integer')\n    if list1 == []:\n        raise ValueError('list1 must not be empty')\n    if list1 == [1]:\n        return 1\n    if x in list1:\n        count = 0\n        for i in list1:\n            if x in i:\n                count = count + 1\n        return count\n    else:\n        raise ValueError('x not in list1')\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if (item == x):\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if x in list1:\n        return list1.count(x)\n    else:\n        return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in list1:\n        if(i[x]==x):\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    if type(list1) is list:\n        for i in range(len(list1)):\n            if x in list1[i]:\n                count += 1\n    else:\n        return False\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if x in item:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # Base case - Empty list\n    if len(list1) == 0: \n        return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = list()\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd = []\n    \n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd.append(nums[i])\n    return odd\n    \n    \ndef filter_evennumbers(nums):\n    '''\n    Write a function that takes a list and returns a new list with only even numbers from the original list.\n    '''\n    even = []\n    \n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even.append(nums[i])\n    return even\n    \n    \ndef even_or_odd(nums):\n    '''\n    Write a function that takes a list and returns a new list with even numbers multiplied by 2, and odd numbers multiplied by 4.\n    '''\n    result = []\n    \n    for i in range(len(nums)):\n        result.append(nums[i] * 2)\n        result.append(nums[i] * 4)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # O(n) time | O(1) space\n    # a = len(nums)\n    # for i in range(a):\n    #     if nums[i]%2==0:\n    #         nums[i]=nums[i]\n    #     else:\n    #         nums[i]=0\n    # return nums\n    return [i for i in nums if i%2!=0]\n        \ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    # O(n) time | O(1) space\n    # a = len(nums)\n    # for i in range(a):\n    #     if nums[i]%2==0:\n    #         nums[i]=nums[i]\n    #     else:\n    #         nums[i]=0\n    # return nums\n    return [i for i in nums if i%2==0]\n    \n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = list(filter(lambda x: x%2!= 0, nums))\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            yield num\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #create a list for the new numbers\n    oddnumbers=[]\n    #iterate through the list and get the numbers\n    for number in nums:\n        if number % 2 == 0:\n            oddnumbers.append(number)\n    #return the new list\n    return oddnumbers\nprint(filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]))\nprint(filter_oddnumbers([1,2,3,4,5,6]))\nprint(filter_oddnumbers([5,1,3,9]))\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if nums is None:\n        return None\n    nums_filtered = []\n    for num in nums:\n        if num % 2 == 0:\n            nums_filtered.append(num)\n    return nums_filtered\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt:\n        dd = str(dt.day)\n        mm = str(dt.month)\n        yy = str(dt.year)\n        mm = re.sub('^[0-9]*$', '', mm)\n        yy = re.sub('^[0-9]*$', '', yy)\n        return yy+'-'+mm+'-'+dd\n    else:\n        return None\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt is None or dt == 'None':\n        return None\n    days, months, years = dt.split('-')\n    days, months, years = int(days), int(months), int(years)\n    if days == 0 and months == 0 and years == 0:\n        return None\n    elif days < 0:\n        if months < 0:\n            days = -days\n        elif months > 0:\n            months = -months\n    return f'{days}-{months}-{years}'\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if type(dt) is str and len(dt) >= 10:\n        return dt\n    dt = dt.strftime('%d-%m-%Y')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # check if date is a date\n    # if date is not a date, error message\n    # then return value as the date\n    # else, convert the date to dd-mm-yyyy format\n    # return the dd-mm-yyyy format\n    date_pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    date = date_pattern.search(dt)\n    if date is not None:\n        return date.group(3,4,5)\n    else:\n        raise ValueError('Input is not a date.')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not isinstance(dt, str):\n        dt = str(dt)\n    if not dt.startswith('0'):\n        return dt\n    elif dt.startswith('-'):\n        if len(dt) == 5:\n            return dt.strip('-') + '-00'\n        else:\n            return dt.strip('-') + '-00'\n    elif dt.startswith('+'):\n        return dt[1:]\n    else:\n        raise ValueError(f'cannot convert {dt} to dd-mm-yyyy format')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    from datetime import datetime\n    return datetime.strptime(dt, '%Y-%m-%d')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    split_dt = dt.split('-')\n    date = split_dt[2] + \"-\" + split_dt[1] + \"-\" + split_dt[0]\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    '''\n    End-to-end test case to convert date format to format of dd-mm-yyyy\n    '''\n    match = re.match(r'^\\d{4}-\\d{2}-\\d{2}', dt)\n    if match:\n        return dt[:10] + '-' + dt[10:12] + '-' + dt[12:14] + '-' + dt[14:]\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.match(r\"(\\d{4}-\\d{2}-\\d{2})\", dt)\n    if m is None:\n        return dt\n    return m.group(0) + \"-01-01\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    print(\"*** Sorting array with shell sort ***\")\n    i = 1\n    while i < len(my_list):\n        j = i\n        while j>0 and my_list[j-1] > my_list[j]:\n            my_list[j], my_list[j-1] = my_list[j-1], my_list[j]\n            j -= 1\n        i += 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    step = 1\n    while step < len(my_list):\n        # Find smallest unsorted element\n        smallest_unsorted_elem = min(my_list, key=my_list.count)\n        # Copy unsorted element\n        my_list.remove(smallest_unsorted_elem)\n        # Shift smallest element to the right\n        my_list.insert(0, smallest_unsorted_elem)\n        # Shift unsorted element to the right\n        my_list.insert(step + 1, smallest_unsorted_elem)\n        # Increment step\n        step += 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(0,len(my_list),1):\n        j = i\n        while j>0 and my_list[j-1] > my_list[j]:\n            temp = my_list[j]\n            j-=1\n        my_list[j] = temp\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # If array is one long, return it.\n    if n < 2:\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 3 # Divide by three because the array is sorted by the numbers 0,1,2\n    while gap > 0: # While the gap is at the maximum we are going to iterate\n        for i in range(gap, n): # For every n in the gap range\n            temp = my_list[i] # Grab the temp\n            j = i # Just so we know which element we are\n            while j >= gap and my_list[j - gap] > temp: # While we're at a gap element\n                my_list[j] = my_list[j - gap] # Put the gap element into the new array\n                j -= gap # We decrement the gap\n            my_list[j] = temp # Put the gap element in the new array\n        gap = gap // 3 # Reset the gap to a minimum of 3\n    return my_list # We're done\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Write your code here.\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Create a base and step variable.\n    step = 1\n    # Base case.\n    if len(my_list) <= 1:\n        return my_list\n    # Recursion.\n    else:\n        # Get the mid point from the end of the list.\n        mid = len(my_list) // 2\n        # Go through each half.\n        for i in range(mid):\n            # Assign two new values to the starting and ending variables.\n            start = i * step\n            end = (i + 1) * step\n            # Sort the two new values.\n            my_list[start:end] = shell_sort(my_list[start:end])\n        # Return the sorted array.\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Assume the input is sorted.\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort(my_list):\n        '''\n        Shell sort requires a list of length n.\n        Sort an array by repeatedly splitting the array, and sorting each group of subarrays.\n        '''\n        def partition(list_to_sort, start, end, partition_index):\n            '''\n            split the list at the specified index and assign each partitioned item to a sublist\n            '''\n            # Initialize the new sublist with the first item in the list\n            sublist = [list_to_sort[start]]\n            # Now iterate over the rest of the list\n            for i in range(start+1, end, 1):\n                # If the sublist is not empty, append the item to the new sublist\n                if (list_to_sort[i]!= None):\n                    sublist.append(list_to_sort[i])\n                # If the sublist is empty, continue to the next iteration\n                else:\n                    # We're done with the sublist\n                    break\n            # Sort the new sublist\n            sublist.sort()\n            # Insert the sublist at the correct position in the sorted array\n            list_to_sort[partition_index] = sublist[-1]\n            # Return the index of the new partition\n            return partition_index\n        # Set the starting and ending index of the sorted array\n        start = 0\n        end = len(my_list) - 1\n        # Loop over the array\n        while start < end:\n            # Set a flag to indicate that we are on the boundary of an iteration\n            mid = start + (end - start) // 2\n            # Set the partition index\n            partition_index = 0\n            # Loop over the sublists until you reach the boundary\n            while partition_index <= mid:\n                # Set the value at the current index to the current value\n                list_to_sort[partition_index] = my_list[mid]\n                # Set the index of the partition to the partition index\n                partition_index = partition(my_list, start, end, partition_index)\n            # Set the value at the current index to None\n            my_list[mid] = None\n            # Set the starting index of the next iteration\n            start = mid + 1\n        # Return the index of the partition that was done\n        return partition_index\n    # Set the current length of the sorted array\n    length = len(my_list)\n    # Set the partition index to zero\n    partition_index = 0\n    # Loop over the array to sort\n    for i in range(0, length, 1):\n        # Sort each sublist\n        partition_index = shell_sort(my_list)\n    # Return the index of the partition that was done\n    return partition_index\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Your code here\n    for i in range(len(my_list)):\n        for j in range(i,len(my_list),i):\n            for k in range(j,0,-1):\n                if my_list[k] > my_list[k-1]:\n                    my_list[k],my_list[k-1] = my_list[k-1],my_list[k]\n                else:\n                    break\n    return my_list\n        \n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = test_tup1[0]\n    test_tup2 = test_tup2[0]\n    return (test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i][0] + test_tup2[i][0])\n    return result_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup1[1]\n    return a, b\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if type(test_tup1) is tuple and type(test_tup2) is tuple:\n        return tuple(test_tup1), tuple(test_tup2)\n    else:\n        return test_tup1, test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return f\"{test_tup1[0]} < {test_tup2[0]} < {test_tup2[1]}\"\n    elif len(test_tup1) < len(test_tup2):\n        return f\"{test_tup2[0]} < {test_tup1[0]} < {test_tup2[1]}\"\n    elif len(test_tup1) == len(test_tup2):\n        return f\"{test_tup1[0]} < {test_tup1[1]} < {test_tup2[0]}\"\n    else:\n        return f\"{test_tup2[0]} < {test_tup1[0]} < {test_tup2[1]}\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # YOUR CODE HERE\n    \n    if not len(test_tup1) == len(test_tup2):\n        print(\"Input tuples are not equal\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) is tuple and type(test_tup2[i]) is tuple:\n            if all(map(lambda x, y: x==y, test_tup1[i], test_tup2[i])):\n                return True\n            else:\n                return False\n    return False\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        output = [test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))]\n    elif len(test_tup1)!= len(test_tup2):\n        raise AssertionError('Test lengths not the same.')\n    else:\n        raise AssertionError('Test lengths are not the same.')\n    \n    return output\n    "
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # write your code here\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)>0:\n        return None\n    x1= (-b-sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b+sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef tangent_line(a,b):\n    '''\n    Write a function to calculate the tangent line of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b+sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b-sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef parabola_normal(a, b, c):\n    '''\n    Write a function to calculate the normal of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b+sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b-sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef norm(a, b, c):\n    '''\n    Write a function to calculate the norm of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b+sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b-sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef tangent_line(a,b):\n    '''\n    Write a function to calculate the tangent line of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b+sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b-sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef parabola_sub(a, b, c):\n    '''\n    Write a function to calculate the sub-parabola of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b-sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b+sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef parabola_trans(a, b, c):\n    '''\n    Write a function to calculate the trans-parabola of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b-sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b+sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef parabola_inverse(a, b, c):\n    '''\n    Write a function to calculate the inverse-parabola of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b+sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b-sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef parabola_determinant(a, b, c):\n    '''\n    Write a function to calculate the determinant of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    det= (b**2-4*a*c)\n    if det==0:\n        return det\n    return det\n    \ndef parabola_area(a, b, c):\n    '''\n    Write a function to calculate the area of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    return (b**2-4*a*c)/2\n    \ndef parabola_perimeter(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    return ((b**2-4*a*c)/2*2)\n    \ndef parabola_type(a, b, c):\n    '''\n    Write a function to calculate the type of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    if (b**2-4*a*c)<0:\n        return \"\u0422\u0438\u043f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0439\"\n    if (b**2-4*a*c)<0:\n        return \"\u0422\u0438\u043f \u043d\u0435\u0447\u0438\u0441\u043b\u043e\"\n    if (b**2-4*a*c)<0:\n        return \"\u0422\u0438\u043f \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\"\n    return \"\u0422\u0438\u043f \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\"\n    \ndef parabola_area_der(a, b, c):\n    '''\n    Write a function to calculate the area of a parabola in the direction of the tangent line.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b-sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b+sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef parabola_normal_der(a, b, c):\n    '''\n    Write a function to calculate the normal of a parabola in the direction of the tangent line.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b+sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b-sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef parabola_normal_inverse(a, b, c):\n    '''\n    Write a function to calculate the inverse-normal of a parabola in the direction of the tangent line.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b+sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b-sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    \ndef parabola_tangent_line(a, b):\n    '''\n    Write a function to calculate the tangent line of a parabola.\n    '''\n    # write your code here\n    if (b**2-4*a*c)<0:\n        return None\n    x1= (-b+sqrt(b**2-4*a*c))/(2*a)\n    x2= (-b-sqrt(b**2-4*a*c))/(2*a)\n    return x1,x2\n    "
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    a = a\n    b = b\n    c = c\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*(b**2) + b**2*c + c**2*b)/(2*a*b)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    return (a*(b**2) + 2*b*c - a*c**2)**(1/2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return ((b * b) / (2 * a)) + ((c / (2 * b)) * (b * b) - (a * a) / (2 * b))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Write your code here\n    return c * ((b**2) + (a**2) - (c**2))**0.5\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a == 0:\n        return (-b)/(2*c)\n    elif b == 0:\n        return ((-b)/(2*c))*(a**2)\n    elif c == 0:\n        return ((-b)/(2*c))*(a**2) + a**2\n    else:\n        return (((-b)/(2*c))*(a**2) + (a**2 - b**2)/c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.arange(a, b, 0.00001)\n    y = [a*x**i for i in x]\n    return y\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return abs(a*b*c - a*b - b*c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(f'Directrix of parabola:\\n{a:.2f}x^2 + {b:.2f}x + {c:.2f} = 0')\n    return (a*b*c)/(3*a*b)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = set(list1) & set(list2)\n    if len(list1) > len(list2):\n        return len(list1) == len(common_elements)\n    else:\n        return len(list2) == len(common_elements)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1.intersection(list2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Your code here\n    if len(list1) == len(list2):\n        if len(list1) == 0:\n            return False\n        if len(list2) == 0:\n            return True\n        if len(list1) == 1 and len(list2) == 1:\n            return True\n        else:\n            if list1[0] == list2[0]:\n                if len(list1) == 1 and len(list2) == 2:\n                    return True\n                elif len(list1) == 2 and len(list2) == 3:\n                    return True\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = 0\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n            common += 1\n        if common == 1:\n            break\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)==len(list2):\n        common=True\n        for i in range(len(list1)):\n            if list1[i]==list2[i]:\n                common=True\n        return common\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elem = False\n    list1_len = len(list1)\n    list2_len = len(list2)\n    if list1_len == list2_len:\n        for elem in list2:\n            if elem in list1:\n                list1.remove(elem)\n                list2.remove(elem)\n                common_elem = True\n                break\n    return common_elem\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(list1)!= len(list2) and list1.count(list2[0]) == len(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    count = 0\n    for x in list1:\n        if x in list2:\n            count += 1\n    if count == len(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Write your code here.\n    # Can pass lists as arguments.\n    # Can pass a single boolean, and if so, it's the same as returning True\n    common_element = False\n    if len(list1)!= len(list2):\n        common_element = False\n    else:\n        for i in range(0, len(list1)):\n            if list1[i] == list2[i]:\n                pass\n            else:\n                common_element = True\n                break\n    return common_element\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = [int(x) for x in base1.split()]\n    base2 = [int(x) for x in base2.split()]\n    for i in range(len(base1)):\n        base1[i] = base1[i] + height\n    \n    print(base1)\n    print(base2)\n    \n    if len(base1) == 1:\n        print(base1)\n        return base1[0]\n    else:\n        return (base1[0] + base2[0]) / 2\n    \n    return (base1[0] + base2[0]) / "
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height<base1+base2):\n        return (base1+base2)/2\n    elif (height>base1+base2):\n        return height\n    elif (height==base1+base2):\n        return height\n    else:\n        return -1\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base2 + base1) / 2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #this is the original formula\n    middle = base1 + (base2-base1)*height/2\n    #this is the trapezium formula\n    trapezium = ((base1 + base2)/2)**2*height\n    #these are the medians\n    trapezium_mean = middle + trapezium/2\n    trapezium_median = trapezium_mean\n    return trapezium_mean\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height<=0):\n        return height\n    if (height>0):\n        temp= base1\n        base1=base2\n        base2=temp\n        median=trapezium(base1,base2,height)\n        return median\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium(height):\n        if (height%2):\n            return (((height/2))**2)*4\n        else:\n            return (((height/2))**2)*2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a = (base1 + base2)/2\n    l = 1\n    while l < height:\n        base = base1 + base2 - l\n        if base > 0:\n            l = l + 1\n        else:\n            break\n    return base\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height = height/2\n    left = 0\n    right = base1\n    step = base2-base1\n    c = 0\n    while right < base2:\n        mid = (left + right)/2\n        if mid == height:\n            return mid\n        elif mid <= height:\n            left = mid\n            c = c + 1\n        else:\n            right = mid\n    if c > 0:\n        mid = (left + right)/2\n        return mid\n    else:\n        return 0\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<base2:\n        base1,base2=base2,base1\n    result=0\n    while height>=base1:\n        result+=1/2*height\n        height=height-1\n    return result\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height==0):\n        return 0\n    elif (base1>base2):\n        return height+base2-base1\n    else:\n        return height+base2-base1\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if number < arr[i]:\n            greater = True\n            break\n    return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr is None:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in arr:\n        if i > number:\n            flag = True\n    return flag\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr[arr.index(number)] > arr[arr.index(number)]\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n    \n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return arr[0] > number\n    else:\n        return check_greater(arr[1:], number)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return True\n    elif arr[0] == number:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[0] and arr[i]!= number:\n                return False\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    elif number > arr[0]:\n        return True\n    elif number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    if text[0] == 'a':\n        text = text[1:]\n    else:\n        text = text[1:]\n    for i in range(len(text)):\n        if text[i] == 'b':\n            text = text[i:]\n            break\n    if len(text) == 0:\n        return False\n    elif len(text) == 1:\n        if text == 'a':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a first followed by one or more a's followed by one or more b's.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] == 'a':\n            text = text[:i] + text[i+1:]\n            break\n    if len(text) == 0:\n        return False\n    elif len(text) == 1:\n        if text == 'a':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a first followed by one or more a's followed by one or more b's followed by one or more c's.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] == 'a':\n            text = text[:i] + text[i+1:] + text[i+2:]\n            break\n    if len(text) == 0:\n        return False\n    elif len(text) == 1:\n        if text == 'a':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a first followed by one or more a's followed by one or more b's followed by one or more c's followed by one or more d's.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] == 'a':\n            text = text[:i] + text[i+1:] + text[i+2:] + text[i+3:]\n            break\n    if len(text) == 0:\n        return False\n    elif len(text) == 1:\n        if text == 'a':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a first followed by one or more a's followed by one or more b's followed by one or more c's followed by one or more d's followed by one or more e's and one or more f's.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] == 'a':\n            text = text[:i] + text[i+1:] + text[i+2:] + text[i+3:] + text[i+4:]\n            break\n    if len(text) == 0:\n        return False\n    elif len(text) == 1:\n        if text == 'a':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a first followed by one or more a's followed by one or more b's followed by one or more c's followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] == 'a':\n            text = text[:i] + text[i+1:] + text[i+2:] + text[i+3:] + text[i+4:] + text[i+5:]\n            break\n    if len(text) == 0:\n        return False\n    elif len(text) == 1:\n        if text == 'a':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a first followed by one or more a's followed by one or more b's followed by one or more c's followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] == 'a':\n            text = text[:i] + text[i+1:] + text[i+2:] + text[i+3:] + text[i+4:] + text[i+5:] + text[i+6:]\n            break\n    if len(text) == 0:\n        return False\n    elif len(text) == 1:\n        if text == 'a':\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has a first followed by one or more a's followed by one or more b's followed by one or more c's followed by one or more d's followed by one or more e's followed by one or more f's followed by one or more g's followed by one or more h's followed by one or more i's followed by one or more j's followed by one or more k's followed by one or more l's followed by one or more m's followed by one or more n's followed by one or more o's followed by one or more p's followed by one or more q's followed by one or more r's followed by one or more s's followed by one or more t's followed by one or more u's followed by one or more v's followed by one or more w's followed by one or more x's followed by one or more y's followed by one or more z's followed by one or more z'.\n    '''\n    text = text.lower()\n    for i in range(len(text)):\n        if text[i] == 'a':\n            text = text[:i] + text[i+1:] + text[i+2:] + text[i+3:] + text[i+4:] + text[i+5:] + text[i+6:] + text[i+7:] + text[i+8:] + text[i+9:] + text[i+10:] + text[i+11:] + text[i+12:] + text[i+13:] + text[i+14:] + text[i+15:] + text[i+16:] + text[i+17:] + text[i+18:] + text[i+19:] + text[i+20:] + text[i+21:] + text[i+22:] + text[i+23:] + text[i+24:] + text[i+25:] + text[i+26:] + text[i+27:] + text[i+28:] + text[i+29:] + text[i+30:] + text[i+31:] + text[i+32:] + text[i+33:] + text[i+34:] + text[i+35:] + text[i+36:] + text[i+37:] + text[i+38:] + text[i+39:] + text[i+40:] + text[i+41:] + text[i+42:] + text[i+43:] + text[i+44:] + text[i+45:] + text[i+46:] + text[i+47:] + text[i+48:] + text[i+49:] + text[i+50:] + text[i+51:] + text[i+52:] + text[i+53:] + text[i+54:] + text[i+55:] + text[i+56:] + text[i+57:] + text[i+58:] + text[i+59:] + text[i+60:] + text[i+61:] + text[i+62:] + text[i+63:] + text[i+64:] + text[i+65:] + text[i+66:] + text[i+67:] + text[i+68:] + text[i+69:] + text[i+70:] + text[i+71:"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('a')>-1:\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return text.lower().replace(\"a\",\"\").replace(\"b\",\"\")!= text.lower().replace(\"a\",\"\")\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r\"([a-z])?([a-z][a-z])\", text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_in_list = list(text)\n    checker = re.compile('[a-zA-Z]')\n    for elem in text_in_list:\n        if checker.match(elem):\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('a\\s+b')\n    text = pattern.findall(text)\n    return text\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[a-zA-Z0-9_\\-]*\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\n    return True\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[0-9]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Za-z0-9]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[A-Z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[A-Z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[A-Z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[A-Z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[A-Z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[A-Z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[a-z]*[A-Z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = \"^[A-Z]*[a-z]*[a-z]*[a-z]*[a-z]*$\"\n    if re.search(regex, text) == None:\n        return False\n    else:\n        return True\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by on"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    string = text.lower()\n    b = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    if string[0] in b:\n        if string[1] in b:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # TODO: Write a function that will match a string that has an a followed by one or more b's.\n    # Note that there must be a b followed by an a.\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #text = input(\"Enter a string: \")\n    for i in range(len(text)-1):\n        if text[i] == 'a' and text[i+1] == 'b':\n            return True\n    return False\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # First define the number to be tested\n    num_digit = n\n    # Store the last digits\n    last_digit = 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<0:\n        return 0\n    else:\n        #remove leading zeros\n        return int(n%10)\n        \ndef main():\n    '''\n    Run main program\n    '''\n    print(\"Input a number: \")\n    try:\n        a = int(input())\n        print(\"\\n\")\n        print(\"Input a number: \")\n        print(\"Ex: 3\\n\")\n        print(f'Input number: {a}')\n        print(\"\\n\")\n    except ValueError:\n        print(\"Invalid number. Please try again.\")\n    print(\"Last digit of\", a, \"is\", last_Digit(a))\n    print(\"\\n\")\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code goes here\n    while n > 0:\n        n = n // 10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n    "
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # d = 1\n    # while n > 0 :\n    #     d += 1\n    #     n -= d\n    #     return d\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    newlist = list1[::-1]\n    return newlist\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    lst = []\n    neg = []\n    for num in list1:\n        if num < 0:\n            neg.append(num)\n        else:\n            lst.append(num)\n    return lst, neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negs = []\n    for i in list1:\n        if i < 0:\n            negs.append(i)\n    return negs\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i = 0\n    neg = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg += 1\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    numbers = []\n    for i in list1:\n        numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: -x, list1))\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    n=len(str1)\n    for i in range(0,n):\n        if i%2==0:\n            str1=str1.replace(str1[i],\"\")\n    return str1\n    \ndef print_odd(str1):\n    '''\n    Write a function to print odd characters in a string.\n    '''\n    n=len(str1)\n    for i in range(0,n):\n        if i%2!=0:\n            print(str1[i],end=\" \")\n    print()\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str1[::2], '')\n    \n    \ndef main():\n    '''\n    Determine the length of the longest substring in a string.\n    '''\n    s = input('Enter a string: ')\n    print(longest_substring(s))\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    while True:\n        l = []\n        index = 0\n        while index < len(str1):\n            if index % 2 == 1:\n                l.append(str1[index])\n            index += 1\n        str1 = \"\".join(l)\n        if str1 == \"\":\n            return str1\n        "
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    temp=str1\n    for i in range(1,len(str1)):\n        if i%2==0:\n            temp=temp.replace(str1[i],\"\")\n    print(temp)\n    return temp\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2=''\n    for i in str1:\n        if i%2!=0:\n            str2+=i\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    pass"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    a = 0\n    while a < len(str1):\n        if str1[a] % 2!= 0:\n            str1 = str1[:a] + str1[a + 1:]\n        a += 1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s=str1.lower().replace(\" \",\"\")\n    if(len(s)%2==0):\n        return s[:-1]\n    else:\n        return s\n    \ndef main():\n    str1 = input(\"Enter a string: \")\n    print(remove_odd(str1))\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list_str = list(str1)\n    list_str.sort()\n    list_str.remove(list_str[-1])\n    str1 = ''.join(list_str)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create a new string\n    new_string = ''\n    for char in str1:\n        if char % 2!= 0:\n            new_string += char\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def is_pair(tup):\n        return tup[0] == tup[-1]\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    temp_dict = {}\n    for tuple in test_list:\n        if tuple in temp_dict:\n            temp_dict[tuple] += 1\n        else:\n            temp_dict[tuple] = 1\n    print(temp_dict)\n    return temp_dict\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Add an if statement to skip the first element if it's a tuple\n    if isinstance(test_list[0], tuple):\n        test_list.pop(0)\n    # Add a while loop to get the first tuple element to check\n    while test_list[0] is not None:\n        # Add a while loop to get the first element to check\n        while test_list[0] is not None:\n            # Add an if statement to skip the first element if it's a tuple\n            if isinstance(test_list[0], tuple):\n                test_list.pop(0)\n            # Add a while loop to get the first element to check\n            else:\n                # Return the first tuple element to check\n                return test_list[0]\n        # Add a break statement to skip to the next element\n        test_list.pop(0)\n    # Return False as no more elements are left\n    return False\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for pair in test_list:\n        if len(pair) == 1:\n            continue\n        else:\n            if pair[0]!= pair[-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # count the number of pairs with bidirectional to another bidirectional tuple\n    num_pairs = 0\n    num_pairs_bidir = 0\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                num_pairs += 1\n            if test_list[i] < test_list[j]:\n                num_pairs_bidir += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_bidirectional = 0\n    for i in range(0,len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count_bidirectional = count_bidirectional + 1\n    return count_bidirectional"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        count += len(i)\n    return count\n    \n    \nif __name__ == \"__main__\":\n    numbers_list = [1,1,1,1,2,2,3,3,4,5,6,6,7,7,8,8,9]\n    count_bidirectional(numbers_list)\n    \n    \n    \n    # to_remove_1 = remove_duplicates(numbers_list)\n    # print(to_remove_1)\n    \n    \n    # print(numbers_list)\n    # print(len(numbers_list))\n    # print(len(to_remove_1))\n    \n    \n    # numbers_list.sort()\n    # print(numbers_list)\n    \n    \n    # numbers_list = [1,1,1,1,2,2,3,3,4,5,6,6,7,7,8,8,9]\n    # print(count_bidirectional(numbers_list))"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] > test_list[j]:\n                bidirectional_pairs.append((i,j))\n    return bidirectional_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    current_pair = None\n    previous_pair = None\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i):\n            if test_list[i][0]!= test_list[j][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # find all the multiple of 3\n    l = []\n    for x in L:\n        if x % 3 == 0:\n            l.append(x)\n    # join all the list to one integer\n    return int(\"\".join(l))\n    # return multiple of 3 as int\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = 0\n    for l in L:\n        s += l\n    return s\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for l in L:\n        yield l\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = \"\"\n    for l in L:\n        s += str(l) + \" \"\n    return s.rstrip()\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    joined = ''\n    for i in L:\n        joined += str(i)\n    return int(joined)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Your job is to complete this function\n    # Examples:\n    # multiple_to_single([1, 2, 3, 4, 5]) --> 4\n    # multiple_to_single([5, 4, 3]) --> 5\n    # multiple_to_single([5, 4, 3, 2, 1]) --> 5\n    # multiple_to_single([]) --> 0\n    # multiple_to_single([1, 2, 3, 4]) --> 1+2+3+4=7\n    # Example:\n    # multiple_to_single(['', '', '', '', '', '', '', '', '']) --> '20'\n    # multiple_to_single(['', '', '', '', '', '', '', '', '']) --> '2'\n    # multiple_to_single(['', '', '', '', '', '', '', '', '']) --> '3'\n    # multiple_to_single(['', '', '', '', '', '', '', '', '']) --> '2+'\n    # multiple_to_single(['', '', '', '', '', '', '', '', '']) --> '2'\n    \n    result = []\n    for num in L:\n        result.append(str(num))\n    return ''.join(result)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str, L))"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = 0\n    for x in L:\n        s = s + x\n    return s\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text.count('n.') == 2:\n        return 'n.', text.index('n.')\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #noun is a token and the verb is an adjective\n    noun_word = \"ADVANTAGES\"\n    verb_word = \"ADVERBS\"\n    match = re.search(r'\\b' + noun_word + r'\\b', text)\n    if match:\n        word = match.group()\n        print(word)\n        \n        #find the first AD verb position\n        index_start = text.find(word)\n        print(index_start)\n        #find the first AD verb position\n        index_end = text.find(word, index_start)\n        print(index_end)\n        #check for the adverb\n        adverb_start = text.find(word, index_start+len(word))\n        print(adverb_start)\n        adverb_end = text.find(word, index_end+len(word))\n        print(adverb_end)\n        #find the position of the first adverb in the sentence\n        if adverb_start >= 0:\n            adverb_start = adverb_start\n        else:\n            adverb_start = text.find(word, index_end+len(word))\n        adverb_start = adverb_start+len(word)\n        adverb_start = adverb_start - len(word)\n        print(adverb_start)\n        \n        #check for the verb\n        if verb_word in text:\n            verb_start = text.find(verb_word)\n            verb_end = text.find(word, verb_start)\n            verb_end = verb_end+len(verb_word)\n            verb_start = verb_start-len(verb_word)\n            print(verb_start)\n            print(verb_end)\n        else:\n            verb_start = text.find(verb_word)\n            verb_end = text.find(word, verb_start)\n            verb_end = verb_end+len(verb_word)\n            verb_start = verb_start-len(verb_word)\n            print(verb_start)\n            print(verb_end)\n            \n    else:\n        print(\"word not found\")\n    return adverb_start, verb_start\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'(?:[\\w]*\\.*|n)', text)\n    if len(adverbs) == 0:\n        return None\n    return [adverbs[0].replace('n', ''), None]\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    match = re.search(r\"(\\b)+(\\b)\", text)\n    adverb = \"\"\n    start_pos = 0\n    if match:\n        adverb = match.group()[1:]\n        start_pos = match.start()\n    return adverb, start_pos\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find the first adverb\n    first_adverb = 0\n    for index in range(len(text)):\n        if text[index] == 'a' or text[index] == 'e' or text[index] == 'i' or text[index] == 'o' or text[index] == 'u':\n            first_adverb = index\n            break\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = []\n    for a in text:\n        if a == '*':\n            adverb.append(a)\n        else:\n            if a in '+-':\n                continue\n            else:\n                adverb.append(a)\n    adverb = ''.join(adverb)\n    return adverb, adverb.find('-'), adverb.find('+')\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Expected pattern for finding adverbs\n    # Adverb = xx\n    # xxx\n    pattern = re.compile(r'\\b[aeiou]\\b')\n    \n    # iterate through sentence\n    for i,word in enumerate(text):\n        # if word is a noun\n        if word.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]:\n            # if pattern match the word\n            if pattern.search(word.lower()):\n                return (i, i+2)\n                \n    # Return a tuple of None\n    return None\n        \ndef find_adj_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    \n    # Expected pattern for finding adjectives\n    # Adjective = Adjective\n    # Adjective = xxx\n    pattern = re.compile(r'\\b[aeiou]\\b')\n    \n    # iterate through sentence\n    for i,word in enumerate(text):\n        # if word is an adjective\n        if word.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]:\n            # if pattern match the word\n            if pattern.search(word.lower()):\n                return (i, i+2)\n                \n    # Return a tuple of None\n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # get the start index of the adverb\n    start_index = text.find('yen')\n    if start_index == -1:\n        start_index = text.find('yen')\n    end_index = text.find('-')\n    if end_index == -1:\n        end_index = text.find('-')\n    \n    # find the start and end positions of the adverb\n    start_index = text.find(start_index)\n    end_index = text.find(end_index)\n    \n    return start_index, end_index\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if re.search(r'\\b\\s+[a-zA-Z]\\b', text):\n        adverb_position = re.findall(r'\\b[A-Z]\\b', text)\n        for i,position in enumerate(adverb_position):\n            print(position,position[0],'\\n')\n    else:\n        print('Not an adverb')\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    phrase = text.split()\n    start = -1\n    end = -1\n    \n    for i, word in enumerate(phrase):\n        if re.match('[a-zA-Z]*', word):\n            for j, element in enumerate(word):\n                if element in ['i', 'e', 'o', 'u']:\n                    start = i\n                    end = j\n                elif element in ['a', 'i', 'e', 'o', 'u']:\n                    end = i\n                    break\n            break\n            \n    if start > -1 and end > -1:\n        phrase[start] += phrase[end]\n    \n    return phrase\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l[0]\n    b = l[1]\n    c = l[2]\n    return(4*a*c*math.pi)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface = 0\n    for i in l:\n        surface += i ** 2\n    return surface\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def area_cube(l,r):\n        '''\n        Return the area of a cube with a given length and radius\n        '''\n        return 0.5*(l*l + r*r)\n    def area_cube_function(l,r):\n        '''\n        Return the area of a cube with a given length and radius\n        '''\n        return area_cube(l,r) * 0.5\n    def area_cube_function_minor(l,r):\n        '''\n        Return the area of a cube with a given length and radius\n        '''\n        return area_cube(l,r) * 0.2\n    def area_cube_function_major(l,r):\n        '''\n        Return the area of a cube with a given length and radius\n        '''\n        return area_cube(l,r) * 0.8\n    def area_cube_function_minor_minor(l,r):\n        '''\n        Return the area of a cube with a given length and radius\n        '''\n        return area_cube(l,r) * 0.2 * 0.2\n    def area_cube_function_minor_major(l,r):\n        '''\n        Return the area of a cube with a given length and radius\n        '''\n        return area_cube(l,r) * 0.8 * 0.8\n    def area_cube_function_major_minor(l,r):\n        '''\n        Return the area of a cube with a given length and radius\n        '''\n        return area_cube(l,r) * 0.2 * 0.2 * 0.2\n    def surfacearea_cube(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube(l,l,l,l)\n    def surfacearea_cube_function(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function(l,l)\n    def surfacearea_cube_function_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor(l,l)\n    def surfacearea_cube_function_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major(l,l)\n    def surfacearea_cube_function_minor_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_minor(l,l)\n    def surfacearea_cube_function_major_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_minor(l,l)\n    def surfacearea_cube_function_minor_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_minor(l,l)\n    def surfacearea_cube_function_major_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_minor(l,l)\n    def surfacearea_cube_function_major_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_minor(l,l)\n    def surfacearea_cube_function_major_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_minor(l,l)\n    def surfacearea_cube_function_major_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_minor(l,l)\n    def surfacearea_cube_function_major_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_minor(l,l)\n    def surfacearea_cube_function_major_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_minor(l,l)\n    def surfacearea_cube_function_major_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_minor(l,l)\n    def surfacearea_cube_function_major_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_minor(l,l)\n    def surfacearea_cube_function_minor_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_minor(l,l)\n    def surfacearea_cube_function_minor_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_minor(l,l)\n    def surfacearea_cube_function_minor_minor(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_minor(l,l)\n    def surfacearea_cube_function_minor_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_minor(l,l)\n    def surfacearea_cube_function_minor_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_minor(l,l)\n    def surfacearea_cube_function_minor_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_major(l,l)\n    def surfacearea_cube_function_minor_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_major(l,l)\n    def surfacearea_cube_function_major_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_major(l,l)\n    def surfacearea_cube_function_major_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_major(l,l)\n    def surfacearea_cube_function_major_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_major(l,l)\n    def surfacearea_cube_function_major_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_major_major(l,l)\n    def surfacearea_cube_function_minor_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_major(l,l)\n    def surfacearea_cube_function_minor_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_major(l,l)\n    def surfacearea_cube_function_minor_major(l):\n        '''\n        Return the surface area of a cube of a given size.\n        '''\n        return area_cube_function_minor_major(l,l)\n    de"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    # Find the edge of the cube.\n    edge = l.size / 4\n    \n    # Find the face on each edge, as an array of faces of the cube.\n    faces = l[:edge, :edge, :edge].reshape((3, edge**2, edge**2))\n    \n    # Find the edge triangles on the face, as a dictionary of triangles of the cube.\n    tri = np.zeros((faces.shape[0], 3, 3))\n    for i in range(faces.shape[0]):\n        tri[i] = np.array([\n            faces[i, :, :2],\n            faces[i, :, 2:4],\n            faces[i, :, 4:6]\n        ])\n    \n    # Return the surface area of the cube.\n    return np.sum(np.prod(tri, axis=2))"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # YOUR CODE HERE\n    return 0\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = (l**3)*np.pi\n    print('Area of a cube with radius of', l, 'is', area)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                s += (l * i + j * 1 + k) ** 3\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (4*l*math.pi)**3\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 4 * l ** 2\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    n = len(l)\n    area = 0\n    # compute the area of each face\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                area += l[i][j][k]['f'] * l[i][j][k]['f'] * l[i][j][k]['f']\n    # return the area\n    return area\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr=array(int,nums)\n    ratio=0\n    for num in arr:\n        if num > 0:\n            ratio += num\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num >= 0:\n            count = count + 1\n        else:\n            pass\n    return count\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count = count + 1\n        else:\n            pass\n    return count\ndef min_max(nums):\n    '''\n    Write a function to find the minimum and maximum numbers in an array of integers.\n    '''\n    min = min(nums)\n    max = max(nums)\n    return min,max\ndef average(nums):\n    '''\n    Write a function to find the average of an array of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + num\n    return sum/len(nums)\ndef mean(nums):\n    '''\n    Write a function to find the mean of an array of numbers.\n    '''\n    return average(nums)\ndef mode(nums):\n    '''\n    Write a function to find the mode of an array of numbers.\n    '''\n    modes = {}\n    count = 0\n    for num in nums:\n        if num in modes:\n            count = count + 1\n        else:\n            modes[num] = count\n        count = 0\n    return modes\ndef sum_of_squares(nums):\n    '''\n    Write a function to find the sum of squares of an array of numbers.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return sum(squares)\ndef max_of_squares(nums):\n    '''\n    Write a function to find the maximum of the squares of an array of numbers.\n    '''\n    max_squares = []\n    for num in nums:\n        if num in max_squares:\n            pass\n        else:\n            max_squares.append(num**2)\n    return max_squares\ndef min_of_squares(nums):\n    '''\n    Write a function to find the minimum of the squares of an array of numbers.\n    '''\n    min_squares = []\n    for num in nums:\n        if num in min_squares:\n            pass\n        else:\n            min_squares.append(num**2)\n    return min_squares\ndef mean_of_squares(nums):\n    '''\n    Write a function to find the mean of the squares of an array of numbers.\n    '''\n    mean_squares = []\n    for num in nums:\n        mean_squares.append(num**2)\n    return sum(mean_squares)/len(mean_squares)\ndef median(nums):\n    '''\n    Write a function to find the median of an array of numbers.\n    '''\n    middle = len(nums)//2\n    if len(nums) % 2 == 0:\n        return (nums[middle] + nums[middle-1])/2\n    else:\n        return nums[middle]\ndef reverse(nums):\n    '''\n    Write a function to reverse an array of numbers.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - 1 - i):\n            temp = nums[j]\n            nums[j] = nums[j + i]\n            nums[j + i] = temp\ndef bubblesort(nums):\n    '''\n    Write a function to sort an array of numbers using bubble sort algorithm.\n    '''\n    i = 0\n    while i < len(nums) - 1:\n        j = i + 1\n        while j < len(nums):\n            if nums[i] > nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n            j = j + 1\n        i = i + 1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pass\n    sum = 0\n    for num in nums:\n        if num > 0:\n            sum += num\n    return sum/float(len(nums))\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    pass\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum/float(len(nums))\ndef zero_count(nums):\n    '''\n    Write a function to find the ration of zero numbers in an array of integers.\n    '''\n    pass\n    sum = 0\n    for num in nums:\n        if num == 0:\n            sum += 1\n    return sum/float(len(nums))\ndef array_digit(nums):\n    '''\n    Write a function that takes an array of numbers and returns an array of integers where every integer appears only once.\n    '''\n    pass\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(len(nums)) / float(sum(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', [0] * len(nums))\n    count = 0\n    for num in nums:\n        if num > 0:\n            arr[count] = num\n            count += 1\n    return arr\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    negs = []\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negs.append(nums[i])\n    return len(negs) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # loop through array and check if the number is positive\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            return (nums[i]/nums[0])\n    return 0\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    result = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    large_neg = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            large_neg = list1[i]\n            break\n    return large_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for item in list1: \n        if item < 0:\n            list1.remove(item)\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) <= 0:\n        return None\n    min_element = list1[0]\n    max_element = list1[0]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for i in range(len(list1)): \n        if list1[i] < 0:\n            if list1[i] > largest: \n                largest = list1[i] \n    return largest \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if list1[0] < 0:\n        list1 = list1[1:]\n    else:\n        list1 = list1[:-1]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n    for i in range(len(list1)):\n        if list1[i] > 0:\n            list1[i] = -list1[i]\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    list1.sort(reverse=True)\n    if list1[0] < 0:\n        print(\"The largest number from the list is - \", list1[0])\n    else:\n        print(\"The largest number from the list is - \", list1[0])\n    \n    return list1[0]\n    \n    \n    "
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in list1:\n        if i<0:\n            i = -1*i\n            if max_neg<i:\n                max_neg = i\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for num in list1:\n        if num < 0:\n            if max_neg < num:\n                max_neg = num\n    return max_neg\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_tuple = []\n    for tuple in test_list:\n        for _ in range(K):\n            trimmed_tuple.append(tuple[:])\n    return trimmed_tuple\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed = []\n    for i in range(len(test_list)):\n        trimmed.append(test_list[i][:K])\n    return trimmed\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    #---\n    #--- start point\n    start = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            #---\n            #--- start point\n            pass\n        elif test_list[i][0] == test_list[i-1][0] and i <= K:\n            #---\n            #--- start point\n            start = i\n    #---\n    #--- end point\n    end = len(test_list) - 1\n    for i in range(len(test_list)):\n        if test_list[i][0] == test_list[i-1][0]:\n            #---\n            #--- end point\n            end = i\n    #---\n    return trim_tuple(test_list, start, end)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup[:K] = tup[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    test_list_length = len(test_list)\n    for i in range(test_list_length):\n        j = i\n        for j in range(i, test_list_length):\n            if test_list[i] > test_list[j]:\n                temp = test_list[j]\n                test_list[j] = test_list[i]\n                test_list[i] = temp\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for x in range(len(test_list) - K):\n        del test_list[x]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    try:\n        new_test_list = []\n        for i in range(len(test_list)):\n            new_test_list.append(test_list[i][:K])\n        return new_test_list\n    except:\n        return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if not test_list:\n        return []\n    # get the first element and remove it\n    first_item = test_list[0]\n    test_list.remove(first_item)\n    # return the result\n    return trimmer(test_list, K)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    #Your code goes here\n    tuple_list = []\n    for item in test_list:\n        if len(item) >= K:\n            item = item[:K]\n        tuple_list.append(item)\n    return tuple_list\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    if len(tup1)!= len(tup2):\n        raise IndexError('Tuple sizes are not equal')\n    # To perform the index-wise multiplication, first we iterate through the tuple for each element, then we multiply the element by the corresponding index.\n    # As we iterate through all the elements, we print out the result.\n    for i in range(len(tup1)):\n        print(tup1[i] * tup2[i])\n    # Next, we iterate through the tuple again, but now with the same index, and multiply the element by that index.\n    for i in range(len(tup1)):\n        print(tup1[i] * tup2[i])\n    \ndef main():\n    '''\n    Write a program that takes two lists of numbers and finds the sum of all of them.\n    '''\n    test_list1 = [1,2,3,4,5,6]\n    test_list2 = [2,4,6,8,10,12]\n    \n    index_multiplication(test_list1, test_list2)\n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for index in range(len(test_tup1[0])):\n        test_tup2[0][index] = test_tup1[0][index] * test_tup2[1][index]\n    return test_tup2\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple()\n    for index, element in enumerate(test_tup1):\n        result += test_tup2[index] * element\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple((a * b for a, b in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # 1. Take a tuple as an argument\n    tup1 = test_tup1\n    # 2. Loop through the tuple and assign a value to the index\n    for i in range(len(tup1)):\n        tup1[i] *= test_tup2[i]\n    return tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if (len(test_tup1)!= len(test_tup2)):\n        print('TUPLES ARE OF DIFFERENT LENGTH')\n    else:\n        result = 0\n        for i in range(len(test_tup1)):\n            result += test_tup1[i] * test_tup2[i]\n        return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print('#index_multiplication(test_tup1, test_tup2): ')\n    print('This function will multiply 2 tuple elements.')\n    print('test_tup1 is', test_tup1)\n    print('test_tup2 is', test_tup2)\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            print('i is', i, 'j is', j)\n            print(test_tup1[i] * test_tup2[j])\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    lst1 = test_tup1[:]\n    lst2 = test_tup2[:]\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple must be of same size\")\n        return\n    for ele in test_tup1:\n        lst1.append(ele)\n    for ele in test_tup2:\n        lst2.append(ele)\n    return tuple(lst1) * tuple(lst2)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup_a = test_tup1\n    tup_b = test_tup2\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Use Counter() object to create a counter object.\n    my_counter = Counter(lst) \n    # Loop over the values in the tuple. \n    for value in tup: \n        # If the element value of the counter is not present in the tuple, \n        # then set its frequency to 0. \n        if value not in my_counter: \n            my_counter[value] = 0\n        # If the element value of the counter is present, increment its \n        # frequency value by one. \n        else: \n            my_counter[value] += 1\n    # Return the number of occurrences of each element. \n    return my_counter \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(lst) - Counter(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for item in lst:\n        count+=1\n    return count\n    \ntup1 = (1,2,3,4,5,6,7,8,9,10)\nlst1 = list(tup1)\nprint(count_Occurrence(tup1,lst1))"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup).most_common(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = {}\n    res_count = {}\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            if tup[i] not in res:\n                res[tup[i]] = 1\n            else:\n                res[tup[i]] += 1\n    # print(res)\n    # print(res_count)\n    for k, v in res.items():\n        res_count[k] = v\n    return res_count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Initialize a Counter object to store the occurence of each element of the tuple. \n    # The counter will have a key value pair with a count for each element in the tuple.\n    # Create an empty dictionary to store the values of the tuple. \n    c = Counter(tup)\n    # Initialize an empty list to store the dictionary values. \n    res = []\n    # Initialize an empty set to store the distinct elements in the tuple. \n    uniq = set()\n    # Loop through the dictionary.\n    for k, v in c.items(): \n        # If the dictionary contains the element k. \n        # Then add its value to the list of keys. \n        if k in lst: \n            res.append(v)\n            # If the unique elements of the tuple are not present in the dictionary, then add the value to the list of keys. \n            # The unique elements of the tuple are present in the dictionary. \n            if k not in uniq: \n                uniq.add(k)\n                res.append(v)\n            # If the unique elements of the tuple are present in the dictionary, then return the value of the unique element of the tuple. \n            # The unique elements of the tuple are present in the dictionary.\n            return res\n    # If the dictionary is empty, then return an empty list. \n    return res \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    for i in tup:\n        if cnt[i] > 0:\n            cnt[i] -= 1\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    for key, val in tup:\n        cnt[key] += 1\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    return counter.values()\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Your code here\n    # initialize count_occurence using map\n    count_occurence = map(lambda x : tup.count(x), lst)\n    # return the resulting tuple\n    return tuple(count_occurence)\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num*num for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    res = [0,1,3,9,27,45,63,127,729,729,729,729,729,729,729,729]\n    return sum(map(lambda x: x**3, nums)) - sum(map(lambda x: x**3, res))"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    list_of_cubes = []\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_dict = {\n        0: 0,\n        1: 1,\n        2: 4,\n        3: 9,\n        4: 16,\n        5: 25,\n        6: 36,\n        7: 49,\n        8: 64,\n        9: 81\n    }\n    cubes = []\n    for i in range(len(nums)):\n        cubes.append(cube_dict[nums[i]])\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    \n    cube_list = []\n    cube_list.append([1,2,3,4,5,6,7,8,9,10])\n    \n    #Iterate through the list\n    for num in nums:\n        #Check if num is in the cube list\n        if num in cube_list:\n            #Remove num from list\n            cube_list.remove(num)\n    \n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num*num)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num * num * num)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    output = []\n    for num in nums:\n        output.append(num**3)\n    return output\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # TODO: you have to write a helper function to find cubes of individual elements\n    # TODO: solve this on a board.\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    print(sum)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1,n+1))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # YOUR CODE HERE\n    \n    total = 0\n    \n    # FOR ALL THE VALUES IN THE LIST\n    for i in n: \n        \n        # YOUR CODE HERE \n        total += i\n        \n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    import math\n    # your code goes here\n    if n<=0:\n        return 0\n    else:\n        return math.factorial(n)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum =sum+i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0 \n    for i in range(n+1): \n        s = s + i \n    return s \n  \ndef main(): \n    '''\n    Write a program to print out the greatest common divisor of two positive integers.\n    '''\n    print(\"The greatest common divisor of two integers is\", \n          cal_sum(int(input())))\n  \n  \nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    for i in l:\n        if i.startswith(str):\n            return i[len(str):]\n    \n    return str\n    \n    \n    "
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return''.join(str[i:i+l] for i in range(0, len(str), l))\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(str)):\n        if str[i] == l:\n            str[i] = ''\n            break\n    return \"\".join(str)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return''.join(str[i:i+l] for i in range(0, len(str), l))\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_tmp = ''\n    i = 0\n    for s in l:\n        if len(str_tmp) < l[i]:\n            str_tmp += s\n        i += 1\n    return str_tmp\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Initialize variables\n    end_index = 0\n    for i in range(len(l)):\n        if l[i] =='':\n            end_index = i\n        else:\n            break\n    \n    # Extract the length\n    if end_index == len(l):\n        return('')\n    else:\n        return(l[end_index:end_index+l[end_index].__len__()])\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = 0\n    end = len(str)\n    # if l is empty then return the original string\n    if l == []:\n        return str\n    # if l is not empty then assume that l[i] and l[i+1] are the same.\n    # if l[i] is not a string return False\n    # else return the start of the string l[i]\n    while start < end and (start > 0 or end < len(str)):\n        if type(l[start]) is str:\n            if l[start] is not None:\n                # if l[start] is not None then l[start-1] or l[start+1] is not None\n                # print(str, l[start], l[start-1], l[start+1])\n                end = l[start]\n            else:\n                return False\n        start += 1\n    return end\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    i = 0\n    j = l.find(str)\n    while j!= -1:\n        i = i + len(str)\n        j = l.find(str, j + 1)\n    return i\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return_list = []\n    for value in l:\n        return_list.append(str[value])\n    return ''.join(return_list)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    a = ''\n    for i in range(0, len(str)):\n        if(str[i] == '\"' or str[i] == '-') and (i + 1 < len(str)):\n            a += str[i]\n            if(str[i + 1] == '\"'):\n                a += str[i + 1]\n                i += 1\n            else:\n                i += 1\n    return a\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(' +',' ',text1)\n    text1 = re.sub('\\n',' ',text1)\n    text1 = re.sub(' +',' ',text1)\n    text1 = re.sub('  ',' ',text1)\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Search all white spaces \n    pattern = re.compile(\"\\s+\")\n    \n    # Check for any whitespaces in the string\n    for i in range(len(text1)):\n        if text1[i] == \" \":\n            # Remove all whitespace\n            text1 = text1[0:i] + text1[i+1:]\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('^\\s+|\\s+$', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    regex = re.compile(r\"^\\s*\")\n    return regex.sub(\" \",text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'[\\n\\t\\r]',' ',text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    new_text = ''\n    for item in text1:\n        if item!='':\n            new_text += item\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Regex pattern\n    whitespaces = re.compile('^(\\s+)')\n    # Loop through each line in the string\n    for line in text1.splitlines():\n        # Check if line is whitespace\n        if whitespaces.match(line):\n            # Remove line\n            line = line.strip()\n            # Remove whitespace\n            line = whitespaces.sub('', line)\n            # Replace all whitespaces in the string with the original whitespace\n            line = line.replace('\\t','')\n            # Replace all whitespaces in the string with whitespace\n            line = line.replace('\\n','')\n            # Replace all whitespaces in the string with whitespace\n            line = line.replace('\\r','')\n            line = line.replace('\\v','')\n            # Replace all whitespaces in the string with whitespace\n            line = line.replace('  ','')\n            # Replace all whitespaces in the string with whitespace\n            line = line.replace('  ','')\n            # Replace all whitespaces in the string with whitespace\n            line = line.replace('    ','')\n            # Replace all whitespaces in the string with whitespace\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n            line = line.replace('  ','')\n            line = line.replace('  ','')\n            line = line.replace('    ','')\n            line = line.replace('    ','')\n        "
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r' +',' ',text1)\n    return text.strip()\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount == 0:\n        return 0.0\n    else:\n        return actual_cost/sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount >= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0:\n        return 0\n    elif actual_cost <= sale_amount:\n        return sale_amount-actual_cost\n    else:\n        return 0\n        \n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0.0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    # Variables\n    sale_amount_before = sale_amount\n    sale_amount_after = sale_amount - actual_cost\n    total_cost = sale_amount_before + sale_amount_after\n    \n    if sale_amount_before > sale_amount_after:\n        return sale_amount_before\n    else:\n        return sale_amount_after\n        \ndef loss_amount_full(actual_cost,sale_amount,price,amount_unit): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    # Variables\n    sale_amount_before = sale_amount\n    sale_amount_after = sale_amount - actual_cost\n    total_cost = sale_amount_before + sale_amount_after\n    \n    if sale_amount_before > sale_amount_after:\n        return sale_amount_before\n    else:\n        return sale_amount_after\n    \ndef calc_cost(sale_amount,price,amount_unit):\n    '''\n    Write a function that calculates the cost of a sale.\n    '''\n    \n    # Variables\n    sale_amount_before = sale_amount\n    sale_amount_after = sale_amount - price\n    total_cost = sale_amount_before + sale_amount_after\n    \n    if sale_amount_before > sale_amount_after:\n        return sale_amount_before\n    else:\n        return sale_amount_after\n    "
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0.0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        return sumofFactors(n//2) + sumofFactors(n//2 + 1) \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s=0\n    for i in range(1, n+1) :\n        if n%i==0 :\n            s=s+i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\ndef isPerfectNumber(n):\n    '''\n    Find the number of perfect numbers from 1 to n.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += 1\n    if sum == sumofFactors(n):\n        return True\n    else:\n        return False\ndef isArmstrongNumber(n) :\n    '''\n    Return True if the number is Armstrong number.\n    '''\n    num = n\n    sum = 0\n    while num > 0:\n        sum = num%10\n        num = math.pow(num,10)\n    return num== sumofFactors(num)\ndef isPalindrome(s) :\n    '''\n    Check if the given string s is palindrome.\n    '''\n    if (s == s[::-1]):\n        return True\n    else:\n        return False\ndef findPositive(n) :\n    '''\n    Return a list of the positions where the given number is positive.\n    '''\n    pos = []\n    for i in range(0, n+1):\n        if (i % 2 == 1):\n            pos.append(i)\n    return pos\ndef findNegative(n) :\n    '''\n    Return a list of the positions where the given number is negative.\n    '''\n    neg = []\n    for i in range(0, n+1):\n        if (i % 2 == 0):\n            neg.append(i)\n    return neg\ndef findEvenSum(n):\n    '''\n    Find the even sum of the given number.\n    '''\n    even_sum = 0\n    i = 0\n    while (n > 0) :\n        if (n % 2 == 1):\n            even_sum += n\n            n //= 2\n            i += 1\n        else:\n            i += 1\n    return even_sum\ndef findOddSum(n):\n    '''\n    Find the odd sum of the given number.\n    '''\n    odd_sum = 0\n    i = 0\n    while (n > 0) :\n        if (n % 2 == 0):\n            odd_sum += n\n            n //= 2\n            i += 1\n        else:\n            i += 1\n    return odd_sum\ndef isItPalindrome(s) :\n    '''\n    Check if the given string is palindrome.\n    '''\n    if (s == s[::-1]):\n        return True\n    else:\n        return False\ndef isItPalindrome2(s) :\n    '''\n    Check if the given string is palindrome.\n    '''\n    num = s\n    strt = 0\n    end = len(num) - 1\n    while (strt < end):\n        if (num[strt]!= num[end]):\n            return False\n        strt += 1\n        end -= 1\n    return True\ndef findNextOddEvenSum(s):\n    '''\n    Find the next odd and even sum of the given string.\n    '''\n    odd_sum = 0\n    even_sum = 0\n    sum_ = 0\n    i = 0\n    while (s > 0) :\n        if (i % 2 == 0) :\n            odd_sum += s\n            s //= 2\n            sum_ += s\n        else :\n            even_sum += s\n            s //= 2\n            sum_ += s\n        i += 1\n    return [odd_sum, even_sum, sum_]\ndef solve():\n    '''\n    Find the next odd sum and even sum of a given string.\n    '''\n    #find the next odd and even sum\n    odd_sum, even_sum, sum_ = findNextOddEvenSum(findOddSum(findEvenSum(findNegative(findEvenSum(findNextOddEvenSum(input())[0]))))[0])\n    #print the next odd and even sum\n    print (odd_sum, even_sum, sum_)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    while n % 2 == 0 : \n        s += 1\n        n /= 2\n    if n!= 1 : \n        s += 1\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    lst = []\n    for i in range(1, n+1):\n        if (n % i) == 0:\n            lst.append(i)\n    return sum(lst)\ndef multiply(x,y):\n    '''\n    Write a python function to calculate the product of two numbers\n    '''\n    return x*y\ndef isprime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    for i in range(2,n//2+1) :\n        if (n%i)==0 :\n            return False\n    return True\ndef isprimeFactors(n) :\n    '''\n    Write a python function to check whether the number n is a prime factor or not\n    '''\n    if (n<2):\n        return False\n    if (n<=100):\n        return True\n    if (n%3==0):\n        return True\n    if (n%5==0):\n        return True\n    if (n%10==0):\n        return True\n    if (n%5!=0):\n        return False\n    if (n%10!=0):\n        return False\n    return False\ndef squareroot(x) :\n    '''\n    Write a python function to find the square root of a number\n    '''\n    return math.sqrt(x)\ndef setprimeFactors(n) :\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        if isprime(i):\n            lst.append(i)\n    return lst\ndef fact(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if (n<=1):\n        return n\n    return n*fact(n-1)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else : \n        d = math.sqrt(n)\n        while d * d <= n : \n            if n % d == 0 : \n                return (sumofFactors(n // d) + 1)\n            else : \n                d += 1\n        return (sumofFactors(n - 1) + 1)\ndef takeSecond(elem): \n    return elem[1]\ndef orderOfArray(elem): \n    '''\n    Write a python function to sort the elements of a list in ascending order.\n    '''\n    return elem[0]\ndef sumofarray(elem): \n    '''\n    Write a python function to get the sum of all elements in an array. \n    '''\n    s = 0 \n    for elem in elem : \n        s += elem \n    return s \ndef addtwo(elem): \n    '''\n    Write a python function to return the sum of the numbers in the list. \n    '''\n    return elem[0] + elem[1] \ndef mysort(elem): \n    '''\n    Write a python function to sort an array in ascending order. \n    '''\n    for i in range(0, len(elem)): \n        for j in range(i + 1, len(elem)): \n            if elem[i] > elem[j] : \n                elem[i], elem[j] = elem[j], elem[i] \n    return elem\ndef getMax(elem): \n    '''\n    Write a python function to get the largest element in an array. \n    '''\n    return elem[0] \ndef isprime(elem): \n    '''\n    Write a python function to determine if an element is prime or not. \n    '''\n    for i in range(2, int(math.sqrt(elem)) + 1) : \n        if elem % i == 0 : \n            return False\n    return True \ndef isPerfectNumber(elem): \n    '''\n    Write a python function to determine if a number is a perfect number or not. \n    '''\n    if elem <= 1 : \n        return False\n    for i in range(2, int(math.sqrt(elem)) + 1) : \n        if elem % i == 0 : \n            return False\n    return True\ndef perm(elem, lst): \n    '''\n    Write a python function to get all elements in a list in a non-recursive way. \n    '''\n    if len(lst) == 0: \n        lst.append(elem) \n        return lst \n    else : \n        for i in range(0, len(lst)) : \n            for j in range(0, len(lst)) : \n                if lst[i] > lst[j] : \n                    lst[i], lst[j] = lst[j], lst[i] \n        lst.append(elem) \n        return lst \ndef isUnique(elem): \n    '''\n    Write a python function to check if an element is unique or not. \n    '''\n    for i in range(0, int(math.sqrt(elem))) : \n        if elem % i == 0 : \n            return False\n    return True \ndef primeFactors(n): \n    '''\n    Write a python function to get all prime factors of a number. \n    '''\n    if n == 1 : \n        return []\n    else : \n        if n == 2 : \n            return [2]\n        else : \n            i = 3\n            while (i * i <= n) : \n                if n % i == 0 : \n                    j = n // i \n                    factors = []\n                    if i!= j : \n                        factors.extend(primeFactors(j))\n                    factors.append(i)\n                    return factors\n                i += 1\ndef gcd(a, b): \n    '''\n    Write a python function to find the greatest common divisor of two positive integers. \n    '''\n    if a == b : \n        return a \n    elif a < b : \n        return gcd(b, a % b) \n    else : \n        return gcd(a % b, b % a) \ndef modinv(n, m): \n    '''\n    Write a python function to find the modular inverse of a number using the following algorithm. \n    '''\n    if n == 0: \n        return 0 \n    while n > 1: \n        if (n % 2) == 0 : \n            r = n % m \n            n = n // m \n            m = m * m + r * r \n        else : \n            r = n % m \n            n = n // m \n            m = m * m - r * r \n    return m \ndef findMod(x, m): \n    '''\n    Write a python function to find the modulo of an integer. \n    '''\n    if m == 1 : \n        return x \n    else : \n        if (m % 2) == 0 : \n            return findMod(x, m // 2) \n        else : \n            return findMod((x * x) % m, m // 2)\ndef fermatRabinMiller(n): \n    '''\n    Write a python function to check if an integer n is prime or not. \n    '''\n    if n == 2 : \n        return True\n    if n < 2 or n % 2 == 0 : \n        return False\n    s = n - 1 \n    d = 0 \n    while (s % 2 == 0) : \n        s //= 2 \n        d += 1\n    for i in range(5, int(math.sqrt(n) + 1), 6) : \n        while (s % i == 0) : \n            s //= i \n            d += 1\n        if d > 1 : \n            return False\n    for i in range(5, int(math.sqrt(n) + 1), 6) : \n        while (s % i == 0) : \n            s //= i \n            d += 1\n        if d > 1 : \n            return False\n    return True \ndef nCr(n, r) : \n    '''\n    Write a python function to find the factorial of n to the nCr power. \n    '''\n    if (n < 0) or (n % r!= 0) : \n        return 0\n    elif (r < 0) or (r % n!= 0) : \n        return 0\n    else : \n        return (n * (n - 1)) // (r * r) \ndef chinese_remainder_theorem(p, q): \n    '''\n    Write a python function to find the Chinese Remainder Theorem (CMRT) for two integers. \n    '''\n    s = 0\n    for i in range(p, q+1) : \n        s += (i-1) // 10**9\n    return s \ndef modInverse(n, p): \n    '''\n    Write a python function to find the modular inverse of a number, given the modulus m. \n    '''\n    if (n < p) : \n        return 0\n    elif (n % p == 0) : \n        return p \n    elif (n < 0) or (n % p!= 0) : \n        return 0\n    while (n % p)!= 0 : \n        n //= p \n    return p \ndef modInverseOf(n, p) : \n    '''\n    Write a python function to find the modular inverse of a number, given the modulus m. \n    '''\n    if (n < p) : \n        return 0\n    elif (n % p == 0) : \n        return p \n    elif (n < 0) or (n % p!= 0) : \n        return 0\n    while (n % p)!= 0 : \n        n //= p \n    return p \ndef solve(e, n, m) : \n    '''\n    Write a python functio"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 :\n        return 0\n    elif n == 1 :\n        return 1\n    else :\n        sum = 0\n        for i in range(1,n+1) :\n            if n % i == 0 :\n                sum += i\n                if i!= n / i :\n                    sum += 1\n        return sum\n    \ndef factors(n) :\n    '''\n    a function to find factors of a given number.\n    '''\n    factors = []\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    c = 1\n    while c < n : \n        c +=1\n        if n % c == 0 : \n            return c \n    return False\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0: \n        return 0\n    elif n % 2 == 0: \n        return n \n    else: \n        return (sumofFactors(n-1) + sumofFactors(n//2)) \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0: \n        return 0\n    i = 2 \n    while (i * i) <= n: \n        if (n % i) == 0: \n            n = n / i \n            i = i + 1 \n        else: \n            i = i + 1 \n    return n \ndef GCD(x,y): \n    if (x < y): \n        x, y = y, x \n    if (x == 0): \n        return y \n    return GCD(y % x, x) \ndef LCM(x,y): \n    return (x*y) // GCD(x, y) \ndef LCN(x,y): \n    return (y * (LCM(x,y) // LCN(x,y))) \ndef lcm(x,y): \n    return (x * y) // LCM(x, y) \ndef GCD_with_HELP(x,y): \n    h = 0 \n    if (x == 0) : \n        return (y) \n    if (y == 0) : \n        return (x) \n    if (x > y) : \n        x, y = y, x \n    while (y > 0) : \n        x, y = y, x % y \n        h += 1 \n    return (h) \n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\ndef text_match_wordz_2(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    return re.search(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    # regex pattern to check if the word 'z' is in the text.\n    pattern = r'z'\n    # perform a regular expression search to find the word.\n    result = re.search(pattern, text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return 'z' in text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match_pattern = re.compile(r'[zz]')\n    return match_pattern.match(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    search = re.search('(z)(\\w+)', text)\n    return search\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\w*\\d\\w*','', text)\n    text = re.sub(r'\\b\\w*\\d\\w*','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\w*\\d','', text)\n    text = text.replace(' ', '')\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\w','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re.sub(r'\\b\\W+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = re.sub(r'\\d+','', text)\n    text = re.sub(r'\\W+','', text)\n    text = re"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text = re.sub(r'\\b(a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z)\\b', '', text)\n    text = text.replace('\\n','')\n    text = re.sub('\\b([\\w]+)\\b', r'\\1', text)\n    text = re.sub('[\\(\\[].*?[\\)\\]]', r'\\1', text)\n    text = re.sub('[,\\.','', text)\n    text = re.sub('[,\\.','', text)\n    text = re.sub('[ ]{2,}','', text)\n    text = re.sub('[.]{2,}','', text)\n    text = re.sub('[,]+','', text)\n    text = text.replace('\\t','').replace('\\n','').replace('\\r','').replace('  ','')\n    text = text.replace('\\u00A0','').replace('\\u0020','').replace('\\uFEFF','').replace('\\u200C','').replace('\\u200D','').replace('\\u200E','')\n    text = text.split(' ')\n    for t in text:\n        t = t.replace('.', '')\n        t = t.replace(' ', '')\n        t = t.replace('\\n','')\n        t = t.replace('\\r','')\n        t = t.replace('\\t','')\n        t = t.replace('\\u00A0','')\n        t = t.replace('\\uFEFF','')\n        t = t.replace('\\u200C','')\n        t = t.replace('\\u200D','')\n        t = t.replace('\\u200E','')\n        if len(t) > 2:\n            t = t[0:2]\n        if t not in text:\n            text.append(t)\n    text =''.join(text)\n    return text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    result = re.search(pattern, text)\n    if result == None:\n        result = 0\n    else:\n        result = 1\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z',text)\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    return re.search(r'c',text)\ndef text_match_wordb(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    return re.search(r'b',text)\ndef text_match_worda(text):\n    '''\n    Write a function that matches a word containing 'a'.\n    '''\n    return re.search(r'a',text)\ndef text_match_worde(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    return re.search(r'e',text)\ndef text_match_wordi(text):\n    '''\n    Write a function that matches a word containing 'i'.\n    '''\n    return re.search(r'i',text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    return re.search(r'o',text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search(r'u',text)\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    return re.search(r'y',text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    return re.search(r'r',text)\ndef text_match_wordp(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    return re.search(r'p',text)\ndef text_match_wordbw(text):\n    '''\n    Write a function that matches a word containing 'bw'.\n    '''\n    return re.search(r'bw',text)\ndef text_match_wordiw(text):\n    '''\n    Write a function that matches a word containing 'iw'.\n    '''\n    return re.search(r'iw',text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    return re.search(r'w',text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    return re.search(r'w',text)\ndef text_match_worda(text):\n    '''\n    Write a function that matches a word containing 'a'.\n    '''\n    return re.search(r'a',text)\ndef text_match_worde(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    return re.search(r'e',text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search(r'u',text)\ndef text_match_wordi(text):\n    '''\n    Write a function that matches a word containing 'i'.\n    '''\n    return re.search(r'i',text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    return re.search(r'o',text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search(r'u',text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    return re.search(r'w',text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    return re.search(r'w',text)\ndef text_match_worda(text):\n    '''\n    Write a function that matches a word containing 'a'.\n    '''\n    return re.search(r'a',text)\ndef text_match_worde(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    return re.search(r'e',text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search(r'u',text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search(r'u',text)\ndef text_match_wordp(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    return re.search(r'p',text)\ndef text_match_wordb(text):\n    '''\n    Write a function that matches a word containing 'b'.\n    '''\n    return re.search(r'b',text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    return re.search(r'o',text)\ndef text_match_wordbw(text):\n    '''\n    Write a function that matches a word containing 'bw'.\n    '''\n    return re.search(r'bw',text)\ndef text_match_wordi(text):\n    '''\n    Write a function that matches a word containing 'i'.\n    '''\n    return re.search(r'i',text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search(r'u',text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    return re.search(r'w',text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    return re.search(r'w',text)\ndef text_match_worda(text):\n    '''\n    Write a function that matches a word containing 'a'.\n    '''\n    return re.search(r'a',text)\ndef text_match_worde(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    return re.search(r'e',text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search(r'u',text)\ndef text_match_wordi(text):\n    '''\n    Write a function that matches a word containing 'i'.\n    '''\n    return re.search(r'i',text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    return re.search(r'o',text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    return re.search(r'u',text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    return re.search(r'w',text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    return re.search(r'w',text)\ndef text_match_wordbw(text):\n    '''\n    Write a function that matches a word containing 'bw'.\n    '''\n    return re.search(r'bw',text)\ndef text_match_wordi(text):\n    '''\n    Write a function that matches a word containing 'i'.\n    '''\n    return re.search(r'i',text)\ndef text_match_wordw(text)"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 1 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    32 or less days, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 2 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    31 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 3 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    30 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 4 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    29 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 5 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    28 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 6 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    27 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 7 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    26 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 8 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    25 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 9 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    24 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 10 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    23 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 11 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    22 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 12 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    21 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 13 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    20 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 14 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    19 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 15 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    18 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 16 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    17 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 17 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    16 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 18 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    15 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 19 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    14 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 20 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    13 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 21 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    12 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 22 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    11 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 23 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    10 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 24 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    9 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 25 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    8 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 26 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    7 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12\n    return True if monthnum == 27 else False\n    \ndef check_monthnumb_number_for_days(monthnum2):\n    '''\n    Write a function that returns True if the given month number contains\n    6 days or not, otherwise return False.\n    '''\n    monthnum = monthnum2 % 12"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = int(monthnum2)\n    if (monthnum2 < 1 or monthnum2 > 12):\n        return \"month number should be between 1 and 12.\"\n    if monthnum2 % 31 == 0:\n        return \"month number contains 31 days.\"\n    else:\n        return \"month number does not contain 31 days.\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12 or monthnum2 < 1:\n        return \"That month number has to be between 1 and 12\"\n    else:\n        return \"\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Write your code here\n    if(monthnum2>12 or monthnum2<1):\n        return False\n    else:\n        if(monthnum2%10==0):\n            if(monthnum2%100==0):\n                if(monthnum2%400==0):\n                    return True\n            else:\n                return False\n        else:\n            return False\n    \ndef check_monthnumb_date(monthnum2, year):\n    '''\n    Write a function to check whether the given month number is in the given year or not.\n    '''\n    # Write your code here\n    if(monthnum2>12 or monthnum2<1):\n        return False\n    else:\n        if(monthnum2%10==0 and monthnum2%100!=0):\n            if(monthnum2%400==0):\n                return True\n            else:\n                return False\n        else:\n            if(monthnum2%10==0):\n                if(monthnum2%100==0):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return 'Please enter a valid number between 1 and 12'\n    else:\n        if monthnum2 == 1:\n            if monthnum2 in [2, 4, 6, 8, 10, 12]:\n                return 'This month has 31 days'\n            else:\n                return 'This month has 28 days'\n        elif monthnum2 == 2:\n            if monthnum2 in [1, 3, 5, 7, 9, 11]:\n                return 'This month has 31 days'\n            else:\n                return 'This month has 29 days'\n        elif monthnum2 == 3:\n            if monthnum2 in [1, 4, 6, 8, 10, 12]:\n                return 'This month has 31 days'\n            else:\n                return 'This month has 30 days'\n        elif monthnum2 == 4:\n            if monthnum2 in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n                return 'This month has 31 days'\n            else:\n                return 'This month has 30 days'\n        elif monthnum2 == 5:\n            if monthnum2 in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n                return 'This month has 31 days'\n            else:\n                return 'This month has 31 days'\n        elif monthnum2 == 6:\n            if monthnum2 in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n                return 'This month has 30 days'\n            else:\n                return 'This month has 31 days'\n        elif monthnum2 == 7:\n            if monthnum2 in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n                return 'This month has 31 days'\n            else:\n                return 'This month has 30 days'\n        elif monthnum2 == 8:\n            if monthnum2 in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n                return 'This month has 31 days'\n            else:\n                return 'This month has 31 days'\n        elif monthnum2 == 9:\n            if monthnum2 in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n                return 'This month has 31 days'\n            else:\n                return 'This month has 30 days'\n        elif monthnum2 == 10:\n            if monthnum2 in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n                return 'This month has 31 days'\n            else:\n                return 'This month has 30 days'\n        elif monthnum2 == 11:\n            if monthnum2 in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]:\n                return 'This month has 31 days'\n            else:\n                return 'This month has 30 days'\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # monthnumb_number=int(monthnum2)\n    # if(monthnumb_number%1==0):\n    #     return True\n    # else:\n    #     return False\n    if(monthnum2<=12):\n        if(monthnum2%1==0):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 31:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 0 or monthnum2 > 31:\n        return False\n    return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if not stringlist:\n        return []\n    stringlist = list(stringlist)\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    i = 0\n    j = len(stringlist) - 1\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)//2):\n        stringlist[i], stringlist[-i-1] = stringlist[-i-1], stringlist[i]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.sort()\n    revstring = ''\n    for char in stringlist:\n        revstring = char + revstring\n    return revstring\n    \ndef is_palindrome(word):\n    '''\n    Function to check whether the string word is a palindrome or not.\n    '''\n    if word == reverse_string_list(word):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) < 1:\n        return stringlist\n    if len(stringlist) == 1:\n        return stringlist\n    for i in range(len(stringlist) - 1, -1, -1):\n        stringlist[i] = stringlist[i].replace(' ', '-')\n        stringlist[i] = stringlist[i].replace('-', '')\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    i = 0\n    while i < len(stringlist):\n        result.append(stringlist[i])\n        i += 1\n    return result"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [stringlist[i:i+len(stringlist)] for i in range(len(stringlist))]\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for s in stringlist:\n        reverse_list.append(s[::-1])\n    return reverse_list\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    stringlist.reverse()\n    return stringlist\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse each word in a string.\n    '''\n    \n    string.split()\n    return string.swapcase()\n    \ndef remove_spaces(string):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    \n    return string.replace(\" \", \"\")\n    \ndef count_distinct_words(stringlist):\n    '''\n    Write a function that takes a list of strings and returns the number of distinct words in the given list.\n    '''\n    \n    stringlist.sort()\n    stringlist.split()\n    return len(set(stringlist))\n    \ndef merge_two_dicts(first, second):\n    '''\n    Write a function that merges two dictionaries into a single dictionary.\n    '''\n    \n    return {**first, **second}\n    \ndef remove_numbers(string):\n    '''\n    Write a function that removes all numbers from the given string.\n    '''\n    \n    return string.replace(\" \", \"\")\n    \ndef reverse_string_with_punc(string):\n    '''\n    Write a function that reverses a string while keeping punctuation.\n    '''\n    \n    string.replace(\" \", \"\")\n    string = string.replace(\"\\n\", \"\").replace(\"\\t\", \" \").replace(\"\\r\", \" \")\n    string = string.replace(\"(\", \"\").replace(\")\", \"\").replace(\"-\", \"\").replace(\",\", \"\")\n    string = string.replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"'\", \"\").replace('\"', \"\").replace(\"?\", \"\").replace(\"!\", \"\")\n    string = string.replace(\"*\", \"\").replace(\"*\", \"\").replace(\"/\", \"\").replace(\" \", \"\").replace(\":\", \"\")\n    string = string.replace(\";\", \"\").replace(\"<\", \"\").replace(\">\", \"\")\n    string = string.replace(\"+\", \"\").replace(\"=\", \"\").replace(\"-\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"~\", \"\").replace(\"<\", \"\").replace(\">\", \"\")\n    string = string.replace(\"|\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\";\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\\n\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"'\", \"\").replace('\"', \"\").replace(\"-\", \"\").replace(\",\", \"\").replace(\"+\", \"\")\n    return string\n    \ndef count_tokens(string):\n    '''\n    Write a function that counts the number of characters in a given string.\n    '''\n    \n    return len(string)\n    \ndef remove_punctuation(string):\n    '''\n    Write a function that removes all punctuation from a given string.\n    '''\n    \n    string = string.replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\"-\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"|\", \"\").replace(\"'\", \"\").replace('\"', \"\").replace(\"-\", \"\").replace(\" \", \"\").replace(\":\", \"\").replace(\"+\", \"\").replace(\"=\", \"\").replace(\"-\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\";\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\\n\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"'\", \"\").replace(\"'\", \"\")\n    return string\n    \ndef replace_numbers(string):\n    '''\n    Write a function that replaces all numbers from a given string.\n    '''\n    \n    string = string.replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\"-\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"|\", \"\").replace(\"'\", \"\").replace('\"', \"\").replace(\"-\", \"\").replace(\" \", \"\").replace(\":\", \"\").replace(\"+\", \"\").replace(\"=\", \"\").replace(\"-\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\";\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\\n\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"'\", \"\").replace('\"', \"\").replace(\"-\", \"\").replace(\" \", \"\").replace(\":\", \"\").replace(\"+\", \"\").replace(\"=\", \"\").replace(\"-\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\";\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\\n\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"'\", \"\").replace('\"', \"\").replace(\"-\", \"\").replace(\" \", \"\").replace(\":\", \"\").replace(\"+\", \"\").replace(\"=\", \"\").replace(\"-\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\";\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\\n\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"'\", \"\").replace('\"', \"\")\n    return string\n    \ndef find_duplicates(string):\n    '''\n    Write a function that finds the duplicates in a given string.\n    '''\n    \n    return string.replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\"-\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"|\", \"\").replace(\"'\", \"\").replace('\"', \"\").replace(\"-\", \"\").replace(\" \", \"\").replace(\":\", \"\").replace(\"+\", \"\").replace(\"=\", \"\").replace(\"-\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\";\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\\n\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"'\", \"\").replace('\"', \"\").replace(\"-\", \"\").replace(\" \", \"\").replace(\":\", \"\").replace(\"+\", \"\").replace(\"=\", \"\").replace(\"-\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\";\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"\\n\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\").replace(\"'\", \"\").replace('\"', \"\")\n    return string\n    \ndef find_repeated_characters(string):\n    '''\n    Write a function that finds the repeated characters.\n    '''\n    \n    return string.replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\"-\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"/\", \"\").replace(\"|\", \"\").replace(\"'\", \"\").replace('\"', \"\").replace(\"-\", \"\").replace(\" \", \"\").replace(\":\", \"\").replace(\"+\", \"\").replace(\"=\", \"\").replace(\"-\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\";\", \"\").replace(\";\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"!\", "
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    for i in range(length - 1):\n        if lst[i] < lst[i + 1]:\n            return i\n    return length\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for x in lst:\n        if x < min:\n            min = x\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    count=0\n    for i in lst:\n        if(len(i)<count):\n            count=len(i)\n    return count\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst:\n        min_length = len(lst)\n        min_length_index = lst.index(min(lst))\n        return min_length_index, min(lst[min_length_index:])\n    else:\n        return 'No elements'\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    i = 0\n    m = lst[0]\n    for j in range(0, len(lst)):\n        if (lst[j] < m):\n            m = lst[j]\n            i = j\n    return lst[i]\n    \ndef find_min(lst):\n    '''\n    Function to find the sublist having minimum length.\n    '''\n    return Find_Min(lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minLen = lst[0] \n    \n    for i in range(1, len(lst)): \n        if len(lst[i]) < minLen: \n            minLen = len(lst[i]) \n    \n    return lst[0: len(lst) - minLen + 1] \n    \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    max_length=0\n    for i in lst:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\n    \nlst = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\nprint(Find_Min(lst))\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(0, len(lst)-1):\n        if lst[i] < lst[i+1]:\n            min = lst[i]\n            j = i+1\n            while lst[j] > min:\n                lst[j] = lst[j-1]\n                j = j-1\n            lst[j] = min\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst)==0: \n        return -1\n    else: \n        for i in range(0, len(lst)): \n            for j in range(0, len(lst) - i): \n                if lst[j] < lst[j + i]: \n                    lst[j], lst[j + i] = lst[j + i], lst[j] \n        return lst \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    min = len(lst)\n    for i in range(len(lst)):\n        min = min if lst[i] < min else lst[i]\n    return min\n    \n    \n    \ndef main():\n    arr = []\n    n = int(input())\n    for i in range(n):\n        val = int(input())\n        arr.append(val)\n    lst = sorted(arr)\n    print(Find_Min(lst))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n    # return (l * b)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    return l * 2 + b * 2\ndef triangle_area(A,B,C):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (A + B + C)/2\ndef triangle_perimeter(A,B,C):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return (A + B + C)*3\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l * b\n    return a\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #raise NotImplementedError\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(f'The area of the rectangle is: {area}')\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = re.sub(r'[A-Z]', lambda x: x.upper(), str1)\n    res = re.sub(r'\\W+', lambda x: x.lower(), res)\n    return res\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = re.sub(r'[^\\w]', '', str1)\n    return res\ndef remove_spaces(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = re.sub(r'[^\\w]', '', str1)\n    return res\ndef remove_emoji(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = re.sub(r'[^\\w]', '', str1)\n    res = re.sub(r'[\\U0001F600-\\U0001F64F]', '', res)\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression\n    #r = r'[a-zA-Z]+'\n    r = r'[A-Z]+'\n    # compile the regular expression\n    #e = re.compile(r, re.UNICODE)\n    e = re.compile(r)\n    # search for all matches of the regular expression\n    #m = e.findall(str1)\n    #remove any uppercase letters from string\n    res = e.sub('',str1)\n    # now convert to lower case, remove any uppercase and lowercase, and convert to uppercase\n    #res = e.sub(r'\\1',str1.lower())\n    res = e.sub(r'\\1', res)\n    # convert to uppercase, remove any uppercase, and convert to lowercase\n    res = e.sub(r'\\1', res.upper())\n    res = e.sub(r'\\1', res.lower())\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #replace uppercase with uppercase\n    str1 = str1.replace(u'\\uF6D2','g')\n    #replace uppercase with uppercase\n    str1 = str1.replace(u'\\uF6D2','G')\n    #replace uppercase with uppercase\n    str1 = str1.replace(u'\\uF6D2','G')\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    list1 = []\n    n = len(str1)\n    for i in range(n):\n        if str1[i].isupper():\n            list1.append(str1[i])\n    return \"\".join(list1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isupper():\n            new_str = char.lower()\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace('u','')\n    str1 = str1.replace('U','')\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # your code goes here\n    ans = ''\n    for i in str1:\n        if i.isupper():\n            ans = ans + i\n    return ans\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code goes here\n    ans = ''\n    for i in str1:\n        if i.islower():\n            ans = ans + i\n    return ans\ndef remove_numbers(str1):\n    '''\n    Write a function to remove non-numeric characters from a given string.\n    '''\n    # your code goes here\n    ans = ''\n    for i in str1:\n        if not i.isdigit():\n            ans = ans + i\n    return ans\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i.isupper():\n            str2 += i.lower()\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.upper()\n    return str1\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    str1 = str1.replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace('(', '').replace(')', '').replace(';', '').replace(':', '').replace('$', '').replace('\"', '').replace('#', '').replace('$', '').replace('@', '').replace('&', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace('=', '').replace('&', '').replace('_', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace('[', '').replace('\\'', '').replace(' ', '').replace('[', '').replace(']', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(';', '').replace(':', '').replace('$', '').replace('\"', '').replace('#', '').replace('$', '').replace('@', '').replace('&', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace('=', '').replace('&', '').replace('_', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace(']', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(';', '').replace(':', '').replace('$', '').replace('\"', '').replace('#', '').replace('$', '').replace('@', '').replace('&', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace('=', '').replace('&', '').replace('_', '').replace('{', '').replace('}', '').replace('[', '').replace(']', '').replace(']', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(';', '').replace(':', '').replace('$', '').replace('\"', '').replace('#', '').replace('$', '').replace('@', '').replace('&', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(';', '').replace(':', '').replace('$', '').replace('\"', '').replace('#', '').replace('$', '').replace('@', '').replace('&', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}', '').replace('\"', '').replace('%', '').replace('+', '').replace('-', '').replace('*', '').replace('*', '').replace('(', '').replace(')', '').replace(')', '').replace('}'"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Your code here\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if lst == []:\n        return None\n    elif len(lst) > 1:\n        return lst[0]\n    else:\n        return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if not lst:\n        raise IndexError\n    else:\n        print(lst[0])\n        return Extract(lst[1:])\ndef Locate(lst, needle): \n    '''\n    Write a python function to get the index of a needle in each sublist.\n    '''\n    if not lst:\n        raise IndexError\n    else:\n        for i in range(len(lst)):\n            if lst[i] == needle:\n                return i\n        return -1\ndef Find(lst, needle):\n    '''\n    Write a python function to search a needle in each sublist.\n    '''\n    if not lst:\n        raise IndexError\n    else:\n        for i in range(len(lst)):\n            if lst[i] == needle:\n                return i\n        return -1\ndef Remove(lst, need):\n    '''\n    Write a python function to remove a needle from each sublist.\n    '''\n    if not lst:\n        raise IndexError\n    else:\n        i = 0\n        while i < len(lst):\n            if lst[i] == need:\n                del lst[i]\n                return lst\n            i += 1\n    return lst\ndef Reverse(lst):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if not lst:\n        raise IndexError\n    else:\n        temp = lst[-1]\n        lst[-1] = lst[-2]\n        lst[-2] = temp\n    return lst\ndef Join(lst1, lst2):\n    '''\n    Write a python function to join all elements of two lists together.\n    '''\n    if not lst1 or not lst2:\n        raise IndexError\n    else:\n        return ''.join(lst1) + ''.join(lst2)\ndef Split(lst, delimiter):\n    '''\n    Write a python function to split each element of a list.\n    '''\n    if not lst:\n        raise IndexError\n    else:\n        for i in range(len(lst)):\n            if lst[i] == delimiter:\n                yield lst[:i+1]\n                return lst[i+1:]\n            elif lst[i] == ',':\n                pass\n            else:\n                yield lst[:i+1]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    list = []\n    for i in range(len(lst)):\n        list.append(lst[i][0])\n    return list\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    myList = []\n    for sublist in lst:\n        myList.append(sublist[0])\n    return myList[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def get_element(lst):\n        if len(lst) == 0:\n            return None\n        else:\n            return lst[0]\n    return map(get_element, lst)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        print(i[0]) \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    i = 0\n    while i < len(lst):\n        j = i\n        while j < len(lst) and lst[j][0] < lst[i][0]:\n            j += 1\n        lst[i] = lst[j]\n        i = j\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    while(lst): \n        temp = lst.pop(0) \n        if (len(lst) == 0): \n            return temp \n        else: \n            print(temp,end=' ') \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter.isupper():\n            count += 1\n    return count\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter.islower():\n            count += 1\n    return count\n    \ndef special_char(str):\n    '''\n    Write a python function to count the special characters in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter == '!':\n            count += 1\n    return count\n        \n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_counter = 0\n    for i in str:\n        if i.isupper():\n            upper_counter += 1\n    return upper_counter\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    def count_upper_char(str):\n        '''\n        Given a string, print the number of upper case characters.\n        '''\n        count=0\n        for i in str:\n            if i.isupper():\n                count+=1\n        print(count)\n    \n    count_upper_char(str)\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_case = 0\n    for char in str:\n        if char.isupper():\n            upper_case+=1\n    return upper_case\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    str=str.upper()\n    for i in str:\n        if i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' :\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    lower_str = str.lower()\n    \n    upper_ctr_dict = {}\n    for letter in lower_str:\n        if letter == letter.upper():\n            if letter not in upper_ctr_dict:\n                upper_ctr_dict[letter] = 0\n            upper_ctr_dict[letter] += 1\n            \n    return len(upper_ctr_dict)\n    \nupper_ctr('hello'"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper += 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    result = \"\"\n    for i in str:\n        if i.isupper():\n            result += i.upper()\n    return result\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    n = str.upper()\n    count = 0\n    for i in n:\n        if i == i.upper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    combinations_list = []\n    \n    if len(list1) == 0:\n        return []\n    \n    for i in range(len(list1)):\n        for x in combinations_list:\n            if len(x) >= i and x[i]!= list1[i]:\n                break\n        else:\n            combinations_list.append(list1[:])\n            \n    if len(combinations_list) == 0:\n        return []\n    \n    return combinations_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combinations(lst):\n        if len(lst) == 0:\n            return [[]]\n        else:\n            return combinations(lst[1:]) + combinations(lst[0:len(lst) - 1])\n    \n    \n    return list(combinations(list1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # CODE\n    pass\n    # end of code\n    # if not list\n    # return []\n    # if list\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return []\n    # else\n    # return ["
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    \n    for i in list1:\n        if list1.count(i) == 1:\n            combinations.append([i])\n        else:\n            temp = combinations_list(list1.copy())\n            for j in temp:\n                if i in j:\n                    j.append(i)\n                    break\n                else:\n                    j.append(i)\n    return combinations\n    \ndef permutation_list(list1):\n    '''\n    Write a function to find all possible permutations of the elements of a given list.\n    '''\n    permutation_list = []\n    \n    for i in list1:\n        temp = []\n        for j in list1:\n            if i == j:\n                temp.append(j)\n            else:\n                temp.append(i)\n        permutation_list.append(temp)\n    return permutation_list\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) <= 1:\n        return list1\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l1 = list1[0]\n    l2 = list1[1]\n    l3 = list1[2]\n    l4 = list1[3]\n    l5 = list1[4]\n    l6 = list1[5]\n    l7 = list1[6]\n    l8 = list1[7]\n    l9 = list1[8]\n    l10 = list1[9]\n    l11 = list1[10]\n    l12 = list1[11]\n    l13 = list1[12]\n    l14 = list1[13]\n    l15 = list1[14]\n    l16 = list1[15]\n    l17 = list1[16]\n    l18 = list1[17]\n    l19 = list1[18]\n    l20 = list1[19]\n    l21 = list1[20]\n    l22 = list1[21]\n    l23 = list1[22]\n    l24 = list1[23]\n    l25 = list1[24]\n    l26 = list1[25]\n    l27 = list1[26]\n    l28 = list1[27]\n    l29 = list1[28]\n    l30 = list1[29]\n    l31 = list1[30]\n    l32 = list1[31]\n    l33 = list1[32]\n    l34 = list1[33]\n    l35 = list1[34]\n    l36 = list1[35]\n    l37 = list1[36]\n    l38 = list1[37]\n    l39 = list1[38]\n    l40 = list1[39]\n    l41 = list1[40]\n    l42 = list1[41]\n    l43 = list1[42]\n    l44 = list1[43]\n    l45 = list1[44]\n    l46 = list1[45]\n    l47 = list1[46]\n    l48 = list1[47]\n    l49 = list1[48]\n    l50 = list1[49]\n    l51 = list1[50]\n    l52 = list1[51]\n    l53 = list1[52]\n    l54 = list1[53]\n    l55 = list1[54]\n    l56 = list1[55]\n    l57 = list1[56]\n    l58 = list1[57]\n    l59 = list1[58]\n    l60 = list1[59]\n    l61 = list1[60]\n    l62 = list1[61]\n    l63 = list1[62]\n    l64 = list1[63]\n    l65 = list1[64]\n    l66 = list1[65]\n    l67 = list1[66]\n    l68 = list1[67]\n    l69 = list1[68]\n    l70 = list1[69]\n    l71 = list1[70]\n    l72 = list1[71]\n    l73 = list1[72]\n    l74 = list1[73]\n    l75 = list1[74]\n    l76 = list1[75]\n    l77 = list1[76]\n    l78 = list1[77]\n    l79 = list1[78]\n    l80 = list1[79]\n    l81 = list1[80]\n    l82 = list1[81]\n    l83 = list1[82]\n    l84 = list1[83]\n    l85 = list1[84]\n    l86 = list1[85]\n    l87 = list1[86]\n    l88 = list1[87]\n    l89 = list1[88]\n    l90 = list1[89]\n    l91 = list1[90]\n    l92 = list1[91]\n    l93 = list1[92]\n    l94 = list1[93]\n    l95 = list1[94]\n    l96 = list1[95]\n    l97 = list1[96]\n    l98 = list1[97]\n    l99 = list1[98]\n    l100 = list1[99]\n    l101 = list1[100]\n    l102 = list1[101]\n    l103 = list1[102]\n    l104 = list1[103]\n    l105 = list1[104]\n    l106 = list1[105]\n    l107 = list1[106]\n    l108 = list1[107]\n    l109 = list1[108]\n    l110 = list1[109]\n    l111 = list1[110]\n    l112 = list1[111]\n    l113 = list1[112]\n    l114 = list1[113]\n    l115 = list1[114]\n    l116 = list1[115]\n    l117 = list1[116]\n    l118 = list1[117]\n    l119 = list1[118]\n    l120 = list1[119]\n    l121 = list1[120]\n    l122 = list1[121]\n    l123 = list1[122]\n    l124 = list1[123]\n    l125 = list1[124]\n    l126 = list1[125]\n    l127 = list1[126]\n    l128 = list1[127]\n    l129 = list1[128]\n    l130 = list1[129]\n    l131 = list1[130]\n    l132 = list1[131]\n    l133 = list1[132]\n    l134 = list1[133]\n    l135 = list1[134]\n    l136 = list1[135]\n    l137 = list1[136]\n    l138 = list1[137]\n    l139 = list1[138]\n    l140 = list1[139]\n    l141 = list1[140]\n    l142 = list1[141]\n    l143 = list1[142]\n    l144 = list1[143]\n    l145 = list1[144]\n    l146 = list1[145]\n    l147 = list1[146]\n    l148 = list1[147]\n    l149 = list1[148]\n    l150 = list1[149]\n    l151 = list1[150]\n    l152 = list1[151]\n    l153 = list1[152]\n    l154 = list1[153]\n    l155 = list1[154]\n    l156 = list1[155]\n    l157 = list1[156]\n    l158 = list1[157]\n    l159 = list1[158]\n    l160 = list1[159]\n    l161 = list1[160]\n    l162 = list1[161]\n    l163 = list1[162]\n    l164 = list1[163]\n    l165 = list1[164]\n    l166 = list1[165]\n    l167 = list1[166]\n    l168 = list1[167]\n    l169 = list1[168]\n    l170 = list1[169]\n    l171 = list1[170]\n    l172 = list1[171]\n    l173 = list1[172]\n    l174 = list1[173]\n    l175 = list1[174]\n    l176 = list1[175]\n    l177 = list1[176]\n    l178 = list1[177]\n    l179 = list1[178]\n    l180 = list1[179]\n    l181 = list1[180]\n    l182 = list1[181]\n    l183 = list1[182]\n    l184 = list1[183]\n    l185 = list1[184]\n    l186 = list1[185]\n    l187 = list1[186]\n    l188 = list1[187]\n    l189 = list1[188]\n    l190 = list1[189]\n    l191 = list1[190]\n    l192 = list1[191]\n    l193 = list1[192]\n    l194 = list1[193]\n    l195 = list1[194]\n    l196 = list1[195]\n    l197 = list1[196]\n    l198 = list1[197]\n    l199 = list1[198]\n    l200 = list1[199]\n    l201 = list1[200]\n    l20"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combs = []\n    for i in range(len(list1) + 1):\n        for j in itertools.permutations(list1, i):\n            combs.append(list(j))\n    return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [''.join(sorted(l)) for l in itertools.permutations(list1)]\n    \ndef permutation_strings(l):\n    '''\n    Write a function that takes a list and returns a list containing all possible permutations.\n    '''\n    return combinations_list(l)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    comb = []\n    if len(list1)==1:\n        comb = list1\n    else:\n        for i in range(len(list1)):\n            for j in range(len(list1)-1):\n                comb.append(list1[i]+list1[j])\n    return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    if len(list1) == 0:\n        return []\n    \n    combinations = []\n    \n    for element in list1:\n        combinations.extend(combinations_list(list1[:element] + list1[element+1:]))\n        \n    return combinations\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return arr\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return arr\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n==1:\n        return arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    res = []\n    stack = []\n    for num in arr:\n        while stack and num > stack[-1]:\n            res.append(stack.pop())\n        stack.append(num)\n    return res[::-1]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_sub_arr = []\n    max_sum = 0\n    for num in arr:\n        sub = num\n        for i in range(len(arr)):\n            if sub == 0:\n                break\n            sub = sub * arr[i]\n        max_sub_arr.append(sub)\n    max_sub_arr.sort()\n    for i in range(len(max_sub_arr)):\n        for j in range(i,len(max_sub_arr)):\n            if max_sub_arr[i] * max_sub_arr[j] > max_sum:\n                max_sum = max_sub_arr[i] * max_sub_arr[j]\n                for k in range(i,j):\n                    max_sum += max_sub_arr[k]\n                return max_sum\n    return max_sum\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = []\n    max_product = 0\n    prev_product = 1\n    for i in range(len(arr)):\n        result.append(prev_product)\n        max_product = max(max_product,prev_product * arr[i])\n        prev_product = arr[i]\n    result[-1] = arr[-1] * max_product\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product=0\n    prev=0\n    for i in range(len(arr)):\n        curr=arr[i]\n        if prev!=0:\n            curr=curr*prev\n        curr_product=arr[i]\n        max_product=max(curr_product,max_product)\n        prev=curr\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product_subarray = 1\n    for i in range(0, len(arr)):\n        if arr[i] > 0:\n            subarray_size = 1\n            for j in range(0, i):\n                if arr[j] > 0:\n                    subarray_size += 1\n            max_product_subarray *= subarray_size\n            print(f'Subarray size of {arr[i]} is {subarray_size}')\n            print(f'Max product of {arr[i]} is {max_product_subarray}')\n            print(f'Max product of {arr[i]} * {subarray_size} is {max_product_subarray * subarray_size}')\n            print()\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    index = -1\n    max_product = -1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    \n    size = len(arr)\n    dp = [[0 for x in range(size)] for y in range(size)]\n    \n    for i in range(size):\n        dp[i][0] = arr[i]\n    \n    for i in range(1,size):\n        for j in range(i,size):\n            # print(i,j)\n            dp[i][j] = max(arr[i]*dp[i+1][j], arr[j]*dp[i+1][j+1])\n    return dp[0][size-1]\n        \n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = 0\n    for x in dict.values():\n        value = value + 1\n    if (value == n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Hint: You may not use the built-in function dict().values()\n    return all(x == n for x in dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    d = dict.values()\n    for el in d:\n        if len(el)!= n:\n            return False\n        else:\n            for key, value in el.items():\n                if value!= el[key]:\n                    return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 0:\n        return True\n    for key in dict:\n        if dict[key]!= key:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        for j in range(len(dict[i])):\n            if dict[i][j]!= dict[i][j+1]:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        for i in dict:\n            print(i, \":\", dict[i])\n    else:\n        print(\"Error\")\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k,v in dict.items():\n        if v!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not dict:\n        return True\n    for key in dict.keys():\n        if key not in n:\n            return False\n        elif dict[key]!= n[key]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if not isinstance(v, dict) and k!= v:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if type(dict[i])!= type(dict):\n            return False\n    for i in dict.keys():\n        if type(dict[i])!= type(dict):\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if v == []:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if type(v) == list:\n            dict1.pop(k)\n        elif type(v) == dict:\n            drop_empty(v)\n        else:\n            pass\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if dict1[item] == \"\":\n            del dict1[item]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n    pass\n    # TODO: write the function\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1.keys():\n        if dict1[item] == '':\n            dict1.pop(item)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == []:\n            dict1.pop(key)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) == 0:\n        return None\n    else:\n        return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for item in dict1:\n        if not dict1[item]:\n            del dict1[item]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.clear()\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if not v:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # if length of array is 0 or 1 then return that array\n    if len(arr)==0 or len(arr)==1:\n        return arr[0]\n    # find the length of the array\n    n = len(arr)\n    # create a 2D array for initializing max product value for the given array\n    prod = [[0 for x in range(n+1)] for x in range(n+1)] \n    # store the final product value in the current arr\n    prod[0][0] = arr[0]\n    # store the current product values of each element of the array \n    for i in range(1,n+1):\n        for j in range(i):\n            prod[i][j] = prod[i-1][j]*arr[i-1]\n    # find max product for each element\n    for i in range(1,n+1):\n        for j in range(i):\n            prod[i][j+1] = max(prod[i-1][j]*arr[i-1],prod[i-1][j+1]*arr[i-1])\n    # return max product \n    return prod[n][n]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    res = arr[1:]\n    \n    # if there is only one element in the array\n    if len(res) == 1:\n        return res[0]\n    \n    # multiply all values in the array\n    p = res[0]\n    for i in range(1, len(res)):\n        p = p * res[i]\n    \n    return "
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, n):\n        # find the maximum product\n        temp = arr[i]\n        for j in range(i, n):\n            if arr[j] > temp:\n                temp = arr[j]\n        # update maximum product\n        max_product = max(temp*arr[i], max_product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # If we know that the subsequence is sorted\n    if arr[0] <= arr[1]:\n        # Go through all values from left to right\n        for i in range(1, len(arr)):\n            # Sum all the multiples of that number\n            arr[i] = arr[i] + arr[i - 1]\n        # Return the maximum value\n        return arr[-1]\n    # Else we can't find the maximum\n    return -1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    max_product = 0\n    \n    for i in range(1,len(arr)):\n        left_product = arr[i-1] * arr[i]\n        right_product = arr[i] * arr[i+1]\n        \n        if left_product > max_product:\n            max_product = left_product\n        \n        if right_product > max_product:\n            max_product = right_product\n    \n    return max_product\n    "
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    ans = -1\n    \n    arr.sort()\n    \n    for i in range(1,len(arr)):\n        a = arr[i-1]\n        b = arr[i]\n        \n        \n        if a*b > ans:\n            ans = a*b\n            \n        else:\n            continue\n        \n        \n    return ans\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    size = len(arr)\n    if size == 1:\n        return arr[0]\n    else:\n        if arr[0] > arr[1]:\n            return arr[0] * arr[1]\n        else:\n            return arr[0] * arr[1] * arr[2]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n    else:\n        # The start point of the subsequence\n        s = 0\n        # The end point of the subsequence\n        e = len(arr) - 1\n        # The subsequence length\n        n = len(arr[s:e])\n        # Loop through the subsequences to find the maximum product\n        while s < e:\n            if arr[s] < arr[s + n - 1] and arr[s + n - 1] < arr[e - 1]:\n                s += 1\n                e -= 1\n            elif arr[s] < arr[s + n - 1] and arr[s + n - 1] > arr[e - 1]:\n                s += 1\n                e -= 1\n            elif arr[s + n - 1] > arr[s] and arr[s + n - 1] > arr[e - 1]:\n                s += 1\n                e -= 1\n            else:\n                max_product = arr[s:e + 1]\n                return max_product\n        # If we reach here, then the subsequence is not possible.\n        return []\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = 0\n    for a in range(1,len(arr)):\n        for b in range(a,len(arr)):\n            result = max(arr[a:b+1]) * max(arr[a:b+1])\n            print(result)\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    d = {}\n    for i in range(n):\n        if i not in d:\n            d[i] = [test_tup[i]]\n        else:\n            d[i].append(test_tup[i])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j not in d:\n                d[j] = [test_tup[i]]\n            elif j in d and d[j][-1]!= test_tup[i]:\n                d[j].append(test_tup[i])\n    return d\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialise two lists\n    s1 = []\n    s2 = []\n    \n    # reverse the list so they both have the largest values\n    s1.extend(sorted(test_tup, reverse=True))\n    s2.extend(sorted(test_tup, reverse=True))\n    \n    # find index of first element and swap\n    i = 0\n    while(i < len(s1)):\n        if s1[i] < s2[i]:\n            s1[i], s2[i] = s2[i], s1[i]\n        else:\n            i += 1\n        \n    # return\n    return s1\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    lst = []\n    n = 0\n    for i in test_tup:\n        n += 1\n        if n < len(test_tup):\n            if test_tup[n] > test_tup[n-1]:\n                result.append((test_tup[n],test_tup[n-1]))\n            else:\n                result.append((test_tup[n-1],test_tup[n]))\n        else:\n            result.append((test_tup[n],test_tup[n-1]))\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(test_tup)\n    def find_pairwise_addition(first_tuple):\n        '''\n        Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n        '''\n        print(first_tuple)\n        if len(first_tuple) < 3:\n            return None\n        a = first_tuple[0]\n        b = first_tuple[1]\n        c = first_tuple[2]\n        if c == None:\n            return find_pairwise_addition(first_tuple[0:2])\n        if c < a:\n            return find_pairwise_addition(first_tuple[1:3])\n        else:\n            return find_pairwise_addition(first_tuple[2:])\n    return find_pairwise_addition(test_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        first_element = test_tup[0]\n        second_element = test_tup[1]\n        \n        if (first_element + second_element) % 2 == 0:\n            return [first_element + second_element] + add_pairwise(test_tup[2:])\n        else:\n            return [first_element] + add_pairwise(test_tup[1:]) + [second_element]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # For each tuple, compute the sum of both the current pair and the previous pair\n    # then return the pair of the sum\n    # If the sum is the same, then return None\n    # If the sum is different, then return the tuple itself\n    # If the sum is greater than the current value, then return the tuple itself\n    # If the sum is less than the current value, then return None\n    # Else, return the tuple itself\n    if len(test_tup) == 2:\n        return test_tup\n    elif test_tup[0] <= test_tup[1]:\n        return test_tup\n    elif test_tup[0] > test_tup[1]:\n        return test_tup\n    elif test_tup[1] <= test_tup[0]:\n        return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #Code here\n    res = []\n    for i in range(len(test_tup)):\n        for j in range(i+1,len(test_tup)):\n            res.append(test_tup[i]+test_tup[j])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return sum(arr[n:]) % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = n % arr[0]\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    a = arr[:n//2]\n    b = arr[n//2:]\n    res = 1\n    for i in range(len(a)):\n        res = res * a[i] * b[i] % n\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0:\n        return arr[0]\n    else:\n        return find_remainder(arr, n//len(arr))*arr[len(arr)-1]%n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # -     This is a for loop.\n    #       -  We have to use the fact that the last element is the product of the array multiplied by itself.\n    #       -  The only element that is not yet multiplied to n is the product of the first element multiplied to n and so on.\n    #       -  The product of the array multiplied to n is then simply the product of the last element multiplied to n.\n    #       -  The last element is itself multiplied to n.\n    #       -  So the result is the product of the array multiplied by n.\n    #       -  So the final result is the product of the array multiplied to n.\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    divisor = arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5]\n    remainder = n % divisor\n    product = divisor\n    while remainder:\n        product = product * arr[remainder]\n        remainder = remainder - 1\n    return product\n    \ndef find_remainder_multiply(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = find_remainder(arr, n)\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    x = 1\n    for i in range(len(arr)): \n        x = x * arr[i] % n\n    return x % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #Base Case\n    if n == 0:\n        return 1\n    #Recursive Case\n    else:\n        return arr[n-1] * find_remainder(arr, n-1)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Making a list of all the numbers in the range 1 to n.\n    lst = list(range(1, n+1))\n    # Making a list of all the numbers in the range 1 to n.\n    remainder_lst = []\n    # Calculating the product of the numbers in the list.\n    # This is the product of the remainder of the list, including the numbers in the range 1 to n.\n    for i in lst:\n        remainder = i % n\n        remainder_lst.append(remainder)\n    # Returning the product of the numbers in the list.\n    return product(remainder_lst)\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = list(l)\n    l.sort()\n    l.insert(0,0)\n    if l[-1]!= l[0]:\n        return False\n    \n    elif len(l) < 4:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # code here\n    if l == []:\n        return False\n    elif l[0] == l[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] == 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    counter = 0\n    # Loop through the list of numbers and check for consecutive numbers\n    for i in l: \n        if i == l[0]: \n            counter = counter + 1\n        else: \n            if counter == 1: \n                return False\n            else: \n                counter = 0\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in l:\n        if i % 2 == 0:\n            count = count + 1\n    return count >= 2\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return 'true'\n    for i in l:\n        if i in l[0:len(l)]:\n            return 'true'\n    return 'false'\n    \n    \n    "
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if(l == []): \n        return False \n    if (l[0]!= 0 and l[len(l) - 1]!= 0):\n        return False\n    if l[0] == l[len(l) - 1]:\n        return False\n    for i in range(0,len(l)):\n        if(l[i] == 0):\n            continue\n        if l[i] > l[i + 1] and l[i]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive_numbers = 0\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            consecutive_numbers += 1\n    return consecutive_numbers == 2\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c = 0\n    if l:\n        for x in l:\n            if l.count(x) == 1:\n                c = c + 1\n            else:\n                return False\n    if c == len(l):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (l.count(l[0])) == len(l) and (l[1:].count(l[0])) == len(l[1:])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # test_list1 = (1, 2, 3)\n    # test_list2 = (3, 4, 5)\n    # new_tuple = ()\n    # for i in range(len(test_list1)):\n    #     for j in range(len(test_list2)):\n    #         if test_list1[i] == test_list2[j]:\n    #             new_tuple += (test_list1[i], test_list2[j])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #Empty Tuple\n    Tuple_1 = tuple()\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty list of tuples with the same order as the given tuples\n    intersection = []\n    for i in range(len(test_list1)):\n        for j in range(i+1,len(test_list1)):\n            if test_list1[i] == test_list1[j] and test_list2[i] == test_list2[j]:\n                intersection.append((test_list1[i],test_list2[j]))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    intersection_list = []\n    \n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection_list.append(test_list1[i])\n    \n    return tuple(intersection_list)\n    \n    \n    \ndef tuple_disjoint(test_list1, test_list2):\n    '''\n    Write a function to determine if the two given lists have no intersection.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    i = 0\n    j = 0\n    \n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            j += 1\n        else:\n            i += 1\n    \n    return i == len(test_list2)\n    \n    \ndef tuple_difference(test_list1, test_list2):\n    '''\n    Write a function to determine if the two given lists have no intersection.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    i = 0\n    j = 0\n    \n    while i < len(test_list1):\n        if test_list1[i] in test_list2:\n            i += 1\n        else:\n            j += 1\n    \n    return j!= len(test_list2)\n    \n    \ndef tuple_same(test_list1, test_list2):\n    '''\n    Write a function to determine if the two given lists have the same elements.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    i = 0\n    j = 0\n    \n    while i < len(test_list1):\n        if test_list1[i] in test_list2:\n            i += 1\n        else:\n            j += 1\n    \n    return j == len(test_list2)\n    \n    \ndef tuple_repetitions(test_list1, test_list2):\n    '''\n    Write a function to determine if the two given lists have distinct elements.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in test_list1:\n        if i in test_list2:\n            return True\n    \n    return False\n    \n    \ndef tuple_duplicate(test_list1, test_list2):\n    '''\n    Write a function to determine if the two given lists have distinct elements.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    i = 0\n    j = 0\n    \n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            i += 1\n        else:\n            j += 1\n    \n    return j!= len(test_list2)\n    \n    \ndef tuple_containing(test_list1, test_list2):\n    '''\n    Write a function to determine if two tuples have at least one element in common.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in test_list1:\n        if i in test_list2:\n            return True\n    \n    return False\n    \n    \ndef tuple_smaller(test_list1, test_list2):\n    '''\n    Write a function to determine if two tuples have at least one element in common.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in test_list2:\n        if i in test_list1:\n            return True\n    \n    return False\n    \n    \ndef tuple_smaller_than_two(test_list1, test_list2):\n    '''\n    Write a function to determine if two tuples have at least one element in common.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in test_list2:\n        if i in test_list1:\n            return True\n    \n    return False\n    \n    \ndef tuple_smaller_than_one(test_list1, test_list2):\n    '''\n    Write a function to determine if two tuples have at least one element in common.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in test_list1:\n        if i in test_list2:\n            return True\n    \n    return False\n    \n    \ndef tuple_equal(test_list1, test_list2):\n    '''\n    Write a function to determine if two tuples have equal elements.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in range(len(test_list1)):\n        if test_list1[i]!= test_list2[i]:\n            return False\n    \n    return True\n    \n    \ndef tuple_equal_two_tuples(test_list1, test_list2):\n    '''\n    Write a function to determine if two tuples have equal elements.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in test_list1:\n        if i in test_list2:\n            return True\n    \n    return False\n    \n    \ndef tuple_different_from_first(test_list1, test_list2):\n    '''\n    Write a function to determine if two tuples have different elements from the first tuple.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in test_list1:\n        if test_list1[i]!= test_list2[i]:\n            return True\n    \n    return False\n    \n    \ndef tuple_different_from_second(test_list1, test_list2):\n    '''\n    Write a function to determine if two tuples have different elements from the second tuple.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in test_list2:\n        if test_list2[i]!= test_list1[i]:\n            return True\n    \n    return False\n    \n    \ndef tuple_different_from_middle(test_list1, test_list2):\n    '''\n    Write a function to determine if two tuples have different elements from the middle tuple.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in test_list1:\n        if test_list1[i]!= test_list2[i+1]:\n            return True\n    \n    return False\n    \n    \ndef tuple_different_from_last(test_list1, test_list2):\n    '''\n    Write a function to determine if two tuples have different elements from the last tuple.\n    '''\n    if len(test_list1)!= len(test_list2):\n        raise ValueError('Tuple lengths must be equal')\n    \n    for i in test_list1:\n        if test_list1[i]!= test_list2[i-1]:\n            return True\n    \n    return False\n    \n    \ndef tuple_different_from_first_an"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    try:\n        test_list1 = sorted(test_list1)\n        test_list2 = sorted(test_list2)\n        if test_list1 == test_list2:\n            return test_list1\n        else:\n            if len(test_list1) > len(test_list2):\n                intersection = test_list1\n            else:\n                intersection = test_list2\n            return intersection\n    except:\n        return 'Tuple size should be greater than 1.'\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(tuple(i) for i in set(tuple(j) for j in test_list1) if i in set(tuple(j) for j in test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1)!= len(test_list2):\n        print(\"\\n ERROR: List should be of same length. \")\n        return\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    i,j = 0, 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            i+=1\n            j+=1\n        elif test_list1[i] < test_list2[j]:\n            i+=1\n        elif test_list1[i] > test_list2[j]:\n            j+=1\n    return (i,j)\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(sorted(set(test_list1) & set(test_list2)))\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    ans=''\n    #step1:find the first occurence of the character\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            if i==0:\n                ans=ans+newch\n            else:\n                ans=ans+str1[i+1]\n    #step2:replace the character at this position\n    for j in range(len(str1)):\n        if j==0:\n            ans=ans+str1[j]\n        else:\n            ans=ans+str1[j].replace(ch,newch)\n    #step3:return ans\n    return ans"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #Solution:\n    #import string\n    str1 = list(str1)\n    for i in range(0,len(str1)):\n        if str1[i] == ch:\n            str1[i] = newch\n    return ''.join(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,newch)\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.lower()\n    arr=[]\n    for i in range(len(str1)):\n        if(str1[i]==ch):\n            arr.append(newch)\n    str1=str1.replace(ch,''.join(arr))\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str_list = list(str1)\n    new_str = \"\"\n    for i in range(0,len(str_list)):\n        if str_list[i]!= ch:\n            new_str += str_list[i]\n        else:\n            new_str += newch\n    str_list = list(new_str)\n    return \"\".join(str_list)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=''\n    for i in range(len(str1)):\n        if ch=='A':\n            str2+=newch\n        else:\n            str2+=str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if not str1:\n        return str1\n    else:\n        str2=''\n        for c in str1:\n            if c==ch:\n                str2+=newch\n            else:\n                str2+=c\n        return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= newch and i>0 and str1[i]!= ch:\n            result += str1[i]\n    return result\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if ch == 'A':\n            str2 += str1[i]\n        elif ch == '0' or ch == '1':\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    a=sorted(dict1.items(), key= lambda x: x[1], reverse=True)\n    return a\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict1.values()\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # your code here\n    dict1 = dict1.copy()\n    dict2 = dict1.copy()\n    # return a new copy of the dictionary\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key=lambda k: (dict1[k]))\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = list(dict1.values())\n    return list1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list_keys = list(dict1.keys())\n    list_values = list(dict1.values())\n    list_sort = sorted(list_values)\n    list_sort = sorted(list_sort)\n    return dict(zip(list_keys, list_sort))\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    import operator\n    for key in dict1.keys():\n        dict1[key].sort(key=lambda item: item.get('value',0),reverse=True)\n        dict1[key] = dict1[key] or [None]\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    sort_dict = {}\n    for value in dict1:\n        sort_dict[value] = dict1[value]\n    for key in sort_dict:\n        sort_dict[key] = sort_dict[key] * -1\n    return sort_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict_sorted = dict()\n    for key in dict1:\n        value = dict1[key]\n        if value not in dict_sorted.keys():\n            dict_sorted[value] = []\n        dict_sorted[value].append(key)\n    for value in dict_sorted.keys():\n        dict_sorted[value].sort()\n    return dict_sorted\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #declare a empty dictionary to store the value\n    #in the order of the dictionary\n    #ex: {'p': 1, 'd': 2, 'o': 3}\n    value_order=dict1.values()\n    #print(value_order)\n    value_order=sorted(value_order)\n    #print(value_order)\n    #print(value_order)\n    return value_order\n    \ndef sort_dictionary(dict1):\n    '''\n    Write a function to sort a dictionary by key.\n    '''\n    #declare a empty dictionary to store the value\n    #in the order of the dictionary\n    #ex: {'p': 1, 'd': 2, 'o': 3}\n    key_order=dict1.keys()\n    #print(key_order)\n    key_order=sorted(key_order)\n    #print(key_order)\n    return key_order\n    \ndef reverse(my_list):\n    '''\n    Write a function that returns a copy of a list\n    in reverse order.\n    '''\n    #declare a empty list to store the list\n    #in the order of the list\n    #ex: [1, 2, 3, 4, 5, 6]\n    reverse_list=[]\n    for i in range(len(my_list)):\n        #print(i)\n        #print(my_list[i])\n        reverse_list.append(my_list[len(my_list)-i-1])\n    #print(reverse_list)\n    return reverse_list\n    \ndef remove_empty_list(my_list):\n    '''\n    Write a function to remove empty lists\n    from a list of integers.\n    '''\n    #declare a empty list to store the list\n    #in the order of the list\n    #ex: [1, 2, 3, 4, 5, 6]\n    empty_list=[]\n    for i in range(len(my_list)):\n        #print(i)\n        #print(my_list[i])\n        if my_list[i]=='':\n            #print(empty_list)\n            #print(my_list)\n            my_list.remove(my_list[i])\n            #print(my_list)\n            #print(empty_list)\n    return my_list\n    \ndef create_string_from_list(my_list):\n    '''\n    Write a function that returns a string \n    containing the list elements.\n    '''\n    #declare a empty string to store the string\n    #in the order of the list\n    #ex: 'p', 'd', 'o'\n    string_to_return=''\n    #print(my_list)\n    #print(len(my_list))\n    #print(my_list[0])\n    for i in range(len(my_list)):\n        #print(i)\n        #print(my_list[i])\n        string_to_return+=my_list[i]\n    #print(string_to_return)\n    return string_to_return\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Python's max function returns largest value\n    # Python's min function returns smallest value\n    # Python's sum function returns the sum of all the numbers in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    sum_num = sum(nums)\n    if max_num < min_num:\n        return max_num, min_num\n    else:\n        return sum_num, max_num\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # collect all the element and store them in the array\n    array = []\n    for i in range(0, len(nums)):\n        array.append(nums[i])\n    # sort the array\n    array.sort()\n    # find the smallest and largest element\n    smallest = array[0]\n    for i in range(1, len(array)):\n        if smallest < array[i]:\n            smallest = array[i]\n    largest = array[len(array)-1]\n    # return the sum\n    return smallest + largest\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    \n    nums_array = sorted(nums, reverse=True)\n    \n    return (nums_array[0] + nums_array[-1])\n    \n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for x in nums:\n        if x > largest:\n            largest = x\n        elif x < smallest:\n            smallest = x\n    return (largest + smallest)\n    \ndef count_elements(nums,x):\n    '''\n    Count number of elements in a given array whose value is x.\n    '''\n    count = 0\n    for x_n in nums:\n        if x_n == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    small_sum = 0\n    big_sum = 0\n    for num in nums:\n        small_sum += num\n        big_sum = max(small_sum, num)\n    return big_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums_len = len(nums)\n    max_val = max(nums)\n    min_val = min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    # define the variables\n    big_num = -10**9\n    small_num = 10**9\n    \n    # loop through the array\n    for n in nums:\n        # if the number is the largest, then update it\n        if n > big_num:\n            big_num = n\n        \n        # if the number is the smallest, then update it\n        if n < small_num:\n            small_num = n\n    \n    return big_num + small_nu"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    biggest = sum(nums)\n    smallest = sum(nums[:])\n    for num in nums:\n        if num > biggest:\n            biggest = num\n        if num < smallest:\n            smallest = num\n    return biggest + smallest\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string_lower = string.lower()\n    return string_lower\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.islower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Split the string into a list of words\n    words = string.split()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    try:\n        lower_string = string.lower()\n        return lower_string\n    except AttributeError:\n        print(\"No String was given. Please provide a string.\")\n        lower_string = input(\"Please provide a string: \")\n        lower_string = string.lower()\n        return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = string.lower()\n    return lower\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l = re.sub(r'[^A-Za-z0-9\\-]', '', str1)\n    return l\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-zA-Z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in range(0, len(str1)):\n        if str1[i].lower() == str1[i].lower():\n            continue\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    for char in str1:\n        if char.islower():\n            str2 += char\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    start = 0\n    end = len(str1)-1\n    while start <= end:\n        if str1[start].islower() and str1[end].isupper():\n            str1 = str1[:start] + str1[end].upper() + str1[start:end]\n            start += 1\n        elif str1[start].islower():\n            str1 = str1[:start] + str1[end]\n            start += 1\n        elif str1[end].isupper():\n            str1 = str1[:start] + str1[start:end]\n            end -= 1\n        else:\n            start += 1\n    return str1\n    \ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    start = 0\n    end = len(str1)\n    while start <= end:\n        if str1[start].isdigit():\n            str1 = str1[:start] + str1[start:start+len(str1[start])]\n            start += 1\n        else:\n            str1 = str1[:start] + str1[start:end]\n            end -= 1\n    return str1\n    \ndef normalize_name(name):\n    '''\n    Write a function that takes in a string and returns a string with all\n    uppercase characters replaced by lowercase.\n    '''\n    start = 0\n    end = len(name)\n    while start <= end:\n        if name[start].isupper():\n            name = name[:start] + name[start:start+len(name[start])]\n            start += 1\n        elif name[end].isupper():\n            name = name[:start] + name[start:end]\n            end -= 1\n        else:\n            start += 1\n    return name\n    \ndef get_all_domains(str1):\n    '''\n    Write a function that returns a string of all the domains from a given\n    string.\n    '''\n    domains = []\n    start = 0\n    end = len(str1)\n    while start <= end:\n        if str1[start].isupper():\n            start += 1\n        elif str1[end].isupper():\n            domains.append(str1[:start] + str1[start:end])\n            start += 1\n        else:\n            end -= 1\n    return ','.join(domains)\n    \ndef get_domains(str1):\n    '''\n    Write a function that returns a string of all the domains from a given\n    string.\n    '''\n    domains = []\n    start = 0\n    end = len(str1)\n    while start <= end:\n        if str1[start].isupper():\n            start += 1\n        elif str1[end].isupper():\n            domains.append(str1[:start] + str1[start:end])\n            start += 1\n        else:\n            end -= 1\n    return ','.join(domains)\n    \ndef get_domain_suffix(str1):\n    '''\n    Write a function that returns the suffix of a given string.\n    '''\n    return str1[str1.index(str1[-1])+1:]\n    \ndef get_domains_from_str(str1):\n    '''\n    Write a function that returns a string of all the domains from a given\n    string.\n    '''\n    domains = []\n    start = 0\n    end = len(str1)\n    while start <= end:\n        if str1[start].isupper():\n            start += 1\n        elif str1[end].isupper():\n            domains.append(str1[:start] + str1[start:end])\n            start += 1\n        else:\n            end -= 1\n    return ','.join(domains)\n    \ndef get_domains_from_str2(str1):\n    '''\n    Write a function that returns a string of all the domains from a given\n    string.\n    '''\n    return ','.join(re.findall('\\w+', str1))\n    \ndef remove_domain(str1):\n    '''\n    Write a function that returns a string of all the domains from a given\n    string.\n    '''\n    domains = []\n    start = 0\n    end = len(str1)\n    while start <= end:\n        if str1[start].isupper():\n            if str1[start].isupper():\n                domains.append(str1[:start] + str1[start:end])\n            else:\n                domains.append(str1[:start] + str1[start:end].replace('.', ''))\n            start += 1\n        elif str1[end].isupper():\n            domains.append(str1[:start] + str1[start:end].replace('.', ''))\n            start += 1\n        else:\n            end -= 1\n    return ','.join(domains)\n    \ndef get_domains_from_str3(str1):\n    '''\n    Write a function that returns a string of all the domains from a given\n    string.\n    '''\n    domains = []\n    start = 0\n    end = len(str1)\n    while start <= end:\n        if str1[start].isupper():\n            if str1[start].isupper():\n                domains.append(str1[:start] + str1[start:end])\n            else:\n                domains.append(str1[:start] + str1[start:end].replace('.', ''))\n            start += 1\n        elif str1[end].isupper():\n            domains.append(str1[:start] + str1[start:end].replace('.', ''))\n            start += 1\n        else:\n            end -= 1\n    return ','.join(domains)\n    \ndef get_domains_from_str4(str1):\n    '''\n    Write a function that returns a string of all the domains from a given\n    string.\n    '''\n    domains = []\n    start = 0\n    end = len(str1)\n    while start <= end:\n        if str1[start].isupper():\n            if str1[start].isupper():\n                domains.append(str1[:start] + str1[start:end])\n            else:\n                domains.append(str1[:start] + str1[start:end].replace('.', ''))\n            start += 1\n        elif str1[end].isupper():\n            domains.append(str1[:start] + str1[start:end].replace('.', ''))\n            start += 1\n        else:\n            end -= 1\n    return ','.join(domains)\n    \ndef get_domains_from_str5(str1):\n    '''\n    Write a function that returns a string of all the domains from a given\n    string.\n    '''\n    domains = []\n    start = 0\n    end = len(str1)\n    while start <= end:\n        if str1[start].isupper():\n            if str1[start].isupper():\n                domains.append(str1[:start] + str1[start:end])\n            else:\n                domains.append(str1[:start] + str1[start:end].replace('.', ''))\n            start += 1\n        elif str1[end].isupper():\n            domains.append(str1[:start] + str1[start:end].replace('.', ''))\n            start += 1\n        else:\n            end -= 1\n    return ','.join(domains)\n    \ndef get_domains_from_str6(str1):\n    '''\n    Write a function that returns a string of all the domains from a given\n    string.\n    '''\n    domains = []\n    start = 0\n    end = len(str1)\n    while start <= end:\n        if str1[start].isupper():\n            if str1[start].isupper():\n                domains.append(str1[:start] + str1[start:end])\n            else:\n                domains.append(str1[:start] + str1[start:end].replace('.', ''))\n            start += 1\n        elif str1[end].isupper():\n            domains.append"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans(dict.fromkeys(\"abcdefghijklmnopqrstuvwxyz\"))))\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans(\"\",\"\",str.punctuation))\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase characters from a given string.\n    '''\n    return str1.translate(str.maketrans('','',str.uppercase))\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'([^A-Z])([A-Z])', r'\\1 \\2', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # variable to store the upper and lowercase\n    # strings\n    lower_str = \"\"\n    upper_str = \"\"\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num = num * 10 + i\n    return num\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    lst = []\n    for i in range(len(n)) :\n        if n[i] >= '0' and n[i] <= '9' :\n            lst.append(n[i])\n    return lst[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    ans = 0\n    for i in range(len(n)) :\n        if n[i] == \"0\" :\n            ans += 1\n        else :\n            ans -= 1\n    return ans\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in range(n) :\n        print(i,end ='')\n    print()\n    \n    n = n - 1\n    while n > 0 :\n        print(n,end ='')\n        n = n - 1\n    print()\n    \n    num = int(input())\n    x = num\n    if x == 0 :\n        return 0\n    \n    while num > 0 :\n        if (num % 10) == 0 :\n            return num\n        \n        num = num // 10\n        \n    return -1\n        \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10:\n        return n\n    else :\n        l = []\n        for i in range(0,n):\n            if n%10 == i%10:\n                l.append(i)\n        return l[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    elif n < 0 :\n        return -1\n    elif n == 1 :\n        return 1\n    elif n == 2 :\n        return 0\n    else :\n        return n % 10\n        \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 0 : \n        n = n // 10\n        if n == 0 : \n            break\n        elif n < 10 : \n            return n\n        else : \n            return n%10\n    return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    return n%10\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    s = \"\"\n    for x in list:\n        if x%2==0:\n            s = s + str(x) + \",\"\n    return s[0:len(s)-1]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_of_int_list = list.copy()\n    for i in range(len(list_of_int_list)):\n        if list_of_int_list[i]%2!=0:\n            list_of_int_list[i] = list_of_int_list[i] + 1\n    return list_of_int_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    newlist = []\n    for x in range(len(list)):\n        if list[x] % 2!= 0:\n            newlist.append(list[x])\n    return newlist\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for x in list:\n        if x % 2!= 0:\n            odd.append(x)\n    return odd\n    \ndef Palindrome(x):\n    '''\n    Write a python function which takes a positive number and returns whether it is a palindrome or not.\n    '''\n    string = str(x)\n    string = string[::-1]\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    even_lst = []\n    for i in list: \n        if i % 2!= 0: \n            odd_lst.append(i)\n        else: \n            even_lst.append(i)\n    return odd_lst, even_lst\n    \ndef main():\n    '''\n    Write a python function which takes a list of integers and returns the largest and smallest numbers.\n    '''\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for element in list:\n        if element % 2 == 0:\n            odds.append(element)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if (i % 2)!= 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_even_list = []\n    for item in list:\n        if item%2 == 0:\n            odd_even_list.append(item)\n    return odd_even_list\n    \nprint(Split([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = []\n    new_list = list[:]\n    # even number in the new list \n    for i in range(0, len(new_list)):\n        if new_list[i] % 2!= 0:\n            new_list.pop(i)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum + i**3\n    print(\"The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers is: \" + str(sum))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result=0\n    for i in range(0,n+1):\n        result+=i**3\n    print(result)\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    num_1 = 0\n    num_2 = 0\n    for i in range(1, n + 1):\n        num_1 += i ** 3\n        num_2 += i ** 2\n    print(num_1 - num_2)\ndifference(5)\ndef merge(n, m) :\n    '''\n    Write a python function to merge two sorted arrays into a new sorted array.\n    '''\n    new_array = []\n    a = 0\n    b = 0\n    for i in range(n):\n        if a < m:\n            new_array.append(a)\n            a += 1\n        else:\n            new_array.append(b)\n            b += 1\n    new_array += [0 for i in range(m - a)]\n    for i in range(n, m):\n        new_array[i] = i\n    print(new_array)\n    return new_array\n    \nmerge(5, 5)\ndef intersection(n, m) :\n    '''\n    Write a python function to find the intersection of two sorted arrays.\n    '''\n    new_array = []\n    a = 0\n    b = 0\n    for i in range(n):\n        if a < m:\n            new_array.append(a)\n            a += 1\n        else:\n            new_array.append(b)\n            b += 1\n    print(new_array)\n    return new_array\nintersection(5, 5)\ndef union(n, m) :\n    '''\n    Write a python function to union a set of two sets into one set.\n    '''\n    new_array = []\n    a = 0\n    b = 0\n    for i in range(n):\n        if a < m:\n            new_array.append(a)\n            a += 1\n        else:\n            new_array.append(b)\n            b += 1\n    print(new_array)\n    return new_array\nunion(5, 5)\ndef intersection(n, m) :\n    '''\n    Write a python function to find the intersection of two sorted arrays.\n    '''\n    new_array = []\n    a = 0\n    b = 0\n    for i in range(n):\n        if a < m:\n            new_array.append(a)\n            a += 1\n        else:\n            new_array.append(b)\n            b += 1\n    print(new_array)\n    return new_array\nintersection(5, 5)\ndef print_stats(n, m) :\n    '''\n    Write a python function to print the number of each type of element in two sorted arrays.\n    '''\n    count = {}\n    for i in range(n):\n        count[i] = 0\n    for i in range(m):\n        count[i] += 1\n    print(count)\n    print(count)\n    \nprint_stats(5, 5)\ndef find_duplicate(n) :\n    '''\n    Write a python function to find the number of duplicates in a set.\n    '''\n    new_set = set(n)\n    print(len(new_set))\nfind_duplicate(set(range(0, 10)))\ndef count_occurences(n, m) :\n    '''\n    Write a python function to count occurrences of elements in two sets.\n    '''\n    new_set = set(n)\n    print(len(new_set))\n    print(len(new_set) % 2 == 0)\n    return len(new_set) % 2\ncount_occurences(set(range(0, 10)), 5)\ndef count_occurences2(n, m) :\n    '''\n    Write a python function to count occurrences of elements in two sets.\n    '''\n    new_set = set(n)\n    print(len(new_set) % 2 == 0)\n    return len(new_set) % 2\ncount_occurences2(set(range(0, 10)), 5)\ndef median(n) :\n    '''\n    Write a python function to find the median of the numbers in a sorted array.\n    '''\n    new_set = sorted(n)\n    print(new_set[len(new_set) // 2])\n    print(new_set[(len(new_set) // 2) - 1])\n    return new_set[len(new_set) // 2]\nmedian(set(range(0,10)))\ndef sort(n, m) :\n    '''\n    Write a python function to sort the set of non-negative numbers in a given array using the radix sort.\n    '''\n    new_set = []\n    for i in range(n):\n        new_set.append(i)\n    for i in range(1, m + 1):\n        for j in range(n):\n            if new_set[j] % i == 0:\n                new_set[j] = new_set[j] // i\n    print(new_set)\nsort(5, 5)\ndef reverse_array(n) :\n    '''\n    Write a python function to reverse the array.\n    '''\n    for i in range(0, n):\n        temp = n[i]\n        n[i] = n[n.__len__() - 1]\n        n[n.__len__() - 1] = temp\n    print(n)\nreverse_array(3)\ndef filter(n, m) :\n    '''\n    Write a python function to return the elements of a set where the second to last element of a set is not greater than m.\n    '''\n    new_set = set(n)\n    print(new_set)\n    for i in range(0, n.__len__()):\n        if m > n[i]:\n            new_set.remove(n[i])\n    print(new_set)\nfilter(set(range(0, 10)), 5)\ndef filter_no_duplicate(n) :\n    '''\n    Write a python function to return the elements of a set where the second to last element of a set is not greater than m.\n    '''\n    new_set = set(n)\n    for i in range(0, n.__len__()):\n        if n[i] not in new_set:\n            new_set.remove(n[i])\n    print(new_set)\nfilter_no_duplicate(set(range(0, 10)))\ndef filter_range(n, m) :\n    '''\n    Write a python function to return the elements of a set where the first element of a set is not greater than m.\n    '''\n    new_set = set(n)\n    for i in range(0, n.__len__()):\n        if n[i] not in new_set:\n            new_set.remove(n[i])\n    print(new_set)\nfilter_range(set(range(0, 10)), 5)\ndef filter_out_all_numbers(n) :\n    '''\n    Write a python function to return the elements of a set where the first element of a set is not greater than m.\n    '''\n    new_set = set(n)\n    new_set.discard(n[0])\n    print(new_set)\nfilter_out_all_numbers(set(range(0, 10)))\ndef is_even(n) :\n    '''\n    Write a python function to return True if a given number is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    return False\nis_even(8)\ndef reverse_array(n) :\n    '''\n    Write a python function to reverse the array.\n    '''\n    for i in range(0, n.__len__()):\n        temp = n[i]\n        n[i] = n[n.__len__() - 1]\n        n[n.__len__() - 1] = temp\n    print(n)\nreverse_array(3)\ndef filter_two_elements(n) :\n    '''\n    Write a python function to return the elements of a set where the second to last element of a set is not greater than m.\n    '''\n    new_set = set(n)\n    for i in range(0, n.__len__()):\n        if n[i] not in new_set:\n            new_se"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n :\n        sum += i**3\n        i += 1\n    return sum \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        s += i**3\n    return s\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Your code here\n    \n    # Commented out IPython magic to ensure Python compatibility.\n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import os\n    os.system(\"ls\")\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pavlov/Documents/Courses/2021/Spring20/Agrs_Python_Tasks\n    import math\n    \n    sum = 0\n    for i in range(1,n+1) :\n        sum += math.pow(i,3)\n    print(sum)\n    \n    # %cd /Users/pa"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 0 :\n        return 0\n    result = []\n    for i in range(n) :\n        result.append(i**3)\n    return result[0] - result[1] - result[2] + result[3] + result[4] - result[5] - result[6] - result[7] - result[8]\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    #Conversion of input to integer\n    n = int(input(\"Enter n value: \"))\n    \n    #Calling python function\n    def value_sum(n) :\n    \n        value_sum = 0\n        for i in range(1,n+1) :\n            value_sum += i**3\n        \n        return value_sum\n    \n    #Value_sum(n) = sum of cubes of the first n natural numbers\n    print(\"The difference between sum of cubes of the first n natural numbers : \", value_sum(n))\n    \n    \n    def cube_diff(n) :\n    \n        cube_diff = 0\n        for i in range(1,n+1) :\n            cube_diff += i**3\n        \n        return cube_diff\n    \n    #Cube_diff(n) = sum of cubes of the first n natural numbers\n    print(\"The cube difference between sum of cubes of the first n natural numbers : \", cube_diff(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    #define a function to calculate the sum of cubes of the first n natural numbers\n    def sum_of_cubes_of_first_n_natural_numbers(n) :\n        sum_of_cubes_of_first_n_natural_numbers = 0\n        for i in range(1, n+1) :\n            sum_of_cubes_of_first_n_natural_numbers += i**3\n        print (\"Sum of cubes of the first\", n, \"natural numbers = \", sum_of_cubes_of_first_n_natural_numbers)\n        \n    #calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes_of_first_n_natural_numbers()\n    \n    #call function to calculate the sum of cubes of the first n natural numbers\n    difference(3)\n    \n    #call function to calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes_of_first_n_natural_numbers()\n    \n    #call function to calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes_of_first_n_natural_numbers()\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # sum of cubes\n    s = 0\n    for i in range(n):\n        s += i**3\n    print(s)\n    # sum of cubes\n    s = sum([i**3 for i in range(n)])\n    print(s)\n    # sum of cubes\n    s = sum([i**3 for i in range(n) if i % 3 == 0])\n    print(s)\n    # sum of cubes\n    s = sum([i**3 for i in range(n) if i % 3!= 0])\n    print(s)\n    # sum of cubes\n    s = sum([i**3 for i in range(n) if i % 3 == 0 and i % 3!= 0])\n    print(s)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Write your code here.\n    odd=0\n    for i in range(len(A)-2):\n        if A[i]!=A[i+1] and A[i]!=A[i+2]:\n            odd+=1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count=0\n    #build the permutation of A as A1,A2,...,AN\n    A1=A[0::2]\n    A2=A[1::2]\n    #compute the result of xor operation on the two permutations\n    for i in range(len(A1)) :\n        for j in range(len(A2)) :\n            if A1[i]^A2[j]!=0 :\n                odd_count+=1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    Odd_Pairs = 0\n    for i in range(0,N) :\n        if A[i] & 1 == 1 :\n            Odd_Pairs += 1\n    return Odd_Pairs\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1) : \n        if (A[i]^A[i+1]==1) : \n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] & A[j] == 0:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if A[i] & A[j] == 0 : \n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(N-2):\n        for j in range(i+1,N-1):\n            if A[i]^A[j]!=0:\n                odd_count+=1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(0,N) :\n            if A[i][j] == 'O' :\n                if (i!= j) :\n                    count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    P = 0\n    for i in range(N):\n        for j in range(N):\n            if(A[i] & A[j])!=A[i] and A[i]!=A[j] :\n                if (A[i]&A[j])%2!=0:\n                    P=P+1\n                else:\n                    break\n    return P\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(N-1) :\n        for j in range(i+1,N) :\n            if (A[i]!= A[j] and A[i] == A[j]) or (A[i]!= A[j] and A[j] == A[i]) :\n                print (i,j)\n                return\n    print (-1)\nfind_Odd_Pair(A,N"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string[0].isupper():\n        string = string[1:] + string[0].lower()\n    else:\n        string = string[1:] + string[0].upper()\n    return string\n    "
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char =='':\n            new_string += '-'\n        elif char =='':\n            new_string +=''\n        elif char == '\\n':\n            new_string += '-'\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new = ''\n    for char in string:\n        if char =='':\n            new += '_'\n        else:\n            new += char\n    return new\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_str = ''\n    for char in string:\n        if char.islower():\n            new_str += char.upper()\n        else:\n            new_str += char.lower()\n    return new_str\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    c = string.count(\" \")\n    for c in string:\n        if c.isupper():\n            string = string.replace(c, \"\")\n            print(c)\n        else:\n            print(c)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    for char in string:\n        if char.isupper():\n            char = char.lower()\n        print(char)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string_to_toggle = []\n    for char in string:\n        if char.isupper():\n            string_to_toggle.append(\"M\")\n        else:\n            string_to_toggle.append(\"f\")\n    return \"\".join(string_to_toggle)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    if string == None or string == \"\":\n        result = string\n    else:\n        for char in string:\n            if char.islower():\n                result += char.upper()\n            elif char.isupper():\n                result += char.lower()\n            else:\n                result += char\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Create a dictionary to store the values\n    dictionary = {}\n    # Iterate through the string\n    for char in string:\n        # If the char is a number add it to the dictionary\n        if char.isnumeric():\n            dictionary[char] = dictionary.get(char, 0) + 1\n    # Print the dictionary\n    for char in dictionary:\n        print(char, dictionary[char])\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Hint: Don't worry about a string being empty.\n    # Check if the string is empty\n    if not string:\n        return\n    # Check if the string is empty\n    if len(string) == 0:\n        return string\n    # Check if the string has any duplicate characters\n    # - We'll check for both the characters and all the possible characters\n    # - We're not checking if they're all the same characters\n    # - As we have only one character we're not checking if they're the same\n    if len(set(string)) == len(string):\n        # We're not checking if they're the same characters\n        return string\n    else:\n        # We're checking if they're all the same characters\n        return string[0].upper() + toggle_string(string[1:])\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if (type(n1) is not int or n1 < 0 or type(n2) is not int or n2 < 0):\n        raise ValueError('n1 and n2 must be integers')\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return (sum(str(n1 - n2)) % 10)"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digits = set(str(n1))\n    digits.update(str(n2))\n    return sum(int(d) - int(e) for d, e in zip(digits, digits[1:]) if d!= e)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = n1\n    d2 = n2\n    if n1 < n2:\n        n1, n2 = n2, n1\n    if n1 < 10:\n        d1 = int(n1)\n    if n2 < 10:\n        d2 = int(n2)\n    sum = 0\n    for i in range(d1, d2+1):\n        sum += int(str(i)[-1])\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # list of all the numbers to compare, in order\n    digits = [n1, n2]\n    # check if the value of the list is 0, if it is zero return 0\n    if n1 == 0:\n        return 0\n    # if the value of the list is 1, it means that it is 1 digit higher than the number\n    if n2 == 0:\n        return 0\n    # sum of all the digits difference\n    return digits[n2] - digits[n1-1]\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    a = str(abs(n1 - n2))\n    diffs = []\n    for x in range(0, len(a)):\n        diffs.append(a[x] - a[x+1])\n    return sum(diffs)\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return int(str(n1))\n    \n    if n1 > 10:\n        return -1\n    \n    if n2 > 10:\n        return -1\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum1, sum2 = 0, 0\n    \n    for digit1 in n1:\n        sum1 += int(digit1) - int(n2[digit1])\n    \n    for digit2 in n2:\n        sum2 += int(digit2) - int(n1[digit2])\n        \n    return abs(sum1 - sum2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = 0\n    d2 = 0\n    while n1!= 0:\n        d1 = d1 + n1 % 10\n        n1 = n1 // 10\n    while n2!= 0:\n        d2 = d2 + n2 % 10\n        n2 = n2 // 10\n    return d1 - d2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return abs(n1 - n2)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_sum = 0\n    l = 0\n    r = 1\n    while r < size:\n        if l == r:\n            sub_sum += a[l]\n        elif a[l] > a[r]:\n            sub_sum += a[l]\n            l += 1\n        else:\n            sub_sum += a[r]\n            r += 1\n    return sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_index = -1\n    for i in range(0, len(a)):\n        max_sum += a[i]\n        if max_sum > size:\n            max_sum = a[i]\n            max_index = i\n    return max_sum, max_index\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #initialize empty array\n    max_sub_array = []\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    \n    s = 0\n    \n    for i in range(size-1):\n        s += a[i]\n    \n    return s"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # the array that will store the values\n    max_array = [0] * size\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    ans = float('-inf')\n    \n    start = 0\n    end = size\n    \n    # print(start)\n    # print(end)\n    \n    while(start <= end):\n        \n        # print(start,end)\n        \n        if(a[start] == 0):\n            # print('Start,start:',start,start)\n            ans = max(ans,start)\n            \n            start+=1\n            \n        if(a[end] == 0):\n            # print('End,end:',end,end)\n            ans = max(ans,end-start)\n            \n            end-=1\n            \n        if(end < size):\n            \n            if(a[end]!= 0):\n                # print('end:',end)\n                ans = max(ans,(end-start)+a[end])\n                \n                # print(ans)\n                \n                end-=1\n                \n    return ans\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    l = len(a)\n    max_ind = 0\n    start = 0\n    end = 0\n    s = set()\n    for i in range(l):\n        s.add(a[i])\n        if len(s) == size:\n            s.remove(a[i])\n            if a[i] > max_sum:\n                max_sum = a[i]\n                max_ind = i\n                start = i\n    s.add(a[max_ind])\n    return max_sum, max_ind, s, start\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Set up the sublist with the largest sum\n    max_sum = -9999\n    max_sub_list = []\n    # Loop through the array and max sum is saved.\n    for i in range(0, size):\n        # Check if we have reached the end of the array, if so we go on to the next iteration.\n        if i == size - 1:\n            return max_sum\n        # Check if the current element is positive. If yes we add the current element to the sublist.\n        if a[i] > 0:\n            max_sum += a[i]\n            max_sub_list.append(a[i])\n            # Check if the current element is the largest element, if yes we remove the current element.\n            if max_sum > max_sum:\n                max_sum = max_sum - max_sub_list[-1]\n                # Remove the current element from the list so that we can check for another element.\n                max_sub_list.pop()\n    return max_sum\n    "
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    if len(test_tup2) < len(test_tup1):\n        test_tup1, test_tup2 = test_tup1, test_tup2\n    tuple_a = set(test_tup1)\n    tuple_b = set(test_tup2)\n    for element in tuple_a.union(tuple_b):\n        if element not in test_tup1:\n            test_tup1.append(element)\n    test_tup1.sort()\n    for element in tuple_b.union(tuple_a):\n        if element not in test_tup2:\n            test_tup2.append(element)\n    test_tup2.sort()\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #declaring a list to store the elements of the tuple.\n    tup1 = []\n    #declaring a list to store the elements of the tuple.\n    tup2 = []\n    #declaring a flag variable to keep track of if the elements of the tuples were entered or not.\n    flag = False\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return tuple()\n    \n    if test_tup1[0] < test_tup2[0]:\n        test_tup1 = (test_tup1[0], test_tup1[1], test_tup1[2], test_tup1[3], test_tup1[4], test_tup1[5])\n    else:\n        test_tup2 = (test_tup2[0], test_tup2[1], test_tup2[2], test_tup2[3], test_tup2[4], test_tup2[5])\n        \n    for item in test_tup1:\n        for value in test_tup2:\n            if item < value:\n                break\n            if item > value:\n                break\n        if item < value:\n            test_tup2.remove(item)\n            test_tup2.append(value)\n            return (test_tup1, test_tup2)\n    return test_tup1\n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return tuple()\n    \n    if test_tup1[0] > test_tup2[0]:\n        test_tup1 = (test_tup1[0], test_tup1[1], test_tup1[2], test_tup1[3], test_tup1[4], test_tup1[5])\n    else:\n        test_tup2 = (test_tup2[0], test_tup2[1], test_tup2[2], test_tup2[3], test_tup2[4], test_tup2[5])\n        \n    intersection_elements = []\n    \n    for item in test_tup1:\n        for value in test_tup2:\n            if item < value:\n                break\n            if item > value:\n                break\n        if item < value:\n            intersection_elements.append(item)\n            \n    return tuple(intersection_elements)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = test_tup1[0]\n    tup2 = test_tup2[0]\n    test_tup3 = []\n    \n    if tup1 < tup2:\n        test_tup3 = tup1\n        tup1 = tup2\n        tup2 = test_tup3\n    \n    for i in range(0, len(tup1)):\n        test_tup3.append(tup1[i])\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize the result to be a new tuple that contains the results of union operation\n    result = tuple()\n    # loop through both tuples and append the elements of union operation\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] + test_tup2[i])\n    # sort result using sort\n    result = sorted(result)\n    return result\n    \ndef intersection(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize the result to be a new tuple that contains the results of intersection operation\n    result = tuple()\n    # loop through both tuples and append the elements of intersection operation\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] & test_tup2[i])\n    # sort result using sort\n    result = sorted(result)\n    return result\n    \ndef main():\n    test_tup1 = tuple()\n    test_tup2 = tuple()\n    # read the file and store the content in a list\n    f = open(\"input.txt\", \"r\")\n    # Read the content and store it in a list\n    content = f.readlines()\n    f.close()\n    for i in range(len(content)):\n        content[i] = content[i].strip(\"\\n\")\n        content[i] = content[i].split()\n        # check if the content is empty\n        if content[i] == []:\n            print(\"There is no matching element!\")\n            return\n        # check if the content is a tuple\n        if type(content[i]) == tuple:\n            # if the content is a tuple, parse the content and store it in a tuple\n            test_tup1 = tuple(content[i][:])\n            test_tup2 = tuple(content[i][])\n        else:\n            print(\"The content is not a tuple\")\n            return\n    # check if the test_tup1 or test_tup2 is empty\n    if test_tup1 == [] or test_tup2 == []:\n        print(\"There is no matching element!\")\n        return\n    # call the function\n    print(\"The union: \" + str(union(test_tup1, test_tup2)))\n    print(\"The intersection: \" + str(intersection(test_tup1, test_tup2)))\n    \nmain()"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return union_elements(test_tup2, test_tup1)\n    elif len(test_tup1) < len(test_tup2):\n        return union_elements(test_tup1, test_tup2)\n    elif len(test_tup1) == len(test_tup2):\n        return tuple(sorted(set(test_tup1) | set(test_tup2)))\n    else:\n        return tuple(sorted(set(test_tup2) | set(test_tup1)))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    i, j = 0, 0\n    res = []\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            res.append(test_tup1[i])\n            i += 1\n        else:\n            res.append(test_tup2[j])\n            j += 1\n    while i < len(test_tup1):\n        res.append(test_tup1[i])\n        i += 1\n    while j < len(test_tup2):\n        res.append(test_tup2[j])\n        j += 1\n    return res\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    result = ()\n    for element in test_tup1:\n        result += element,\n    for element in test_tup2:\n        result += element,\n    return sorted(result)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup_1 = tuple(test_tup1)\n    tup_2 = tuple(test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #Write your code here\n    return tuple(sorted(list(set(test_tup1) | set(test_tup2))))\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if lst[i] > lst[j]:\n                count += 1\n            else:\n                continue\n            if count > max_len:\n                max_len = count\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    if len(lst)==1:\n        return 1\n    max_length=1\n    for i in range(1,len(lst)):\n        if len(lst[i])>len(lst[i-1]):\n            max_length+=1\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    if len(lst)==1:\n        return len(lst[0])\n    # print(lst)\n    # print(len(lst[0]))\n    length_first = len(lst[0])\n    length_second = len(lst[1])\n    # print(length_first)\n    # print(length_second)\n    for i in range(2,len(lst)):\n        if len(lst[i]) > length_first:\n            length_first = len(lst[i])\n        if len(lst[i]) > length_second:\n            length_second = len(lst[i])\n    # print(length_first)\n    # print(length_second)\n    return max(length_first, length_second)\n    \ndef Find_Count_Values(lst):\n    '''\n    Write a python function to count the number of values in a list.\n    '''\n    if not lst:\n        return 0\n    count = 0\n    for i in lst:\n        count += 1\n    return count\n    \ndef Remove_Repeated_Values(lst):\n    '''\n    Write a python function to remove the duplicates in a list.\n    '''\n    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst\n    unique = []\n    for i in lst:\n        if i not in unique:\n            unique.append(i)\n    return unique\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    '''\n    mylist = [1, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2]\n    newlist = [1, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1]\n    max = 0\n    count = 0\n    for i in range(0, len(mylist)):\n        for j in range(0, len(newlist)):\n            if mylist[i] == newlist[j]:\n                count += 1\n                if count > max:\n                    max = count\n    print(max)\n    '''\n    max_length = 0\n    count = 0\n    for i in range(0, len(lst)):\n        if lst[i]!= 0:\n            count += 1\n        if count > max_length:\n            max_length = count\n            print(max_length)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    last_pos = 0\n    current_pos = 0\n    while last_pos < len(lst):\n        current_pos += 1\n        while current_pos < len(lst) and last_pos!= current_pos:\n            current_pos += 1\n        if current_pos - last_pos > max_length:\n            max_length = current_pos - last_pos\n        last_pos = current_pos\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    for i in range(len(lst) - 1):\n        for j in range(i, len(lst)):\n            if lst[i] == lst[j] and j - i + 1 > len(lst[i + 1:]):\n                return j - i + 1\n    return -1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # store the longest length of sublists as the min of lengths\n    longest = 0\n    # iterate through the elements of the lst\n    for i in range(0, len(lst)):\n        # check the sublist length\n        if len(lst[i]) > longest:\n            longest = len(lst[i])\n        # if the sublist is longer than the longest, make the loop\n        if longest > len(lst[i]):\n            longest = len(lst[i])\n    # return the longest sublist\n    return longest\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        lst_copy = []\n        for i in range(len(lst)):\n            if i!= 0 and lst[i] == lst[i-1]:\n                lst_copy.append(lst[i])\n            elif lst[i] in lst[i+1:]:\n                return Find_Max_Length(lst[i:])+1\n            else:\n                lst_copy.append(lst[i])\n        return len(lst_copy)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # i: index, j: size of the sublist\n    # find the index of the largest element\n    # in the sublist, we have to use.append, to prevent duplicate values\n    # in an array, therefore we have to go through the list twice,\n    # in this way the first sublist element is the longest and the second element is the size of the longest sublist\n    \n    # find the max length of the sublist\n    if len(lst) == 1:\n        return len(lst)\n    else:\n        return max(Find_Max_Length(lst[1:]), Find_Max_Length(lst[:-1]))\n    \n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r\"\\$\\d+\", text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text.replace('\"','').replace('(','').replace(')','').split(',')\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = re.sub(r'^\\\"', '', text)\n    text = re.sub(r'\\\"$', '', text)\n    # text = re.sub(r'\\s+','', text)\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    s = re.findall(r'\\([^()]*?\\)', text)\n    for i in s:\n        text = text.replace(i, '')\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    value = re.findall(r'\\'\\w+\\'', text)\n    if len(value)!= 0:\n        value = value[0]\n    value = value.replace(\"\\\"\", \"\")\n    return value\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    while '\"' in text:\n        if text.index('\"') < text.index(\"'\"):\n            return text[text.index('\"') + 1:text.index('\"')].strip()\n        else:\n            return text[text.index('\"') + 1:].strip()\n    else:\n        return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = re.sub('\\'' + \"\\\"\" + \"':(\\w*)\\}\",\"\\g<1>\",text)\n    text = re.sub('\\'\" + \"\\\"\" + \"':(\\w*)\\}\",\"\\g<1>\",text)\n    text = re.sub('[\\n]', \"\", text)\n    text = text.replace(\"'\", \"\")\n    text = text.replace(\"[\", \"\")\n    text = text.replace(\"]\", \"\")\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    output = []\n    text = re.sub(r'(?<=\\n)\\'.*?(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\\"]', '', text)\n    text = re.sub(r'(?<=\\n)[\\'\\']', '', text)\n    text = re.sub(r'(?<=\\n)[\\'\\]].*?(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\\"]', '', text)\n    text = re.sub(r'(?<=\\n)[\\'].*?(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\\"]', '', text)\n    text = re.sub(r'(?<=\\n)[\\'\\]]', '', text)\n    text = re.sub(r'(?<=\\n)[\\'\\]]', '', text)\n    text = re.sub(r'(?<=\\n)[\\\"]', '', text)\n    text = re.sub(r'(?<=\\n)[\\'].*?(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'].*?(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n)', '', text)\n    text = re.sub(r'(?<=\\n)[\\'](.+?)(?=\\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #Validate the string\n    if not isinstance(text, str):\n        raise TypeError('This function should receive a string')\n    elif not text:\n        raise ValueError('This function should receive a string')\n    #Check if the string is in one of the allowed characters\n    if not all([c in string.ascii_letters + string.digits for c in text]):\n        raise ValueError('This function should return a string of only letters and numbers.')\n    #Create an empty string\n    result = ''\n    #Find the beginning of the string\n    for i in range(len(text)-1):\n        if text[i] in string.ascii_letters or text[i] in string.digits:\n            result += text[i]\n        else:\n            return result\n    #Create a new string\n    return result + text[-1]\n    #End of the function\n    \ndef extract_dates(text):\n    '''\n    Write a function to extract dates from a string.\n    '''\n    #Validate the string\n    if not isinstance(text, str):\n        raise TypeError('This function should receive a string')\n    elif not text:\n        raise ValueError('This function should receive a string')\n    #Split the string\n    result = re.findall(r'\\d{1,2}\\-\\d{1,2}\\-\\d{1,2}', text)\n    #Create a new string\n    return result\n    #End of the function\n    \ndef extract_phone_numbers(text):\n    '''\n    Write a function to extract phone numbers from a string.\n    '''\n    #Validate the string\n    if not isinstance(text, str):\n        raise TypeError('This function should receive a string')\n    elif not text:\n        raise ValueError('This function should receive a string')\n    #Split the string\n    result = re.findall(r'\\(?\\d{2}\\)?[-\\d]{7}', text)\n    #Create a new string\n    return result\n    #End of the function\n    \ndef validate_date(date):\n    '''\n    Write a function to validate dates in a string.\n    '''\n    #Validate the string\n    if not isinstance(date, str):\n        raise TypeError('This function should receive a string')\n    elif not date:\n        raise ValueError('This function should receive a string')\n    #Check if the string is in one of the allowed dates\n    if not all([date_pattern in date for date_pattern in ['01-01-1999', '01-01-2000', '01-01-2019', '01-01-2020', '01-01-2021']]):\n        raise ValueError('This function should return a string of only dates.')\n    #Create an empty string\n    result = ''\n    #Split the string\n    for i in range(len(date)):\n        if date[i] in string.digits:\n            result += date[i]\n        else:\n            return result\n    #Create a new string\n    return result + date[-1]\n    #End of the function\n    \ndef validate_phone(phone):\n    '''\n    Write a function to validate phone numbers in a string.\n    '''\n    #Validate the string\n    if not isinstance(phone, str):\n        raise TypeError('This function should receive a string')\n    elif not phone:\n        raise ValueError('This function should receive a string')\n    #Split the string\n    result = re.findall(r'\\d{3}-\\d{3}-\\d{4}', phone)\n    #Create a new string\n    return result\n    #End of the function\n    \ndef validate_email(email):\n    '''\n    Write a function to validate email addresses in a string.\n    '''\n    #Validate the string\n    if not isinstance(email, str):\n        raise TypeError('This function should receive a string')\n    elif not email:\n        raise ValueError('This function should receive a string')\n    #Check if the string contains only numbers\n    if not all([char in string.digits for char in email]):\n        raise ValueError('This function should return a string of only numbers.')\n    #Create an empty string\n    result = ''\n    #Split the string\n    for i in range(len(email)):\n        if email[i] in string.digits:\n            result += email[i]\n        else:\n            return result\n    #Create a new string\n    return result + email[-1]\n    #End of the function\n    \ndef validate_user_name(name):\n    '''\n    Write a function to validate user names in a string.\n    '''\n    #Validate the string\n    if not isinstance(name, str):\n        raise TypeError('This function should receive a string')\n    elif not name:\n        raise ValueError('This function should receive a string')\n    #Check if the string contains only numbers\n    if not all([char in string.digits for char in name]):\n        raise ValueError('This function should return a string of only numbers.')\n    #Create an empty string\n    result = ''\n    #Split the string\n    for i in range(len(name)):\n        if name[i] in string.digits:\n            result += name[i]\n        else:\n            return result\n    #Create a new string\n    return result + name[-1]\n    #End of the function\n    \ndef validate_first_name(first_name):\n    '''\n    Write a function to validate first names in a string.\n    '''\n    #Validate the string\n    if not isinstance(first_name, str):\n        raise TypeError('This function should receive a string')\n    elif not first_name:\n        raise ValueError('This function should receive a string')\n    #Check if the string contains only numbers\n    if not all([char in string.digits for char in first_name]):\n        raise ValueError('This function should return a string of only numbers.')\n    #Create an empty string\n    result = ''\n    #Split the string\n    for i in range(len(first_name)):\n        if first_name[i] in string.digits:\n            result += first_name[i]\n        else:\n            return result\n    #Create a new string\n    return result + first_name[-1]\n    #End of the function\n    \ndef validate_last_name(last_name):\n    '''\n    Write a function to validate last names in a string.\n    '''\n    #Validate the string\n    if not isinstance(last_name, str):\n        raise TypeError('This function should receive a string')\n    elif not last_name:\n        raise ValueError('This function should receive a string')\n    #Check if the string contains only numbers\n    if not all([char in string.digits for char in last_name]):\n        raise ValueError('This function should return a string of only numbers.')\n    #Create an empty string\n    result = ''\n    #Split the string\n    for i in range(len(last_name)):\n        if last_name[i] in string.digits:\n            result += last_name[i]\n        else:\n            return result\n    #Create a new string\n    return result + last_name[-1]\n    #End of the function\n    \ndef validate_group_name(group_name):\n    '''\n    Write a function to validate group names in a string.\n    '''\n    #Validate the string\n    if not isinstance(group_name, str):\n        raise TypeError('This function should receive a string')\n    elif not group_name:\n        raise ValueError('This function should receive a string')\n    #Check if the string contains only numbers\n    if not all([char in string.digits for char in group_name]):\n        raise ValueError('This function should return a string of only numbers.')\n    #Create an empty string\n    result = ''\n    #Split the string\n    for i in range(len(group_name)):\n        if group_name[i] in string.digits:\n            result += group_name[i]\n        else:\n            return result\n    #Create a new string\n    return result + group_name[-1]\n    #End of the function\n    \ndef validate_group_num(group_num):\n    '''\n    Write a function to validate group numbers in a string"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Find the beginning and end of each quotation mark.\n    beginning = text.index('\"')\n    end = text.index('\"', beginning + 1)\n    # Extract the value.\n    return text[beginning + 1:end].strip()\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    list_of_pairs = []\n    #iterate through the list\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            #check if the elements are equal\n            if arr[i]!= arr[j]:\n                #if they are, add it to the list\n                list_of_pairs.append([arr[i], arr[j]])\n    #return the length of the list\n    return len(list_of_pairs)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d={}\n    count=0\n    # to store the numbers of pairs\n    for i in range(0,n):\n        for j in range(0,n):\n            if arr[i]==arr[j]:\n                if arr[i] in d.keys():\n                    d[arr[i]]+=1\n                else:\n                    d[arr[i]]=1\n    # looping over the dictionary to find the number of pairs\n    for i in d.values():\n        if i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    possible_pairs = 0\n    for i in range(0, len(arr) - 1): \n        for j in range(i+1, len(arr)): \n            if arr[i] == arr[j]: \n                possible_pairs = possible_pairs + 1\n    return possible_pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if not arr: \n        return 0\n    pairs = 0\n    n1 = n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j]:\n                if i+j < n:\n                    pairs += 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # your code goes here\n    if len(arr) < 2 or len(arr) % 2 == 0:\n        return 0\n    temp = arr[0]\n    i = 1\n    for j in range(len(arr)):\n        temp += arr[j]\n        if temp == arr[j]:\n            i += 1\n        else:\n            break\n    if i % 2 == 0:\n        return 2 * (i // 2) + 1\n    else:\n        return 2 * (i // 2)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr) < 2: \n        return 0\n    else: \n        count = 0\n        for i in range(len(arr)): \n            for j in range(i + 1, len(arr)): \n                if arr[i]!= arr[j] and arr[i]!= arr[j] and arr[i]!= arr[j] and arr[i]!= arr[j]: \n                    count += 1\n        return count"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                c += 1\n    return c\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if (arr[i]!= arr[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    \ndef main(): \n    '''\n    Execute the program.\n    '''\n    print('This program splits a word and character using split() function.')\n    print('Enter the word you want to split')\n    word = input('Word: ')\n    print('Enter the character you want to split: ')\n    char = input('Character: ')\n    print('The words you want to split into are:')\n    words = split(word)\n    print(words)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('Enter the word you want to add to the end of the word:')\n    word_add = input('Word: ')\n    print('Add it to the end of the word: ')\n    word_add_end = word_add + 'e'\n    print(word_add_end)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character that will be used to split the word:')\n    extra_char = input('Word: ')\n    extra_char = extra_char + '?'\n    print('Extra character: ')\n    print(extra_char)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add a specific character to the end of the word:')\n    word_end = word + 'e'\n    print('Add it to the end of the word: ')\n    word_end_add = word_end + 'a'\n    print(word_end_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + 'a'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?e'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word + '?'\n    print('Extra character: ')\n    print(word_end_extra_add)\n    print('This will print all of the characters and words you want to split into.')\n    for word in words:\n        print(word)\n    print('\\n')\n    print('This program will add an extra character to the end of the word:')\n    word_end_extra_add = word "
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.strip()\n    return word.split(\",\")\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # your code here\n    return \"\".join(char for char in word)\n    \ndef reverse(word): \n    '''\n    Write a python function to reverse a string.\n    '''\n    # your code here\n    return word[::-1]\n    \ndef only_digits(word): \n    '''\n    Write a python function to remove all non-digit characters in a string.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.isdigit()])\n    \ndef only_upper(word): \n    '''\n    Write a python function to remove all words containing all uppercase characters.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.isupper()])\n    \ndef only_lower(word): \n    '''\n    Write a python function to remove all words containing all lowercase characters.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.islower()])\n    \ndef only_capital(word): \n    '''\n    Write a python function to remove all words containing all capital characters.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.isalpha()])\n    \ndef only_num(word): \n    '''\n    Write a python function to remove all words containing all digits.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.isdigit()])\n    \ndef only_spaces(word): \n    '''\n    Write a python function to remove all words containing any whitespace.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.isspace()])\n    \ndef fix_string(word): \n    '''\n    Write a python function to fix a string to end in a period.\n    '''\n    # your code here\n    return word[:-1]\n    \ndef keep_word(word, new_word): \n    '''\n    Write a python function to make all the occurrences of a word in a new word appear in a new string.\n    '''\n    # your code here\n    return word.replace(new_word, \"\")\n    \ndef is_unique(word): \n    '''\n    Write a python function to check if the given string is unique.\n    '''\n    # your code here\n    return len(set(word)) == len(word)\n    \ndef replace_words(word, old_word, new_word): \n    '''\n    Write a python function to replace a word with a new word in a given string.\n    '''\n    # your code here\n    return word.replace(old_word, new_word)\n    \ndef isnumeric(word): \n    '''\n    Write a python function to check if the given string is numeric.\n    '''\n    # your code here\n    return all(char.isdigit() for char in word)\n    \ndef is_word_in_list(word, list): \n    '''\n    Write a python function to check if the given word is in a list of words.\n    '''\n    # your code here\n    if word in list:\n        return True\n    return False\n    \ndef is_word_in_dict(word, dict): \n    '''\n    Write a python function to check if the given word is in a dictionary.\n    '''\n    # your code here\n    if word in dict:\n        return True\n    return False\n    \ndef is_word_in_dictionary(word, dict): \n    '''\n    Write a python function to check if the given word is in a dictionary.\n    '''\n    # your code here\n    return word in dict.keys()\n    \ndef is_word_in_dict_not_in_list(word, dict): \n    '''\n    Write a python function to check if the given word is not in a dictionary.\n    '''\n    # your code here\n    return word not in dict.keys()\n    \ndef is_word_in_dict_not_in_dict(word, dict): \n    '''\n    Write a python function to check if the given word is not in a dictionary.\n    '''\n    # your code here\n    return word not in dict.keys()\n    \ndef is_word_in_dict_not_in_list_not_in_dict(word, dict): \n    '''\n    Write a python function to check if the given word is not in a dictionary.\n    '''\n    # your code here\n    return word not in dict.keys()\n    \ndef is_word_in_list(word, list): \n    '''\n    Write a python function to check if the given word is in a list of words.\n    '''\n    # your code here\n    return word in list\n    \ndef is_word_in_dict_not_in_list_not_in_dict(word, dict): \n    '''\n    Write a python function to check if the given word is not in a dictionary.\n    '''\n    # your code here\n    return word not in dict.keys()\n    \ndef is_word_in_dict_not_in_dict_not_in_list(word, dict): \n    '''\n    Write a python function to check if the given word is not in a dictionary.\n    '''\n    # your code here\n    return word not in dict.keys()\n    \ndef is_word_in_dict_not_in_list_not_in_dict_not_in_list(word, dict): \n    '''\n    Write a python function to check if the given word is not in a dictionary.\n    '''\n    # your code here\n    return word not in dict.keys()\n    \ndef split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # your code here\n    return \"\".join(char for char in word)\n    \ndef reverse(word): \n    '''\n    Write a python function to reverse a string.\n    '''\n    # your code here\n    return word[::-1]\n    \ndef only_digits(word): \n    '''\n    Write a python function to remove all non-digit characters in a string.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.isdigit()])\n    \ndef only_upper(word): \n    '''\n    Write a python function to remove all words containing all uppercase characters.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.isupper()])\n    \ndef only_lower(word): \n    '''\n    Write a python function to remove all words containing all lowercase characters.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.islower()])\n    \ndef only_capital(word): \n    '''\n    Write a python function to remove all words containing all capital characters.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.isalpha()])\n    \ndef only_num(word): \n    '''\n    Write a python function to remove all words containing all digits.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.isdigit()])\n    \ndef only_spaces(word): \n    '''\n    Write a python function to remove all words containing any whitespace.\n    '''\n    # your code here\n    return \"\".join([char for char in word if char.isspace()])\n    \ndef fix_string(word): \n    '''\n    Write a python function to fix a string to end in a period.\n    '''\n    # your code here\n    return word[:-1]\n    \ndef keep_word(word, new_word): \n    '''\n    Write a python function to make all the occurrences of a word in a new word appear in a new string.\n    '''\n    # your code here\n    return word.replace(new_word, \"\")\n    \ndef is_unique(word): \n    '''\n    Write a python function to check if the given string is unique.\n    '''\n    # your code here\n    return len(set(word)) == len(word)\n    \ndef replace_words(word, old_word, new_word): \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    import re \n    pattern = re.compile('[^a-zA-Z]') \n    result = pattern.findall(word) \n    return result \n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    a =''\n    for i in range(len(word)):\n        a = a + word[i] + \" \"\n    return a\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word_list = list(word)\n    return word_list\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    #Your code here\n    return word\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for i in range(len(word)):\n        if word[i] in result:\n            continue\n        else:\n            result.append(word[i])\n    return result\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Wrong input')\n    else:\n        return n % 10"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_digits = 0\n    while n:\n        sum_digits += n % 10\n        n = n // 10\n    return sum_digits\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total_digits = 0\n    while n:\n        total_digits = total_digits + n%10\n        n = n//10\n    return total_digits\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n > 0:\n        result += n % 10\n        n //= 10\n    return result\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return (n % 10) + (n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Your code here\n    if n == 0:\n        return 0\n    elif n < 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n // 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    if(n <= 0):\n        return 0\n    \n    #your code here\n    return sum_digits(n // 10) + n % 10\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if sorted.\n    if sorted(list1) == list1:\n        # If sorted, print it and return True.\n        return True\n    # Check if unsorted.\n    else:\n        # If unsorted, return False and print list1.\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # your code here\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    return list1\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] < list1[i + 1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] > list1[i+1]:\n            return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)>0:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for _ in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n    \ndef add_to_dict(dict_name, d, value):\n    '''\n    Write a function to add a dictionary named dict_name to dict d,\n    using the dictionary's value value.\n    '''\n    d[dict_name] = value\n    \ndef get_dict(d, dict_name):\n    '''\n    Write a function to return the value of a dictionary named dict_name.\n    '''\n    return d[dict_name]\n    \ndef get_dict_key(dict_name, value):\n    '''\n    Write a function to return the key of a dictionary named dict_name,\n    using the dictionary's value value.\n    '''\n    return dict_name[value]\n    \ndef remove_from_dict(d, dict_name, value):\n    '''\n    Write a function to remove a dictionary named dict_name, using its\n    key value.\n    '''\n    del d[dict_name[value]]\n    \ndef remove_from_dict_value(d, dict_name, value):\n    '''\n    Write a function to remove a dictionary named dict_name, using its\n    key value.\n    '''\n    del d[dict_name[value]]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return list()\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i=0\n    j=0\n    while i<len(list1):\n        while j<len(list1[i]):\n            list1[i][j]=' '\n            j+=1\n        i+=1\n    return list1\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # WRITE YOUR CODE HERE\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = []\n    for i in list1:\n        l.append(i[0])\n    return l\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        temp = []\n        for item in sublist:\n            temp.append(item)\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = lambda x: x[0])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key=lambda x: (x[0], x[1]))\n    list1.sort(key=lambda x: (x[0], x[2]))\n    list1.sort(key=lambda x: (x[1], x[2]))\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i].count('a') > list1[j].count('a'):\n                temp = list1[i]\n                list1[i] = list1[j]\n                list1[j] = temp\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #create a dictionary of letters and their count.\n    #Find out which letters has been used, return the dictionary.\n    #Use this dictionary to find the letter which has the longest length.\n    #Add letters to the dictionary, each letter should have a count of one letter.\n    #Use this dictionary to find the longest string.\n    #Add letters to the list.\n    #Return the list.\n    letters = {}\n    list_of_strings = []\n    for sublist in list1:\n        #append each string to a string list.\n        list_of_strings.append(str(sublist).replace('[','').replace(']',''))\n    #print(list_of_strings)\n    #sort the list of strings.\n    list_of_strings.sort(key = lambda x: len(x))\n    #print(list_of_strings)\n    #create a variable to hold the longest letter.\n    max_length = 0\n    for string in list_of_strings:\n        #get the length of each string.\n        length = len(string)\n        #add the length to the max_length.\n        if length > max_length:\n            max_length = length\n            #print(length)\n    #print(max_length)\n    #print(list_of_strings)\n    #add each list of strings to the dictionary.\n    for string in list_of_strings:\n        letters[string] = list_of_strings.count(string)\n    #print(letters)\n    #add each letter to the dictonary.\n    for letter, count in letters.items():\n        #add to the dictonary.\n        if count == max_length:\n            #print(letter)\n            #print(count)\n            letters[letter] = count + 1\n    #print(letters)\n    #return the list of strings.\n    return list_of_strings\n    #if len(list_of_strings) == 1:\n    #    print(list_of_strings)\n    #    return list_of_strings\n    #else:\n    #    return sorted(list_of_strings, key = len, reverse = True)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create a list of the strings\n    list_of_strings = []\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key = lambda x: len(x))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # TODO: create a dictionary to keep track of unique numbers\n    # create an empty list\n    nums_list = []\n    # iterate through each list element, append it to the list\n    for element in nums:\n        if element not in nums_list:\n            nums_list.append(element)\n    # sort the list and return it\n    nums_list.sort()\n    return nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    lst = []\n    for i in nums:\n        if i not in lst:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return [nums[i] for i in range(len(nums)) if nums[i] not in nums]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = set(nums)\n    nums_set = set(nums)\n    return result==nums_set\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    res = set()\n    for num in nums:\n        if num not in res:\n            res.add(num)\n    return res"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # need to use python builtin function or numpy to sort\n    nums.sort()\n    n = len(nums)\n    for i in range(n):\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n        else:\n            return nums\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    # Create a new list with unique numbers.\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] not in new_list:\n            new_list.append(nums[i])\n    \n    # Return the sorted list.\n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for number in nums:\n        if number not in result:\n            result.append(number)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Initialize an empty list.\n    nums = list(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    dup_nums = []\n    # iterate through the list\n    for num in nums:\n        # if the current number is not already in the duplicate list, add it to the duplicate list\n        if num not in dup_nums:\n            dup_nums.append(num)\n    # return the duplicate list\n    return dup_nums\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in range(len(list_data)):\n        product = product * list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = [item for item in list_data if item not in list_data]\n    unique_numbers_count = len(unique_list)\n    print(f'Unique numbers count is {unique_numbers_count}')\n    print(f'Unique numbers is {list_data}')\n    \n    def product(list_data):\n        '''\n        Write a python function to calculate the product of the unique numbers in a given list.\n        '''\n        for number in list_data:\n            if number not in list_data:\n                pass\n            else:\n                pass\n        \n    unique_numbers_count = len(list_data)\n    print(f'Unique numbers count is {unique_numbers_count}')\n    product(list_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_product = []\n    for i in list_data:\n        if i not in list_product:\n            list_product.append(i)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    set_product = set(list_data)\n    result = 1\n    for value in list_data:\n        result *= value\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    new_list = []\n    for i in list_data:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    set_data = set(list_data)\n    return len(set_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    lst = []\n    for i in range(len(list_data)):\n        s = list_data[i]\n        if s not in lst:\n            lst.append(s)\n    unique_product = len(lst)\n    return unique_product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_product = 1\n    for num in list_data:\n        if num % 2 == 0:\n            unique_product = unique_product * num\n    return unique_product\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*3.14*h*h*0.5\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    c = 1 #radius\n    d = r/2 + c #distance between circles\n    e = (2*np.pi*d*d)/(np.pi*d*d) #area of the ellipse\n    return e\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Assign a value to r.\n    r = r\n    # Assign a value to h.\n    h = h\n    # Create a formula for the area.\n    area = 4 * np.pi * r * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 4*pi*r**2\n    return S\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    m = 1.0*(4.0/3.0)\n    p = 2*math.pi\n    s = r*h\n    area = m*s*(3.0/2.0)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Get area of circle with radius r\n    A = 3.14*r*r\n    #Get radius of the cylinder\n    r = h/2\n    #Get center of the circle\n    c = (3/2)*math.pi*r\n    #Get area of cylinder\n    return A*h*math.pi*c\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r_cyl = (3*r)**(1/3)\n    h_cyl = (2*h)**(1/2)\n    return (2*r_cyl*h_cyl)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r = np.array(r)\n    h = np.array(h)\n    area = (r[0]**2 + r[1]**2 + r[2]**2)**0.5\n    area_cylinder = h/3*area\n    return area_cylinder\n    "
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = h * h * r * (1 - 2*r*h) * math.pi\n    print(f'The surface area of a cylinder with radius {r} and height {h} is {S}.')\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14*h*r**2\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B):\n        return False\n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return(True)\n    elif len(A)==len(B):\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return(False)\n    else:\n        return(False)\n    return(True)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    try:\n        if B==A[0]:\n            print(\"1st argument is sublist\")\n        else:\n            print(\"2nd argument is sublist\")\n            return True\n    except IndexError:\n        print(\"Index of A is invalid\")\n        return False\n    except Exception as e:\n        print(e)\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:].index(B[i:])!= i:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    l = len(A)\n    \n    if l==1:\n        return B in A[0]\n    elif l==2:\n        return B in A[0] or B in A[1]\n    elif l==3:\n        return B in A[0] or B in A[1] or B in A[2]\n    else:\n        return False\n    \nprint(is_Sub_Array([1,2,3,4,5],[1,2,3]))\nprint(is_Sub_Array([1,2,3,4,5],[1,2,3,4]))\nprint(is_Sub_Array([1,2,3,4,5],[1,2,3,4]))\nprint(is_Sub_Array([1,2,3,4,5],[1,2,3,4,5]))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i]==B[j]:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # 0-> n+1\n    N=len(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:i+len(B)]!= B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # your code goes here\n    \n    l1=len(A)\n    l2=len(B)\n    \n    if l1!=l2:\n        return False\n    \n    for i in range(0,l1-1):\n        if A[i]!=B[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A.sort()\n    B.sort()\n    return B==A[0:len(B)]\n    \nA = list(map(int,input().split()))\nB = list(map(int,input().split()))\nif(is_Sub_Array(A,B)):\n    print(\"Yes\")\nelse:\n    print(\"No\""
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    elif n < 0:\n        print(\"Enter a positive number\")\n    else:\n        return last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    if (n==0): return 0\n    elif (n==1): return 1\n    else: return(last_Digit_Factorial(n-1))\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    Factorial = 1\n    if n < 0:\n        return -1\n    while n!= 0:\n        Factorial = Factorial*n\n        n = n-1\n    return Factorial\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n%10+last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if n==0:\n        return 0\n    while(n!=0):\n        factorial = factorial *n\n        n = n-1\n    return factorial\ndef last_Digit_Modulo(n):\n    '''\n    Write a python function to calculate the last digit in modulo of a given number.\n    '''\n    return n%10\ndef last_Digit_Sum(n):\n    '''\n    Write a python function to calculate the sum of the last digit in a given number.\n    '''\n    return sum(last_Digit_Factorial(n))\ndef last_Digit_Subtraction(n):\n    '''\n    Write a python function to calculate the last digit in subtraction of a given number.\n    '''\n    return n%10-1\ndef last_Digit_Multiplication(n):\n    '''\n    Write a python function to calculate the last digit in multiplication of a given number.\n    '''\n    return n%10*n\ndef last_Digit_Division(n):\n    '''\n    Write a python function to calculate the last digit in division of a given number.\n    '''\n    return n%10//n\ndef last_Digit_Power(n):\n    '''\n    Write a python function to calculate the last digit in power of a given number.\n    '''\n    return n%10**(n%10)\ndef last_Digit_SquareRoot(n):\n    '''\n    Write a python function to calculate the last digit in square root of a given number.\n    '''\n    return (n**(1/2))\ndef last_Digit_SquareRoot_Factorial(n):\n    '''\n    Write a python function to calculate the last digit in square root of a given number.\n    '''\n    return n**(1/2)\ndef last_Digit_Modulo(n):\n    '''\n    Write a python function to calculate the last digit in modulo of a given number.\n    '''\n    return n%10\ndef last_Digit_Sum_Squares(n):\n    '''\n    Write a python function to calculate the last digit in sum of squares of a given number.\n    '''\n    return n**2\ndef last_Digit_Subtraction_Squares(n):\n    '''\n    Write a python function to calculate the last digit in subtraction of a given number.\n    '''\n    return n**2-n**2\ndef last_Digit_Multiplication_Squares(n):\n    '''\n    Write a python function to calculate the last digit in multiplication of a given number.\n    '''\n    return n**2*n\ndef last_Digit_Division_Squares(n):\n    '''\n    Write a python function to calculate the last digit in division of a given number.\n    '''\n    return n**2//n\ndef last_Digit_Power_Squares(n):\n    '''\n    Write a python function to calculate the last digit in power of a given number.\n    '''\n    return n**2//n\ndef last_Digit_SquareRoot_Squares(n):\n    '''\n    Write a python function to calculate the last digit in square root of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_SquareRoot_Factorial(n):\n    '''\n    Write a python function to calculate the last digit in square root of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Modulo_Squares(n):\n    '''\n    Write a python function to calculate the last digit in modulo of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Sum_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in sum of squares of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Subtraction_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in subtraction of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Multiplication_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in multiplication of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Division_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in division of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Power_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in power of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_SquareRoot_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in square root of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_SquareRoot_Factorial_Squares(n):\n    '''\n    Write a python function to calculate the last digit in square root of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Modulo_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in modulo of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Sum_Squares_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in sum of squares of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Subtraction_Squares_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in subtraction of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Multiplication_Squares_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in multiplication of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Division_Squares_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in division of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Power_Squares_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in power of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_SquareRoot_Squares_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in square root of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_SquareRoot_Factorial_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in square root of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Modulo_Squares_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in modulo of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Sum_Squares_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in sum of squares of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Subtraction_Squares_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in subtraction of a given number.\n    '''\n    return n**2**(1/2)\ndef last_Digit_Multiplication_Squares_Squares_Squares(n):\n    '''\n    Write a python function to calculate the last digit in multiplication of a given number.\n    '''\n    return n**2**(1/2)\ndef last"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return (\"Error: Input value must be greater than 0\")\n    else:\n        return(int(n%10))\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = 0\n    for i in range(n, 0, -1):\n        last_digit = i * last_digit\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    res = 0\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    for i in range(1, n + 1):\n        res = res * i\n        if res == n:\n            return i\n    return -1"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = abs(n) \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n > 1: \n        return last_Digit_Factorial(n // 10) + last_Digit_Factorial(n % 10)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # print(list1)\n    # print(list2)\n    # print(list3)\n    # return\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Starting from the first index, take each index and append the elements of second index to the list\n    interlist = []\n    for i in range(0,len(list1)):\n        interlist.append(list1[i])\n    for i in range(0,len(list2)):\n        interlist.append(list2[i])\n    for i in range(0,len(list3)):\n        interlist.append(list3[i])\n    # Return the interleaved lists\n    return interlist\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Write your code here.\n    if len(list1) == len(list2) == len(list3):\n        return list1 + list2 + list3\n    else:\n        return list1\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check to see if the lists are the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise Exception(\"The lists don't have the same length\")\n    \n    # Check to see if all 3 lists are the same type\n    elif list1[0]!= list2[0] or list1[1]!= list3[0] or list2[1]!= list3[1]:\n        raise Exception(\"The lists don't have the same type\")\n    \n    # If the lists are the same, just return the lists\n    else:\n        return [list1,list2,list3]\n    "
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[0]+list2[0],list1[1]+list2[1],list1[2]+list2[2]]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_of_interleaved = list1 + list2 + list3\n    list_of_interleaved.sort()\n    return list_of_interleaved\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1):\n        while j < len(list2):\n            if list1[i][j]!= list2[k][j]:\n                result.append(list1[i][j])\n                i+=1\n            else:\n                i+=1\n                j+=1\n        while k < len(list3):\n            if list1[i][j]!= list3[k][j]:\n                result.append(list1[i][j])\n                i+=1\n            else:\n                i+=1\n                j+=1\n        k+=1\n        while j < len(list3):\n            result.append(list2[k][j])\n            j+=1\n        k+=1\n        while i < len(list1):\n            result.append(list1[i][j])\n            i+=1\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    return [list1[i:j] + list3[i:j] for i,j in zip(list1,list2)]\n    \ndef main():\n    '''\n    Write a function that takes a sequence of integers, and returns the interleaved\n    sequence.\n    '''\n    \n    list1 = [1,2,3,4,5]\n    list2 = [2,4,6,8,10]\n    list3 = [3,7,9,11,12]\n    \n    print(interleave_lists(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    #returns the new list\n    return list1+list2+list3\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #\n    # TODO: Write your code here\n    #\n    \n    # create an empty list\n    result = []\n    \n    # iterate through the list\n    for i in range(len(test_tup1)):\n        # if the item exists, add it to the result\n        if test_tup1[i] in test_tup2:\n            # add the index of the item to the result\n            result.append(i)\n    \n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code goes here\n    return test_tup1[0] + test_tup2[0]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1).difference(set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # print(test_tup1, test_tup2)\n    # print(type(test_tup1), type(test_tup2))\n    # return\n    # if the data type is not correct\n    # return\n    \n    # if both data types are the same\n    # return\n    \n    # find the first element which is not a string\n    # then compare it with the second element of the tuple\n    # and check if it is string\n    # if it is string\n    # then return\n    \n    # if it is not a string\n    # then check if it is a string\n    # if it is a string\n    # then return\n    # if it is not a string\n    # then check if it is a string\n    # if it is not a string\n    # then return\n    \n    # if it is not a string\n    # then compare it with the second element of the tuple\n    # and check if it is not a string\n    # if it is not a string\n    # then return\n    \n    # if it is not a string\n    # then check if it is a string\n    # if it is not a string\n    # then return\n    \n    \n    # if it is a string\n    # then compare it with the second element of the tuple\n    # and check if it is not a string\n    # if it is not a string\n    # then return\n    \n    \n    \n    # return\n    return\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Check if there are any\n    if (len(test_tup1)!= len(test_tup2)):\n        return 'Error: Both tuples have different sizes'\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup_s = set()\n    for x in test_tup1:\n        for y in test_tup2:\n            if x!= y:\n                tup_s.add(x)\n    return tup_s\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    l1, l2 = len(test_tup1), len(test_tup2)\n    if l1!= l2:\n        raise Exception('Tuple lengths not equal')\n    \n    for i in range(l1):\n        if test_tup1[i]!= test_tup2[i]:\n            return test_tup1[i]\n    \n    # we didn't find a dissimilar element, return the first element.\n    return test_tup1[0]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    temp = []\n    temp1 = []\n    temp2 = []\n    for i in test_tup1:\n        for j in test_tup2:\n            if i!=j:\n                if i==j:\n                    temp.append(i)\n                else:\n                    temp.append(j)\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tuple1 = tuple(sorted(set(test_tup1) - set(test_tup2)))\n    dissimilar_tuple2 = tuple(sorted(set(test_tup2) - set(test_tup1)))\n    return dissimilar_tuple1, dissimilar_tuple2\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    mat = []\n    for i in range(len(test_tup1)):\n        mat.append(test_tup1[i])\n    mat.append(test_tup2)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(tuple(x for x in test_tuple if x % 2 == 0), lambda x: x)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc = str(even_fnc) \n    tuple_element = test_tuple[1]\n    test_tuple[1] = tuple_element[1]\n    test_tuple[0] = tuple_element[0]\n    test_tuple[1] = tuple_element[1]\n    test_tuple[0] = tuple_element[0]\n    if type(even_fnc) == str:\n        even_fnc = even_fnc[1]\n    test_tuple[1] = even_fnc\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_val = [i for i in test_tuple if even_fnc(i)]\n    return even_val\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a list of the odd elements\n    odd_ele = test_tuple[1::2]\n    # iterate over odd elements\n    for i in odd_ele: \n        test_tuple = odd_ele[0] \n        even_fnc(test_tuple, even_fnc) \n    # add a space\n    test_tuple[0] = test_tuple[0] +''\n    test_tuple[2] = test_tuple[2] +''\n    test_tuple[3] = test_tuple[3] +''\n    test_tuple[4] = test_tuple[4] +''\n    test_tuple[5] = test_tuple[5] +''\n    test_tuple[6] = test_tuple[6] +''\n    test_tuple[7] = test_tuple[7] +''\n    test_tuple[8] = test_tuple[8] +''\n    test_tuple[9] = test_tuple[9] +''\n    test_tuple[10] = test_tuple[10] +''\n    test_tuple[11] = test_tuple[11] +''\n    test_tuple[12] = test_tuple[12] +''\n    test_tuple[13] = test_tuple[13] +''\n    test_tuple[14] = test_tuple[14] +''\n    test_tuple[15] = test_tuple[15] +''\n    test_tuple[16] = test_tuple[16] +''\n    test_tuple[17] = test_tuple[17] +''\n    test_tuple[18] = test_tuple[18] +''\n    test_tuple[19] = test_tuple[19] +''\n    test_tuple[20] = test_tuple[20] +''\n    test_tuple[21] = test_tuple[21] +''\n    test_tuple[22] = test_tuple[22] +''\n    test_tuple[23] = test_tuple[23] +''\n    test_tuple[24] = test_tuple[24] +''\n    test_tuple[25] = test_tuple[25] +''\n    test_tuple[26] = test_tuple[26] +''\n    test_tuple[27] = test_tuple[27] +''\n    test_tuple[28] = test_tuple[28] +''\n    test_tuple[29] = test_tuple[29] +''\n    test_tuple[30] = test_tuple[30] +''\n    test_tuple[31] = test_tuple[31] +''\n    test_tuple[32] = test_tuple[32] +''\n    test_tuple[33] = test_tuple[33] +''\n    test_tuple[34] = test_tuple[34] +''\n    test_tuple[35] = test_tuple[35] +''\n    test_tuple[36] = test_tuple[36] +''\n    test_tuple[37] = test_tuple[37] +''\n    test_tuple[38] = test_tuple[38] +''\n    test_tuple[39] = test_tuple[39] +''\n    test_tuple[40] = test_tuple[40] +''\n    test_tuple[41] = test_tuple[41] +''\n    test_tuple[42] = test_tuple[42] +''\n    test_tuple[43] = test_tuple[43] +''\n    test_tuple[44] = test_tuple[44] +''\n    test_tuple[45] = test_tuple[45] +''\n    test_tuple[46] = test_tuple[46] +''\n    test_tuple[47] = test_tuple[47] +''\n    test_tuple[48] = test_tuple[48] +''\n    test_tuple[49] = test_tuple[49] +''\n    test_tuple[50] = test_tuple[50] +''\n    test_tuple[51] = test_tuple[51] +''\n    test_tuple[52] = test_tuple[52] +''\n    test_tuple[53] = test_tuple[53] +''\n    test_tuple[54] = test_tuple[54] +''\n    test_tuple[55] = test_tuple[55] +''\n    test_tuple[56] = test_tuple[56] +''\n    test_tuple[57] = test_tuple[57] +''\n    test_tuple[58] = test_tuple[58] +''\n    test_tuple[59] = test_tuple[59] +''\n    test_tuple[60] = test_tuple[60] +''\n    test_tuple[61] = test_tuple[61] +''\n    test_tuple[62] = test_tuple[62] +''\n    test_tuple[63] = test_tuple[63] +''\n    test_tuple[64] = test_tuple[64] +''\n    test_tuple[65] = test_tuple[65] +''\n    test_tuple[66] = test_tuple[66] +''\n    test_tuple[67] = test_tuple[67] +''\n    test_tuple[68] = test_tuple[68] +''\n    test_tuple[69] = test_tuple[69] +''\n    test_tuple[70] = test_tuple[70] +''\n    test_tuple[71] = test_tuple[71] +''\n    test_tuple[72] = test_tuple[72] +''\n    test_tuple[73] = test_tuple[73] +''\n    test_tuple[74] = test_tuple[74] +''\n    test_tuple[75] = test_tuple[75] +''\n    test_tuple[76] = test_tuple[76] +''\n    test_tuple[77] = test_tuple[77] +''\n    test_tuple[78] = test_tuple[78] +''\n    test_tuple[79] = test_tuple[79] +''\n    test_tuple[80] = test_tuple[80] +''\n    test_tuple[81] = test_tuple[81] +''\n    test_tuple[82] = test_tuple[82] +''\n    test_tuple[83] = test_tuple[83] +''\n    test_tuple[84] = test_tuple[84] +''\n    test_tuple[85] = test_tuple[85] +''\n    test_tuple[86] = test_tuple[86] +''\n    test_tuple[87] = test_tuple[87] +''\n    test_tuple[88] = test_tuple[88] +''\n    test_tuple[89] = test_tuple[89] +''\n    test_tuple[90] = test_tuple[90] +''\n    test_tuple[91] = test_tuple[91] +''\n    test_tuple[92] = test_tuple[92] +''\n    test_tuple[93] = test_tuple[93] +''\n    test_tuple[94] = test_tuple[94] +''\n    test_tuple[95] = test_tuple[95] +''\n    test_tuple[96] = test_tuple[96] +''\n    test_tuple[9"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    t = list(test_tuple)\n    for i in t:\n        if i[2] == 'even':\n            t.remove(i)\n    return t\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    tuple_elements = list(test_tuple)\n    even_elements = tuple_elements[::2]\n    even_tuple = (even_fnc(*tuple_elements[0]), even_fnc(*tuple_elements[1]))\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(*test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc_str = str(even_fnc)\n    if not isinstance(test_tuple, tuple):\n        test_tuple = (test_tuple,)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0:2]\n    even_fnc(even_tuple)\n    odd_tuple = test_tuple[2:]\n    odd_fnc(odd_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_tuple = []\n    odd_fnc(test_tuple)\n    for num in test_tuple:\n        if num % 2!= 0:\n            odd_tuple.append(num)\n    test_tuple = odd_tuple\n    even_fnc(test_tuple)\n    return test_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    '''\n    How to use this function?\n    1. Make a list of base values that you want to calculate.\n    2. Iterate over the range of base values from 1 to 10.\n    3. Calculate the area of a triangle with base values and height.\n    4. Return the sum of the areas of triangles.\n    '''\n    '''\n    How to calculate the area of a triangle?\n    1. The base values for the triangle should be between 1 to 10.\n    2. Calculate the area of a triangle from base values.\n    3. Return the sum of the areas of triangles.\n    '''\n    '''\n    To find the area of a triangle, you must calculate it from:\n    base = base \u2013 (height/2) \u2013 (width/2)\n    A. All base values should be between 1 to 10.\n    B. A triangle with base values between 1 and 10 should have a height of\n    20.\n    C. The height of the triangle should be a multiple of 20.\n    D. A triangle with a height of 10 should have a width of\n    15.\n    '''\n    '''\n    HINT: \n    1. Calculate the base value for each triangle.\n    2. Multiply the height by the width of the triangle.\n    3. Take the product of the base values and the height.\n    4. Return the sum of the areas.\n    '''\n    '''\n    To find the area of a triangle, you must calculate it from:\n    base = base \u2013 (height/2) \u2013 (width/2)\n    A. All base values should be between 1 to 10.\n    B. A triangle with base values between 1 and 10 should have a height of\n    20.\n    C. The height of the triangle should be a multiple of 20.\n    D. A triangle with a height of 10 should have a width of\n    15.\n    '''\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if type(b)!= type(s) : \n        raise TypeError(\"The arguments must be of type <class 'int'> and <class 'int'>\") \n    if b <= 0 or s <= 0 : \n        raise ValueError(\"The base and height must be positive\") \n    if s == 0 or s == 1 : \n        return b*b \n    elif b < s : \n        return s*s*(b-1) \n    else : \n        return (s*s)/(2*b -1) \n    \nif __name__ == \"__main__\" : \n    base = int(input(\"Base : \")) \n    height = int(input(\"Height : \")) \n    print(surface_Area(base, height))"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # your code goes here\n    # return 0\n    return 0\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print('\\nSurface Area of a square pyramid with a base edge and height of',s,'\\n')\n    if s==1:\n        print('1/4\\n2/2\\n3/4\\n4/8\\n')\n    elif s==2:\n        print('1/2\\n1/4\\n2/3\\n3/2\\n')\n    elif s==3:\n        print('1/2\\n1/4\\n3/6\\n')\n    elif s==4:\n        print('1/4\\n1/2\\n2/5\\n3/3\\n4/2\\n')\n    elif s==5:\n        print('1/4\\n1/3\\n2/4\\n3/5\\n4/6\\n')\n    elif s==6:\n        print('1/4\\n1/3\\n2/5\\n3/7\\n')\n    elif s==7:\n        print('1/4\\n1/3\\n2/6\\n3/9\\n4/10\\n')\n    elif s==8:\n        print('1/4\\n1/2\\n2/4\\n3/5\\n4/6\\n5/7\\n')\n    elif s==9:\n        print('1/4\\n1/3\\n2/5\\n3/6\\n4/7\\n5/8\\n')\n    elif s==10:\n        print('1/4\\n1/2\\n2/5\\n3/7\\n4/9\\n')\n    else:\n        print('Invalid input\\n')\n    return\ndef surface_Area_2(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular prism with a given base edge and height.\n    '''\n    print('\\nSurface Area of a rectangular prism with a base edge and height of',s,'\\n')\n    if s==1:\n        print('1/2\\n3/4\\n5/6\\n7/8\\n')\n    elif s==2:\n        print('1/2\\n1/3\\n2/4\\n3/5\\n4/6\\n5/7\\n')\n    elif s==3:\n        print('1/2\\n1/3\\n2/5\\n3/7\\n')\n    elif s==4:\n        print('1/2\\n1/3\\n2/6\\n3/9\\n')\n    elif s==5:\n        print('1/2\\n1/3\\n2/7\\n3/10\\n')\n    elif s==6:\n        print('1/2\\n1/3\\n2/5\\n3/8\\n4/10\\n')\n    elif s==7:\n        print('1/2\\n1/3\\n2/6\\n3/9\\n4/10\\n')\n    elif s==8:\n        print('1/2\\n1/3\\n2/5\\n3/7\\n4/10\\n')\n    elif s==9:\n        print('1/2\\n1/3\\n2/5\\n3/7\\n4/9\\n')\n    elif s==10:\n        print('1/2\\n1/3\\n2/5\\n3/8\\n4/10\\n')\n    else:\n        print('Invalid input\\n')\n    return\ndef area_of_Cylinder(r,h):\n    '''\n    Write a python function to find the area of a cylinder with a given radius and height.\n    '''\n    print('\\nArea of a cylinder with a radius of',r,'and height of',h,'\\n')\n    print('\\tArea = ',float(r*h)/2,'cm^2\\n')\n    return\ndef area_of_Cylinder_2(r,h):\n    '''\n    Write a python function to find the area of a cylinder with a given radius and height.\n    '''\n    print('\\nArea of a cylinder with a radius of',r,'and height of',h,'\\n')\n    print('\\tArea = ',float(((r**2)*(h**2))**0.5),'cm^2\\n')\n    return\ndef area_of_Cylinder_3(r,h):\n    '''\n    Write a python function to find the area of a cylinder with a given radius and height.\n    '''\n    print('\\nArea of a cylinder with a radius of',r,'and height of',h,'\\n')\n    print('\\tArea = ',float(r**2*h**2),'cm^2\\n')\n    return\ndef volume_of_Cylinder(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    print('\\nVolume of a cylinder with a radius of',r,'and height of',h,'\\n')\n    print('\\tVolume = ',float(r*h)/4,'cm^3\\n')\n    return\ndef volume_of_Cylinder_2(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    print('\\nVolume of a cylinder with a radius of',r,'and height of',h,'\\n')\n    print('\\tVolume = ',float(((r**2)*(h**2))**0.5),'cm^3\\n')\n    return\ndef volume_of_Cylinder_3(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    print('\\nVolume of a cylinder with a radius of',r,'and height of',h,'\\n')\n    print('\\tVolume = ',float(((r**2)*(h**2))**0.5),'cm^3\\n')\n    return\ndef volume_of_Cylinder_4(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    print('\\nVolume of a cylinder with a radius of',r,'and height of',h,'\\n')\n    print('\\tVolume = ',float(r*h*(h**2))**0.5,'cm^3\\n')\n    return\ndef volume_of_Cylinder_5(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    print('\\nVolume of a cylinder with a radius of',r,'and height of',h,'\\n')\n    print('\\tVolume = ',float(r*h*(r**2)+(h**2)**0.5),'cm^3\\n')\n    return\ndef area_of_Triangle(a,b,c):\n    '''\n    Write a python function to find the area of a triangle with three sides of given lengths a,b,c.\n    '''\n    print('\\nArea of a triangle with three sides of',a,',',b,', and',c,'\\n')\n    print('\\tArea = ',float(((a**2)+(b**2)+(c**2))**0.5),'cm^2\\n')\n    return\ndef area_of_Triangle_2(a,b,c):\n    '''\n    Write a python function to find the area of a triangle with three sides of given lengths a,b,c.\n    '''\n    print('\\nArea of a triangle with three sides of',a,',',b,', and',c,'\\n')\n    print('\\tArea = ',float(((a**2)+(b**2)+(c**2))**0.5),'cm^2\\n')\n    return\ndef area_of_Triangle_3(a,b,c):\n    '''\n    Write a python function to find the area of a triangle with three sides of given lengths a,b,c.\n    '''\n    print('\\nArea of a triangle with three sides of',a,',',b,', and',c,'\\n')\n    print('\\tArea = ',float(((a**"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print (\"Enter base edge of the pyramid: \")\n    b = float(input())\n    print (\"Enter height of the pyramid: \")\n    s = float(input())\n    print (\"Enter side of the pyramid: \")\n    s = s*0.5\n    print (\"The area of the pyramid: \")\n    area = b*s*s\n    print(\"The area of the pyramid: \",area)\n    \n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    from math import pi\n    area = 0\n    for i in range(1,b+1):\n        area += 2*(s**2)\n    area = (2*pi*b*s)\n    return round(area,2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def area(b,h): \n        return 2*b*h/3\n    def rectangle_area(r): \n        return 2*r*r\n    #base edge and height\n    b = b/2\n    h = h/2\n    #calculation of the surface area\n    s = area(b,h) + area(b,h+1) + area(b+1,h+1) + area(b+1,h)\n    return s"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for x in dict1:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for x in dict1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is None or len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    \n    # We will need a counter variable to make sure that we dont need to add any more than 1 index\n    count = 0\n    \n    # Create a list with all possible values\n    catalan = [1,1] + list(range(2,num+1))\n    # Update list with the new values\n    catalan[1] = catalan[0] + catalan[1]\n    \n    # Loop through each index\n    for i in range(2,len(catalan)):\n        # Update list\n        catalan[i] = catalan[i-1] + catalan[i]\n        # Increment counter\n        count += 1\n        \n    # Return number\n    return count\n    \ndef main():\n    '''\n    Method which will print the nth catalan number.\n    '''\n    \n    # Number of elements\n    num = 4\n    \n    # print the nth catalan number\n    print(catalan_number(num))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert num >= 1\n    assert num <= 30\n    assert isinstance(num, int)\n    if num <= 2:\n        return 1\n    elif num % 2 == 0:\n        return catalan_number(num-1) + catalan_number(num-2)\n    else:\n        return catalan_number(num-1) + catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def is_even(number):\n        return (number%2) == 0\n    return (num*catalan_number(num-1) + catalan_number(num-1) *is_even(num-1))\n    \n    \n    def catalan_number_perfect(num):\n        return (num*catalan_number(num-1) + catalan_number(num-1) * is_even(num-1))\n    \n    def catalan_number_till_last(num):\n        return (num*catalan_number(num-1) + catalan_number(num-1) * is_even(num-1) * catalan_number(num-2))\n    return catalan_number(num)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    a = [1,1]\n    for i in range(1,n):\n        a.append(a[i-1] + a[i-1]*(n-i))\n    return sum(a[n-1:])\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        raise ValueError(\"Categalan number can't be negative.\")\n    if num == 0:\n        return 1\n    \n    catalan_num = 1\n    for i in range(num-1):\n        catalan_num = catalan_num * (i + 1)\n    \n    return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def next_catalan(n):\n        '''\n        Return the nth Catalan number of the given integer.\n        '''\n        if n == 1 or n == 0:\n            return 1\n        return n * next_catalan(n - 1)\n    return next_catalan(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # write your code here\n    def catalan_number_index(num):\n        x = 0\n        y = 1\n        z = 1\n        \n        while num > 0:\n            if num % 2 == 1:\n                y += 1\n                z += 1\n            else:\n                z += 1\n            num //= 2\n        return y, z\n        \n        \n    # test your function\n    assert catalan_number_index(7) == (1, 4)\n    assert catalan_number_index(9) == (2, 6)\n    assert catalan_number_index(45) == (1, 4)\n    assert catalan_number_index(6) == (2, 2)\n    assert catalan_number_index(27) == (1, 2)\n    assert catalan_number_index(0) == (0, 1)\n    assert catalan_number_index(25) == (1, 3)\n    assert catalan_number_index(35) == (2, 7)\n    assert catalan_number_index(31) == (3, 8)\n    assert catalan_number_index(60) == (4, 11)\n    assert catalan_number_index(42) == (4, 3)\n    assert catalan_number_index(64) == (5, 10)\n    assert catalan_number_index(106) == (6, 19)\n    assert catalan_number_index(28) == (6, 13)\n    assert catalan_number_index(160) == (7, 14)\n    assert catalan_number_index(210) == (8, 17)\n    assert catalan_number_index(31) == (8, 11)\n    assert catalan_number_index(140) == (9, 20)\n    assert catalan_number_index(120) == (10, 25)\n    assert catalan_number_index(82) == (10, 21)\n    assert catalan_number_index(111) == (10, 34)\n    assert catalan_number_index(236) == (11, 44)\n    assert catalan_number_index(277) == (12, 51)\n    assert catalan_number_index(320) == (13, 75)\n    assert catalan_number_index(145) == (14, 105)\n    assert catalan_number_index(154) == (15, 140)\n    assert catalan_number_index(264) == (16, 170)\n    assert catalan_number_index(178) == (17, 219)\n    assert catalan_number_index(321) == (18, 246)\n    assert catalan_number_index(98) == (19, 268)\n    assert catalan_number_index(0) == (0, 1)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(10) == (1, 2)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(10) == (1, 2)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(10) == (1, 2)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(10) == (1, 2)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4)\n    assert catalan_number_index(50) == (1, 4"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    try:\n        if num==0:\n            raise ValueError\n        if num==1:\n            return 1\n        if num==2:\n            return 4\n        if num==3:\n            return 6\n        if num==4:\n            return 8\n        if num==5:\n            return 10\n        if num==6:\n            return 12\n        if num==7:\n            return 14\n        if num==8:\n            return 16\n        if num==9:\n            return 18\n        if num==10:\n            return 20\n        if num==11:\n            return 22\n        if num==12:\n            return 24\n        if num==13:\n            return 26\n        if num==14:\n            return 28\n        if num==15:\n            return 30\n        if num==16:\n            return 32\n        if num==17:\n            return 34\n        if num==18:\n            return 36\n        if num==19:\n            return 38\n        if num==20:\n            return 40\n        if num==21:\n            return 42\n        if num==22:\n            return 44\n        if num==23:\n            return 46\n        if num==24:\n            return 48\n        if num==25:\n            return 50\n        if num==26:\n            return 52\n        if num==27:\n            return 54\n        if num==28:\n            return 56\n        if num==29:\n            return 58\n        if num==30:\n            return 60\n        if num==31:\n            return 62\n        if num==32:\n            return 64\n        if num==33:\n            return 66\n        if num==34:\n            return 68\n        if num==35:\n            return 70\n        if num==36:\n            return 72\n        if num==37:\n            return 74\n        if num==38:\n            return 76\n        if num==39:\n            return 78\n        if num==40:\n            return 80\n        if num==41:\n            return 82\n        if num==42:\n            return 84\n        if num==43:\n            return 86\n        if num==44:\n            return 88\n        if num==45:\n            return 90\n        if num==46:\n            return 92\n        if num==47:\n            return 94\n        if num==48:\n            return 96\n        if num==49:\n            return 98\n        if num==50:\n            return 100\n        if num==51:\n            return 102\n        if num==52:\n            return 104\n        if num==53:\n            return 106\n        if num==54:\n            return 108\n        if num==55:\n            return 110\n        if num==56:\n            return 112\n        if num==57:\n            return 114\n        if num==58:\n            return 116\n        if num==59:\n            return 118\n        if num==60:\n            return 120\n        if num==61:\n            return 122\n        if num==62:\n            return 124\n        if num==63:\n            return 126\n        if num==64:\n            return 128\n        if num==65:\n            return 130\n        if num==66:\n            return 132\n        if num==67:\n            return 134\n        if num==68:\n            return 136\n        if num==69:\n            return 138\n        if num==70:\n            return 140\n        if num==71:\n            return 142\n        if num==72:\n            return 144\n        if num==73:\n            return 146\n        if num==74:\n            return 148\n        if num==75:\n            return 150\n        if num==76:\n            return 152\n        if num==77:\n            return 154\n        if num==78:\n            return 156\n        if num==79:\n            return 158\n        if num==80:\n            return 160\n        if num==81:\n            return 162\n        if num==82:\n            return 164\n        if num==83:\n            return 166\n        if num==84:\n            return 168\n        if num==85:\n            return 170\n        if num==86:\n            return 172\n        if num==87:\n            return 174\n        if num==88:\n            return 176\n        if num==89:\n            return 178\n        if num==90:\n            return 180\n        if num==91:\n            return 182\n        if num==92:\n            return 184\n        if num==93:\n            return 186\n        if num==94:\n            return 188\n        if num==95:\n            return 190\n        if num==96:\n            return 192\n        if num==97:\n            return 194\n        if num==98:\n            return 196\n        if num==99:\n            return 198\n        if num==100:\n            return 200\n        if num==101:\n            return 202\n        if num==102:\n            return 204\n        if num==103:\n            return 206\n        if num==104:\n            return 208\n        if num==105:\n            return 210\n        if num==106:\n            return 212\n        if num==107:\n            return 214\n        if num==108:\n            return 216\n        if num==109:\n            return 218\n        if num==110:\n            return 220\n        if num==111:\n            return 222\n        if num==112:\n            return 224\n        if num==113:\n            return 226\n        if num==114:\n            return 228\n        if num==115:\n            return 230\n        if num==116:\n            return 232\n        if num==117:\n            return 234\n        if num==118:\n            return 236\n        if num==119:\n            return 238\n        if num==120:\n            return 240\n        if num==121:\n            return 242\n        if num==122:\n            return 244\n        if num==123:\n            return 246\n        if num==124:\n            return 248\n        if num==125:\n            return 250\n        if num==126:\n            return 252\n        if num==127:\n            return 254\n        if num==128:\n            return 256\n        if num==129:\n            return 258\n        if num==130:\n            return 260\n        if num==131:\n            return 262\n        if num==132:\n            return 264\n        if num==133:\n            return 266\n        if num==134:\n            return 268\n        if num==135:\n            return 270\n        if num==136:\n            return 272\n        if num==137:\n            return 274\n        if num==138:\n            return 276\n        if num==139:\n            return 278\n        if num==140:\n            return 280\n        if num==141:\n            return 282\n        if num==142:\n            return 284\n        if num==143:\n            return 286\n        if num==144:\n            return 288\n        if num==145:\n            return 290\n        if num==146:\n            return 292\n        if num==147:\n            return 294\n        if num==148:\n            return 296\n        if num==149:\n            return 298\n        if num==150:\n            return 300\n        if num==151:\n            return 302\n        if num==152:\n            return 304\n        if num==153:\n            return 306\n        if num==154:\n            return 308\n        if num==155:\n            return 310\n        if num==156:\n            return 312\n        if num==157:\n            return 314\n        if num==158:\n            return 316\n        if num==159:\n            return 318\n        if num==160:\n            return 320\n        if num==161:\n            return 322\n        if num==162:\n            return 324\n        if num==163:\n            return 326\n        if num==164:\n            return 328\n        if num==165:\n            return 330\n        if num==166:\n            return 332\n        if num==167:\n            return 334\n        if num==168:\n            return 336\n        if num==169:\n            return 338\n        if num==170:\n            return 340\n        if num==171:\n            return 342\n        if num==172:\n            return 344\n        if num==173:\n            return 346\n        if num==174:\n            return 348\n        if num==175:\n            return 350\n        if num==176:\n            return 352\n        if num==177:\n            return 354\n        if num==178:\n            return 356\n        if num==179:\n            return 358\n        if num==180:\n            return 360\n        if num==181:\n            return 362\n        if num==182:\n            return 36"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def recur(n, nxt):\n        if n == 1 or n == 0:\n            return 1\n        elif n > 0:\n            return n * recur(n-1, nxt)\n        else:\n            return 0\n    return recur(num, 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    elif num == 0:\n        return 0\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    line = text.split(\"\\n\")\n    result = []\n    for l in line:\n        l = l.strip().upper()\n        if l[-1] in \"AEIOU\":\n            for c in l:\n                if c == \" \" or c.isupper():\n                    result.append(c)\n        else:\n            result.append(l)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs_list = []\n    text_split = text.split()\n    for i in text_split:\n        if i[-1] == 'ly':\n            if len(adverbs_list) == 0:\n                adverbs_list.append(i[:-1])\n            else:\n                if i[:-1] == adverbs_list[-1]:\n                    adverbs_list.append(i[:-1])\n        else:\n            if len(adverbs_list) == 0:\n                adverbs_list.append(i[:-1])\n            else:\n                if i[:-1] == adverbs_list[-1]:\n                    adverbs_list.append(i[:-1])\n    return adverbs_list\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    words = []\n    for i, word in enumerate(text.split()):\n        if word[-1] == 'ly':\n            words.append(word[:-1])\n    return words\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #Assign the initial values of the global variables\n    text = text.lower()\n    #Finds the suffix and the start position of the adverb ending with ly\n    suffix = ''\n    start = ''\n    #Creates a list of the suffixes and the start positions of each adverb ending with ly\n    for i in range(len(text)-2, -1, -1):\n        if text[i] == 'ly':\n            suffix = text[i]\n            start = i\n            break\n    #If there is a suffix, find the position where the suffix ends and the ending of ly\n    if suffix:\n        end = text.find(suffix)\n    #If there is no suffix, find the start position where the adverb starts\n        if start == -1:\n            start = 0\n        else:\n            start += len(suffix)\n    else:\n        start = len(text)-1\n    #Returns a string of the start and end positions of the adverb ending with ly and its suffix\n    return f'{start} {end} {suffix}'\ndef find_adverb_full(text):\n    '''\n    This function finds all the adverbs starting with ly and ending with lys (the verb ending with ly) in a given string\n    '''\n    #Finds the adverb ending with ly\n    adverb_ly = find_adverbs(text)\n    #Finds the first adverb ending with ly\n    adverb_ly_first = adverb_ly.split(' ')[0]\n    #Finds the suffix and the start position of the adverb ending with ly\n    adverb_ly_suffix = ''\n    adverb_ly_start = ''\n    #Creates a list of the suffixes and the start positions of each adverb ending with ly\n    for i in range(len(adverb_ly.split(' ')[1])):\n        if adverb_ly.split(' ')[1][i] == 'ly':\n            adverb_ly_suffix = adverb_ly.split(' ')[1][i]\n            adverb_ly_start = i\n            break\n    #If there is a suffix, find the position where the suffix ends and the ending of ly\n    if adverb_ly_suffix:\n        end = text.find(adverb_ly_suffix)\n    #If there is no suffix, find the start position where the adverb starts\n        if adverb_ly_start == -1:\n            adverb_ly_start = 0\n        else:\n            adverb_ly_start += len(adverb_ly_suffix)\n    else:\n        adverb_ly_start = len(text)-1\n    #Returns a string of the start and end positions of the adverb ending with ly and its suffix\n    return f'{adverb_ly_start} {adverb_ly_start} {adverb_ly_suffix}'\ndef find_adverb_count(text):\n    '''\n    This function finds all the adverbs starting with ly and ending with lys (the verb ending with ly) in a given string\n    '''\n    #Finds the adverb ending with ly\n    adverb_ly = find_adverbs(text)\n    #Finds the count of the adverb ending with ly\n    adverb_ly_count = adverb_ly.count('ly')\n    #Finds the first adverb ending with ly\n    adverb_ly_first = adverb_ly.split(' ')[0]\n    #Finds the suffix and the start position of the adverb ending with ly\n    adverb_ly_suffix = ''\n    adverb_ly_start = ''\n    #Creates a list of the suffixes and the start positions of each adverb ending with ly\n    for i in range(len(adverb_ly.split(' ')[1])):\n        if adverb_ly.split(' ')[1][i] == 'ly':\n            adverb_ly_suffix = adverb_ly.split(' ')[1][i]\n            adverb_ly_start = i\n            break\n    #If there is a suffix, find the position where the suffix ends and the ending of ly\n    if adverb_ly_suffix:\n        end = text.find(adverb_ly_suffix)\n    #If there is no suffix, find the start position where the adverb starts\n        if adverb_ly_start == -1:\n            adverb_ly_start = 0\n        else:\n            adverb_ly_start += len(adverb_ly_suffix)\n    else:\n        adverb_ly_start = len(text)-1\n    #Returns a string of the start and end positions of the adverb ending with ly and its suffix\n    return f'{adverb_ly_start} {adverb_ly_start} {adverb_ly_suffix}'\ndef find_verb(text):\n    '''\n    This function finds the verb ending with ly\n    '''\n    #Assign the initial values of the global variables\n    text = text.lower()\n    #Finds the suffix and the start position of the verb ending with ly\n    verb_ly = ''\n    verb_ly_start = 0\n    #Creates a list of the suffixes and the start positions of each verb ending with ly\n    for i in range(len(text)):\n        if text[i] == 'ly':\n            verb_ly = text[i]\n            verb_ly_start = i\n            break\n    #If there is a suffix, find the position where the suffix ends and the ending of ly\n    if verb_ly:\n        end = text.find(verb_ly)\n    #If there is no suffix, find the start position where the verb starts\n        if verb_ly_start == -1:\n            verb_ly_start = 0\n        else:\n            verb_ly_start += len(verb_ly)\n    #Returns a string of the start and end positions of the verb ending with ly\n    return f'{verb_ly_start} {verb_ly_start}'\ndef find_verb_count(text):\n    '''\n    This function finds the verb ending with ly and its position\n    '''\n    #Assign the initial values of the global variables\n    verb_ly = find_verb(text)\n    verb_ly_count = verb_ly.count('ly')\n    verb_ly_first = verb_ly.split(' ')[0]\n    #Finds the first verb ending with ly\n    verb_ly_first_count = verb_ly_first.count('ly')\n    #Finds the suffix and the start position of the verb ending with ly\n    verb_ly_suffix = ''\n    verb_ly_start = ''\n    #Creates a list of the suffixes and the start positions of each verb ending with ly\n    for i in range(len(verb_ly.split(' ')[1])):\n        if verb_ly.split(' ')[1][i] == 'ly':\n            verb_ly_suffix = verb_ly.split(' ')[1][i]\n            verb_ly_start = i\n            break\n    #If there is a suffix, find the position where the suffix ends and the ending of ly\n    if verb_ly_suffix:\n        end = text.find(verb_ly_suffix)\n    #If there is no suffix, find the start position where the verb starts\n        if verb_ly_start == -1:\n            verb_ly_start = 0\n        else:\n            verb_ly_start += len(verb_ly_suffix)\n    else:\n        verb_ly_start = len(text)-1\n    #Returns a string of the start and end positions of the verb ending with ly and its suffix\n    return f'{verb_ly_start} {verb_ly_start} {verb_ly_suffix}'\ndef find_word(text):\n    '''\n    This function finds the word ending with ly\n    '''\n    #Assign the initial values of the global variables\n    text = text.lower()\n    #Finds the suffix and the start position of the word ending with ly\n    word_ly = ''\n    word_ly_start = 0\n    #Creates a list of the suffixes and the start positions of each word ending with ly\n    for i in range(len(text)):\n        if text[i] == 'ly':\n            word_ly = text[i]\n            word_ly_start = i\n            break\n    #If there is a suffix, find the position where the suffix ends and the ending of ly\n    if word_ly:\n        en"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] == 'y' and text[i+1] == 'y' and text[i+2] == 'l':\n            adverbs.append([i, i+3])\n        if text[i] == 'l' and text[i+1] == 'y' and text[i+2] == 'r':\n            adverbs.append([i, i+3])\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = {}\n    for i in range(len(text)):\n        if text[i] == '-':\n            adverbs['ly'] = i\n        if text[i] == '-ly':\n            adverbs['ly'] = i\n        if text[i] == '-lyn':\n            adverbs['lyn'] = i\n        if text[i] == 'ly':\n            adverbs['ly'] = i\n        if text[i] == 'lyn':\n            adverbs['lyn'] = i\n        if text[i] == 'lyr':\n            adverbs['lyr'] = i\n        if text[i] == 'lyr':\n            adverbs['lyr'] = i\n        if text[i] == 'lyrr':\n            adverbs['lyrr'] = i\n        if text[i] == 'lyrrr':\n            adverbs['lyrrr'] = i\n        if text[i] == 'lyrr':\n            adverbs['lyrr'] = i\n        if text[i] == 'lyrr':\n            adverbs['lyrr'] = i\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pos = -1\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'e':\n            pos = i\n        if text[i] == 'e' and text[i+1] == 'i':\n            pos = i\n        if text[i] == 'i' and text[i+1] == 'o':\n            pos = i\n        if text[i] == 'o' and text[i+1] == 'u':\n            pos = i\n        if pos >= 0:\n            adverbs.append(text[pos:pos+2])\n    return adverbs\ndef find_dages(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    dages = []\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'e':\n            dages.append(text[i:i+3])\n        if text[i] == 'e' and text[i+1] == 'i':\n            dages.append(text[i:i+3])\n        if text[i] == 'i' and text[i+1] == 'o':\n            dages.append(text[i:i+3])\n        if text[i] == 'o' and text[i+1] == 'u':\n            dages.append(text[i:i+3])\n        if pos >= 0:\n            adverbs.append(text[pos:pos+2])\n    return adverbs\ndef find_suffixes(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    suffixes = []\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'e':\n            suffixes.append(text[i:i+3])\n        if text[i] == 'e' and text[i+1] == 'i':\n            suffixes.append(text[i:i+3])\n        if text[i] == 'i' and text[i+1] == 'o':\n            suffixes.append(text[i:i+3])\n        if text[i] == 'o' and text[i+1] == 'u':\n            suffixes.append(text[i:i+3])\n        if pos >= 0:\n            adverbs.append(text[pos:pos+2])\n    return adverbs\ndef find_punctuation(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    punctuation = []\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'e':\n            punctuation.append(text[i:i+3])\n        if text[i] == 'e' and text[i+1] == 'i':\n            punctuation.append(text[i:i+3])\n        if text[i] == 'i' and text[i+1] == 'o':\n            punctuation.append(text[i:i+3])\n        if text[i] == 'o' and text[i+1] == 'u':\n            punctuation.append(text[i:i+3])\n        if pos >= 0:\n            adverbs.append(text[pos:pos+2])\n    return adverbs\ndef find_prefixes(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    prefixes = []\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'e':\n            prefixes.append(text[i:i+3])\n        if text[i] == 'e' and text[i+1] == 'i':\n            prefixes.append(text[i:i+3])\n        if text[i] == 'i' and text[i+1] == 'o':\n            prefixes.append(text[i:i+3])\n        if text[i] == 'o' and text[i+1] == 'u':\n            prefixes.append(text[i:i+3])\n        if pos >= 0:\n            adverbs.append(text[pos:pos+2])\n    return adverbs\ndef find_suffixes(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    suffixes = []\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'e':\n            suffixes.append(text[i:i+3])\n        if text[i] == 'e' and text[i+1] == 'i':\n            suffixes.append(text[i:i+3])\n        if text[i] == 'i' and text[i+1] == 'o':\n            suffixes.append(text[i:i+3])\n        if text[i] == 'o' and text[i+1] == 'u':\n            suffixes.append(text[i:i+3])\n        if pos >= 0:\n            adverbs.append(text[pos:pos+2])\n    return adverbs\ndef find_q(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    q = []\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'e':\n            q.append(text[i:i+3])\n        if text[i] == 'e' and text[i+1] == 'i':\n            q.append(text[i:i+3])\n        if text[i] == 'i' and text[i+1] == 'o':\n            q.append(text[i:i+3])\n        if text[i] == 'o' and text[i+1] == 'u':\n            q.append(text[i:i+3])\n        if pos >= 0:\n            adverbs.append(text[pos:pos+2])\n    return adverbs\ndef find_cyr(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    cyr = []\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'e':\n            cyr.append(text[i:i+3])\n        if text[i] == 'e' and text[i+1] == 'i':\n            cyr.append(text[i:i+3])\n        if text[i] == 'i' and text[i+1] == 'o':\n            cyr.append(text[i:i+3])\n        if text[i] == 'o' and text[i+1] == 'u':\n            cyr.append(text[i:i+3])\n        if pos >= 0:\n            adverbs.append(text[pos:pos+2])\n    return adverbs\ndef find_an(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    an = []\n    for i in range(len(text)):\n        if text[i] == 'a' and text[i+1] == 'e':\n            an.append(text[i:i+3])\n        if text[i] == 'e' and text[i+1] == 'i':\n            an.append(text[i:i+3])\n        if text[i] == 'i' and text[i+1] == 'o':\n            an.append(text[i:i+3])"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    find_ly = 'ly'\n    regex = 'ly' + '(?=\\\\b\\\\D)'\n    pos_ly = text.find(find_ly)\n    while pos_ly!= -1:\n        pos_ly = text.find(find_ly, pos_ly + len(find_ly))\n        if pos_ly!= -1 and pos_ly < len(text):\n            break\n    if pos_ly == -1:\n        return None\n    pos_ly = text.find('ly', pos_ly)\n    if pos_ly!= -1:\n        text = text[:pos_ly]\n    if 'ly' in text:\n        text = text.replace('ly', 'ly')\n    text = text.replace('ly', 'ly')\n    text = re.sub(regex, '', text)\n    text = text.replace('ly', 'ly')\n    return text\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #defining the functions\n    ly_sub = re.search('ly', text)\n    ly_pos = 0\n    for i in range(len(text)):\n        if ly_sub:\n            ly_pos += 1\n            if ly_sub.start() + 1 >= len(text):\n                break\n            else:\n                if ly_sub.start() + 1 == text[ly_pos:ly_pos + 2].find(\"ly\"):\n                    break\n    return ly_pos\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(len(text) - 1):\n        if text[i:i + 3] == \"ly\" and text[i + 2] == \"e\":\n            adverbs.append((i, i + 3))\n    return adverbs\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a priority queue to store the items.\n    pri_queue = []\n    # Create a dictionary to map the item to the priority.\n    items_to_priority = {}\n    for item in items:\n        if item in items_to_priority:\n            items_to_priority[item] += 1\n        else:\n            items_to_priority[item] = 1\n    # Sort the items.\n    items_to_priority = sorted(items_to_priority.items(),key=lambda x: x[1])\n    \n    # Create an empty heap for the result.\n    result = []\n    # Put the items in the priority queue.\n    for item in items_to_priority:\n        heapq.heappush(result,item[0])\n    \n    # Create a heap of n items.\n    heapq.heapify(result)\n    # Check whether there are still items to process.\n    while len(result) > n:\n        item = heapq.heappop(result)\n        heapq.heapify(result)\n        heapq.heappush(result,item)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # init the maxheap\n    heap = []\n    # compute the items\n    for i in items:\n        heapq.heappush(heap,i[1])\n    \n    # get the n most expensive items\n    res = []\n    for _ in range(n):\n        res.append(heapq.heappop(heap))\n    \n    return res\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(items[i][0],items[i][1]))\n    \n    for _ in range(n):\n        y = heapq.heappop(heap)\n        y = y[1]\n        for i in range(n):\n            if items[i][1] > y:\n                heapq.heappush(heap,(items[i][0],items[i][1]))\n                y = items[i][1]\n        y = heap[0]\n        heapq.heapreplace(heap,(y,items[i][1]))\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if item[1]<n:\n            heapq.heappush(heap,-item[1])\n            \n    return heap\ndef cost_of_an_item(items,n):\n    '''\n    Write a function to find the total cost of an item given a dataset of items and the number of people.\n    '''\n    total=0\n    for item in items:\n        total+=item[1]\n    return total\ndef main():\n    '''\n    Read the inputs and then print the cheapest and most expensive item.\n    '''\n    items =[]\n    with open('input.txt','r') as f:\n        for line in f:\n            line=line.rstrip().split(\" \")\n            items.append([int(line[0]),int(line[1])])\n    print(expensive_items(items,5))\n    print(cost_of_an_item(items,5))\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items[i][1])\n    for i in range(n):\n        if heap:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(n):\n        heapq.heappush(items,heapq.heappop(items)+(i+1)*heapq.heappop(items))\n    return items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create an empty dictionary to store the item cost\n    item_cost = {}\n    # Create a heap to store the item cost\n    heap = []\n    # Initialize the heap with the first item\n    heapq.heappush(heap,(0,0))\n    # Pop a heap item from the heap until the heap is empty\n    while heap:\n        # Get the item cost from the heap\n        cost,item = heapq.heappop(heap)\n        # If the item cost is greater than the current cost\n        if item_cost.get(item) is None:\n            # If the current cost is greater than the previous cost\n            # append the item cost to the current cost list\n            if cost > cost:\n                # Add the current cost and the item cost to the heap\n                heapq.heappush(heap,(cost,item))\n        # If the item cost is less than the current cost\n        # append the item cost to the heap\n        elif cost < item_cost.get(item):\n            heapq.heappush(heap,(item_cost[item],item))\n    # Return the n most expensive items\n    return heapq.nlargest(n,heap)"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heappush(heap,(-items[0][0], 0, items[0][1]))\n    for i in range(1,n):\n        heapq.heappush(heap,(-items[i][0], i, items[i][1]))\n    total_exp = 0\n    i = 0\n    while heap:\n        value,i,total = heapq.heappop(heap)\n        total_exp += value\n        if i < n:\n            heapq.heappush(heap,(-value,i,total))\n    return total_exp\ndef is_permutation(s1,s2):\n    '''\n    Write a function to check whether two strings are a permutation.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            return False\n    return True\ndef is_palindrome(s):\n    '''\n    Write a function to check whether a string is a palindrome.\n    '''\n    return s == s[::-1]\ndef is_anagram(str1,str2):\n    '''\n    Write a function to check whether two strings are anagrams.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\ndef is_subsequence(str1,str2):\n    '''\n    Write a function to check whether two strings are subsequences of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\ndef is_word_permutation(word,word_list):\n    '''\n    Write a function to check whether a word is a permutation of the given word_list.\n    '''\n    return word in word_list\ndef is_pangram(str1,str2):\n    '''\n    Write a function to check whether two strings are anagrams of each other.\n    '''\n    return is_anagram(str1,str2) and is_subsequence(str1,str2) and is_palindrome(str1) and is_palindrome(str2)\ndef is_valid_password(password):\n    '''\n    Write a function to check if a password is a valid password.\n    '''\n    char_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    chars_left = [' ', '$', '@', '#', '%', '^', '&', '*', '(', ')', '_', '+', '-', '=', '<', '>', '?', '`', '[', ']', '{', '}']\n    chars_punct = ['!', '#', '%', '^', '&', '*', '(', ')', '_', '+', '-', '=', '<', '>', '?', '`', '[', ']', '{', '}']\n    chars_num = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n    count = 0\n    for char in password:\n        if char in chars_num:\n            count += 1\n    if count >= 3:\n        return True\n    for char in chars_list:\n        if char in chars_left:\n            count += 1\n        elif char in chars_punct:\n            count -= 1\n    if count >= 2:\n        return True\n    for char in char_list:\n        if char in password:\n            count += 1\n        elif char in chars_punct:\n            count -= 1\n    if count >= 2:\n        return True\n    return False\ndef password_is_valid(password):\n    '''\n    Write a function to check whether a password is valid or not.\n    '''\n    if len(password) == 0:\n        return True\n    if len(password) < 3 or not password.isdigit():\n        return False\n    elif not password[0].isdigit():\n        return False\n    elif not password[1].isdigit():\n        return False\n    elif not password[2].isdigit():\n        return False\n    elif not password[3].isdigit():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n==0:\n        return None\n    h=[]\n    for item in items:\n        heapq.heappush(h,item[1])\n    heapq.heapify(h)\n    print(h)\n    heapq.heapify(h)\n    print(h)\n    for i in range(n):\n        heapq.heappop(h)\n    print(h)\n    return h\n        \n        \ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x:x[1])\n    print(items)\n    print(len(items))\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item[1])\n    heapq.heapify(heap)\n    print(heap)\n    for i in range(n):\n        heapq.heappop(heap)\n    print(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,items[i][1])\n    # print(heap)\n    for i in range(n):\n        # print(heap[i])\n        for j in range(i):\n            if items[i][1] < items[j][1]:\n                heapq.heappushpop(heap,items[i][0])\n        # print(heap)\n    # print(heap)\n    return heap\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = l[0:n]\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(len(l))]\n    \n    \ndef run_quicksort(l):\n    '''\n    Write a python function to sort the list.\n    '''\n    if len(l) < 2:\n        return l\n    \n    # split at the midpoint\n    mid = len(l) // 2\n    \n    left = run_quicksort(l[:mid])\n    right = run_quicksort(l[mid:])\n    \n    return quicksort_merge(left, right)\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l[0:n]=l[0:n][::-1]\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # YOUR CODE HERE\n    l.insert(0,l[0])\n    return l\n    \ndef merge_two_lists(l, r):\n    '''\n    Write a python function to merge two lists into a new list.\n    '''\n    # YOUR CODE HERE\n    if len(l)==0:\n        return r\n    elif len(r)==0:\n        return l\n    else:\n        p = 0\n        while p<len(l):\n            if l[p] < r[p]:\n                l[p]=l[p]+l[p]\n                l.pop(p)\n            else:\n                r[p]=r[p]+r[p]\n                r.pop(p)\n            p=p+1\n    return l\n    \ndef main():\n    '''\n    main function\n    '''\n    l=[5,7,8,9,10]\n    print(split_Arr(l,4))\n    print(merge_two_lists(l,l))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n],l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n],l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = list(l)\n    for i in range(len(l)):\n        l[i] = l[i][:n]\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    result = []\n    for i in range(0, n):\n        result.append(l[i])\n    return result\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n] + l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if len(listx) == 0:\n        return ()\n    return (tuple(listx[0]),) + list_tuple(listx[1:])\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if type(listx)!= list:\n        return TypeError('expected a list')\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #return tuple(listx)\n    return tuple(listx[0],listx[1])\n    \ndef is_number(val):\n    '''\n    This function returns True if val is a float, or False otherwise.\n    '''\n    try:\n        float(val)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(listx)\n    print(type(listx))\n    print(listx[0])\n    print(tuple(listx))\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for element in listx:\n        tup = tup + (element,)\n    return tup\n    \ndef list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = ()\n    for element in listx:\n        tup = tup + (element,)\n    return tup\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Your code here\n    return nums[0]-nums[-1]\n    \n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return \"\"\n    diff = nums[0] - min(nums)\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i-1] < diff:\n            diff = nums[i] - nums[i-1]\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize result to be returned\n    result = 0\n    # Traverse through the given list\n    for num in range(0, len(nums) - 1):\n        if nums[num] > nums[num + 1]:\n            result += nums[num + 1] - nums[num]\n    return result\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    for i in range(0, len(nums)):\n        if nums[i] < nums[i-1]:\n            return nums[i-1] - nums[i]\n    return nums[-1] - nums[0]\n    \n    \nprint(big_diff([2,3,4,1,4]))\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    size = len(nums)\n    if size == 1:\n        return nums[0] - nums[0]\n    else:\n        return max(nums[0], nums[-1]) - min(nums[0], nums[-1])\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #first find the max_val\n    max_val = max(nums)\n    \n    #find the smallest val\n    small_val = min(nums)\n    \n    #find the difference\n    diff = max_val - small_val\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = []\n    for num in nums:\n        diff.append(num - min(nums))\n    return max(diff)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    for i in range(len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n        elif nums[i] < min_num:\n            min_num = nums[i]\n    print(max_num - min_num)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n = len(nums)\n    max = max(nums)\n    min = min(nums)\n    diff = max - min\n    return diff\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return a*b+a+b==a*a+b*b\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a <= 0:\n        print(a, 'is less than 0')\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b**2 + a**2 == 1:\n        return [a,b]\n    if b**2 + a**2 > 1:\n        return [a,b]\n    if b**2 + a**2 < 1:\n        return [a,b]\n    if b**2 + a**2 == 0:\n        return [a,b]\n    if b**2 + a**2 < 0:\n        return [a,b]\n    if b**2 + a**2 < -1:\n        return [a,b]\n    if b**2 + a**2 == -1:\n        return [a,b]\n    \n    if b**2 - a**2 > 1:\n        return [a,b]\n    if b**2 - a**2 < 1:\n        return [a,b]\n    if b**2 - a**2 == 0:\n        return [a,b]\n    if b**2 - a**2 < 0:\n        return [a,b]\n    if b**2 - a**2 < -1:\n        return [a,b]\n    \n    if b**2 - a**2 == -1:\n        return [a,b]\n    if b**2 - a**2 == -2:\n        return [a,b]\n    \n    if b**2 - a**2 < -1:\n        return [a,b]\n    if b**2 - a**2 < 0:\n        return [a,b]\n    if b**2 - a**2 == 0:\n        return [a,b]\n    \n    if b**2 - a**2 > 1:\n        return [a,b]\n    if b**2 - a**2 < 1:\n        return [a,b]\n    if b**2 - a**2 == 1:\n        return [a,b]\n    \n    if b**2 - a**2 < -2:\n        return [a,b]\n    if b**2 - a**2 < -1:\n        return [a,b]\n    if b**2 - a**2 > -1:\n        return [a,b]\n    \n    if b**2 - a**2 > 1:\n        return [a,b]\n    if b**2 - a**2 < -2:\n        return [a,b]\n    if b**2 - a**2 == 0:\n        return [a,b]\n    if b**2 - a**2 == -2:\n        return [a,b]\n    \n    if b**2 - a**2 < -2:\n        return [a,b]\n    if b**2 - a**2 == 1:\n        return [a,b]\n    \n    return []\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = b**2 - 4*a*b\n    if c == 0:\n        return [a, b]\n    elif c < 0:\n        return []\n    else:\n        return [a, b, perfect_squares(a+b, c//2), perfect_squares(a-b, c//2), perfect_squares(a, c//2), perfect_squares(a, -c//2), perfect_squares(a, c//2), perfect_squares(a+b, c-2), perfect_squares(a-b, c-2)]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #get the sum of the squares of the two numbers\n    S = a + b\n    \n    #get the index of the smallest square\n    m = min(a, b)\n    n = max(a, b)\n    \n    #if a is even, return the square root\n    if (m%2 == 0) and (n%2 == 0):\n        return (S**(1/2))\n    \n    #if a is odd, return the square root of m/2 + n/2\n    else:\n        return ((S**(1/2))*(m/2) + (S**(1/2))*(n/2))\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return True\n    if a == 0:\n        return False\n    if b == 0:\n        return False\n    if a == b:\n        return True\n    if a < b:\n        a, b = b, a\n    if b < a:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b < a:\n        return\n    if a == b:\n        return [a]\n    \n    r1 = perfect_squares(a, a + 1)\n    r2 = perfect_squares(a, b)\n    \n    result = []\n    \n    for x in r1:\n        if a ** 2 + (b + 1) ** 2 + (b + 1) ** 2 - a ** 2 - (b + 1) ** 2 < 0:\n            break\n        if a ** 2 + (b + 1) ** 2 + (b + 1) ** 2 - a ** 2 - (b + 1) ** 2 > 0:\n            break\n        for y in r2:\n            if a ** 2 + (b + 1) ** 2 + (b + 1) ** 2 - a ** 2 - (b + 1) ** 2 < 0:\n                break\n            if a ** 2 + (b + 1) ** 2 + (b + 1) ** 2 - a ** 2 - (b + 1) ** 2 > 0:\n                break\n            if a ** 2 + (b + 1) ** 2 + (b + 1) ** 2 - a ** 2 - (b + 1) ** 2 == 0:\n                break\n            if (a ** 2 + (b + 1) ** 2 + (b + 1) ** 2 - a ** 2 - (b + 1) ** 2) % 1 == 0:\n                break\n            if (a ** 2 + (b + 1) ** 2 + (b + 1) ** 2 - a ** 2 - (b + 1) ** 2) == 0:\n                break\n            result.append(x + y)\n    \n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b % a == 0:\n        print(\"The input does not have a perfect square\")\n        return\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    a = abs(a)\n    b = abs(b)\n    if a == 0:\n        return [a]\n    if b == 0:\n        return []\n    \n    if a < b:\n        a, b = b, a\n    \n    result = []\n    for num in perfect_squares(a, b):\n        if a + b == 2 * num:\n            result.append(num)\n            \n    return result\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a=cmath.polar(x)\n    b=cmath.polar(y)\n    return a,b\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = y/2\n    theta = cmath.phase(x)\n    theta = (cmath.phase(r))*cmath.pi/180\n    x = (r * math.cos(theta))\n    y = (r * math.sin(theta))\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.rect(cmath.pi, x, y)\n    return r.real, r.imag\n    \ndef polar_rect_list(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = []\n    for i in range(len(x)):\n        r.append(cmath.rect(cmath.pi, x[i], y[i]))\n    return r\n    \ndef polar_rect_from_rad(r):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x, y = cmath.polar(r)\n    return x, y\n    \ndef polar_rect_from_rad_list(r):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x, y = []\n    for i in range(len(r)):\n        x.append(cmath.polar(r[i]))\n    return x, y\n    \ndef polar_rect_to_rad(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = cmath.polar(x)\n    y = cmath.polar(y)\n    return x[0], y[0]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rx=0\n    ry=0\n    r_rad=0\n    r_rad_a=0\n    r_rad_b=0\n    if x>0:\n        rx=x\n        r_rad+=cmath.polar(rx*x)\n        rx=x\n    else:\n        rx=x*-1\n        r_rad_a=rx*x\n    if y>0:\n        ry=y\n        r_rad+=cmath.polar(ry*y)\n        ry=y\n    else:\n        ry=y*-1\n        r_rad_b=ry*y\n    r_rad=cmath.polar(r_rad)\n    r_rad_a=cmath.polar(r_rad_a)\n    r_rad_b=cmath.polar(r_rad_b)\n    return r_rad,r_rad_a,r_rad_b\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rx=0\n    ry=0\n    r_rad=0\n    r_rad_a=0\n    r_rad_b=0\n    if x>0:\n        rx=x\n        r_rad+=cmath.polar(rx*x)\n        rx=x\n    else:\n        rx=x*-1\n        r_rad_a=rx*x\n    if y>0:\n        ry=y\n        r_rad+=cmath.polar(ry*y)\n        ry=y\n    else:\n        ry=y*-1\n        r_rad_b=ry*y\n    r_rad=cmath.polar(r_rad)\n    r_rad_a=cmath.polar(r_rad_a)\n    r_rad_b=cmath.polar(r_rad_b)\n    return r_rad,r_rad_a,r_rad_b\ndef polar_rect_3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rx=0\n    ry=0\n    r_rad=0\n    r_rad_a=0\n    r_rad_b=0\n    if x>0:\n        rx=x\n        r_rad+=cmath.polar(rx*x)\n        rx=x\n    else:\n        rx=x*-1\n        r_rad_a=rx*x\n    if y>0:\n        ry=y\n        r_rad+=cmath.polar(ry*y)\n        ry=y\n    else:\n        ry=y*-1\n        r_rad_b=ry*y\n    r_rad=cmath.polar(r_rad)\n    r_rad_a=cmath.polar(r_rad_a)\n    r_rad_b=cmath.polar(r_rad_b)\n    return r_rad,r_rad_a,r_rad_b\ndef polar_rect_4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rx=0\n    ry=0\n    r_rad=0\n    r_rad_a=0\n    r_rad_b=0\n    if x>0:\n        rx=x\n        r_rad+=cmath.polar(rx*x)\n        rx=x\n    else:\n        rx=x*-1\n        r_rad_a=rx*x\n    if y>0:\n        ry=y\n        r_rad+=cmath.polar(ry*y)\n        ry=y\n    else:\n        ry=y*-1\n        r_rad_b=ry*y\n    r_rad=cmath.polar(r_rad)\n    r_rad_a=cmath.polar(r_rad_a)\n    r_rad_b=cmath.polar(r_rad_b)\n    return r_rad,r_rad_a,r_rad_b\ndef polar_rect_5(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rx=0\n    ry=0\n    r_rad=0\n    r_rad_a=0\n    r_rad_b=0\n    if x>0:\n        rx=x\n        r_rad+=cmath.polar(rx*x)\n        rx=x\n    else:\n        rx=x*-1\n        r_rad_a=rx*x\n    if y>0:\n        ry=y\n        r_rad+=cmath.polar(ry*y)\n        ry=y\n    else:\n        ry=y*-1\n        r_rad_b=ry*y\n    r_rad=cmath.polar(r_rad)\n    r_rad_a=cmath.polar(r_rad_a)\n    r_rad_b=cmath.polar(r_rad_b)\n    return r_rad,r_rad_a,r_rad_b\ndef polar_rect_6(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rx=0\n    ry=0\n    r_rad=0\n    r_rad_a=0\n    r_rad_b=0\n    if x>0:\n        rx=x\n        r_rad+=cmath.polar(rx*x)\n        rx=x\n    else:\n        rx=x*-1\n        r_rad_a=rx*x\n    if y>0:\n        ry=y\n        r_rad+=cmath.polar(ry*y)\n        ry=y\n    else:\n        ry=y*-1\n        r_rad_b=ry*y\n    r_rad=cmath.polar(r_rad)\n    r_rad_a=cmath.polar(r_rad_a)\n    r_rad_b=cmath.polar(r_rad_b)\n    return r_rad,r_rad_a,r_rad_b\ndef polar_rect_7(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rx=0\n    ry=0\n    r_rad=0\n    r_rad_a=0\n    r_rad_b=0\n    if x>0:\n        rx=x\n        r_rad+=cmath.polar(rx*x)\n        rx=x\n    else:\n        rx=x*-1\n        r_rad_a=rx*x\n    if y>0:\n        ry=y\n        r_rad+=cmath.polar(ry*y)\n        ry=y\n    else:\n        ry=y*-1\n        r_rad_b=ry*y\n    r_rad=cmath.polar(r_rad)\n    r_rad_a=cmath.polar(r_rad_a)\n    r_rad_b=cmath.polar(r_rad_b)\n    return r_rad,r_rad_a,r_rad_b\ndef polar_rect_8(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rx=0\n    ry=0\n    r_rad=0\n    r_rad_a=0\n    r_rad_b=0\n    if x>0:\n        rx=x\n        r_rad+=cmath.polar(rx*x)\n        rx=x\n    else:\n        rx=x*-1\n        r_rad_a=rx*x\n    if y>0:\n        ry=y\n        r_rad+=cmath.polar(ry*y)\n        ry=y\n    else:\n        ry=y*-1\n        r_rad_b=ry*y\n    r_rad=cmath.polar(r_rad)\n    r_rad_a=cmath.polar(r_rad_a)\n    r_rad_b=cmath.polar(r_rad_b)\n    return r_rad,r_rad_a,r_rad_b\ndef polar_rect_9(x,y):\n    '"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = (x**2 + y**2)**0.5\n    return a\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    L = abs(x)\n    B = abs(y)\n    C = abs(y)\n    # Check the sign of the first argument\n    # If the sign of the first argument is negative, L is negative, B is positive and C is negative\n    if L<0:\n        L = -L\n        x = -x\n        y = -y\n    return (L,B,C)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #<----------------------#\n    # function to create quadrant\n    # ---------------------------------#\n    def quadrant(x,y):\n        if x >= 0 and y >= 0:\n            return 1\n        elif x >= 0 and y <= 0:\n            return 2\n        elif x <= 0 and y <= 0:\n            return 3\n        elif x <= 0 and y >= 0:\n            return 4\n        elif x >= 0 and y >= 0:\n            return 5\n    #-------------------------------------------------------------------#\n    # polar coordinates to rectangle coordinates\n    #\n    #-------------------------------------------------------------------#\n    x1, y1 = cmath.polar(x)\n    x2, y2 = cmath.polar(y)\n    rect = quadrant(x1,y1) + quadrant(x2,y2)\n    return rect\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    def polar_to_rect(theta, phi):\n        '''\n        Convert polar coordinates to rectangular coordinates.\n        '''\n        return x*cmath.cos(theta) + y*cmath.sin(theta), x*cmath.sin(theta) + y*cmath.cos(theta)\n    theta, phi = polar_to_rect(phi, theta)\n    return theta, phi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rad = cmath.rect(0.0,1.0)\n    polar = cmath.rect(x,y)\n    rect = polar.real ** 2 + polar.imag ** 2\n    return (rad.real + rect) * (1j)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0:\n        if y>0:\n            return 0,0\n        if y<0:\n            return 0,1\n    if y==0:\n        if x>0:\n            return 0,0\n        if x<0:\n            return 0,1\n    x = cmath.polar(x)\n    y = cmath.polar(y)\n    return x[0],y[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList[0],newList[-1])\n    newList[0],newList[-1]= newList[-1],newList[0]\n    \ndef merge_List(new_list):\n    '''\n    Write a python function to merge two sorted lists into a new list.\n    '''\n    i=j=0\n    new_list.append(0)\n    new_list.append(0)\n    while(i<len(new_list)):\n        if new_list[i]==new_list[i+1]:\n            new_list[j] = new_list[i]\n            j+=1\n            i+=2\n        else:\n            new_list[j] = new_list[i]\n            i+=1\n            j+=1\n    return new_list\n        "
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"The new list is: \")\n    print(newList)\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    print(\"The new list after swapping is: \")\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.sort()\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Remove the first element and return newList\n    newList.pop(0)\n    newList.pop()\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    tempList = newList[:]\n    tempList[0],tempList[-1] = tempList[-1],tempList[0]\n    return tempList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.reverse()\n    newList.reverse()\n    print(\"The reversed list is:\", newList)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = newList[1:] + newList[:1]\n    return new_list\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \nprint(swap_List([1,2,3,4,5]))\nprint(swap_List([1,5,3,2,4]))"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    print(n,k)\n    c=0\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            c=c+j**i\n    return c\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return 1.0/(1.0+math.factorial(n-k))\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    k = k-1\n    return (n*(pow(n,k)*(n-k))/pow(n,k+1))\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeffs = []\n    i = 1\n    while(i <= k):\n        coeffs.append(i)\n        i += 1\n    coeffs.reverse()\n    return sum(coeffs)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return binomial_Coeff(-n,k)\n    return (binomial_Coeff(n-1,k-1) * binomial_Coeff(n-1,k))\n    \n    \ndef binomial_Coeff(n,k): \n    '''\n    Write a python function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    if n < 0:\n        return binomial_Coeff(-n,k)\n    return (binomial_Coeff(n-1,k-1) * binomial_Coeff(n-1,k))\n    \n    \ndef binomial_Coeff_Calc(n,k):\n    '''\n    Write a python function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    return (binomial_Coeff_Calc(n-1,k-1) * binomial_Coeff_Calc(n-1,k))\n    \n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(n):\n        if i==0:\n            result = result + k\n        else:\n            result = result * k\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==k==0: return 1\n    elif n==k==1: return 0\n    elif n==k==2: return 1 if k==0 else 0\n    elif n==k==3: return 1 if k==1 else 0\n    elif n==k==4: return 0 if k==0 else 1\n    else: return binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    sum = 0\n    for i in range(1,k+1):\n        sum += i**n * (i**(k-n))\n    return sum\n    \ndef binomial_coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    sum = 0\n    for i in range(1,k+1):\n        sum += i**n * (i**(k-n))\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    b = 1\n    x = 0\n    for i in range(n):\n        x = b * x + k**i\n        b = b * (i+1)\n    return x\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<=0: \n        return 0\n    elif k==0: \n        return 1\n    elif k==1: \n        return 0\n    else: \n        return binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1) \n    \n    \ndef get_binomial_coeff(n,k): \n    '''\n    Get the binomial coefficients of a given number of terms and a number of powers.\n    '''\n    if n<=0: \n        return None\n    elif k==0: \n        return 1\n    elif k==1: \n        return 0\n    else: \n        return get_binomial_coeff(n-1,k) + get_binomial_coeff(n-1,k-1)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$', '', ip)\n    \n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip = [int(x) for x in ip]\n    ip.reverse()\n    return '.'.join(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.strip()\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.strip()\n    return ip.lstrip('0')\ndef replace_empty_strings(text):\n    '''\n    Replace any empty string in a text with \" \"\n    '''\n    text=text.replace(\"\",\" \")\n    text=text.replace(\" \",\" \")\n    return text\ndef remove_invalid_chars(text):\n    '''\n    Replace any invalid characters in a text with a space\n    '''\n    text=text.replace(\"(\",\" \")\n    text=text.replace(\")\",\" \")\n    text=text.replace(\"'\",\" \")\n    text=text.replace(\",\",\" \")\n    text=text.replace(\".\",\",\")\n    text=text.replace(\"-\",\" \")\n    text=text.replace(\"/\",\" \")\n    text=text.replace(\"#\",\" \")\n    text=text.replace(\"$\",\" \")\n    text=text.replace(\"&\",\" \")\n    text=text.replace(\"<\",\" \")\n    text=text.replace(\">\",\" \")\n    text=text.replace(\">\",\" \")\n    text=text.replace(\"|\",\" \")\n    text=text.replace(\"]\",\" \")\n    text=text.replace(\"[\",\" \")\n    text=text.replace(\"&\",\" \")\n    text=text.replace(\"$\",\" \")\n    text=text.replace(\"*\",\" \")\n    text=text.replace(\"+\",\" \")\n    text=text.replace(\"!\", \" \")\n    text=text.replace(\"_\",\" \")\n    text=text.replace(\"/\",\" \")\n    text=text.replace(\"'\",\" \")\n    return text\ndef remove_k_words(text):\n    '''\n    Replace any word with a space and keep the rest of the word intact\n    '''\n    text=text.replace(\" \",\"\")\n    return text\ndef remove_special_chars(text):\n    '''\n    Replace any special characters with a space\n    '''\n    text=text.replace(\"'\",\"\")\n    return text\ndef remove_punct(text):\n    '''\n    Remove any punctuation from the text\n    '''\n    text=text.replace(\".\",\"\")\n    text=text.replace(\",\",\" \")\n    text=text.replace(\"?\",\"\")\n    text=text.replace(\"!\", \" \")\n    return text\ndef remove_non_ascii(text):\n    '''\n    Remove any non-ascii characters\n    '''\n    text=text.encode('ascii', errors='ignore').decode('ascii')\n    return text\ndef remove_abbreviated_words(text):\n    '''\n    Remove any words that contain an abbreviation\n    '''\n    text=text.split()\n    text=remove_invalid_chars(text)\n    text=remove_invalid_chars(text)\n    text=remove_empty_strings(text)\n    text=remove_empty_strings(text)\n    text=remove_punct(text)\n    text=remove_k_words(text)\n    text=remove_special_chars(text)\n    text=remove_punct(text)\n    text=remove_non_ascii(text)\n    return text\ndef remove_abbreviation_words(text):\n    '''\n    Remove any words containing an abbreviation\n    '''\n    text=text.split()\n    text=remove_invalid_chars(text)\n    text=remove_invalid_chars(text)\n    text=remove_empty_strings(text)\n    text=remove_empty_strings(text)\n    text=remove_punct(text)\n    text=remove_k_words(text)\n    text=remove_special_chars(text)\n    text=remove_punct(text)\n    text=remove_non_ascii(text)\n    return text\ndef remove_all_but_one_non_special_character(text):\n    '''\n    Remove any words that contain the characters '?' and '!', and\n    replace them with an underscore\n    '''\n    text=text.split()\n    text=remove_invalid_chars(text)\n    text=remove_invalid_chars(text)\n    text=remove_empty_strings(text)\n    text=remove_empty_strings(text)\n    text=remove_punct(text)\n    text=remove_k_words(text)\n    text=remove_special_chars(text)\n    text=remove_punct(text)\n    text=remove_non_ascii(text)\n    text=remove_abbreviation_words(text)\n    return text\ndef remove_abbreviation_words_with_only_one_special_character(text):\n    '''\n    Remove any words containing the characters '?' and '!', and\n    replace them with an underscore\n    '''\n    text=text.split()\n    text=remove_invalid_chars(text)\n    text=remove_invalid_chars(text)\n    text=remove_empty_strings(text)\n    text=remove_empty_strings(text)\n    text=remove_punct(text)\n    text=remove_k_words(text)\n    text=remove_special_chars(text)\n    text=remove_punct(text)\n    text=remove_non_ascii(text)\n    text=remove_all_but_one_non_special_character(text)\n    return text\ndef remove_numbers(text):\n    '''\n    Remove any numbers from the text\n    '''\n    text=text.replace(\"#\",\" \")\n    text=text.replace(\"$\",\" \")\n    text=text.replace(\",\",\" \")\n    text=text.replace(\".\",\" \")\n    text=text.replace(\"?\",\" \")\n    text=text.replace(\"!\", \" \")\n    text=text.replace(\"!\",\" \")\n    text=text.replace(\"$\",\" \")\n    return text\ndef remove_digit_numbers(text):\n    '''\n    Remove any numbers from the text\n    '''\n    text=text.replace(\"#\",\" \")\n    text=text.replace(\"$\",\" \")\n    text=text.replace(\",\",\" \")\n    text=text.replace(\".\",\" \")\n    text=text.replace(\"?\", \" \")\n    text=text.replace(\"!\", \" \")\n    text=text.replace(\"!\",\" \")\n    text=text.replace(\"$\",\" \")\n    return text\ndef remove_non_digits(text):\n    '''\n    Remove any numbers from the text\n    '''\n    text=text.replace(\"#\",\" \")\n    text=text.replace(\"$\",\" \")\n    text=text.replace(\",\",\" \")\n    text=text.replace(\".\",\" \")\n    text=text.replace(\"?\", \" \")\n    text=text.replace(\"!\", \" \")\n    text=text.replace(\"!\",\" \")\n    text=text.replace(\"$\",\" \")\n    return text\ndef remove_simbol(text):\n    '''\n    Remove any simbol from the text\n    '''\n    text=text.replace(\"$\",\" \")\n    text=text.replace(\",\",\" \")\n    text=text.replace(\".\",\" \")\n    text=text.replace(\"!\",\" \")\n    text=text.replace(\"!\",\" \")\n    text=text.replace(\"?\",\" \")\n    return text\ndef remove_symbol(text):\n    '''\n    Remove any symbol from the text\n    '''\n    text=text.replace(\"?\",\" \")\n    text=text.replace(\"!\", \" \")\n    text=text.replace(\"!\",\" \")\n    text=text.replace(\".\",\" \")\n    text=text.replace(\"$\",\" \")\n    return text\ndef remove_all_digit_numbers(text):\n    '''\n    Remove any numbers from the text\n    '''\n    text=text.replace(\"#\",\" \")\n    text=text.replace(\"$\",\" \")\n    text=text.replace(\",\",\" \")\n    text=text.replace(\".\",\" \")\n    text=text.replace(\"?\", \" \")\n    text=text.replace(\"!\", \" \")\n    text=text.replace(\"!\",\" \")\n    text=text.replace(\"$\",\" \")"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+\\s', \"\", ip)\n    ip = zero_ip\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.replace(' ', '')\n    n = len(ip)\n    output = ''\n    for i in range(1, n):\n        if ip[i] == '0' and ip[i - 1] == '0':\n            output += ip[:i]\n        else:\n            output += ip[:i]\n            break\n    return output\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip==\"0\":\n        return ip\n    else:\n        return ip[0]+ip[1:]\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '0' in ip:\n        ip=ip[1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.strip()\n    if '.' in ip:\n        return ip.split('.')[0]\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # return ip.lstrip('0')\n    return ip.replace('0', '')\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = []\n    odd_number = []\n    for i in list1:\n        if i % 2 == 0:\n            even_number.append(i)\n        else:\n            odd_number.append(i)\n    return(even_number + odd_number)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    n=len(list1)\n    if n%2==0:\n        return list1[n//2]\n    else:\n        return list1[n//2]+list1[n//2-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = []\n    odd_index = []\n    result = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_index.append(list1.index(i))\n        else:\n            odd_index.append(list1.index(i))\n    for i in range(len(even_index)):\n        for j in range(i,len(odd_index)):\n            result = result + (even_index[i] - odd_index[j])**2\n    return result\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0::2]\n    first_odd = list1[1::2]\n    return first_even, first_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = []\n    l = len(list1)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count1 = 0\n    count2 = 0\n    for i in range(0,len(list1)):\n        if list1[i]%2 == 0:\n            count1 +=1\n        else:\n            count2 +=1\n    return count1 - count2\n    \nlist1 = []\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = []\n    odd = []\n    even = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            odd.append(list1[i])\n        else:\n            even.append(list1[i])\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    if len(list1) % 2 == 0:\n        result = 0\n        for i in range(0, len(list1), 2):\n            result += list1[i]\n        return result\n    else:\n        result = 0\n        for i in range(0, len(list1), 2):\n            result += list1[i]\n        result += list1[-1]\n        return result\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for x in list1:\n        if x % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    # Check if the list is even\n    if list1[0]%2 == 0:\n        # Find the index of the first even number\n        for i in range(len(list1)):\n            if list1[i]%2 == 0:\n                count = count + 1\n        # Return the difference of the first even number\n        return count\n    # Check if the list is odd\n    else:\n        # Find the index of the first odd number\n        for i in range(len(list1)):\n            if list1[i]%2!= 0:\n                count = count + 1\n        # Return the difference of the first odd number\n        return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # assume all letters in the string are either 1 or 0\n    n = len(str1)\n    if n%2!= 0:\n        print(\"The string must have an even number of elements\")\n        return\n    # 1st array to store the swap operations\n    swaps = []\n    # 1st array to store the current positions of the elements\n    positions = []\n    # 2nd array to store the swap operations\n    swaps = []\n    # 3rd array to store the current positions of the elements\n    positions = []\n    # 4th array to store the swap operations\n    swaps = []\n    # to store the maximum value in the swap operations array\n    max_swaps = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    return len(str1) - sum(map(lambda x: (x == '1'), str2))\n    \ndef main() : \n    str1 = '11'\n    str2 = '110101011101111111111111111111101111'\n    print(min_Swaps(str1,str2))\n    \nif __name__ == '__main__' : main("
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l = len(str1)\n    if l == 0:\n        return 0\n    if l == 1:\n        return 1\n    d = {}\n    d[str1[0]] = 1\n    for i in range(l):\n        if str1[i] in d:\n            d[str1[i]] += 1\n        else:\n            d[str1[i]] = 1\n    for i in range(l):\n        if str1[i] in d:\n            d[str1[i]] -= 1\n        else:\n            d[str1[i]] = 1\n    s = 0\n    for k in d.values():\n        if k == 0:\n            continue\n        if k == 1:\n            s += 1\n        else:\n            s += min(k-1,1)\n    return s\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    a=len(str1)\n    b=len(str2)\n    c=0\n    if a>b:\n        c=a-b\n    else:\n        c=b-a\n    while a<b:\n        if str1[a]!=str2[b]:\n            a+=1\n        if str1[a]==str2[b]:\n            c+=1\n        a+=1\n        b-=1\n    return c\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    a_string = str1\n    b_string = str2\n    i = 0\n    j = 0\n    while i < len(a_string) and j < len(b_string):\n        if a_string[i] == b_string[j]:\n            i += 1\n            j += 1\n        else:\n            if a_string[i]!= b_string[j]:\n                count += 1\n                i += 1\n                j += 1\n            else:\n                i += 1\n                j += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1=len(str1)\n    l2=len(str2)\n    swaps=0\n    for i in range(l1):\n        for j in range(l2):\n            if (str1[i]==str2[j]):\n                continue\n            else:\n                if(str1[i]!=str2[j]):\n                    swaps+=1\n                swaps+=1\n    print(\"swaps\",swaps)\n    \n    \n    \nif __name__ == '__main__':\n    str1=\"101\"\n    str2=\"1111\"\n    min_Swaps(str1,str2)"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1 = len(str1)\n    l2 = len(str2)\n    l3 = 0\n    if l1> l2:\n        l3 = l1 - l2\n        while l3 >= 0:\n            for i in range(l1):\n                if str1[i]!= str2[i]:\n                    l3 -= 1\n                    break\n                else:\n                    break\n            if l3 > 0 :\n                break\n            else :\n                l3 = l1\n        if l3 == 0:\n            return 0\n        else :\n            return 1+l3\n    else:\n        return 1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    temp = 0 \n    for i in range(0,len(str1)): \n        if str1[i] == str2[i]: \n            continue\n        elif str1[i] == 1 and str2[i] == 0: \n            temp += 1 \n        elif str1[i] == 0 and str2[i] == 1: \n            temp += 1 \n    return temp \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Your code here\n    str1=str1.replace(\"0\",\"1\")\n    str2=str2.replace(\"0\",\"1\")\n    #print(str1)\n    #print(str2)\n    #print(len(str1))\n    #print(len(str2))\n    #print(min(len(str1),len(str2)))\n    if len(str1)>len(str2):\n        str1=str1[::-1]\n    if len(str2)>len(str1):\n        str2=str2[::-1]\n    d=0\n    count=0\n    #print(str1)\n    for i in range(0,len(str1)) :\n        if str1[i]!=str2[i] :\n            count+=1\n            #print(str1[i],str2[i])\n        if count==2 :\n            if str1[i]==str2[i] :\n                d+=1\n            else :\n                d+=2\n            count=0\n    #print(d)\n    return d\n    "
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    n = len(str1)\n    m = len(str2)\n    for i in range(n) :\n        if str1[i]!= str2[i] :\n            count+=1\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    result = 0\n    for i in tuple_list:\n        result += len(i)\n    return result\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(str(tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list) * 8\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for t in tuple_list:\n        if type(t) == list:\n            tuple_size(t)\n        else:\n            print(f\"The size of the tuple is :{t.__sizeof__()}\")\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list[0])*4\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    size = 0\n    for i in tuple_list:\n        size = size + sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #tuple_list_size = 0\n    for i in tuple_list:\n        #tuple_list_size += sys.getsizeof(i)\n        tuple_list_size = sys.getsizeof(i)\n    return tuple_list_size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \ndef tuple_to_list(tuple):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tuple)\n    \ndef tuple_to_bytes(tuple):\n    '''\n    Write a function to convert a tuple to bytes.\n    '''\n    return bytes(tuple)\n    \ndef bytes_to_tuple(bytes_tuple):\n    '''\n    Write a function to convert a bytes tuple to a tuple.\n    '''\n    return tuple(bytes_tuple)\n    \ndef len_bytes(bytes):\n    '''\n    Write a function to find the length of the given bytes.\n    '''\n    return sys.getsizeof(bytes)\n    \ndef length(bytes_list):\n    '''\n    Write a function to find the length of the given list of bytes.\n    '''\n    return sys.getsizeof(bytes_list)\n    \ndef join_tuple(tuple_list):\n    '''\n    Write a function to join a tuple to a string.\n    '''\n    return ''.join(tuple_list)\n    \ndef has_duplicates(tuple_list):\n    '''\n    Write a function to check if the given tuple contains duplicate entries.\n    '''\n    return tuple_size(tuple_list)!= length(tuple_list)\n    \ndef unique_tuple(tuple_list):\n    '''\n    Write a function to return the unique tuple.\n    '''\n    return tuple(set(tuple_list))\n    \ndef unique_list(tuple_list):\n    '''\n    Write a function to return the unique list.\n    '''\n    return tuple(set(tuple_list))\n    \ndef unique_list_of_tuple(tuple_list):\n    '''\n    Write a function to return the unique list.\n    '''\n    return tuple_list\n    \ndef reverse(tuple_list):\n    '''\n    Write a function to reverse a given list of tuples.\n    '''\n    return tuple_list[::-1]\n    \ndef print_tuple(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    print(' '.join(tuple_list))\n    \ndef print_list(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    print(tuple_list)\n    \ndef print_list_of_tuple(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n        \ndef print_list_of_tuple_bytes(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n        \ndef print_tuple_bytes(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    print(tuple_to_bytes(tuple_list))\n    \ndef print_tuple_list_bytes(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n        \ndef print_tuple_list_bytes_reverse(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in reversed(tuple_list):\n        print(tuple_to_bytes(tuple))\n    \ndef print_tuple_bytes_reverse(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    print(tuple_to_bytes(tuple_list))\n    \ndef print_tuple_list_bytes_reverse_reverse(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in reversed(tuple_list):\n        print(tuple_to_bytes(tuple))\n    \ndef print_tuple_bytes_list(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n    \ndef print_tuple_bytes_list_reverse(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n    \ndef print_tuple_bytes_list_reverse_reverse(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n    \ndef print_tuple_bytes_list_reverse_bytes(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n    \ndef print_tuple_bytes_list_bytes(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n        \ndef print_list_of_tuple(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n    \ndef print_list_of_tuple_bytes(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n        \ndef print_list_of_tuple_bytes_reverse(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in reversed(tuple_list):\n        print(tuple_to_bytes(tuple))\n        \ndef print_list_of_tuple_bytes_reverse_reverse(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in reversed(tuple_list):\n        print(tuple_to_bytes(tuple))\n    \ndef print_list_of_tuple_bytes_reverse_bytes(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n        \ndef print_list_of_tuple_bytes_bytes(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n        \ndef print_list_of_tuple_bytes_bytes_reverse(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in reversed(tuple_list):\n        print(tuple_to_bytes(tuple))\n    \ndef print_list_of_tuple_bytes_bytes_reverse_reverse(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in reversed(tuple_list):\n        print(tuple_to_bytes(tuple))\n    \ndef print_list_of_tuple_bytes_bytes_reverse_bytes(tuple_list):\n    '''\n    Write a function to print the given list of tuples.\n    '''\n    for tuple in tuple_list:\n        print(tuple_to_bytes(tuple))\n        \ndef print_list_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # define the search function\n    def search(arr, num):\n        if arr == []:\n            return -1\n        else:\n            if num > arr[0]:\n                return search(arr[1:], num)\n            elif num < arr[-1]:\n                return search(arr[:-1], num)\n            else:\n                return arr[0]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k == 1:\n        return arr1[k-1]\n    if len(arr1) == 1:\n        if arr2[k-1] > arr1[k-1]:\n            return arr2[k-1]\n        else:\n            return arr1[k-1]\n    if len(arr2) == 1:\n        if arr1[k-1] > arr2[k-1]:\n            return arr1[k-1]\n        else:\n            return arr2[k-1]\n    # find the first index\n    if k == len(arr1):\n        k = 0\n    if arr2[k-1] > arr1[k-1]:\n        return arr1[k-1]\n    else:\n        return arr2[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return arr1[k-1] if k > 0 else -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    left = 0\n    right = len(arr1)-1\n    \n    while left<=right:\n        mid = left + (right-left)//2\n        if arr1[mid] < arr2[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return arr1[left]\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    # Determine the index of the element which is to be returned.\n    # k is the number of elements which we want.\n    if m > n:\n        return find_kth(arr2, arr1, k)\n    if k == 0:\n        return arr1[0]\n    if k == 1:\n        return arr2[0]\n    # At this point we know that the array is sorted.\n    # Start finding the index where the given element is at.\n    # Then, we will check if the element is present at index\n    # starting from 1 to the given index.\n    for i in range(1, m + 1):\n        if arr1[i] <= arr2[i - k]:\n            return arr1[i]\n    return arr2[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1)<len(arr2):\n        return arr1[len(arr1)-k]\n    else:\n        return arr2[len(arr2)-k]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Time complexity: O(log(n))\n    # Space Complexity: O(n)\n    if arr1 == arr2:\n        return arr1[k-1]\n    else:\n        return find_kth(arr1, arr2, k-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr2)-1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # kth-first search\n    for i in range(len(arr1)):\n        if arr1[i] < arr2[i]:\n            break\n    return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the midpoint of the arr1\n    midpoint = len(arr1) // 2\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    for i in str(number):\n        total += int(i)\n    result = int(str(number) + str(number))\n    for i in str(result):\n        total += int(i)\n    if total == number:\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_digits = 0\n    for i in str(number):\n        sum_of_digits += int(i)\n    if sum_of_digits == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # your code goes here\n    if len(str(number))==1:\n        return True\n    else:\n        if number % 10 == 0:\n            if int(str(number)[0])**2 == int(str(number)[1]):\n                return True\n            else:\n                return False\n        else:\n            return False\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = str(number)\n    total = 0\n    for i in s:\n        total += int(i)**len(s)\n    return total == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    i = 0\n    sum = 0\n    \n    while i < len(number):\n        num = int(number[i])\n        sum += num * num\n        i += 1\n        \n    if sum == int(number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    str_n = str(number)\n    n = len(str_n)\n    for i in str_n:\n        sum += int(i) ** n\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    for i in range(1, number+1):\n        if i == number:\n            count += 1\n    if count == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    is_armstrong = True\n    for i in range(0, 10):\n        if i > 0:\n            x = number // (10 ** (i - 1))\n            y = number % 10\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp_num = number\n    \n    while temp_num > 0:\n        digit = temp_num % 10\n        if digit == 0:\n            pass\n        else:\n            digit += digit * 10\n        temp_num //= 10\n    \n    return digit == temp_num\n    \n    \nprint(armstrong_number(34))\nprint(armstrong_number(1234))"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    import math\n    flag = True\n    for i in range(len(number)):\n        value = number[i]\n        if value > 0:\n            if math.gcd(value, 10) == 1:\n                pass\n            else:\n                flag = False\n                break\n        else:\n            flag = False\n            break\n    if flag:\n        print(\"the given number is armstrong number\")\n    else:\n        print(\"the given number is not armstrong number\")\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Write your code here\n    total = 0\n    num = 1\n    while num < number:\n        total += num\n        num += 1\n    average = total/number\n    return(f'Total: {total}\\nAverage: {average}')\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_number = 0\n    for n in range(1,number+1):\n        sum_number += n\n    average = sum_number / number\n    return sum_number,average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    number_list = []\n    for i in range(1, number+1):\n        number_list.append(i)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    num_list = []\n    for i in range(1, number+1):\n        num_list.append(i)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Write your code here\n    sum = 0\n    count = 0\n    for i in range(1,number+1):\n        if i%2 == 0:\n            sum = sum + i\n            count = count + 1\n    print('{} sum and average of {} natural numbers is {}'.format(sum, count, sum/count))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for num in range(0, number):\n        num = int(input(\"Enter your natural numbers \"))\n        sum += num\n    avg = sum / number\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum = sum + i\n    avg = sum/number\n    return sum,avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    print(total)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for x in range(number):\n        total += x\n    return total / number\n    \n    \nprint(sum_average(6))\nprint(sum_average(8))\nprint(sum_average(15))\nprint(sum_average(25)"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum = sum + i\n    for j in range(1,number+1):\n        average = average + (j/sum)\n    return sum, average\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(\"{} is even\".format(n))\n    else :\n        print(\"{} is odd\".format(n))\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    result = ''\n    for char in str1:\n        if char == result:\n            continue\n        else:\n            result = char\n    return result\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code goes here\n    # make a list of unique characters\n    # compare to the second character and then find the first repeated character\n    str2 = str1.lower()\n    str2 = list(str2)\n    str2.remove(str2[0])\n    str2 = ''.join(str2)\n    return str2[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = {}\n    for i in range(len(str1)):\n        count[str1[i]] = count.get(str1[i],0) + 1\n    for key in count:\n        if count[key] == 1:\n            return key\n        \nif __name__ == '__main__':\n    print(first_repeated_char(\"helle\"))"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict = {}\n    for char in str1:\n        if char not in dict:\n            dict[char] = 1\n        else:\n            dict[char] = dict[char] + 1\n    return max(dict, key=dict.get)\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = {}\n    for ch in str1:\n        if ch not in count:\n            count[ch] = 1\n        else:\n            count[ch] += 1\n    for key, value in count.items():\n        if value == 1:\n            return key\n    return \"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]==str1[count]:\n            count +=1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1.count(str1[0])\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeated_char = {}\n    for i in range(len(str1)):\n        if str1[i] not in repeated_char:\n            repeated_char[str1[i]] = 0\n        repeated_char[str1[i]] += 1\n    first_repeated_char = {}\n    for char in repeated_char:\n        first_repeated_char[char] = repeated_char[char]\n    return first_repeated_char\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i == str1[count]:\n            count+=1\n        else:\n            break\n    return count\n    #pass \n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.find(char)!= -1:\n            return char\n    return ''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0:\n        return []\n    \n    ludic = []\n    \n    for i in range(1, n+1):\n        if i >= 10:\n            continue\n        if i % 10 == 0:\n            ludic.append(i)\n        if i % 5 == 0:\n            ludic.append(i)\n        if i % 3 == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n, n*n):\n        if n%i == 0:\n            ludic.append(i)\n    return ludic\n    \ndef get_tot_numb(n):\n    '''\n    Write a function that returns the total number of all the integers in a given list.\n    '''\n    tot_numb = 0\n    for i in range(len(ludic)):\n        tot_numb = tot_numb + ludic[i]\n    return tot_numb\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        if i % 10 == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i % 3 == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [int(n) for n in str(n)]\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    i = 2\n    while i < n:\n        if n%i == 0:\n            n = n/i\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    list = []\n    for i in range(1,n+1):\n        if i < 10:\n            if i <= 9:\n                list.append(i)\n            else:\n                list.append(i*2)\n        else:\n            list.append(i*3)\n    return list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [i for i in range(1, n+1) if i % 10 == 0 or i % 10 == 4 or i % 10 == 9 or i % 10 == 1 or i % 10 == 7]\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0:\n        return []\n    ludic = []\n    luc = []\n    for i in range(n):\n        if (i < 0) or (i % 2 == 1):\n            ludic.append(i)\n        else:\n            luc.append(i)\n    return ludic, luc\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    n = int(n)\n    for i in range(1, n+1):\n        if(i**2 >= n):\n            ludic.append(i**2)\n    print(ludic)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    print('#1 Reverse Words')\n    print(f\"Given string: {s}\")\n    word_list = s.split()\n    print(f\"Word list: {word_list}\")\n    print(f\"Original string: {s}\")\n    print(f\"Reversed string: {reverse_words(word_list)}\")\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    return [w.strip() for w in s.split()]\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s == None or len(s) <= 0:\n        return None\n    result = ''\n    for word in s.split():\n        result += word[::-1] +''\n    return result\n        \ndef load_words(file_name):\n    '''\n    Read a file and return all words as a list.\n    '''\n    with open(file_name, \"r\") as f:\n        words = f.read().splitlines()\n    return words\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    tokens = s.split()\n    rev_words = []\n    for i in tokens:\n        rev_words.append(i[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    \n    for i in range(len(s)):\n        s[i] = s[i].strip(' ')\n    \n    return \" \".join(s)\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    t = s.split()\n    l = len(t)\n    for i in range(l):\n        print(i, end=\"\")\n    print(end=\" \")\n    for i in range(l-1, -1, -1):\n        print(i, end=\"\")\n    print(end=\" \")\n    for i in range(l-1, -1, -1):\n        print(t[i], end=\"\")\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    rev = \"\"\n    for i in s:\n        rev += i\n        rev += \" \"\n    return rev.strip()"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n    # YOUR CODE HERE\n    #raise NotImplementedError\ndef reverse_words_l(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n    # YOUR CODE HERE\n    #raise NotImplementedError\ndef reverse_words_all(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n    # YOUR CODE HERE\n    #raise NotImplementedError\ndef reverse_words_l_all(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n    # YOUR CODE HERE\n    #raise NotImplementedError\ndef reverse_words_all_all(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n    # YOUR CODE HERE\n    #raise NotImplementedError\ndef reverse_words_l_all_all(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n    # YOUR CODE HERE\n    #raise NotImplementedError\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num == 5:\n        return True\n    if num == 7:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i*i <= num:\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n        i += 6\n    return True\n    \ndef get_prime_numbers(n):\n    '''\n    Generates a list of prime numbers up to the given limit.\n    '''\n    prime_numbers = []\n    for i in range(n+1):\n        if prime_num(i):\n            prime_numbers.append(i)\n    return prime_numbers\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 0 or num == 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(num**0.5)+1, 6):\n            if (num % i) == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    num = str(num)\n    i = 0\n    while i < len(num):\n        if num[i] == '0':\n            i += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime = [2,3,5,7,11,13,17,19]\n    for i in prime:\n        if num%i == 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n    \n    \ndef gcd(a,b):\n    '''\n    Write a function that returns the greatest common denominator\n    of two integers.\n    '''\n    if b==0:\n        return a\n    return gcd(b,a%b)\n    \ndef lcm(a,b):\n    '''\n    Write a function that returns the least common multiple\n    of two integers.\n    '''\n    return a*b//gcd(a,b)\n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0 or n%3 == 0:\n        return False\n    for i in range(5,int(n**0.5)+5,6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n    \ndef find_prime_number():\n    '''\n    Write a function that returns the first prime number larger than\n    the current number.\n    '''\n    num = int(input(\"Please give me a number: \"))\n    for i in range(3,num,2):\n        if is_prime(i):\n            return i\n            \n    print(\"No prime number found\")\n    \ndef main():\n    while True:\n        print(\"===========================================\")\n        print(\"Choose one of the following options:\")\n        print(\"1. Find the first prime number greater than the current number.\")\n        print(\"2. Find the least common multiple of two numbers.\")\n        print(\"3. Find the least common multiple of two numbers.\")\n        print(\"4. Find the least common multiple of two numbers.\")\n        print(\"5. Find the least common multiple of two numbers.\")\n        print(\"6. Find the least common multiple of two numbers.\")\n        print(\"7. Find the least common multiple of two numbers.\")\n        print(\"8. Find the least common multiple of two numbers.\")\n        print(\"9. Find the least common multiple of two numbers.\")\n        print(\"10. Find the least common multiple of two numbers.\")\n        print(\"===========================================\")\n        \n        choice = int(input(\"Please choose a number from above options: \"))\n        print(\"===========================================\")\n        \n        if choice == 1:\n            prime_number = find_prime_number()\n            print(\"You have chosen to find a prime number\")\n            print(\"You will be asked for another number.\")\n            print(\"Your answer will be a positive integer.\")\n            print(\"\\n\" + \"Question 1 of 10\")\n            print(\"Answer: \" + str(prime_number))\n            print(\"===========================================\")\n            \n        if choice == 2:\n            print(\"\\nQuestion 2 of 10\")\n            print(\"Your answer will be a positive integer.\")\n            print(\"\\n\" + \"Question 1 of 10\")\n            print(\"Answer: \" + str(lcm(5,2)))\n            print(\"===========================================\")\n            \n        if choice == 3:\n            print(\"\\nQuestion 3 of 10\")\n            print(\"Your answer will be a positive integer.\")\n            print(\"\\n\" + \"Question 1 of 10\")\n            print(\"Answer: \" + str(lcm(7,1)))\n            print(\"===========================================\")\n            \n        if choice == 4:\n            print(\"\\nQuestion 4 of 10\")\n            print(\"Your answer will be a positive integer.\")\n            print(\"\\n\" + \"Question 1 of 10\")\n            print(\"Answer: \" + str(lcm(5,8)))\n            print(\"===========================================\")\n            \n        if choice == 5:\n            print(\"\\nQuestion 5 of 10\")\n            print(\"Your answer will be a positive integer.\")\n            print(\"\\n\" + \"Question 1 of 10\")\n            print(\"Answer: \" + str(lcm(7,9)))\n            print(\"===========================================\")\n            \n        if choice == 6:\n            print(\"\\nQuestion 6 of 10\")\n            print(\"Your answer will be a positive integer.\")\n            print(\"\\n\" + \"Question 1 of 10\")\n            print(\"Answer: \" + str(lcm(7,11)))\n            print(\"===========================================\")\n            \n        if choice == 7:\n            print(\"\\nQuestion 7 of 10\")\n            print(\"Your answer will be a positive integer.\")\n            print(\"\\n\" + \"Question 1 of 10\")\n            print(\"Answer: \" + str(lcm(9,11)))\n            print(\"===========================================\")\n            \n        if choice == 8:\n            print(\"\\nQuestion 8 of 10\")\n            print(\"Your answer will be a positive integer.\")\n            print(\"\\n\" + \"Question 1 of 10\")\n            print(\"Answer: \" + str(lcm(6,9)))\n            print(\"===========================================\")\n            \n        if choice == 9:\n            print(\"\\nQuestion 9 of 10\")\n            print(\"Your answer will be a positive integer.\")\n            print(\"\\n\" + \"Question 1 of 10\")\n            print(\"Answer: \" + str(lcm(9,11)))\n            print(\"===========================================\")\n            \n        if choice == 10:\n            print(\"\\nQuestion 10 of 10\")\n            print(\"Your answer will be a positive integer.\")\n            print(\"\\n\" + \"Question 1 of 10\")\n            print(\"Answer: \" + str(lcm(8,11)))\n            print(\"===========================================\")\n            \n            \n        input(\"\\nPress enter to continue: \")\n        \nmain()"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5,int(math.sqrt(num))+1,5):\n            if num % i == 0 or num % (i+2) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Write your code here\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(num**0.5) + 1, 6):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num > 2 and num % 2 == 0:\n        return False\n    if num == 3 or num % 3 == 0:\n        return True\n    for i in range(5, num // 2 + 1, 6):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * (math.pi / 180)\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (3.14159 / 180.0)\n    return rad\ndef angle_vector(x1, y1, x2, y2, x3, y3):\n    '''\n    Write a function that returns the angle between two vectors (x1, y1), (x2, y2), (x3, y3) and returns the angle.\n    '''\n    x = (x1 + x2 + x3)/3\n    y = (y1 + y2 + y3)/3\n    angle = math.atan(y/x)\n    return angle\ndef distance(x1, y1, x2, y2):\n    '''\n    Write a function that returns the distance between two points in meters.\n    '''\n    distance = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n    return distance\ndef speed_average(s1, s2):\n    '''\n    Write a function that returns the average speed of two car objects.\n    '''\n    s1_sum = s1.velocity_x + s1.velocity_y + s1.velocity_z\n    s2_sum = s2.velocity_x + s2.velocity_y + s2.velocity_z\n    return (s1_sum + s2_sum)/2\ndef load_from_file(filename):\n    '''\n    Read the data from a CSV file and return an instance of the class Car.\n    '''\n    with open(filename, 'r') as csvfile:\n        rows = csv.reader(csvfile, delimiter=',')\n        car = list(rows)\n    return car\ndef make_prediction(car_list, min_k, max_k):\n    '''\n    Make a prediction for the car.\n    '''\n    # get the min and max k values from the list of cars\n    k_min = min_k\n    k_max = max_k\n    # populate a prediction dictionary with the car objects\n    prediction = {}\n    for car in car_list:\n        car_x = car[0]\n        car_y = car[1]\n        car_z = car[2]\n        # create a vector for the car\n        car_vector = math.vector(car_x, car_y, car_z)\n        # add the car to the prediction dictionary\n        prediction[car_vector] = prediction.get(car_vector, 0) + 1\n    # get the median k value of the prediction dictionary\n    # k = (k_min + k_max) / 2\n    k = (k_min + k_max) / 2\n    # create a dictionary for the car with the value as the prediction value\n    # for the car and the key as the car\n    prediction_car_k = {car: prediction[car] for car in prediction}\n    return prediction_car_k, k\ndef assign_prediction(car_list, prediction_car_k, k):\n    '''\n    Assign the car objects to the corresponding k values.\n    '''\n    # add the car objects to the prediction dictionary\n    for car in car_list:\n        car_x = car[0]\n        car_y = car[1]\n        car_z = car[2]\n        prediction_car_k[car_x, car_y, car_z] = prediction_car_k.get(car_x, 0) + 1\n    # get the average value of the prediction dictionary\n    avg_prediction_k = {car_x: prediction_car_k.get(car_x, 0) / len(prediction_car_k) for car_x in prediction_car_k}\n    # get the lowest k value of the prediction dictionary\n    # k = (k_min + k_max) / 2\n    k = (k_min + k_max) / 2\n    # create a dictionary for the car with the value as the prediction value\n    # for the car and the key as the car\n    prediction_car_k_lowest = {car_x: prediction_car_k.get(car_x, 0) for car_x in prediction_car_k if prediction_car_k[car_x] < avg_prediction_k[car_x]}\n    # add the car objects to the prediction dictionary\n    prediction_car_k = {car_x: prediction_car_k[car_x] for car_x in prediction_car_k}\n    return prediction_car_k, avg_prediction_k, k\ndef compare_prediction(prediction_car_k, k_min, k_max, prediction_car_k_lowest):\n    '''\n    Compare the value of prediction_car_k and prediction_car_k_lowest with a k value range.\n    '''\n    # create a dictionary with the actual value of prediction_car_k as the key\n    # and the actual value of prediction_car_k_lowest as the value\n    prediction_car_k_actual = {prediction_car_k[car_x]: prediction_car_k_lowest.get(car_x) for car_x in prediction_car_k}\n    # get the lowest k value of prediction_car_k and the actual value of prediction_car_k_lowest\n    k_actual = k_min\n    k_pred = k_min\n    # create a dictionary with the actual value of prediction_car_k as the key\n    # and the actual value of prediction_car_k_lowest as the value\n    prediction_car_k_actual = {prediction_car_k[car_x]: prediction_car_k_lowest.get(car_x) for car_x in prediction_car_k}\n    # for every car in prediction_car_k_actual, create a dictionary with\n    # the car's actual value as the key and the car's actual value as the value\n    # and the actual value of the lowest k value as the value\n    prediction_car_k_actual_k = {}\n    prediction_car_k_actual_k[k_actual] = prediction_car_k_actual[k_actual]\n    prediction_car_k_actual_k[k_pred] = prediction_car_k_actual[k_pred]\n    # for every car in prediction_car_k_actual_k, create a dictionary with\n    # the car's actual value as the key and the car's actual value as the value\n    # and the actual value of the lowest k value as the value\n    prediction_car_k_actual_k_lowest = {}\n    prediction_car_k_actual_k_lowest[k_actual] = prediction_car_k_actual_k[k_actual]\n    prediction_car_k_actual_k_lowest[k_pred] = prediction_car_k_actual_k[k_pred]\n    # for every car in prediction_car_k_actual_k_lowest, create a dictionary with\n    # the car's actual value as the key and the car's actual value as the value\n    # and the actual value of the lowest k value as the value\n    prediction_car_k_actual_k_lowest_k = {}\n    prediction_car_k_actual_k_lowest_k[k_actual] = prediction_car_k_actual_k[k_actual]\n    prediction_car_k_actual_k_lowest_k[k_pred] = prediction_car_k_actual_k[k_pred]\n    # return the car objects and their actual value\n    return prediction_car_k_actual_k, prediction_car_k_actual_k_lowest\ndef average_k(prediction_car_k, avg_prediction_k):\n    '''\n    Average the actual value of the prediction dictionary.\n    '''\n    # create a dictionary with the actual value of prediction_car_k as the key\n    # and the actual value of prediction_car_k_lowest as the value\n    prediction_car_k_actual = {prediction_car_k[car_x]: prediction_car_k_lowest.get(car_x) for car_x in prediction_car_k}\n    # get the actual value of the average value\n    k_actual = avg_prediction_k[k_min]\n    k_pred = avg_prediction_k[k_min]\n    # create a dictionary with the actual value of prediction_car_k as the key\n    # and the actual value of prediction"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * 3.1415926535897932384626433\n    return rad\ndef add_zero(a,b):\n    '''\n    Write a function to add two numbers together.\n    '''\n    return a+b\ndef sign(a):\n    '''\n    Write a function to determine whether the number is negative or positive.\n    '''\n    if a<0:\n        return a\n    else:\n        return a*-1\ndef square_root(a,b):\n    '''\n    Write a function to find the square root of a number using Newton's method.\n    '''\n    if b==0:\n        return -1\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return a3\ndef fabs(a,b):\n    '''\n    Write a function to calculate the absolute value of a number.\n    '''\n    if b==0:\n        return abs(a)\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef is_prime(a,b):\n    '''\n    Write a function to determine whether a number is a prime number or not.\n    '''\n    if b==0:\n        return False\n    else:\n        for i in range(2,b):\n            if a%i==0:\n                return False\n        return True\ndef f(a,b):\n    '''\n    Write a function to calculate the function of a simple linear equation.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef f2(a,b):\n    '''\n    Write a function to calculate the function of a simple linear equation.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef mod(a,b):\n    '''\n    Write a function to calculate the modular inverse.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef mian(a,b):\n    '''\n    Write a function to find the modular inverse of a number.\n    '''\n    if b==0:\n        return a\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef lcm(a,b):\n    '''\n    Write a function to find the LCM of two positive integers.\n    '''\n    if b==0:\n        return a\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef gcd(a,b):\n    '''\n    Write a function to find the greatest common divisor of two positive integers.\n    '''\n    if b==0:\n        return a\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef s(a,b):\n    '''\n    Write a function to calculate the square root of a number.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef inv(a,b):\n    '''\n    Write a function to find the inverse of a number.\n    '''\n    if b==0:\n        return a\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef inv3(a,b,c):\n    '''\n    Write a function to calculate the inverse of a number.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef inv4(a,b,c,d):\n    '''\n    Write a function to calculate the inverse of a number.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef pow(a,b):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef power2(a,b):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef power(a,b):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef power2(a,b):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef power2(a,b):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef pow2(a,b):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef power2(a,b):\n    '''\n    Write a function to calculate the power of a number.\n    '''\n    if b==0:\n        return 0\n    else:\n        a1=a**0.5\n        a2=a1/b\n        a3=math.pow(a2,1/2)\n        return math.pow(a3,2)\ndef add_one(a,b):\n    '''\n    Write a function to add two numbers together.\n    '''\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree*math.pi/180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\ndef ang_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi\n    return rad\ndef to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * 180 / math.pi\n    return rad\ndef to_degrees(rad):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = rad * 180 / math.pi\n    return degree\ndef to_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * 180 / math.pi\n    return rad\ndef to_radians_angle(degrees, arc_name):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degrees * math.pi / 180\n    return rad\ndef to_radians_angle_arc(arc_name):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degrees * math.pi / 180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return radian_degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * 3.141592653589793\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803488036866185528159024722095360712990718023588235789148076270453528202364272333443464768908165765653597142923387823680189758072310585912443817276572188923863633160354398508549031940261379694331653730644631389676522109545332034740148272418690553242248063647909321601776541669682824011145172417333069508524594217931030254621909440752694306839278927533066900929308875028907589603846131616197841848578272454361515392012287399668655641709605734190111210451860015857095457827539162770351064251908385249288326435960271154696282774467355540021666446520888140360524795566211732427782271216997739832924856896403868470706645871609161838353150942020807925669569042658891491808547093803608245850125287831450256664345415651419081354363565359982657171354047490881814740116684610784998510683525377645922143551796560447979080267352658275165719378031275217753916151208180791377442165270022267585831859759327394972192092941929144293044349032947672340827808653174700731888160971019028186876358520047874547224985047002902528143949363065190418086515910140579593420912967028617681735852510617101990184437305511395078767386956157501462897545690528173589723305681741787158852205744281582509490083521808845806530987370420951218546869471728585558542409269675274867804619241129877881804163613221766557847475360611642078212684022188052009927224787280996449063842337482888244846990028800649901369648672879078721676183049828284984381135175520354887271085691843510995923846628971952846993486838852776232833997675482872422657524698065602965872271012890925592758902562704115618954776341897606016634606159053017124236469347575226500395434154960244095297085431399872363970575068667006276227380995528578033499545362015896346448461522641585268520581678317794305067343456918093172805270677619018444526845390694813595811654920116077346780939944156069818360837241250952960564027583005314098904597471681292260029074066518500126969202399037988692920453546354568153009967682195916784352998469873790891864988759185568583786649411554298323626683911172834169940250169020251405382327982405899334925191601798413458673701661278441496606905831724146691880661158416997990237188643625366225289666433165054361750683319622470345050315066562214499628494622760151310455381494243678759065984900789436137913144656261812759974624857512357529350472788694828351268665853248709619459573790992465357904238780902968995506621838321494759523074686428206490563428800156810702133711947993726684511908825255701302279581811272683642922322422259252510777570054763005895643546183085394627005940953559186568547802653734394786478962081982233831249098768340221719054760717694689685496214094663236513292739302471010861382088262509288250155010861145141170551601563258316026029251197887929976760058464575173558060224675378090662621479059129768259760231603275558256049703906602599097575495038872840755900152400721238373399659415451252512558025103379406524121690260088392445580192333002918491599006253653177700884970354062242365231285174428009468906251135112637055503368547564187305727535973908456760786914396506253625388965621580938325808874244933409575698930755926424214061545037852301691868153965774497988506697704093845263750487520299835774959375756289840337327247512154913373410673967652668159192714751657463772181358461798024407230276305683865450032608623102089787713271580322561845091379345855346437063217378878748048843363161060002445028019637154655478760658811960221094504077431813231512808837087976312679182674606729412472355876217284610349290110165642101694575650676908592398583823292455409202388932784100479132917061294855498801758760301927147741790809717857441918532233883530272718705406348855431138437528955650973816091748009028162822847126776191270527813162943019380865060014514281913847033911313226523439497798267071121207908719033597045236478239610645354930199061941938461632086194218268421761471129136506078194888470241605375419034455859791626757386272169520566070390989047828080292259243438019020435020201104924652270421216581342591251047808301041266538697475906144105550673058942465295681083266609377997436063281884349048583580378648734001298323327369950852181292675378207346028902179631627191366908190165102958008724231298193508834727526332876347259826336073167507580113386"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if type(pattern) is not str:\n        raise TypeError(\"pattern must be a string\")\n    if type(text) is not str:\n        raise TypeError(\"text must be a string\")\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find the pattern\n    m = re.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    def scan(text, start, end):\n        i = start\n        j = end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = -1\n    end = -1\n    for i in range(len(text)):\n        if text[i] == pattern:\n            start = i\n            end = i + len(pattern)\n            break\n    return (start, end)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    start = -1\n    end = -1\n    for i, match in enumerate(matches):\n        if match:\n            start = i\n            end = i\n            break\n    return matches, start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.findall(pattern, text, re.MULTILINE)\n    return match[0]\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    text_regex = re.compile(pattern)\n    substring = text_regex.search(text)\n    start = substring.start()\n    end = substring.end()\n    return substring, start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return get_sub_string_indexes(text, pattern)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return search_regex(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match_sub = pattern.search(text)\n    start_index = match_sub.start(0)\n    end_index = match_sub.end(0)\n    return start_index, end_index\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n<=0:\n        return None\n    if n==1:\n        return 1\n    numbers=[]\n    for i in range(1,n):\n        number=i+1\n        x=n-i\n        for k in range(x):\n            numbers.append(number)\n    numbers.sort()\n    return numbers[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n*(n+1)//2\n    \ndef is_perfect(n):\n    '''\n    Write a python function to check whether n is a perfect number or not.\n    '''\n    return n % 2 == 0\n    \ndef perfect_nums(n):\n    '''\n    Find all perfect numbers less than n.\n    '''\n    perfect_numbers = []\n    for i in range(1, n+1):\n        if is_perfect(i):\n            perfect_numbers.append(i)\n    return perfect_numbers\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    assert type(n) is int and n >= 1, 'n must be positive integer'\n    arr = [0,1,1]\n    \n    def next_bell_Number(n):\n        if n == 0:\n            return arr[n]\n        else:\n            mid = (n-1)//2\n            mid_arr = next_bell_Number(mid)\n            arr[mid] = arr[mid_arr] + arr[n-1]\n            arr[n-1] = arr[n-1] - arr[mid_arr]\n        return arr[n]\n    \n    return next_bell_Number(n)\n    \n    \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    numbers = [1,2,3,4,5]\n    j = 3\n    while j <= n:\n        print(f\"The number of the nth number is {j}\")\n        print(numbers)\n        numbers[j-1] = numbers[j-1] + numbers[j]\n        j += 1\n    return numbers[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    num = 2 * n + 1 \n    return num \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    for i in range(1,n):\n        if(n % i == 0):\n            return False\n    else:\n        return True\n    \n    \ndef prime_number(n):\n    '''\n    Write a python function to find nth prime number.\n    '''\n    if n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, n):\n            if(n % i == 0):\n                return False\n        else:\n            return True\n    \n    \ndef sum_of_primes(n):\n    '''\n    Write a python function to find the sum of the first n prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        s = 0\n        for i in range(1, n):\n            if(prime_number(i)):\n                s += i\n        return s\n    \ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth Fibonacci number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        a = 1\n        b = 1\n        for i in range(1, n):\n            c = a + b\n            a = b\n            b = c\n        return c\n    \ndef kth_factorial(n):\n    '''\n    Write a python function to calculate the nth factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return factorial(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    from math import factorial \n    n = int(n) \n    a = factorial(n) \n    i = 1\n    while a % i == 0: \n        i += 1\n    return n + i - 1\n    \n    \nif __name__ == '__main__': \n    n = int(input()) \n    print(bell_Number(n)) "
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Write your code here\n    for i in range(0, n):\n        print(i+1, end=\", \")\n    print()\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell_Number_Efficient(n):\n        a = 1\n        b = n\n        while a<=b:\n            a += 1\n            b += n-a\n        return b\n    return bell_Number_Efficient(n)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    l = len(list1)\n    i = 0\n    while i < l:\n        if list1[i] == L:\n            del list1[i]\n        i += 1\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]\n    "
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # code here\n    result = []\n    for index in range(len(list1)):\n        if index == L:\n            result.append(list1[index])\n        else:\n            result.append(list1[index])\n            if index < L - 1:\n                result.append(list1[index+1])\n    return result\n    \n    # answer = []\n    # for i in range(len(list1)):\n    #     if i == L:\n    #         answer.append(list1[i])\n    #     else:\n    #         answer.append(list1[i])\n    #         if i < L - 1:\n    #             answer.append(list1[i+1])\n    # return answer"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    else:\n        if L[-1] == L[-2]:\n            # We are at the last item of the list, remove the last element.\n            del L[-1]\n            return remove_kth_element(list1, L)\n        elif L[-1] == L[-2]:\n            # We are at the last item of the list, remove the last element.\n            del L[-2]\n            return remove_kth_element(list1, L)\n        else:\n            # If k is greater than the length of the list, remove all elements.\n            L[-2] = list1[-2]\n            return remove_kth_element(list1, L)\n    "
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # your code here\n    return list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L is None or len(L) == 0:\n        return []\n    n = len(list1)\n    for i in range(n-1-L):\n        list1.remove(L[i])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == []:\n        return []\n    elif L[0] == 0:\n        return remove_kth_element(list1, L[1:])\n    else:\n        return list1[:L[0]] + remove_kth_element(list1[L[0] + 1:], L[1:])\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    kth = L[L.size-1]\n    for index in range(L.size):\n        if index < L.size-1:\n            if L[index] == kth:\n                del L[index]\n        else:\n            break\n    return L\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_v = test_list[0][N]\n    for i in range(1, len(test_list)):\n        if test_list[i][N] > max_v:\n            max_v = test_list[i][N]\n    return max_v\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #Your code here\n    return max(test_list[i][N] for i in range(N))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # write your code here\n    list_of_lists = [[0 for x in range(N+1)] for y in range(N+1)]\n    \n    for x in range(1,N+1):\n        for y in range(N-x+1):\n            list_of_lists[x][y] = test_list[x-1][y] + test_list[x-1][y+1] + test_list[x-1][y-1] + test_list[x-1][y+1]\n    return list_of_lists[-1][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        return 'Invalid input'\n    else:\n        return max(test_list, key = lambda x:x[N])[N]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_element = test_list[0][N-1]\n    for x in range(1, len(test_list)):\n        if test_list[x][N-1] > max_element:\n            max_element = test_list[x][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Write your code here\n    if len(test_list) == 0:\n        return 0\n    for i in range(len(test_list)):\n        test_list[i].sort()\n    \n    print(test_list)\n    return max(test_list[0])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    list_len = len(test_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = -1000000001\n    for row in test_list:\n        if row[N] > max_num:\n            max_num = row[N]\n    return max_num\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if (N == 0):\n        return 0\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = int(test_list[i])\n    print('The max of then'th column is: ', max(test_list))\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    result = []\n    for i in lst:\n        for element in i:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in lst:\n        new_list.append(i[0])\n        new_list.append(i[1])\n    return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return(lst[0]+lst[1])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst[i])):\n            result.append([lst[i][j],lst[i][j]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def mergeTwoLists(lst1, lst2):\n        if len(lst1) == 0:\n            return lst2\n        if len(lst2) == 0:\n            return lst1\n        if lst1[0] >= lst2[0]:\n            return lst1 + lst2\n        else:\n            return lst2 + lst1\n    return mergeTwoLists(lst1, lst2)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    return [lst1,lst2]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # your code goes here\n    first_list = []\n    second_list = []\n    for i in lst:\n        if len(i) == 1:\n            first_list.append(i[0])\n            second_list.append(i[1])\n        else:\n            first_list.append(i[0])\n            second_list.append(i[1])\n    return [first_list, second_list]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Loop through the list, looking for each element. \n    # If the list is empty, it will return an empty list. \n    # If it's not empty, it will return a list of elements with the first element as the first element of each sublist. \n    # The second element should be the second element of the sublist.\n    list_of_lists = []\n    while len(lst) > 0:\n        # Get the first element of the sublist\n        first_element = lst[0][0]\n        # If the first element is not found, append it to the sublist and clear the list. \n        if first_element not in list_of_lists:\n            list_of_lists.append(first_element)\n            lst.pop(0)\n        # Get the second element of the sublist\n        second_element = lst[0][1]\n        # If the second element is not found, append it to the sublist and clear the list. \n        if second_element not in list_of_lists:\n            list_of_lists.append(second_element)\n            lst.pop(0)\n    # Return the merged list.\n    return list_of_lists\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for list1 in lst:\n        for list2 in lst:\n            if list1[0] < list2[0]:\n                merged.append([list1[0], list2[0]])\n                break\n            elif list1[0] > list2[0]:\n                merged.append([list2[0], list1[0]])\n                break\n            else:\n                merged.append([list1[0], list2[0]])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_1 = [lst[0][0]]\n    lst_2 = []\n    for l in lst:\n        lst_2.append(l[0])\n    for i in range(1, len(lst)):\n        lst_1.append(lst_1[i-1])\n        lst_1.append(lst[i][1])\n    return lst_1\n    \n    \n    \n    \n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # TODO: Write a function that takes in a tuple of numbers and returns the cumulative sum.\n    \n    if len(test_list) == 0:\n        return 0\n    else:\n        return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    print(\"Cummulative sum of values of given list = \", end='')\n    total = 0\n    for item in test_list:\n        total += item\n    print(total)\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return test_list[0] + sum(test_list[1:])\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for val in test_list:\n        total += val\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = [0]\n    for x in test_list:\n        cum_sum.append(cum_sum[-1] + x)\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(0, len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i] > test_list[j]:\n                cum_sum += test_list[j]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if test_list is None or not test_list:\n        return 0\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # your code here\n    return sum(test_list[0])\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        for j in i:\n            avg_list.append(j)\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for item in nums:\n        total = 0\n        for item2 in item:\n            total += item2\n        avg.append(total/len(item))\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(num)/len(num))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    # Start writing your code below\n    total = []\n    for tuple in nums:\n        total.append(sum(tuple)/len(tuple))\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result_list = []\n    for num in nums:\n        result_list.append(sum(num)/len(num))\n    return result_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for item in nums:\n        sum += item[0]\n    return [sum/len(nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n[0] + n[1])\n    return result/2\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #Use a dictionary to find the average\n    #Define variables\n    dict_tuple = {} # dictionary of tuples\n    total = 0 # total number of values in the dictionary\n    sum = 0 # sum number of values in the dictionary\n    #Loop through each tuple in the tuple\n    for i in range(0, len(nums)):\n        #Create a dictionary of all values in the tuple\n        dict_tuple[nums[i]] = 0\n        for j in range(0, i):\n            dict_tuple[nums[i]] += nums[j]\n        #add the values to the total\n        total += dict_tuple[nums[i]]\n        #add the values to the sum\n        sum += dict_tuple[nums[i]]\n    #return the average\n    return total / len(dict_tuple)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = []\n    for x,y in nums:\n        tuple_list.append(x+y)\n    return tuple_list\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t) / len(t) for t in zip(*nums)]\n    \ndef tup(nums):\n    '''\n    Write a function that takes a list of numbers and returns the smallest number which is not greater than 5.\n    '''\n    return min(nums, key = lambda x: x[1])\n    \ndef merge_sort(nums):\n    '''\n    Write a function that takes a list of numbers and sorts them in ascending order.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        middle = len(nums) // 2\n        left = nums[:middle]\n        right = nums[middle:]\n        return merge_sort(left) + [nums[middle]] + merge_sort(right)\n    \ndef find_pair(nums, target):\n    '''\n    Return a tuple whose value is the lowest element in the list whose sum is equal to the target.\n    '''\n    result = []\n    \n    for n in nums:\n        if n == target:\n            break\n        elif n + target == target:\n            result.append(n)\n            continue\n        elif n + target < target:\n            result.append(n)\n        else:\n            result.append(target)\n            \n    return tuple(result)\n            \ndef factorial(n):\n    '''\n    Return the factorial of n.\n    '''\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Write your code here\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tuple = ()\n    mod_tuple = tuple(t for t in test_tup1)\n    mod_tuple = tuple(t for t in test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    def mod_list(tup1,tup2):\n        mod_list=[]\n        for i in range(len(tup1)):\n            mod_list.append(tup1[i]%tup2[i])\n        return mod_list\n    return tuple(mod_list(test_tup1,test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # your code goes here\n    # Your code here\n    print(f\"Tuple 1: {test_tup1}\")\n    print(f\"Tuple 2: {test_tup2}\")\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    tup_mod_list = []\n    for i in range(len(tup1)):\n        tup_mod_list.append((tup1[i] % tup2[i]) % 2)\n    return tup_mod_list\n    \n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #first add the element wise modulo to the test tuple\n    result = tuple([sum(x)%y for x,y in zip(test_tup1, test_tup2)])\n    #return the result\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Write your code here.\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return [tup1[i] % tup2[i] for i in range(len(tup1))]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    x = test_tup1\n    y = test_tup2\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return d\n    elif steps == 1:\n        return 0\n    elif steps == 2:\n        return steps-1\n    elif steps == 3:\n        return d+1\n    elif steps == 4:\n        return d-1\n    else:\n        return min_Jumps(steps-1, d-1)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    import math\n    from functools import lru_cache\n    @lru_cache(maxsize=None)\n    def isJumps(d, i, j):\n        if d == 0:\n            return (j == i) or (j == 0 and i == 0)\n        else:\n            if d == 1:\n                return isJumps(d-1, j, i-1) or isJumps(d-1, j, i+1)\n            else:\n                return isJumps(d-1, j+1, i) or isJumps(d-1, j, i+1)\n    \n    return isJumps(d, 0, 0)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Define the jump table.\n    jump_table = [\n        [0,1,1,1,1,1,1,0],\n        [0,1,0,0,0,0,0,1],\n        [0,0,0,1,0,0,1,0],\n        [1,0,0,0,0,0,0,0],\n        [1,0,1,0,0,0,1,0],\n        [1,0,0,0,0,0,1,0],\n        [1,1,0,0,0,0,0,0],\n        [1,1,0,0,0,1,0,0],\n        [1,1,0,1,0,0,0,1],\n        [1,1,1,1,1,0,1,1]\n    ]\n    # Calculate the jump table.\n    jump_table_1 = []\n    for i in range(len(jump_table)):\n        jump_table_1.append([])\n        for j in range(len(jump_table[i])):\n            jump_table_1[i].append(jump_table[i][j])\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check for corner cases \n    if not d in [0, 1, 2, 3]: \n        raise ValueError('Input must be a positive integer, a positive integer, a positive integer, a positive integer, a positive integer, or a positive integer.')\n    \n    # initialise the matrix\n    matrix = [[0 for col in range(steps)] for row in range(steps)]\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    if steps == 1: \n        return 0\n    if d == 0: \n        return steps\n    if d < 0: \n        return min_Jumps(steps - 1, abs(d))\n    if d > 0: \n        return min_Jumps(steps - 1, abs(d))\n    \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1: \n        return 0\n    elif steps == 2:\n        return 0\n    elif steps == 3:\n        return 1\n    elif steps == 4:\n        return 2\n    elif steps == 5:\n        return 3\n    elif steps == 6:\n        return 4\n    elif steps == 7:\n        return 5\n    elif steps == 8:\n        return 6\n    elif steps == 9:\n        return 7\n    elif steps == 10:\n        return 8\n    elif steps == 11:\n        return 9\n    elif steps == 12:\n        return 10\n    elif steps == 13:\n        return 11\n    elif steps == 14:\n        return 12\n    elif steps == 15:\n        return 13\n    elif steps == 16:\n        return 14\n    elif steps == 17:\n        return 15\n    elif steps == 18:\n        return 16\n    elif steps == 19:\n        return 17\n    elif steps == 20:\n        return 18\n    elif steps == 21:\n        return 19\n    elif steps == 22:\n        return 20\n    elif steps == 23:\n        return 21\n    elif steps == 24:\n        return 22\n    elif steps == 25:\n        return 23\n    elif steps == 26:\n        return 24\n    elif steps == 27:\n        return 25\n    elif steps == 28:\n        return 26\n    elif steps == 29:\n        return 27\n    elif steps == 30:\n        return 28\n    elif steps == 31:\n        return 29\n    elif steps == 32:\n        return 30\n    elif steps == 33:\n        return 31\n    elif steps == 34:\n        return 32\n    elif steps == 35:\n        return 33\n    elif steps == 36:\n        return 34\n    elif steps == 37:\n        return 35\n    elif steps == 38:\n        return 36\n    elif steps == 39:\n        return 37\n    elif steps == 40:\n        return 38\n    elif steps == 41:\n        return 39\n    elif steps == 42:\n        return 40\n    elif steps == 43:\n        return 41\n    elif steps == 44:\n        return 42\n    elif steps == 45:\n        return 43\n    elif steps == 46:\n        return 44\n    elif steps == 47:\n        return 45\n    elif steps == 48:\n        return 46\n    elif steps == 49:\n        return 47\n    elif steps == 50:\n        return 48\n    elif steps == 51:\n        return 49\n    elif steps == 52:\n        return 50\n    elif steps == 53:\n        return 51\n    elif steps == 54:\n        return 52\n    elif steps == 55:\n        return 53\n    elif steps == 56:\n        return 54\n    elif steps == 57:\n        return 55\n    elif steps == 58:\n        return 56\n    elif steps == 59:\n        return 57\n    elif steps == 60:\n        return 58\n    elif steps == 61:\n        return 59\n    elif steps == 62:\n        return 60\n    elif steps == 63:\n        return 61\n    elif steps == 64:\n        return 62\n    elif steps == 65:\n        return 63\n    elif steps == 66:\n        return 64\n    elif steps == 67:\n        return 65\n    elif steps == 68:\n        return 66\n    elif steps == 69:\n        return 67\n    elif steps == 70:\n        return 68\n    elif steps == 71:\n        return 69\n    elif steps == 72:\n        return 70\n    elif steps == 73:\n        return 71\n    elif steps == 74:\n        return 72\n    elif steps == 75:\n        return 73\n    elif steps == 76:\n        return 74\n    elif steps == 77:\n        return 75\n    elif steps == 78:\n        return 76\n    elif steps == 79:\n        return 77\n    elif steps == 80:\n        return 78\n    elif steps == 81:\n        return 79\n    elif steps == 82:\n        return 80\n    elif steps == 83:\n        return 81\n    elif steps == 84:\n        return 82\n    elif steps == 85:\n        return 83\n    elif steps == 86:\n        return 84\n    elif steps == 87:\n        return 85\n    elif steps == 88:\n        return 86\n    elif steps == 89:\n        return 87\n    elif steps == 90:\n        return 88\n    elif steps == 91:\n        return 89\n    elif steps == 92:\n        return 90\n    elif steps == 93:\n        return 91\n    elif steps == 94:\n        return 92\n    elif steps == 95:\n        return 93\n    elif steps == 96:\n        return 94\n    elif steps == 97:\n        return 95\n    elif steps == 98:\n        return 96\n    elif steps == 99:\n        return 97\n    elif steps == 100:\n        return 98\n    elif steps == 101:\n        return 99\n    elif steps == 102:\n        return 100\n    elif steps == 103:\n        return 101\n    elif steps == 104:\n        return 102\n    elif steps == 105:\n        return 103\n    elif steps == 106:\n        return 104\n    elif steps == 107:\n        return 105\n    elif steps == 108:\n        return 106\n    elif steps == 109:\n        return 107\n    elif steps == 110:\n        return 108\n    elif steps == 111:\n        return 109\n    elif steps == 112:\n        return 110\n    elif steps == 113:\n        return 111\n    elif steps == 114:\n        return 112\n    elif steps == 115:\n        return 113\n    elif steps == 116:\n        return 114\n    elif steps == 117:\n        return 115\n    elif steps == 118:\n        return 116\n    elif steps == 119:\n        return 117\n    elif steps == 120:\n        return 118\n    elif steps == 121:\n        return 119\n    elif steps == 122:\n        return 120\n    elif steps == 123:\n        return 121\n    elif steps == 124:\n        return 122\n    elif steps == 125:\n        return 123\n    elif steps == 126:\n        return 124\n    elif steps == 127:\n        return 125\n    elif steps == 128:\n        return 126\n    elif steps == 129:\n        return 127\n    elif steps == 130:\n        return 128\n    elif steps == 131:\n        return 129\n    elif steps == 132:\n        return 130\n    elif steps == 133:\n        return 131\n    elif steps == 134:\n        return 132\n    elif steps == 135:\n        return 133\n    elif steps == 136:\n        return 134\n    elif steps == 137:\n        return 135\n    elif steps == 138:\n        return 136\n    elif steps == 139:\n        return 137\n    elif steps == 140:\n        return 138\n    elif steps == 141:\n        return 139\n    elif steps == 142:\n        return 140\n    elif steps == 143:\n        return 141\n    elif steps == 144:\n        return 142\n    elif steps == 145:\n        return 143\n    elif steps == 146:\n        return 144\n    elif steps == 147:\n        return 145\n    elif steps == 148:\n        return 146\n    elif steps == 149:\n        return 147\n    elif steps == 150:\n        return 148\n    elif steps == 151:\n        return 149\n    elif steps == 152:\n        return 150\n    elif steps == 153:\n        return 151\n    elif steps == 154:\n        return 152\n    elif steps == 155:\n        return 153\n    elif steps == 156:\n        return 154\n    elif steps == 157:\n        return 155\n    elif steps == 158:\n        return 156\n    elif steps == 159:\n        return 157\n    elif steps == 160:\n        return 158\n    elif steps == 161:\n        return 159\n    elif steps == 162:\n        return 160\n    elif steps == 163:\n        return 161\n    elif steps == 164:\n        return 162\n    elif steps == 165:\n        return 163\n    elif steps == 166:\n        return 164\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return (steps - d) * d + (steps - d) // 2\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def check(x, y, steps, d):\n        if(x < 0 or y < 0 or x >= len(board) or y >= len(board[0])):\n            return False\n        elif(board[x][y] == 0):\n            return False\n        elif(board[x][y] == d):\n            return True\n        else:\n            return check(x + steps[x][y], y, steps, d) or check(x - steps[x][y], y, steps, d) or check(x, y + steps[x][y], steps, d) or check(x, y - steps[x][y], steps, d)\n    \n    for i in range(len(steps)):\n        for j in range(len(steps[0])):\n            if(board[i][j] == 0):\n                for k in range(len(steps)):\n                    if(check(i + steps[i][j], j, steps, d)):\n                        return True\n    return False\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif d == 1:\n        return steps\n    elif d == 2:\n        return steps+1\n    else:\n        return steps+2-min_Jumps(steps+1, d-1)\n        \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == (1,0): return 1\n    if d == (2,1): return 0\n    if d == (2,2): return 1\n    if d == (2,3): return 2\n    if d == (3,0): return 3\n    if d == (3,1): return 4\n    if d == (3,2): return 5\n    if d == (3,3): return 6\n    if d == (4,0): return 7\n    if d == (4,1): return 8\n    if d == (4,2): return 9\n    if d == (4,3): return 10\n    if d == (5,0): return 11\n    if d == (5,1): return 12\n    if d == (5,2): return 13\n    if d == (5,3): return 14\n    if d == (6,0): return 15\n    if d == (6,1): return 16\n    if d == (6,2): return 17\n    if d == (6,3): return 18\n    if d == (7,0): return 19\n    if d == (7,1): return 20\n    if d == (7,2): return 21\n    if d == (7,3): return 22\n    if d == (8,0): return 23\n    if d == (8,1): return 24\n    if d == (8,2): return 25\n    if d == (8,3): return 26\n    if d == (9,0): return 27\n    if d == (9,1): return 28\n    if d == (9,2): return 29\n    if d == (9,3): return 30\n    if d == (10,0): return 31\n    if d == (10,1): return 32\n    if d == (10,2): return 33\n    if d == (10,3): return 34\n    if d == (11,0): return 35\n    if d == (11,1): return 36\n    if d == (11,2): return 37\n    if d == (11,3): return 38\n    if d == (12,0): return 39\n    if d == (12,1): return 40\n    if d == (12,2): return 41\n    if d == (12,3): return 42\n    if d == (13,0): return 43\n    if d == (13,1): return 44\n    if d == (13,2): return 45\n    if d == (13,3): return 46\n    if d == (14,0): return 47\n    if d == (14,1): return 48\n    if d == (14,2): return 49\n    if d == (14,3): return 50\n    if d == (15,0): return 51\n    if d == (15,1): return 52\n    if d == (15,2): return 53\n    if d == (15,3): return 54\n    if d == (16,0): return 55\n    if d == (16,1): return 56\n    if d == (16,2): return 57\n    if d == (16,3): return 58\n    if d == (17,0): return 59\n    if d == (17,1): return 60\n    if d == (17,2): return 61\n    if d == (17,3): return 62\n    if d == (18,0): return 63\n    if d == (18,1): return 64\n    if d == (18,2): return 65\n    if d == (18,3): return 66\n    if d == (19,0): return 67\n    if d == (19,1): return 68\n    if d == (19,2): return 69\n    if d == (19,3): return 70\n    if d == (20,0): return 71\n    if d == (20,1): return 72\n    if d == (20,2): return 73\n    if d == (20,3): return 74\n    if d == (21,0): return 75\n    if d == (21,1): return 76\n    if d == (21,2): return 77\n    if d == (21,3): return 78\n    if d == (22,0): return 79\n    if d == (22,1): return 80\n    if d == (22,2): return 81\n    if d == (22,3): return 82\n    if d == (23,0): return 83\n    if d == (23,1): return 84\n    if d == (23,2): return 85\n    if d == (23,3): return 86\n    if d == (24,0): return 87\n    if d == (24,1): return 88\n    if d == (24,2): return 89\n    if d == (24,3): return 90\n    if d == (25,0): return 91\n    if d == (25,1): return 92\n    if d == (25,2): return 93\n    if d == (25,3): return 94\n    if d == (26,0): return 95\n    if d == (26,1): return 96\n    if d == (26,2): return 97\n    if d == (26,3): return 98\n    if d == (27,0): return 99\n    if d == (27,1): return 100\n    if d == (27,2): return 101\n    if d == (27,3): return 102\n    if d == (28,0): return 103\n    if d == (28,1): return 104\n    if d == (28,2): return 105\n    if d == (28,3): return 106\n    if d == (29,0): return 107\n    if d == (29,1): return 108\n    if d == (29,2): return 109\n    if d == (29,3): return 110\n    if d == (30,0): return 111\n    if d == (30,1): return 112\n    if d == (30,2): return 113\n    if d == (30,3): return 114\n    if d == (31,0): return 115\n    if d == (31,1): return 116\n    if d == (31,2): return 117\n    if d == (31,3): return 118\n    if d == (32,0): return 119\n    if d == (32,1): return 120\n    if d == (32,2): return 121\n    if d == (32,3): return 122\n    if d == (33,0): return 123\n    if d == (33,1): return 124\n    if d == (33,2): return 125\n    if d == (33,3): return 126\n    if d == (34,0): return 127\n    if d == (34,1): return 128\n    if d == (34,2): return 129\n    if d == (34,3): return 130\n    if d == (35,0): return 131\n    if d == (35,1): return 132\n    if d == (35,2): return 133\n    if d == (35,3): return 134\n    if d == (36,0): return 135\n    if d == (36,1): return 136\n    if d == (36,2): return 137\n    if d == (36,3): return 138\n    if d == (37,0): return 139\n    if d == (37,1): return 140\n    if d == (37,2): return 141\n    if d == (37,3): return 142\n    if d == (38,0): return 143\n    if d == (38,1): return 144\n    if d == (38,2): return 145\n    if d == (38,3): return 146\n    if d == (39,0): return 147\n    if d == (39,1): return 148\n    if d == (39,2): return 149\n    if d == (39,3): return 150\n    if d == (40,0): return 151\n    if d == (40,1): return 152\n    if d == (40,2): return 153\n    if d == (40,3): return 154\n    if d == (41,0): return 155\n    if d == (41,1): return 156\n    if d == (41,2): return 157\n    if d == (41,3): return 158\n    if d == (42,0): return 159\n    if d == (42,1): return 160\n    if d == (42,2): return 161\n    if d == (42,3): return 162\n    if d == (43,0): return 163\n    if d == (43,1): return 164\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list_1=[]\n    list_2=[]\n    for i in range(len(nums1)):\n        list_1.append(nums1[i])\n    for j in range(len(nums2)):\n        list_2.append(nums2[j])\n    return list_1, list_2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)==0:\n        return None\n    if len(nums2)==0:\n        return None\n    else:\n        length=len(nums1)\n        div=0\n        if length==1:\n            return nums1[0]\n        for i in range(1,len(nums1)):\n            div+=nums1[i]/nums2[i]\n        return div\n    \n    \ndef main():\n    '''\n    Write a program to find out the smallest and largest numbers in a list.\n    '''\n    nums=[1,2,3,4,5,6,7,8,9,10]\n    print(min(nums),max(nums))\n    #print(div_list(nums,nums))\n    \n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [ num1 / num2 for num1, num2 in zip(nums1, nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    output_nums1=list()\n    output_nums2=list()\n    for i in nums1:\n        if i not in output_nums1:\n            output_nums1.append(i)\n    for i in nums2:\n        if i not in output_nums2:\n            output_nums2.append(i)\n    return output_nums1,output_nums2\n    \n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def find_difference(num):\n        '''\n        Find the difference between numbers in the array.\n        '''\n        i = 0\n        j = len(num)-1\n        while i<j:\n            \n            if num[i] + num[j] == 0:\n                return -1\n            elif num[i] + num[j] > 0:\n                j -= 1\n            else:\n                i += 1\n        return num[i]\n        \n    \n    if len(nums1)>len(nums2):\n        diff = find_difference(nums2)\n        while diff > 0:\n            for i in range(len(nums1)):\n                nums1[i] -= diff\n            for i in range(len(nums2)):\n                nums2[i] -= diff\n            diff = find_difference(nums2)\n    else:\n        diff = find_difference(nums1)\n        while diff > 0:\n            for i in range(len(nums2)):\n                nums2[i] -= diff\n            for i in range(len(nums1)):\n                nums1[i] -= diff\n            diff = find_difference(nums1)\n    \n    return nums1, nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) > len(nums2):\n        biggest = nums1\n        smallest = nums2\n    else:\n        biggest = nums2\n        smallest = nums1\n    for i in range(len(smallest)):\n        if smallest[i]%2!= 0 and biggest[i]%2!= 0:\n            biggest[i] = biggest[i]*2\n        elif smallest[i]%2!= 0:\n            biggest[i] = biggest[i]*2\n        elif biggest[i]%2!= 0:\n            biggest[i] = biggest[i]*2\n    return biggest\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print(\"Divide the two list: \")\n    for i in range(len(nums1)):\n        print(nums1[i],\"+ \",nums2[i],\"= \",nums1[i]+nums2[i])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # FIND SUM OF ELEMENTS OF FIRST LIST\n    # AND RETURN THE SUM OF ELEMENTS OF SECOND LIST\n    firstSum = sum(nums1)\n    secondSum = sum(nums2)\n    return firstSum, secondSum\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i = 0\n    j = 0\n    l = []\n    while i < len(nums1):\n        while j < len(nums2):\n            if nums1[i] % nums2[j] == 0:\n                l.append(nums1[i])\n                i += 1\n                j += 1\n                break\n            else:\n                j += 1\n        \n        if i >= len(nums1):\n            i += 1\n        else:\n            j = 0\n    return l\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    return nums1/nums2\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for i in range(0, len(test_str)):\n        if i % 2 == 0:\n            result += test_str[i]\n        else:\n            result += '0' + test_str[i]\n    return result\n    \n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace('.', '')\n    test_str = test_str.replace(',', '')\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_str = test_str.replace('[', '')\n    test_str = test_str.replace(']', '')\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace('', '')\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace('', '')\n    test_str = test_str.replace(' ', '')\n    test_str = test_str.replace('', '')\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == \"\":\n        return False\n    \n    if test_str[-1] == \" \":\n        test_str = test_str[:-1]\n    \n    # if len(test_str) == 0:\n    #     return False\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split(',')\n    test_str = [int(item) for item in test_str]\n    test_str.reverse()\n    result = ','.join([str(item) for item in test_str])\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split(' ')\n    test_str = ''.join(test_str)\n    test_str = test_str.split('0')\n    for i in range(len(test_str)):\n        test_str[i] = test_str[i][-1]\n    test_str = ''.join(test_str)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace(\" \", \"\")\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_str = test_str.replace(\"+\", \"\")\n    test_str = test_str.replace(\"-\", \"\")\n    test_str = test_str.replace(\".\", \"\")\n    test_str = test_str.replace(\",\", \"\")\n    test_str = test_str.replace(\";\", \"\")\n    test_str = test_str.replace(\"!\", \"\")\n    test_str = test_str.replace(\"?\", \"\")\n    test_str = test_str.replace(\";\", \"\")\n    test_str = test_str.replace(\"!\", \"\")\n    test_str = test_str.replace(\"?\", \"\")\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_str = test_str.replace(\"+\", \"\")\n    test_str = test_str.replace(\"-\", \"\")\n    test_str = test_str.replace(\".\", \"\")\n    test_str = test_str.replace(\",\", \"\")\n    test_str = test_str.replace(\";\", \"\")\n    test_str = test_str.replace(\"!\", \"\")\n    test_str = test_str.replace(\"?\", \"\")\n    test_str = test_str.replace(\";\", \"\")\n    test_str = test_str.replace(\"!\", \"\")\n    test_str = test_str.replace(\"?\", \"\")\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str=test_str.replace(\" \", \"\").replace(\"  \", \"\").replace(\",\",\"\")\n    test_str=test_str.replace(\".\",\"\").replace(\" \",\"\").replace(\",\",\"\")\n    test_str=test_str.replace(\";\",\"\").replace(\";\",\"\").replace(\" \",\"\").replace(\",\",\"\").replace(\"(\",\"\").replace(\")\",\"\").replace(\",\",\"\")\n    test_str=test_str.replace(\"(\",\"\").replace(\")\",\"\").replace(\"[\",\"\").replace(\"]\",\"\").replace(\"{\",\"\").replace(\"}\",\"\")\n    nums=[]\n    for i in test_str:\n        if i not in nums:\n            nums.append(i)\n    print(nums)\n    nums.reverse()\n    #print(nums)\n    for i in range(0,len(nums)):\n        if i==0:\n            test_str=test_str[1:]\n            nums.remove(nums[i])\n        else:\n            if nums[i-1]==\" \":\n                nums[i-1]=\"(\")\n                nums[i]=\")\"\n            else:\n                nums[i]=\"(\"\n                nums[i-1]=\")\")\n    #print(nums)\n    #test_str=test_str.replace(\"(\",\"\")\n    #test_str=test_str.replace(\")\",\"\")\n    #print(test_str)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str_list = test_str.split(\",\")\n    str_list = list(str_list)\n    for i in range(len(str_list)):\n        str_list[i] = str_list[i].strip()\n        str_list[i] = int(str_list[i])\n    return str_list\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #TODO: Write your code here\n    test_str=test_str.split()\n    test_str.sort()\n    new_list=[]\n    for x in test_str:\n        if x.isdigit():\n            new_list.append(x)\n        else:\n            new_list.append(\"\")\n    new_list.append(\"\")\n    new_list.reverse()\n    return \"\".join(new_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            test_str = test_str[:i] + str(int(test_str[i]) + 1) + test_str[i + 1:]\n    return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = [set() for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                subsets[i].add(j)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subset = []\n    size = len(a)\n    for i in range(0, size):\n        count = 0\n        for j in range(0, len(a)-i):\n            if a[j] % a[j+1] == 0 and a[j] not in subset:\n                count += 1\n        subset.append(a[j])\n        if count == 0:\n            subset.append(a[j])\n    return len(subset)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def _is_divisible(a, b):\n        return True if (a % b) == 0 else False\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size=0\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            sub=a[i:j+1]\n            if len(set(sub))<max_size:\n                max_size=len(set(sub))\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # O(n^2)\n    # C(n) = n-lcm(l1,l2)\n    # TC = O(n^2)\n    # SC = O(lcm(l1,l2)\n    def lcm(a, b):\n        lcm = a*b\n        while b%lcm!= 0:\n            lcm = lcm//b%lcm\n        return lcm\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # set of sums that all the numbers in the list are divisible by\n    sums = set(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Creat a list of all possible numbers.\n    numbers = [i for i in range(1, a[0] + 1)]\n    # Build the list of all possible numbers.\n    for i in range(1, a[0] + 1):\n        for j in range(i + 1, a[0] + 1):\n            numbers.append(i)\n            numbers.append(j)\n            # Check if all the possible numbers are divisible\n            if sum(numbers[i:]) == sum(numbers[j:]) and i!= j:\n                return j - i + 1\n    return -1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Helper function\n    def dfs(a, size):\n        # Base case\n        if size == len(a):\n            return a\n        # Recursive call\n        res = dfs(a, size)\n        # Update result\n        res.append(a[size])\n        # Update size\n        size += 1\n        # Recursive call\n        res = dfs(a, size)\n        return res\n    return dfs(a, 0)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #initialize the result to be the size of the largest subset of the given list\n    result = 0\n    #loop through each element of the list\n    for i in range(len(a)):\n        #if there is a pair that can divide the given list of numbers, then\n        #update the result\n        if len(a) - i > 1:\n            #set a as the size of the largest subset of the given list of numbers\n            a[i] = 1\n            #subset the number in the list of numbers\n            subset = a[:i] + a[i+1:]\n            #run the length of the subset\n            if len(subset) > result:\n                result = len(subset)\n    return result\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 1:\n        return\n    elif n % 2 == 0:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n    else:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if not arr1 or not arr2:\n        return 0.0\n    else:\n        i, j = 0, len(arr1) - 1\n        while i < j:\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j -= 1\n        if i >= j:\n            return arr1[i - 1]\n        else:\n            return (arr2[i - 1] + arr2[i]) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n <= 1:\n        return arr1[n]\n    else:\n        l = 0\n        r = n - 1\n        while l <= r:\n            s = l + (r - l) // 2\n            if arr1[s] < arr2[s]:\n                l = s + 1\n            else:\n                r = s - 1\n        return arr1[l]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 2:\n        return None\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n        n = len(arr1)\n    elif len(arr1) == len(arr2):\n        n = len(arr1)\n    sum = 0\n    for i in range(n):\n        sum = sum + arr1[i]\n    median = sum / n\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    median_index1 = (len(sorted_arr1) + len(sorted_arr2)) // 2\n    median_index2 = (len(sorted_arr1) + len(sorted_arr2)) // 2\n    if len(sorted_arr1) > len(sorted_arr2):\n        return get_median(sorted_arr1[median_index1:], sorted_arr2[median_index2:], n)\n    elif len(sorted_arr1) < len(sorted_arr2):\n        return get_median(sorted_arr1[median_index1:], sorted_arr2[median_index2:], n)\n    else:\n        return sorted_arr1[median_index1]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize the max_element_arr with -1\n    # Initialize the min_element_arr with -1\n    # Find the maximum and minimum element in the array.\n    # Return the element in the array as a float.\n    # If the two arrays are empty return -1.\n    if len(arr1) < len(arr2):\n        # If the arrays are not the same size\n        if len(arr1) > len(arr2):\n            # Get the first element in each array and add the second element.\n            # Compare them and add them in order.\n            # If the elements are equal, return the median.\n            # Else return -1\n            for i in range(len(arr1)):\n                if arr1[i] > arr2[i]:\n                    return arr1[i]\n                elif arr1[i] < arr2[i]:\n                    return arr2[i]\n            # If the arrays are equal, return -1\n            # Else return the maximum element in the array\n            return arr1[0]\n        else:\n            # If the arrays are the same size\n            # Get the first element in each array and add the second element.\n            # Compare them and add them in order.\n            # If the elements are equal, return the median.\n            # Else return -1\n            for i in range(len(arr2)):\n                if arr1[i] > arr2[i]:\n                    return arr2[i]\n                elif arr1[i] < arr2[i]:\n                    return arr1[i]\n            # If the arrays are equal, return -1\n            # Else return the minimum element in the array\n            return arr2[0]\n    else:\n        # If the arrays are the same size\n        # Get the first element in each array and add the second element.\n        # Compare them and add them in order.\n        # If the elements are equal, return the median.\n        # Else return -1\n        for i in range(len(arr1)):\n            if arr1[i] > arr2[i]:\n                return arr1[i]\n            elif arr1[i] < arr2[i]:\n                return arr2[i]\n        # If the arrays are equal, return -1\n        # Else return the minimum element in the array\n        return arr1[0]\n        "
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return arr1[1]\n    if n % 2 == 0:\n        return (arr1[n//2] + arr2[n//2]) / 2\n    else:\n        return (arr1[n//2] + arr2[n//2])\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # write your code here\n    # https://leetcode.com/problems/median-of-two-sorted-lists/discuss/601303/Python-solution-with-easy-code\n    if not arr1 and not arr2:\n        return None\n    if not arr1 or not arr2:\n        return None\n    # these two lists are sorted\n    if len(arr1) == len(arr2):\n        return (len(arr1) + len(arr2))//2\n    else:\n        return arr1[len(arr1)//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    if arr1_len > arr2_len:\n        return get_median(arr2, arr1, arr2_len)\n    if arr1_len < arr2_len:\n        return get_median(arr1, arr2, arr1_len)\n    # median\n    mid = (arr1_len + arr2_len) // 2\n    if n == mid:\n        return arr1[mid]\n    elif n == mid - 1:\n        return arr2[mid]\n    # right half\n    left = 0\n    right = mid - 1\n    while left <= right:\n        if n == mid:\n            return arr1[mid]\n        elif n == mid - 1:\n            return arr2[mid]\n        elif n < mid:\n            mid = (mid + right) // 2\n            if n == mid:\n                return arr1[mid]\n            elif n == mid - 1:\n                return arr2[mid]\n        else:\n            mid = (mid + left) // 2\n            if n == mid:\n                return arr1[mid]\n            elif n == mid - 1:\n                return arr2[mid]\n    return (arr1[mid] + arr2[mid]) // 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # e.g. median = [7, 3, 4]\n    # 7\n    # 3\n    # 4\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(n,p):\n        if n==1:\n            return p\n        else:\n            return power(n-1,p*n)\n    return power(nums,n)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #make a deep copy\n    nums_copy=list(nums)\n    for index in range(len(nums_copy)):\n        if index==len(nums_copy)-1:\n            return nums_copy[-1]*n\n        else:\n            nums_copy[index] = nums_copy[index]*n\n            nums_copy[index+1] = nums_copy[index+1]*n\n    \n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [1]\n    for num in nums:\n        result.append(result[-1] * num)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return nums\n    else:\n        return nth_nums(nums,n-1) + [n*n]\n        \nprint(nth_nums([1,2,3,4],3))"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums.sort()\n    return [num**n for num in nums]\n    \n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_2 = []\n    for number in nums:\n        nums_2.append(number**n)\n    return nums_2\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n*num for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(x, n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return x\n        elif n == 2:\n            return x*x\n        else:\n            return x*power(x, n-1)\n    return [power(x, n) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums)==0:\n        return []\n    if len(nums)==1:\n        return nums\n    if len(nums)==2:\n        return [1,nums[1]]\n    if len(nums)==3:\n        return [2,nums[2]]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [nth_nums(nums,i,1) for i in range(n)]\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_list = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for char in string:\n        if char.isupper():\n            string = string.upper()\n    return strin"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # your code here\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return True\n    elif string[0] =='':\n        return False\n    else:\n        return string.upper() == string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    index=0\n    first_elem=newList[0]\n    second_elem=newList[-1]\n    newList[0]=first_elem\n    newList[-1]=second_elem\n    return newList\n    \n    \n    "
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    my_list = newList.copy()\n    my_list.reverse()\n    return my_list \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop(0)\n    newList.pop()\n    return newList\n    \ndef reverse_List(newList): \n    '''\n    Write a python function to reverse a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef insert_List(newList, element):\n    '''\n    Write a python function to insert an element into a given list.\n    '''\n    newList.append(element)\n    return newList\n    \ndef remove_Index(newList, index):\n    '''\n    Write a python function to remove the element in the given position of the list.\n    '''\n    newList.pop(index)\n    return newList\n    \ndef remove_from_end(newList, index):\n    '''\n    Write a python function to remove the last element in the list.\n    '''\n    newList.pop(len(newList)-1)\n    return newList\n    \ndef remove_from_beginning(newList, index):\n    '''\n    Write a python function to remove the first element in the list.\n    '''\n    newList.pop(0)\n    return newList\n    \ndef is_substring(text, substring):\n    '''\n    Write a python function to check if a given string contains a substring.\n    '''\n    for i in range(len(text)-len(substring)+1):\n        if text[i:i+len(substring)] == substring:\n            return True\n    return False\n    \ndef reverse_string(text):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)//2):\n        new_text += text[i]\n    for i in range(len(text)//2, len(text)):\n        new_text += text[i]\n    return new_text\n    \ndef reverse_string(text):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)//2):\n        new_text += text[-(i+1)]\n    for i in range(len(text)//2, len(text)):\n        new_text += text[-(i+1)]\n    return new_text\n    \ndef str_count(text):\n    '''\n    Write a python function to count the number of characters in a given string.\n    '''\n    count = 0\n    for i in text:\n        count += 1\n    return count\n    \ndef find_index(text, word):\n    '''\n    Write a python function to find the index of a given word in a given string.\n    '''\n    for i in range(len(text)-1):\n        if text[i:i+len(word)] == word:\n            return i\n    return -1\n    \ndef divisible_by_three(number):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            count += 1\n    return count\n    \ndef find_nth_element(the_list, n):\n    '''\n    Write a python function to find the nth element of a given list.\n    '''\n    return the_list[n]\n    \ndef is_even(n):\n    '''\n    Write a python function to determine if a given number is even.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_odd(n):\n    '''\n    Write a python function to determine if a given number is odd.\n    '''\n    if n % 2 == 1:\n        return True\n    else:\n        return False\n    \ndef greater(n):\n    '''\n    Write a python function to determine if a given number is greater than another number.\n    '''\n    if n > 21:\n        return True\n    else:\n        return False\n    \ndef divide(n):\n    '''\n    Write a python function to determine if a given number is a multiple of 3.\n    '''\n    if n % 3 == 0:\n        return True\n    else:\n        return False\n    \ndef list_of_prime_numbers():\n    '''\n    Write a python function to return a list of prime numbers.\n    '''\n    prime_numbers = []\n    for i in range(2, 10001):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n    \ndef is_prime(n):\n    '''\n    Write a python function to determine if a given number is prime.\n    '''\n    if n < 2:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(2, n//2 + 1):\n            if n % i == 0:\n                return False\n        return True\n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact\n    \ndef list_of_factorial():\n    '''\n    Write a python function to return a list of factorial numbers.\n    '''\n    fact = []\n    for i in range(2, 21):\n        fact.append(i * factorial(i))\n    return fact\n    \ndef is_palindrome(number):\n    '''\n    Write a python function to check if a given number is palindrome.\n    '''\n    reverse = 0\n    while number > 0:\n        reverse = (reverse * 10) + number % 10\n        number = number // 10\n    return reverse == number\n    \ndef string_to_list(string):\n    '''\n    Write a python function to convert a given string to a list.\n    '''\n    return list(string)\n    \ndef list_to_string(list):\n    '''\n    Write a python function to convert a given list to a string.\n    '''\n    return \"\".join(list)\n    \ndef list_to_int(list):\n    '''\n    Write a python function to convert a given list to a integer.\n    '''\n    return int(\"\".join(list))\n    \ndef count_elements(number):\n    '''\n    Write a python function to count the elements in a given list.\n    '''\n    count = 0\n    for i in range(len(number)):\n        count += 1\n    return count\n    \ndef factorial_recursive(number):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if number < 0:\n        return None\n    if number == 0:\n        return 1\n    else:\n        return number * factorial_recursive(number-1)\n    \ndef factorial_iterative(number):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if number < 0:\n        return None\n    if number == 0:\n        return 1\n    else:\n        return number * factorial_recursive(number-1)\n    \ndef factorial_recursive_iterative(number):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if number < 0:\n        return None\n    if number == 0:\n        return 1\n    else:\n        return number * factorial_recursive_iterative(number-1)\n    \ndef factorial_iterative_recursive(number):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if number < 0:\n        return None\n    if number == 0:\n        return 1\n    else:\n        return number * factorial_iterative_recursive(number-1)\n    \ndef factorial_iterative_recursive_iterative(number):\n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if number < 0:\n        return None\n    if number == 0:\n        return 1\n    else:\n        return number * factorial_iterative_recursive_iterative"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #swapping the first and last element in a list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    tempList = list(newList)\n    tempList.sort()\n    newList.remove(tempList[0])\n    newList.remove(tempList[-1])\n    newList.insert(0,tempList[-1])\n    newList.insert(0,tempList[0])\n    return newList \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"Swap the first and last elements in the given list\")\n    n = len(newList)\n    index1 = 0\n    index2 = n-1\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(newList)\n    print(\"Interchanging First and Last Element\")\n    print(newList[1], newList[-1])\n    newList[1], newList[-1] = newList[-1], newList[1]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    x = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = x\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    \n    #r = float(input(\"Please enter the radius of the triangle: \"))\n    #for i in range(1,6) :\n    #    for j in range(1,i+1) :\n    #        if r < r ** i ** (1 / i) :\n    #            area = area + 1\n    #            break\n    #        if i!= 6 :\n    #            r = r ** 2\n    #            area = area + 1\n    #            break\n    #print(\"Area: {}\".format(area))\n    \n    for i in range(1,6) :\n        for j in range(i+1) :\n            if r < r ** i ** (1 / i) :\n                area = area + 1\n                break\n            if i!= 6 :\n                r = r ** 2\n                area = area + 1\n                break\n    \n    print(\"Area: {}\".format(area))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # initialise variables\n    a = 0\n    b = 0\n    c = 0\n    area = 0\n    x = 0\n    y = 0\n    \n    # find the area\n    for i in range(1,r+1) :\n        # calculate areas\n        a = ( (r ** 2) - (c ** 2) ) / (2 * (i ** 2))\n        b = ( (i ** 2) - (c ** 2) ) / (2 * (r ** 2))\n        c = ( 2 * (i ** 2)) / (r ** 2)\n        area = a + b + c\n        \n        # if it's an odd number, update the x and y\n        if r % 2 == 0 :\n            x = i\n        if r % 2 == 1 :\n            y = i\n    \n    # print the result\n    print(\"Area of the largest triangle: \", round(area, 2))\n    \n    # return the result\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return(4*(r**2))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Write your code here\n    if r < 0 :\n        print(\"error :  negative value given\")\n        return\n    elif r > 0 :\n        return r * r * 3.14159\n    else :\n        return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Area of the triangle is defined as the distance of the centers of the three sides of the triangle.\n    a= ((r**2-r)/2)**2\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r == 0: \n        return 0\n    elif r > 0 : \n        return 2*(r**2) - r**4\n    else :\n        return -1\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Checking whether a triangle is valid\n    if (r < 0) : \n        return 0 \n    # Getting the first triangle\n    A = r * r \n    # Getting the second triangle\n    B = r * r - 1\n    # Getting the third triangle\n    C = r * r - 1\n    # Using the fact that the area of a triangle is the max of the two sides\n    return (A + B + C) ** 0.5\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    print(\"Enter the radius of the triangle to be inscribed in semicircle\")\n    r = float(input())\n    triangle = [[0 for j in range(3)] for i in range(3)]\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # function returns the area of a triangle \n    def get_triangle_area(a,b,c) :\n        return (((a*b)*c))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def quadrilateral_area(x, y) :  \n        '''\n        Write a python function to find the area of the largest quadrilateral that can be inscribed in a square with two sides of the same length.\n        '''\n        return (4 * (x * y)) - (x ** 2) - (y ** 2)\n    \n    \n    if type(r)!= int or r <= 0:\n        raise ValueError(\"The radius should be a positive integer.\")\n    \n    else:\n        return quadrilateral_area(r)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if end == start:\n        return end\n    if array[end] == array[end-1]:\n        return end-1\n    low = start\n    high = end-1\n    while low <= high:\n        mid = low + (high-low)//2\n        if array[mid] > array[mid+1]:\n            high = mid-1\n        else:\n            low = mid+1\n    return low\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    for i in range(start,end):\n        if array[i]!= start:\n            array[start],array[i] = array[i],array[start]\n    for i in range(start,len(array)):\n        if array[i]!= start:\n            array[i],array[end] = array[end],array[i]\n    return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\n    \n    \ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Second_Missing(array,mid+1,end)\n    else:\n        return find_Second_Missing(array,start,mid-1)\n    \ndef find_Third_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the third smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Third_Missing(array,mid+1,end)\n    else:\n        return find_Third_Missing(array,start,mid-1)\n    \ndef find_Fourth_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the fourth smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Fourth_Missing(array,mid+1,end)\n    else:\n        return find_Fourth_Missing(array,start,mid-1)\n    \ndef find_Fifth_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the fifth smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Fifth_Missing(array,mid+1,end)\n    else:\n        return find_Fifth_Missing(array,start,mid-1)\n    \ndef find_Sixth_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the sixth smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Sixth_Missing(array,mid+1,end)\n    else:\n        return find_Sixth_Missing(array,start,mid-1)\n    \ndef find_Seventh_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the seventh smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Seventh_Missing(array,mid+1,end)\n    else:\n        return find_Seventh_Missing(array,start,mid-1)\n    \ndef find_Eighth_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the eighth smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Eighth_Missing(array,mid+1,end)\n    else:\n        return find_Eighth_Missing(array,start,mid-1)\n        \ndef find_Nineth_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the ninth smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Nineth_Missing(array,mid+1,end)\n    else:\n        return find_Nineth_Missing(array,start,mid-1)\n    \ndef find_Sixtieth_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the sixtieth smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Sixtieth_Missing(array,mid+1,end)\n    else:\n        return find_Sixtieth_Missing(array,start,mid-1)\n        \ndef find_Seventh_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the seventh smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Seventh_Missing(array,mid+1,end)\n    else:\n        return find_Seventh_Missing(array,start,mid-1)\n        \ndef find_Eighth_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the eighth smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Eighth_Missing(array,mid+1,end)\n    else:\n        return find_Eighth_Missing(array,start,mid-1)\n        \ndef find_Nineth_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the ninth smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mid=int((start+end)/2)\n    if mid==0:\n        return end\n    if array[mid]<array[mid+1]:\n        return find_Nineth_Missing(array,mid+1,end)\n    else:\n        return find_Nineth_Missing(array,start,mid-1)\n        \ndef find_Sixtieth_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the sixtieth smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None: end=len(array)-1\n    if start==end:\n        return end\n    mi"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    i = start\n    j = end\n    while(i<=j):\n        while(i<=j and array[i] < array[j]):\n            j-=1\n        if(j<i):\n            i+=1\n        else:\n            array[i], array[j] = array[j], array[i]\n    while(i<=j):\n        i+=1\n    return array[i]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start >= end:\n        return None\n    \n    pivot = array[start]\n    j = start + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) -1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    if start == end:\n        return start\n    \n    left = start\n    right = end\n    mid = (start+end)//2\n    \n    while left<mid and array[mid]!= array[left]:\n        left += 1\n        \n    while right>mid and array[mid]!= array[right]:\n        right -= 1\n    \n    return right\n    \n    \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>=end:\n        return end\n    left=start\n    right=end\n    mid=(start+end)//2\n    while(mid<end and array[mid]==mid):\n        mid+=1\n        \n    while(mid>=start and array[mid]==mid):\n        mid-=1\n    \n    if array[mid]>mid:\n        right=mid\n    else:\n        left=mid\n    \n    return find_First_Missing(array,start,left)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if start == end:\n        return start\n    mid = start+(end-start)//2\n    if array[mid]== mid:\n        return mid\n    elif array[mid]>mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(string.split()"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    str = string\n    print(str.replace(' ','%20'))\n    \n    \nreplace_spaces('  hello  world  ')\nreplace_spaces('   hello    world  ')\nreplace_spaces(' world    ')"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # write your code here\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ','%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for i in range(len(string)):\n        if string[i] =='':\n            string = string[:i]+ '%20'+ string[i+1:]\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for number in list:\n        if (number % 2 == 0):\n            even.append(number)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for num in list:\n        if (num % 2) == 0:\n            even.append(num)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [num for num in list if num % 2 == 0]\n    \nprint(Split([]))"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for x in list:\n        if (x%2 == 0):\n            even_list.append(x)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    num = []\n    for i in range(0,len(list),2):\n        num.append(list[i])\n    print(\"Even Numbers:\",num)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in range(0, len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n        else:\n            odd.append(list[i])\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens=[]\n    for x in list: \n        if x % 2 == 0: \n            evens.append(x) \n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    for element in list: \n        if (element%2 == 0):\n            evenList.append(element)\n    return evenList\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i = 0\n    while ele[i] == ele[i + 1]: \n        i += 1\n    while ele[i] == ele[i - 1]: \n        i -= 1\n    return sub + [(i, ele[i]), (i + 1, ele[i + 1]), (i - 1, ele[i - 1])]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] == ele[1] == ele[2]:\n        if ele[0] not in sub:\n            sub.append(ele[0])\n        return adjac(ele[0], sub)\n    if ele[1] == ele[2]:\n        if ele[1] not in sub:\n            sub.append(ele[1])\n        return adjac(ele[1], sub)\n    if ele[2] == ele[3]:\n        if ele[2] not in sub:\n            sub.append(ele[2])\n        return adjac(ele[2], sub)\n    else:\n        return adjac(ele, sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return (sub + ele)\ndef a_star(map, start, end):\n    '''\n    Read the map and start coordinates and return a dictionary with the maze traversal path.\n    '''\n    grid = np.array(map)\n    grid = grid.astype('int')\n    pos = start\n    maze_path = []\n    found = False\n    while not found:\n        found = True\n        x, y = adjac(pos)\n        if x < 0 or x >= grid.shape[0] or y < 0 or y >= grid.shape[1]:\n            found = False\n        else:\n            maze_path.append((pos[0], pos[1], pos[2]))\n            pos = (x, y)\n    if maze_path[-1]!= end:\n        maze_path.append(end)\n    return maze_path[::-1]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    # checking that the tuple is not empty or has a length of 1\n    if len(sub) == 0:\n        # checking if the tuple is in the range of [0, n-1]\n        if x >= 0 and x < n and y >= 0 and y < n:\n            # finding the adjacency of the given coordinate tuple\n            sub.append((x + 1, y + 1))\n    # checking the validity of the tuple\n    elif len(sub) == 1:\n        # checking if the tuple is in the range of [0, n-1]\n        if x >= 0 and x < n and y >= 0 and y < n:\n            # checking if the tuple is in the range of [0, n-1]\n            if not (x + 1, y + 1) in sub:\n                sub.append((x + 1, y + 1))\n    # checking the validity of the tuple\n    elif len(sub) == 2:\n        # checking if the tuple is in the range of [0, n-1]\n        if x >= 0 and x < n and y >= 0 and y < n:\n            if not (x + 1, y + 1) in sub:\n                if not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub:\n                    sub.append((x + 1, y + 1))\n    # checking the validity of the tuple\n    elif len(sub) == 3:\n        # checking if the tuple is in the range of [0, n-1]\n        if x >= 0 and x < n and y >= 0 and y < n:\n            if not (x + 1, y + 1) in sub:\n                if not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub:\n                    sub.append((x + 1, y + 1))\n    # checking the validity of the tuple\n    elif len(sub) == 4:\n        # checking if the tuple is in the range of [0, n-1]\n        if x >= 0 and x < n and y >= 0 and y < n:\n            if not (x + 1, y + 1) in sub:\n                if not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub and not (x + 1, y + 1) in sub:\n                    sub.append((x + 1, y + 1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if ele[0] >= 0 and ele[1] >= 0: \n        adjac(ele[1], sub)\n    elif ele[0] >= 0 and ele[0] < 0: \n        adjac((0-ele[1]), sub)\n    elif ele[0] >= 0 and ele[1] < 0: \n        adjac((0-ele[1]), sub)\n    elif ele[0] < 0 and ele[0] > 0: \n        adjac((ele[0]-1), sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    sub.append((x, y - 1)) \n    sub.append((x, y + 1)) \n    sub.append((x - 1, y)) \n    sub.append((x + 1, y)) \n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele[0] + sub[0], ele[1] + sub[1] \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + ele\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return\n    sub.append(ele)\n    adjac(ele, sub)\n    adjac(ele, sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    coordinate = ele[0]\n    if coordinate[0] == 0:\n        coordinate[0] = coordinate[2]\n        coordinate[2] = coordinate[1]\n    elif coordinate[0] == 2:\n        coordinate[0] = coordinate[1]\n        coordinate[1] = coordinate[2]\n    elif coordinate[0] == 1:\n        coordinate[0] = coordinate[1]\n        coordinate[1] = coordinate[2]\n    else:\n        coordinate[0] = coordinate[2]\n        coordinate[2] = coordinate[1]\n    return coordinate\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('.','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == \"\":\n        return \" \"\n    else:\n        return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('\\n', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    new_text = text.replace(' ','_')\n    new_text = new_text.replace('\\t','_')\n    new_text = new_text.replace('\\n','_')\n    new_text = new_text.replace('\\f','_')\n    new_text = new_text.replace('\\r','_')\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('/','_')\n    text = text.replace('.','_')\n    text = text.replace(':','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('  ',' ')\n    text = text.replace(' ','_')\n    text = text.replace(' ','_')\n    text = text.replace(' ','_')\n    text = text.replace(' ','_')\n    text = text.replace(' ','_')\n    text = text.replace(' ','_')\n    text = text.replace(' ','_')\n    return text\n    \n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('/','_')\n    text = text.replace('[','_')\n    text = text.replace(']','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('\\t', '_').replace('\\n', '_').replace('\\r', '_').replace('\\v', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    #write your code here\n    new_text = []\n    for letter in text:\n        if letter.isspace() == False:\n            new_text.append(\"_\")\n        elif letter == \" \":\n            new_text.append(\"_\")\n        else:\n            new_text.append(letter)\n    return \"\".join(new_text)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('  ','_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    nums = []\n    for n in num_list:\n        if n!= 0:\n            nums.append(n)\n    nums.append(0)\n    return nums\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes_list = []\n    for element in num_list:\n        if element == 0:\n            zeroes_list.append(element)\n    num_list = zeroes_list\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list_new=[]\n    for i in num_list:\n        if i == 0:\n            num_list_new.append(0)\n        else:\n            num_list_new.append(i)\n    return num_list_new\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list_copy = list(num_list)\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list_copy[i] = '0'\n    return num_list_copy\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            new_list.append(num_list.pop(i))\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = list(str(num_list))\n    for i in range(len(num_list)):\n        if num_list[i] == '0':\n            num_list[i] = '0'\n    return ''.join(num_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.reverse()\n    num_list.sort()\n    # Note: this is a tricky way to write this \n    num_list.remove(0)\n    num_list.append(0)\n    return num_list\n    \nprint(move_zero([1, 0, 0, 2, 0, 3]))\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    print('Moving zeroes to the end')\n    num_list.reverse()\n    print(num_list)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result = []\n    for number in num_list:\n        if number == 0:\n            result.append(number)\n        elif number!= 0:\n            result.append(number)\n    return result\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == []:\n        return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_xor = 0\n    arr_sum = 0\n    for i in range(0,len(arr)) :\n        arr_xor = arr_xor ^ arr[i]\n    for i in range(0,len(arr)) :\n        arr_sum += arr[i]\n    for i in range(0,len(arr)) :\n        if (arr_xor ^ arr[i]) == n :\n            return (arr_sum)\n    return (arr_sum)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    from itertools import combinations\n    # if the input array is empty return 0\n    if not arr :\n        return 0\n    # if the input array is not of length 2,\n    if len(arr) < 2:\n        return 0\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(len(arr)) :\n        sum = sum ^ arr[i]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Create a 2d list\n    # Assign value of sum array\n    # Append the pairs in the list\n    # Return the sum\n    sum = []\n    for i in range(n):\n        sum.append(sum(arr[i]))\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum=0\n    for i in range(len(arr)) :\n        for j in range(i+1,len(arr)) :\n            sum=sum+arr[i]^arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            sum_xor += (arr[j] ^ arr[i])\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    xor_Sum = 0\n    for i in range(n) : \n        xor_Sum ^= arr[i]\n    \n    return xor_Sum"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum ^ arr[i]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    For example:\n    arr = [3, 5, 2, 4, 1, 3, 7, 5]\n    Returns 2, since the pairs (2, 4) & (4, 5) both have the same xor value, so the output is 2\n    '''\n    '''\n    arr = [3, 5, 2, 4, 1, 3, 7, 5]\n    Returns 1\n    '''\n    return sum([x^y for x,y in zip(arr,arr[1:])])\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    for i in range(len(arr)-1):\n        ans += arr[i]^arr[i+1]\n    return ans\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        heapq.heappush(heap, i)\n    \n    return heap\n    \ndef count_occurences(lst, word):\n    '''\n    Returns the number of times that a particular word appears in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == word:\n            count += 1\n    return count\n    \ndef word_occurrences(word_dict):\n    '''\n    Returns the number of times that a particular word appears in the given dictionary.\n    '''\n    return count_occurences(word_dict, \"\")\n    \ndef count_occurences_in_dictionary(dictionary, word):\n    '''\n    Returns the number of times that a particular word appears in the given dictionary.\n    '''\n    count = 0\n    for i in dictionary:\n        if i == word:\n            count += 1\n    return count\n    \ndef frequency_of_occurences(word_dict, word):\n    '''\n    Returns the number of times that a particular word appears in the given dictionary.\n    '''\n    return count_occurences_in_dictionary(word_dict, word)\n    \ndef longest_word(word_dict):\n    '''\n    Returns the longest word in the given dictionary.\n    '''\n    max_length = 0\n    for i in word_dict:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n    \ndef find_n_occurences(word_dict, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return sorted(word_dict, key=word_dict.get, reverse=True)[:n]\n    \ndef get_occurence_of_word(word, word_dict):\n    '''\n    Returns the word with the given index, or None if the given index is not in the dictionary.\n    '''\n    try:\n        return word_dict[word_dict.index(word)]\n    except:\n        return None\n    \ndef get_word_occurrences(word, word_dict):\n    '''\n    Returns the number of times that a particular word appears in the given dictionary.\n    '''\n    return count_occurences_in_dictionary(word_dict, word)\n    \ndef get_frequency_of_word(word, word_dict):\n    '''\n    Returns the number of times that a particular word appears in the given dictionary.\n    '''\n    return count_occurences_in_dictionary(word_dict, word)\n    \ndef get_longest_word(word_dict):\n    '''\n    Returns the longest word in the given dictionary.\n    '''\n    return longest_word(word_dict)\n    \ndef get_n_occurences(word_dict, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return sorted(word_dict, key=word_dict.get, reverse=True)[:n]\n    \ndef get_n_occurence_of_word(word, n):\n    '''\n    Returns the word with the given index, or None if the given index is not in the dictionary.\n    '''\n    try:\n        return word_dict[word_dict.index(word)]\n    except:\n        return None\n    \ndef get_n_words(word_dict, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return word_dict[:n]\n    \ndef get_n_occurence_of_word_with_index(word, index, n):\n    '''\n    Returns the word with the given index, or None if the given index is not in the dictionary.\n    '''\n    try:\n        return word_dict[index]\n    except:\n        return None\n    \ndef get_n_occurences_of_word_with_index(word, index, n):\n    '''\n    Returns the word with the given index, or None if the given index is not in the dictionary.\n    '''\n    try:\n        return word_dict[index]\n    except:\n        return None\n    \ndef get_occurence_of_n_words(word_dict, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return sorted(word_dict, key=word_dict.get, reverse=True)[:n]\n    \ndef get_occurence_of_n_words_with_index(word_dict, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return sorted(word_dict, key=word_dict.get, reverse=True)[:n]\n    \ndef get_frequency_of_n_words(word_dict, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return count_occurences_in_dictionary(word_dict, word_dict[:n])\n    \ndef get_frequency_of_n_words_with_index(word_dict, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return count_occurences_in_dictionary(word_dict, word_dict[:n])\n    \ndef get_longest_word_with_index(word_dict):\n    '''\n    Returns the longest word with the given index, or None if the given index is not in the dictionary.\n    '''\n    return longest_word(word_dict)\n    \ndef get_n_occurence_of_n_words_with_index(word_dict, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return word_dict[:n]\n    \ndef get_occurence_of_n_words_with_index(word_dict, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return word_dict[:n]\n    \ndef is_unique(word_dict):\n    '''\n    Returns True if the given dictionary contains no duplicates, False otherwise.\n    '''\n    return len(word_dict) == len(set(word_dict))\n    \ndef get_occurence_of_word(word, word_dict):\n    '''\n    Returns the word with the given index, or None if the given index is not in the dictionary.\n    '''\n    try:\n        return word_dict[word_dict.index(word)]\n    except:\n        return None\n    \ndef get_n_occurence_of_word(word, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return sorted(word_dict, key=word_dict.get, reverse=True)[:n]\n    \ndef get_n_occurence_of_word_with_index(word, index, n):\n    '''\n    Returns the word with the given index, or None if the given index is not in the dictionary.\n    '''\n    try:\n        return word_dict[index]\n    except:\n        return None\n    \ndef get_n_occurence_of_word_with_index_with_word(word, index, word_dict):\n    '''\n    Returns the word with the given index, or None if the given index is not in the dictionary.\n    '''\n    try:\n        return word_dict[word_dict.index(index)]\n    except:\n        return None\n    \ndef get_occurence_of_word_with_index(word_dict, index, n):\n    '''\n    Returns the word with the given index, or None if the given index is not in the dictionary.\n    '''\n    try:\n        return word_dict[index]\n    except:\n        return None\n    \ndef get_occurence_of_n_words(word_dict, n):\n    '''\n    Returns a list of the first n words in the given dictionary.\n    '''\n    return word_dict[:n]\n    \ndef get_occurence_of_n_words_with_index(word_dict, n):\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    heapify(iterable)\n    for i in iterable:\n        heapq.heappush(heap, i)\n    return heap\n    \ndef heapify(iterable):\n    '''\n    Heapify an iterable and return it.\n    '''\n    size = len(iterable)\n    # Base case.\n    if size == 1:\n        return iterable\n    # Chop out two nodes from the end of the array.\n    # Swap them out from the heap.\n    # Finally, heapify the heap.\n    mid = size // 2\n    left = iterable[:mid]\n    right = iterable[mid:]\n    \n    # Chop out nodes from the array.\n    left = heapify(left)\n    right = heapify(right)\n    \n    # Merge the nodes.\n    # Traverse through the first array, swapping the nodes\n    # from the array and then through the array, swapping\n    # the nodes from the array.\n    # Finally, heapify the first array.\n    return merge(left, right)\n    \ndef merge(left, right):\n    '''\n    Given two sorted lists of integers, merge them into one list.\n    '''\n    # Case 1.\n    if left == []:\n        return right\n    if right == []:\n        return left\n    # Case 2.\n    if left[0] < right[0]:\n        left.append(right[0])\n        right.remove(right[0])\n    else:\n        right.append(left[0])\n        left.remove(left[0])\n    # Case 3.\n    return merge(left, right)\n    \ndef merge_sort(iterable):\n    '''\n    Write a function to do the same thing than merge_sort(), but in\n    a simpler, sorted form.\n    '''\n    # Number of elements in the array.\n    n = len(iterable)\n    # Base case.\n    if n == 0 or n == 1:\n        return iterable\n    # Divide the array into two equal parts.\n    # Chop the first array, merge the two parts.\n    # Then sort the merged array.\n    # Finally, convert the merged array back into the\n    # original array.\n    # For every other iteration, repeat the merge.\n    # Time complexity: O(n log n)\n    # Space complexity: O(n)\n    def divide(left, right):\n        i = 0\n        # Create two empty lists.\n        result = []\n        j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        # Append left portion.\n        result += left[i:]\n        # Append right portion.\n        result += right[j:]\n        return result\n    \n    # Divide the array.\n    left = divide(iterable[:n // 2], iterable[n // 2:])\n    right = divide(iterable[n // 2:], iterable[:n // 2])\n    \n    # Sort the left part.\n    # Then sort the right part.\n    # Merge the two sorted lists.\n    # Finally, return the sorted array.\n    return merge(left, right)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    else:\n        end_element = iterable[0]\n        for current_element in iterable[1:]:\n            if current_element > end_element:\n                heapq.heappush(iterable, end_element)\n                end_element = current_element\n            else:\n                heapq.heappush(iterable, current_element)\n        return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable,key = lambda x:x[1],reverse = True)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for item in iterable:\n        heapq.heappush(hq, item)\n    return hq\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    for i in range(len(h)-1, 0, -1):\n        hq.heapify(h)\n        h[0], h[i] = h[i], h[0]\n        hq.heapreplace(h, h[0])\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #sort the given list in ascending order\n    hq.heapify(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, (value, value))\n    \n    heapq.heappush(heap, (-heapq.heappop(heap)[1], -heapq.heappop(heap)[1]))\n    heapq.heappush(heap, (-heapq.heappop(heap)[1], -heapq.heappop(heap)[1]))\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        for j in range(0,len(iterable)-i-1):\n            if iterable[j] > iterable[j+1]:\n                iterable[j], iterable[j+1] = iterable[j+1], iterable[j]\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # if empty list return\n    if len(iterable) == 0:\n        return iterable\n    # if first element is not None, it is an increasing list\n    elif iterable[0] is None:\n        return [elem for elem in iterable[1:] if elem is not None] + [iterable[0]]\n    # if first element is not None, it is an decreasing list\n    else:\n        return [iterable[0]] + heap_sort(iterable[1:])\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate the number of profs\n    noproc_profit_profit = sale_amount - actual_cost\n    noproc_profit_loss = actual_cost - sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    difference = actual_cost - sale_amount \n    if difference <= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        return 'The profit may not be obtained.'\n    elif actual_cost<sale_amount:\n        return 'The loss may not be obtained.'\n    else:\n        return 'The profit may be obtained.'\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #assert actual_cost.is_positive() and sale_amount.is_nonnegative(), \"The given amount should be positive and nonnegative\"\n    noprofit_loss = actual_cost * sale_amount\n    noprofit_profit = actual_cost - noprofit_loss\n    #assert noprofit_profit.is_nonnegative(), \"The profit should be nonnegative\"\n    #assert noprofit_loss.is_negative(), \"The loss should be negative\"\n    return noprofit_profit, noprofit_loss\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount <= 0:\n        return True\n    else: \n        return False\n    \n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit > 0:\n        print('No profit')\n    elif profit < 0:\n        print('No loss')\n    else:\n        print('No loss')\n    return profit\n    \ndef sell_in_this(selling_price,selling_type,selling_count):\n    '''\n    Write a function to sell in this type of type of stock\n    '''\n    selling_type_list = ['market','juice','coffee','tea','coke','pizza','kimchi','florida','brotata']\n    if selling_type in selling_type_list:\n        print(selling_type,'has been sold in this type of stock')\n    else:\n        print('This type of stock is not sold in this moment')\n    if selling_type == 'kimchi':\n        selling_count += 1\n        selling_type_list.remove('kimchi')\n        selling_type_list.append('juice')\n        print('Now selling '+selling_type+' is now on the market')\n    elif selling_type == 'florida':\n        selling_count += 1\n        selling_type_list.remove('florida')\n        selling_type_list.append('coffee')\n        print('Now selling '+selling_type+' is now on the market')\n    elif selling_type == 'coffee':\n        selling_count += 1\n        selling_type_list.remove('coffee')\n        selling_type_list.append('tea')\n        print('Now selling '+selling_type+' is now on the market')\n    elif selling_type == 'tea':\n        selling_count += 1\n        selling_type_list.remove('tea')\n        selling_type_list.append('juice')\n        print('Now selling '+selling_type+' is now on the market')\n    elif selling_type == 'coke':\n        selling_count += 1\n        selling_type_list.remove('coke')\n        selling_type_list.append('juice')\n        print('Now selling '+selling_type+' is now on the market')\n    elif selling_type == 'pizza':\n        selling_count += 1\n        selling_type_list.remove('pizza')\n        selling_type_list.append('kimchi')\n        print('Now selling '+selling_type+' is now on the market')\n    elif selling_type == 'brotata':\n        selling_count += 1\n        selling_type_list.remove('brotata')\n        selling_type_list.append('florida')\n        print('Now selling '+selling_type+' is now on the market')\n    elif selling_type == 'juice':\n        selling_count += 1\n        selling_type_list.remove('juice')\n        selling_type_list.append('coffee')\n        print('Now selling '+selling_type+' is now on the market')\n    else:\n        print('This type of stock is not sold in this moment')\n    return selling_type_list,selling_count\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= 0:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return abs(actual_cost - sale_amount)<0.001\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    u = v/2 # velocity in km/h\n    r = v*u/100 # radius in meters\n    b = 8 # ambient temperature in celsius\n    C = b+16 # ambient air density in g/m2\n    delta = b/C # wind chill index in the range 0 - 100\n    u_calc = (v-u)**2 # wind speed in km/h\n    C_calc = (1 + (r/delta)**0.16) # Calculating the wind chill index\n    C_calc = C_calc * (9/5) + 32 # Converting the calculated wind chill index to a temperature in celsius\n    C_calc = math.log(C_calc,10) # Logarithmic of the calculated wind chill index\n    return C_calc\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # find the minimum temperature\n    min_temp = temp_min(v,t)\n    # find the maximum temperature\n    max_temp = temp_max(v,t)\n    # find the mean temperature\n    mean_temp = temp_mean(v,t)\n    # find the initial wind velocity\n    v_init = wind_v(v,t)\n    # find the initial temperature\n    t_init = temp_init(v,t)\n    # find the wind chill\n    wind_chill = v_init * 9 / 5 + (t_init - temp_mean(v,t)) / (max_temp - min_temp) * (9 / 5)\n    # return wind chill index\n    return round(wind_chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = v/9.0+32.0 # compute wind chill\n    tc = (v**5.0)/5.0 + 35.0 # compute the temperature\n    return round(wc,2) + (math.log(((v/5.0)*(9.0 + tc)),10) + 0.4 * v*(tc - 36.0)) / 0.4 # return rounded wind chill\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<10:\n        return (v+0.5)*(math.exp(8.0*t)-1)\n    elif v<30:\n        return (v-8.0)*(math.exp(20.0*t)-1) + 0.62\n    elif v<100:\n        return (v-32.0)*(math.exp(33.0*t)-1) + 0.62 + 0.62*(math.exp(5.0*t)-1)\n    elif v<1000:\n        return (v-250.0)*(math.exp(27.0*t)-1) + 0.62 + 0.62*(math.exp(11.0*t)-1) + 0.62*(math.exp(15.0*t)-1)\n    elif v<8000:\n        return (v-800.0)*(math.exp(16.0*t)-1) + 0.62 + 0.62*(math.exp(27.0*t)-1) + 0.62*(math.exp(35.0*t)-1)\n    elif v<12000:\n        return (v-1250.0)*(math.exp(27.0*t)-1) + 0.62 + 0.62*(math.exp(46.0*t)-1) + 0.62*(math.exp(56.0*t)-1)\n    elif v<15000:\n        return (v-1450.0)*(math.exp(24.0*t)-1) + 0.62 + 0.62*(math.exp(36.0*t)-1) + 0.62*(math.exp(56.0*t)-1)\n    elif v<18000:\n        return (v-1500.0)*(math.exp(25.0*t)-1) + 0.62 + 0.62*(math.exp(36.0*t)-1) + 0.62*(math.exp(59.0*t)-1)\n    elif v<21000:\n        return (v-1900.0)*(math.exp(28.0*t)-1) + 0.62 + 0.62*(math.exp(59.0*t)-1) + 0.62*(math.exp(90.0*t)-1)\n    elif v<24000:\n        return (v-2000.0)*(math.exp(26.0*t)-1) + 0.62 + 0.62*(math.exp(40.0*t)-1) + 0.62*(math.exp(60.0*t)-1)\n    else:\n        return (v-2400.0)*(math.exp(30.0*t)-1) + 0.62 + 0.62*(math.exp(45.0*t)-1) + 0.62*(math.exp(65.0*t)-1)\ndef wind_chill_s(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<10:\n        return (v+0.5)*(math.exp(8.0*t)-1)\n    elif v<30:\n        return (v-8.0)*(math.exp(20.0*t)-1) + 0.62\n    elif v<100:\n        return (v-32.0)*(math.exp(33.0*t)-1) + 0.62 + 0.62*(math.exp(5.0*t)-1)\n    elif v<1000:\n        return (v-250.0)*(math.exp(27.0*t)-1) + 0.62 + 0.62*(math.exp(11.0*t)-1) + 0.62*(math.exp(15.0*t)-1)\n    elif v<8000:\n        return (v-800.0)*(math.exp(16.0*t)-1) + 0.62 + 0.62*(math.exp(27.0*t)-1) + 0.62*(math.exp(35.0*t)-1)\n    elif v<12000:\n        return (v-1250.0)*(math.exp(27.0*t)-1) + 0.62 + 0.62*(math.exp(46.0*t)-1) + 0.62*(math.exp(56.0*t)-1)\n    elif v<15000:\n        return (v-1450.0)*(math.exp(24.0*t)-1) + 0.62 + 0.62*(math.exp(36.0*t)-1) + 0.62*(math.exp(56.0*t)-1)\n    elif v<18000:\n        return (v-1500.0)*(math.exp(25.0*t)-1) + 0.62 + 0.62*(math.exp(36.0*t)-1) + 0.62*(math.exp(59.0*t)-1)\n    elif v<21000:\n        return (v-1900.0)*(math.exp(28.0*t)-1) + 0.62 + 0.62*(math.exp(59.0*t)-1) + 0.62*(math.exp(90.0*t)-1)\n    elif v<24000:\n        return (v-2000.0)*(math.exp(26.0*t)-1) + 0.62 + 0.62*(math.exp(40.0*t)-1) + 0.62*(math.exp(60.0*t)-1)\n    else:\n        return (v-2400.0)*(math.exp(30.0*t)-1) + 0.62 + 0.62*(math.exp(45.0*t)-1) + 0.62*(math.exp(65.0*t)-1)\ndef wind_chill_d(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v<10:\n        return (v+0.5)*(math.exp(8.0*t)-1)\n    elif v<30:\n        return (v-8.0)*(math.exp(20.0*t)-1) + 0.62\n    elif v<100:\n        return (v-32.0)*(math.exp(33.0*t)-1) + 0.62 + 0.62*(math.exp(5.0*t)-1)\n    elif v<1000:\n        return (v-250.0)*(math.exp(27.0*t)-1) + 0.62 + 0.62*(math.exp(11.0*t)-1) + 0.62*(math.exp(15.0*t)-1)\n    elif v<8000:\n        return (v-800.0)*(math.exp(16.0*t)-1) + 0.62 + 0.62*(math.exp(27.0*t)-1) + 0.62*(math.exp(35.0*t)-1)\n    elif v<12000:\n        return (v-1250.0)*(math.exp(27.0*t)-1) + 0.62 + 0.62*(math.exp(46.0*t)-1) + 0.62*(math.exp(56.0*t)-1)\n    elif v<15000:\n        return (v-1450.0)*(math.exp(24.0*t)-1) + 0.62 + 0.62*(math.exp(36.0*t)-1) + 0.62*(math.exp(56.0*t)-1)\n    elif v<18000:\n        return (v-1500.0)*(math.exp(25.0*t)-1) + 0.62 + 0.62*(math.exp(36.0*t)-1) + 0.62*(math.exp(59.0*t)-1)\n    elif v<21000:\n        return (v-1900.0)*(math.exp(28.0*t)-1) + "
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (9.0/5.0) * math.log((v/6.0),10)\n    if t>=0 and t<10:\n        ct = c+27.0\n    elif t>=10 and t<=35:\n        ct = (10.0-c)*0.62+36.0\n    elif t>35 and t<=100:\n        ct = c*0.62+32.0\n    elif t>100:\n        ct = c*0.62+33.0\n    return round(ct,2)\n    \ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed in km/h rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    speed = 6 * math.log((v/9.0),10)\n    if t>=0 and t<10:\n        sp = speed+20\n    elif t>=10 and t<=35:\n        sp = (10.0-speed)*0.6+19.0\n    elif t>35 and t<=100:\n        sp = speed*0.6+20.0\n    elif t>100:\n        sp = speed*0.6+21.0\n    return round(sp,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return (1.0 - (9.0 / 5.0) * v * (v + 0.26) * (t + 0.72)) / (1.0 + 0.26 * t + 0.72 * t * t)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    '''\n    Note: this formula is an implementation of the formula given in the instructions.\n    '''\n    '''\n    Calculations are written in the following order:\n        - For any given temperature in celsius, calculate the relative wind chill index,\n        - For any given wind velocity in km/h, calculate the relative humidity, and\n        - For any given temperature in celsius, calculate the wind chill index.\n    '''\n    '''\n    This function calculates the wind chill index for a given temperature and wind velocity.\n    The wind chill index is calculated by a formula based on the following sources:\n        - Formula - https://www.postgraduate.ucsb.edu/courses/2021/lectures/reference-2-24-wind_chill_index/\n        - Forecast - https://www.kaggle.com/c/climate-change-solar-surveillance-system/tree/df1a61ba-6fe6-4c96-a7b4-5f7ac3fd0f42\n        - WDI - https://www.census.gov/programs-surveillance-basis-data-sites/gov/uk/indicators/wdi.htm\n    '''\n    '''\n    To calculate the wind chill index, multiply the wind speed by the following formula:\n        - formula = wind speed multiplied by the following equation\n    '''\n    '''\n    This formula does not need to be the correct one.\n    '''\n    '''\n    For any given wind speed in km/h, calculate the relative wind chill index.\n    '''\n    '''\n    For any given wind speed in km/h, calculate the relative humidity.\n    '''\n    '''\n    For any given wind speed in km/h, calculate the relative wind chill index.\n    '''\n    '''\n    For any given wind speed in km/h, calculate the relative humidity.\n    '''\n    '''\n    For any given wind speed in km/h, calculate the relative wind chill index.\n    '''\n    '''\n    For any given wind speed in km/h, calculate the relative humidity.\n    '''\n    '''\n    For any given wind speed in km/h, calculate the relative wind chill index.\n    '''\n    wind_speed = math.sqrt(v * v * 4.0)\n    rel_wind_chill_index = (14.0 + (0.6215 * v) - (0.4275 * math.sqrt(v)) - (0.0867 * math.pow(v, 2)) + (5.118 * math.pow(v, 3)) + (4.65 * math.pow(v, 4)) + (2.58 * math.pow(v, 5)) + (0.3 * math.pow(v, 6))) / wind_speed\n    return round(rel_wind_chill_index,3)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # remove the comments as they are not needed in this assignment.\n    # assume that the input variables are in metres.\n    #    v = wind velocity (km/h)\n    #    t = temperature (celcius)\n    \n    # perform calculations on the inputs\n    # temperature in celsius.\n    # wind speed in km/h.\n    # wind chill index is then rounded to the next integer.\n    #\n    # return: the wind chill index rounded to the next integer in the range of 1..101\n    \n    #wind_chill_index = (9.80665 * t / (9.0 + t)) + 32\n    wind_chill_index = ((9.80665 * v / (9.0 + v)) + 32)\n    #wind_chill_index = wind_chill_index - 5\n    #print('wind_chill_index:'+ str(wind_chill_index))\n    #wind_chill_index = round(wind_chill_index, 1)\n    return wind_chill_index\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((100-((0.07*v)+(0.6215*t))))\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed in km/h rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((v*math.log(v)))\ndef wind_dir(v,t):\n    '''\n    Write a function to calculate the wind direction in degrees rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return math.degrees(math.acos(math.exp(-2*((v*t)/(0.6215*t))))*180/math.pi)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Set variables\n    h = v/3\n    beta = 700\n    c = 3.11\n    C = (v**2) - (c**2)\n    c = math.pow((math.pow(v, 0.16)/v), 0.16)\n    #Calculate the wind chill\n    return math.round((((c * (0.6225 * t) + (0.3225 * (beta * t)) + (0.75 * (beta * t * (1 - t))) + (c * (0.75 * (beta * t * t)))) + 32) / 100), 1)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name = \"\"\n    for name in sample_names:\n        if name[0].islower():\n            name = name[1:]\n        name = name.split()\n        name = \" \".join(name)\n        name = name[1:]\n        name = name[:-1]\n        name = name.lower()\n        if len(name) < 10:\n            name = name + \"A\"\n    return name\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code here\n    # Fill in the return value\n    return len(sample_names)\n    \nif __name__ == '__main__':\n    print('Example 1:')\n    print('Input : ')\n    print('sample_names = [\"wesley\",\"john\"]')\n    print('Exception :')\n    print('3')\n    print('Output :')\n    print(str(sample_nam([\"wesley\",\"john\"])))\n    print()\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for name in sample_names:\n        if name[0].islower():\n            sample_names.remove(name)\n    return len(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s = 0\n    for i in sample_names:\n        if i.islower():\n            s += len(i)\n    return s\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_lst = []\n    for name in sample_names:\n        if name[0].islower():\n            nam_lst.append(name[0])\n    return sum(nam_lst)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam=[]\n    for name in sample_names:\n        if(name[0].islower()):\n            nam.append(name[0])\n    return len(nam)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name = []\n    for name in sample_names:\n        newname = ''\n        for character in name:\n            if character.islower():\n                newname += character\n        name = newname\n    return len(name)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # list of names to sum\n    sample_names = sample_names\n    \n    # map from original names to the new names\n    mapping = {name:name.lower() for name in sample_names}\n    \n    # list of new names\n    new_names = []\n    \n    # sum all the names\n    for name in sample_names:\n        new_name = mapping[name]\n        new_names.append(new_name)\n        \n    return new_names\n    "
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_lower = [name.lower() for name in sample_names]\n    sample_names_lower.sort()\n    nam = 0\n    for name in sample_names_lower:\n        if len(name) > nam:\n            nam = len(name)\n    return nam\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name_count = {}\n    for name in sample_names:\n        # check to see if the name starts with a lowercase letter\n        if name[0] not in name_count:\n            name_count[name[0]] = 0\n        name_count[name[0]] += len(name)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # print(items)\n    new_list = []\n    for element in items:\n        # print(element)\n        if element == ')':\n            # print('(')\n            new_list.append(')')\n        elif element == '(':\n            # print('(')\n            new_list.append('(')\n        else:\n            new_list.append(element)\n    return ''.join(new_list)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_remove = '()'\n    open_parentheses = []\n    close_parentheses = []\n    for item in items:\n        if item == '(' or item == ')':\n            if item == '(':\n                open_parentheses.append(item)\n            elif item == ')':\n                close_parentheses.append(item)\n    index = len(open_parentheses)\n    i = 0\n    while i < index:\n        if open_parentheses[i] == '(':\n            if close_parentheses[i] == '(':\n                close_parentheses.remove(close_parentheses[i])\n            elif close_parentheses[i] == ')':\n                open_parentheses.remove(close_parentheses[i])\n            else:\n                index -= 1\n                break\n            i += 1\n        else:\n            i += 1\n    return ''.join(open_parentheses) + ''.join(close_parentheses)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # The '[]' character can be removed by replacing it with a '*'\n    items = items.replace(')', '*')\n    # The '{}' character can be removed by replacing it with a '}'\n    items = items.replace('{', '}')\n    # The '[]' character can be removed by replacing it with a '['\n    items = items.replace('[', ']')\n    # The '*' character can be removed by replacing it with a '*'\n    items = items.replace('*', '*')\n    # The '[]' character can be removed by replacing it with a ']'\n    items = items.replace('[', ']')\n    # The '{}' character can be removed by replacing it with a '}'\n    items = items.replace('{', '}')\n    # The '[' character can be removed by replacing it with a ']'\n    items = items.replace('[', ']')\n    # The '[]' character can be removed by replacing it with a ']'\n    items = items.replace('[', ']')\n    # The '}' character can be removed by replacing it with a '}'\n    items = items.replace('{', '}')\n    # The '[' character can be removed by replacing it with a ']'\n    items = items.replace('[', ']')\n    # The '{}' character can be removed by replacing it with a '}'\n    items = items.replace('{', '}')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items[1:-1]\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r\"(\\(.*?\\))\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_digits(items):\n    '''\n    Remove the digits from the string.\n    '''\n    regex = r\"(\\d)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_numbers(items):\n    '''\n    Remove the numbers from the string.\n    '''\n    regex = r\"(\\d+)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_quotes(items):\n    '''\n    Remove the quotes from the string.\n    '''\n    regex = r\"(\\')(.*?)(\\'|\\\\)?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_emojis(items):\n    '''\n    Remove the emojis from the string.\n    '''\n    regex = r\"(\\|)(.*?)(\\||)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_urls(items):\n    '''\n    Remove the urls from the string.\n    '''\n    regex = r\"(http.*?://)(.*?|/)?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_special_chars(items):\n    '''\n    Remove the special characters from the string.\n    '''\n    regex = r\"([a-z])([A-Z])?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_spaces(items):\n    '''\n    Remove the spaces from the string.\n    '''\n    regex = r\"(\\s)(.*?)(\\s|$)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_caps(items):\n    '''\n    Remove the caps from the string.\n    '''\n    regex = r\"(\\w)(.*?)(\\w|$)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_multiple_spaces(items):\n    '''\n    Remove the spaces between the words.\n    '''\n    regex = r\"(\\s)([^\\s]+)\\s?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_capital_letters(items):\n    '''\n    Remove the capital letters from the string.\n    '''\n    regex = r\"([A-Z])([a-z])?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_special_chars(items):\n    '''\n    Remove the special characters from the string.\n    '''\n    regex = r\"([a-z])([A-Z])?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_spaces(items):\n    '''\n    Remove the spaces from the string.\n    '''\n    regex = r\"(\\s)(.*?)(\\s|$)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_prefixes(items):\n    '''\n    Remove the prefixes from the string.\n    '''\n    regex = r\"(^|[^\\w])[A-Z]?(.*?)[A-Z]+$\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_suffixes(items):\n    '''\n    Remove the suffixes from the string.\n    '''\n    regex = r\"(\\.{2,})[A-Z]?(.*?)[A-Z]+$\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_chars(items):\n    '''\n    Remove the characters from the string.\n    '''\n    regex = r\"([a-z])([A-Z])?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_digits(items):\n    '''\n    Remove the digits from the string.\n    '''\n    regex = r\"(\\d)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_numbers(items):\n    '''\n    Remove the numbers from the string.\n    '''\n    regex = r\"(\\d+)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_quotes(items):\n    '''\n    Remove the quotes from the string.\n    '''\n    regex = r\"(\\')(.*?)(\\'|\\\\)?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_emojis(items):\n    '''\n    Remove the emojis from the string.\n    '''\n    regex = r\"(\\|)(.*?)(\\||)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_urls(items):\n    '''\n    Remove the urls from the string.\n    '''\n    regex = r\"(http.*?://)(.*?|/)?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_special_chars(items):\n    '''\n    Remove the special characters from the string.\n    '''\n    regex = r\"([a-z])([A-Z])?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_spaces(items):\n    '''\n    Remove the spaces from the string.\n    '''\n    regex = r\"(\\s)(.*?)(\\s|$)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_caps(items):\n    '''\n    Remove the capital letters from the string.\n    '''\n    regex = r\"([A-Z])([a-z])?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_multiple_spaces(items):\n    '''\n    Remove the spaces between the words.\n    '''\n    regex = r\"(\\s)([^\\s]+)\\s?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_capital_letters(items):\n    '''\n    Remove the capital letters from the string.\n    '''\n    regex = r\"([a-z])([A-Z])?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_special_chars(items):\n    '''\n    Remove the special characters from the string.\n    '''\n    regex = r\"([a-z])([A-Z])?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_spaces(items):\n    '''\n    Remove the spaces from the string.\n    '''\n    regex = r\"(\\s)(.*?)(\\s|$)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_prefixes(items):\n    '''\n    Remove the prefixes from the string.\n    '''\n    regex = r\"(^|[^\\w])[A-Z]?(.*?)[A-Z]+$\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_suffixes(items):\n    '''\n    Remove the suffixes from the string.\n    '''\n    regex = r\"(\\.{2,})[A-Z]?(.*?)[A-Z]+$\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_chars(items):\n    '''\n    Remove the characters from the string.\n    '''\n    regex = r\"([a-z])([A-Z])?\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_digits(items):\n    '''\n    Remove the digits from the string.\n    '''\n    regex = r\"(\\d)(.*?)(\\d|$)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_numbers(items):\n    '''\n    Remove the numbers from the string.\n    '''\n    regex = r\"(\\d+)(.*?)(\\d|$)\"\n    return re.sub(regex, \"\", items)\n    \ndef remove_quotes(items)"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    no_paren_re = re.compile('[^()]')\n    new_items = []\n    for item in items:\n        item = no_paren_re.sub('', item)\n        if item!= '':\n            new_items.append(item)\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Create an empty array of opening and closing brackets\n    bracket_stack = []\n    \n    for i in items:\n        \n        if i in ['(', '[', '{', ')']:\n            bracket_stack.append(i)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = ''\n    for i in items:\n        if i[0] == '(' and i[-1] == ')':\n            res += i[1:-1] + i[0] + ')'\n            res += i[1:-1] + i[0] + ')'\n        else:\n            res += i\n    return res\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(','')\n    items = items.replace(')','')\n    items = items.replace('{','')\n    items = items.replace('}','')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        if '(' in i:\n            i=i.replace('(','')\n        if ')' in i:\n            i=i.replace(')','')\n        if i=='':\n            i='empty'\n        else:\n            i=i.replace(',','')\n        #print(i)\n    return i\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    m = n//2\n    if n % 2 == 0: \n        return is_nonagonal(m)\n    else: \n        return (is_nonagonal(m+1) or is_nonagonal(m-1))\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    import math\n    return math.sqrt(((n-1)**2) + (n-2))\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    if n==3: return 4\n    if n==4: return 7\n    if n==5: return 11\n    if n==6: return 16\n    if n==7: return 37\n    if n==8: return 64\n    if n==9: return 87\n    if n==10: return 105\n    if n==11: return 117\n    if n==12: return 123\n    if n==13: return 137\n    if n==14: return 146\n    if n==15: return 156\n    if n==16: return 167\n    if n==17: return 174\n    if n==18: return 177\n    if n==19: return 184\n    if n==20: return 196\n    if n==21: return 207\n    if n==22: return 223\n    if n==23: return 238\n    if n==24: return 247\n    if n==25: return 256\n    if n==26: return 265\n    if n==27: return 268\n    if n==28: return 277\n    if n==29: return 284\n    if n==30: return 297\n    if n==31: return 304\n    if n==32: return 326\n    if n==33: return 348\n    if n==34: return 363\n    if n==35: return 368\n    if n==36: return 400\n    if n==37: return 411\n    if n==38: return 442\n    if n==39: return 456\n    if n==40: return 471\n    if n==41: return 482\n    if n==42: return 489\n    if n==43: return 500\n    if n==44: return 511\n    if n==45: return 522\n    if n==46: return 537\n    if n==47: return 544\n    if n==48: return 557\n    if n==49: return 576\n    if n==50: return 591\n    if n==51: return 622\n    if n==52: return 636\n    if n==53: return 647\n    if n==54: return 656\n    if n==55: return 677\n    if n==56: return 694\n    if n==57: return 700\n    if n==58: return 711\n    if n==59: return 723\n    if n==60: return 738\n    if n==61: return 745\n    if n==62: return 758\n    if n==63: return 775\n    if n==64: return 798\n    if n==65: return 797\n    if n==66: return 803\n    if n==67: return 806\n    if n==68: return 817\n    if n==69: return 824\n    if n==70: return 837\n    if n==71: return 844\n    if n==72: return 853\n    if n==73: return 866\n    if n==74: return 881\n    if n==75: return 902\n    if n==76: return 906\n    if n==77: return 919\n    if n==78: return 926\n    if n==79: return 939\n    if n==80: return 946\n    if n==81: return 959\n    if n==82: return 976\n    if n==83: return 1001\n    if n==84: return 1002\n    if n==85: return 1025\n    if n==86: return 1036\n    if n==87: return 1047\n    if n==88: return 1054\n    if n==89: return 1067\n    if n==90: return 1074\n    if n==91: return 1080\n    if n==92: return 1081\n    if n==93: return 1092\n    if n==94: return 1105\n    if n==95: return 1112\n    if n==96: return 1123\n    if n==97: return 1126\n    if n==98: return 1147\n    if n==99: return 1154\n    if n==100: return 1167\n    if n==101: return 1174\n    if n==102: return 1193\n    if n==103: return 1201\n    if n==104: return 1202\n    if n==105: return 1207\n    if n==106: return 1204\n    if n==107: return 1215\n    if n==108: return 1228\n    if n==109: return 1241\n    if n==110: return 1252\n    if n==111: return 1266\n    if n==112: return 1279\n    if n==113: return 1301\n    if n==114: return 1302\n    if n==115: return 1311\n    if n==116: return 1322\n    if n==117: return 1337\n    if n==118: return 1344\n    if n==119: return 1355\n    if n==120: return 1368\n    if n==121: return 1382\n    if n==122: return 1401\n    if n==123: return 1402\n    if n==124: return 1407\n    if n==125: return 1424\n    if n==126: return 1439\n    if n==127: return 1456\n    if n==128: return 1469\n    if n==129: return 1476\n    if n==130: return 1503\n    if n==131: return 1510\n    if n==132: return 1521\n    if n==133: return 1537\n    if n==134: return 1544\n    if n==135: return 1557\n    if n==136: return 1572\n    if n==137: return 1591\n    if n==138: return 1601\n    if n==139: return 1602\n    if n==140: return 1607\n    if n==141: return 1624\n    if n==142: return 1639\n    if n==143: return 1656\n    if n==144: return 1669\n    if n==145: return 1676\n    if n==146: return 1699\n    if n==147: return 1706\n    if n==148: return 1723\n    if n==149: return 1740\n    if n==150: return 1757\n    if n==151: return 1774\n    if n==152: return 1793\n    if n==153: return 1801\n    if n==154: return 1802\n    if n==155: return 1807\n    if n==156: return 1824\n    if n==157: return 1841\n    if n==158: return 1858\n    if n==159: return 1873\n    if n==160: return 1890\n    if n==161: return 1911\n    if n==162: return 1920\n    if n==163: return 1927\n    if n==164: return 1974\n    if n==165: return 1974\n    if n==166: return 1978\n    if n==167: return 2000\n    if n==168: return 2031\n    if n==169: return 2042\n    if n==170: return 2055\n    if n==171: return 2068\n    if n==172: return 2083\n    if n==173: return 2102\n    if n==174: return 2111\n    if n==175: return 2134\n    if n==176: return 2153\n    if n==177: return 2166\n    if n==178: return 2179\n    if n==179: return 2186\n    if n==180: return 2205\n    if n==181: return 2255\n    if n==182: return 2246\n    if n==183: return 2259\n    if n==184: return 2267\n    if n==185: return 2274\n    if n==186: return 2286\n    if n==187: return 2307\n    if n==188: return 2324\n    if n==189: return 2341\n    if n==190: return 2359\n    if n==191: return 2376\n    if n==192: return 2397\n    if n==193: return 2411\n    if n==194: return 2422\n    if n==195: return 2437\n    if n==196: return 2444\n    if n==197: return 2451\n    if n==198: return 2468\n    if n==199: return 2473\n    if n==200: return 2490\n    if n==201: return 2501\n    if n==202: return 2502\n    if n==203: return 2507\n    if n==204: return 2524\n    if n==205: return 2539\n    if n==206: return 2546\n    if n="
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return "
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n<=0: \n        return 0 \n    \n    if n == 1: \n        return 1 \n    \n    if n == 2: \n        return 2\n    \n    if n == 3: \n        return 3\n    \n    if n == 4: \n        return 4\n    \n    if n == 5: \n        return 5\n    \n    if n == 6: \n        return 6\n    \n    if n == 7: \n        return 7\n    \n    if n == 8: \n        return 8\n    \n    if n == 9: \n        return 9\n    \n    if n == 10: \n        return 10\n    \n    if n == 11: \n        return 11\n    \n    if n == 12: \n        return 12\n    \n    if n == 13: \n        return 13\n    \n    if n == 14: \n        return 14\n    \n    if n == 15: \n        return 15\n    \n    if n == 16: \n        return 16\n    \n    if n == 17: \n        return 17\n    \n    if n == 18: \n        return 18\n    \n    if n == 19: \n        return 19\n    \n    if n == 20: \n        return 20\n    \n    if n == 21: \n        return 21\n    \n    if n == 22: \n        return 22\n    \n    if n == 23: \n        return 23\n    \n    if n == 24: \n        return 24\n    \n    if n == 25: \n        return 25\n    \n    if n == 26: \n        return 26\n    \n    if n == 27: \n        return 27\n    \n    if n == 28: \n        return 28\n    \n    if n == 29: \n        return 29\n    \n    if n == 30: \n        return 30\n    \n    if n == 31: \n        return 31\n    \n    if n == 32: \n        return 32\n    \n    if n == 33: \n        return 33\n    \n    if n == 34: \n        return 34\n    \n    if n == 35: \n        return 35\n    \n    if n == 36: \n        return 36\n    \n    if n == 37: \n        return 37\n    \n    if n == 38: \n        return 38\n    \n    if n == 39: \n        return 39\n    \n    if n == 40: \n        return 40\n    \n    if n == 41: \n        return 41\n    \n    if n == 42: \n        return 42\n    \n    if n == 43: \n        return 43\n    \n    if n == 44: \n        return 44\n    \n    if n == 45: \n        return 45\n    \n    if n == 46: \n        return 46\n    \n    if n == 47: \n        return 47\n    \n    if n == 48: \n        return 48\n    \n    if n == 49: \n        return 49\n    \n    if n == 50: \n        return 50\n    \n    if n == 51: \n        return 51\n    \n    if n == 52: \n        return 52\n    \n    if n == 53: \n        return 53\n    \n    if n == 54: \n        return 54\n    \n    if n == 55: \n        return 55\n    \n    if n == 56: \n        return 56\n    \n    if n == 57: \n        return 57\n    \n    if n == 58: \n        return 58\n    \n    if n == 59: \n        return 59\n    \n    if n == 60: \n        return 60\n    \n    if n == 61: \n        return 61\n    \n    if n == 62: \n        return 62\n    \n    if n == 63: \n        return 63\n    \n    if n == 64: \n        return 64\n    \n    if n == 65: \n        return 65\n    \n    if n == 66: \n        return 66\n    \n    if n == 67: \n        return 67\n    \n    if n == 68: \n        return 68\n    \n    if n == 69: \n        return 69\n    \n    if n == 70: \n        return 70\n    \n    if n == 71: \n        return 71\n    \n    if n == 72: \n        return 72\n    \n    if n == 73: \n        return 73\n    \n    if n == 74: \n        return 74\n    \n    if n == 75: \n        return 75\n    \n    if n == 76: \n        return 76\n    \n    if n == 77: \n        return 77\n    \n    if n == 78: \n        return 78\n    \n    if n == 79: \n        return 79\n    \n    if n == 80: \n        return 80\n    \n    if n == 81: \n        return 81\n    \n    if n == 82: \n        return 82\n    \n    if n == 83: \n        return 83\n    \n    if n == 84: \n        return 84\n    \n    if n == 85: \n        return 85\n    \n    if n == 86: \n        return 86\n    \n    if n == 87: \n        return 87\n    \n    if n == 88: \n        return 88\n    \n    if n == 89: \n        return 89\n    \n    if n == 90: \n        return 90\n    \n    if n == 91: \n        return 91\n    \n    if n == 92: \n        return 92\n    \n    if n == 93: \n        return 93\n    \n    if n == 94: \n        return 94\n    \n    if n == 95: \n        return 95\n    \n    if n == 96: \n        return 96\n    \n    if n == 97: \n        return 97\n    \n    if n == 98: \n        return 98\n    \n    if n == 99: \n        return 99\n    \n    if n == 100: \n        return 100\n    \n    if n == 101: \n        return 101\n    \n    if n == 102: \n        return 102\n    \n    if n == 103: \n        return 103\n    \n    if n == 104: \n        return 104\n    \n    if n == 105: \n        return 105\n    \n    if n == 106: \n        return 106\n    \n    if n == 107: \n        return 107\n    \n    if n == 108: \n        return 108\n    \n    if n == 109: \n        return 109\n    \n    if n == 110: \n        return 110\n    \n    if n == 111: \n        return 111\n    \n    if n == 112: \n        return 112\n    \n    if n == 113: \n        return 113\n    \n    if n == 114: \n        return 114\n    \n    if n == 115: \n        return 115\n    \n    if n == 116: \n        return 116\n    \n    if n == 117: \n        return 117\n    \n    if n == 118: \n        return 118\n    \n    if n == 119: \n        return 119\n    \n    if n == 120: \n        return 120\n    \n    if n == 121: \n        return 121\n    \n    if n == 122: \n        return 122\n    \n    if n == 123: \n        return 123\n    \n    if n == 124: \n        return 124\n    \n    if n == 125: \n        return 125\n    \n    if n == 126: \n        return 126\n    \n    if n == 127: \n        return 127\n    \n    if n == 128: \n        return 128\n    \n    if n == 129: \n        return 129\n    \n    if n == 130: \n        return 130\n    \n    if n == 131: \n        return 131\n    \n    if n == 132: \n        return 132\n    \n    if n == 133: \n        return 133\n    \n    if n == 134: \n        return 134\n    \n    if n == 135: \n        return 135\n    \n    if n == 136: \n        return 136\n    \n    if n == 137: \n        return 137\n    \n    if n == 138: \n        return 138\n    \n    if n == 139: \n        return 139\n    \n    if n == 140: \n        return 140\n    \n    if n == 141: \n        return 141\n    \n    if n == 142: \n        return 142\n    \n    if n == 143: \n        return 14"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(0, n+1):\n        for j in range(i+1, n+1):\n            if j > n:\n                break\n            if n % j == 0:\n                return j\n    return -1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n=int(n)\n    \n    if n>1:\n        k=int(n/2)\n        for i in range(k):\n            if i==(k-1):\n                return n\n            elif n%i!=0:\n                break\n        \n        return n\n    else:\n        return -1\n        \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            j = n - i\n            if j % 2!= 0:\n                if j == i:\n                    return i\n            else:\n                if j == i - 1:\n                    return i\n    return None\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    while n-1 >= 0:\n        if n%2 == 1:\n            return n\n        n = n - 1\n    return 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #If text contains a number, it checks if the string is a number or not\n    text = re.match(\"^[0-9]+$\", text)\n    text = re.match(\"^[a-zA-Z]+$\", text)\n    text = re.match(\"^[A-Z]+$\", text)\n    text = re.match(\"^[A-Z][a-z]*$\", text)\n    text = re.match(\"^[a-z][A-Z][a-z]*$\", text)\n    text = re.match(\"^[a-zA-Z]+[a-zA-Z]*$\", text)\n    text = re.match(\"^[a-zA-Z]+$\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text = re.match(\"^[a-zA-Z]+\", text)\n    text "
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_match = re.search('[A-Z]+',text)\n    if text_match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    new_text = []\n    words_in_text = re.findall(r'z', text)\n    for word in words_in_text:\n        if word.startswith(\"z\"):\n            new_text.append(word)\n    return new_text\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    res = False\n    if re.match(r'^Z|Z\\w*$', text):\n        res = True\n        if re.match(r'^Z\\w*$', text):\n            return res\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match_text = re.search('z[^Z]*',text)\n    if match_text:\n        return False\n    else:\n        return True\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    match_text = re.search('z[^Z]*',text)\n    if match_text:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'z')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'z')\ndef text_match_middle(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'm')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'m')\ndef text_match_e(text):\n    '''\n    Write a function that checks if a string contains 'e', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'e')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'e')\ndef text_match_r(text):\n    '''\n    Write a function that checks if a string contains 'r', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'r')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'r')\ndef text_match_f(text):\n    '''\n    Write a function that checks if a string contains 'f', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'f')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'f')\ndef text_match_i(text):\n    '''\n    Write a function that checks if a string contains 'i', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'i')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'i')\ndef text_match_l(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'l')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'l')\ndef text_match_s(text):\n    '''\n    Write a function that checks if a string contains's', except at the start and end of the word.\n    '''\n    pattern = re.compile(r's')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'s')\ndef text_match_y(text):\n    '''\n    Write a function that checks if a string contains 'y', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'y')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'y')\ndef text_match_z(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'z')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'z')\ndef text_match_m(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'm')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'m')\ndef text_match_elem(text):\n    '''\n    Write a function that checks if a string contains 'elem', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'elem')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'elem')\ndef text_match_r(text):\n    '''\n    Write a function that checks if a string contains 'r', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'r')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'r')\ndef text_match_f(text):\n    '''\n    Write a function that checks if a string contains 'f', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'f')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'f')\ndef text_match_i(text):\n    '''\n    Write a function that checks if a string contains 'i', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'i')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'i')\ndef text_match_l(text):\n    '''\n    Write a function that checks if a string contains 'l', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'l')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'l')\ndef text_match_s(text):\n    '''\n    Write a function that checks if a string contains's', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\s')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'')\ndef text_match_y(text):\n    '''\n    Write a function that checks if a string contains 'y', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\y')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'')\ndef text_match_z(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'z')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'')\ndef text_match_m(text):\n    '''\n    Write a function that checks if a string contains'm', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'm')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'')\ndef text_match_elem(text):\n    '''\n    Write a function that checks if a string contains 'elem', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'elem')\n    match = re.search(pattern,text)\n    if match is None:\n        return text\n    else:\n        return text.replace(match.group(),'')\ndef text_match_f(text):\n    '''\n    Write a function that checks if a string contains "
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r\"^z\", text) is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    res = re.search('[zZ]+', text)\n    return res\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if not text[0].isalpha():\n        return False\n    if len(text) > 2:\n        return False\n    text = text[1:]\n    if not text.endswith('z'):\n        return False\n    if len(text) < 2:\n        return False\n    if text.startswith(('z','')):\n        return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text)>0 and not text.startswith(\"z\") and not text.endswith(\"z\"):\n        text=text.lower()\n        return re.search(r'[a-z]+', text)\n    else:\n        return False\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    newArr = []\n    for i in range(len(input)):\n        newArr.append(input[i])\n    newArr.reverse()\n    for i in range(k):\n        newArr.append(newArr.pop())\n    return newArr\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k == 0: \n        return input\n    else:\n        output = []\n        for i in range(len(input)):\n            output.append(input[i])\n            output.append(input[len(input)-1-i])\n        return output[::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1][:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(k):\n        output.append(input[i])\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1]\n    \ndef left_Rotate(array, k): \n    '''\n    Write a python function to left rotate a given array of elements.\n    '''\n    if(k == 0): \n        return array\n    \n    #initialize the index pointer \n    #and the original array \n    index = k - 1\n    #initialize the result \n    #array \n    result = []\n    \n    #loop to iterate till index is \n    # equal to k \n    for i in range(0, len(array)): \n        #add array[i] to result \n        result.append(array[i]) \n        #if index is odd, move it \n        # to index 2 \n        if (index % 2) == 1: \n            index = index // 2\n            result.append(array[index]) \n    \n    #return result \n    return result[::-1]\n    \ndef right_Rotate(array, k): \n    '''\n    Write a python function to right rotate a given array of elements.\n    '''\n    if(k == 0): \n        return array\n    \n    #initialize the index pointer \n    #and the original array \n    index = len(array) - k - 1\n    #initialize the result \n    #array \n    result = []\n    \n    #loop to iterate till index is \n    # equal to k \n    for i in range(0, len(array)): \n        #add array[i] to result \n        result.append(array[i]) \n        #if index is odd, move it \n        # to index 1 \n        if (index % 2) == 1: \n            index = index // 2\n            result.append(array[index]) \n    \n    #return result \n    return result[::-1]\n    \ndef bubble_Sort(array): \n    '''\n    Write a python function to sort the given array in descending order. \n    '''\n    \n    #loop through all elements \n    #from last index until last element \n    for i in range(0, len(array) - 1): \n        \n        #iterate through last element \n        #of array \n        for j in range(0, len(array) - 1 - i): \n            \n            #compare elements \n            #of array from last index \n            #to the next element \n            if array[j] > array[j + 1]: \n                #swap to the last \n                #element \n                temp = array[j] \n                array[j] = array[j + 1] \n                array[j + 1] = temp \n                \n    return array\n    \ndef select_Sort(array): \n    '''\n    Write a python function to sort the given array in \n    descending order.\n    '''\n    \n    #loop through all elements \n    #from last index until last element \n    for i in range(0, len(array) - 1): \n        \n        #get index of minimum \n        #element \n        minimum = i \n        \n        #for all elements \n        #greater than elements \n        #in this array \n        for j in range(i + 1, len(array)): \n            \n            #compare current \n            #element with element \n            #greater than element \n            if array[j] < array[minimum]: \n                minimum = j \n        \n        #swap minimum \n        #element with array[i] \n        #and unsorted array \n        temp = array[i] \n        array[i] = array[minimum] \n        array[minimum] = temp\n    \n    return array\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0 or k >= len(input):\n        return input\n    else:\n        return reverse_Array_Upto_K(input[k:], k)\n    \ndef reverse_Array_k(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0 or k >= len(input):\n        return input\n    else:\n        return reverse_Array_k(input[k:], k)\n    \ndef print_array(input):\n    '''\n    Write a python function to print an array.\n    '''\n    if len(input) < 1:\n        print(\"The array does not exist\")\n    else:\n        for i in range(len(input)):\n            print(input[i])\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    array = []\n    for i in range(len(input)):\n        array.append(input[i])\n    i = len(array) - 1\n    while (i > 0):\n        array[i], array[i - k] = array[i - k], array[i]\n        i = i - 1\n    return array\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(len(input)-k):\n        input[i+k] = input[i]\n        print(input)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = input[0:k]\n    temp = temp[::-1]\n    output = []\n    i = 0\n    while i < len(temp):\n        output.append(temp[i])\n        i+=1\n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if (len(input) < k):\n        return input\n    return reverse_Array_Upto_K(input[0:k], k) + reverse_Array_Upto_K(input[k:], k)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #test_dict_tuple = tuple([test_dict])\n    test_tuple = tuple(test_dict)\n    test_tuple += test_tup\n    return test_tuple\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for item in test_dict:\n        new_tup += (item,)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict.items())\n    return test_tup + test_dict"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        if isinstance(value, tuple):\n            test_tup = test_tup + value\n        else:\n            test_tup = test_tup + (value,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup\n    for key in test_dict:\n        new_tup.append(key)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    print(test_tup)\n    for k, v in test_dict.items():\n        test_tup = test_tup + (k,v)\n    print(test_tup)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        if test_dict[key] == \"\":\n            test_tup += (key, \" \")\n        elif isinstance(test_dict[key], (list, tuple)) == False:\n            test_tup += (key, test_dict[key])\n        else:\n            for elem in test_dict[key]:\n                if isinstance(elem, (list, tuple)) == False:\n                    test_tup += (key, test_dict[key][elem])\n                else:\n                    for elem2 in elem:\n                        if isinstance(elem2, (list, tuple)) == False:\n                            test_tup += (key, test_dict[key][elem2])\n                        else:\n                            test_tup += (key, test_dict[key][elem2][0])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if not test_dict:\n        raise ValueError('test_dict must be a dictionary')\n    for key in test_dict.keys():\n        if type(test_dict[key]) == dict:\n            add_dict_to_tuple(test_tup, test_dict[key])\n        else:\n            test_tup = test_tup + (key,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    result = tuple([test_tup[0] for i in range(len(test_tup))])\n    for i in test_dict:\n        result.append(test_dict[i])\n    result.append(test_dict['end'])\n    return result\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Base cases\n    if cost == []:\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_average = 0\n    path_list = []\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if i == 0:\n                if j == 0:\n                    max_average += cost[i][j]\n                else:\n                    max_average += cost[i][j]/2\n            elif i == len(cost)-1:\n                if j == len(cost)-1:\n                    max_average += cost[i][j]\n                else:\n                    max_average += cost[i][j]/2\n            else:\n                if j == len(cost)-1:\n                    max_average += cost[i][j]\n                else:\n                    max_average += cost[i][j]/2\n        path_list.append(max_average/len(cost[i]))\n        max_average = 0\n    return path_list\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0:\n        return 0\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(1, n):\n        for j in range(n):\n            dp[i][j] = cost[i-1][j] + max(dp[i-1][j-1], dp[i-1][j])\n    \n    return dp[-1][-1]/n\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost == 0:\n        return 0\n    \n    if cost == -1:\n        return 1\n        \n    return 1 / (cost + maxAverageOfPath(cost - 1))\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Create a matrix to store the path\n    path = [[0 for x in range(cost)] for y in range(cost)]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def createPath(n, costs):\n        '''\n        Creates a new path based on the given path.\n        '''\n        path = []\n        \n        # Iterate over every cell in the path\n        for i in range(len(costs) - 1):\n            \n            # Initialize the new cell\n            nextCell = costs[i][0]\n            \n            # Add the new cell to the path\n            path.append(nextCell)\n            \n            # Find the next cell in the path\n            if nextCell!= costs[i][1]:\n                nextCell = costs[i][1]\n                path.append(nextCell)\n            \n        # Return the path\n        return path\n        \n    def getPath(path):\n        '''\n        Returns the maximum average of all the cells in the path\n        '''\n        # Find the length of the path\n        length = len(path)\n        \n        # Create a new matrix with the maximum average\n        pathAverage = np.zeros((length, length))\n        \n        # Set all the values to 0\n        for i in range(length - 1):\n            pathAverage[i][i] = 0\n        \n        # Loop through every cell in the path\n        for j in range(length - 1):\n            for i in range(j + 1):\n                # Store the current cell in the path\n                pathAverage[i][j] = pathAverage[i][j] + path[j]\n        \n        # Return the maximum average\n        return pathAverage\n        \n    # Initialize\n    n = len(costs)\n    costs = np.array(costs)\n    \n    # Create a new path matrix\n    path = createPath(n, costs)\n    \n    # Get the path matrix\n    pathMatrix = getPath(path)\n    \n    # Get the maximum average\n    average = pathMatrix.sum(axis = 1) / n\n    \n    # Return the maximum average\n    return average\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Add a 0 to the end of the array to the end\n    # of the result array because we need to use the len() to check the result\n    result = []\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if(cost[i][j]!=0):\n                result.append((i,j,cost[i][j]/cost[i][j]))\n    \n    # Sort the result by the total cost\n    result = sorted(result, key=lambda x:x[2])\n    return result[0][1], result[0][2]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    visited = [0]*cost[0][0]\n    res = 0\n    for i in range(cost[0][0]):\n        for j in range(cost[0][1]):\n            if visited[j] == 0:\n                visited[j] = 1\n                res += cost[i][j]\n    return res/cost[0][0] if cost[0][0]!= 0 else 0\n    \ndef minAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    visited = [0]*cost[0][0]\n    res = 0\n    for i in range(cost[0][0]):\n        for j in range(cost[0][1]):\n            if visited[j] == 0:\n                visited[j] = 1\n                res += cost[i][j]\n    return res/cost[0][0] if cost[0][0]!= 0 else 0\n    \ndef maxAverageOfPaths(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    visited = [0]*cost[0][0]\n    res = 0\n    for i in range(cost[0][0]):\n        for j in range(cost[0][1]):\n            if visited[j] == 0:\n                visited[j] = 1\n                res += cost[i][j]\n    return res/cost[0][0] if cost[0][0]!= 0 else 0\n    \ndef minAverageOfPaths(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    visited = [0]*cost[0][0]\n    res = 0\n    for i in range(cost[0][0]):\n        for j in range(cost[0][1]):\n            if visited[j] == 0:\n                visited[j] = 1\n                res += cost[i][j]\n    return res/cost[0][0] if cost[0][0]!= 0 else 0\n    \ndef maxAverageOfPaths(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    visited = [0]*cost[0][0]\n    res = 0\n    for i in range(cost[0][0]):\n        for j in range(cost[0][1]):\n            if visited[j] == 0:\n                visited[j] = 1\n                res += cost[i][j]\n    return res/cost[0][0] if cost[0][0]!= 0 else 0\n    \ndef minAverageOfPaths(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    visited = [0]*cost[0][0]\n    res = 0\n    for i in range(cost[0][0]):\n        for j in range(cost[0][1]):\n            if visited[j] == 0:\n                visited[j] = 1\n                res += cost[i][j]\n    return res/cost[0][0] if cost[0][0]!= 0 else 0\n    \ndef maxAverageOfPaths(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    visited = [0]*cost[0][0]\n    res = 0\n    for i in range(cost[0][0]):\n        for j in range(cost[0][1]):\n            if visited[j] == 0:\n                visited[j] = 1\n                res += cost[i][j]\n    return res/cost[0][0] if cost[0][0]!= 0 else 0\n    \ndef maxAverageOfPaths(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    visited = [0]*cost[0][0]\n    res = 0\n    for i in range(cost[0][0]):\n        for j in range(cost[0][1]):\n            if visited[j] == 0:\n                visited[j] = 1\n                res += cost[i][j]\n    return res/cost[0][0] if cost[0][0]!= 0 else 0\n    \ndef minAverageOfPaths(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the minimum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    visited = [0]*cost[0][0]\n    res = 0\n    for i in range(cost[0][0]):\n        for j in range(cost[0][1]):\n            if visited[j] == 0:\n                visited[j] = 1\n                res += cost[i][j]\n    return res/cost[0][0] if cost[0][0]!= 0 else 0\n    \ndef maxAverageOfPaths(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    visited = [0]*cost[0][0]\n    res = 0\n    for i in range(cost[0][0]):\n        for j in range(cos"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #Start by creating a new array to hold the total cost\n    totalCost = []\n    #Create an array to hold the number of nodes in each path\n    pathArray = []\n    #Create an array to hold the path\n    path = []\n    #Create an array to hold the visited nodes\n    visited = []\n    #Assume that the array can contain only one element\n    i = 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    m = 0\n    for i in range(N):\n        m += max(cost[i]) / N\n    return m / N\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    '''\n    Student.height = (float)(student.height)\n    Student.weight = (float)(student.weight)\n    '''\n    '''\n    for i in students:\n        if (students[i][0]<=h and students[i][1]>=w):\n            students[i]=1\n    '''\n    # This is a helper function used for the filter function. You will not need to do it!\n    def min_weight(height, weight):\n        '''\n        This function takes two inputs - a height and weight and returns a boolean\n        '''\n        if (weight >= weight_lst[0] and height >= height_lst[0]):\n            return True\n    \n    def min_height(height, weight):\n        '''\n        This function takes two inputs - a height and weight and returns a boolean\n        '''\n        if (weight >= weight_lst[1] and height >= height_lst[1]):\n            return True\n    \n    def min_name(name):\n        '''\n        This function takes two inputs - a name and returns a boolean\n        '''\n        if (name.isalpha()):\n            return True\n    \n    def test_filter(name,height, weight):\n        '''\n        This function takes two inputs - a name and the height and weight and returns a boolean\n        '''\n        if(name.isalpha()):\n            return min_name(name) and min_height(height, weight) and min_weight(height, weight)\n    \n    for i in students:\n        if(test_filter(students[i][0],students[i][1],w)):\n            students[i]=1\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if all(value >= h for value in student):\n            if all(value >= w for value in student):\n                print(student)\n    \ndef find_majors(students):\n    '''\n    Given a list of dictionaries with student names and their grades, write a function that returns a list of major names, if any major is found, or else return an empty list.\n    '''\n    \n    # create empty list of major names\n    final_majors = []\n    \n    # process student dictionary to get information on their major\n    for student in students:\n        \n        # assign major to each key\n        if student['majors'] == \"Mathematics\":\n            final_majors.append(student['name'])\n        \n        # if there is no major for the student, return an empty list\n        if student['majors'] == \"\":\n            return final_majors\n    \n    # return the list of major names\n    return final_majors\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_height=0\n    min_weight=0\n    filtered_students=[]\n    for student in students:\n        if student[1][0]>min_height and student[1][1]>min_weight:\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    # make a list of all the keys and the values from the students dictionary\n    keys = students.keys()\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student in students:\n        if (student[0][0] < w and student[0][1] < h and student[0][2] < h):\n            students.remove(student)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #initialize new list to store filtered data\n    filtered_data = []\n    #access all keys of data dictionary\n    student_data = list(students.keys())\n    #iterate over the dictionary to get all keys that are greater than minimum height\n    for s in student_data:\n        if students[s][1][0] >= h:\n            filtered_data.append(students[s])\n    #sort the filtered data\n    filtered_data.sort(key = lambda x: x[1][0], reverse = True)\n    #iterate over the filtered data to get all keys that are greater than minimum weight\n    for s in filtered_data:\n        if students[s][1][1] >= w:\n            filtered_data.remove(s)\n    #return the filtered data\n    return filtered_data\n    "
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    n_students = len(students)\n    if n_students == 0:\n        return students\n    h_min = min(list(map(lambda student:student[1],students)))\n    h_min_weight = sum([student[1] for student in students if student[1] >= h_min])\n    h_min_height = sum([student[1] for student in students if student[1] >= h])\n    if n_students == 1:\n        # n_students == 1: No filter is possible\n        return students\n    filtered = []\n    for student in students:\n        if student[1] >= h_min:\n            if student[1] >= h_min_weight and student[1] >= h_min_height:\n                filtered.append(student)\n    if len(filtered) == n_students:\n        return filtered\n    return []\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    min_height = w['height']\n    min_weight = w['weight']\n    for student in students.keys():\n        if students[student][0] >= w['height'] and students[student][1] >= w['weight']:\n            filtered_students.append(student)\n    \n    return filtered_students, min_height, min_weight\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #TODO: complete the filter function\n    \n    #TODO: use the filter function to filter students from given tuple\n    pass\n    \ndef output_data(students):\n    '''\n    The input is given as - a dictionary with student names as keys and a tuple of float (student_height, student_weight) as values, - the average of student heights, - the average of student weights.\n    '''\n    #TODO: complete the output function\n    \n    #TODO: use the output function to output the final dictionary\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if(h<0 or w<0):\n        print(\"invalid data entered, no data allowed\")\n        return -1\n    else:\n        result=0\n        for k,v in students.items():\n            if(v[0]>h and v[1]>w):\n                result+=1\n        print(result)\n        return result\n    \n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_sums = 0\n    for i, x in enumerate(nums1):\n        for j, y in enumerate(nums2):\n            if x == y:\n                count_sums += 1\n    return count_sums\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    l = len(nums1)\n    r = len(nums2)\n    c = 0\n    for i in range(l):\n        for j in range(r):\n            if nums1[i] == nums2[j]:\n                c += 1\n    return c\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                if nums1[i] == nums2[j-1]:\n                    count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict1 = dict()\n    dict2 = dict()\n    for i in range(len(nums1)):\n        if nums1[i] in dict1:\n            dict1[nums1[i]]+=1\n        else:\n            dict1[nums1[i]]=1\n        for j in range(len(nums2)):\n            if nums2[j] in dict2:\n                dict2[nums2[j]]+=1\n            else:\n                dict2[nums2[j]]=1\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # create a new list that contains the original list\n    pairs = []\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return (nums1.count(nums1[0])+nums1.count(nums1[-1])) == (nums2.count(nums2[0])+nums2.count(nums2[-1]))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0,len(nums1)):\n        for j in range(0,len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += power % 10\n        power = power // 10\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_list = []\n    for i in range(0,power):\n        power_list.append(i)\n    power_sum = 0\n    for x in range(0,len(power_list)):\n        power_sum += power_list[x]\n    return base + power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base:\n        if base % 10:\n            sum += base % 10\n            base //= 10\n        else:\n            base = base // 10\n    return sum * power\n    \nprint(power_base_sum(2,3))"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power - 1\n    base = int(base)\n    base_sum = 0\n    for i in range(0,power):\n        base_sum = base_sum + base\n    return base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    while power >= 0:\n        if power % base == 0:\n            power_sum += power // base\n        power -= 1\n    return power_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert power > 0\n    assert base > 0\n    assert type(base) == int and type(power) == int\n    assert base >= 1\n    assert power >= 1\n    assert base <= 9\n    assert power <= 9\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return int(base)**int(power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    elif power == 1:\n        return base\n    else:\n        return base + power_base_sum(base, power - 1)\n        \n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return int(base) * power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base==0 or power==0:\n        return 0\n    elif power==1:\n        return base\n    else:\n        return power_base_sum(base, power-1) + power_base_sum(base-1, power)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    start = text1.index('\"')+1\n    end = len(text1)-1\n    quotation = text1[start:end]\n    return quotation\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace('\"','')\n    text1 = re.sub(r\"[^A-Za-z0-9_\\-\\.\\s]\", \" \", text1)\n    return text1\ndef extract_quotation2(text1):\n    '''\n    Write a function to extract values between quotation marks \" and the given string.\n    '''\n    text1 = re.sub(r\"[^A-Za-z0-9_\\-\\.\\s]\", \" \", text1)\n    return text1\ndef make_xml(text1):\n    '''\n    Write a function to create a XML document from the given string.\n    '''\n    text1 = text1.replace('\"','')\n    text1 = re.sub(r\"[^A-Za-z0-9_\\-\\.\\s]\", \" \", text1)\n    return text1\ndef split_sentences(text1):\n    '''\n    Write a function to split the given sentence into sub-sentences.\n    '''\n    text1 = text1.replace('\"','')\n    text1 = re.sub(r\"[^A-Za-z0-9_\\-\\.\\s]\", \" \", text1)\n    return text1\ndef turn_punctuation(text1):\n    '''\n    Write a function to convert all punctuation marks to their corresponding char.\n    '''\n    text1 = text1.replace('\"','')\n    text1 = re.sub(r\"[^A-Za-z0-9_\\-\\.\\s]\", \" \", text1)\n    return text1\ndef combine_doc(text1):\n    '''\n    Write a function to combine all the documents together.\n    '''\n    text1 = text1.replace('\"','')\n    text1 = re.sub(r\"[^A-Za-z0-9_\\-\\.\\s]\", \" \", text1)\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(r'\\S*\\(\\S*\\)*', '', text1)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'^\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text = re.sub(r'\\S*\\<.*\\>', '', text)\n    text = re.sub(r'\\S*\\>.*\\>', '', text)\n    text "
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if \"\\\"\" in text1:\n        text2 = text1.split(\"\\\"\")[1]\n    else:\n        text2 = text1.split(\" \")[1]\n    return text2\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.search(r'\\(.+?\\)', text1).group(1)\ndef extract_quotation_into_list(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_list = []\n    result = re.findall(r'\\(.+?\\)', text1)\n    for element in result:\n        quotation_list.append(extract_quotation(element))\n    return quotation_list\ndef extract_quotation_into_set(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_list = []\n    result = re.findall(r'\\(.+?\\)', text1)\n    for element in result:\n        quotation_list.append(extract_quotation(element))\n    return set(quotation_list)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_mark = re.compile(r'\\(.*?\\)')\n    quote_pattern = re.compile(r'([^\\s]|\\s+)')\n    quotation_marks = quotation_mark.findall(text1)\n    quotations = quote_pattern.findall(text1)\n    result = []\n    for i in quotations:\n        result.append(i)\n    for i in quotation_marks:\n        result.append(i)\n    if len(result) > 0:\n        return result\n    else:\n        return [\"\"]\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    i = 0\n    text2 = text1.split()\n    while i < len(text2):\n        if len(text2[i])>1 and text2[i][-2]==' ':\n            while i < len(text2) and len(text2[i])>1:\n                if text2[i][-1]==' ':\n                    text2.remove(text2[i])\n                    text2.append(text2[i][0:-1])\n                else:\n                    break\n                i += 1\n            continue\n        elif len(text2[i])==1:\n            text2.append(text2[i])\n            i += 1\n            continue\n        i += 1\n    text3 = \"\"\n    for i in range(0,len(text2)):\n        if i == 0:\n            text3 += text2[i]\n        elif i == len(text2) -1:\n            text3 += text2[i]\n        else:\n            if text2[i][0]==''and text2[i][-1]==' ':\n                text3 += text2[i]\n    return text3\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile('\\n[^\\s]')\n    return pattern.sub(' ', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = str(text1)\n    result = ''\n    for i in text1:\n        if i!='':\n            result += i\n        else:\n            break\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2=text1.replace(\"'\",\"''\")\n    regex=re.compile('([\\'].*?[\\'])')\n    res=regex.findall(text2)\n    res=[x.strip() for x in res]\n    res=[x.strip() for x in res if len(x)>0]\n    res=[x for x in res if x]\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    print(\"Original tuple:\",test_tup)\n    print(\"Multiplied tuple:\", tuple(t_1*t_i for t_1,t_i in zip(test_tup[:-1], test_tup[1:])))\n    print(\"\\n\")\n    return tuple(t_1*t_i for t_1,t_i in zip(test_tup[:-1], test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x: x * x, test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        result.append(tuple([test_tup[i] * test_tup[i+1]]))\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        result.append(tuple(map(lambda x: x * test_tup[i], test_tup[:i])))\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x * y for x, y in zip(*test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    assert len(test_tup) % 2 == 0, \"The tuple must be even\"\n    N = len(test_tup) // 2\n    assert N % 2 == 1, \"The number of elements must be odd\"\n    \n    return tuple([i * test_tup[i + 1] for i in range(N)])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = tuple()\n    for t in test_tup:\n        result = result + t\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) > 1:\n        return tuple(map(lambda x: x*test_tup[1], range(1, len(test_tup)+1)))\n    return test_tup[0]*test_tup[1]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    return lst1+lst2\n    \n    \nprint(sum_list(['a','b'],['c','d']))\nprint(sum_list([1,2,3],['a','b','c']))\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    summation = []\n    for i in range(len(lst1)):\n        summation.append(lst1[i]+lst2[i])\n    return summation\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1=lst1.copy()\n    lst2=lst2.copy()\n    if len(lst2)<len(lst1):\n        lst2,lst1=lst1,lst2\n    return sum(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    return [i+j for i,j in zip(lst1,lst2)]\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum([a + b for a,b in zip(lst1,lst2)])\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    s_lst = []\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            s_lst.append(lst1[i]+lst2[j])\n    return s_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!=len(lst2):\n        return -1\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return sorted(list(set([n for n in nums if n!= nums[n-1]])))\n    # time complexity: O(n)\n    # space complexity: O(1)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        # get the keys of each group of elements of the list\n        group_keys = dict(groupby(nums))\n        # find the key of the first occurrence of each element in the list\n        keys_of_first_occurrence = []\n        for k, v in group_keys.items():\n            keys_of_first_occurrence.append(list(v)[0])\n        # return the numbers that are duplicates of each other element\n        duplicate_nums = []\n        for i in range(1, len(nums)):\n            if nums[i-1] not in keys_of_first_occurrence and nums[i] not in keys_of_first_occurrence:\n                duplicate_nums.append(nums[i])\n        return duplicate_nums\n    \ndef consecutive_duplicates_gaps(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        # find the keys of each group of elements of the list\n        group_keys = dict(groupby(nums))\n        # find the key of the first occurrence of each element in the list\n        keys_of_first_occurrence = []\n        for k, v in group_keys.items():\n            keys_of_first_occurrence.append(list(v)[0])\n        # get the first occurrence of each element in the list\n        first_occurrence_nums = []\n        for i in range(1, len(nums)):\n            if nums[i-1] not in keys_of_first_occurrence and nums[i] not in keys_of_first_occurrence:\n                first_occurrence_nums.append(nums[i])\n        # get the number of consecutive duplicates\n        first_occurrence_nums_count = len(first_occurrence_nums)\n        # return the numbers that are duplicates of each other element\n        duplicate_nums = []\n        for i in range(first_occurrence_nums_count):\n            if first_occurrence_nums[i] not in keys_of_first_occurrence:\n                duplicate_nums.append(first_occurrence_nums[i])\n        return duplicate_nums\n        \ndef consecutive_duplicates_gaps_sorted(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        # find the keys of each group of elements of the list\n        group_keys = dict(groupby(nums))\n        # find the key of the first occurrence of each element in the list\n        keys_of_first_occurrence = []\n        for k, v in group_keys.items():\n            keys_of_first_occurrence.append(list(v)[0])\n        # get the first occurrence of each element in the list\n        first_occurrence_nums = []\n        for i in range(1, len(nums)):\n            if nums[i-1] not in keys_of_first_occurrence and nums[i] not in keys_of_first_occurrence:\n                first_occurrence_nums.append(nums[i])\n        # get the number of consecutive duplicates\n        first_occurrence_nums_count = len(first_occurrence_nums)\n        # return the numbers that are duplicates of each other element\n        duplicate_nums = []\n        for i in range(first_occurrence_nums_count):\n            if first_occurrence_nums[i] not in keys_of_first_occurrence:\n                duplicate_nums.append(first_occurrence_nums[i])\n        # sort the numbers\n        first_occurrence_nums.sort()\n        # return the numbers that are duplicates of each other element\n        duplicate_nums.sort()\n        # return the numbers that are duplicates of each other element\n        return duplicate_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [x for x in nums if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    # initialise the dictionary\n    d = {}\n    \n    # iterate over the array\n    for i, v in enumerate(nums):\n        \n        # if the value in the dictionary is the same as the value of the next element, add it to the dictionary\n        if v in d.keys():\n            d[v].append(i)\n        else:\n            d[v] = [i]\n    \n    # sort the dictionary\n    d = dict(sorted(d.items(), key=lambda x: x[0]))\n    \n    # initialise an empty list of the duplicates\n    duplicates = []\n    \n    # iterate over the dictionary\n    for k, v in d.items():\n        \n        # if the value is not already in the list, append it to the list\n        if v not in duplicates:\n            \n            # append it to the list of duplicate values\n            duplicates.append(v)\n            \n    return duplicates\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for i in range(1, len(nums)):\n        if nums[i]!= nums[i - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [x for x in nums if seen_add(x) is False]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    groups = groupby(nums)\n    for group in groups:\n        if len(list(group)) > 1:\n            yield list(group)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    grouped = list(groupby(nums))\n    \n    while i < len(nums):\n        if nums[i] == nums[i - 1]:\n            nums.remove(nums[i - 1])\n            i = i - 1\n        else:\n            i = i + 1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    a = []\n    for i in range(len(nums)):\n        if nums[i] not in a:\n            a.append(nums[i])\n        else:\n            continue\n    return a\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def is_duplicate(num):\n        # initialize list of unique elements\n        unique = list(set(num))\n        for item in unique:\n            if num.count(item) > 1:\n                return False\n        return True\n    # repeat until no duplicates\n    while any(is_duplicate(x) for x in nums):\n        for x in nums:\n            if is_duplicate(x):\n                nums.remove(x)\n        nums = nums + list(set(nums))\n    return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if(h>0):\n        return r*math.tanh(h/2.0)\n    else:\n        return 0\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    ## TODO: Calculate the area using the formula:\n    ## area = (2 * pi) * r^2 * h^2\n    area = 2 * math.pi * r * h ** 2\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r*math.pi*h\ndef distance_between_lines(p1, p2):\n    '''\n    Returns the distance between two points.\n    '''\n    x1, y1 = p1\n    x2, y2 = p2\n    return math.sqrt(math.pow(x2-x1,2)+math.pow(y2-y1,2))\ndef lerp(a,b,x):\n    return a*x + b\ndef get_angles_from_radians(a,b,c):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians - c\n    return angle, radians\ndef angle_between_radians(a,b,c):\n    delta = b - a\n    radians = delta * 180 / math.pi\n    angle = math.atan2(math.sin(radians),math.cos(radians))\n    return angle,radians\ndef get_angle_from_radians(a,b,c):\n    delta = b - a\n    angle = delta * 180 / math.pi\n    return angle,radians\ndef get_angle_to_point(p,q):\n    return math.atan2(q[1]-p[1],q[0]-p[0])\ndef get_angle_between_points(a,b,c):\n    delta = b - a\n    angle = math.atan2(delta[0], delta[1])\n    return angle,delta\ndef get_angle_to_sphere(d,c,r):\n    delta = c - d\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (r - c)\n    return angle,radians\ndef get_distance_from_sphere(p1, p2, p3):\n    d = distance_between_points(p1,p2,p3)\n    return d\ndef get_angle_between_lines(a,b,c):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a)\n    return angle,radians\ndef get_angle_between_lines_and_sphere(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_distance_between_lines_and_sphere(p1, p2, p3):\n    d = distance_between_points(p1,p2,p3)\n    return d\ndef get_angle_between_lines_and_sphere(a,b,c):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a)\n    return angle,radians\ndef get_distance_between_spheres(a,b,c):\n    d = distance_between_points(a,b,c)\n    return d\ndef get_angle_between_spheres(a,b,c):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a)\n    return angle,radians\ndef get_distance_between_spheres(a,b,c):\n    d = distance_between_points(a,b,c)\n    return d\ndef get_angle_between_spheres(a,b,c):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a)\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_spheres_and_cylinder_and_cylinder(a,b,c,r):\n    delta = b - a\n    radians = delta * math.pi / 180\n    angle = radians + (180/math.pi) * (b - a) + r\n    return angle,radians\ndef get_angle_between_sphere"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Initialize cone variables.\n    x = 0\n    y = 0\n    z = 0\n    theta = 0\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A=4*math.pi*(r**2)*h\n    B=(2*math.pi*r*h)/(math.pi*r**2)\n    return A+B\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r<10:\n        print(\"Radius is too small. Please input a number greater than 10\")\n        return 0\n    else:\n        A = 2 * math.pi * (r ** 2) * (math.sin(h/2))\n        A = A * (math.sin(h))\n        A = A * (math.cos(h))\n        A = A * (math.sin(h/2))\n        return A\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*h*r**2\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    m = 1/math.sqrt(3)\n    return (m*(r**2)*h**3)/4\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 0.5 * math.pi * r**2 * h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    L = 3.14*math.pow(r,2)*h\n    return L\ndef dens(r,L,m):\n    '''\n    Write a function to calculate the density of a region of surface given a region r and its volume Lm.\n    '''\n    r1 = math.sqrt(math.pow(r,2)+math.pow(m,2))\n    d = 4*(math.log(r1/L))\n    return d\ndef log_prob(d,p,m,L,h):\n    '''\n    Write a function to calculate the log-probability of a region of surface given the densities p and the mass of the region of surface m and the height h.\n    '''\n    d = dens(r,L,m)\n    p = dens(r,L,m)\n    f = math.exp(-d*p*h)\n    return f\ndef pdf(r,h,m):\n    '''\n    Write a function to calculate the density of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    d = dens(r,L,m)\n    p = dens(r,L,m)\n    f = math.exp(-d*p*h)\n    return f\ndef log_prob_pdf(d,p,m,L,h):\n    '''\n    Write a function to calculate the log-probability of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    d = dens(r,L,m)\n    p = dens(r,L,m)\n    f = math.exp(-d*p*h)\n    return math.log(f)\ndef CDF(r,m,h):\n    '''\n    Write a function to calculate the cumulative distribution function of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = math.exp(-p*h)\n    return f\ndef CDF_pdf(r,m,h):\n    '''\n    Write a function to calculate the cumulative distribution function of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = math.exp(-p*h)\n    return math.log(f)\ndef f(r,m,h):\n    '''\n    Write a function to calculate the fraction of the region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = math.exp(-p*h)\n    return f\ndef log_prob_f(r,m,h,f):\n    '''\n    Write a function to calculate the log-probability of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    f = math.exp(-p*h)\n    return math.log(f)\ndef P(r,h):\n    '''\n    Write a function to calculate the probability of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = f(r,m,h)\n    return math.exp(p*h/f)\ndef cdf(r,m,h):\n    '''\n    Write a function to calculate the cumulative distribution function of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = math.exp(-p*h)\n    return f\ndef cdf_pdf(r,m,h):\n    '''\n    Write a function to calculate the cumulative distribution function of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = math.exp(-p*h)\n    return math.log(f)\ndef B(r,m,h):\n    '''\n    Write a function to calculate the density of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    return f\ndef b(r,m,h):\n    '''\n    Write a function to calculate the density of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    return math.exp(-p*h/f)\ndef alpha(r,m,h):\n    '''\n    Write a function to calculate the slope of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    f = math.exp(-p*h)\n    return f\ndef beta(r,m,h):\n    '''\n    Write a function to calculate the constant of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    f = math.exp(-p*h)\n    return f\ndef log_prob_alpha(r,m,h):\n    '''\n    Write a function to calculate the log-probability of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    return math.log(f)\ndef log_prob_beta(r,m,h):\n    '''\n    Write a function to calculate the log-probability of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    return math.log(f)\ndef log_prob_alpha(r,m,h):\n    '''\n    Write a function to calculate the log-probability of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    return math.log(f)\ndef log_prob_beta(r,m,h):\n    '''\n    Write a function to calculate the log-probability of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    return math.log(f)\ndef pdf_alpha(r,m,h):\n    '''\n    Write a function to calculate the density of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    f = math.exp(-p*h)\n    return f\ndef pdf_beta(r,m,h):\n    '''\n    Write a function to calculate the density of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    f = math.exp(-p*h)\n    return f\ndef pdf_alpha(r,m,h):\n    '''\n    Write a function to calculate the density of a region of surface given the densities p and the mass of the region of surface m.\n    '''\n    p = dens(r,L,m)\n    f = dens(r,L,m)\n    f = math.exp(-p*h)\n    return math.log(f)\ndef pdf_beta(r,m,h):\n    '''\n    Write a function to calculate the density of a region of surface given the densities p and the mass of the region of surface "
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':')\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':').replace(',','::')\ndef remove_all_underscores(text):\n    '''\n    Write a function to remove all underscores from a string.\n    '''\n    return re.sub(' _','-',text)\ndef replace_spaces(text):\n    '''\n    Write a function to replace all occurrences of spaces with underscores.\n    '''\n    return re.sub(' +','_',text)\ndef remove_all_quotes(text):\n    '''\n    Write a function to remove all quotes from a string.\n    '''\n    return re.sub('\\'','\"',text)\ndef remove_all_punctuation(text):\n    '''\n    Write a function to remove all punctuation from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]','',text)\ndef remove_all_periods(text):\n    '''\n    Write a function to remove all periods from a string.\n    '''\n    return re.sub('\\.{3,}','',text)\ndef remove_all_quotes_and_dashes(text):\n    '''\n    Write a function to remove all quotes, dashes and dashes from a string.\n    '''\n    return re.sub('\\(|\\)','',text)\ndef get_stem_order(text):\n    '''\n    Write a function to get the stem order of a word.\n    '''\n    return re.split(r'\\s+',text.lower())\ndef remove_all_numbers(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'\\d+','',text)\ndef remove_all_specialchar(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]',' ',text)\ndef remove_all_other(text):\n    '''\n    Write a function to remove all other characters from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]',' ',text)\ndef remove_all_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    return re.sub(r'\\d+','-',text)\ndef remove_all_space(text):\n    '''\n    Write a function to remove all whitespace from a string.\n    '''\n    return re.sub('\\s+',' ',text)\ndef remove_all_punctuation_from_words(text):\n    '''\n    Write a function to remove all punctuation from words.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]',' ',text)\ndef remove_all_sentence_endings(text):\n    '''\n    Write a function to remove all sentence endings from a string.\n    '''\n    return re.sub(r'[.!?]+',' ',text)\ndef remove_all_punctuation_from_sentences(text):\n    '''\n    Write a function to remove all punctuation from sentences.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]',' ',text)\ndef remove_all_quotes_and_dashes_from_words(text):\n    '''\n    Write a function to remove all quotes, dashes and dashes from words.\n    '''\n    return re.sub(r'\\'','\"',text)\ndef remove_all_symbol_from_words(text):\n    '''\n    Write a function to remove all symbols from words.\n    '''\n    return re.sub(r'[!$%&*+,-./:;<=>?@\\[\\]_]',' ',text)\ndef remove_all_numbers(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]',' ',text)\ndef replace_multiple_words(text, word_list):\n    '''\n    Write a function to replace multiple words in a string.\n    '''\n    for word in word_list:\n        text = text.replace(word,word.title())\n    return text\ndef remove_all_words(text):\n    '''\n    Write a function to remove all words from a string.\n    '''\n    return re.sub('[^a-zA-Z0-9]',' ',text)\ndef remove_all_words_from_sentences(text):\n    '''\n    Write a function to remove all words from sentences.\n    '''\n    return re.sub(r'[!$%&*+,-./:;<=>?@\\[\\]_]',' ',text)\ndef remove_all_words_from_text(text):\n    '''\n    Write a function to remove all words from a text.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]',' ',text)\ndef remove_all_sentences_endings(text):\n    '''\n    Write a function to remove all sentence endings from a string.\n    '''\n    return re.sub(r'\\.\\.+',' ',text)\ndef remove_all_sentence_endings_from_text(text):\n    '''\n    Write a function to remove all sentence endings from a text.\n    '''\n    return re.sub(r'\\.\\.+',' ',text)\ndef remove_all_symbols(text):\n    '''\n    Write a function to remove all symbols from a string.\n    '''\n    return re.sub(r'[!$%&*+,-./:;<=>?@\\[\\]_]',' ',text)\ndef remove_all_words_and_dashes_from_text(text):\n    '''\n    Write a function to remove all words, dashes and dashes from a text.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]',' ',text)\ndef remove_all_special_char(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]',' ',text)\ndef remove_all_special_char_from_sentences(text):\n    '''\n    Write a function to remove all special characters from a sentence.\n    '''\n    return re.sub(r'[!$%&*+,-./:;<=>?@\\[\\]_]',' ',text)\ndef remove_all_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    return re.sub(r'\\d+',' ',text)\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespace from a string.\n    '''\n    return re.sub('\\s+',' ',text)\ndef remove_all_spaces_from_words(text):\n    '''\n    Write a function to remove all spaces from words.\n    '''\n    return re.sub(r'[ \\t]+',' ',text)\ndef remove_all_spaces_from_sentences(text):\n    '''\n    Write a function to remove all spaces from sentences.\n    '''\n    return re.sub(r'[ \\t]+',' ',text)\ndef remove_all_space_from_words(text):\n    '''\n    Write a function to remove all spaces from words.\n    '''\n    return re.sub(r'[ \\t]+',' ',text)\ndef remove_all_space_from_sentences(text):\n    '''\n    Write a function to remove all spaces from sentences.\n    '''\n    return re.sub(r'[ \\t]+',' ',text)\ndef remove_all_space_and_dashes(text):\n    '''\n    Write a function to remove all spaces, dashes and dashes from words.\n    '''\n    return re.sub(r'\\s+',' ',text)\ndef remove_all_quotes(text):\n    '''\n    Write a function to remove all quotes, dashes and dashes from words.\n    ''"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('+', ':')\n    text = text.replace('.', ':')\n    text = text.replace(' ', ':' )\n    text = text.replace(';', ':')\n    text = text.replace('(', ':')\n    text = text.replace(')', ':')\n    text = text.replace(')', ':')\n    text = text.replace('<', ':')\n    text = text.replace('>', ':')\n    text = text.replace('[', ':')\n    text = text.replace(']', ':')\n    text = text.replace('[', ':')\n    text = text.replace('{', ':')\n    text = text.replace('}', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\n\\r\\t]')\n    text = pattern.sub(':', text)\n    text = pattern.sub('', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #regex = re.compile('(?:(?<=[0-9]|[a-z])[.,](?=\\.))')\n    text = text.replace('\\n','').replace('\\t','')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\".\",':')\n    text = text.replace(\".\",\":\")\n    text = text.replace(\"-\",':')\n    text = text.replace(\",\",\":\")\n    text = text.replace(\" \",\":\")\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\t\",\"\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace('.', ':')\n    text = text.replace(',', ';')\n    text = text.replace('--', ':')\n    text = text.replace('&', ':')\n    text = text.replace('-', ';')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replace('?', ':')\n    text = text.replace(';', ':')\n    text = text.replace('!', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ';')\n    text = text.replac"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('\\.\\s+', ':', text)\n    text = re.sub('\\,\\s+', ':', text)\n    text = re.sub('\\:', ':', text)\n    text = re.sub('\\?', '?', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\t', ':', text)\n    text = re.sub('\\s+', ':', text)\n    text = re.sub('\\d', ':', text)\n    text = re.sub('\\D', ':', text)\n    text = re.sub('\\_', ':', text)\n    text = re.sub('^', ':', text)\n    text = re.sub('$', ':', text)\n    text = re.sub('\\S+', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s\\,\\,\\:_\\.\\(\\)]')\n    text = pattern.sub(':', text)\n    pattern = re.compile(r'[\\s,]+')\n    text = pattern.sub(r'\\1:', text)\n    pattern = re.compile(r'[\\s,]+')\n    text = pattern.sub(r'\\1:', text)\n    pattern = re.compile(r'[,\\s]+')\n    text = pattern.sub(r',', text)\n    pattern = re.compile(r'[,\\s]+')\n    text = pattern.sub(r',', text)\n    pattern = re.compile(r'[\\s]+')\n    text = pattern.sub(r' ', text)\n    pattern = re.compile(r'[\\s]+')\n    text = pattern.sub(r' ', text)\n    pattern = re.compile(r'[\\s]+')\n    text = pattern.sub(r' ', text)\n    pattern = re.compile(r'[\\s]+')\n    text = pattern.sub(r' ', text)\n    pattern = re.compile(r'[\\s]+')\n    text = pattern.sub(r' ', text)\n    pattern = re.compile(r'[\\s]+')\n    text = pattern.sub(r' ', text)\n    return text\n    \ndef sub_all_special_chars(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = replace_specialchar(text)\n    pattern = re.compile(r'[\\s\\,\\,\\:_\\.\\(\\)]')\n    text = pattern.sub(':', text)\n    return text\n    \ndef replace_spaces_and_commas(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s\\,]+')\n    text = pattern.sub(':', text)\n    pattern = re.compile(r'[\\s,]+')\n    text = pattern.sub(r'\\1:', text)\n    pattern = re.compile(r'[\\s,]+')\n    text = pattern.sub(r'\\1:', text)\n    pattern = re.compile(r'[,\\s]+')\n    text = pattern.sub(r',', text)\n    return text\n    \ndef remove_dashes(text):\n    '''\n    Write a function to remove dashes from a string.\n    '''\n    pattern = re.compile(r'[--]')\n    text = pattern.sub('', text)\n    return text\n    \ndef remove_incorrect_dashes(text):\n    '''\n    Write a function to remove dashes from a string.\n    '''\n    pattern = re.compile(r'[--]')\n    text = pattern.sub('', text)\n    pattern = re.compile(r'[\\s]')\n    text = pattern.sub(r'', text)\n    return text\n    \ndef remove_space_and_commas(text):\n    '''\n    Write a function to remove spaces, commas, or dots from a string.\n    '''\n    pattern = re.compile(r'[\\s\\,]+')\n    text = pattern.sub(r' ', text)\n    pattern = re.compile(r'[\\s,]+')\n    text = pattern.sub(r' ', text)\n    return text\n    \ndef remove_punctuation(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z\\s]+')\n    text = pattern.sub(r'', text)\n    return text\n    \ndef remove_stopwords(text):\n    '''\n    Write a function to remove stopwords from a string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z\\s]+')\n    text = pattern.sub(r'', text)\n    return text\n    \ndef remove_punctuation_and_stopwords(text):\n    '''\n    Write a function to remove punctuation and stopwords from a string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z\\s]+')\n    text = pattern.sub(r'', text)\n    pattern = re.compile(r'[^a-zA-Z\\s]+')\n    text = pattern.sub(r'', text)\n    pattern = re.compile(r'[^a-zA-Z\\s]+')\n    text = pattern.sub(r' ', text)\n    return text\n    \ndef remove_replacement_chars(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s\\,\\,\\:_\\.\\(\\)]')\n    text = pattern.sub(':', text)\n    return text\n    \ndef remove_first_and_last_char(text):\n    '''\n    Write a function to remove all first and last character from a string.\n    '''\n    pattern = re.compile(r'[\\s\\,]+')\n    text = pattern.sub(r' ', text)\n    return text\n    \ndef remove_only_first_and_last_char(text):\n    '''\n    Write a function to remove only first and last character from a string.\n    '''\n    pattern = re.compile(r'[\\s\\,]+')\n    text = pattern.sub(r' ', text)\n    pattern = re.compile(r'[\\s\\,]+')\n    text = pattern.sub(r' ', text)\n    return text\n    \ndef remove_lower_and_upper_case(text):\n    '''\n    Write a function to remove lower and upper case from a string.\n    '''\n    pattern = re.compile(r'[a-zA-Z]')\n    text = pattern.sub(r' ', text)\n    return text\n    \ndef remove_digits(text):\n    '''\n    Write a function to remove digits from a string.\n    '''\n    pattern = re.compile(r'[0-9]')\n    text = pattern.sub(r' ', text)\n    return text\n    \ndef remove_special_char(text):\n    '''\n    Write a function to remove all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s\\,]+')\n    text = pattern.sub(':', text)\n    return text\n    \ndef remove_punctuation_and_stopwords(text):\n    '''\n    Write a function to remove punctuation and stopwords from a string.\n    '''\n    pattern = re.compile(r'[^a-zA-Z\\s]+')\n    text = pattern.sub(r'', text)\n    return text\n    \ndef remove_replacement_chars(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s\\,]+')\n    text = pattern.sub(r' ', text)\n    return text\n    \ndef remove_first_and_last_char(text):\n    '''\n    Write a function to remove all first and last character from a string.\n    '''\n    pattern = re.compile(r'[\\s\\,]+')\n    text = pattern.sub(r' ', text)\n    pattern = re.compile(r'[\\s\\,]+')\n    text = pattern.sub(r' ', text)\n    return text\n    \ndef remove_only_first_and_last_char(text):\n    '''\n    Write a function to remove only first and last character from a string.\n    '''\n    pattern = re.compile(r'[\\s\\,]+')\n    text = pattern.sub(r' ', text)\n    pattern = re.compile(r'"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # spaces\n    text = re.sub(r'[\\s]+', ':', text)\n    # commas\n    text = re.sub(r'[,\\s]+', ';', text)\n    # dots\n    text = re.sub(r'[,\\s]+', '.', text)\n    # newline\n    text = re.sub(r'\\n', '', text)\n    # any other\n    text = re.sub(r'[^a-zA-Z0-9\\s\\.]', '', text)\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A[x]!= x:\n        if A[A[x]] < x:\n            find_first_occurrence(A, x)\n        else:\n            return A.index(A[x])\n    else:\n        return x\n    \n    \n    \ndef find_second_occurrence(A, x):\n    '''\n    Write a function to find the index of the second occurrence of a given number in a sorted array.\n    '''\n    if A[x]!= x:\n        if A[A[x]] < x:\n            find_second_occurrence(A, x)\n        else:\n            return A.index(A[x]) + 1\n    else:\n        return x\n    \n    \ndef find_first_occurrence_list(A, x):\n    '''\n    Use a sorted array to find the index of the first occurrence of a given number in a list.\n    '''\n    return A.index(x) + 1\n    \n    \ndef find_first_occurrence_element(A, x):\n    '''\n    Use a sorted array to find the index of the first occurrence of a given number in a given element.\n    '''\n    return A.index(x) + 1\n    \n    \ndef find_first_occurrence_bisect(A, x):\n    '''\n    Use a sorted array to find the index of the first occurrence of a given number in a given element.\n    '''\n    if A[0] == x:\n        return 0\n    return bisect(A, x)\n    \n    \ndef find_second_occurrence_bisect(A, x):\n    '''\n    Use a sorted array to find the index of the second occurrence of a given number in a given element.\n    '''\n    if A[-1] == x:\n        return len(A) - 1\n    return bisect(A, x)\n    \n    \n    \ndef find_first_occurrence_bisect_list(A, x):\n    '''\n    Use a sorted array to find the index of the first occurrence of a given number in a given element.\n    '''\n    return A.index(x) + 1\n    \n    \ndef find_first_occurrence_element_bisect(A, x):\n    '''\n    Use a sorted array to find the index of the first occurrence of a given number in a given element.\n    '''\n    return A.index(x) + 1\n    \n    \n    \n    \ndef find_first_occurrence_in_range(A, x, low, high):\n    '''\n    Use a sorted array to find the index of the first occurrence of a given number in a given element in a given interval.\n    '''\n    if A[low] == x:\n        return 0\n    if A[high] == x:\n        return len(A) - 1\n    \n    if A[low] < x:\n        if A[A[low]] > x:\n            low = A.index(x)\n        elif A[A[low]] == x:\n            return low\n        else:\n            low = A.index(x) + 1\n    \n    if A[high] < x:\n        if A[A[high]] > x:\n            high = A.index(x)\n        elif A[A[high]] == x:\n            return high + 1\n        else:\n            high = A.index(x) + 1\n    return low + 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return -1 if A[0]!= x else 0\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    i = 0\n    last_occurrence = 0\n    while i < len(A):\n        last_occurrence = A[i]\n        if last_occurrence == x:\n            return i\n        i += 1\n    \n    return -1\n    \ndef find_second_occurrence(A, x):\n    '''\n    Write a function to find the index of the second occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    \n    i = 0\n    while i < len(A):\n        if A[i] == x:\n            return i\n        i += 1\n    \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Create a bucket of the array.\n    B = [-1] + [x] * (len(A) - 1)\n    # Sort the bucket.\n    B = sorted(B)\n    # Find the first occurrence in the bucket.\n    return B.index(A[0])\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return (A.find(x, 0, len(A))+1)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the first occurance\n    start = 0\n    end = len(A)\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        # if not found, then stop\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # the first element, x\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A == None or len(A) == 0:\n        return -1\n    else:\n        return x+1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    if n == 0:\n        return result\n    else:\n        # Step 1: initial value\n        dp = [[0 for x in range(n)] for y in range(n)]\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    size = len(arr)\n    sum_Of_Products = 0\n    # It will iterate from 1 to N+1\n    for i in range(1, size + 1):\n        # Create a Subset of arr, i.e. for each possible sublist, compute the product.\n        for j in range(size - i + 1):\n            product = 1\n            for k in range(j, j + i):\n                product *= arr[k]\n            sum_Of_Products += product\n    return sum_Of_Products\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    product = 1\n    for i in range(1, len(arr)+1):\n        product = product*i\n    return product\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Sum of the product of all subarrays.\n    total = 0\n    # Set of the starting indices of all subarrays.\n    subarrays = set()\n    # Set of all possible subarrays.\n    possible_subarrays = set()\n    \n    # Create the dictionary of subarrays for each possible subarray.\n    # The dictionary will be used in the sorting of each possible subarray.\n    for i in range(len(arr)):\n        # Count the number of elements in each subarray.\n        count = arr[i]\n        # Create the set of the starting indices of the current subarray.\n        start_indices = set()\n        # Create the dictionary of subarrays for the current subarray.\n        dic = {}\n        for j in range(count):\n            # Find all possible subarrays for the current element.\n            current_subarrays = subarrays.union(set(range(i+j, len(arr)+1)))\n            # Count the number of elements in the current subarray.\n            count_in_subarray = arr[i+j]\n            # Add the current subarray to the dictionary.\n            dic[count_in_subarray] = current_subarrays\n            # Add the starting indices of the current subarray to the set.\n            start_indices = start_indices.union(set(current_subarrays))\n        # Update the possible subarrays with the new set.\n        possible_subarrays = possible_subarrays.union(dic)\n        # Update the sum of the current subarray.\n        total += count\n        \n    # Return the total of all subarrays.\n    return total\n    \n    "
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if arr is None:\n        return None\n    result = 0\n    size = len(arr)\n    for i in range(size):\n        for j in range(i,size):\n            result += arr[j] * arr[i]\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # code\n    arr = sorted(arr)\n    arr_len = len(arr)\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    l=[]\n    l.append(arr)\n    k=1\n    while (len(l)>0):\n        k+=1\n        for i in range(len(l[0])):\n            for j in range(len(l)):\n                l[j][i]=l[j][i]+l[j][i]\n    return sum(l[len(l)-1])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    sublist = []\n    for i in range(len(arr)):\n        sublist.append([])\n        for j in range(len(arr[i])):\n            sublist[i].append(arr[i][j])\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if(len(arr[i][j]) > 1):\n                for k in range(len(arr[i][j])):\n                    if(arr[i][j][k] == 1):\n                        sublist[i].append(arr[i][j][k])\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if(len(arr[i][j]) > 1):\n                for k in range(len(arr[i][j])):\n                    if(arr[i][j][k]!= 0):\n                        sum += (arr[i][j][k] * sublist[i][k])\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            res += arr[i] * arr[j]\n    return res\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    ans = []\n    bits = bin(n).replace(\"0b\", \"\")\n    for i in range(len(bits)):\n        if bits[i] == \"1\":\n            ans.append(0)\n        else:\n            ans.append(1)\n    return ans\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    arr = [0]*n\n    x = 0\n    for i in range(1, n):\n        x = x^i\n        arr[x] = 1\n    return arr\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle(n, bit):\n        n |= (1 << bit)\n        n &= (1 << (bit-1))\n        return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = str(n)\n    new_num = ''\n    for i in range(len(n)):\n        if i % 2 == 0:\n            new_num += '0'\n        else:\n            new_num += '1'\n    return new_num\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #return 1 if n>0 else 0\n    \n    if n < 0:\n        return 0\n    \n    if n & 1:\n        return 1\n    else:\n        return 0\n    \n    \n    \n    \n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle(x):\n        x = x ^ (1 << (len(x) - 1))\n        return x\n    x = toggle(n)\n    return x\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # to be written for practice\n    return (1 << (n - 2)) | (1 << n)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bits = [1]*(n)\n    j = 0\n    for i in range(n):\n        j = (j+1) % 2\n        bits[i] = (bits[i]<<1) | j\n    \n    return bits\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    global n\n    temp = n\n    while True:\n        n = (temp & 0x55) | (((temp >> 4) & 0x0F) << 8) | ((temp >> 7) & 0x03)\n        if (n & 0x80)!= 0:\n            return\n        else:\n            n = n & 0xFF\n        \n        if n == 0:\n            break\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    result = []\n    for i in range(0, len(n)):\n        result.append(n[i] ^ (n[i] >> 1))\n    return result\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    if i == n:\n        return a.insert(n, x)\n    else:\n        return a[i+1:n:i] + [x]\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return -1\n    else:\n        return left\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_right(a, x)\n    if left == len(a):\n        return -1\n    else:\n        return left\ndef count_elements(s):\n    '''\n    Write a function to count the total number of elements in a sorted array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    counter = 0\n    while s:\n        counter += 1\n        s = s[1:]\n    return counter\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Find the index of the first occurence of x in the array\n    i = bisect.bisect_left(a, x)\n    # Check if x is present at the end\n    if i == len(a):\n        # If so then return the index of the last occurrence of x\n        return len(a) - 1\n    else:\n        # Otherwise return the position at which x is not already present\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    mid = (l + r) // 2\n    while True:\n        if r - l <= 1:\n            if a[mid] == x:\n                return mid\n            elif a[mid] > x:\n                r = mid - 1\n            else:\n                l = mid + 1\n        else:\n            if a[l] == x:\n                return l\n            elif a[mid] > x:\n                r = mid - 1\n            else:\n                l = mid + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    return pos\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Your code here\n    #Create a sorted list from the input\n    #Create a boolean list to test if the number at the insertion point is less than the value at the insertion point\n    #Create a pointer\n    #If the pointer has an index less than the length of the list, add it to the sorted list\n    #If the pointer has index greater than the length of the list, remove it from the sorted list\n    #Return the index of the insertion point\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x<a:\n        return 0\n    if x==a:\n        return 1\n    if x>a:\n        if x-a>1:\n            return bisect.bisect_left(a,x,right=True)\n        return 0\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if a[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a):\n        return i\n    else:\n        return len(a)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    #regular expression to check whether the string starts with a vowel\n    vowels = 'aeiouAEIOU'\n    #regular expression to check whether the string is starting with a vowel\n    vowel_check = r'(?=[' + vowels + '])'\n    #Regular expression to check whether the string has any consonant\n    consonant = r'[^aeiouAEIOU]'\n    #Regular expression to check whether the string has any consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #Regular expression to check whether the string has any space\n    space_check = r'\\s'\n    #Regular expression to check whether the string is start with the vowel\n    vowel_check = r'(?<=' + vowels + ')(' + vowel_check + ')'\n    #Regular expression to check whether the string is start with the consonant\n    consonant_check = r'(?=' + consonant + ')(' + consonant_check + ')'\n    #Regular expression to check whether the string is start with the space\n    space_check = r'\\s'\n    #Regular expression to check whether the string is end with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    #Regular expression to check whether the string is end with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #Regular expression to check whether the string is end with a space\n    space_check = r'\\s'\n    #Regular expression to check whether the string is end with the vowel\n    vowel_check = r'(?=' + vowels + ')'\n    #Regular expression to check whether the string is end with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #Regular expression to check whether the string is end with a space\n    space_check = r'\\s'\n    \n    #regular expression to check whether the string starts with a consonant\n    consonant_check = r'(?<=' + consonant + ')'\n    #regular expression to check whether the string starts with a vowel\n    vowel_check = r'(?<=' + vowels + ')'\n    #regular expression to check whether the string starts with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #regular expression to check whether the string starts with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #regular expression to check whether the string starts with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #regular expression to check whether the string starts with a space\n    space_check = r'\\s'\n    #regular expression to check whether the string starts with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    #regular expression to check whether the string starts with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #regular expression to check whether the string starts with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #Regular expression to check whether the string starts with a space\n    space_check = r'\\s'\n    #Regular expression to check whether the string starts with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    #Regular expression to check whether the string starts with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #Regular expression to check whether the string starts with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #Regular expression to check whether the string ends with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #Regular expression to check whether the string ends with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    #Regular expression to check whether the string ends with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #Regular expression to check whether the string ends with a space\n    space_check = r'\\s'\n    #Regular expression to check whether the string ends with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    #Regular expression to check whether the string ends with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #Regular expression to check whether the string ends with a space\n    space_check = r'\\s'\n    #Regular expression to check whether the string ends with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #Regular expression to check whether the string ends with a space\n    space_check = r'\\s'\n    #Regular expression to check whether the string ends with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    #Regular expression to check whether the string ends with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #Regular expression to check whether the string ends with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #regular expression to check whether the string ends with a space\n    space_check = r'\\s'\n    #regular expression to check whether the string ends with a consonant\n    vowel_check = r'(?=' + vowels + ')'\n    #regular expression to check whether the string ends with a vowel\n    consonant_check = r'(?=' + consonant + ')'\n    #regular expression to check whether the string ends with a consonant\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #Regular expression to check whether the string ends with a space\n    space_check = r'\\s'\n    #regular expression to check whether the string ends with a consonant\n    vowel_check = r'(?=' + vowels + ')'\n    #Regular expression to check whether the string ends with a vowel\n    consonant_check = r'(?=' + consonant + ')'\n    #Regular expression to check whether the string ends with a consonant\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #Regular expression to check whether the string ends with a space\n    space_check = r'\\s'\n    #Regular expression to check whether the string ends with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    #Regular expression to check whether the string ends with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #Regular expression to check whether the string ends with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #regular expression to check whether the string ends with a space\n    space_check = r'\\s'\n    #regular expression to check whether the string ends with a consonant\n    vowel_check = r'(?=' + vowels + ')'\n    #regular expression to check whether the string ends with a vowel\n    consonant_check = r'(?=' + consonant + ')'\n    #regular expression to check whether the string ends with a consonant\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #regular expression to check whether the string ends with a space\n    space_check = r'\\s'\n    #regular expression to check whether the string ends with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    #regular expression to check whether the string ends with a consonant\n    consonant_check = r'(?=' + consonant + ')'\n    #regular expression to check whether the string ends with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    \n    #regular expression to check whether the string ends with a space\n    space_check = r'\\s'\n    #regular expression to check whether the string ends with a vowel\n    vowel_check = r'(?=' + vowels + ')'\n    #regular expression to check whether the string ends with a consonant\n    consonan"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in vowels:\n        if string.startswith(i):\n            return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    return any(c.lower() in string.lower() for c in set(string))\ndef find_vowels(word):\n    '''\n    Write a function to check whether the given word has all vowels or not using regex.\n    '''\n    \n    for i in range(len(word)):\n        if not any(c.lower() in word[i].lower() for c in set(word[i])):\n            return False\n    return True\ndef find_vowels_with_other_vowels(word):\n    '''\n    Write a function to check whether the given word has all other vowels or not using regex.\n    '''\n    \n    for i in range(len(word)):\n        if not any(c.lower() in word[i].lower() for c in set(word[i])):\n            return False\n    return True\ndef remove_all(string, sub):\n    '''\n    Remove all instances of a substring from a given string.\n    '''\n    if not isinstance(sub, str):\n        raise TypeError('substring must be a string')\n    if isinstance(string, str):\n        return string.replace(sub, '')\n    else:\n        raise TypeError('Only strings supported')\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    # Make sure that all characters are lower case \n    string = string.lower() \n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string.lower() in vowel_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    print(string)\n    check_vowel = lambda s: s.startswith('A') or s.startswith('a') or s.startswith('E') or s.startswith('e') or s.startswith('I') or s.startswith('i') or s.startswith('O') or s.startswith('o') or s.startswith('U') or s.startswith('u')\n    if any(check_vowel(s) for s in string):\n        return True\n    else:\n        return False\ndef is_vowel(s):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    print(s)\n    return check_str(s)\ndef is_consonant(s):\n    '''\n    Write a function to check whether the given string is ending with a consonant or not using regex.\n    '''\n    return not any(c.isalpha() for c in s)\ndef is_consonant_adj(s):\n    '''\n    Write a function to check whether the given string is ending with a consonant adj. or not using regex.\n    '''\n    return not any(c.isupper() for c in s)\ndef is_consonant_adj_vowel(s):\n    '''\n    Write a function to check whether the given string is ending with a consonant adj. or not using regex.\n    '''\n    return not any(c.islower() for c in s)\ndef is_consonant_vowel(s):\n    '''\n    Write a function to check whether the given string is ending with a consonant adj. or not using regex.\n    '''\n    return not any(c.isalpha() for c in s)\ndef is_consonant_vowel_adj(s):\n    '''\n    Write a function to check whether the given string is ending with a consonant adj. or not using regex.\n    '''\n    return not any(c.isupper() for c in s)\ndef is_vowel_adj(s):\n    '''\n    Write a function to check whether the given string is ending with a consonant adj. or not using regex.\n    '''\n    return not any(c.islower() for c in s)\ndef is_vowel_adj_vowel(s):\n    '''\n    Write a function to check whether the given string is ending with a consonant adj. or not using regex.\n    '''\n    return not any(c.isupper() for c in s)\ndef is_vowel_adj_vowel_adj(s):\n    '''\n    Write a function to check whether the given string is ending with a consonant adj. or not using regex.\n    '''\n    return not any(c.isalpha() for c in s)\ndef is_consonant_vowel_adj_vowel(s):\n    '''\n    Write a function to check whether the given string is ending with a consonant adj. or not using regex.\n    '''\n    return not any(c.isupper() for c in s)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a','e','i','o','u']\n    if string[0].lower() in vowels:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    result = n\n    while n >= 1:\n        n = n - 1\n        result = result + result*(1/n)\n    return result\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n - 1)\n    \n    \n    "
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n*geometric_sum(n-1)\n    else:\n        return n*geometric_sum(n-1) + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum(n):\n        if n == 1:\n            return 1\n        else:\n            return (n*geometric_sum(n-1))\n    \n    return geometric_sum(n)\n    \nprint(geometric_sum(5))\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n    \ndef recursive_sum(n, prev = None):\n    '''\n    Write a function to calculate the sum of n-1 numbers using a recursive function. https://www.w3resource.com/python-exercises/python-recursion/python-recursion-exercise-16.php\n    '''\n    if n == 0:\n        return 0\n    if prev is not None:\n        return prev + recursive_sum(n-1, prev)\n    else:\n        return n * recursive_sum(n-1)\n        \ndef modular_inverse(p, q):\n    '''\n    Given p and q, calculate the modular inverse modulo q, where p belongs to the modulus p-1.\n    '''\n    if q == 0:\n        return p\n    g = modular_inverse(q,p-1)\n    return g\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    n -= 1\n    if n > 0:\n        return (geometric_sum(n) * n) + geometric_sum(n-1)\n    else:\n        return 1\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def triangular_num(n):\n        a = []\n        i = 2\n        while i <= math.pow(10, n) * a:\n            if n % i == 0:\n                a.append(i)\n            i += 1\n        if len(a) == 0:\n            return -1\n        elif len(a) == 1:\n            return a[0]\n        else:\n            return a[-1]\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def index_of_smallest(a):\n        '''\n        a is a list of numbers.\n        Return index of smallest number in a list.\n        '''\n        if(len(a)==1):\n            return 0\n        elif(len(a)==2):\n            if(a[0]==a[1]):\n                return 0\n            else:\n                return 1\n        elif(len(a)==3):\n            if(a[0]>a[1] and a[0]>a[2]):\n                return 0\n            elif(a[1]>a[0] and a[1]>a[2]):\n                return 1\n            elif(a[0]<a[1] and a[1]<a[2]):\n                return 2\n            else:\n                return 3\n        elif(len(a)==4):\n            if(a[0]>a[1] and a[0]>a[2] and a[0]>a[3]):\n                return 0\n            elif(a[1]>a[0] and a[1]>a[2] and a[1]>a[3]):\n                return 1\n            elif(a[0]<a[1] and a[0]<a[2] and a[0]<a[3]):\n                return 2\n            elif(a[1]<a[0] and a[1]<a[2] and a[1]<a[3]):\n                return 3\n            else:\n                return 4\n    return find_Index(n//10) + (n%10)*2\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    digits = {}\n    \n    for i in range(2, n + 1):\n        value = 0\n        for j in range(i, 0, -1):\n            if(i % j == 0):\n                value += j\n        digits[i] = value\n    return digits\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n == 1): \n        return 0\n    if(n == 2): \n        return 1\n    if(n == 3): \n        return 2\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n + 1): \n        index = i \n        # print(index)\n        # # print(math.floor(math.log10(index))) \n        for j in range(2, int(math.floor(math.log10(index)) + 1)): \n            if index % j == 0: \n                break\n        else: \n            return index \ndef find_Fib(n): \n    '''\n    Write a python function to find the nth fibonacci number. https://www.geeksforgeeks.org/python-find-the-nth-fibonacci-number/\n    ''' \n    x, y = 0, 1 \n    while x < n: \n        z = y \n        y = x + y \n        x = y \n    return y \ndef find_IsPalindrome(s): \n    '''\n    Write a python function to check whether a string is palindrome or not. https://www.geeksforgeeks.org/check-if-a-string-is-a-palindrome/\n    ''' \n    # Find the length of the string \n    str_len = len(s) \n    # Initialize flag to check whether string is palindrome or not \n    is_palindrome = True \n    # Traverse the string from 1 to the length of the string \n    for i in range(0, str_len): \n        if (s[i]!= s[str_len - 1 - i]) : \n            is_palindrome = False \n            break \n    return is_palindrome \ndef triangle_area(n): \n    '''\n    Write a python function to find the area of a triangle. https://www.geeksforgeeks.org/area-of-a-triangle/\n    ''' \n    base = n * (n + 1) / 2\n    area = math.pow(base, 2)\n    return area \ndef triangle_area_2(n): \n    '''\n    Write a python function to find the area of a triangle. https://www.geeksforgeeks.org/area-of-a-triangle/\n    ''' \n    area = (n * (n + 1)) / 2\n    return area \ndef fibonacci(n): \n    '''\n    Write a python function to find the fibonacci number. https://www.geeksforgeeks.org/fibonacci-number-with-three-known-input-numbers/\n    ''' \n    f1 = 0 \n    f2 = 1 \n    f3 = 1 \n    if n == 0: \n        print(f1) \n    elif n == 1: \n        print(f2) \n    elif n == 2: \n        print(f3) \n    else: \n        for i in range(3, n): \n            f1, f2, f3 = f2, f3, f1 + f2 \n        print(f3) \ndef main(): \n    print(\"Welcome to the 'Fibonacci Number'.\\nFibonacci numbers are numbers that are defined by the series Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+Fn+F"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = str(n)\n    while len(n)!= len(n[::-1]):\n        n = n[1:]\n    if len(n) == len(n[::-1]):\n        return int(n)\n    else:\n        return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            return i\n    return 0\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    max = int(math.sqrt(n))\n    \n    for i in range(1, max + 1):\n        if n % i == 0:\n            return i\n    return max\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(2, n+1):\n        if n % i == 0:\n            return (n//i)\n        else:\n            return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        if (n % i) == 0:\n            return i\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    for i in test_tup:\n        dictionary[i] = test_tup.count(i)\n    return dictionary\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Your code here\n    if type(test_tup) is not tuple:\n        raise TypeError('tuple expected')\n    else:\n        tup = (tuple(test_tup))\n        return dict(zip(tup,tup[1:]))\n    #raise TypeError('tuple expected')\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict()\n    for i in range(len(test_tup) - 1):\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict((test_tup[i], test_tup[i+1]) for i in range(0, len(test_tup)-1))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dic = {}\n    for i,e in enumerate(test_tup):\n        dic[e] = i\n    return dic\n    \n    \ndef has_duplicate(input_list):\n    '''\n    Finds if the given list contains any duplicate elements.\n    input_list is a list of integers.\n    '''\n    i = 0\n    if len(input_list) == 1:\n        return False\n    elif len(input_list) > 1:\n        while i < len(input_list)-1:\n            if input_list[i] == input_list[i+1]:\n                return True\n            else:\n                i += 1\n        return False\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_value = {}\n    for i in range(len(test_tup)):\n        key_value[i] = test_tup[i]\n    return key_value\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict()\n    temp_list = test_tup.__getitem__\n    for index,item in enumerate(temp_list()):\n        test_dict[index+1] = item\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(len(test_tup)-1):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    for i in range(len(test_tup) - 1):\n        dictionary[test_tup[i]], dictionary[test_tup[i + 1]] = test_tup[i], test_tup[i + 1]\n    return dictionary\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = dict()\n    for item in test_tup:\n        dict_obj[item] = dict_obj.get(item, 0) + 1\n    return dict_obj\n    \n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    a = list(s)\n    if len(a) % 2!= 0 : return False\n    return all(c1 == c2 for c1, c2 in zip(a, a[::2]))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    i = 0\n    while i < len(s) :\n        if s[i]!= s[i+1] :\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #Declare two empty lists for the characters\n    char_List = []\n    for x in range(len(s)):\n        char_List.append(\"\")\n    #Process the string\n    for x in range(len(s)):\n        char = s[x]\n        if char!= \" \" :\n            char_List[x] = char\n    #Check if all the characters are same\n    for x in range(len(char_List)):\n        if char_List[x]!= \" \":\n            return False\n    #Print out all the characters\n    for x in range(len(char_List)):\n        print(char_List[x], end=\" \")\n    #Return all the same\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_count = 0\n    for char in s:\n        char_count += 1\n    if char_count == len(s):\n        print(\"\\nAll Characters Are Same\")\n    else:\n        print(\"\\nSome Characters are NOT same\")\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (s.lower() == s.upper())\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    check = 0\n    for i in s:\n        if i!= s[check]:\n            check += 1\n    return check == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    cnt = 0\n    for i in s :\n        if i!='' :\n            cnt += 1\n    return cnt == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(elem == s[i] for i,elem in enumerate(s))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = list(s)\n    return len(set(s)) == len(s)\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.pi * (side ** 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = 4 * side * side\n    return a\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        return 1\n    elif side == 2:\n        return 6\n    elif side == 3:\n        return 12\n    elif side == 4:\n        return 24\n    else:\n        return None\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6.0 * (side ** 2)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return round(math.sqrt(side**2-9*side*math.cos(math.radians(60))),2)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the area of a tetrahedron using the formula of the article\n    # \"Probabilistic Geometry for Water Objects\" by A. R. Wolf and M.\n    # \"The On-The-Rice Geometry for Geometry and Geometry Algorithms\"\n    # by A. R. Wolf, M.\n    #\n    # For this problem, we will use the following data:\n    #\n    # - The side of a triangle (integer)\n    # - The side of a cube (integer)\n    # - The side of a unit square (integer)\n    # - The side of a square (integer)\n    # - The side of a rectangle (integer)\n    #\n    # The area of a tetrahedron is calculated as:\n    #\n    # area = ((S(T) - S(R)) * (S(T) - S(R)) + (R^3 - 3 * S(T) + 3 * S(R)) * (R^3 - 3 * S(T) + 3 * S(R)))\n    #\n    # where S(T) is the side of a tetrahedron, R(T) is the side of\n    # a unit square, and S(R) and R(R) are the side of a rectangle\n    #\n    # A triangle has four sides, which have sides of length 1, 2, and 3.\n    # A cube has four sides, which have sides of length 4, 5, and 6.\n    # A unit square has eight sides, which have sides of length 8.\n    # A rectangle has four sides, which have sides of length 2, 3, and 5.\n    #\n    # For this problem, we will assume that the points of the faces of the\n    # tetrahedron are ordered such that the face of the triangle and the\n    # cube are ordered such that the face of the rectangle is ordered\n    # such that the face of the cube is ordered such that the face of the\n    # rectangle is ordered such that the face of the cube is ordered\n    # such that the face of the triangle is ordered such that the face of\n    # the rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the rectangle\n    # is ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the rectangle\n    # is ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the rectangle\n    # is ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the rectangle\n    # is ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the face\n    # of the rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the face\n    # of the rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the face\n    # of the rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the face\n    # of the rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the rectangle\n    # is ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the rectangle\n    # is ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the face\n    # of the rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the rectangle\n    # is ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the face\n    # of the rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the rectangle\n    # is ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the face\n    # of the rectangle is ordered such that the face of the rectangle is\n    # ordered such that the face of the rectangle is ordered such that the\n    # face of the rectangle is ordered such that the face of the rectangle\n    # is ordered such that the face of the rectangle is ordered such that\n    # the face of the rectangle is ordered such that the face of the\n    # rectangle is ordered such that the face of the rectangle is ordered\n    # such that the face of the rectangle is ordered such that the face\n    # of the rectangle is ordered such that the face of the rectangle is\n    # ordered suc"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.0\n    if side == 'C':\n        side = 1.0\n    elif side == 'A':\n        side = 1.0\n    else:\n        side = -1.0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == \"top\":\n        return (0.5 * math.sqrt(3.0))\n    elif side == \"bottom\":\n        return (0.5 * math.sqrt(5.0))\n    else:\n        raise ValueError(\"side must be 'top' or 'bottom'\")\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * side) * (3.14159265359)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = side * 3.14159 * (side ** 2)\n    return area\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new = [0]*len(list)\n    new[-m:] = list[:]\n    list[:-m] = list[m:]\n    list[-m:] = new[:-m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #print(f'Rotating list {list} by {m}')\n    if m == 1:\n        return list\n    if m == 0:\n        return list[::-1]\n    n = len(list)\n    left_idx = (n-m)//2\n    right_idx = n-m-left_idx\n    #print(f'left_idx, right_idx: {left_idx}, {right_idx}')\n    new_list = []\n    for i in list:\n        new_list.append(i)\n    new_list = new_list[left_idx:] + new_list[:right_idx]\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(0, len(list)):\n        j = i\n        while j < len(list):\n            list[j], list[j-1] = list[j-1], list[j]\n            j += 1\n        print(list)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # CODE TO DO INPUT\n    #take parameter as list\n    #take parameter as number to be rotated\n    #return the list\n    def rotate_right(list, m):\n        #code to find length of list\n        l = len(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # O(n) runtime\n    # O(n) space\n    # O(1) memory\n    if len(list) <= 1:\n        return list\n    #swapping first item with last item\n    #O(n) time\n    #O(n) space\n    #O(1) memory\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[::-1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-1::-1] + list[:-1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    k = n//2\n    for i in range(n//2):\n        for j in range(i,n-i-1):\n            list[j],list[n-j-1] = list[n-j-1],list[j]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    i = n - 1\n    # loop will repeat n times if n > m\n    while i >= 0:\n        # only one loop is allowed because the number of rotations is limited by the length of the list\n        # in fact i refers to the position of the array\n        temp = list[i]\n        j = i - 1\n        # the first loop will create a new array for the current position of the list\n        # i is referring to the position of the array\n        # j is referring to the position of the array\n        while j >= 0:\n            # swapping element at the current position of the list\n            list[j] = list[i]\n            # changing the index of the current position of the list\n            j -= 1\n        # reversing the current position of the array to the left\n        list[i] = temp\n        # setting new position of the array to the current position\n        i -= 1\n    # return result\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup[0]!= None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] is None:\n        return True\n    else:\n        return False\n        \ndef main():\n    '''\n    Write a function to print all unique values in a tuple or not.\n    '''\n    test_tup = (1,2,3,4,4,2,3,4,1,4)\n    print(check_none(test_tup))\n    \nmain("
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for v in test_tup:\n        if v is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for el in test_tup:\n        if el is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup[0] is None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup is not None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    if len(test_tup) == 0:\n        return True\n    return False\n    \n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # if startnum is in range and endnum is in range\n    # startnum is greater than endnum\n    # if endnum is less than startnum\n    # then it will return 'False'\n    # if both numbers are in range\n    # then it will return 'True'\n    \n    # define a function that takes a string as an input and returns the number of digits in it\n    # return the number of digits in the input\n    def digits_in_range(num):\n        start_digit = num//10\n        end_digit = num%10\n        return sum(start_digit == x for x in range(start_digit, end_digit))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # your code here\n    s=str(startnum)\n    e=str(endnum)\n    f=e[1:len(endnum)]\n    def check(num):\n        for i in range(1,len(f)):\n            if num%10==f[i-1]:\n                return True\n        return False\n    for i in range(int(s),int(e)):\n        if(check(i)):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    total = startnum + endnum\n    if total % 10 == 0:\n        return total\n    else:\n        return total\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum):\n        num = int(str(i)[::-1])\n        if num % 10 == 0:\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return sum(c % d == 0 for c, d in zip(range(startnum, endnum + 1), range(10))) == 0\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    return [x for x in range(startnum,endnum+1) if all(i%x==0 for i in range(startnum,endnum+1))]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum + 1) if is_divisible_by_div(x, digits) is True]\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    num_dict = {}\n    for num in range(startnum, endnum):\n        if is_divisible_by_digit(num):\n            num_dict[num] = 1\n        else:\n            num_dict[num] = 0\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisibles = []\n    for i in range(1, 10):\n        if startnum % i == 0 and endnum % i == 0:\n            divisibles.append(i)\n    return divisibles\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    # define variable for start and end numbers\n    startnum = startnum\n    endnum = endnum\n    divs = []\n    # define numbers to be checked\n    for num in range(startnum, endnum):\n        # divide by every digit\n        num = str(num)\n        divs.append(num)\n    # return array\n    return divs\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # angle = (math.radians(a))\n    # deg_90 = (angle - 90) * 180/math.pi\n    # print(deg_90)\n    # r = int(r*(3/5))\n    # a = int(a*(3/5))\n    # angle_check = angle - (angle % 360)\n    # r_check = r - (r % 2)\n    # if angle_check >= 90 or angle_check <= 0:\n    #     return None\n    # else:\n    #     if r_check > 0:\n    #         if r_check % 2 == 0:\n    #             if math.sin(math.radians(angle)) < 0:\n    #                 return None\n    #             elif math.sin(math.radians(angle)) > 0:\n    #                 return r * (math.cos(math.radians(angle)))\n    #         else:\n    #             if math.sin(math.radians(angle)) < 0:\n    #                 return r * (math.cos(math.radians(angle)))\n    #             elif math.sin(math.radians(angle)) > 0:\n    #                 return r * math.cos(math.radians(angle))\n    #     else:\n    #         return None\n    # return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(math.isclose(r,0) and math.isclose(a,0)):\n        return None\n    if(math.isclose(r,0) and math.isclose(a,360)):\n        return None\n    if(math.isclose(r,0) and math.isclose(a,math.pi/2)):\n        return None\n    if(math.isclose(r,0)):\n        return None\n    if(math.isclose(a,0)):\n        return None\n    if(math.isclose(a,360)):\n        return None\n    if(r<0):\n        a*=-1\n        r*=-1\n        return None\n    return r*a\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Write your code here\n    if math.pi/2 < r < math.pi/3 and r**2 - a**2 > 0:\n        print('Circular sector with radius ',r,' and angle ',a)\n    elif math.pi/2 < r < math.pi/3 and r**2 - a**2 < 0:\n        print('Circular sector with radius ',r,' and angle ',a)\n    elif math.pi/2 < r < math.pi/3 and r**2 - a**2 < 0:\n        print('Circular sector with radius ',r,' and angle ',a)\n    elif r**2 - a**2 > 0:\n        print('Circular sector with radius ',r,' and angle ',a)\n    else:\n        print('No sector found')\n        \ndef check_angle(angle):\n    '''\n    Write a function to check whether the angle given as input is greater than 360 or less than 0.\n    '''\n    # Write your code here\n    if angle < 0 or angle > 360:\n        print('The angle must be greater than 0 and less than 360')\n    else:\n        print('The angle is',angle,'degrees')\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = (4 * math.pi * (r**2))\n    if a > (math.pi/4):\n        area += (4 * math.pi * (r**2))\n    elif a <= (math.pi/4):\n        area += (4 * math.pi * (r**2))\n    area = round(area,3)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 0:\n        a = 360+a\n    if a == 360:\n        return r*math.tan(math.radians(a))\n    if a == 0:\n        return r**2\n    if a > 360:\n        return None\n    if r == 0.0:\n        return None\n    return (r**2*math.sin(math.radians(a)))/(math.tan(math.radians(a)))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\ndef segment_area(s,a):\n    '''\n    Write a function to find area of segment. The function takes two strings as inputs.\n    '''\n    return None\ndef circle_area(r,a):\n    '''\n    Write a function to find area of circle. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\ndef square_area(s,a):\n    '''\n    Write a function to find area of square. The function takes two strings as inputs.\n    '''\n    return None\ndef arc_area(r,a):\n    '''\n    Write a function to find area of arc. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\ndef circle_area_degenerate(r,a):\n    '''\n    Write a function to find area of circle. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\ndef arc_area_degenerate(r,a):\n    '''\n    Write a function to find area of arc. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\ndef set_circle_area_degenerate(r,a):\n    '''\n    Write a function to find area of circle. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\ndef set_arc_area_degenerate(r,a):\n    '''\n    Write a function to find area of arc. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\ndef dist_area_degenerate(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_degenerate_circ(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_degenerate_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef set_dist_area_degenerate(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef set_dist_area_degenerate_circ(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_arc_degenerate(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_arc_degenerate_circ(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_arc_degenerate_circ(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_circ(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_circ_degenerate(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_circ_degenerate_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_circ_degenerate_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_degenerate(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_degenerate_circ(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_degenerate_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_arc_degenerate(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_arc_degenerate_circ(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_arc_degenerate_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_arc_degenerate_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_degenerate_arc_degenerate(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_degenerate_arc_degenerate(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_degenerate_arc_degenerate_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dist_area_degenerate_arc_degenerate_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dis_area_degenerate_arc_degenerate(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dis_area_degenerate_arc_degenerate_arc(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dis_area_arc_degenerate(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dis_area_arc_degenerate_circ(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dis_area_arc_degenerate_circ(r,a):\n    '''\n    Write a function to find distance between two circles. The function takes two strings as inputs.\n    '''\n    return None\ndef dis_area_arc_degenerate_arc(r,a):\n    '''\n    Write a function to find distance between two circles. Th"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a>180:\n        a = a-360\n    #print(f'r: {r}')\n    #print(f'a: {a}')\n    s = (r**2) * math.sin(math.radians(a))\n    return s\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area_rad = math.pi * r ** 2\n    sector_area_deg = sector_area_rad * a\n    return sector_area_deg\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a == 0:\n        return r**2*math.pi\n    elif a >= math.pi/4:\n        return r**2*math.pi*(3**(1/2))\n    else:\n        return r**2*(math.pi*(1-(3**(1/2)))*(1-math.cos(a)))\ndef sector_area_2(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a == 0:\n        return r**2*math.pi\n    elif a >= math.pi/4:\n        return r**2*math.pi*(3**(1/2))\n    else:\n        return r**2*(math.pi*(1-math.cos(a)))\ndef sector_area_3(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/3:\n        return r**2*math.pi\n    elif a >= math.pi/2:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_4(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/3:\n        return r**2*math.pi\n    elif a >= math.pi/2:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_5(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/4:\n        return r**2*math.pi\n    elif a >= math.pi/2:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_6(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/4:\n        return r**2*math.pi\n    elif a >= math.pi/2:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_7(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/5:\n        return r**2*math.pi\n    elif a >= math.pi/4:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_8(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/5:\n        return r**2*math.pi\n    elif a >= math.pi/4:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_9(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/5:\n        return r**2*math.pi\n    elif a >= math.pi/4:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_10(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/5:\n        return r**2*math.pi\n    elif a >= math.pi/4:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_11(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/5:\n        return r**2*math.pi\n    elif a >= math.pi/4:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_12(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/5:\n        return r**2*math.pi\n    elif a >= math.pi/4:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_13(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/5:\n        return r**2*math.pi\n    elif a >= math.pi/4:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_14(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/5:\n        return r**2*math.pi\n    elif a >= math.pi/4:\n        return r**2*(math.pi*(1-math.cos(a/2)))\n    else:\n        return r**2*(math.pi*(1-math.cos((math.pi*a)/2)))\ndef sector_area_15(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= math.pi/5:\n        return r**2*math.pi"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\ndef disk_area(r,a):\n    '''\n    Write a function that returns the area of a disk. The function takes the radius and angle.\n    '''\n    return None\ndef prime_check(n):\n    '''\n    Return True if n is a prime number.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Return True if n is a prime number.\n    '''\n    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_square(n):\n    '''\n    Return True if n is a square number.\n    '''\n    return n*n==n\ndef is_pentagon(n):\n    '''\n    Return True if n is a pentagon.\n    '''\n    return math.sqrt(1-(n-1)/6)==1\ndef is_triangle(n):\n    '''\n    Return True if n is a triangle.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_hexagon(n):\n    '''\n    Return True if n is a hexagon.\n    '''\n    return n*(3*n-1)/2==n*(3*n-1)\ndef is_octagon(n):\n    '''\n    Return True if n is a octagon.\n    '''\n    return n*(4*n-1)/2==n*(4*n-1)\ndef is_heptagon(n):\n    '''\n    Return True if n is a heptagon.\n    '''\n    return n*(7*n-1)/2==n*(7*n-1)\ndef is_quadrilateral(n):\n    '''\n    Return True if n is a quadrilateral.\n    '''\n    return n*(n-1)==n*(n-1)\ndef is_cuboctahedron(n):\n    '''\n    Return True if n is a cuboctahedron.\n    '''\n    return n*(n-1)==(n*(3*n-1))/(2*math.sqrt(6))\ndef is_tetrahedron(n):\n    '''\n    Return True if n is a tetrahedron.\n    '''\n    return n*(3*n-1)/2==n*(3*n-1)\ndef is_hexahedron(n):\n    '''\n    Return True if n is a hexahedron.\n    '''\n    return n*(4*n-1)/2==n*(4*n-1)\ndef is_octahedron(n):\n    '''\n    Return True if n is a octahedron.\n    '''\n    return n*(7*n-1)/2==n*(7*n-1)\ndef is_nonagon(n):\n    '''\n    Return True if n is a nonagon.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_quadrant(n):\n    '''\n    Return True if n is a quadrant.\n    '''\n    return n*(3*n-1)/2==n*(3*n-1)\ndef is_kite(n):\n    '''\n    Return True if n is a kite.\n    '''\n    return n*(4*n-1)/2==n*(4*n-1)\ndef is_kites(n):\n    '''\n    Return True if n is a kites.\n    '''\n    return n*(7*n-1)/2==n*(7*n-1)\ndef is_cuboctahedron_degree(n):\n    '''\n    Return True if n is a cubic octahedron degree.\n    '''\n    return n*(n-1)==(n*(3*n-1))/2\ndef is_tetrahedron_degree(n):\n    '''\n    Return True if n is a tetrahedron degree.\n    '''\n    return n*(3*n-1)/2==n*(3*n-1)\ndef is_quadrilateral_degree(n):\n    '''\n    Return True if n is a quadrilateral degree.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_cuboctahedron_degree_less_than_six(n):\n    '''\n    Return True if n is a cubic octahedron degree less than six.\n    '''\n    return n*(n-1)==(n*(3*n-1))/2\ndef is_tetrahedron_degree_less_than_six(n):\n    '''\n    Return True if n is a tetrahedron degree less than six.\n    '''\n    return n*(3*n-1)/2==n*(3*n-1)\ndef is_quadrant_degree_less_than_six(n):\n    '''\n    Return True if n is a quadrant degree less than six.\n    '''\n    return n*(4*n-1)/2==n*(4*n-1)\ndef is_kite_degree_less_than_six(n):\n    '''\n    Return True if n is a kite degree less than six.\n    '''\n    return n*(7*n-1)/2==n*(7*n-1)\ndef is_kites_degree_less_than_six(n):\n    '''\n    Return True if n is a kites degree less than six.\n    '''\n    return n*(8*n-1)/2==n*(8*n-1)\ndef is_nonagon_degree_less_than_six(n):\n    '''\n    Return True if n is a nonagon degree less than six.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_cuboctahedron_degree_less_than_six(n):\n    '''\n    Return True if n is a cubic octahedron degree less than six.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_tetrahedron_degree_less_than_six(n):\n    '''\n    Return True if n is a tetrahedron degree less than six.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_quadrilateral_degree_less_than_six(n):\n    '''\n    Return True if n is a quadrilateral degree less than six.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_cuboctahedron_degree_less_than_six(n):\n    '''\n    Return True if n is a cubic octahedron degree less than six.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_tetrahedron_degree_less_than_six(n):\n    '''\n    Return True if n is a tetrahedron degree less than six.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_quadrant_degree_less_than_six(n):\n    '''\n    Return True if n is a quadrant degree less than six.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_kite_degree_less_than_six(n):\n    '''\n    Return True if n is a kite degree less than six.\n    '''\n    return n*(n-1)/2==n*(n-1)\ndef is_kites_degree_less_than_six(n):\n    '''\n    Return True if n is a kites degre"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    L = [0 for i in range(len(X)+1)]\n    for i in range(len(X)):\n        L[i+1] = max(L[i], L[i+1], L[i]+Z[i])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # max length of sub sequence\n    m = len(X) + 1\n    # length of the longest common subsequence\n    n = len(Y) + 1\n    # lcs_of_three(X, Y, Z)\n    # if len(X) >= len(Y):\n    #     # if len(X) is greater than len(Y)\n    #     lcs = X[:len(Y)]\n    # else:\n    #     # if len(Y) is greater than len(X)\n    #     lcs = Y[:len(X)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs_of_three_rec(X, Y, Z, i, j, k):\n        if i == 0 or j == 0 or k == 0:\n            return 0\n        if X[i - 1] == Y[j - 1] and Y[k - 1]!= X[i - 1]:\n            return lcs_of_three_rec(X, Y, Z, i - 1, j - 1, k - 1) + 1\n        else:\n            return max(lcs_of_three_rec(X, Y, Z, i - 1, j, k - 1), lcs_of_three_rec(X, Y, Z, i, j - 1, k))\n    return lcs_of_three_rec(X, Y, Z, len(X), len(Y), len(Z))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X)!= len(Y) or len(Y)!= len(Z):\n        return None\n    \n    # If length of both strings is 1 then return empty string\n    if len(X) == 1 and len(Y) == 1 and len(Z) == 1:\n        return \"\"\n    \n    # Dictionary to store the index for the corresponding strings\n    dic = {\n        0 : \"\", \n        1 : \"\", \n        2 : \"\"\n    }\n    \n    # Create a two pointer to take only the first characters of the strings and assign the values to the corresponding key\n    ptr = 0\n    for i in range(len(X)):\n        dic[dic[X[i]] + dic[Y[i]] + dic[Z[i]]] = i\n        ptr = ptr + 1\n        \n    # If the number of elements is not equal to 3, return the empty string\n    if ptr!= len(X) * len(Y) * len(Z):\n        return \"\"\n    \n    # Store the two pointers in both the first string and the second string\n    # We are using the '+' operator to add the index values of the strings together\n    lcs = \"\"\n    \n    # loop through the dictionary values\n    for i in range(len(dic)):\n        # We are using the '+' operator to add the index values of the two strings together\n        lcs = lcs + dic[i] + dic[i] + dic[i]\n    \n    # Return the result\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    d = dict() \n    # create a dictonary of 0 length \n    for i in range(n): \n        d[i] = 0 \n    # if the dictionary is empty \n    if (n == 0 or m == 0): \n        return 0\n    # if the first element of X is not present in Y or Y is not present in X \n    if (X[0] not in d or Y[0] not in d): \n        return 0\n    # if the last element of X is not present in Y or Y is not present in X \n    if (X[n - 1] not in d or Y[m - 1] not in d): \n        return 0\n    # init lcs of X and Y\n    lcs = [[0 for i in range(m + 1)] for j in range(n + 1)] \n    # traverse the string \n    for i in range(n): \n        for j in range(m): \n            if (X[i] == Y[j]): \n                # update lcs of X and Y \n                lcs[i + 1][j + 1] = 1 + lcs[i][j] \n                # update lcs of X and Y and then update the result of lcs[] \n                lcs[i + 1][j + 1] = max(lcs[i][j + 1], lcs[i + 1][j]) \n            else: \n                # update lcs of X and Y \n                lcs[i + 1][j + 1] = 1 + lcs[i][j] \n                # update lcs of X and Y and then update the result of lcs[] \n                lcs[i + 1][j + 1] = max(lcs[i][j + 1], lcs[i + 1][j]) \n    # return the result of lcs[] \n    return lcs[n][m] \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs = [[0]*(len(Z)+1) for i in range(len(X)+1)]\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Z)+1):\n            if X[i-1] == Z[j-1]:\n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else:\n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n    return lcs[len(X)][len(Z)]\n    \ndef count_letters(string):\n    '''\n    :param string: a string of a word\n    :return: the number of times the letter occurs in the string\n    '''\n    count = 0\n    for letter in string:\n        if letter in string[0:len(string)]:\n            count += 1\n    return count\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #initialize matrix to store LCS of three strings\n    C = [[0 for x in range(len(Z)+1)] for y in range(len(X)+1)]\n    #initialize current index \n    x,y,z = 0,0,0\n    #initialize first 2 rows\n    for i in range(1,len(X)+1):\n        for j in range(1,len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                C[i][j] = C[i-1][j-1]+1\n                x = i\n                y = j\n            else:\n                C[i][j] = max(C[i-1][j],C[i][j-1])\n    #initialize second 2 rows\n    for i in range(1,len(Z)+1):\n        for j in range(1,len(X)+1):\n            if Z[i-1] == X[j-1]:\n                C[i][j] = C[i-1][j-1]\n            else:\n                C[i][j] = C[i-1][j]\n    return C[len(X)][len(Y)]\ndef main():\n    print(\"Enter the sequence\")\n    X = input()\n    Y = input()\n    Z = input()\n    print(\"LCS of the 2 strings\")\n    print(lcs_of_three(X, Y, Z))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def longest_common_subsequence(a, b, c): \n        m = [[-1 for x in range(len(c) + 1)] for y in range(len(a) + 1)] \n        for i in range(len(a) + 1): \n            for j in range(len(b) + 1): \n                for k in range(len(c) + 1): \n                    if a[i-1] == b[j-1] == c[k-1]: \n                        m[i][j] = k \n        return m[len(a)][len(b)][len(c)] \n    # Build the table for the lengths of the strings\n    def build_lcs(x, y, z): \n        m = [[-1 for x in range(len(z) + 1)] for y in range(len(y) + 1)] \n        for i in range(len(x) + 1): \n            for j in range(len(y) + 1): \n                for k in range(len(z) + 1): \n                    if i == 0: \n                        if j == 0: \n                            m[i][j] = 0 \n                        else: \n                            m[i][j] = m[i][j-1] + 1\n                    elif j == 0: \n                        if k == 0: \n                            m[i][j] = 0\n                        else: \n                            m[i][j] = m[i-1][k] + 1\n                    elif k == 0: \n                        if i == 0: \n                            m[i][j] = 0\n                        else: \n                            m[i][j] = m[i-1][k-1] + 1\n                    else: \n                        if x[i-1] == y[j-1] == z[k-1]: \n                            m[i][j] = m[i-1][k-1]\n                        else: \n                            m[i][j] = max(m[i-1][k], m[i][j-1], m[i-1][k-1]) \n        return m[len(x)][len(y)][len(z)] \n    # Find the lcs for the given strings.\n    def lcs_of_three(X, Y, Z): \n        return build_lcs(X, Y, Z) \n    \n    # return the length of the longest common subsequence for each sequence of strings\n    def lcs_length_of_three(X, Y, Z): \n        m = [[-1 for x in range(len(Z) + 1)] for y in range(len(Y) + 1)] \n        for i in range(len(X) + 1): \n            for j in range(len(Y) + 1): \n                for k in range(len(Z) + 1): \n                    if i == 0: \n                        if j == 0: \n                            m[i][j] = 0\n                        else: \n                            m[i][j] = m[i][j-1] + 1\n                    elif j == 0: \n                        if k == 0: \n                            m[i][j] = 0\n                        else: \n                            m[i][j] = m[i-1][k] + 1\n                    elif k == 0: \n                        if i == 0: \n                            m[i][j] = 0\n                        else: \n                            m[i][j] = m[i-1][k-1] + 1\n                    else: \n                        if X[i-1] == Y[j-1] == Z[k-1]: \n                            m[i][j] = m[i-1][k-1]\n                        else: \n                            m[i][j] = max(m[i-1][k], m[i][j-1], m[i-1][k-1]) \n        return m[len(X)][len(Y)][len(Z)] \n    \n    # find the length of longest common subsequence for the given two strings\n    def lcs_length_of_two(X, Y): \n        m = [[-1 for x in range(len(Y) + 1)] for y in range(len(X) + 1)] \n        for i in range(len(X) + 1): \n            for j in range(len(Y) + 1): \n                if i == 0: \n                    if j == 0: \n                        m[i][j] = 0\n                    else: \n                        m[i][j] = m[i-1][j-1] + 1\n                elif j == 0: \n                    if i == 0: \n                        m[i][j] = 0\n                    else: \n                        m[i][j] = m[i-1][j-1] + 1\n                else: \n                    if X[i-1] == Y[j-1]: \n                        m[i][j] = m[i-1][j-1]\n                    else: \n                        m[i][j] = max(m[i-1][j], m[i][j-1], m[i-1][j-1]) \n        return m[len(X)][len(Y)][len(X) + 1] \n    \n    # Find the length of the longest common subsequence for the given two strings\n    def lcs_length_of_two_for_two(X, Y): \n        m = [[-1 for x in range(len(Y) + 1)] for y in range(len(X) + 1)] \n        for i in range(len(X) + 1): \n            for j in range(len(Y) + 1): \n                if i == 0: \n                    if j == 0: \n                        m[i][j] = 0\n                    else: \n                        m[i][j] = m[i-1][j-1] + 1\n                elif j == 0: \n                    if i == 0: \n                        m[i][j] = 0\n                    else: \n                        m[i][j] = m[i-1][j-1] + 1\n                else: \n                    if X[i-1] == Y[j-1]: \n                        m[i][j] = m[i-1][j-1]\n                    else: \n                        m[i][j] = max(m[i-1][j], m[i][j-1], m[i-1][j-1]) \n        return m[len(X)][len(Y)][len(X) + 1] \n    \n    # Find the length of the longest common subsequence for the given two strings\n    def lcs_length_of_two_for_three(X, Y, Z): \n        m = [[-1 for x in range(len(Z) + 1)] for y in range(len(Y) + 1)] \n        for i in range(len(X) + 1): \n            for j in range(len(Y) + 1): \n                for k in range(len(Z) + 1): \n                    if i == 0: \n                        if j == 0: \n                            m[i][j] = 0\n                        else: \n                            m[i][j] = m[i][j-1] + 1\n                    elif j == 0: \n                        if k == 0: \n                            m[i][j] = 0\n                        else: \n                            m[i][j] = m[i-1][k] + 1\n                    elif k == 0: \n                        if i == 0: \n                            m[i][j] = 0\n                        else: \n                            m[i][j] = m[i-1][k-1] + 1\n                    else: \n                        if X[i-1] == Y[j-1] == Z[k-1]: \n                            m[i][j] = m[i-1][k-1]\n                        else: \n                            m[i][j] = max(m[i-1][k], m[i][j-1], m[i-1][k-1]) \n        return m[len(X)][len(Y)][len(Z)] \n    \n    # find the length of the longest common subsequence for the given three strings\n    def lcs_length_of_thre"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    d = {}\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                if i!= j and j!= k and i!= k:\n                    d[X[i] + Y[j] + Z[k]] = min(d.get(X[i] + Y[j] + Z[k]), \n                                                    d.get(X[i] + Y[j] + Z[k]), \n                                                    d.get(X[i] + Y[j] + Z[k])) + 1\n                    \n    return d.get(min(d.values()))\n    "
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    l = [[0 for i in range(len(Z)+1)] for j in range(len(X)+1)]\n    m = [[0 for i in range(len(Z)+1)] for j in range(len(Y)+1)]\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            k = i+j\n            if k == 0:\n                l[i][j] = 0\n            else:\n                l[i][j] = max(l[i-1][j] + 1, l[i][j-1] + 1, l[i-1][j-1] + (X[i] == Z[j]))\n    for i in range(len(Y)):\n        for j in range(len(Z)):\n            if j >= len(X):\n                m[i][j] = max(l[i][j], m[i][j-1] + 1)\n            else:\n                m[i][j] = max(l[i][j] + 1, m[i][j+1] + 1, m[i+1][j] + 1)\n    return m[-1][-1]\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.strip().lower()\n    str1=str1.strip().split()\n    for i in range(len(str1)):\n        if str1[i][0].isupper():\n            str1[i]=' '\n    str1=' '.join(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(\"[^\\w]\", \" \", str1)\n    str1 = re.sub(\"_\", \" \", str1)\n    return str1\n    "
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # YOUR CODE HERE\n    words=str1.split()\n    return \" \".join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res = ''\n    for word in str1.split():\n        if word.startswith(word.title()):\n            res += word.title() +''\n        elif word.startswith(word.upper()):\n            res += word.upper() +''\n        elif word.startswith(word.lower()):\n            res += word.lower() +''\n        elif word.startswith(word.title()):\n            res += word.title() +''\n        elif word.startswith(word.upper()):\n            res += word.upper() +''\n        elif word.startswith(word.lower()):\n            res += word.lower() +''\n    return res.strip()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r\"\\b[A-Z]{3,}[a-z]{3}\\b\"\n    str2 = str1.lower().replace(' ','')\n    str3 = str2.split()\n    str_list = []\n    for word in str3:\n        if word!= '':\n            if re.search(pattern, word)!= None:\n                str_list.append(word)\n    return''.join(str_list)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return str1.upper()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    w_split= str1.split()\n    w_capital = map(lambda x:x.upper(),w_split)\n    return \" \".join(w_capital)\ndef remove_punctuation(string):\n    '''\n    Write a function to remove punctuation in a given string.\n    '''\n    punct = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    for each in punct:\n        string = string.replace(each, \"\")\n    return string\ndef process_data(str1):\n    '''\n    Write a function to process a string.\n    '''\n    # remove punctuation\n    str2 = remove_punctuation(str1)\n    # convert to lower case\n    str3 = str2.lower()\n    # remove extra spaces\n    str4 = capital_words_spaces(str3)\n    # remove number\n    str5 = re.sub(r'\\d+', '', str4)\n    # clean\n    return str5\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1_lower = str1.lower()\n    for i in str1_lower:\n        if i=='a':\n            i=' '\n        elif i=='b':\n            i=' '\n        elif i=='c':\n            i=' '\n        elif i=='d':\n            i=' '\n        elif i=='e':\n            i=' '\n        elif i=='f':\n            i=' '\n        elif i=='g':\n            i=' '\n        elif i=='h':\n            i=' '\n        elif i=='i':\n            i=' '\n        elif i=='j':\n            i=' '\n        elif i=='k':\n            i=' '\n        elif i=='l':\n            i=' '\n        elif i=='m':\n            i=' '\n        elif i=='n':\n            i=' '\n        elif i=='o':\n            i=' '\n        elif i=='p':\n            i=' '\n        elif i=='q':\n            i=' '\n        elif i=='r':\n            i=' '\n        elif i=='s':\n            i=' '\n        elif i=='t':\n            i=' '\n        elif i=='u':\n            i=' '\n        elif i=='v':\n            i=' '\n        elif i=='w':\n            i=' '\n        elif i=='x':\n            i=' '\n        elif i=='y':\n            i=' '\n        elif i=='z':\n            i=' '\n    str2=str1.replace('a',' ')\n    str2=str2.replace('b',' ')\n    str2=str2.replace('c',' ')\n    str2=str2.replace('d',' ')\n    str2=str2.replace('e',' ')\n    str2=str2.replace('f',' ')\n    str2=str2.replace('g',' ')\n    str2=str2.replace('h',' ')\n    str2=str2.replace('i',' ')\n    str2=str2.replace('j',' ')\n    str2=str2.replace('k',' ')\n    str2=str2.replace('l',' ')\n    str2=str2.replace('m',' ')\n    str2=str2.replace('n',' ')\n    str2=str2.replace('o',' ')\n    str2=str2.replace('p',' ')\n    str2=str2.replace('q',' ')\n    str2=str2.replace('r',' ')\n    str2=str2.replace('s',' ')\n    str2=str2.replace('t',' ')\n    str2=str2.replace('u',' ')\n    str2=str2.replace('v',' ')\n    str2=str2.replace('w',' ')\n    str2=str2.replace('x',' ')\n    str2=str2.replace('y',' ')\n    str2=str2.replace('z',' ')\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # if str1 is empty return string\n    if str1 == '':\n        return str1\n    # if not empty return string\n    elif str1!= '':\n        return str1.upper()\n        # replace all words with first letter capital\n    str1 = str1.replace(' ',' ').replace(',','').replace('!','').replace('?','').replace('.','').replace('(','').replace(')','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+','').replace('$','').replace('&','').replace('\"','').replace(\"'\",'').replace(\"-\",'').replace(\"/\",'').replace(' ','').replace('_','').replace('`','').replace('.','').replace('*','').replace('+', "
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1_new=''\n    for i in str1:\n        if i.isupper():\n            str1_new+=' '\n        else:\n            str1_new+=i\n    return str1_new\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = sorted(nums_str)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    list_str = list(nums_str)\n    for i in range(len(nums_str)):\n        for j in range(i + 1, len(nums_str)):\n            if list_str[i] < list_str[j]:\n                temp = list_str[i]\n                list_str[i] = list_str[j]\n                list_str[j] = temp\n    return list_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [str(x) for x in nums_str]\n    nums_str = sorted(nums_str)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    a = []\n    for num in nums_str:\n        a.append(int(num))\n    a.sort()\n    for i in range(len(nums_str)):\n        nums_str[i] = a[i]\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if len(nums_str) == 0:\n        return []\n    nums_str = nums_str[::-1]\n    for i in range(len(nums_str)):\n        if nums_str[i]!='':\n            if nums_str[i]!= '.':\n                nums_str[i] = '.'\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sort_numeric_strings_by_length(nums_str):\n        l = len(nums_str)\n        for i in range(l):\n            for j in range(i, l):\n                if nums_str[i] < nums_str[j]:\n                    t = nums_str[i]\n                    nums_str[i] = nums_str[j]\n                    nums_str[j] = t\n    sort_numeric_strings_by_length(nums_str)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_list = []\n    for i in nums_str:\n        new_list.append(int(i))\n    new_list.sort()\n    new_nums = []\n    for i in new_list:\n        new_nums.append(i)\n    print(new_nums)\n    return new_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_sorted = sorted(nums_str)\n    return nums_str_sorted\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = sorted(nums_str)\n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=float)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n    \ndef is_right_aligned(seq1, seq2):\n    '''\n    Takes two DNA strings as inputs. Returns True if the\n    input strings are right-aligned, False otherwise.\n    '''\n    # if it's a string of just 1 character, it's not an\n    # alignment.\n    if len(seq1) == len(seq2):\n        # if seq1 and seq2 are the same length,\n        # they are not aligned.\n        return True\n    # if they're different lengths, there's something wrong.\n    else:\n        # add any characters from seq1 that are not included\n        # in seq2.\n        for char in seq1[:]:\n            if char not in seq2:\n                # if any characters are not in seq2,\n                # it's not an alignment.\n                return False\n    # return True if seq1 and seq2 are aligned.\n    return True\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # create a tuple with the given values\n    tuple_object = (test_list, test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # TODO: Replace pass with your code here.\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    new_tup = []\n    for i in range(len(test_list)):\n        new_tup.append(test_tup[i])\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # pass\n    \n    for item in test_tup:\n        if type(item) is not tuple:\n            item = (item, )\n        test_list.append(item)\n        \n    return test_list\n    \ndef add_tuple_2(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # pass\n    \n    for item in test_tup:\n        if type(item) is not tuple:\n            item = (item, )\n        test_list.append(item)\n    return test_list\n        \n        \ndef remove_from_list(test_list, item):\n    '''\n    Write a function to remove the given item from the given list.\n    '''\n    # pass\n    \n    for item in test_list:\n        if item == item[0]:\n            test_list.remove(item)\n            return test_list\n            \n    return test_list\n    \ndef add_to_list_2(test_list, item):\n    '''\n    Write a function to add the given item to the given list.\n    '''\n    # pass\n    \n    if item not in test_list:\n        test_list.append(item)\n        return test_list\n    \n    return test_list\n    \ndef length_of_list(test_list):\n    '''\n    Write a function to return the length of the given list.\n    '''\n    # pass\n    \n    return len(test_list)\n    \ndef count_occurence_of_item(test_list, item):\n    '''\n    Write a function to return the number of times the given item occurs in the given list.\n    '''\n    # pass\n    \n    return test_list.count(item)\n    \ndef append_item_to_end_of_list(test_list, item):\n    '''\n    Write a function to add the given item to the given list at the end of the given list.\n    '''\n    # pass\n    \n    test_list.append(item)\n    return test_list\n    \ndef remove_item_from_list(test_list, item):\n    '''\n    Write a function to remove the given item from the given list.\n    '''\n    # pass\n    \n    test_list.remove(item)\n    return test_list\n    \ndef sort_list(test_list, key = lambda x: x):\n    '''\n    Write a function to sort the given list.\n    '''\n    # pass\n    \n    test_list.sort(key = key)\n    return test_list\n    \ndef reverse_list(test_list):\n    '''\n    Write a function to reverse the given list.\n    '''\n    # pass\n    \n    test_list.reverse()\n    return test_list\n    \ndef count_occurence_of_item_2(test_list, item):\n    '''\n    Write a function to return the number of times the given item occurs in the given list.\n    '''\n    # pass\n    \n    count = 0\n    for item in test_list:\n        if item == item[0]:\n            count += 1\n    \n    return count\n    \ndef run_tests():\n    '''\n    Write a function to run all the tests.\n    '''\n    # pass\n    \n    test_list = []\n    test_tup = (1, 1)\n    test_list.append(test_tup)\n    \n    test_list = add_tuple(test_list, test_tup)\n    \n    print(test_list)\n    \n    test_list = add_tuple_2(test_list, test_tup)\n    \n    print(test_list)\n    \n    test_list = remove_from_list(test_list, 1)\n    \n    print(test_list)\n    \n    test_list = remove_from_list(test_list, 1)\n    \n    print(test_list)\n    \n    test_list = add_to_list(test_list, 1)\n    \n    print(test_list)\n    \n    test_list = add_to_list_2(test_list, 1)\n    \n    print(test_list)\n    \n    test_list = length_of_list(test_list)\n    \n    print(test_list)\n    \n    test_list = count_occurence_of_item(test_list, 1)\n    \n    print(test_list)\n    \n    test_list = append_item_to_end_of_list(test_list, 1)\n    \n    print(test_list)\n    \n    test_list = remove_item_from_list(test_list, 1)\n    \n    print(test_list)\n    \n    test_list = sort_list(test_list, key = lambda x: x)\n    \n    print(test_list)\n    \n    test_list = reverse_list(test_list)\n    \n    print(test_list)\n    \n    test_list = count_occurence_of_item_2(test_list, 1)\n    \n    print(test_list)\n    \nif __name__ == \"__main__\":\n    run_tests()"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i<len(arr)//2:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == i:\n        return True\n    if arr[i][0] < arr[0][0]:\n        return check_min_heap_helper(arr[1:], i)\n    return check_min_heap_helper(arr[1:], i - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i==1:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1: # we are at the last element\n        return True\n    else:\n        if arr[i] < arr[i + 1]:\n            return check_min_heap_helper(arr, i + 1)\n        else:\n            return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[2*i] or arr[i] > arr[2*i+1]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return arr[i] < arr[2 * i + 1] or arr[i] < arr[2 * i + 2]\n    \ndef check_min_heap_fun(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[0] < arr[1] and arr[0] < arr[2]:\n        return arr[0] < arr[2]\n    return arr[0] < arr[1]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i<0:\n        return 1\n    elif arr[i]<arr[2*i+1] and arr[i]<arr[2*i+2]:\n        return 0\n    else:\n        return check_min_heap_helper(arr, 2*i+1) or check_min_heap_helper(arr, 2*i+2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    \n    if arr[i] < arr[(i+1)//2] and arr[i] < arr[(i+1)//2+1] and arr[i] < arr[i+1]:\n        return True\n    \n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2 * i + 1] and arr[i] < arr[2 * i + 2]:\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= n:\n        return True\n    if arr[i] == -1:\n        return False\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return (n**2) - (n**3 + 4)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # Declare variables\n    x = 0\n    y = 0\n    z = 0\n    \n    # Check if the number is 0\n    if n == 0:\n        return 0\n    \n    # While there are still numbers\n    while True:\n        \n        # Check if the number is 1\n        if n % 2 == 0:\n            x += 1\n            n = n // 2\n            \n        # Check if the number is 1\n        elif n % 2 == 1:\n            y += 1\n            n = n // 2\n            \n        # Check if the number is 1\n        elif n % 2 == 1:\n            z += 1\n            n = n // 2\n            \n        # If number is not 1, there is an odd number, and the number is 1\n        elif n % 2!= 1:\n            print(str(x) + \" \" + str(y) + \" \" + str(z))\n            \n            # If there is an odd number, the number is not 1, and the number is 1\n            # If there is an even number, the number is 1, and the number is 1\n            # If there is an even number, the number is 0, and the number is 1\n            # The number is not 1, and the number is 1\n            if x == 1:\n                print(\"1\")\n            if y == 1:\n                print(\"1\")\n            if z == 1:\n                print(\"1\")\n            break\n        \n        # Check if number is 0\n        elif n == 0:\n            print(str(x) + \" \" + str(y) + \" \" + str(z))\n            \n            # If there is an even number, the number is not 1, and the number is 1\n            # If there is an odd number, the number is 0, and the number is 1\n            # The number is not 1, and the number is 1\n            if x == 1:\n                print(\"1\")\n            if y == 1:\n                print(\"1\")\n            if z == 1:\n                print(\"1\")\n            break\n        \n        # If there is an odd number, the number is not 1, and the number is 1\n        # If there is an even number, the number is 0, and the number is 1\n        # If there is an odd number, the number is 1, and the number is 1\n        # The number is not 1, and the number is 1\n        elif n % 2 == 1:\n            print(str(x) + \" \" + str(y) + \" \" + str(z))\n            \n            # If there is an odd number, the number is 0, and the number is 1\n            # If there is an even number, the number is 1, and the number is 1\n            # The number is not 1, and the number is 1\n            if x == 1:\n                print(\"1\")\n            if y == 1:\n                print(\"1\")\n            if z == 1:\n                print(\"1\")\n            break\n        \n        # If there is an even number, the number is 0, and the number is 1\n        # If there is an odd number, the number is 1, and the number is 1\n        # If there is an even number, the number is 0, and the number is 1\n        # The number is not 1, and the number is 1\n        elif n % 2 == 0:\n            print(str(x) + \" \" + str(y) + \" \" + str(z))\n            \n            # If there is an odd number, the number is 1, and the number is 1\n            # If there is an even number, the number is 0, and the number is 1\n            # The number is not 1, and the number is 1\n            if x == 1:\n                print(\"1\")\n            if y == 1:\n                print(\"1\")\n            if z == 1:\n                print(\"1\")\n            break\n        \n        # If there is an even number, the number is 1, and the number is 1\n        # If there is an odd number, the number is 0, and the number is 1\n        # The number is not 1, and the number is 1\n        elif n % 2 == 1:\n            print(str(x) + \" \" + str(y) + \" \" + str(z))\n            \n            # If there is an odd number, the number is 1, and the number is 1\n            # If there is an even number, the number is 0, and the number is 1\n            # The number is not 1, and the number is 1\n            if x == 1:\n                print(\"1\")\n            if y == 1:\n                print(\"1\")\n            if z == 1:\n                print(\"1\")\n            break\n        \n        # If there is an odd number, the number is 0, and the number is 1\n        # If there is an even number, the number is 1, and the number is 1\n        # The number is not 1, and the number is 1\n        elif n % 2 == 1:\n            print(str(x) + \" \" + str(y) + \" \" + str(z))\n            \n            # If there is an odd number, the number is 0, and the number is 1\n            # If there is an even number, the number is 1, and the number is 1\n            # The number is not 1, and the number is 1\n            if x == 1:\n                print(\"1\")\n            if y == 1:\n                print(\"1\")\n            if z == 1:\n                print(\"1\")\n            break\n        \n        # If there is an even number, the number is 0, and the number is 1\n        # If there is an odd number, the number is 1, and the number is 1\n        # The number is not 1, and the number is 1\n        elif n % 2 == 0:\n            print(str(x) + \" \" + str(y) + \" \" + str(z))\n            \n            # If there is an odd number, the number is 1, and the number is 1\n            # If there is an even number, the number is 0, and the number is 1\n            # The number is not 1, and the number is 1\n            if x == 1:\n                print(\"1\")\n            if y == 1:\n                print(\"1\")\n            if z == 1:\n                print(\"1\")\n            break\n        \n        # If there is an odd number, the number is 0, and the number is 1\n        # If there is an even number, the number is 1, and the number is 1\n        # The number is not 1, and the number is 1\n        elif n % 2 == 1:\n            print(str(x) + \" \" + str(y) + \" \" + str(z))\n            \n            # If there is an odd number, the number is 1, and the number is 1\n            # If there is an even number, the number is 0, and the number is 1\n            # The number is not 1, and the number is 1\n            if x == 1:\n                print(\"1\")\n            if y == 1:\n                print(\"1\")\n            if z == 1:\n                print(\"1\")\n            break\n        \n        # If there is an even number, the number is 1, and the number is 1\n        # If there is an odd number, the number is 0, and the number is 1\n        # The number is not 1, and the number is 1\n        elif n % 2 == 0:\n            print(str(x) + \" \" + str(y) + \" \" + str(z))\n            \n            # If there is an even number, the number is 1, and the number is 1\n            # If there is an odd number, the number is 0, and the number is 1\n            # The number is not 1, and the number is 1\n            if x == 1:\n                print(\"1\")\n            if y == 1:\n                print(\"1\")\n            if z == 1:\n                print(\"1\")\n            break\n        \n        # If there is an odd number, the number is 0, and the number is 1\n        # If there is an even number, the number is 1, and the number is 1\n        # The number is not 1, and the number is 1\n        elif n % 2 == 1:\n            print(str(x) + \" \" + str(y) + \" \" + str(z))\n            \n            # If there is an odd number, the number is 1, and the number is 1\n            # If there i"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    i = 0\n    while(i < n):\n        i = i + 1\n        if (i % 6 == 0): \n            continue\n        if (i % 6 == 1): \n            return i\n        if (i % 6 == 2): \n            return i\n        if (i % 6 == 3): \n            return i\n        if (i % 6 == 4): \n            return i\n        if (i % 6 == 5): \n            return i\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    result = []\n    #iterate from 1 to n+1\n    for i in range(1, n+1):\n        #convert to string to compare it with n\n        string_n = str(i)\n        #print(string_n)\n        #compare it with each n\n        for j in string_n:\n            #check if number is equal to n\n            if j == n:\n                #if it is add it to result\n                result.append(i)\n    return result\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        return 152\n    if n == 154:\n        return 153\n    if n == 155:\n        return 154\n    if n == 156:\n        return 155\n    if n == 157:\n        return 156\n    if n == 158:\n        return 157\n    if n == 159:\n        return 158\n    if n == 160:\n        return 159\n    if n == 161:\n        return 160\n    if n == 162:\n        return 161\n    if n == 163:\n        return 162\n    if n == 164:\n        return 163\n    if n == 165:\n        return 164\n    if n == 166:\n        return 165\n    if n == 167:\n        return 166\n    if n == 168:\n        return 167\n    if n == 169:\n        return 168\n    if n == 170:\n        return 169\n    if n == 171:\n        return 170\n    if n == 172:\n        return 171\n    if n == 173:\n        return 172\n    if n == 174:\n        return 173\n    if n == 175:\n        return 174\n    if n == 176:\n        return 17"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 9\n    elif n == 7:\n        return 11\n    elif n == 8:\n        return 13\n    elif n == 9:\n        return 19\n    elif n == 10:\n        return 21\n    elif n == 11:\n        return 23\n    elif n == 12:\n        return 29\n    elif n == 13:\n        return 31\n    elif n == 14:\n        return 37\n    elif n == 15:\n        return 41\n    elif n == 16:\n        return 47\n    elif n == 17:\n        return 51\n    elif n == 18:\n        return 57\n    elif n == 19:\n        return 61\n    elif n == 20:\n        return 67\n    elif n == 21:\n        return 71\n    elif n == 22:\n        return 73\n    elif n == 23:\n        return 79\n    elif n == 24:\n        return 83\n    elif n == 25:\n        return 89\n    elif n == 26:\n        return 97\n    elif n == 27:\n        return 101\n    elif n == 28:\n        return 103\n    elif n == 29:\n        return 105\n    elif n == 30:\n        return 107\n    elif n == 31:\n        return 111\n    elif n == 32:\n        return 123\n    elif n == 33:\n        return 131\n    elif n == 34:\n        return 137\n    elif n == 35:\n        return 141\n    elif n == 36:\n        return 147\n    elif n == 37:\n        return 151\n    elif n == 38:\n        return 157\n    elif n == 39:\n        return 161\n    elif n == 40:\n        return 163\n    elif n == 41:\n        return 169\n    elif n == 42:\n        return 173\n    elif n == 43:\n        return 179\n    elif n == 44:\n        return 181\n    elif n == 45:\n        return 187\n    elif n == 46:\n        return 191\n    elif n == 47:\n        return 193\n    elif n == 48:\n        return 199\n    elif n == 49:\n        return 201\n    elif n == 50:\n        return 203\n    elif n == 51:\n        return 205\n    elif n == 52:\n        return 207\n    elif n == 53:\n        return 211\n    elif n == 54:\n        return 213\n    elif n == 55:\n        return 219\n    elif n == 56:\n        return 221\n    elif n == 57:\n        return 223\n    elif n == 58:\n        return 229\n    elif n == 59:\n        return 231\n    elif n == 60:\n        return 233\n    elif n == 61:\n        return 239\n    elif n == 62:\n        return 241\n    elif n == 63:\n        return 243\n    elif n == 64:\n        return 249\n    elif n == 65:\n        return 251\n    elif n == 66:\n        return 253\n    elif n == 67:\n        return 255\n    elif n == 68:\n        return 257\n    elif n == 69:\n        return 261\n    elif n == 70:\n        return 263\n    elif n == 71:\n        return 269\n    elif n == 72:\n        return 271\n    elif n == 73:\n        return 277\n    elif n == 74:\n        return 281\n    elif n == 75:\n        return 283\n    elif n == 76:\n        return 289\n    elif n == 77:\n        return 291\n    elif n == 78:\n        return 293\n    elif n == 79:\n        return 299\n    elif n == 80:\n        return 301\n    elif n == 81:\n        return 303\n    elif n == 82:\n        return 307\n    elif n == 83:\n        return 311\n    elif n == 84:\n        return 313\n    elif n == 85:\n        return 317\n    elif n == 86:\n        return 319\n    elif n == 87:\n        return 321\n    elif n == 88:\n        return 323\n    elif n == 89:\n        return 327\n    elif n == 90:\n        return 331\n    elif n == 91:\n        return 333\n    elif n == 92:\n        return 339\n    elif n == 93:\n        return 341\n    elif n == 94:\n        return 343\n    elif n == 95:\n        return 349\n    elif n == 96:\n        return 351\n    elif n == 97:\n        return 353\n    elif n == 98:\n        return 359\n    elif n == 99:\n        return 361\n    elif n == 100:\n        return 363\n    elif n == 101:\n        return 357\n    elif n == 102:\n        return 361\n    elif n == 103:\n        return 365\n    elif n == 104:\n        return 367\n    elif n == 105:\n        return 371\n    elif n == 106:\n        return 373\n    elif n == 107:\n        return 379\n    elif n == 108:\n        return381\n    elif n == 109:\n        return 385\n    elif n == 110:\n        return 387\n    elif n == 111:\n        return 401\n    elif n == 112:\n        return 409\n    elif n == 113:\n        return 412\n    elif n == 114:\n        return 417\n    elif n == 115:\n        return 421\n    elif n == 116:\n        return 423\n    elif n == 117:\n        return 425\n    elif n == 118:\n        return 427\n    elif n == 119:\n        return 431\n    elif n == 120:\n        return 433\n    elif n == 121:\n        return 449\n    elif n == 122:\n        return 461\n    elif n == 123:\n        return 463\n    elif n == 124:\n        return 471\n    elif n == 125:\n        return 479\n    elif n == 126:\n        return 481\n    elif n == 127:\n        return 483\n    elif n == 128:\n        return 487\n    elif n == 129:\n        return 491\n    elif n == 130:\n        return 493\n    elif n == 131:\n        return 499\n    elif n == 132:\n        return 503\n    elif n == 133:\n        return 505\n    elif n == 134:\n        return 507\n    elif n == 135:\n        return 511\n    elif n == 136:\n        return 521\n    elif n == 137:\n        return 533\n    elif n == 138:\n        return 547\n    elif n == 139:\n        return 551\n    elif n == 140:\n        return 553\n    elif n == 141:\n        return 557\n    elif n == 142:\n        return 561\n    elif n == 143:\n        return 573\n    elif n == 144:\n        return 579\n    elif n == 145:\n        return 581\n    elif n == 146:\n        return 583\n    elif n == 147:\n        return 589\n    elif n == 148:\n        return 601\n    elif n == 149:\n        return 603\n    elif n == 150:\n        return 605\n    elif n == 151:\n        return 607\n    elif n == 152:\n        return 611\n    elif n == 153:\n        return 623\n    elif n == 154:\n        return 633\n    elif n == 155:\n        return 647\n    elif n == 156:\n        return 651\n    elif n == 157:\n        return 653\n    elif n == 158:\n        return 659\n    elif n == 15"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = n-1\n    x = 1\n    y = 1\n    while n >= 1:\n        n = n - 1\n        x = x * n\n        y = y * n\n        n = n - 1\n    return y\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n*(n-1)//2\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 2: \n        return n \n    elif n == 2 or n == 3: \n        return 1 \n    elif n == 4 or n == 5: \n        return 1 \n    elif n == 6 or n == 7: \n        return 1 \n    else: \n        return 0 \n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    l = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum_k = test_list[0]\n    i = 1\n    for k in test_list:\n        if minimum_k > k:\n            minimum_k = k\n        i += 1\n    return minimum_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Method 1: Binary Search - O(n)\n    # Find the minimum, by performing binary search in ascending order\n    # Find the minimum in ascending order - O(nlogn)\n    # O(n)\n    # O(1)\n    # O(n)\n    l = len(test_list)\n    if l == 0:\n        return 0\n    # find the min\n    def k_min_rec(min_k, l):\n        i = 0\n        # try up to n-1 records, and then down to 0\n        while i < l:\n            if test_list[i] < test_list[i+1]:\n                i += 1\n            else:\n                min_k[i] = min_k[i+1]\n                i += 1\n        # return min_k[0]\n        return test_list[i]\n    \n    # Method 2: Binary Search - O(n)\n    # Find the minimum, by performing binary search in descending order\n    # Find the minimum in descending order - O(nlogn)\n    # O(n)\n    # O(1)\n    # O(n)\n    def k_min_rec2(min_k, l):\n        i = l - 1\n        # try up to n-1 records, and then down to 0\n        while i >= 0:\n            if test_list[i] < test_list[i+1]:\n                i -= 1\n            else:\n                min_k[i] = test_list[i]\n                i -= 1\n        # return min_k[0]\n        return test_list[i+1]\n    \n    # Find the minimum, by performing binary search in ascending order\n    # Find the minimum in ascending order - O(nlogn)\n    # O(n)\n    # O(1)\n    def k_min_rec3(min_k, l):\n        i = l-1\n        # try up to n-1 records, and then down to 0\n        while i >= 0:\n            if test_list[i] < test_list[i+1]:\n                i -= 1\n            else:\n                min_k[i] = test_list[i+1]\n                i -= 1\n        # return min_k[0]\n        return test_list[i+1]\n    \n    return k_min_rec(min_k, l)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #   Elements of tuple list\n    #   k\n    #   Input: test_list = [5, 4, 3, 2, 1]\n    #   Output: 2\n    #   Assumption: k is > 0\n    '''\n    \u2022 Logic:\n       - Create a copy of the list.\n       - Convert it into a tuple.\n       - Find the minimum k.\n       - Remove the minimum k.\n       - Return the length of the copy.\n    '''\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    N = len(test_list)\n    left_bound = 0\n    right_bound = N-1\n    while left_bound <= right_bound:\n        mid = (left_bound + right_bound)//2\n        if K == test_list[mid][0] and test_list[mid][1] == test_list[mid][2]:\n            return test_list[mid]\n        if K > test_list[mid][0] and K < test_list[mid][1]:\n            left_bound = mid + 1\n        elif K > test_list[mid][1] and K < test_list[mid][2]:\n            right_bound = mid - 1\n        elif K > test_list[mid][1] and K < test_list[mid][2]:\n            right_bound = mid - 1\n        else:\n            right_bound = mid - 1\n    return None\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = []\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = 0\n    for index, item in enumerate(test_list):\n        if item[0] > minimum:\n            minimum = item[0]\n            idx = index\n    return minimum, idx\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    res = []\n    for i in range(len(test_list)):\n        res.append(test_list[i])\n    sorted(res)\n    return len(res)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return len(test_list) - K, test_list, test_list[0:K]\n    \n    \ndef time_test(func, test_list, K):\n    '''\n    Test function and find time.\n    '''\n    start_time = time.time()\n    result = func(test_list, K)\n    end_time = time.time()\n    print(f\"{func.__name__} took {end_time - start_time} seconds.\")\n    \n    \ndef find_k_records_in_list(test_list, K):\n    '''\n    Find k records in test list using a recursive DFS.\n    '''\n    # First create a queue for recursion.\n    q = []\n    # populate the queue with test cases.\n    q.append(test_list)\n    result = []\n    \n    # loop through all elements of the list.\n    while len(q)!= 0:\n        test = q.pop(0)\n        # look for the correct k element in the first test case.\n        if len(test) >= K:\n            # add the element to the result\n            result.append(test[0:K])\n            # find the k element in the second test case\n            test_second = test[0:K]\n            q.append(test_second)\n            \n    return result\n    \n    \ndef find_k_records_in_test_list(test_list, K):\n    '''\n    Find k records in test list using a recursive DFS.\n    '''\n    # First create a queue for recursion.\n    q = []\n    # populate the queue with test cases.\n    q.append(test_list)\n    result = []\n    \n    # loop through all elements of the list.\n    while len(q)!= 0:\n        test = q.pop(0)\n        # look for the correct k element in the first test case.\n        if len(test) >= K:\n            # add the element to the result\n            result.append(test[0:K])\n            # find the k element in the second test case\n            test_second = test[0:K]\n            q.append(test_second)\n            \n    return result\n    \n    \ndef test_func():\n    '''\n    Test function.\n    '''\n    print(\"Testing find_min_k() and time_test() functions.\")\n    test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\n    K = 3\n    test_list, test_list_2, test_list_3 = min_k(test_list, K)\n    print(\"Min k using recursion.\\n\")\n    print(f\"Min k recursively: {test_list_2}.\")\n    print(f\"Min k recursively: {test_list_3}.\")\n    time_test(find_k_records_in_list, test_list, K)\n    time_test(find_k_records_in_test_list, test_list, K)\n    \n    print(\"Testing find_min_k() and time_test() functions.\")\n    test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\n    K = 3\n    test_list, test_list_2, test_list_3 = min_k(test_list, K)\n    print(\"Min k using DFS.\\n\")\n    print(f\"Min k recursive: {test_list_2}.\")\n    print(f\"Min k recursive: {test_list_3}.\")\n    time_test(find_k_records_in_list, test_list, K)\n    time_test(find_k_records_in_test_list, test_list, K)\n    \n    print(\"Testing find_min_k() and time_test() functions.\")\n    test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\n    K = 3\n    test_list, test_list_2, test_list_3 = min_k(test_list, K)\n    print(\"Min k using recursive DFS.\\n\")\n    print(f\"Min k recursive: {test_list_2}.\")\n    print(f\"Min k recursive: {test_list_3}.\")\n    time_test(find_k_records_in_list, test_list, K)\n    time_test(find_k_records_in_test_list, test_list, K)\n    \n    print(\"Testing find_min_k() and time_test() functions.\")\n    test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\n    K = 3\n    test_list, test_list_2, test_list_3 = min_k(test_list, K)\n    print(\"Min k using DFS.\\n\")\n    print(f\"Min k recursive: {test_list_2}.\")\n    print(f\"Min k recursive: {test_list_3}.\")\n    time_test(find_k_records_in_list, test_list, K)\n    time_test(find_k_records_in_test_list, test_list, K)\n    \n    print(\"Testing find_min_k() and time_test() functions.\")\n    test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\n    K = 3\n    test_list, test_list_2, test_list_3 = min_k(test_list, K)\n    print(\"Min k using DFS.\\n\")\n    print(f\"Min k recursive: {test_list_2}.\")\n    print(f\"Min k recursive: {test_list_3}.\")\n    time_test(find_k_records_in_list, test_list, K)\n    time_test(find_k_records_in_test_list, test_list, K)\n    \n    print(\"Testing find_min_k() and time_test() functions.\")\n    test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\n    K = 3\n    test_list, test_list_2, test_list_3 = min_k(test_list, K)\n    print(\"Min k using DFS.\\n\")\n    print(f\"Min k recursive: {test_list_2}.\")\n    print(f\"Min k recursive: {test_list_3}.\")\n    time_test(find_k_records_in_list, test_list, K)\n    time_test(find_k_records_in_test_list, test_list, K)\n    \n    print(\"Testing find_min_k() and time_test() functions.\")\n    test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\n    K = 3\n    test_list, test_list_2, test_list_3 = min_k(test_list, K)\n    print(\"Min k using DFS.\\n\")\n    print(f\"Min k recursive: {test_list_2}.\")\n    print(f\"Min k recursive: {test_list_3}.\")\n    time_test(find_k_records_in_list, test_list, K)\n    time_test(find_k_records_in_test_list, test_list, K)\n    \n    print(\"Testing find_min_k() and time_test() functions.\")\n    test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum_records = {}\n    for i in range(len(test_list)):\n        min_rec = test_list[i]\n        minimum_records[i] = min_rec\n    minimum_k = 0\n    for i in range(len(test_list)):\n        if minimum_records[i] < K:\n            minimum_records[i] = test_list[i]\n            minimum_k += 1\n    return minimum_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K == 0:\n        return 0\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l2[j] == l3[k]:\n                    index_list.append(i)\n                    break\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if l1 and l2 and l3:\n        return common(l1[0], l2[0], l3[0])\n    return []\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    if l1 and l2 and l3:\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                for k in range(len(l3)):\n                    if l1[i] == l2[j] == l3[k]:\n                        index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    if len(l1) > 0:\n        if len(l1) == len(l2) and len(l1) == len(l3):\n            return l1 + l2 + l3\n        else:\n            return [l1[0]] + [l2[0]] + [l3[0]]\n    else:\n        return [l1[0]] + [l2[0]] + [l3[0]]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    if len(l1) < len(l2) and len(l2) < len(l3):\n        res = l1 + l2 + l3\n    else:\n        res = l1 + l3 + l2\n    return res\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indexList = []\n    for index1 in l1:\n        for index2 in l2:\n            for index3 in l3:\n                if index1 == index2 == index3:\n                    indexList.append(index1)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    \n    l4 = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] or l2[i] in l1[i] or l3[i] in l1[i] or l1[i] in l2[i]:\n            l4.append(l1[i])\n    return l4"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in l1:\n        if i in l2 and i in l3:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = [i for i in range(len(l1))]\n    index_list = []\n    # Find all the common elements\n    for i in index:\n        if(l1[i] in l2[i] and l1[i] in l3[i] and l2[i] in l3[i] and l3[i] in l1[i]):\n            index_list.append(i)\n    \n    # Remove the indices from the lists\n    for i in index_list:\n        l1.pop(i)\n        l2.pop(i)\n        l3.pop(i)\n        \n    # Return the list of the common elements\n    return(l1, l2, l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Your code here\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return common\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 1:\n        return -1\n    else:\n        return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    lowest = numbers[0]\n    second = numbers[1]\n    \n    for number in numbers:\n        if number < lowest:\n            lowest = number\n        if number < second:\n            second = number\n    return second\n    \n    \nnumbers = [4, 6, 8, 11, 13, 16, 20, 23, 24, 25, 26, 29, 34, 35, 37]\nprint(second_smallest(numbers))"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest = numbers[0]\n    for number in numbers:\n        if number > second_smallest:\n            second_smallest = number\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return\n    \n    smallest = numbers[0]\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n    return smallest\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    second_smallest = numbers[1]\n    print(\"The second smallest number is: \" + str(second_smallest))\n    \n    \ndef main():\n    numbers = [5, 2, 10, 8, 4, 7]\n    second_smallest(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_number = numbers[0]\n    smallest_index = 0\n    for index, num in enumerate(numbers):\n        if num < smallest_number:\n            smallest_number = num\n            smallest_index = index\n    return smallest_number, smallest_index\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_num = numbers[0]\n    for num in numbers:\n        if num < smallest_num:\n            smallest_num = num\n    return smallest_num\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace(\" \", \"\")\n    text_list = text.split()\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('a', 'b')\n    text = text.replace('b', 'a')\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return 'a' in text\n    '''\n    @description: \n        You can write a pattern function that looks for words in a string and returns True if they contain one of these words. For example, if the string is 'abcd', the function should return True. If it doesn't match 'abcd', the function should return False.\n    @param {*} text - text that you want to search for a pattern\n    @return {*} True - if there is one match, False - otherwise\n    '''\n    #pass\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.startswith('a'):\n        text = text[1:]\n    elif text.endswith('a'):\n        text = text[:-1]\n    elif text.endswith('b'):\n        text = text[:-1]\n    else:\n        raise ValueError('Must be a-b-c')\n    return text\ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.startswith('a'):\n        text = text[1:]\n    elif text.endswith('a'):\n        text = text[:-1]\n    elif text.endswith('b'):\n        text = text[:-1]\n    else:\n        raise ValueError('Must be a-b-c')\n    return text\ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' followed by one or more 'c' or 'd' or 'e' or 'f'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text.startswith('a'):\n        text = text[1:]\n    elif text.endswith('a'):\n        text = text[:-1]\n    elif text.endswith('b'):\n        text = text[:-1]\n    elif text.endswith('c'):\n        text = text[:-1]\n    elif text.endswith('d'):\n        text = text[:-1]\n    elif text.endswith('e'):\n        text = text[:-1]\n    elif text.endswith('f'):\n        text = text[:-1]\n    else:\n        raise ValueError('Must be a-b-c-d-e-f')\n    return text\ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q' followed by one or more 'r' followed by one or more's' followed by one or more 't' followed by one or more 'u' followed by one or more 'v' followed by one or more 'w' followed by one or more 'x' followed by one or more 'y' followed by one or more 'z' followed by one or more 'A' followed by one or more 'B' followed by one or more 'C' followed by one or more 'D' followed by one or more 'E' followed by one or more 'F' followed by one or more 'G' followed by one or more 'H' followed by one or more 'I' followed by one or more 'J' followed by one or more 'K' followed by one or more 'L' followed by one or more 'M' followed by one or more 'N' followed by one or more 'O' followed by one or more 'P' followed by one or more 'Q' followed by one or more 'R' followed by one or more 'S' followed by one or more 'T' followed by one or more 'U' followed by one or more 'V' followed by one or more 'W' followed by one or more 'X' followed by one or more 'Y' followed by one or more 'Z' followed by one or more '1' followed by a 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q' followed by one or more 'r' followed by one or more's' followed by one or more 't' followed by one or more 'u' followed by one or more 'v' followed by one or more 'w' followed by one or more 'x' followed by one or more 'y' followed by one or more 'z' followed by one or more 'A' followed by a 'b' followed by one or more 'C' followed by one or more 'D' followed by one or more 'E' followed by one or more 'F' followed by one or more 'G' followed by one or more 'H' followed by one or more 'I' followed by one or more 'J' followed by one or more 'K' followed by one or more 'L' followed by one or more 'M' followed by one or more 'N' followed by one or more 'O' followed by one or more 'P' followed by one or more 'Q' followed by one or more 'R' followed by one or more 'S' followed by one or more 'T' followed by one or more 'U' followed by one or more 'V' followed by one or more 'W' followed by one or more 'X' followed by one or more 'Y' followed by one or more 'Z' followed by one or more '1' followed by a 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q' followed by one or more 'r' followed by one or more's' followed by one or more 't' followed by one or more 'u' followed by one or more 'v' followed by one or more 'w' followed by one or more 'x' followed by one or more 'y' followed by one or more 'z' followed by one or more '1' followed by a 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q' followed by one or more 'r' followed by one or more's' followed by one or more 't' followed by one or more 'u' followed by one or more 'v' followed by one or more 'w' followed by one or more 'x' followed by one or more 'y' followed by one or more 'z' followed by one or more '1' followed by a 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q' followed by one or more 'r' followed by one or more's' followed by one or more 't' followed by one or more 'u' followed by one or more 'v' followed by one or more 'w' followed by one or more 'x' followed by one or more "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if text == \"\":\n        return \"No text provided\"\n    elif re.search(r'^a', text)!= None:\n        if text.count('a') > 1:\n            return 'There are more than one a'\n        else:\n            return 'There are no more a'\n    elif re.search(r'^b', text)!= None:\n        if text.count('b') > 1:\n            return 'There are more than one b'\n        else:\n            return 'There are no more b'\n    else:\n        return 'There is no match'\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text)\n    \n    # find all the b's\n    b_pattern = re.compile(r'(b?(a?))')\n    # find all the a's\n    a_pattern = re.compile(r'(a?(b?))')\n    \n    # remove any b's and a's\n    text = re.sub(b_pattern, '', text)\n    text = re.sub(a_pattern, '', text"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    text = re.sub(r'\\s','',text)\n    l = []\n    for word in text.split():\n        if word == '' or word.count('a') == 1 or word.count('b') == 1:\n            continue\n        l.append(word)\n    \n    return l\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a = re.search('a', text)\n    if a is None:\n        return 0\n    b = re.search('b', text)\n    if b is None:\n        return 1\n    if b.group()!= a.group():\n        return 0\n    return 1\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"-\",\"\")\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\t\",\"\")\n    text = text.replace(\"\\r\",\"\")\n    \n    if text == \"\":\n        return \"No text\"\n    elif \"a\" in text:\n        return text.split(\"a\")[0]\n    elif \"b\" in text:\n        return text.split(\"b\")[0]\n    else:\n        return \"No match\"\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    s = {}\n    count = 0\n    for i in test_list:\n        for j in range(len(i)):\n            s[i[j]] = s.get(i[j],0) + 1\n        s[i] = s.get(i,0)\n    for i in s:\n        if i in s:\n            count += s[i] * (s[i] - 1)\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Initializing an empty set\n    count = 0\n    # Traversing the string\n    for i in range(len(test_list) - 1):\n        # Checking for a pair in the reverse string\n        if test_list[i] == test_list[i+1]:\n            # Appending the count of the pair\n            count += 1\n            # Incrementing by 2\n            i += 2\n    # Returning the count\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(n^2)\n    '''\n    ** As a reference to this question, I am a driver of the  ###\n        pair-count-problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a driver of the  ###\n        count-reverse-pairs problem that I am a drive"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    str_len = len(test_list)\n    r_pairs = 0\n    for i in range(str_len):\n        for j in range(i,str_len):\n            if (test_list[i] == test_list[j]) and (i!=j):\n                r_pairs += 1\n    return r_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    num_pairs = 0\n    num_reversed = 0\n    length = len(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # you may also want to remove whitespace characters like `\\n` at the end of each line\n    test_list = test_list.replace(\" \",\"\")\n    print(test_list)\n    # split the string in to a list of words\n    words = test_list.split(\" \")\n    # create a list to store the pairs\n    pairs = []\n    # loop through each word, compare it against the list of words, and add the count to the list if the second is larger\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if words[i] == words[j] and i == j:\n                pairs.append(words[i] + \" \" + words[j] + \" \" + words[i] + \" \" + words[j])\n    print(pairs)\n    # count the pairs\n    count = 0\n    for pair in pairs:\n        if pair.endswith(\" \"):\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)-1):\n            if test_list[i] == test_list[j] and not test_list[i] == test_list[j+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # counting reverse pairs using counter\n    reverse_counter = Counter(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #initiate the counter variable\n    counter = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    counter = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for i in list1:\n        i = tuple(i)\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import defaultdict\n    subdict = defaultdict(list)\n    for sublist in list1:\n        subdict[tuple(sublist)].append(sublist.count(sublist[0]))\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Hint: you may want to use dict.fromkeys(list1) to create a dictionary from a collection\n    # return dict([(tuple(list1), dict.fromkeys(list1).count(tuple(list1))) for list1 in list1])\n    # or\n    # use collections.Counter(list1)\n    return dict([(tuple(list1), len(set(list1))) for list1 in list1])\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = {}\n    for index in range(0,len(list1)-1):\n        dictionary[(list1[index],list1[index+1])] = list1[index+1] - list1[index]\n    return dictionary\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # I defined a dictonary where each element is a tuple and its value is the number of occurencies\n    dict = {}\n    # traverse list\n    for i in range(len(list1)):\n        # append tuple to the dictionary\n        dict[tuple(list1[i])] = dict.get(tuple(list1[i]), 0) + 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    t = {}\n    for item in list1:\n        if item in t:\n            t[item]+=1\n        else:\n            t[item]=1\n    return t\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def unique_list(list1):\n        d = dict()\n        for i in list1:\n            i = (tuple(i))\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n        return d\n    \n    unique_dict = unique_list(list1)\n    return unique_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter}\n    \n    \ndef unique_sublists_2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] == 1}\n    \ndef unique_sublists_3(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_4(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_5(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_6(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_7(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_8(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_9(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_10(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_11(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_12(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_13(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_14(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_15(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_16(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_17(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_18(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique_sublists_19(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    counter = Counter(list1)\n    \n    return {k: counter[k] for k in counter if counter[k] > 1}\n    \ndef unique"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    def my_dict():\n        dict1 = {}\n        dict2 = {}\n        for i in list1:\n            if not i in dict1:\n                dict1[i] = 1\n            else:\n                dict1[i] += 1\n        for i in dict1:\n            if not i in dict2:\n                dict2[i] = dict1[i]\n            else:\n                dict2[i] += dict1[i]\n        return dict2\n    \n    return my_dict()\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    from collections import Counter\n    \n    list1 = Counter(list1)\n    \n    return dict(list1)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    n = num\n    if isinstance(num, str):\n        n = int(num)\n        if not isinstance(n, int):\n            return False\n        if n > (2 ** 15):\n            return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return '.' in str(num) and len(str(num).replace('.', '')) <= 2\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num)>1:\n        if num[0]=='0' and num[1]=='.':\n            return False\n        elif num[0]=='0' and num[1]=='0' and num[2]=='.':\n            return False\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(str(num)) > 1:\n        return False\n    if str(num)[0] in ['0','1']:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Decimal number without decimal point\n        if type(num) == float:\n            # Check for overflow\n            if num >= 1e200:\n                raise OverflowError('The given value is too large to be a decimal number.')\n            # Check for underflow\n            if num <= -1e200:\n                raise UnderflowError('The given value is too small to be a decimal number.')\n        # Decimal number with decimal point\n        else:\n            # Check for overflow\n            if num >= 1e200:\n                raise OverflowError('The given value is too large to be a decimal number.')\n            # Check for underflow\n            if num <= -1e200:\n                raise UnderflowError('The given value is too small to be a decimal number.')\n    except OverflowError:\n        return False\n    except UnderflowError:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return isinstance(num, str) and (num.isdigit() or isinstance(num, float))\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n        if len(num) == 0:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = int(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    result = re.search('\\d',num)\n    if result:\n        try:\n            num = int(num)\n            return num\n        except ValueError:\n            return False\n    else:\n        return False\n    \ndef is_same_class(a,b):\n    '''\n    Return true if the two inputs are classes of the same class, \n    else return false.\n    '''\n    if type(a)==type(b):\n        return type(a)==type(b)\n    else:\n        return False\n    "
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # we will use a dictionary and look up the value in the dictionary\n    # this will return a boolean\n    # the assumption is that the dictionary is always a unique list of values\n    # for this we will check for the value in the dictionary\n    # if value is the key we will return a boolean\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 1\n    for num in arr:\n        if num not in arr:\n            count = count + 1\n    if count == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = list(arr)\n    arr.sort()\n    if arr.count(arr[0]) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Write your code here.\n    temp = []\n    for i in arr:\n        if i not in temp:\n            temp.append(i)\n    if len(temp) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    unique = set(arr)\n    if len(unique) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        for i in range(0, len(arr)):\n            for j in range(0, i + 1):\n                if arr[i] == arr[j]:\n                    return 0\n    return 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    from collections import Counter\n    n = len(arr)\n    if n == 1:\n        return True\n    return (Counter(arr) == Counter(arr)).values()\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # write your code here\n    return len(set(arr))==1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #Your code here\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 3 or monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = monthnum3.lower()\n    if 'january' in monthnum3:\n        if monthnum3 == 'january':\n            return True\n        else:\n            return False\n    elif 'february' in monthnum3:\n        if monthnum3 == 'february':\n            return True\n        else:\n            return False\n    elif'march' in monthnum3:\n        if monthnum3 =='march':\n            return True\n        else:\n            return False\n    elif 'april' in monthnum3:\n        if monthnum3 == 'april':\n            return True\n        else:\n            return False\n    elif'may' in monthnum3:\n        if monthnum3 =='may':\n            return True\n        else:\n            return False\n    elif 'june' in monthnum3:\n        if monthnum3 == 'june':\n            return True\n        else:\n            return False\n    elif 'july' in monthnum3:\n        if monthnum3 == 'july':\n            return True\n        else:\n            return False\n    elif 'august' in monthnum3:\n        if monthnum3 == 'august':\n            return True\n        else:\n            return False\n    elif'september' in monthnum3:\n        if monthnum3 =='september':\n            return True\n        else:\n            return False\n    elif 'october' in monthnum3:\n        if monthnum3 == 'october':\n            return True\n        else:\n            return False\n    elif 'november' in monthnum3:\n        if monthnum3 == 'november':\n            return True\n        else:\n            return False\n    elif 'december' in monthnum3:\n        if monthnum3 == 'december':\n            return True\n        else:\n            return False\n    elif 'january' in monthnum3:\n        return True\n    elif 'february' in monthnum3:\n        return True\n    elif'march' in monthnum3:\n        return True\n    elif 'april' in monthnum3:\n        return True\n    elif'may' in monthnum3:\n        return True\n    elif 'june' in monthnum3:\n        return True\n    elif 'july' in monthnum3:\n        return True\n    elif 'august' in monthnum3:\n        return True\n    elif'september' in monthnum3:\n        return True\n    elif 'october' in monthnum3:\n        return True\n    elif 'november' in monthnum3:\n        return True\n    elif 'december' in monthnum3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_num=int(monthnum3)\n    if month_num>=1 and month_num<=12:\n        return True\n    else:\n        return False\ndef check_thirty(thirty):\n    '''\n    Check whether a given number is a thirty.\n    '''\n    thirty_digit=int(thirty)\n    if thirty_digit==30:\n        return True\n    else:\n        return False\ndef check_fourty(fourty):\n    '''\n    Check whether a given number is a fourty.\n    '''\n    fourty_digit=int(fourty)\n    if fourty_digit==4:\n        return True\n    else:\n        return False\ndef check_fifty(fifty):\n    '''\n    Check whether a given number is a fifty.\n    '''\n    fifty_digit=int(fifty)\n    if fifty_digit==50:\n        return True\n    else:\n        return False\ndef check_sixty(sixty):\n    '''\n    Check whether a given number is a sixty.\n    '''\n    sixty_digit=int(sixty)\n    if sixty_digit==60:\n        return True\n    else:\n        return False\ndef check_seventy(seventy):\n    '''\n    Check whether a given number is a seventy.\n    '''\n    seventy_digit=int(seventy)\n    if seventy_digit==70:\n        return True\n    else:\n        return False\ndef check_twenty(twenty):\n    '''\n    Check whether a given number is a twenty.\n    '''\n    twenty_digit=int(twenty)\n    if twenty_digit==20:\n        return True\n    else:\n        return False\ndef check_fifty_seventy(fifty_seventy):\n    '''\n    Check whether a given number is a fifty_seventy.\n    '''\n    fifty_seventy_digit=int(fifty_seventy)\n    if fifty_seventy_digit==40:\n        return True\n    else:\n        return False\ndef check_twenty_seventy(twenty_seventy):\n    '''\n    Check whether a given number is a twenty_seventy.\n    '''\n    twenty_seventy_digit=int(twenty_seventy)\n    if twenty_seventy_digit==60:\n        return True\n    else:\n        return False\ndef check_fifty_twenty(fifty_twenty):\n    '''\n    Check whether a given number is a fifty_twenty.\n    '''\n    fifty_twenty_digit=int(fifty_twenty)\n    if fifty_twenty_digit==80:\n        return True\n    else:\n        return False\ndef check_twenty_fifty(twenty_fifty):\n    '''\n    Check whether a given number is a twenty_fifty.\n    '''\n    twenty_fifty_digit=int(twenty_fifty)\n    if twenty_fifty_digit==100:\n        return True\n    else:\n        return False\ndef check_thirty_twenty(thirty_twenty):\n    '''\n    Check whether a given number is a thirty_twenty.\n    '''\n    thirty_twenty_digit=int(thirty_twenty)\n    if thirty_twenty_digit==200:\n        return True\n    else:\n        return False\ndef check_fourty_twenty(fourty_twenty):\n    '''\n    Check whether a given number is a fourty_twenty.\n    '''\n    fourty_twenty_digit=int(fourty_twenty)\n    if fourty_twenty_digit==400:\n        return True\n    else:\n        return False\ndef check_fifty_thirty(fifty_thirty):\n    '''\n    Check whether a given number is a fifty_thirty.\n    '''\n    fifty_thirty_digit=int(fifty_thirty)\n    if fifty_thirty_digit==420:\n        return True\n    else:\n        return False\ndef check_twenty_fourty(twenty_fourty):\n    '''\n    Check whether a given number is a twenty_fourty.\n    '''\n    twenty_fourty_digit=int(twenty_fourty)\n    if twenty_fourty_digit==600:\n        return True\n    else:\n        return False\ndef check_fifty_twenty_fourty(fifty_twenty_fourty):\n    '''\n    Check whether a given number is a fifty_twenty_fourty.\n    '''\n    fifty_twenty_fourty_digit=int(fifty_twenty_fourty)\n    if fifty_twenty_fourty_digit==800:\n        return True\n    else:\n        return False\ndef check_twenty_fifty_fourty(twenty_fifty_fourty):\n    '''\n    Check whether a given number is a twenty_fifty_fourty.\n    '''\n    twenty_fifty_fourty_digit=int(twenty_fifty_fourty)\n    if twenty_fifty_fourty_digit==1000:\n        return True\n    else:\n        return False\ndef check_thirty_twenty_fourty(thirty_twenty_fourty):\n    '''\n    Check whether a given number is a thirty_twenty_fourty.\n    '''\n    thirty_twenty_fourty_digit=int(thirty_twenty_fourty)\n    if thirty_twenty_fourty_digit==2000:\n        return True\n    else:\n        return False\ndef check_fourty_thirty_twenty(fourty_thirty_fourty):\n    '''\n    Check whether a given number is a fourty_thirty_fourty.\n    '''\n    fourty_thirty_fourty_digit=int(fourty_thirty_fourty)\n    if fourty_thirty_fourty_digit==4000:\n        return True\n    else:\n        return False\ndef check_fifty_twenty_fourty(fifty_twenty_fourty):\n    '''\n    Check whether a given number is a fifty_twenty_fourty.\n    '''\n    fifty_twenty_fourty_digit=int(fifty_twenty_fourty)\n    if fifty_twenty_fourty_digit==4200:\n        return True\n    else:\n        return False\ndef check_twenty_fifty_fourty(twenty_fifty_fourty):\n    '''\n    Check whether a given number is a twenty_fifty_fourty.\n    '''\n    twenty_fifty_fourty_digit=int(twenty_fifty_fourty)\n    if twenty_fifty_fourty_digit==4200:\n        return True\n    else:\n        return False\ndef check_fifty_thirty_twenty(fifty_thirty_twenty):\n    '''\n    Check whether a given number is a fifty_thirty_twenty.\n    '''\n    fifty_thirty_twenty_digit=int(fifty_thirty_twenty)\n    if fifty_thirty_twenty_digit==4220:\n        return True\n    else:\n        return False\ndef check_twenty_fifty_thirty(twenty_fifty_thirty):\n    '''\n    Check whether a given number is a twenty_fifty_thirty.\n    '''\n    twenty_fifty_thirty_digit=int(twenty_fifty_thirty)\n    if twenty_fifty_thirty_digit==4220:\n        return True\n    else:\n        return False\ndef check_fifty_twenty_thirty(fifty_twenty_twenty):\n    '''\n    Check whether a given number is a fifty_twenty_thirty.\n    '''\n    fifty_twenty_twenty_digit=int(fifty_twenty_twenty)\n    if fifty_twenty_twenty_digit==4220:\n        return True\n    else:\n        return False\ndef check_thirty_fifty_thirty(thirty_fifty_thirty):\n    '''\n    Check whether a given number is a thirty_"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==30:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1:\n        return 'January'\n    elif monthnum3==2:\n        return 'February'\n    elif monthnum3==3:\n        return 'March'\n    elif monthnum3==4:\n        return 'April'\n    elif monthnum3==5:\n        return 'May'\n    elif monthnum3==6:\n        return 'June'\n    elif monthnum3==7:\n        return 'July'\n    elif monthnum3==8:\n        return 'August'\n    elif monthnum3==9:\n        return 'September'\n    elif monthnum3==10:\n        return 'October'\n    elif monthnum3==11:\n        return 'November'\n    elif monthnum3==12:\n        return 'December'\n    else:\n        return 'Wrong input!'\n    # raise NotImplementedError('To check whether the month number is 30 days, use check_monthnumber_number(input)')\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return False\n    elif monthnum3 in range(1,13):\n        return True\n    else:\n        return False\n    \ndef check_daynumber_number(daynum3):\n    '''\n    Write a function to check whether the given day number contains 7 days or not. Day numbers are given as number from 1 to 31.\n    '''\n    if daynum3 == 1:\n        return False\n    elif daynum3 in range(1,32):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    check = False\n    for x in monthnum3:\n        if x >= 0:\n            check = True\n            break\n    return check\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return 'Invalid input'\n    elif monthnum3!= 13:\n        return 'Invalid input'\n    elif (monthnum3 == 13) or (monthnum3 == 1) or (monthnum3 == 2):\n        return 'Valid input'\n    else:\n        if monthnum3 in range(1,13):\n            return 'Valid input'\n        else:\n            return 'Invalid input'\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 == 1:\n            return True\n        elif monthnum3 == 2:\n            return True\n        elif monthnum3 == 3:\n            return True\n        elif monthnum3 == 4:\n            return True\n        elif monthnum3 == 5:\n            return True\n        elif monthnum3 == 6:\n            return True\n        elif monthnum3 == 7:\n            return True\n        elif monthnum3 == 8:\n            return True\n        elif monthnum3 == 9:\n            return True\n        elif monthnum3 == 10:\n            return True\n        elif monthnum3 == 11:\n            return True\n        elif monthnum3 == 12:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == \"1\":\n        if daynumber3 == 30:\n            return \"Day number is 30.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"2\":\n        if daynumber3 == 31:\n            return \"Day number is 31.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"3\":\n        if daynumber3 == 30:\n            return \"Day number is 30.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"4\":\n        if daynumber3 == 31:\n            return \"Day number is 31.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"5\":\n        if daynumber3 == 30:\n            return \"Day number is 30.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"6\":\n        if daynumber3 == 31:\n            return \"Day number is 31.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"7\":\n        if daynumber3 == 30:\n            return \"Day number is 30.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"8\":\n        if daynumber3 == 31:\n            return \"Day number is 31.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"9\":\n        if daynumber3 == 30:\n            return \"Day number is 30.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"10\":\n        if daynumber3 == 31:\n            return \"Day number is 31.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"11\":\n        if daynumber3 == 30:\n            return \"Day number is 30.\"\n        else:\n            return \"No day number.\"\n    elif monthnum3 == \"12\":\n        if daynumber3 == 31:\n            return \"Day number is 31.\"\n        else:\n            return \"No day number.\"\n    else:\n        return \"The given month number doesn't exist.\"\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # The index is the smallest value, and we store the current value to compare to the next value in the array\n    current_min = 0\n    next_min = 0\n    # Find the next smallest value, and we increment the current index \n    for i in range(n-1):\n        current_min = min(arr[i], arr[i+1], key=abs)\n        next_min = max(arr[i], arr[i+1], key=abs)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    minimum = arr[0]\n    for i in range(1,n):\n        minimum = min(arr[i], minimum)\n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    left_min = min(arr[0:n//2])\n    right_min = min(arr[n//2:])\n    return (left_min - right_min)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min = 0\n    arr.sort()\n    for i in range(n):\n        if arr[i] - arr[i+1] < min:\n            min = arr[i] - arr[i+1]\n    return min\n    \nn = int(input(\"Enter the size of array: \"))\narr = []\nfor i in range(n):\n    x = int(input())\n    arr.append(x)\nprint(find_min_diff(arr,n)"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            diff = arr[i]-arr[j]\n            if(diff<0):\n                diff = 0\n                break\n    return diff\n    \n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(2, n):\n        min_diff = min(min_diff, arr[i]-arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # To calculate min_diff\n    min_diff = arr[0] - arr[1]\n    # Start at 0\n    i = 1\n    # While loop to find the next min diff\n    # that is greater than the previous min diff\n    while i < n:\n        # check if the current element has the min diff\n        if arr[i] < arr[i - 1]:\n            min_diff = arr[i] - arr[i - 1]\n        # update the current min diff\n        else:\n            min_diff = arr[i] - arr[i - 1]\n        i += 1\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) < abs(arr[i] - arr[j]):\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1: return arr[0]\n    min_diff = arr[0]\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    j = 0\n    i = 0\n    temp_diff = arr[0] - arr[1]\n    while(i < len(arr) - 1):\n        j = i + 1\n        while (j < len(arr)):\n            if temp_diff > arr[j] - arr[i]:\n                temp_diff = arr[j] - arr[i]\n            j += 1\n        temp_diff = arr[i] - arr[j]\n        i += 1\n    return temp_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    import re\n    digits = re.findall('\\d', str)\n    return len(digits)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for char in str:\n        if char.isdigit():\n            digits += 1\n    return digits\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    for i in str:\n        if i.isdigit():\n            digits += 1\n    return digits\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    i = 0\n    for i in range(len(str)):\n        if(str[i]=='0'):\n            i=i+1\n        else:\n            break\n    if(i==len(str)):\n        print(\"Number of digits are zero.\")\n    else:\n        print(\"Number of digits are\",i)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr=ctr+1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    #returns the number of digits in a given string\n    cnt = 0\n    # create a list of digits\n    digits = []\n    # create a list of strings\n    str = str.split()\n    # iterate over the string\n    for num in str:\n        # if a number is digits, add to the cnt\n        if num.isdigit():\n            cnt += 1\n            # if it's a number, add it to the list\n            if num.isdigit():\n                digits.append(num)\n    # return the cnt\n    return cnt, digits\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    def ctr_digits(str):\n        return sum(int(x) for x in str if x.isdigit())\n    return ctr_digits(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 1\n    # if the number is even \n    if (n % 2 == 0):\n        # return the nth non-polar number\n        return is_polite(n - 1)\n    # if the number is odd\n    else:\n        # return the nth non-polar number\n        return (is_polite(n - 1) + is_polite(n - 2)) % 3\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n>1):\n        return n%10==1 and is_polite(n//10) and is_polite(n//10*10)\n    else:\n        return n==0\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + 1\n    else:\n        return n - 1\ndef get_3D_eulerian_path_from_2D(path_list):\n    '''\n    Write a function that returns the three-dimensional path from point A to point B. \n    A, B, C are the two points that are located on the plane of the path. \n    The path is represented as a list of lists, where each list contains the segment of the path from A to B. \n    The segment of A contains the one-dimensional arrays of the segment of B that are passed as parameters, \n    the point B lies at each vertex of the segment of A, and the point C lies at the end of the segment of A. \n    '''\n    if len(path_list)!= 3:\n        print(\"Invalid path list.\")\n        return None\n    else:\n        for n in range(0, len(path_list) - 1):\n            curr_coords = [path_list[n][0], path_list[n][1], path_list[n+1][0]]\n            new_coords = [path_list[n][0], path_list[n][1], path_list[n+1][1]]\n            if curr_coords[0]!= new_coords[0]:\n                return None\n        return path_list\ndef get_line_segments_from_2D(A, B):\n    '''\n    Write a function that takes the two points of an equation and returns the list of all \n    segments of the equation between them.\n    Note: A and B must not be the same point.\n    '''\n    line_segments = []\n    x1, y1 = A\n    x2, y2 = B\n    # if x1!= x2:\n    #     print(\"A must not be the same point.\")\n    #     return None\n    # if y1!= y2:\n    #     print(\"B must not be the same point.\")\n    #     return None\n    if y1!= y2:\n        line_segments.append([[x1, y1], [x2, y2]])\n        # line_segments.append([[x1, y1], [x2, y2]])\n    else:\n        line_segments.append([[x1, y1], [x1, y2]])\n        # line_segments.append([[x1, y1], [x2, y2]])\n    # else:\n    #     line_segments.append([[x1, y1], [x2, y2]])\n    return line_segments\ndef get_line_segments_from_3D(A, B, C):\n    '''\n    Write a function that takes the three points of an equation and returns the list of all \n    segments of the equation between them.\n    Note: A, B and C must not be the same point.\n    '''\n    line_segments = []\n    x1, y1 = A\n    x2, y2 = B\n    x3, y3 = C\n    if x1!= x2:\n        line_segments.append([[x1, y1], [x2, y2], [x3, y3]])\n    else:\n        line_segments.append([[x1, y1], [x1, y2], [x2, y2], [x3, y3]])\n    # line_segments.append([[x1, y1], [x2, y2], [x3, y3]])\n    return line_segments\ndef get_poly_segments(A, B, C, D):\n    '''\n    Write a function that returns the list of all segments of a polygon given its three points. \n    A, B, C and D must not be the same point.\n    Note: A, B and C must not be the same point.\n    '''\n    poly_segments = []\n    x1, y1 = A\n    x2, y2 = B\n    x3, y3 = C\n    x4, y4 = D\n    # if x1!= x2:\n    #     print(\"A must not be the same point.\")\n    #     return None\n    # if y1!= y2:\n    #     print(\"B must not be the same point.\")\n    #     return None\n    if x1!= x2:\n        poly_segments.append([[x1, y1], [x2, y2], [x3, y3], [x4, y4]])\n    else:\n        poly_segments.append([[x1, y1], [x1, y2], [x2, y2], [x3, y3], [x4, y4]])\n    # poly_segments.append([[x1, y1], [x2, y2], [x3, y3], [x4, y4]])\n    return poly_segments\ndef get_intersect_lines(line_segments):\n    '''\n    Find the intersection of all line segments given in line_segments. \n    '''\n    # intersect_line_segments = []\n    intersect_line_segments = []\n    for line_segment in line_segments:\n        if get_segment_intersection(line_segment) is not None:\n            intersect_line_segments.append(line_segment)\n    # return intersect_line_segments\n    return intersect_line_segments\ndef get_segment_intersection(segment_segments):\n    '''\n    Find the intersection of all the segments of the line. \n    '''\n    intersect_segment = None\n    # print(segment_segments)\n    for segment in segment_segments:\n        if intersect_segment is None:\n            intersect_segment = segment\n        elif segment_segments.count(segment) > 1:\n            return None\n    return intersect_segment\ndef get_3D_eulerian_path_from_line_segments(line_segments):\n    '''\n    Create an eulerian path between the point B and point A. \n    '''\n    # print(len(line_segments))\n    # print(len(line_segments[0]))\n    # print(len(line_segments[0][0]))\n    # print(len(line_segments[0][0][0]))\n    path_list = []\n    for segment in line_segments:\n        path_list.append(get_3D_eulerian_path_from_2D(segment))\n    return path_list\ndef get_3D_eulerian_path_from_line_segments_kdt(line_segments):\n    '''\n    Create an eulerian path between the point B and point A. \n    '''\n    path_list = []\n    line_segment = get_line_segments_from_line_segments(line_segments)\n    if len(line_segments)!= len(line_segment):\n        return None\n    else:\n        for n in range(len(line_segments)):\n            if len(line_segments[n]) == 3:\n                curr_segment = line_segments[n]\n                x1, y1 = curr_segment[0]\n                x2, y2 = curr_segment[1]\n                x3, y3 = curr_segment[2]\n                path_list.append(get_3D_eulerian_path_from_2D([x1, y1, x2, y2, x3, y3]))\n            else:\n                curr_segment = line_segments[n]\n                # print(len(curr_segment))\n                # print(len(curr_segment[0]))\n                # print(len(curr_segment[0][0]))\n                # print(len(curr_segment[0][0][0]))\n                # print(len(curr_segment[0][0][0][0]))\n                path_list.append(get_3D_eulerian_path_fro"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return math.factorial(n) / math.factorial(n - 1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x = math.sqrt(n)\n    if x == int(x):\n        print(\"nth polite number:\", n)\n        return n\n    else:\n        print(\"nth polite number is not polite number!\")\n        exit()\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 0\n    else:\n        return math.ceil(n/2)*(n%2 == 1) + (n%2 == 0)\n    \ndef find_nth_polite(n,p,k):\n    '''\n    Compute nth polite number using given base and power. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if k == 0:\n        return 0\n    if n == 0:\n        return 0\n    elif p == 1:\n        return (math.ceil((n-1)/(2*k))*(n%2 == 1) + (n%2 == 0))\n    elif n == 1:\n        return (math.ceil((n-1)/(2*k))*(n%2 == 1) + (n%2 == 0)) + (math.ceil((n-1)/(2*k))*(n%2 == 1))\n    elif n == 2:\n        return (((n-1)/(2*k))*(n%2 == 1) + (n%2 == 0)) + (math.ceil((n-1)/(2*k))*(n%2 == 1) + (n%2 == 0))\n    else:\n        return (n//2)*(math.ceil((n-1)/(2*k))*(n%2 == 1) + (n%2 == 0)) + (n//2)*(math.ceil((n-1)/(2*k))*(n%2 == 1) + (n%2 == 0)) + (math.ceil((n-1)/(2*k))*(n%2 == 1) + (n%2 == 0))\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # sum = 0\n    # for i in range(1,n+1):\n    #     sum += i\n    #     if sum == n:\n    #         return i\n    # return None\n    return n\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    for i in range(n + 1):\n        if i % 3 == 0:\n            print(\"polite number\", i)\n    return n \ndef is_happy(n):\n    '''\n    Write a function to find nth happy number. geeksforgeeks.org/n-th-happy-number/\n    '''\n    for i in range(n + 1):\n        if i % 3 == 0:\n            print(\"happy number\", i)\n    return n \ndef is_happy(n):\n    '''\n    Write a function to check whether a number is happy number or not. geeksforgeeks.org/is-happy-number/\n    '''\n    if n < 0:\n        return False\n    if n % 3 == 0:\n        return False\n    else:\n        return True\ndef is_perfect(n):\n    '''\n    Write a function to check whether a number is perfect number or not. geeksforgeeks.org/is-perfect-number/\n    '''\n    return n % 5 == 0\ndef is_solution(n):\n    '''\n    Write a function to check whether a number is solution or not. geeksforgeeks.org/is-solution-number/\n    '''\n    if n % 5 == 0:\n        print(\"solution\")\n        return True\n    else:\n        return False\ndef find_factors(n):\n    '''\n    Write a function to find factors of a number n. geeksforgeeks.org/find-factors-n/\n    '''\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a function to check whether a number is a prime or not. geeksforgeeks.org/is-prime-number/\n    '''\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_factors(n):\n    '''\n    Write a function to check if a number is a prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0 and n % 3 == 0:\n        return True\n    return False\ndef is_prime_divisible_by_three(n):\n    '''\n    Write a function to check whether a number is a prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0 and n % 3 == 0:\n        return True\n    return False\ndef is_prime_divisible_by_five(n):\n    '''\n    Write a function to check whether a number is a prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0 and n % 5 == 0:\n        return True\n    return False\ndef is_not_prime(n):\n    '''\n    Write a function to check whether a number is not a prime number or not. geeksforgeeks.org/is-not-prime-number/\n    '''\n    if n % 2 == 0 and n % 5 == 0:\n        return True\n    return False\ndef is_prime_prime(n):\n    '''\n    Write a function to check whether a number is a prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0 and n % 5 == 0:\n        return True\n    return False\ndef is_prime_factors(n):\n    '''\n    Write a function to check if a number is a prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0 and n % 5 == 0:\n        return True\n    return False\ndef is_prime_n(n):\n    '''\n    Write a function to check whether a number is prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0 and n % 5 == 0:\n        return True\n    return False\ndef is_prime_greater(n):\n    '''\n    Write a function to check whether a number is prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0 and n % 5 == 0:\n        return True\n    return False\ndef is_prime_greater_than_n(n):\n    '''\n    Write a function to check whether a number is prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0 and n % 5 == 0:\n        return True\n    return False\ndef is_prime_divisible_by_three(n):\n    '''\n    Write a function to check whether a number is prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0 and n % 3 == 0:\n        return True\n    return False\ndef is_prime_divisible_by_five(n):\n    '''\n    Write a function to check whether a number is prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0 and n % 5 == 0:\n        return True\n    return False\ndef is_odd(n):\n    '''\n    Write a function to check whether a number is odd number or not. geeksforgeeks.org/is-odd-number/\n    '''\n    if n % 2 == 1:\n        return True\n    return False\ndef is_even(n):\n    '''\n    Write a function to check whether a number is even number or not. geeksforgeeks.org/is-even-number/\n    '''\n    if n % 2 == 0:\n        return True\n    return False\ndef find_factors_factorial(n):\n    '''\n    Write a function to find factors of a number. geeksforgeeks.org/find-factors-factorial/\n    '''\n    factors = []\n    for i in range(1, n + 1):\n        factors.append(i)\n    return factors\ndef find_factors_divisors(n):\n    '''\n    Write a function to find factors of a number. geeksforgeeks.org/find-factors-divisors/\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\ndef is_even(n):\n    '''\n    Write a function to check whether a number is even number or not. geeksforgeeks.org/is-even-number/\n    '''\n    if n % 2 == 0:\n        return True\n    return False\ndef is_odd(n):\n    '''\n    Write a function to check whether a number is odd number or not. geeksforgeeks.org/is-odd-number/\n    '''\n    if n % 2 == 0:\n        return True\n    return False\ndef is_prime_divisible_by_five(n):\n    '''\n    Write a function to check whether a number is prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 5 == 0:\n        return True\n    return False\ndef is_prime_divisible_by_three(n):\n    '''\n    Write a function to check whether a number is prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 3 == 0:\n        return True\n    return False\ndef is_prime_divisible_by_two(n):\n    '''\n    Write a function to check whether a number is prime number or not. geeksforgeeks.org/is-prime-factors-n/\n    '''\n    if n % 2 == 0:\n        return True\n    return False\ndef is_prime_divisible_by_one(n):\n    '''\n    Write a function to check whether a number is prime number or no"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    g=int(math.sqrt(n))\n    if(g==1): return n\n    else: return is_polite(n//g) + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # n = 1\n    # nth_polite_num = 0\n    # for i in range(1, n):\n    #     nth_polite_num += 1\n    #     print(\"nth_polite_num : \", nth_polite_num)\n    #     print(\"i : \", i)\n    #     print(\"f : \", math.factorial(i))\n    #     print(\"p : \", math.pi)\n    #     print()\n    #     print(\"f : \", math.factorial(i))\n    #     print(\"p : \", math.pi)\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i = 0\n    pairs = []\n    while i < len(l1):\n        j = i + 1\n        while j < len(l1):\n            if l1[i] == l1[j]:\n                pairs.append((l1[i],l1[j]))\n            j += 1\n        i += 1\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return []\n    else:\n        first_item = l1[0]\n        last_item = l1[len(l1)-1]\n        result = []\n        for item in l1:\n            if item < first_item:\n                result.append((item,first_item))\n            elif item > last_item:\n                result.append((item,last_item))\n            else:\n                pass\n        return result\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 1:\n        return []\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            if (l1[i] == l1[j]):\n                pairs.append((l1[i], l1[j]))\n            elif (l1[i] > l1[j]):\n                break\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,x) for x in l1 if x>0]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2: return []\n    pairs = []\n    i = 0\n    while i < len(l1):\n        j = i\n        while j < len(l1):\n            if l1[i]!= l1[j]:\n                break\n            j += 1\n        if j > i + 1:\n            pairs.append([l1[i], l1[j - 1]])\n        i = j\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    '''\n    For example, if l1 = [1,2,3,4,5,6,7,8,9,10], then the output should be [ [1,2], [3,4], [5,6], [7,8], [9,10] ]\n    '''\n    '''\n    Problem: \n    Write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Solution:\n    Using dict comprehension, write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Problem:\n    Write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Solution:\n    Using list comprehension, write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Problem:\n    Write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Solution:\n    Using list comprehension, write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Problem:\n    Write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Solution:\n    Using list comprehension, write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Problem:\n    Write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Solution:\n    Using list comprehension, write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Problem:\n    Write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Solution:\n    Using list comprehension, write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Problem:\n    Write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Solution:\n    Using list comprehension, write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Problem:\n    Write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Solution:\n    Using list comprehension, write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Solution:\n    Using list comprehension, write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Problem:\n    Write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ [1,2], [1,3], [2,3] ]\n    '''\n    '''\n    Solution:\n    Using list comprehension, write a function that takes in a list of non-negative integers and returns a list of pairs of consecutive integers that each appear exactly once.\n    '''\n    '''\n    Example:\n    pair_wise([1,1,1,2,2,2,3,3,3,3,3]) should return [ ["
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(0,len(l1)):\n        for j in range(i+1,len(l1)):\n            l2.append([l1[i],l1[j]])\n    return l2\n    \ndef pair_wise_no_list(l):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    The given list is assumed to be sorted.\n    '''\n    l2 = []\n    for i in range(0,len(l)):\n        for j in range(i+1,len(l)):\n            l2.append([l[i],l[j]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [[x[0], x[1]] for x in l1]\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i] + arr[j] == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    pairs_count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if sum == arr[i] + arr[j]:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n        if total == sum:\n            return(i+1)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]+arr[j] == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    if sum == 0:\n        return count\n    for num in arr:\n        if num + sum == sum:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return len(arr) - (sum % 2)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum == arr[i] + arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(arr[i] + arr[j] == sum):\n                if(i!= j):\n                    if(arr[i] not in pairs):\n                        pairs.append(arr[i])\n                    if(arr[j] not in pairs):\n                        pairs.append(arr[j])\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # get the length of the array\n    size = len(arr)\n    \n    # looping through the array\n    for i in range(size):\n        # sum of two numbers\n        sum = sum - arr[i]\n        # compare the sum with the sum of the next pair\n        if sum == sum:\n            # if yes, add 1\n            print(i+1)\n    return (size - 1)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    #print(li1)\n    #print(li2)\n    for i in range(len(li1)):\n        diff.append(li1[i] - li2[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)==0:\n        return 0\n    if len(li2)==0:\n        return 0\n    d1=0\n    d2=0\n    for i in range(0,len(li1)):\n        d1=d1+abs(li1[i]-li2[i])\n    for j in range(0,len(li2)):\n        d2=d2+abs(li2[j]-li1[j])\n    return d1-d2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    li1.sort()\n    li2.sort()\n    \n    if li1 == li2:\n        return 0\n    else:\n        return 1\n        \n        \n    \n    "
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1=[]\n    l2=[]\n    for i in li1:\n        l1.append(i)\n    for i in li2:\n        l2.append(i)\n    res=[]\n    l1.sort()\n    l2.sort()\n    for i in range(len(l1)):\n        if l1[i]!=l2[i]:\n            res.append(l1[i])\n    return res\n    "
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    temp = []\n    for i in li1:\n        temp.append(i-li2.pop(0))\n    return temp\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef sub1(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef sub2(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef sub3(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef get_diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef sind(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef dif1(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef dif2(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef dif3(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef dif4(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef dif5(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff=[]\n    for i in range(len(li1)):\n        li_diff.append(li1[i]-li2[i])\n    return li_diff\ndef max1(li1,li2):\n    '''\n    Write a python function to get the maximum of two lists.\n    '''\n    li_max=[]\n    for i in range(len(li1)):\n        if li1[i]>li2[i]:\n            li_max.append(li1[i])\n        else:\n            li_max.append(li2[i])\n    return li_max\ndef max2(li1,li2):\n    '''\n    Write a python function to get the maximum of two lists.\n    '''\n    li_max=[]\n    for i in range(len(li1)):\n        if li1[i]>li2[i]:\n            li_max.append(li1[i])\n        else:\n            li_max.append(li2[i])\n    return li_max\ndef min1(li1,li2):\n    '''\n    Write a python function to get the minimum of two lists.\n    '''\n    li_min=[]\n    for i in range(len(li1)):\n        if li1[i]<li2[i]:\n            li_min.append(li1[i])\n        else:\n            li_min.append(li2[i])\n    return li_min\ndef min2(li1,li2):\n    '''\n    Write a python function to get the minimum of two lists.\n    '''\n    li_min=[]\n    for i in range(len(li1)):\n        if li1[i]<li2[i]:\n            li_min.append(li1[i])\n        else:\n            li_min.append(li2[i])\n    return li_min\ndef min3(li1,li2):\n    '''\n    Write a python function to get the minimum of two lists.\n    '''\n    li_min=[]\n    for i in range(len(li1)):\n        if li1[i]<li2[i]:\n            li_min.append(li1[i])\n        else:\n            li_min.append(li2[i])\n    return li_min\ndef min4(li1,li2):\n    '''\n    Write a python function to get the minimum of two lists.\n    '''\n    li_min=[]\n    for i in range(len(li1)):\n        if li1[i]<li2[i]:\n            li_min.append(li1[i])\n        else:\n            li_min.append(li2[i])\n    return li_min\ndef mean1(li1,li2):\n    '''\n    Write a python function to get the mean of two lists.\n    '''\n    li_mean=[]\n    for i in range(len(li1)):\n        if li1[i]>li2[i]:\n            li_mean.append(li1[i])\n        else:\n            li_mean.append(li2[i])\n    return li_mean\ndef mean2(li1,li2):\n    '''\n    Write a python function to get the mean of two lists.\n    '''\n    li_mean=[]\n    for i in range(len(li1)):\n        if li1[i]>li2[i]:\n            li_mean.append(li1[i])\n        else:\n            li_mean.append(li2[i])\n    return li_mean\ndef mean3(li1,li2):\n    '''\n    Write a python function to get the mean of two lists.\n    '''\n    li_mean=[]\n    for i in range(len(li1)):\n        if li1[i]>li2[i]:\n            li_mean.append(li1[i])\n        else:\n            li_mean.append(li2[i])\n    return li_mean\ndef mean4(li1,li2):\n    '''\n    Write a python function to get the mean of two lists.\n    '''\n    li_mean=[]\n    for i in range(len(li1)):\n        if li1[i]>li2[i]:\n            li_mean.append(li1[i])\n        else:\n            li_mean.append(li2[i])\n    return li_mean\ndef mean5(li1,li2):\n    '''\n    Write a python function to get the mean of two lists.\n    '''\n    li_mean=[]\n    for i in range(len(li1)):\n        if li1[i]>li2[i]:\n            li_mean.append(li1[i])\n        else:\n            li_mean.append(li2[i])\n    return li_mean\ndef mean6(li1,li2):\n    '''\n    Write a python function to get the mean of two lists.\n    '''\n    li_mean=[]\n    for i in range(len(li1)):\n        if li1[i]>li"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    d = []\n    for i in range(len(li1)):\n        d.append(li1[i]-li2[i])\n    return d\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res = []\n    for i in range(len(li1)):\n        if li2[i]!= li1[i]:\n            res.append(li2[i])\n    return res\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff.append(li1[i])\n    return diff\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        if(i % 2) :\n            sum += (i**3)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    power = 0\n    for i in range(n):\n        if i % 2 == 1:\n            power = power + (i ** 4)\n    return power\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    elif n % 2 == 0 : \n        return odd_num_sum(n - 1) + n**2\n    else : \n        return odd_num_sum(n - 1)**3 + odd_num_sum(n - 2)**3\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums=[]\n    for i in range(0,n):\n        if i%2==0:\n            nums=[2,3,5,7,9,11]\n            for j in nums:\n                if j==4:\n                    nums.remove(j)\n            if len(nums)==0:\n                return 0\n            else:\n                nums.append(i)\n                nums.append(i**2)\n                nums.append(i**3)\n                nums.append(i**4)\n                nums.append(i**5)\n                nums.append(i**6)\n                return sum(nums)\n        else:\n            return 0\n        \n        \n    "
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    res = 0\n    if n == 0 :\n        return 0\n    while n >= 0 :\n        res += (n ** 2) * 4\n        n -= 1\n    return res\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(0, n + 1, 2):\n        s = s + i**4\n    return s\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n) : \n        sum += (i ** 4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    else : \n        return odd_num_sum(n-1) + (n&1) * odd_num_sum(n//2)"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(0, n, 2): \n        result = result + (i ** 4) \n    return result \n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open = \"({[\"\n    close = \")}]\"\n    p = list(exp)\n    p = deque(p)\n    stack = deque()\n    open_stack = deque()\n    for i in range(len(exp)):\n        if p.popleft() == open:\n            open_stack.append(i)\n        elif p.popleft() == close:\n            if len(open_stack) == 0:\n                return False\n            i = open_stack.pop()\n            open_stack.append(i)\n        else:\n            return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    is_balanced = True\n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \"{\":\n            stack.append(i)\n        elif i == \")\":\n            if not stack or stack[-1]!= \"{\":\n                is_balanced = False\n            stack.pop()\n        elif i == \"}\":\n            if not stack or stack[-1]!= \"(\":\n                is_balanced = False\n            stack.pop()\n    if not stack:\n        return is_balanced\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    left = 0\n    right = 0\n    stack = deque()\n    \n    for i in exp:\n        if i in '(()':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n                right += 1\n        elif i == '*' or i == '/':\n            if not stack:\n                return False\n            else:\n                left += 1\n                stack.pop()\n        elif i == '+' or i == '-':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n                left += 1\n        elif i == '+' or i == '-':\n            if stack and i == '+':\n                stack[-1] = stack[-1] + stack[-1]\n            else:\n                stack.append(i)\n    if left == 0 or right == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    def check_balanced(exp):\n        stack = deque()\n        for c in exp:\n            if c == '(':\n                stack.append(c)\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    top = stack.pop()\n                    if c!= top and c!= '(':\n                        return False\n    \n    if not check_balanced(exp):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = deque()\n    \n    is_balanced = True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    d = deque()\n    stack = []\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    stack.append(exp[0])\n    stack.append(None)\n    i = 1\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    stack.append((exp, 0))\n    balanced = True\n    while len(stack) > 0:\n        current_exp, current_pos = stack.pop()\n        if current_pos == len(current_exp):\n            stack.append((current_exp[1:] + current_exp[:1], current_pos + 1))\n            continue\n        if len(current_exp) - 1 == current_pos:\n            balanced = False\n            stack.append((current_exp[1:], current_pos + 1))\n        else:\n            if current_exp[current_pos] == '(':\n                stack.append((current_exp[current_pos+1:current_pos + 2], current_pos + 1))\n            else:\n                balanced = False\n                stack.append((current_exp[:current_pos], current_pos + 1))\n    return balanced\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    opening_brackets = ['(', '{', '[']\n    closing_brackets = [')', '}', ']']\n    \n    for char in exp:\n        if char in opening_brackets:\n            print('opening_brackets')\n            if char == '}':\n                print('i am in closing_brackets')\n                if exp[:3] == exp[-3:]:\n                    print('expression is balanced')\n                    return True\n                else:\n                    print('not balanced')\n                    return False\n            else:\n                print('opening_brackets')\n                print('not in closing_brackets')\n                return False\n        elif char in closing_brackets:\n            print('closing_brackets')\n            if exp[:3] == exp[-3:]:\n                print('expression is balanced')\n                return True\n            else:\n                print('not balanced')\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    leng = 0\n    l = test_str.split(' ')\n    for i in l:\n        if len(i) == K:\n            leng += 1\n    \n    if leng == len(l):\n        return ''\n    \n    else:\n        test_str = ''\n        for i in range(0, leng - 1):\n            test_str += test_str[i] +''\n        test_str = test_str[:-1]\n        \n        return test_str\n    \n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    res = []\n    for word in words:\n        if len(word) == K:\n            res.append(word)\n    return \" \".join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Special case\n    if K == 1:\n        return test_str\n    \n    # Initialization\n    if K > len(test_str):\n        return ''\n    \n    # Initialize the result array\n    res = []\n    \n    # Check whether the string is empty\n    if len(test_str) == 0:\n        return ''\n    \n    # Iterate over the string\n    for i in range(0, len(test_str)):\n        \n        # Compare the current index with the previous index\n        if len(test_str) == i:\n            # If the current word is the last word\n            if i == len(test_str) - 1:\n                # Remove the last word from the result array\n                res.append(test_str[:i] + test_str[i + 1:])\n            # Else, add the previous word to the result array\n            else:\n                res.append(test_str[:i] + test_str[i + 1:])\n        \n        # Check whether the current word is in the word list or not\n        elif test_str[i] == test_str[i + 1]:\n            # If the current word is the last word, we need to remove the last word from the result array\n            res.append(test_str[:i] + test_str[i + 1:])\n        else:\n            # Else, we have to check whether the current word is in the last word list or not\n            # And if it is, we skip the current word\n            if len(test_str) - 1 < i:\n                # If the current word is in the last word list, we can't remove it\n                return remove_length(test_str, K)\n            # Else, the current word is not in the last word list, and it is not in the word list\n            else:\n                # If the current word is not in the last word list, we need to remove it from the result array\n                res.append(test_str[:i] + test_str[i + 1:])\n    \n    # If the string has been removed, remove the last word from the result array\n    if len(res) == 0:\n        return ''\n    \n    # Check whether the string has been removed or not\n    return''.join(res)"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word = ''\n    for i in range(0, len(test_str)):\n        if len(word) < K:\n            word += test_str[i]\n        else:\n            word = word[0:len(word)-1]\n            word += test_str[i]\n    return word\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) == 0:\n        return ''\n    elif len(test_str) < K:\n        return ''\n    else:\n        return ''.join(test_str[:K]) +''.join(test_str[K:])\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    l = list(test_str)\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] == l[j]:\n                l.pop(j)\n    return \"\".join(l)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #remove all the words with length K\n    \n    \n    #Splitting the given string\n    #Splitting the string in words and storing them in an array\n    #Iterating over the array and iterating over each element\n    \n    #Iterating over the array\n    \n    #Appending the new array to the str\n    \n    #Returning the string without words with length K\n    \n    \n    return test_str.replace(' ',' ').replace('  ',' ').replace('.',' ').replace(',','').replace('!',' ').replace('?',' ').replace(' ',' ').replace('  ',' ').replace('.',' ').replace(',','')\n    \n    \n    #substring array\n    #substring array\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    len_set = set()\n    for word in test_str.split():\n        len_set.add(len(word))\n    return''.join([word for word in list(len_set) if word > K])\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    L = test_str.split()\n    ans = []\n    for i in range(len(L)):\n        for j in range(i+1, len(L)):\n            k = len(L[i].split())\n            l = len(L[j].split())\n            if k <= k-l:\n                if L[i].find(L[j]) > 0:\n                    L[i] = L[i].replace(L[j], \"\")\n                    ans.append(L[i])\n    return \" \".join(ans)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    final_str = \"\"\n    for word in test_str.split(\" \"):\n        if len(word) == K:\n            final_str += word + \" \"\n    return final_str[:-1]\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    r = re.findall(pattern,text)\n    if len(r)!= 0:\n        for i in range(len(r)):\n            if r[i][0] == pattern:\n                return r[i]\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    i = 0\n    j = 0\n    while i < len(text) and j < len(pattern):\n        if text[i:i+len(pattern)] == pattern:\n            i += len(pattern)\n        j = j + len(pattern)\n    if i >= len(text):\n        return None\n    else:\n        return i,j\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.replace('.','')\n    pattern = pattern.replace('*','.')\n    pattern = pattern.replace('?','.')\n    pattern = pattern.replace('(','.')\n    pattern = pattern.replace(')','.')\n    pattern = pattern.replace('{','.')\n    pattern = pattern.replace('}','.')\n    \n    if '{' in text:\n        text = re.sub(pattern,'',text)\n        \n    if '}' in text:\n        text = re.sub(pattern,'',text)\n        \n    if ',' in text:\n        text = re.sub(pattern,'',text)\n        \n    if '?' in text:\n        text = re.sub(pattern,'',text)\n        \n    if '(' in text:\n        text = re.sub(pattern,'',text)\n        \n    if ')' in text:\n        text = re.sub(pattern,'',text)\n        \n    if ',' in text:\n        text = re.sub(pattern,'',text)\n        \n    if '?' in text:\n        text = re.sub(pattern,'',text)\n        \n    if '(' in text:\n        text = re.sub(pattern,'',text)\n        \n    return text\n    \ndef count_words(text):\n    '''\n    Write a function to return the number of words in the string.\n    '''\n    word_list = text.split(' ')\n    return len(word_list)\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # loop through the pattern, and make sure that the index doesn't go out of the range of the pattern\n    pattern = re.compile(pattern)\n    match_list = []\n    for i in pattern.finditer(text):\n        match_list.append(i)\n        \n    if len(match_list) > 0:\n        return match_list\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    result = {}\n    result['pattern'] = pattern\n    result['substring'] = []\n    for i in range(len(text)):\n        for j in range(i,len(text)):\n            if pattern == text[i:j+1]:\n                result['pattern'] = pattern\n                result['substring'] = [i,j]\n                return result\n    return None\ndef find_substring_length(text,pattern):\n    '''\n    Write a function to find the substring length of a pattern. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    result = {}\n    result['pattern'] = pattern\n    result['length'] = []\n    for i in range(len(text)):\n        for j in range(i,len(text)):\n            if pattern == text[i:j+1]:\n                result['pattern'] = pattern\n                result['length'] = len(text[i:j+1])\n                return result\n    return None\ndef substrings_match(text,pattern):\n    '''\n    Write a function to find all the substrings that match the given pattern. Return a dict containing the substring and its occurance.\n    '''\n    pattern = pattern.lower()\n    result = {}\n    result['pattern'] = pattern\n    result['occurance'] = {}\n    result['pattern'] = pattern\n    for i in range(len(text)):\n        result['occurance'][i] = occurance_substring(text,pattern)\n        if result['occurance'][i]!= None:\n            result['pattern'] = pattern\n            return result\n    return None\ndef substrings_match_length(text,pattern):\n    '''\n    Write a function to find all the substrings that match the given pattern. Return a dict containing the substring and its length.\n    '''\n    pattern = pattern.lower()\n    result = {}\n    result['pattern'] = pattern\n    result['occurance'] = {}\n    result['pattern'] = pattern\n    for i in range(len(text)):\n        result['occurance'][i] = occurance_substring(text,pattern)\n        if result['occurance'][i]!= None:\n            result['pattern'] = pattern\n            return result\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match is None:\n        return None\n    else:\n        print(match.start())\n        print(match.end())\n        print(match.group())\n        print(match.group(0))\n        print(match.group(1))\n        print(match.group(2))\n        print(match.group(3))\n        print(match.groups())\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(0)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(1)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(2)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(3)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(4)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(5)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(6)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(7)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(8)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(9)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(10)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(11)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(12)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(13)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(14)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(15)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(16)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(17)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(18)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(19)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(20)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(21)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(22)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(23)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(24)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(25)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(26)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(27)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(28)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(29)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(30)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(31)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(32)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(33)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(34)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(35)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(36)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(37)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(38)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(39)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(40)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(41)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(42)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(43)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(44)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(45)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(46)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(47)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(48)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(49)))\n        print(\"{0} {1} {2} {3}\".format(match.start(),match.end(),match.group(),match.group(50)))\n        print(\"{0} {1} {2"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    pattern_len = len(pattern)\n    n = len(text)\n    i = 0\n    j = 0\n    substring_count = 0\n    while i < n:\n        if text[i:i+pattern_len] == pattern:\n            i = i + pattern_len\n            j = i\n            substring_count = substring_count + 1\n        else:\n            i = i + 1\n    return substring_count,j\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    index = 0\n    j = 0\n    i = 0\n    for i in range(len(text)):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n            index = i\n        else:\n            i = i + 1\n    if count == len(pattern):\n        return index\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    index = 0\n    for i in range(len(pattern)):\n        if pattern[i] == text[index:index+len(pattern)]:\n            index = i\n    if index == len(pattern):\n        return None\n    else:\n        return index,i\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    i, j = 0,0\n    match_flag = 0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return len(nums)%2==1 and nums[::2]==nums\ndef has_even_index(nums):\n    '''\n    Write a python function to check whether every odd index contains even numbers of a given list.\n    '''\n    return len(nums)%2==0 and nums[::2]==nums\ndef find_even_index_of_list(nums):\n    '''\n    Write a python function to find the index of the even index of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return i\n        else:\n            return -1\ndef check_if_sorted(nums):\n    '''\n    Write a python function to check whether a list is sorted.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i]>nums[i+1]:\n            return False\n    return True\ndef get_first_non_zero(nums):\n    '''\n    Find the first non-zero number.\n    '''\n    for i in range(len(nums)):\n        if nums[i]!=0:\n            return nums[i]\n    return -1\ndef get_last_non_zero(nums):\n    '''\n    Find the last non-zero number.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        if nums[i]!=0:\n            return nums[i]\n    return -1\ndef get_first_and_last_index(nums):\n    '''\n    Find the indexes of the first and last index of the given list.\n    '''\n    a=len(nums)\n    for i in range(a-1):\n        if nums[i]!=0 and nums[i+1]!=0:\n            return i,i+1\n    return -1\ndef get_first_and_last_index2(nums):\n    '''\n    Find the indexes of the first and last index of the given list.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i]!=0 and nums[i+1]!=0:\n            return i,i+1\n    return -1\ndef check_if_list_is_valid(nums):\n    '''\n    Check if a given list is valid.\n    '''\n    if len(nums)<=2:\n        return True\n    for i in range(len(nums)):\n        if nums[i]!=nums[i-1]:\n            return False\n    return True\ndef merge_lists(nums):\n    '''\n    Merge the given list of lists.\n    '''\n    if len(nums)==0:\n        return []\n    if len(nums)==1:\n        return nums[0]\n    new_list=[]\n    for i in range(len(nums)):\n        new_list.append(nums[i])\n    nums.clear()\n    nums.extend(new_list)\n    return nums\ndef get_num_of_0_in_list(nums):\n    '''\n    Find the number of 0 in a given list.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]==0:\n            count+=1\n        else:\n            continue\n    return count\ndef get_num_of_1_in_list(nums):\n    '''\n    Find the number of 1 in a given list.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]==1:\n            count+=1\n        else:\n            continue\n    return count\ndef get_sum_of_0_in_list(nums):\n    '''\n    Find the sum of all 0 in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        if nums[i]==0:\n            total+=1\n        else:\n            continue\n    return total\ndef get_sum_of_1_in_list(nums):\n    '''\n    Find the sum of all 1 in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        if nums[i]==1:\n            total+=1\n        else:\n            continue\n    return total\ndef get_sum_of_all_in_list(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_1_in_list2(nums):\n    '''\n    Find the sum of all 1 in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        if nums[i]==1:\n            total+=1\n        else:\n            continue\n    return total\ndef get_sum_of_all_in_list2(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_all_in_list3(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_all_in_list3(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_all_in_list4(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_all_in_list5(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_all_in_list6(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_all_in_list7(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_all_in_list8(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_all_in_list9(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_all_in_list10(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        total+=nums[i]\n    return total\ndef get_sum_of_all_in_list11(nums):\n    '''\n    Find the sum of all elements in a given list.\n    '''\n    total=0\n    for i in range(len(nums)):\n        tota"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_numbers = 0\n    for num in nums:\n        if num % 2 == 1:\n            odd_numbers = odd_numbers + 1\n    \n    if odd_numbers % 2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # your code goes here\n    # #\n    return any(nums[i%2] % 2 == 1 for i in range(len(nums)))\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2!= 0:\n            return False\n        i = i + 1\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    "
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #Counter = 0\n    odd_numbers = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd_numbers.append(nums[i])\n            Counter += 1\n    return Counter == 0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = 0\n    for x in range(len(nums)):\n        if nums[x] % 2!= 0:\n            odd_index += 1\n    if odd_index == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i]%2)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = 0\n    is_odd = False\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            is_odd = True\n        else:\n            is_odd = False\n        if is_odd == True:\n            odd_index = odd_index + 1\n    if odd_index > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    count_dict = {}\n    for letter in test_str:\n        if letter in vowels:\n            count_dict[letter] = count_dict.get(letter, 0) + 1\n    return count_dict\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for letter in vowels:\n        if letter in test_str:\n            for i in range(len(test_str)):\n                if test_str[i] == letter:\n                    if i!= 0 and test_str[i-1] == letter:\n                        count += 1\n                    if i+1 < len(test_str):\n                        if test_str[i+1] == letter:\n                            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowels_count = 0\n    for char in test_str:\n        if char in vowels:\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels_in_neighbor = 0\n    for char in test_str:\n        if char in vowels:\n            vowels_in_neighbor += 1\n    return vowels_in_neighbor\n    \n    \ndef count_consonants(test_str):\n    '''\n    Write a function to count those characters which have consonants as their neighbors in the given string.\n    '''\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    consonants_in_neighbor = 0\n    for char in test_str:\n        if char not in consonants:\n            consonants_in_neighbor += 1\n    return consonants_in_neighbor\n    \n    \ndef count_consonants_and_vowels(test_str):\n    '''\n    Write a function that takes a string as an input and returns a set of the characters which have consonants as their neighbors. \n    '''\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count_consonants = count_consonants_no_vowels(test_str)\n    count_vowels = count_vowels_no_consonants(test_str)\n    count_consonants_and_vowels = count_consonants_and_vowels_no_consonants(test_str)\n    \n    return vowels, consonants, count_consonants, count_vowels, count_consonants_and_vowels\n    \n    \ndef count_consonants_and_vowels_no_consonants(test_str):\n    '''\n    Write a function that takes a string as an input and returns a set of the characters which have consonants as their neighbors, but also have vowels as their neighbors. \n    '''\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowels = 'aeiouAEIOU'\n    count_consonants = count_consonants_no_vowels(test_str)\n    count_vowels = count_vowels_no_consonants(test_str)\n    count_consonants_and_vowels = count_consonants_and_vowels_no_consonants(test_str)\n    return count_consonants, count_vowels, count_consonants_and_vowels\n    \n    \ndef count_consonants_and_vowels_no_vowels(test_str):\n    '''\n    Write a function that takes a string as an input and returns a set of the characters which have consonants as their neighbors, but also have vowels as their neighbors. \n    '''\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowels = 'aeiouAEIOU'\n    count_consonants = count_consonants_no_vowels(test_str)\n    count_vowels = count_vowels_no_consonants(test_str)\n    count_consonants_and_vowels = count_consonants_and_vowels_no_consonants(test_str)\n    return count_consonants, count_vowels, count_consonants_and_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count_vowels = 0\n    for char in test_str:\n        if char in \"aeiouAEIOU\":\n            count_vowels += 1\n    return count_vowels\n    \n    \n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for c in test_str:\n        if c in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i in 'aeiou':\n            if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = 0\n    \n    for char in test_str:\n        if char in 'aeiou':\n            if char in 'aeiou':\n                vowel_count += 1\n    \n    return vowel_count\n    \ndef count_consonants(test_str):\n    '''\n    Write a function that returns the number of consonants in the given string.\n    '''\n    consonants = 0\n    \n    for char in test_str:\n        if char in 'bcdfghjklmnpqrstvwxyz':\n            consonants += 1\n    \n    return consonants\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_count = {}\n    for char in test_str:\n        if char in 'aeiou':\n            if char in vowel_count:\n                vowel_count[char] += 1\n            else:\n                vowel_count[char] = 1\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    output=0\n    temp=[]\n    for i in arr:\n        if i not in temp:\n            temp.append(i)\n    for i in temp:\n        output+=i\n    return output\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if arr == None or len(arr) < 1:\n        return 0\n    # no. of non-repeated numbers\n    count = 0\n    # loop over array\n    for i in range(len(arr)):\n        # if element is not duplicate\n        if arr[i] not in arr:\n            # increment count\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = {} \n    for x in arr: \n        if x not in count: \n            count[x] = 1\n        else: \n            count[x] += 1\n    sum = 0\n    for key, value in count.items(): \n        sum += value \n    return sum \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_list = []\n    for i in arr:\n        if i not in sum_list:\n            sum_list.append(i)\n    return sum(sum_list)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for x in arr: \n        if x!= x: \n            total += x\n    return total \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # write your code here\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Solution:\n    # return sum(set(arr))\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in sum:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum += i\n    return sum\n    \ndef find_sum_multiply(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i in arr:\n            sum += i\n    return sum\n    \ndef find_sum_multiply_recursive(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return find_sum_multiply_recursive(arr[1:]) + arr[0]\n    \ndef find_sum_multiply_recursive_2(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i in arr:\n            sum += i\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        y = [list(g) for k,g in groupby(list1, lambda x: x[0])]\n        x = [list(g) for k,g in groupby(list1, lambda x: x[1])]\n        return [y,x]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def group_by(l, group_index):\n        if len(l) == 0:\n            return [[] for _ in range(len(group_index))]\n        elif len(l) == 1:\n            return [l[0]]\n        else:\n            # find the index of each element in group_index\n            group_index_index = [index for index, item in enumerate(group_index) if item == l[0]]\n            group_index_index.sort()\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_iter = iter(list1)\n    for i in range(len(list1)):\n        next(list1_iter)\n    sublists = []\n    for element in list1:\n        if element not in sublists:\n            sublists.append(element)\n        else:\n            for j in range(len(sublists)):\n                if element == sublists[j]:\n                    sublists[j] = element\n                    break\n    return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_lists = groupby(list1, key=len)\n    list1_sublists = []\n    for i in range(len(grouped_lists)):\n        if i!= 0:\n            grouped_lists[i] = grouped_lists[i][1]\n        else:\n            grouped_lists[i] = list(grouped_lists[i])\n        for j in range(len(grouped_lists[i])):\n            if grouped_lists[i][j] in grouped_lists[i][j+1:]:\n                grouped_lists[i][j] = grouped_lists[i][j+1]\n                grouped_lists[i][j+1] = grouped_lists[i][j]\n    for group in grouped_lists:\n        list1_sublists.append(group)\n    return(list1_sublists)\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Declare a function to put in the sublists:\n    # the elements in the first sublist\n    # the elements in the second sublist\n    # the elements in the sublist with the same number as the length of the first sublist\n    # the elements in the sublist with the same number as the length of the second sublist\n    # the sublists with the same number of elements as the length of the first sublist\n    # the sublists with the same number of elements as the length of the second sublist\n    # Each sublist should have its own, identical elements\n    # I write the sublist to the same list as the first sublist\n    # I write the sublist to the same list as the second sublist\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    seen = set()\n    for lst in list1:\n        if tuple(lst) not in seen:\n            seen.add(tuple(lst))\n            result.append(lst)\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # write your code here\n    if len(list1) <= 1:\n        return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    k = list(list1)\n    k.sort()\n    print(\"k = {}\".format(k))\n    duplicate_list = []\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # You can assume that the list has at most 10 elements.\n    # Declare a variable:\n    # length\n    length = 10\n    # Declare a variable:\n    # sublists\n    sublists = []\n    # Declare a variable:\n    # duplicates\n    duplicates = []\n    # Declare a variable:\n    # n\n    n = len(list1)\n    # Declare a variable:\n    # i\n    i = 0\n    # Declare a while loop\n    # while loop\n    # i = 0\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = [list(x) for x in list1]\n    for i, item in enumerate(list2):\n        if len(set(item)) == 1:\n            list2[i] = list(item)\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] == list1[j] and list1[i] not in result:\n                result[list1[i]] = 1\n            else:\n                result[list1[i]] = 0\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for l in range(len(list1)):\n        for item in list1[l]:\n            if item in sublist_count:\n                sublist_count[item] += 1\n            else:\n                sublist_count[item] = 1\n    return sublist_count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if type(list1) is not list:\n        raise TypeError(\"The function should take a list\")\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    lst_with_list = []\n    result = {}\n    for i in list1:\n        if i in lst_with_list:\n            lst_with_list.remove(i)\n        else:\n            lst_with_list.append(i)\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    for i in list1:\n        if type(i) is list:\n            for j in i:\n                if type(j) is tuple:\n                    if j in count:\n                        count[j] += 1\n                    else:\n                        count[j] = 1\n        else:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counter = {}\n    for i in range(len(list1)):\n        temp = list1[i]\n        if temp in counter:\n            counter[temp] += 1\n        else:\n            counter[temp] = 1\n    return counter\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = dict()\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_count = {}\n    for lst in list1:\n        for sublist in lst:\n            if sublist not in unique_count:\n                unique_count[sublist] = 1\n            else:\n                unique_count[sublist] += 1\n    return unique_count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #Dictionary\n    d={}\n    #Making a list of tuples\n    tup=[]\n    #Appending each tuple to the list of tuples\n    for i in list1:\n        tup.append(i)\n    #Making a dictionary of tuples and their count\n    for i in tup:\n        if i not in d.keys():\n            d[i]=1\n        else:\n            d[i]+=1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return dict(Counter(list1).most_common())\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    if test_list == []:\n        return []\n    else:\n        result = []\n        for i in range(1, len(test_list)):\n            for j in combinations(test_list, i):\n                result.append(j)\n        return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def combination_of_sums(tuple_list):\n        return combinations(tuple_list, 2)\n    return combination_of_sums(test_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, len(test_list)))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if not test_list:\n        return []\n    s = 0\n    res = []\n    if len(test_list) == 1:\n        return [(s, s)]\n    for i in test_list:\n        res.append(combinations(test_list, i))\n        s += i\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get all possible combinations and their sums \n    comb_sums = list(combinations(test_list,2))\n    # Turn all elements of the list into tuples and print the result \n    comb_sums_tuples = tuple(map(tuple, comb_sums))\n    print(comb_sums_tuples)\n    # return all combinations\n    return comb_sums_tuples\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) < 3:\n        return []\n    res = []\n    if test_list[0] == test_list[1] or test_list[0] == test_list[2]:\n        res.append(test_list)\n    else:\n        for i in range(len(test_list)):\n            sublist = test_list[i:]\n            sublist.sort()\n            combinations_of_sums = find_combinations(sublist)\n            for j in combinations_of_sums:\n                res.append(list(j))\n    return res\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combos = []\n    for i in range(len(test_list)):\n        for j in combinations(test_list, i+1):\n            combos.append(j)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, 2)\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    my_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in combinations(test_list, i):\n                my_list.append(k)\n    return my_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [(a,b) for a,b in list(combinations(test_list, 2))]\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    #n = int(n)\n    if n<=1 : \n        return False\n    for d in range(2,int(math.sqrt(n)+1)):\n        if n%d == 0:\n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 : return False\n    else : \n        for d in range(2, int(math.sqrt(n))+1) : \n            if n % d == 0 : return False\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n % 2 == 0): \n        return False\n    if (n == 2): \n        return True\n    for i in range(3, math.floor(math.sqrt(n))+1, 2): \n        if (n % i == 0): \n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0:\n        return \"0\"\n    elif n == 1 :\n        return \"1\"\n    elif n%2 == 0:\n        return count_divisors(n//2) + \"2\"\n    else:\n        return count_divisors(n-1) + \"1\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n + 1) :\n        if (n % i == 0) :\n            divisors.append(i)\n    return len(divisors)\ndef not_prime(n) :\n    '''\n    Write a python function to check whether a given number is prime or not.\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n % 2 == 0) :\n        print (str(n) + \"is divisible by 2!\")\n    else : \n        print (str(n) + \"is not divisible by 2!\")\n    if n < 4 : \n        print (\"This number is composite\")\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n==1) : \n        return True\n    i=2\n    while i <= math.sqrt(n) : \n        if n % i == 0 : \n            if n//i == i : \n                return True\n            else : \n                return False\n        i = i + 1\n    return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==2 :\n        return \"It's Even\"\n    else :\n        for i in range(2, int(math.sqrt(n))+1) :\n            if n % i == 0 :\n                return \"It's Even\"\n    return \"It's Odd\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)+1)) :\n        if n % i == 0 :\n            divisors.append(i)\n    if n!= 1 : \n        divisors.append(n)\n    if len(divisors)!= 0 and len(divisors)!= 1 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            divisors.append(i)\n            if i == n // i : \n                divisors.append(n//i)\n    if len(divisors) % 2 == 1 : \n        return print(\"Even\")\n    else : \n        return print(\"Odd\")\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    length = len(arr)\n    for i in range(0,length):\n        if i%2 == 0:\n            result += arr[i]\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    odd_length = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 1:\n            s += arr[i]\n            if i % 2 == 0:\n                odd_length += 2\n            else:\n                odd_length += 1\n    return s, odd_length\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = sum([i for i in arr if i % 2 == 1])\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    j = 0\n    i = 0\n    while j <= n-2:\n        while i <= n-2 and arr[i] % 2 == 0:\n            i += 1\n        res += arr[j] * (2 ** i)\n        j += 1\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            sum += arr[i]\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) % 2 == 0:\n        return sum(arr[0:int(len(arr)/2)])\n    else:\n        return sum(arr[0:len(arr)//2])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    odd = True\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n        else:\n            if odd:\n                sum += arr[i]\n            else:\n                sum += arr[i]\n        if i % 2 == 0 and i % 3 == 0:\n            odd = False\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 1:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    length = len(arr)\n    for i in range(0,length):\n        if (i % 2 == 1):\n            total = total + arr[i]\n    return total\nprint(odd_length_sum([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_length = 0\n    odd_length = 0\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            even_length += arr[index]\n        else:\n            odd_length += arr[index]\n    return even_length + odd_length\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if(r == g == b):\n        return (r, g, b)\n    h = 255.0 - ((r + g + b) / 3.0)\n    s = 0.0\n    v = 0.0\n    # convert to hue\n    if(r < g and g < b):\n        if(r < 0.0):\n            s = (255.0 - abs(r)) * 6.0\n        else:\n            s = (abs(r) * 6.0)\n    elif(r < g and g < b):\n        if(r < 0.0):\n            s = (255.0 - abs(g)) * 6.0\n        else:\n            s = (abs(g) * 6.0)\n    elif(r < g and g < b):\n        if(r < 0.0):\n            s = (255.0 - abs(b)) * 6.0\n        else:\n            s = (abs(b) * 6.0)\n    # convert to saturation\n    if(g < b):\n        if(r < 0.0):\n            v = (255.0 - abs(r)) * 2.0\n        else:\n            v = (abs(r) * 2.0)\n    else:\n        if(g < 0.0):\n            v = (255.0 - abs(g)) * 2.0\n        else:\n            v = (abs(g) * 2.0)\n    # convert to value\n    if(h < 0.0):\n        if(s < 0.0):\n            v = (255.0 - abs(s)) * 1.0\n        else:\n            v = (abs(s) * 1.0)\n    else:\n        if(s < 0.0):\n            v = (255.0 - abs(s)) * 1.0\n        else:\n            v = (abs(s) * 1.0)\n    # convert to kelvin\n    if(v > 100.0):\n        v = 100.0\n    if(v < -100.0):\n        v = -100.0\n    v = v * 1.0\n    if(h > 100.0):\n        h = 100.0\n    if(h < -100.0):\n        h = -100.0\n    h = h * 1.0\n    # return\n    return hsv_to_rgb(h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # If the rgb is not enough to give any meaning\n    if not (0 <= r <= 255 and 0 <= g <= 255 and 0 <= b <= 255):\n        raise ValueError(\"Invalid RGB values.\")\n    # Define some constants\n    H = 0.0\n    S = 0.0\n    V = 0.0\n    # Calculate hsv value\n    H = r / 255.0\n    S = g / 255.0\n    V = b / 255.0\n    # Determine h\n    if H < 0.0:\n        H += 1.0\n    # Determine hs\n    if H == 0.0:\n        if S < 0.5:\n            S += 1.0\n        else:\n            S -= 1.0\n        if V < 0.5:\n            V += 1.0\n        else:\n            V -= 1.0\n    # Determine s\n    if S == 0.0:\n        if H < 0.5:\n            H += 1.0\n        else:\n            H -= 1.0\n        if V < 0.5:\n            V += 1.0\n        else:\n            V -= 1.0\n    # Determine v\n    if V == 0.0:\n        if H < 0.5:\n            H += 1.0\n        else:\n            H -= 1.0\n        if S < 0.5:\n            S += 1.0\n        else:\n            S -= 1.0\n    # Define s\n    # Hue is the difference between the hues\n    s = V - H\n    # Determine lightness\n    l = 0.6\n    # Determine saturation\n    if s < l:\n        s = l\n    # Determine hue\n    if s >= 1.0:\n        hue = 0.0\n    else:\n        hue = (1.0 - s) * H\n    # Calculate hue value\n    hue += 0.5\n    if hue > 1.0:\n        hue = 1.0\n    elif hue < 0.0:\n        hue = 0.0\n    # Round to the nearest 0.5\n    hue = 0.5 * (hue + 1.0)\n    # Adjust saturation\n    if s < l:\n        s = l\n    else:\n        s = s\n    # Adjust brightness\n    if hue < 0.0:\n        hue += 1.0\n    elif hue > 1.0:\n        hue -= 1.0\n    # Calculate saturation\n    saturation = l - hue\n    # Adjust contrast\n    if hue < 0.0:\n        contrast = 0.0\n    elif hue > 1.0:\n        contrast = 1.0\n    else:\n        contrast = hue * 3.0\n    # Adjust brightness\n    if saturation < 0.0:\n        brightness = 0.0\n    elif saturation > 1.0:\n        brightness = 1.0\n    else:\n        brightness = saturation * 5.0\n    # Update hsv value\n    hsv = (H, S, V)\n    # Return result\n    return (hsv[0] * contrast + brightness, hsv[1] * saturation + brightness, hsv[2] * brightness)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_r = max(r)\n    min_r = min(r)\n    max_g = max(g)\n    min_g = min(g)\n    max_b = max(b)\n    min_b = min(b)\n    \n    min_r = max(min_r, min(min_g, min_b))\n    max_r = min(max_r, max(min_g, min_b))\n    \n    max_b = max(max_b, max(max_r, max(min_g, min_b)))\n    \n    r = max_r - min_r\n    g = max_g - min_g\n    b = max_b - min_b\n    \n    max_g = min(max_g, max(min_r, min_g))\n    min_g = max(min_g, min(min_r, max_r))\n    \n    max_b = max(max_b, min(min_r, min_b))\n    min_b = min(max_b, min(min_r, max_r))\n    \n    return max_b, max_g, max_r\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-hsv-color-model-rgb-color-model/\n    '''\n    max_h = max(h, h)\n    min_h = min(h, h)\n    max_s = max(s, s)\n    min_s = min(s, s)\n    max_v = max(v, v)\n    min_v = min(v, v)\n    \n    max_h = max(max_h, max_h)\n    min_h = min(min_h, min_h)\n    max_s = max(max_s, max_s)\n    min_s = min(min_s, min_s)\n    max_v = max(max_v, max_v)\n    min_v = min(min_v, min_v)\n    \n    h = max_h - min_h\n    s = max_s - min_s\n    v = max_v - min_v\n    \n    r = max_r * 0.33 + min_r * 0.5\n    g = max_g * 0.33 + min_g * 0.5\n    b = max_b * 0.33 + min_b * 0.5\n    \n    max_r = max(r, r)\n    max_g = max(g, g)\n    max_b = max(b, b)\n    \n    r = max(r - min_r, 0)\n    g = max(g - min_g, 0)\n    b = max(b - min_b, 0)\n    \n    max_r = min(max_r, 1)\n    max_g = min(max_g, 1)\n    max_b = min(max_b, 1)\n    \n    r = max_r * max_v + min_r * min_v\n    g = max_g * max_v + min_g * min_v\n    b = max_b * max_v + min_b * min_v\n    \n    return r, g, b\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r <= 0.04045:\n        if g <= 0.0:\n            r = r * 12.92 + 0.055\n            g = g * 12.92\n            b = b * 12.92\n        else:\n            r = r / 12.92\n            g = g / 12.92\n            b = b / 12.92\n    else:\n        r = r / 255.0\n        g = g / 255.0\n        b = b / 255.0\n    h = hsv_to_rgb(r, g, b)\n    # Crop to correct shape.\n    return h, r, g, b\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def hsv_to_rgb(h, s, v):\n        '''\n        Function returns RGB tuple based on given h value and saturation value.\n        '''\n        val = v*(s+1.0)\n        return tuple(round(val*255))\n        \n    rgb = rgb_to_hsv(r, g, b)\n    return rgb_to_hsv(rgb[0], rgb[1], rgb[2])"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    hue = 0\n    fraction = 0.0\n    if max_val > 255.0:\n        max_val = 255.0\n    if min_val < 0.0:\n        min_val = 0.0\n    if max_val == min_val:\n        fraction = 0.0\n    else:\n        fraction = (r - g) / max_val * (255.0)\n    if fraction == 0.0:\n        hue = 0.0\n    else:\n        hue = (fraction * 6.0) % 360.0\n    if hue < 0:\n        hue = 360 + hue\n    if hue > 360:\n        hue = hue % 360\n    return int(hue), int(max_val * 255), int(min_val * 255)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R = r/255.0\n    G = g/255.0\n    B = b/255.0\n    max_value = max(R, G, B)\n    min_value = min(R, G, B)\n    if max_value == min_value:\n        h = 0\n        s = 0\n        v = 0\n    else:\n        value = (max_value - min_value)\n        r = value/max_value\n        g = value/max_value\n        b = value/max_value\n        hsv = (r, g, b)\n        h = int(359 * r)\n        s = int(259 * g)\n        v = int(255 * b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # TODO: your code here\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    cmax_range = cmax - cmin\n    cmax_range *= 255\n    cmax = cmax_range\n    cmax_int = cmax / 255\n    cmin_int = cmax_int - cmin\n    cmin_int *= 255\n    cmin_int = cmin_int - cmax\n    cmax_int = cmax_int - cmin\n    cmax_int /= 255\n    cmin_int /= 255\n    cmax_int = cmax_int + cmin_int\n    cmax_int %= 1\n    cmin_int %= 1\n    cmax_int = int(cmax_int)\n    cmin_int = int(cmin_int)\n    r = int(cmax_int) / 256\n    g = int(cmax_int) % 256\n    b = int(cmin_int) / 256\n    h = int(cmax_int) % 256\n    s = cmax_int / cmax\n    v = cmin_int / cmax\n    hsv = hsv_color(r, g, b)\n    return hsv, s, cmax_int\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # YOUR CODE HERE\n    # H, S, V = 0, 0, 0\n    # for i in range(r):\n    #     for j in range(g):\n    #         for k in range(b):\n    #             V = (r - i) * (g - j) * (b - k)\n    #             if V > 255:\n    #                 V = 255\n    #             elif V < 0:\n    #                 V = 0\n    #             else:\n    #                 V = V\n    #             H = (V + 360) % 360\n    #             break\n    # return [H, S, V]\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert from rgb to hsv\n    r = int(r)\n    g = int(g)\n    b = int(b)\n    # Get the differences between the color components\n    delta_r = int(r - 0.5*r)\n    delta_g = int(g - 0.5*g)\n    delta_b = int(b - 0.5*b)\n    # Calculate the mean difference between color components\n    s = delta_r + delta_g + delta_b\n    # Convert from hsv to rgb\n    if s == 0:\n        h = 0\n        s = 1\n    else:\n        h = delta_r / s\n        s = delta_g / s\n        v = delta_b / s\n    # Determine the hue saturation value\n    # hue is equal to hue + 2 * saturation value\n    if h == 0:\n        h = 1\n    else:\n        h += 2\n    h = int(h * 6)\n    # Determine the saturation value\n    s = int(s * 255)\n    # Determine the value\n    v = int(v * 255)\n    # Create the output color\n    return (h, s, v)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    print(f'\\n')\n    print(\"Add the even number of the given list\")\n    print('\\n')\n    for n in range(len(list1)):\n        if n%2==0:\n            list1[n]=list1[n]*2\n        else:\n            list1[n]=list1[n]*2\n    print(list1)\n    print('\\n')\n    print(\"Add the odd number of the given list\")\n    print('\\n')\n    for n in range(len(list1)):\n        if n%2!=0:\n            list1[n]=list1[n]*2\n        else:\n            list1[n]=list1[n]*2\n    print(list1)\n    print('\\n')\n    print('\\n')\n    print('\\n')\n    print('\\n')\n    print('\\n')\n    print(f'\\n')\n    return list1\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    x=1\n    y=1\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            x*=list1[i]\n        else:\n            x*=list1[i]\n    for j in range(len(list1)):\n        if list1[j]%2==1:\n            y*=list1[j]\n    return x*y\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Set product to 0\n    prod = 0\n    # Iterate through elements\n    for element in list1:\n        # If element is even\n        if element % 2 == 0:\n            # Add element to product\n            prod += element\n        # If element is odd\n        else:\n            # Subtract element from product\n            prod -= element\n    # Return product\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod=1\n    for item in list1:\n        if item%2==0:\n            prod=prod*item\n        else:\n            prod=prod*item\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # // math.gcd(x, y) returns x and y's greatest common divisor\n    # // gcd(x, y) returns greatest common divisor of x and y\n    # // xor y\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # create list of even and odd numbers\n    even_odd_nums = [2, 4, 6]\n    # creating an empty list\n    even_odd_list = []\n    # creating an empty list to store product\n    product = 1\n    # iterating through each even number\n    for even in even_odd_nums:\n        # iterating through each odd number\n        for odd in even_odd_nums:\n            # checking if odd number is odd and if it is multiply product by odd number\n            if odd % 2 == 1:\n                product *= odd\n            else:\n                break\n        # adding product to even_odd_list\n        even_odd_list.append(product)\n        # incrementing product\n        product = 1\n    return(even_odd_list)\n    # print(even_odd_list)\n    #\n    # # printing the product of even and odd numbers\n    # # print(f'The product of first even and odd numbers is {product}.')\n    #\n    # # printing the product of even and odd numbers using a for loop\n    # # for loop iterates over the first even and odd numbers\n    # # if the odd number is even:\n    # # adding the product to the even_odd_list\n    # # else:\n    # # adding the product to the even_odd_list\n    # # print(f'The product of first even and odd numbers using for loop is {product}.')\n    #\n    # # printing the product of even and odd numbers using a while loop\n    # # while iterating over the even and odd numbers\n    # # while odd number is odd:\n    # # adding the product to the even_odd_list\n    # # else:\n    # # adding the product to the even_odd_list\n    # # print(f'The product of first even and odd numbers using while loop is {product}.')\n    #\n    # # printing the product of even and odd numbers using a for loop\n    # # for iterating over the even and odd numbers\n    # # while iterating over the even and odd numbers:\n    # # adding the product to the even_odd_list\n    # # else:\n    # # adding the product to the even_odd_list\n    # # print(f'The product of first even and odd numbers using for loop is {product}.')\n    # # print('And finally you can exit.')\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return list(map(lambda x: x*x, list1))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    def get_even_odd(num1):\n        '''\n        Write a function that takes a list and returns the product of the even and odd numbers.\n        '''\n        i = 0\n        while i < len(num1):\n            if num1[i] % 2 == 0:\n                num1[i] = num1[i] // 2\n                num1[i + 1] = num1[i + 1] // 2\n            else:\n                num1[i] = num1[i] + 1\n                num1[i + 1] = num1[i + 1] + 1\n            i += 1\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        return list(map(lambda x: (x[0] * x[1]), list(zip(list1, list1[::2]))))\n    else:\n        return list(map(lambda x: (x[0] * x[1]), list(zip(list1[::2], list1[1::2]))))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    c=1\n    for i in list1:\n        c*=i\n    return c\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(x) for x in test_str])\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str])\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp = test_str.split(',')\n    return(int(temp[0]),int(temp[1]),int(temp[2]))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_tuple = test_str.split(',')\n    return tuple(map(int, str_tuple))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = []\n    for val in test_str:\n        int_tuple.append(int(val))\n    return tuple(int_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #print(\"String to Integer:\\n\", test_str, \"to\\n\", type(test_str), \"type\")\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Base case\n    if not isinstance(test_str, tuple):\n        return None\n    \n    # Converting tuple to list\n    tuple_str = list(test_str)\n    # Converting tuple to integer list\n    int_list = list(map(int, tuple_str))\n    # Initializing length of list\n    length = len(int_list)\n    # Initializing empty string\n    temp = ''\n    # Checking for any repeated values\n    if length > 1:\n        # Loop through each value in tuple\n        for i in range(length):\n            if tuple_str[i]!= int_list[i]:\n                # Return empty string\n                return temp\n            temp += str(int_list[i])\n    # Return empty string if length of tuple is 1\n    else:\n        return temp\n    \n    \ndef is_palindrome(test_str):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    # Initialize reverse\n    rev_str = ''\n    # Initialize equal\n    equal = 0\n    # Iterate through each character\n    for i in range(len(test_str)):\n        # Write a loop for each character\n        for j in range(len(test_str)-i-1):\n            # Check character\n            if test_str[j]!= test_str[len(test_str)-i-1]:\n                # Reset equal\n                equal = 0\n            # Increment equal\n            else:\n                equal += 1\n            # Write a if statement\n            if equal == 1:\n                # If equal, reverse the string and print it\n                rev_str = rev_str + test_str[j]\n    \n    # Return the result\n    return rev_str == test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for i in range(len(test_str)):\n        int_tuple += (test_str[i],)\n    return int_tuple\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    if l == 0:\n        return a[0]\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    # if the array is empty, return -1, since it's not necessary to keep sorting\n    if n == 0:\n        return -1\n    # if the value is less than or equal to the rightmost element in the array\n    elif a[0] == x:\n        return 0\n    # find the index of the leftmost element greater than x\n    i = bisect.bisect_left(a, x)\n    # if i is equal to n, return the last element of the array\n    if i == n:\n        return n-1\n    # if i is greater than 0, return the middle element of the array\n    elif i >= 0:\n        return i\n    # otherwise, return the last element of the array\n    else:\n        return n-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    x = x\n    n = len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x, lo=0, hi=len(a))\n    if i < len(a) and a[i] == x: return i\n    else: return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Initialize the insertions and deletions to be 1 to skip over the middle item\n    insertions, deletions = 1, 1\n    # Search for the leftmost item that is larger than the inserted value\n    while insertions < len(a) and a[insertions] >= x:\n        insertions += 1\n    # If the insertion point is on the right side of the list, add 1 to insertions\n    if insertions == len(a):\n        insertions += 1\n    # Otherwise, set the insertions to 0\n    insertions = 0\n    # Loop over the list and search for the leftmost item that is greater than or equal to the inserted value\n    while insertions < len(a):\n        if insertions == len(a):\n            break\n        if a[insertions] >= x:\n            insertions += 1\n        else:\n            break\n    # If the leftmost item that is greater than or equal to the inserted value, set it to the right side of the list\n    if insertions == len(a):\n        return insertions\n    # Else, set the insertions to the index of the leftmost item of the list\n    insertions = bisect.bisect_left(a, x, insertions)\n    return insertions\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    if l==len(a):\n        return len(a)\n    else:\n        return l\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x, lo=0, hi=len(a))\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif i == n:\n        return i\n    else:\n        return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0 or x == a[-1]:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    if x <= a[0]:\n        return 0\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    if x >= a[i]:\n        return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i - 1\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # Remove any leading and trailing whitespace\n    text = re.sub(r'\\s+','', text)\n    # Iterate through string and get position of a triple.\n    for pos in range(0, len(text) - 2):\n        if (text[pos:pos+3] == \"a b\"):\n            print(pos)\n    return(pos)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an a followed by forty.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_fifty(text):\n    '''\n    Write a function that matches a string that has an a followed by fifty.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has an a followed by sixty.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    matches = pattern.findall(text)\n    if len(matches) == 0:\n        print(\"text not formatted\")\n    else:\n        print(matches)\ndef text_match"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = re.sub('[a-zA-Z]', '', text)\n    text = re.sub('[A-Z]', '', text)\n    text = re.sub('[0-9]', '', text)\n    text = re.sub('[*]', '', text)\n    text = re.sub('[+]', '', text)\n    text = re.sub('[?]', '', text)\n    text = re.sub('[!]', '', text)\n    text = re.sub('[-]', '', text)\n    text = re.sub('[ ]', '', text)\n    text = re.sub('[ ]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text = re.sub('[()]', '', text)\n    text "
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # your code goes here\n    text = text.lower()\n    text = re.sub('b$','b',text)\n    text = re.sub('(.)3','\\\\1\\1',text)\n    text = re.sub('(.)4','\\\\1\\1',text)\n    text = re.sub('(.)5','\\\\1\\1',text)\n    text = re.sub('(.)6','\\\\1\\1',text)\n    text = re.sub('(.)7','\\\\1\\1',text)\n    text = re.sub('(.)8','\\\\1\\1',text)\n    text = re.sub('(.)9','\\\\1\\1',text)\n    text = re.sub('(.)0','\\\\1\\1',text)\n    text = re.sub('(.)a','\\\\1\\1',text)\n    text = re.sub('(.)b','\\\\1\\1',text)\n    text = re.sub('(.)c','\\\\1\\1',text)\n    text = re.sub('(.)d','\\\\1\\1',text)\n    text = re.sub('(.)e','\\\\1\\1',text)\n    text = re.sub('(.)f','\\\\1\\1',text)\n    text = re.sub('(.)g','\\\\1\\1',text)\n    text = re.sub('(.)h','\\\\1\\1',text)\n    text = re.sub('(.)i','\\\\1\\1',text)\n    text = re.sub('(.)j','\\\\1\\1',text)\n    text = re.sub('(.)k','\\\\1\\1',text)\n    text = re.sub('(.)l','\\\\1\\1',text)\n    text = re.sub('(.)m','\\\\1\\1',text)\n    text = re.sub('(.)n','\\\\1\\1',text)\n    text = re.sub('(.)o','\\\\1\\1',text)\n    text = re.sub('(.)p','\\\\1\\1',text)\n    text = re.sub('(.)q','\\\\1\\1',text)\n    text = re.sub('(.)r','\\\\1\\1',text)\n    text = re.sub('(.)s','\\\\1\\1',text)\n    text = re.sub('(.)t','\\\\1\\1',text)\n    text = re.sub('(.)u','\\\\1\\1',text)\n    text = re.sub('(.)v','\\\\1\\1',text)\n    text = re.sub('(.)w','\\\\1\\1',text)\n    text = re.sub('(.)x','\\\\1\\1',text)\n    text = re.sub('(.)y','\\\\1\\1',text)\n    text = re.sub('(.)z','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b','\\\\1\\1',text)\n    text = re.sub('(.)\\\\b',"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.match('^a[b]+', text)\n    if result is None:\n        print('Not a valid text.')\n    else:\n        print('Found a three-letter word.')\n        print('Src:'+ result.group())\n        print('Dest:'+ result.group()[2:])\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = re.findall('a', text)\n    b = re.findall('b', text)\n    c = re.findall('c', text)\n    return ''.join(a + b + c)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # find all these three numbers\n    # text = re.findall('\\d+', text)\n    # return text[0] + text[1] + text[2]\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r\"a\",text):\n        print(\"a is a match\")\n    else:\n        print(\"No a match\")\n    if re.search(r\"b\",text):\n        print(\"b is a match\")\n    else:\n        print(\"No b match\")\n    if re.search(r\"\\b\",text):\n        print(\"b is a match\")\n    else:\n        print(\"No b match\")\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('a*b',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'a\\.(b|c|d)\\.', text)\n    return result\n    \ndef text_match_two_and_five(text):\n    '''\n    Write a function that matches a string that has three 'a' and five 'b'.\n    '''\n    result = re.search(r'a\\.(b|c|d)', text)\n    return result\n    \ndef text_match_three_and_five(text):\n    '''\n    Write a function that matches a string that has three 'a' and five 'b' and a followed by three 'c' and five 'd'.\n    '''\n    result = re.search(r'a\\.(b|c|d)\\.', text)\n    return result\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple([int(x) for x in test_str.split(',')])\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = []\n    for index in range(len(test_str)):\n        if index == len(test_str) - 1:\n            new_tuple.append(test_str[index])\n        else:\n            new_tuple.append(test_str[index:index+1])\n    return tuple(new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple = tuple(test_list)\n    tuple = tuple(test_str)\n    return tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = [int(x) for x in test_str.split()]\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    new_str = test_str.split(\",\")\n    for i in range(len(new_str)):\n        new_list.append(new_str[i].strip())\n    new_tuple = tuple(new_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    new_tuple = ()\n    for element in test_list:\n        new_list.append(element)\n    for index, element in enumerate(new_list):\n        if index == 0:\n            new_tuple = element\n        else:\n            new_tuple = new_tuple + (element,)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(eval, test_list))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # TO DO\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list)!= len(test_str):\n        raise ValueError(f'The length of the list is not the same with the tuple string: {test_str}')\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    odd = False\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            odd = True\n    return odd\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_list = []\n    for i in range(0,len(nums),2):\n        if nums[i] % 2 == 0:\n            even_list.append(nums[i])\n    return even_list\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0 and nums[i]%2!=0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(i%2==0 for i in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # do not use list comprehension\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if(nums[i]%2==0):\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 0:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = 0\n    for i in range(len(nums)):\n        if (nums[i] % 2 == 0):\n            even_index = even_index + 1\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # if list is empty return True\n    if len(nums) == 0:\n        return True\n    # if any number in list is even, return false\n    else:\n        for i in range(len(nums)):\n            if nums[i] % 2 == 0:\n                return False\n    # return false if list is not even\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    a = test_tup\n    for i in range(len(a)):\n        if isinstance(a[i], tuple) and isinstance(a[i][0], tuple):\n            remove = a[i][0]\n            for j in range(len(a[i][0])):\n                if isinstance(remove[j], tuple):\n                    remove[j] = remove[j][0]\n        else:\n            continue\n    return a\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) is not tuple:\n        return 'Invalid Tuple Input'\n    for i in range(len(test_tup)):\n        for j in range(i,len(test_tup)):\n            if type(test_tup[i]) is tuple and type(test_tup[j]) is tuple:\n                test_tup[i],test_tup[j] = test_tup[j],test_tup[i]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple((tuple(x) for x in test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    for x in test_tup:\n        if type(x) is tuple:\n            test_tup = remove_nested(x)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    try:\n        length = len(test_tup)\n    except TypeError:\n        print('Wrong type of test')\n        return\n    if not length:\n        raise TypeError\n    else:\n        print('Length of tuples removed: ', length - 1)\n        test_tup = test_tup[:length - 1]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def func(tup):\n        \"\"\"\n        Remove elements from a tuple such that the first element is the\n        first element of the tuple and the second element is the\n        second element of the tuple.\n        \"\"\"\n        return tup[0][1],tup[1][0],tup[1][1]\n    t = list(test_tup)\n    t.sort()\n    return func(t)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    test_tup_list = test_tup.split(\",\")\n    \n    for i in range(len(test_tup_list)):\n        test_tup_list[i] = test_tup_list[i].strip()\n        \n    test_tup = tuple(test_tup_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Start writing your code here\n    print(f\"The original tuple is : {test_tup}\")\n    \n    new_tup = []\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if test_tup[i][j] == '[' or test_tup[i][j] == '{':\n                new_tup.append(test_tup[i][j])\n                print(new_tup)\n            if test_tup[i][j] == ']':\n                new_tup.append(test_tup[i][j])\n                print(new_tup)\n            if test_tup[i][j] == '}':\n                new_tup.append(test_tup[i][j])\n                print(new_tup)\n        if test_tup[i][j] == ']':\n            print(new_tup)\n            new_tup.pop()\n            print(new_tup)\n            print(test_tup)\n        if test_tup[i][j] == '}':\n            print(new_tup)\n            new_tup.pop()\n            print(new_tup)\n            print(test_tup)\n    \n    test_tup = tuple(new_tup)\n    print(test_tup)\n    print(test_tup)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp=test_tup[0]\n    for i in test_tup[1:]:\n        temp=temp.remove(i)\n    return temp\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_size = len(input_list)\n    output = []\n    for i in range(list_size):\n        output.append(len(input_list[i]))\n    return output\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    l1=[]\n    for i in range(0,len(input_list)):\n        for j in range(0,len(input_list[i])):\n            l1.append(input_list[i][j])\n    return len(l1)"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        count += len(i)\n    return count\n    \ndef count_tuple(input_list): \n    '''\n    Write a python function to count the number of tuple in a given number of tuples.\n    '''\n    count = 0\n    for i in input_list: \n        count += len(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Declare count_list variable and initialize an empty dictionary\n    count_list = {}\n    \n    # Iterate through the input list and add each item to the count_list dictionary\n    for i in range(len(input_list)):\n        count_list[input_list[i]] = count_list.get(input_list[i], 0) + 1\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    s = []\n    print(s)\n    for i in input_list:\n        if type(i) == list:\n            s.append(len(i))\n        else:\n            s.append(0)\n    print(s)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        count += len(input_list)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = 0\n    for i in range(0, len(input_list)):\n        result += 1\n    return result\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if type(i) == list:\n            count = count + 1 \n    print(\"List Count:\", count)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        count += 1\n    print (count)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return x-1 if x>0 else arr.length()-1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while l<=r:\n        m=(l+r)//2\n        if arr[m]<x:\n            l=m+1\n        else:\n            r=m-1\n    return l\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    # Declare a boolean array.\n    flag = [0 for i in range(len(arr))]\n    # Initialize the second array with 'x'.\n    for i in range(len(arr)):\n        flag[i] = arr[len(arr)-1-i] == x\n    # Find where in the first array the x is.\n    i = 0\n    while flag[i] == 0:\n        i += 1\n    # Store it in second array.\n    for i in range(len(arr)):\n        if flag[i] == 0 and arr[i] == x:\n            return i\n    # Return -1.\n    return -1\n    \n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n    if arr[0] == x:\n        return 1\n    elif arr[0] > x:\n        return last(arr[1:],x)\n    else:\n        return last(arr[1:],arr[0])\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # if x is an array element then return the last position\n    if len(arr) == 0 or len(arr) == 1:\n        return arr[0]\n    if arr[0] == x:\n        return len(arr) - 1\n    # find the next position in array\n    j = len(arr) - 1\n    while j >= 0 and arr[j] < x:\n        j -= 1\n    # if x is greater than arr[j] then return the last position\n    if arr[j] == x:\n        return j\n    return j + 1"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # https://www.youtube.com/watch?v=h5yGfWZrE5I\n    # https://en.wikipedia.org/wiki/Linear_search_algorithm\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n - 1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    count = 0\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = (l+r) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            count += 1\n            r = mid - 1\n        elif arr[mid] < x:\n            l = mid + 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return None\n    if len(arr)==1:\n        return arr[0]\n    if arr[0]==x:\n        return 0\n    mid = len(arr)//2\n    if arr[mid]==x:\n        return mid\n    elif arr[mid]<x:\n        return last(arr[mid+1:],x)\n    else:\n        return last(arr[:mid],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Your code here\n    #raise NotImplementedError\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    a = len(arr)\n    if a == 0:\n        return -1\n    if x == arr[0]:\n        return 0\n    if a == 1:\n        return 1\n    if x < arr[0]:\n        return 0\n    if arr[0] < x:\n        return 0\n    if arr[0] > x:\n        return 1\n    if arr[0] >= x:\n        return a\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # noinspection PyTypeChecker\n    return re.search(\"\\w+\\s{1}\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+\\s*\\w+"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #Set the regular expression to be used\n    pattern = re.compile('^[a-zA-Z]+a$')\n    #Find the length of the string and get the index of the 'a'\n    length = len(text)\n    index = -1\n    #Iterate over the string\n    while True:\n        index = text.find('a', index+1)\n        #If the index is -1, then we've reached the end of the string\n        if index == -1:\n            break\n        #If the string doesn't have a 'a' and the index is not the end, it's a new entry\n        if index < length and not pattern.match(text[index:]):\n            #If the string ends with a 'b', then we're done\n            if text[index:index+2] == 'b':\n                return text[index:]\n            #If the string doesn't end in a 'b', then we need to add the 'b' to the index\n            else:\n                index = text.find('b', index+1)\n        #If the string doesn't have a 'b' and the index is not the end, it's a new entry\n        else:\n            index = text.find('b', index+1)\n    return None\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a[^b]*b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_list = list(text.split())\n    for i in text_list:\n        if i[-1] == \"a\":\n            i = re.search(r\"b(\\w+)\", i)\n            i = i.group(1)\n            if i == \"b\":\n                i = re.search(r\"a(\\w+)\", i)\n                i = i.group(1)\n                if i[-1] == \"a\":\n                    i = re.search(r\"a(\\w+)\", i)\n                    i = i.group(1)\n                    text_list.remove(i)\n    return \" \".join(text_list)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a = re.search('(a){4}', text)\n    b = re.search('(b){4}', text)\n    if a!= None:\n        text = text.replace(a.group(), 'a')\n    if b!= None:\n        text = text.replace(b.group(), 'b')\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.lower()\n    a = re.search('a(.)*b',text)\n    if a:\n        print(a.group(0))\n    return\ndef text_end(text):\n    '''\n    Write a function that matches a string that has a 'd' followed by anything.\n    '''\n    text = text.lower()\n    d = re.search('d(.)*',text)\n    if d:\n        print(d.group(0))\n    return\ndef text_starta_endc(text):\n    '''\n    Write a function that matches a string that has a 'c' followed by anything.\n    '''\n    text = text.lower()\n    c = re.search('c(.)*',text)\n    if c:\n        print(c.group(0))\n    return\ndef text_endc(text):\n    '''\n    Write a function that matches a string that has a 'c' followed by anything.\n    '''\n    text = text.lower()\n    c = re.search('c(.)*',text)\n    if c:\n        print(c.group(0))\n    return\ndef word_start(text):\n    '''\n    Write a function that matches a string that matches any word.\n    '''\n    text = text.lower()\n    word = re.search('(.+)',text)\n    if word:\n        print(word.group(0))\n    return\ndef word_end(text):\n    '''\n    Write a function that matches a string that matches any word.\n    '''\n    text = text.lower()\n    word = re.search('(.+)$',text)\n    if word:\n        print(word.group(0))\n    return\ndef word_starta(text):\n    '''\n    Write a function that matches a string that matches any word.\n    '''\n    text = text.lower()\n    word = re.search('(.+)a(.)*',text)\n    if word:\n        print(word.group(0))\n    return\ndef word_enda(text):\n    '''\n    Write a function that matches a string that matches any word.\n    '''\n    text = text.lower()\n    word = re.search('(.+)a(.)*$',text)\n    if word:\n        print(word.group(0))\n    return\ndef word_startb(text):\n    '''\n    Write a function that matches a string that matches any word.\n    '''\n    text = text.lower()\n    word = re.search('(.+)b(.)*',text)\n    if word:\n        print(word.group(0))\n    return\ndef word_endb(text):\n    '''\n    Write a function that matches a string that matches any word.\n    '''\n    text = text.lower()\n    word = re.search('(.+)b(.)*$',text)\n    if word:\n        print(word.group(0))\n    return\ndef word_startc(text):\n    '''\n    Write a function that matches a string that matches any word.\n    '''\n    text = text.lower()\n    word = re.search('(.+)c(.)*',text)\n    if word:\n        print(word.group(0))\n    return\ndef word_endc(text):\n    '''\n    Write a function that matches a string that matches any word.\n    '''\n    text = text.lower()\n    word = re.search('(.+)c(.)*$',text)\n    if word:\n        print(word.group(0))\n    return\ndef ponctu_starts(text):\n    '''\n    Write a function that matches a string that matches any punctuation mark, followed by any character that begins with 'p' or 'P'.\n    '''\n    text = text.lower()\n    ponctu = re.search('(?P<punctu>p|P)(?P<char>[a-z])*$',text)\n    if ponctu:\n        print(ponctu.group(0))\n    return\ndef ponctu_ends(text):\n    '''\n    Write a function that matches a string that matches any punctuation mark, followed by any character that ends with 'p' or 'P'.\n    '''\n    text = text.lower()\n    ponctu = re.search('(?P<punctu>p|P)(?P<char>[a-z])*$',text)\n    if ponctu:\n        print(ponctu.group(0))\n    return\ndef num_starts(text):\n    '''\n    Write a function that matches a string that matches any number.\n    '''\n    text = text.lower()\n    num = re.search('(?P<num>\\d+(?=\\.))*$',text)\n    if num:\n        print(num.group(0))\n    return\ndef num_ends(text):\n    '''\n    Write a function that matches a string that matches any number.\n    '''\n    text = text.lower()\n    num = re.search('(?P<num>\\d+(?=\\.))*$',text)\n    if num:\n        print(num.group(0))\n    return\ndef symbol_starts(text):\n    '''\n    Write a function that matches a string that matches any symbol.\n    '''\n    text = text.lower()\n    symbol = re.search('(?P<symbol>\\w+)(?=\\.)',text)\n    if symbol:\n        print(symbol.group(0))\n    return\ndef symbol_ends(text):\n    '''\n    Write a function that matches a string that matches any symbol.\n    '''\n    text = text.lower()\n    symbol = re.search('(?P<symbol>\\w+)(?=\\.)',text)\n    if symbol:\n        print(symbol.group(0))\n    return\ndef punctu_starts(text):\n    '''\n    Write a function that matches a string that matches any punctuation mark, followed by any character that begins with 'p' or 'P'.\n    '''\n    text = text.lower()\n    punctu = re.search('(?P<punctu>p|P)(?P<char>[a-z])*$',text)\n    if punctu:\n        print(punctu.group(0))\n    return\ndef punctu_ends(text):\n    '''\n    Write a function that matches a string that matches any punctuation mark, followed by any character that ends with 'p' or 'P'.\n    '''\n    text = text.lower()\n    punctu = re.search('(?P<punctu>p|P)(?P<char>[a-z])*$',text)\n    if punctu:\n        print(punctu.group(0))\n    return\ndef punctu_startsb(text):\n    '''\n    Write a function that matches a string that matches any punctuation mark, followed by any character that starts with 'p' or 'P'.\n    '''\n    text = text.lower()\n    punctu = re.search('(?P<punctu>p|P)(?P<char>[a-z])*$',text)\n    if punctu:\n        print(punctu.group(0))\n    return\ndef punctu_endsb(text):\n    '''\n    Write a function that matches a string that matches any punctuation mark, followed by any character that ends with 'p' or 'P'.\n    '''\n    text = text.lower()\n    punctu = re.search('(?P<punctu>p|P)(?P<char>[a-z])*$',text)\n    if punctu:\n        print(punctu.group(0))\n    return\ndef ponctu_startsc(text):\n    '''\n    Write a function that matches a string that matches any punctuation mark, followed by any character that ends with 'p' or 'P'.\n    '''\n    text = text.lower()\n    ponctu = re.search('(?P<punctu>p|P)(?P<char>[a-z])*$',text)\n    if ponctu:\n        print(po"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex_1 = \"a{3,}b{4,}\"\n    regex_2 = \"a{3,}b{1,}\"\n    regex_3 = \"a{1,}b{4,}\"\n    regex_4 = \"a{2,}\"\n    regex_5 = \"a{2,}b{3,}\"\n    regex_6 = \"a{2,}b{1,}\"\n    regex_7 = \"a{1,}b{1,}\"\n    regex_8 = \"a{3,}b{2,}\"\n    regex_9 = \"a{1,}b{2,}\"\n    regex_10 = \"a{4,}b{3,}\"\n    regex_11 = \"a{1,}b{2,}\"\n    regex_12 = \"a{2,}b{1,}\"\n    regex_13 = \"a{2,}b{3,}\"\n    regex_14 = \"a{3,}b{4,}\"\n    regex_15 = \"a{4,}b{1,}\"\n    regex_16 = \"a{3,}b{2,}\"\n    regex_17 = \"a{4,}b{3,}\"\n    regex_18 = \"a{3,}b{2,}\"\n    regex_19 = \"a{2,}b{2,}\"\n    regex_20 = \"a{3,}b{1,}\"\n    regex_21 = \"a{4,}b{3,}\"\n    regex_22 = \"a{3,}b{2,}\"\n    regex_23 = \"a{2,}b{1,}\"\n    regex_24 = \"a{2,}b{3,}\"\n    regex_25 = \"a{3,}b{4,}\"\n    regex_26 = \"a{4,}b{1,}\"\n    regex_27 = \"a{4,}b{2,}\"\n    regex_28 = \"a{4,}b{3,}\"\n    regex_29 = \"a{3,}b{4,}\"\n    regex_30 = \"a{4,}b{1,}\"\n    regex_31 = \"a{2,}b{1,}\"\n    regex_32 = \"a{2,}b{2,}\"\n    regex_33 = \"a{3,}b{3,}\"\n    regex_34 = \"a{4,}b{4,}\"\n    regex_35 = \"a{3,}b{1,}\"\n    regex_36 = \"a{3,}b{2,}\"\n    regex_37 = \"a{4,}b{3,}\"\n    regex_38 = \"a{3,}b{2,}\"\n    regex_39 = \"a{4,}b{3,}\"\n    regex_40 = \"a{3,}b{1,}\"\n    regex_41 = \"a{1,}b{1,}\"\n    regex_42 = \"a{2,}b{1,}\"\n    regex_43 = \"a{2,}b{2,}\"\n    regex_44 = \"a{3,}b{3,}\"\n    regex_45 = \"a{4,}b{4,}\"\n    regex_46 = \"a{2,}b{3,}\"\n    regex_47 = \"a{3,}b{4,}\"\n    regex_48 = \"a{4,}b{1,}\"\n    regex_49 = \"a{3,}b{2,}\"\n    regex_50 = \"a{4,}b{1,}\"\n    regex_51 = \"a{4,}b{2,}\"\n    regex_52 = \"a{1,}b{2,}\"\n    regex_53 = \"a{2,}b{1,}\"\n    regex_54 = \"a{1,}b{3,}\"\n    regex_55 = \"a{3,}b{4,}\"\n    regex_56 = \"a{4,}b{1,}\"\n    regex_57 = \"a{3,}b{2,}\"\n    regex_58 = \"a{3,}b{3,}\"\n    regex_59 = \"a{4,}b{4,}\"\n    regex_60 = \"a{4,}b{1,}\"\n    regex_61 = \"a{3,}b{2,}\"\n    regex_62 = \"a{4,}b{3,}\"\n    regex_63 = \"a{3,}b{4,}\"\n    regex_64 = \"a{4,}b{1,}\"\n    regex_65 = \"a{3,}b{3,}\"\n    regex_66 = \"a{2,}b{4,}\"\n    regex_67 = \"a{2,}b{1,}\"\n    regex_68 = \"a{2,}b{2,}\"\n    regex_69 = \"a{2,}b{3,}\"\n    regex_70 = \"a{2,}b{4,}\"\n    regex_71 = \"a{2,}b{1,}\"\n    regex_72 = \"a{2,}b{2,}\"\n    regex_73 = \"a{2,}b{3,}\"\n    regex_74 = \"a{2,}b{4,}\"\n    regex_75 = \"a{3,}b{1,}\"\n    regex_76 = \"a{3,}b{2,}\"\n    regex_77 = \"a{4,}b{3,}\"\n    regex_78 = \"a{4,}b{4,}\"\n    regex_79 = \"a{3,}b{1,}\"\n    regex_80 = \"a{3,}b{2,}\"\n    regex_81 = \"a{4,}b{3,}\"\n    regex_82 = \"a{4,}b{4,}\"\n    regex_83 = \"a{2,}b{1,}\"\n    regex_84 = \"a{1,}b{3,}\"\n    regex_85 = \"a{2,}b{4,}\"\n    regex_86 = \"a{3,}b{1,}\"\n    regex_87 = \"a{3,}b{2,}\"\n    regex_88 = \"a{4,}b{3,}\"\n    regex_89 = \"a{4,}b{4,}\"\n    regex_90 = \"a{4,}b{1,}\"\n    regex_91 = \"a{3,}b{2,}\"\n    regex_92 = \"a{2,}b{3,}\"\n    regex_93 = \"a{2,}b{4,}\"\n    regex_94 = \"a{2,}b{1,}\"\n    regex_95 = \"a{1,}b{3,}\"\n    regex_96 = \"a{1,}b{4,}\"\n    regex_97 = \"a{3,}b{1,}\"\n    regex_98 = \"a{3,}b{2,}\"\n    regex_99 = \"a{4,}b{3,}\"\n    regex_100 = \"a{4,}b{4,}\"\n    regex_101 = \"a{4,}b{1,}\"\n    regex_102 = \"a{3,}b{1,}\"\n    regex_103 = \"a{3,}b{2,}\"\n    regex_104 = \"a{2,}b{3,}\"\n    regex_105 = \"a{2,}b{4,}\"\n    regex_106 = \"a{2,}b{1,}\"\n    regex_107 = \"a{1,}b{3,}\"\n    regex_108 = \"a{2,}b{4,}\"\n    regex_109 = \"a{3,}b{1,}\"\n    regex_110 = \"a{4,}b{3,}\"\n    regex_111 = \"a{1,}b{4,}\"\n    regex_112 = \""
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_starta_endb = re.findall(r'\\b[a-zA-Z]+[A-Z]?\\b', text)\n    return text_starta_endb\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a_pattern = re.compile(r'[a-zA-Z0-9]')\n    b_pattern = re.compile(r'[b-zA-Z0-9]')\n    start_pattern = re.compile(r'[^\\s]+')\n    end_pattern = re.compile(r'[\\s]+')\n    b_pattern = re.compile(r'[^\\s]+')\n    found = ''\n    for match in start_pattern.finditer(text):\n        start_word = match.start()\n        end_word = match.end()\n        if start_word < end_word:\n            if a_pattern.match(text[start_word:end_word+1]):\n                found += text[start_word:end_word+1]\n    for match in end_pattern.finditer(text):\n        start_word = match.start()\n        end_word = match.end()\n        if start_word < end_word:\n            if b_pattern.match(text[start_word:end_word+1]):\n                found += text[start_word:end_word+1]\n    return found\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    match_a = re.findall(\"\\b(a).*\\b\", text)\n    match_b = re.findall(\"\\b(b).*\\b\", text)\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_dict = 0\n    for key,value in dict.items():\n        sum_of_dict += value\n    return sum_of_dict\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k in dict:\n        total += dict[k]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum = sum + dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_value = 0\n    for key, value in dict.items():\n        sum_value += value\n    return sum_value\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k,v in dict.items():\n        sum+= v\n    print(sum)\n    return(sum)\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    while (n >= 0):\n        if (n % 2 == 1):\n            sum = sum + n\n            n = n // 2\n        n = n - 2\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    a = 0\n    b = 1\n    s = 0\n    if n > 0:\n        while b <= n:\n            if b % 2 == 1:\n                s = s + b\n            b = b + 1\n        return s\n    else:\n        print(\"please enter a positive number\")\n        \nsum_odd(1000)"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    l = 0\n    r = n\n    s = 0\n    \n    while r < n:\n        if (r%2!= 0):\n            s = s + r\n            r = r+1\n        else:\n            r = r + 1\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    i = 0\n    while i <= n:\n        if (i % 2) == 1:\n            sum = sum + i\n            i = i + 1\n    print('The sum of the odd natural numbers is', sum)\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 16\n    elif n == 6:\n        return 32\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    elif n == 9:\n        return 256\n    elif n == 10:\n        return 512\n    elif n == 11:\n        return 1024\n    elif n == 12:\n        return 2048\n    elif n == 13:\n        return 4096\n    elif n == 14:\n        return 8192\n    elif n == 15:\n        return 16384\n    elif n == 16:\n        return 32768\n    elif n == 17:\n        return 65536\n    elif n == 18:\n        return 131072\n    elif n == 19:\n        return 262144\n    elif n == 20:\n        return 524288\n    elif n == 21:\n        return 1048576\n    elif n == 22:\n        return 2097152\n    elif n == 23:\n        return 4194304\n    elif n == 24:\n        return 8388608\n    elif n == 25:\n        return 16777216\n    elif n == 26:\n        return 33554432\n    elif n == 27:\n        return 67108864\n    elif n == 28:\n        return 134217728\n    elif n == 29:\n        return 268435456\n    elif n == 30:\n        return 536870912\n    elif n == 31:\n        return 1073741824\n    elif n == 32:\n        return -2147483648\n    elif n == 33:\n        return -9223372036854775808\n    elif n == 34:\n        return -9223372036854775809\n    elif n == 35:\n        return -922337203685477581\n    elif n == 36:\n        return -922337203685477580\n    elif n == 37:\n        return -9223372036854775807\n    elif n == 38:\n        return -2147483648\n    elif n == 39:\n        return -2147483648\n    elif n == 40:\n        return -2147483648\n    elif n == 41:\n        return -2147483648\n    elif n == 42:\n        return -2147483648\n    elif n == 43:\n        return -2147483648\n    elif n == 44:\n        return -2147483648\n    elif n == 45:\n        return -2147483648\n    elif n == 46:\n        return -2147483648\n    elif n == 47:\n        return -2147483648\n    elif n == 48:\n        return -2147483648\n    elif n == 49:\n        return -2147483648\n    elif n == 50:\n        return -2147483648\n    elif n == 51:\n        return -2147483648\n    elif n == 52:\n        return -2147483648\n    elif n == 53:\n        return -2147483648\n    elif n == 54:\n        return -2147483648\n    elif n == 55:\n        return -2147483648\n    elif n == 56:\n        return -2147483648\n    elif n == 57:\n        return -2147483648\n    elif n == 58:\n        return -2147483648\n    elif n == 59:\n        return -2147483648\n    elif n == 60:\n        return -2147483648\n    elif n == 61:\n        return -2147483648\n    elif n == 62:\n        return -2147483648\n    elif n == 63:\n        return -2147483648\n    elif n == 64:\n        return -2147483648\n    elif n == 65:\n        return -2147483648\n    elif n == 66:\n        return -2147483648\n    elif n == 67:\n        return -2147483648\n    elif n == 68:\n        return -2147483648\n    elif n == 69:\n        return -2147483648\n    elif n == 70:\n        return -2147483648\n    elif n == 71:\n        return -2147483648\n    elif n == 72:\n        return -2147483648\n    elif n == 73:\n        return -2147483648\n    elif n == 74:\n        return -2147483648\n    elif n == 75:\n        return -2147483648\n    elif n == 76:\n        return -2147483648\n    elif n == 77:\n        return -2147483648\n    elif n == 78:\n        return -2147483648\n    elif n == 79:\n        return -2147483648\n    elif n == 80:\n        return -2147483648\n    elif n == 81:\n        return -2147483648\n    elif n == 82:\n        return -2147483648\n    elif n == 83:\n        return -2147483648\n    elif n == 84:\n        return -2147483648\n    elif n == 85:\n        return -2147483648\n    elif n == 86:\n        return -2147483648\n    elif n == 87:\n        return -2147483648\n    elif n == 88:\n        return -2147483648\n    elif n == 89:\n        return -2147483648\n    elif n == 90:\n        return -2147483648\n    elif n == 91:\n        return -2147483648\n    elif n == 92:\n        return -2147483648\n    elif n == 93:\n        return -2147483648\n    elif n == 94:\n        return -2147483648\n    elif n == 95:\n        return -2147483648\n    elif n == 96:\n        return -2147483648\n    elif n == 97:\n        return -2147483648\n    elif n == 98:\n        return -2147483648\n    elif n == 99:\n        return -2147483648\n    elif n == 100:\n        return -2147483648\n    elif n == 101:\n        return -2147483648\n    elif n == 102:\n        return -2147483648\n    elif n == 103:\n        return -2147483648\n    elif n == 104:\n        return -2147483648\n    elif n == 105:\n        return -2147483648\n    elif n == 106:\n        return -2147483648\n    elif n == 107:\n        return -2147483648\n    elif n == 108:\n        return -2147483648\n    elif n == 109:\n        return -2147483648\n    elif n == 110:\n        return -2147483648\n    elif n == 111:\n        return -2147483648\n    elif n == 112:\n        return -2147483648\n    elif n == 113:\n        return -2147483648\n    elif n == 114:\n        return -2147483648\n    elif n == 115:\n        return -2147483648\n    elif n == 116:\n        return -2147483648\n    elif n == 117:\n        return -2147483648\n    elif n == 118:\n        return -2147483648\n    elif n == 119:\n        return -2147483648\n    elif n == 120:\n        return -2147483648\n    elif n == 121:\n        return -2147483648\n    elif n == 122:\n        return -2147483648\n    elif n == 123:\n        return -2147483648\n    elif "
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 2:\n        return n\n    return n % 2 + sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l,r+1):\n        if i%2!=0:\n            total+=i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # if the range is less than or equal to 0, return 0\n    if n <= 0: \n        return 0\n    # if the range is greater than the range of the int(n)\n    if n >= len(numbers): \n        return 0\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l,r+1): \n        if i % 2!= 0: \n            sum += i \n    return sum\nprint(sum_odd(100)"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0: \n        raise ValueError('please enter a positive integer')\n    else:\n        # Helper function\n        def is_odd(n):\n            return(n % 2 == 0)\n        # Calculating the sum of all odd numbers\n        sum = 0\n        for i in range(l, r + 1):\n            if is_odd(i):\n                sum += i\n        return(sum)\nprint(sum_odd(0))\nprint(sum_odd(1))\nprint(sum_odd(2))\nprint(sum_odd(3))\nprint(sum_odd(4))\nprint(sum_odd(5))\nprint(sum_odd(6))\nprint(sum_odd(7))\nprint(sum_odd(8))\nprint(sum_odd(9))\nprint(sum_odd(10)"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum\n    sum = 0\n    # loop through the array\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    # return the result\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_arr = 0\n    for i in arr:\n        sum_arr = sum_arr + i\n    return sum_arr\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = n & 0xffffffff   # convert to long, the number to be rotated\n    n = l | (1 << d)  # right shift by d to make it 64 bit\n    l = n & 0xffffffff   # convert back to long, the number to be rotated\n    return l, (l>>d)&0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n>>1)+(n&1)<<d\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        n = n + (2 ** 32)\n    # end if\n    if n < 2 ** 31:\n        return n\n    # end if\n    # convert to int\n    remainder = n % 2\n    n = int(n)\n    # end if\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n>>d\n    a = n & 0xffffffff\n    n = (n>>d) + (n&0xffffffff)\n    a = a | ((n<<d) & 0xffffffff)\n    n = (n>>d) + (n&0xffffffff)\n    return n, a\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n==0:\n        return 0\n    \n    d_bit = (d<<(32-d)) + (n&(n-1))\n    \n    temp = n & d_bit\n    n = n ^ d_bit\n    \n    temp_bit = (n & (n-1)) \n    \n    n = n | d_bit\n    n = (temp_bit << d) + n\n    \n    return n\n    \nn=32\nprint(left_rotate(n,1)"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n >= 1:\n        #for i in range(d):\n        #    n >>= 1\n        if d == 1:\n            return n>>1\n        elif d == 0:\n            return n<<1\n        elif d == 2:\n            n<<=1\n        else:\n            n>>=1\n        return n\n    else:\n        return 0\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n >> d\n    result = 0\n    while n:\n        result += (1<<d)\n        n &= (1<<d)\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert n >= 0 and n <= 2**32, \"Number must be between 0 and 2**32\"\n    assert d >= 0 and d <= 32, \"Bit shift must be between 0 and 32\"\n    d = d % 32\n    result = 0\n    num_str = bin(n)[2:]\n    if d == 0:\n        return num_str[::-1]\n    while len(num_str) > 0:\n        if num_str[-1] == '0':\n            num_str = num_str[:-1]\n        else:\n            break\n    for i in range(d):\n        if num_str[i] == '1':\n            result += 1\n        else:\n            result -= 1\n    if result > 0:\n        return num_str + str(1)\n    else:\n        return num_str[::-1]\n    \ndef power(x, n):\n    '''\n    We have 2**n numbers in the range -2^31 to 2^31-1 inclusive.\n    '''\n    assert n >= 1 and n <= 2**31, \"Number must be between 1 and 2**31\"\n    res = 1\n    while n:\n        if n & 1:\n            res = (res*x) % 2147483648\n        n >>= 1\n    return res\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n >> d    #The number is bigger than the number we want to rotate.\n    \n    \nif __name__ == '__main__':\n    print(\"a = 123\")\n    print(\"a = 9830\")\n    print(\"a = 1234\")\n    print(\"a = 0000\")\n    print(\"a = 9900\")\n    print(\"a = 01000\")\n    print(\"a = 11111\")\n    print(\"a = 1212\")\n    print(\"a = 000001\")\n    print(\"a = 1001010\")\n    print(\"a = 111111111111\")\n    print(\"a = 0\")\n    print(\"a = 1\")\n    print(\"a = 0b1001\")\n    print(\"a = 0b1101\")\n    print(\"a = 0b10011\")\n    print(\"a = 0b1\")\n    print(\"a = 0b00000111\")\n    print(\"a = 0b1000010101\")\n    print(\"a = 0b1111110010\")\n    print(\"a = 0b1100011111\")\n    print(\"a = 0b0111000101\")\n    print(\"a = 0b1101000001\")\n    print(\"a = 0b11011001010\")\n    print(\"a = 0b1101111111\")\n    print(\"a = 0b10111010100\")\n    print(\"a = 0b1000000111\")\n    print(\"a = 0b1111111111\")\n    print(\"a = 0b01100011111\")\n    print(\"a = 0b11000010001\")\n    print(\"a = 0b11000010011\")\n    print(\"a = 0b1000000111\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b1111111111\")\n    print(\"a = 0b1000000111\")\n    print(\"a = 0b11000010001\")\n    print(\"a = 0b11000010011\")\n    print(\"a = 0b1000000111\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b1111111111\")\n    print(\"a = 0b11000010001\")\n    print(\"a = 0b11000010011\")\n    print(\"a = 0b1000000111\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b1111111111\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b1111111111\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b1000000111\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b1111111111\")\n    print(\"a = 0b11000010001\")\n    print(\"a = 0b11000010011\")\n    print(\"a = 0b11000010011\")\n    print(\"a = 0b11000010011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b1111111111\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b1111111111\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b1000000111\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0b10111000011\")\n    print(\"a = 0"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # First, we need to make a list of all whitespaces\n    # This is a list of all the characters that are in a string\n    whitespace_list = []\n    for i in text:\n        if (i =='' or i == '\\t' or i == '\\n'):\n            continue\n        whitespace_list.append(i)\n    # Now, we need to delete the spaces from the list\n    for i in whitespace_list:\n        text = text.replace(i, '')\n    return text\ndef remove_newline(text):\n    '''\n    Write a function to remove newline characters from a string.\n    '''\n    # First, we need to make a list of all newline characters\n    # This is a list of all the characters that are in a string\n    newline_list = []\n    for i in text:\n        if (i == '\\n'):\n            continue\n        newline_list.append(i)\n    # Now, we need to delete the newline characters from the list\n    for i in newline_list:\n        text = text.replace(i, '')\n    return text\ndef convert_to_lower(text):\n    '''\n    Write a function to convert all the characters from uppercase to lowercase.\n    '''\n    # First, we need to make a list of all the characters\n    # This is a list of all the characters that are in a string\n    # And a list of all the characters that are uppercase\n    lowercase_list = []\n    uppercase_list = []\n    for i in text:\n        if (i.isupper()):\n            uppercase_list.append(i)\n        else:\n            lowercase_list.append(i)\n    # Now, we need to delete all the characters that are uppercase from the list\n    for i in uppercase_list:\n        text = text.replace(i, i.lower())\n    # Now, we need to delete all the characters that are lowercase from the list\n    for i in lowercase_list:\n        text = text.replace(i, i.upper())\n    return text\ndef convert_to_upper(text):\n    '''\n    Write a function to convert all the characters from lowercase to uppercase.\n    '''\n    # First, we need to make a list of all the characters\n    # This is a list of all the characters that are in a string\n    # And a list of all the characters that are uppercase\n    uppercase_list = []\n    lowercase_list = []\n    for i in text:\n        if (i.isupper()):\n            uppercase_list.append(i)\n        else:\n            lowercase_list.append(i)\n    # Now, we need to delete all the characters that are uppercase from the list\n    for i in uppercase_list:\n        text = text.replace(i, i.upper())\n    # Now, we need to delete all the characters that are lowercase from the list\n    for i in lowercase_list:\n        text = text.replace(i, i.lower())\n    return text\ndef main():\n    test_list = ['Line\\n',' \\n  \\n  \\n', '\\n\\n\\n\\n', '\\n\\n\\n\\n\\n\\n\\n\\n',' \\n  \\n  \\n  \\n',' \\n  \\n  \\n  \\n  \\n  \\n',' \\n  \\n  \\n  \\n  \\n',' \\n  \\n  \\n  \\n  \\n  \\n  \\n',' \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n',' \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n',' \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n',' \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n',' \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n',' \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n  \\n']\n    test_text = remove_newline(test_list)\n    print(test_text)\n    print(remove_all_spaces(test_text))\n    print(convert_to_lower(test_text))\n    print(convert_to_upper(test_text))\nmain("
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', str(text))\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"[\\s]+\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    final_text = ''\n    #print(text)\n    for char in text:\n        if char!='':\n            final_text = final_text + char\n        else:\n            final_text = final_text +''\n    #print(final_text)\n    return final_text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(' ', '')\n    return text\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a=x\n    b=y\n    c=z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in range(0,len(x)):\n        if x[i]==y[i] and x[i]==z[i]:\n            count += 1\n    return(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # Your code here\n    s = 0\n    if x==y==z:\n        s+=1\n    elif x!=y!=z:\n        s+=1\n    return s\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #declaring three variables\n    three_a = x\n    three_b = y\n    three_c = z\n    \n    #calling the function\n    three_a_equal = three_a==three_b and three_b==three_c\n    #creating a variable to print if the function returns true or false\n    if(three_a_equal):\n        print(\"three_a equals one of the three values\")\n    else:\n        print(\"three_a is not equal to three_b and three_c\")\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    n=0\n    for i in range(0,3):\n        if x==y==z:\n            n=n+1\n    return n\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x!= y\n    assert x == z\n    assert y == z\n    assert x == y\n    assert y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(\"Test case:\")\n    print(\"x: {}\".format(x))\n    print(\"y: {}\".format(y))\n    print(\"z: {}\".format(z))\n    print()\n    assert x==y, \"x not equal to y\"\n    assert x==z, \"x not equal to z\"\n    assert y==z, \"y not equal to z\"\n    print(\"Success\")"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(f\"Number of equal numbers from {x} and {y} is {z}\")\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = x+y+z\n    if result == 0:\n        return \"0,0,0\"\n    elif result > 0:\n        return result-1\n    else:\n        return result-2\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x=x.count(x[0])\n    y=y.count(y[0])\n    z=z.count(z[0])\n    assert x==y==z\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    \n    # for a in range(n):\n    #     for b in range(0,n,1):\n    #         if arr[a] > arr[b]:\n    #             arr[b],arr[a] = arr[a],arr[b]\n    #     rotations += 1\n    \n    # for i in range(n):\n    #     for j in range(n):\n    #         if arr[i] > arr[j]:\n    #             arr[j],arr[i] = arr[i],arr[j]\n    \n    for i in range(n):\n        while True:\n            arr[i] = arr[i+1]\n            if arr[i] == arr[i+1]:\n                break\n        rotations += 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return 0\n    \ndef count_subarrays(arr, target): \n    '''\n    Write a python function to count the number of subarrays that you need to generate from arr.\n    '''\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Your code here\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            count += 1\n    return count\n    \ndef check_perfect(arr):\n    '''\n    Write a python function that checks if a given array is a valid permutation of a given sequence of numbers in a given way.\n    '''\n    # Your code here\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[j]!= i:\n                return False\n    return True\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    index = 0\n    \n    if len(arr) == 1:\n        return 1\n    \n    while index < len(arr):\n        if index < len(arr) - 1 and arr[index] < arr[index+1]:\n            count += 1\n            index += 1\n        else:\n            index += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        temp = arr[i]\n        j = i\n        \n        while j > 0 and arr[j-1] > temp:\n            arr[j] = arr[j-1]\n            j-=1\n            count+=1\n            \n        arr[j] = temp\n    \n    return count\n            \ndef find_missing(arr):\n    '''\n    Write a python function to find the missing value in a given array. For example, given [1,2,3,4,5], the missing element should be 3.\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        if arr[i] == None:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # count the number of rotations\n    k = n // 2\n    # an array that will hold the first half of arr.\n    first = arr[:k]\n    # an array that will hold the second half of arr.\n    second = arr[k:]\n    # find the smallest element in arr.\n    smallest = min(first)\n    # count the number of rotations\n    count = 1\n    # iterate through arr until the smallest element is found\n    while smallest!= arr[smallest]:\n        # if the smallest element is found, increment count\n        if smallest < arr[smallest]:\n            count += 1\n            # swap the smallest element and the first half\n            arr[smallest], arr[first] = arr[first], arr[smallest]\n            # increment the smallest element\n            smallest = min(first)\n        else:\n            # swap the smallest element and the second half\n            arr[smallest], arr[second] = arr[second], arr[smallest]\n            # increment the second half\n            count += 1\n            # increment the smallest element\n            smallest = min(first)\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    k = 0\n    j = 0\n    temp = 0\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count_p = 0\n    count_l = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # for every element in the array\n    for i in range(len(arr)):\n        # find the index of the first occurence of the number in the array\n        index = arr.index(arr[i])\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    cnt = 0\n    arr = [0 for i in range(len(arr)+1)]\n    for i in range(len(arr)):\n        arr[i] = i\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n <= 1):\n        return True\n    else:\n        if n % 2 == 0:\n            if n > 1:\n                return is_perfect_square(n-1)\n            else:\n                return False\n        else:\n            if n < 3:\n                return is_perfect_square(n-2)\n            else:\n                return is_perfect_square(n-3)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 1: return n == 1\n    if n == 2: return True\n    if n % 2 == 0:\n        return is_perfect_square(n//2)\n    return n%2 == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if divisible by 3\n    if (n % 3 == 0):\n        return True\n    # check if divisible by 5\n    if (n % 5 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    else :\n        return False\n    \n    \n    \n    \ndef recur(x) :\n    '''\n    Write a recursive function that takes a number as input and prints out all possible values for x.\n    '''\n    print(x)\n    if x == 1 :\n        print(\"1\")\n        return \n    else :\n        recur(x//2)\n        print(x//2, end=\" \")\n        recur(x//2)\n        \n        \ndef find_permutations(lst) :\n    '''\n    Write a function that takes a list and returns all the possible permutations.\n    '''\n    if len(lst) <= 1 :\n        return lst\n    \n    permutation = []\n    for i in range(len(lst)):\n        permutation += [lst[i]] + find_permutations(lst[:i]+lst[i+1:])\n    \n    return permutation\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == int(str(n)[::-1])\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return check_square(n) == n\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == int(n**0.5) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 or n == 2:\n        return True\n    if n > 2:\n        return is_perfect_square(n//2) and is_perfect_square(n*(n+1))\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total_product = 1\n    for num in arr: \n        total_product *= num\n    return total_product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Your code here\n    s=0\n    for i in arr:\n        s=s*i\n    if s%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Counting the number of occurence of each number\n    count_1 = 0\n    count_2 = 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) % 2 == 0:\n        return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product=1\n    for num in arr:\n        product=product*num\n    return product%2==0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(len(arr)): \n        product *= arr[i] \n    if product % 2 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr: \n        if (i % 2 == 0): \n            return False\n    return True \n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even = 0\n    for i in arr:\n        if i % 2 == 0:\n            even += 1\n    if even % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    if (sum % 2 == 0):\n        return True\n    else:\n        return False\n    # pass\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Initialize a flag \n    flag = False\n    # For all elements of the array \n    for i in range(0, len(arr)): \n        if(arr[i] % 2!= 0): \n            flag = True\n            break\n        elif(flag == True): \n            break\n    return flag\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_list = []\n    total_sum = 0\n    for list in lists:\n        total_sum += list[0]\n        if list not in highest_list:\n            highest_list.append(list)\n    return highest_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = list()\n    for lst in lists:\n        for num in lst:\n            if num not in max_sum:\n                max_sum.append(num)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    if not lists:\n        raise ValueError(\"Empty list\")\n    if len(lists) == 1:\n        return lists\n    \n    max_sum = lists[0]\n    \n    for i in range(1, len(lists)):\n        for j in range(0, i):\n            if lists[i][j] > max_sum[j] + lists[i][j]:\n                max_sum[j] = lists[i][j]\n    return max_sum"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    new_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # remove duplicates\n    unique_elements = list(dict.fromkeys(lists))\n    # print(unique_elements)\n    # print(len(unique_elements))\n    # sort the unique elements\n    unique_elements.sort()\n    # print(unique_elements)\n    # print(len(unique_elements))\n    # iterate through unique elements, and sum the elements\n    sum_of_elements = []\n    for element in unique_elements:\n        sum_of_elements.append(element)\n    # print(sum_of_elements)\n    # find the highest\n    highest_element = max(sum_of_elements)\n    # print(highest_element)\n    # return the list\n    return [i+[element] for i,element in enumerate(sum_of_elements) if element == highest_element]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    high_num_list = []\n    sum_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return list(zip(*lists))[0] # returns a list of lists with elements of size 2 in the first position\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_element = []\n    for l in lists:\n        for el in l:\n            if(max(l) > el):\n                max_element = l\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    for i in range(len(lists)):\n        max_list += lists[i]\n    max_list = sorted(max_list)\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = []\n    i = 0\n    j = 0\n    max_sum = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == '':\n        return 0\n    if len(test_str) == 1:\n        return 1\n    #base condition\n    max_num = 0\n    max_run = 0\n    #loop over letters\n    for i in range(len(test_str)):\n        num_upper = 0\n        #check each letter individually\n        for char in test_str[i]:\n            if char.isupper():\n                num_upper += 1\n        #if char is not in uppercase, then it is a run of uppercase characters\n        if num_upper > max_num:\n            max_num = num_upper\n            max_run = i + 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Creating the dictionary\n    uppercase = {}\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = ''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            result += test_str[i].upper()\n            max_run = max_run + 1\n        else:\n            result += test_str[i]\n        i += 1\n    print(\"Maximum run of uppercase is \" + result)\n    print(\"Maximum run of uppercase is \" + str(max_run))\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    def runUpper(str, start, end, max_run):\n        count = 0\n        if end < len(str):\n            while start < end:\n                if str[start].isupper():\n                    count += 1\n                    start += 1\n                else:\n                    start += 1\n                    count -= 1\n            return count\n        else:\n            return 0\n    max_run = runUpper(test_str, 0, len(test_str), 0)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    ch_dict = dict()\n    max_run_uppercase = 0\n    for char in test_str:\n        if char.isupper():\n            if char in ch_dict:\n                ch_dict[char] += 1\n            else:\n                ch_dict[char] = 1\n    for i in ch_dict.values():\n        if i > max_run_uppercase:\n            max_run_uppercase = i\n    return max_run_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_len = 0\n    run_list = []\n    for i in test_str:\n        if i.isupper():\n            run_list.append(i)\n            if len(run_list) > max_len:\n                max_len = len(run_list)\n    return max_len\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_upper_run = 0\n    max_run_len = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if test_str[i] not in ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']:\n                if test_str[i] not in ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']:\n                    if max_upper_run < test_str[i] and test_str[i] not in ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']:\n                        max_run_len = len(test_str[i])\n                        max_upper_run = test_str[i]\n    return max_run_len,max_upper_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            max_run += 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    print(\"\\nStep 1: Calling max_run_uppercase\")\n    upper_str = \"\"\n    for i in test_str:\n        if i.isupper():\n            upper_str += i.upper()\n        else:\n            upper_str += i\n    return upper_str.upper()\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2==1:\n            return num\n    \ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2==0:\n            return num\n    \ndef third_odd(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2==0:\n            return num\n    \ndef fourth_odd(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2==0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num % 2!= 0:\n            result += num\n    return result\n    \n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return [i for i in range(1, len(nums)) if nums[i] % 2!= 0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums)<2:\n        return -1\n    # Create a loop to iterate through each item and compare if the value is odd\n    # If it's odd then increment the counter, return the odd number\n    odd_count = 0\n    for num in nums:\n        if num % 2 == 1:\n            odd_count += 1\n    # If even then return the odd number\n    if odd_count%2==0:\n        return nums[0]\n    else:\n        return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return\n    if nums[0]%2==0:\n        return nums[0]\n    else:\n        return nums[0] + 1\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # --- Your code here ---\n    return [i for i in nums if (i%2)!=0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return nums[i]\n    return False\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums)==0:\n        return 0\n    if len(nums)==1:\n        return nums[0]\n    if len(nums)==2:\n        return nums[0]+nums[1]\n    if len(nums)==3:\n        return max(nums[0]+nums[1]+nums[2], nums[0]+nums[2]+nums[1])\n    if len(nums)==4:\n        return max(nums[0]+nums[1]+nums[2]+nums[3], nums[0]+nums[2]+nums[3]+nums[4])\n    return max(nums[0]+nums[2]+nums[3]+nums[4], nums[0]+nums[2]+nums[3]+nums[4]+nums[5])\n    \ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    if len(nums)==0:\n        return 0\n    if len(nums)==1:\n        return nums[0]\n    if len(nums)==2:\n        return max(nums[0]+nums[1], nums[0]+nums[1]+nums[2])\n    if len(nums)==3:\n        return max(nums[0]+nums[1]+nums[2], nums[0]+nums[1]+nums[2]+nums[3])\n    if len(nums)==4:\n        return max(nums[0]+nums[1]+nums[2]+nums[3]+nums[4], nums[0]+nums[2]+nums[3]+nums[4]+nums[5])\n    return max(nums[0]+nums[2]+nums[3]+nums[4]+nums[5], nums[0]+nums[2]+nums[3]+nums[4]+nums[5]+nums[6])\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    num_list = []\n    for num in nums:\n        if num % 2 == 1:\n            num_list.append(num)\n    return num_list[0]\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return len(test_tup) > K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(set(test_tup) & set(K))\n    return test_tup in K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all([test_tup[i] == K for i in range(len(test_tup))])\n    \n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #check if the given tuples contain the k\n    if type(test_tup)!= tuple:\n        return False\n    if len(test_tup) < K:\n        return False\n    if not all(type(tup)==tuple for tup in test_tup):\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all(map(lambda x: x[1] == K, test_tup))\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K == 0:\n            return False\n        if len(i)!= K:\n            return False\n    return True\ndef solution(n, t, m, p):\n    '''\n    :param n: length of the dictionary\n    :param t: length of the array\n    :param m: max length of the string\n    :param p: pattern length\n    :return: the total sum of the number of k-pairs\n    '''\n    n_t = t * m\n    if check_K(n, n_t):\n        return 0\n    else:\n        return n * n_t\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) <= 1:\n        if K == 0:\n            print('No Match')\n            return 'No Match'\n        else:\n            print('No Match')\n            return 'No Match'\n    else:\n        if K == 0:\n            print('No Match')\n            return 'No Match'\n        else:\n            print('Yes')\n            return 'Yes'\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < 2:\n        return False\n    for k in K:\n        if k in test_tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 0:\n        return True\n    elif len(test_tup) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    smaller = True\n    for ele in test_tup1:\n        if ele < test_tup2[0]:\n            smaller = False\n            break\n    return smaller\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for element in test_tup2:\n        if element < test_tup1[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in test_tup1:\n        if i < test_tup2[0]:\n            return False\n        if i < test_tup2[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller = True\n    for i in test_tup1:\n        if i < test_tup2[0]:\n            smaller = False\n            break\n    return smaller\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x in test_tup1:\n        if x <= test_tup2[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # first tuple\n    for i in test_tup1:\n        if i in test_tup2:\n            if test_tup1.index(i) < test_tup2.index(i):\n                return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    def smaller_than(tup1, tup2):\n        '''\n        Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n        '''\n        for i in tup2:\n            if i < tup1[0]:\n                return False\n        return True\n    \n    for tup in test_tup2:\n        if smaller_than(test_tup1, tup):\n            return True\n    \n    return False\n    \ndef test_check_smaller():\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (1, 2, 3, 4, 5, 6, 8)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (6, 7, 8, 1, 2, 3, 4)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (3, 4, 5, 6, 7, 8, 9)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (5, 6, 7, 8, 9, 10, 11)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (6, 7, 8, 9, 10, 11, 12)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37)) == False\n    assert check_smaller((1, 2, 3, 4, 5, 6, 8), (7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38)) == False\n    assert check_smaller((1, 2, "
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) <= len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #your code goes here\n    if test_tup1[0] < test_tup2[0]:\n        return False\n    elif test_tup1[0] > test_tup2[0]:\n        return False\n    else:\n        return True\n    #your code goes here\n    #write a conditional statement to check if any one of the two tuples is smaller than itself\n    #your code goes here\n    \n    #write a conditional statement to check if any one of the two tuples is greater than itself\n    #your code goes here\n    \n    #write a conditional statement to check if any one of the two tuples is greater than itself\n    #your code goes here\n"
    }
]