[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # write your code here\n    # @param {list} test_tup1 - list of tuples\n    # @param {list} test_tup2 - list of tuples\n    # @return {list} - list of tuples\n    if len(test_tup1) == len(test_tup2):\n        return sorted(list(set(test_tup1).intersection(set(test_tup2))))\n    else:\n        raise Exception(\"Tuple not similar.\")\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    lst1 = test_tup1\n    lst2 = test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #your code here\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list_1 = test_tup1[:]\n    list_2 = test_tup2[:]\n    \n    if len(list_1) == len(list_2):\n        # Find the elements which are present in both lists\n        common_elements = set(list_1).intersection(list_2)\n        return common_elements\n    else:\n        return []\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Find the intersection of the two lists\n    return list(set(test_tup1).intersection(set(test_tup2)))\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = {}\n    for i in test_tup1:\n        if i in test_tup2:\n            result[i] = 1\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # TODO: Write your code here\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('The lists must be of the same size.')\n    \n    return sorted(list(set(test_tup1) & set(test_tup2)))\n    \n    \ndef main():\n    # TODO: Your code here\n    \n    # second_input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # third_input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # print(similar_elements(second_input, third_input))\n    # TODO: Write your code here\n    # first_input = input('Enter a list of numbers separated by a space: ')\n    # second_input = input('Enter another list of numbers separated by a space: ')\n    # print(similar_elements(first_input, second_input))\n    # TODO: Write your code here\n    \n    # TODO: Output example\n    # {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    # {1, 2, 3, 4, 5, 6}\n    # {1, 2, 3}\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    t1, t2 = test_tup1, test_tup2\n    a1 = set(t1)\n    a2 = set(t2)\n    return a1.intersection(a2)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Your code here\n    i = 0\n    lst1 = []\n    lst2 = []\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            lst1.append(test_tup1[i])\n            lst2.append(test_tup2[i])\n    return lst1, lst2\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1: return False\n    elif n == 2: return True\n    elif n % 2 == 0: return False\n    else:\n        for x in range(3,int(math.sqrt(n) + 1),2):\n            if n % x == 0: return True\n        return False\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1: return False\n    elif n == 2: return True\n    elif n % 2 == 0: return False\n    elif n == 3: return True\n    else:\n        for x in range(5,int(math.sqrt(n))+1,2):\n            if n % x == 0: return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 5):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 5):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_list(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_2(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_3(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_4(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_5(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_6(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_7(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_8(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_9(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_10(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_11(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_12(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_13(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_14(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_15(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_16(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_17(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 5):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_list_18(num):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num % 2 == 0 or num "
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check for a prime number\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n%2 == 0:\n        return False\n    elif n==1 or n==3:\n        return True\n    if n==4:\n        return True\n    if n%10==4:\n        return False\n    if n%10==1 or n%10==3:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n in [0, 1, 2]:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 5):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return False\n    if n == 1 or n == 2:\n        return True\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    for i in range(6, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    elif n%2 == 0 or n%3 == 0 or n%5 == 0:\n        return False\n    else:\n        return is_not_prime(n//3) and is_not_prime(n//2) and is_not_prime(n-1)\n        \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    elif n%2 == 0 or n%3 == 0 or n%5 == 0:\n        return False\n    else:\n        return is_not_prime(n//3) and is_prime(n//2) and is_prime(n-1)\n        \n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        return is_not_prime(n // 2)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1 or n == 2:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(math.sqrt(n) + 1), 6):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    \n    for i in range(n-1,0,-1):\n        heapq.heappush(heap,heapq.heappop(heap)+nums[i])\n    \n    return(heap[0])\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    queue = []\n    for i in range(n):\n        heapq.heappush(queue,-nums[i])\n        if len(queue) > n:\n            heapq.heappop(queue)\n    return queue\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    # init output\n    max_heap = []\n    \n    # iterate through given list\n    for i in range(n):\n        # initialize heap with given values\n        heapq.heappush(max_heap,nums[i])\n        # initialize max_heap to be empty\n        heapq.heapify(max_heap)\n        \n    # return last element of the heap\n    return heapq.heappop(max_heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n        #heapq.heappush(heap,nums[i])\n    for i in range(n-1,-1,-1):\n        heapq.heappop(heap)\n    return [heapq.heappop(heap).data for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,nums[i])\n    \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    return heap\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,nums[i])\n    \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    return heap\n        \ndef heap_queue_median(nums,n):\n    '''\n    Write a function to find the n/2 smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,nums[i])\n        \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    return heapq.heappop(heap)\n        \ndef heap_queue_largest_and_smallest(nums,n):\n    '''\n    Write a function to find the n largest integers and smallest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,nums[i])\n        \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    return heap\n    \ndef heap_queue_smallest_and_largest(nums,n):\n    '''\n    Write a function to find the n smallest integers and largest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,nums[i])\n        \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    return heap\n    \ndef heap_queue_median_and_smallest(nums,n):\n    '''\n    Write a function to find the n/2 smallest integers and smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,nums[i])\n        \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    return heapq.heappop(heap)\n        \ndef heap_queue_smallest_and_largest_and_median(nums,n):\n    '''\n    Write a function to find the n/2 smallest integers and smallest integers and median integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,nums[i])\n        \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    return heap\n    \ndef heap_queue_median_and_smallest_and_largest_and_median(nums,n):\n    '''\n    Write a function to find the n/2 smallest integers and smallest integers and median integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,nums[i])\n        \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    for i in range(n-1,0,-1):\n        heapq.heappop(heap)\n        \n    return heapq.heappop(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==1:\n        return list(nums)\n    hq.heapify(nums)\n    for i in range(n,0,-1):\n        if len(nums)>i:\n            heapq.heappush(nums,heapq.heappop(nums))\n        else:\n            break\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    \n    while len(heap)>1:\n        if heap[0]>heap[1]:\n            heapq.heappop(heap)\n            heapq.heappop(heap)\n        else:\n            heapq.heappop(heap)\n            heapq.heappop(heap)\n            heapq.heappush(heap,nums[heap[0]])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    for i in range(n-1,-1,-1):\n        heapq.heappop(heap)\n        heapq.heappush(heap,-nums[i])\n    return heap\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,-nums[i])\n    for i in range(n-1):\n        heapq.heappop(heap)\n        heapq.heappush(heap,-nums[i])\n    return heap\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x % 2) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x%2!= 0\ndef is_Prime (x): \n    '''\n    Write a python function to check whether a number is a prime number or not.\n    '''\n    for i in range(2, int(x**0.5) + 1):\n        if x%i == 0:\n            return False\n    return True\ndef is_Fibonacci_Number (x): \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    if x==0:\n        return False\n    elif x==1:\n        return True\n    else:\n        return is_Prime(x-1)+is_Prime(x-2)\ndef count_Digits (x):\n    '''\n    Write a python function to count the number of digits in a given number.\n    '''\n    count = 0\n    for i in str(x):\n        count += 1\n    return count\ndef list_digits (x):\n    '''\n    Write a python function to return a list of the digits of a given number.\n    '''\n    x = str(x)\n    return [i for i in x]\ndef plus (x):\n    '''\n    Write a python function to add two numbers with a given base.\n    '''\n    x = int(x)\n    return x + 1\ndef minus (x):\n    '''\n    Write a python function to subtract two numbers with a given base.\n    '''\n    x = int(x)\n    return x - 1\ndef multiply (x):\n    '''\n    Write a python function to multiply two numbers with a given base.\n    '''\n    x = int(x)\n    return x * x\ndef divide (x):\n    '''\n    Write a python function to divide two numbers with a given base.\n    '''\n    x = int(x)\n    return x / x\ndef modulo (x):\n    '''\n    Write a python function to get the remainder after dividing two numbers with a given base.\n    '''\n    x = int(x)\n    return x % x\ndef solve (x):\n    '''\n    Write a python function to find the square root of a given number.\n    '''\n    x = int(x)\n    if x < 2:\n        return 2\n    elif is_Power_Of_Two(x) == True:\n        return 0.5\n    elif is_Power_Of_Two(x) == False:\n        return x\n    elif is_Prime(x) == True:\n        return 1\n    elif is_Prime(x) == False:\n        return 0\n    elif is_Fibonacci_Number(x) == True:\n        return 1\n    elif is_Fibonacci_Number(x) == False:\n        return 0\n    elif is_Fibonacci_Number(x) == True:\n        return 2\ndef modulo_inv (x):\n    '''\n    Write a python function to find the remainder after dividing two numbers with a given base.\n    '''\n    x = int(x)\n    if x < 2:\n        return 2\n    elif is_Power_Of_Two(x) == True:\n        return 0.5\n    elif is_Power_Of_Two(x) == False:\n        return x\n    elif is_Prime(x) == True:\n        return 1\n    elif is_Prime(x) == False:\n        return 0\n    elif is_Fibonacci_Number(x) == True:\n        return 1\n    elif is_Fibonacci_Number(x) == False:\n        return 0\n    elif is_Fibonacci_Number(x) == True:\n        return 2\ndef modulo_inv_inv (x):\n    '''\n    Write a python function to find the remainder after dividing two numbers with a given base.\n    '''\n    x = int(x)\n    if x < 2:\n        return 2\n    elif is_Power_Of_Two(x) == True:\n        return 0.5\n    elif is_Power_Of_Two(x) == False:\n        return x\n    elif is_Prime(x) == True:\n        return 1\n    elif is_Prime(x) == False:\n        return 0\n    elif is_Fibonacci_Number(x) == True:\n        return 1\n    elif is_Fibonacci_Number(x) == False:\n        return 0\n    elif is_Fibonacci_Number(x) == True:\n        return 2\ndef modulo_inv_inv_inv (x):\n    '''\n    Write a python function to find the remainder after dividing two numbers with a given base.\n    '''\n    x = int(x)\n    if x < 2:\n        return 2\n    elif is_Power_Of_Two(x) == True:\n        return 0.5\n    elif is_Power_Of_Two(x) == False:\n        return x\n    elif is_Prime(x) == True:\n        return 1\n    elif is_Prime(x) == False:\n        return 0\n    elif is_Fibonacci_Number(x) == True:\n        return 1\n    elif is_Fibonacci_Number(x) == False:\n        return 0\n    elif is_Fibonacci_Number(x) == True:\n        return 2\ndef modulo_inv_inv_inv (x):\n    '''\n    Write a python function to find the remainder after dividing two numbers with a given base.\n    '''\n    x = int(x)\n    if x < 2:\n        return 2\n    elif is_Power_Of_Two(x) == True:\n        return 0.5\n    elif is_Power_Of_Two(x) == False:\n        return x\n    elif is_Prime(x) == True:\n        return 1\n    elif is_Prime(x) == False:\n        return 0\n    elif is_Fibonacci_Number(x) == True:\n        return 1\n    elif is_Fibonacci_Number(x) == False:\n        return 0\n    elif is_Fibonacci_Number(x) == True:\n        return 2\ndef fibo_factorial (x):\n    '''\n    Write a python function to calculate a factorial of a given number.\n    '''\n    x = int(x)\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 1\n    else:\n        return fibo_factorial(x-1) + fibo_factorial(x-2)\ndef fibo_multiply (x):\n    '''\n    Write a python function to multiply two numbers with a given base.\n    '''\n    x = int(x)\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 1\n    else:\n        return fibo_multiply(x-1) + fibo_multiply(x-2)\ndef fibo_factorial_2 (x):\n    '''\n    Write a python function to calculate a factorial of a given number.\n    '''\n    x = int(x)\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 1\n    else:\n        return fibo_factorial_2(x-1) + fibo_factorial_2(x-2)\ndef fibo_multiply_2 (x):\n    '''\n    Write a python function to multiply two numbers with a given base.\n    '''\n    x = int(x)\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 1\n    else:\n        return fibo_multiply_2(x-1) + fibo_multiply_2(x-2)\ndef fibo_factorial_3 (x):\n    '''\n    Write a python function to calculate a factorial of a given number.\n    '''\n    x = int(x)\n    if x == 0:\n        return 1\n    elif x == 1:\n        return 1\n    else:\n        return fibo_factorial_3(x-1) + fibo_factorial_3(x-2)\ndef fibo_multiply_3 (x):\n    '''\n    Write a python functio"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    #your code goes here\n    if x%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 2:\n        return False\n    for i in range(1,x):\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x!= int(x) and x!= int(x)**2: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x1 = str(x)\n    x2 = str(x)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x%2 == 0:\n        return False\n    return True\ndef is_Palindrome(x):\n    '''\n    A helper function to check whether a number is a palindrome or not.\n    '''\n    if x == x[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x >= 2:\n        return False\n    for i in range(1, 10):\n        if x == (i ** 2):\n            return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2 or x == 4: \n        return False\n    if x == 6: \n        return True\n    if x == 8: \n        return True\n    if x == 10: \n        return True\n    if x == 16: \n        return True\n    if x == 20: \n        return True\n    if x == 24: \n        return True\n    if x == 32: \n        return True\n    if x == 36: \n        return True\n    if x == 40: \n        return True\n    if x == 48: \n        return True\n    if x == 56: \n        return True\n    if x == 60: \n        return True\n    if x == 72: \n        return True\n    if x == 80: \n        return True\n    if x == 88: \n        return True\n    if x == 96: \n        return True\n    if x == 100: \n        return True\n    if x == 104: \n        return True\n    if x == 112: \n        return True\n    if x == 120: \n        return True\n    if x == 128: \n        return True\n    if x == 136: \n        return True\n    if x == 140: \n        return True\n    if x == 144: \n        return True\n    if x == 152: \n        return True\n    if x == 160: \n        return True\n    if x == 168: \n        return True\n    if x == 176: \n        return True\n    if x == 180: \n        return True\n    if x == 184: \n        return True\n    if x == 192: \n        return True\n    if x == 200: \n        return True\n    if x == 208: \n        return True\n    if x == 216: \n        return True\n    if x == 220: \n        return True\n    if x == 224: \n        return True\n    if x == 232: \n        return True\n    if x == 240: \n        return True\n    if x == 244: \n        return True\n    if x == 248: \n        return True\n    if x == 256: \n        return True\n    if x == 260: \n        return True\n    if x == 264: \n        return True\n    if x == 272: \n        return True\n    if x == 280: \n        return True\n    if x == 288: \n        return True\n    if x == 296: \n        return True\n    if x == 300: \n        return True\n    if x == 304: \n        return True\n    if x == 312: \n        return True\n    if x == 320: \n        return True\n    if x == 328: \n        return True\n    if x == 336: \n        return True\n    if x == 340: \n        return True\n    if x == 344: \n        return True\n    if x == 352: \n        return True\n    if x == 360: \n        return True\n    if x == 368: \n        return True\n    if x == 376: \n        return True\n    if x == 380: \n        return True\n    if x == 388: \n        return True\n    if x == 392: \n        return True\n    if x == 400: \n        return True\n    if x == 408: \n        return True\n    if x == 416: \n        return True\n    if x == 420: \n        return True\n    if x == 432: \n        return True\n    if x == 440: \n        return True\n    if x == 448: \n        return True\n    if x == 456: \n        return True\n    if x == 480: \n        return True\n    if x == 484: \n        return True\n    if x == 496: \n        return True\n    if x == 500: \n        return True\n    if x == 504: \n        return True\n    if x == 512: \n        return True\n    if x == 520: \n        return True\n    if x == 528: \n        return True\n    if x == 536: \n        return True\n    if x == 540: \n        return True\n    if x == 548: \n        return True\n    if x == 556: \n        return True\n    if x == 560: \n        return True\n    if x == 564: \n        return True\n    if x == 572: \n        return True\n    if x == 580: \n        return True\n    if x == 588: \n        return True\n    if x == 592: \n        return True\n    if x == 600: \n        return True\n    if x == 608: \n        return True\n    if x == 616: \n        return True\n    if x == 620: \n        return True\n    if x == 624: \n        return True\n    if x == 632: \n        return True\n    if x == 640: \n        return True\n    if x == 648: \n        return True\n    if x == 656: \n        return True\n    if x == 660: \n        return True\n    if x == 664: \n        return True\n    if x == 672: \n        return True\n    if x == 680: \n        return True\n    if x == 688: \n        return True\n    if x == 696: \n        return True\n    if x == 720: \n        return True\n    if x == 728: \n        return True\n    if x == 736: \n        return True\n    if x == 740: \n        return True\n    if x == 748: \n        return True\n    if x == 756: \n        return True\n    if x == 760: \n        return True\n    if x == 768: \n        return True\n    if x == 776: \n        return True\n    if x == 780: \n        return True\n    if x == 788: \n        return True\n    if x == 796: \n        return True\n    if x == 800: \n        return True\n    if x == 816: \n        return True\n    if x == 820: \n        return True\n    if x == 828: \n        return True\n    if x == 836: \n        return True\n    if x == 840: \n        return True\n    if x == 848: \n        return True\n    if x == 856: \n        return True\n    if x == 860: \n        return True\n    if x == 868: \n        return True\n    if x == 876: \n        return True\n    if x == 880: \n        return True\n    if x == 888: \n        return True\n    if x == 912: \n        return True\n    if x == 920: \n        return True\n    if x == 928: \n        return True\n    if x == 936: \n        return True\n    if x == 940: \n        return True\n    if x == 948: \n        return True\n    if x == 956: \n        return True\n    if x == 960: \n        return True\n    if x == 968: \n        return True\n    if x == 976: \n        return True\n    if x == 980: \n        return True\n    if x == 988: \n        return True\n    if x == 992: \n        return True\n    if x == 996: \n        return True\n    if x == 1008: \n        return True\n    if x == 1020: \n        return True\n    if x == 1028: \n        return True\n    if x == 1036: \n        return True\n    if x == 1040: \n        return True\n    if x == 1048: \n        return True\n    if x == 1056: \n        return True\n    if x == 1060: \n        return True\n    if x == 1068: \n        return True\n    if x == 1076: \n        return True\n    if x == 1080: \n        return True\n    if x == 1088: \n        return True\n    if x == 1096: \n        return True\n    if x == 1108: \n        return True\n    if x == 1120: \n        return True\n    if x == 1128: \n        return True\n    if x == 1136: \n        return True\n    if x == 1140: \n        return Tru"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = int(x)\n    if x > 0:\n        return x % 2 == 0\n    else:\n        return x % 2!= 0\n        \n        "
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = ''\n    for word in text.split(' '):\n        if len(word) >= 4:\n            res += word\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    \n    for word in text.split():\n        if len(word) >= 4:\n            res.append(word)\n    \n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = re.compile(r'[^a-zA-Z0-9_\\s]')\n    text = regex.sub('', text)\n    words = re.findall(r'[A-Z]+', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\w+', text)\n    for word in words:\n        count = 0\n        for letter in word:\n            if len(letter) >= 4:\n                count += 1\n        if count >= 3:\n            print(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = []\n    for word in text.split():\n        if len(word) >= 4:\n            word_list.append(word)\n    return word_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    num_chars = 0\n    for word in text.split():\n        num_chars += len(word)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = []\n    for i in text:\n        if len(i) >= 4:\n            words.append(i)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # write your code here\n    char_list = []\n    i = 0\n    while i < len(text):\n        j = i\n        while j < len(text) and len(text[j]) >= 4:\n            j += 1\n        char_list.append(text[i:j])\n        i = j\n    return char_list\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w\\w+', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split string into words\n    words = text.split()\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n    \n    '''\n    nums = [1,2,3,4]\n    squares = [num**2 for num in nums]\n    '''\n    \ndef find_prime_factors(n):\n    '''\n    Write a function to find all prime numbers smaller than n.\n    '''\n    factors = []\n    for i in range(2,n+1):\n        if n%i==0:\n            factors.append(i)\n    return factors\n    \ndef divisors(n):\n    '''\n    Write a function to find all divisors of a positive integer.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors.append(i)\n    return divisors\n    \ndef palindrome(n):\n    '''\n    Write a function to check if a number is a palindrome.\n    '''\n    n = str(n)\n    rev = n[::-1]\n    if n == rev:\n        return True\n    return False\n    \ndef get_even_numbers(n):\n    '''\n    A generator which yields even numbers less than or equal to a given integer.\n    '''\n    num = 2\n    while num <= n:\n        yield num\n        num += 2\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for element in nums:\n        result.append(element*element)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for i in nums:\n        squared.append(i**2)\n    return squared\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for element in nums:\n        squares.append(element**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # convert the nums list to a set to remove duplicate elements\n    nums_set = set(nums)\n    # check if the set is empty\n    if nums_set == set():\n        return 'No square numbers found'\n    else:\n        # find the squares\n        square_nums = [num**2 for num in nums_set]\n        # return the list of squares\n        return square_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # TODO: Write your code here\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i ** 2)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    current_rotations = 0\n    rotations_list = []\n    rotations_sorted = []\n    for i in range(0,len(str)):\n        current_rotations += 1\n        if (str[i] == str[i-1]):\n            current_rotations -= 1\n        else:\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list = []\n            rotations_list.append(current_rotations)\n            rotations_list.append(current_rotations)\n            rotations_sorted.append(rotations_list)\n            rotations_list "
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    s = \"\"\n    for i in range(0, len(str)):\n        if i % 2 == 0:\n            s += str[i]\n        else:\n            if count >= 2:\n                if len(s) < len(str):\n                    count = 0\n                    s = str\n            else:\n                if len(s) < len(str):\n                    count += 1\n                    s = s + str[i]\n    if count == 2:\n        return -1\n    else:\n        return count\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i:i+2] == str[i+1:i+3]:\n            count += 1\n    print(\"No of rotations required is : \", count)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    tot_rot = 0\n    for i in range(len(str)): \n        rotations = 0 \n        for j in range(i,len(str)): \n            \n            if str[j] == str[i]: \n                rotations += 1\n            else: \n                rotations = 0 \n            if rotations > tot_rot: \n                tot_rot = rotations \n    return tot_rot\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations=0\n    l=0\n    n=len(str)\n    while(l<n):\n        for i in range(l,n):\n            if(str[l]!=str[i]):\n                rotations+=1\n        l+=1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    str_len = len(str)\n    for i in range(str_len):\n        rotations = i\n        for j in range(i + 1, str_len):\n            if (str[i] == str[j]):\n                rotations += 1\n            else:\n                break\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            rotations += 1\n        else:\n            rotations = 0\n    if rotations > 0:\n        return rotations\n    else:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = [0 for i in range(len(str)+1)]\n    \n    for i in range(len(str)-1, -1, -1):\n        if str[i] == str[i+1]:\n            rotations[i+1] = rotations[i] + 1\n        else:\n            rotations[i+1] = min(rotations[i], rotations[i+1])\n            \n    return rotations[0] if rotations[0] < 0 else 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rots = 0\n    rot = 0\n    for i in range(len(str)):\n        if (str[i] == str[-1]):\n            rot += 1\n        else:\n            rots += 1\n    return rot, rots\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    length = len(str)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    indices = []\n    for i in range(len(s)):\n        if s[i] == ch:\n            indices.append(i)\n        else:\n            break\n    if len(indices) > 0:\n        indices.pop()\n        return ''.join(s[:indices[-1]] + s[indices[0]:])\n    else:\n        return ''\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    ch_dic = {\"q\":'',\n            \"w\":'',\n            \"e\":'',\n            \"r\":'',\n            \"t\":'',\n            \"y\":'',\n            \"u\":'',\n            \"i\":'',\n            \"o\":'',\n            \"p\":'',\n            \"a\":'',\n            \"s\":'',\n            \"d\":'',\n            \"f\":'',\n            \"g\":'',\n            \"h\":'',\n            \"j\":'',\n            \"k\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"c\":'',\n            \"v\":'',\n            \"b\":'',\n            \"n\":'',\n            \"m\":'',\n            \"p\":'',\n            \"b\":'',\n            \"v\":'',\n            \"g\":'',\n            \"h\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"c\":'',\n            \"z\":'',\n            \"z\":'',\n            \"x\":'',\n            \"t\":'',\n            \"e\":'',\n            \"r\":'',\n            \"t\":'',\n            \"y\":'',\n            \"u\":'',\n            \"i\":'',\n            \"o\":'',\n            \"p\":'',\n            \"a\":'',\n            \"s\":'',\n            \"d\":'',\n            \"f\":'',\n            \"g\":'',\n            \"h\":'',\n            \"j\":'',\n            \"k\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"c\":'',\n            \"v\":'',\n            \"b\":'',\n            \"n\":'',\n            \"m\":'',\n            \"p\":'',\n            \"b\":'',\n            \"v\":'',\n            \"g\":'',\n            \"h\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"c\":'',\n            \"z\":'',\n            \"z\":'',\n            \"x\":'',\n            \"t\":'',\n            \"e\":'',\n            \"r\":'',\n            \"t\":'',\n            \"y\":'',\n            \"u\":'',\n            \"i\":'',\n            \"o\":'',\n            \"p\":'',\n            \"a\":'',\n            \"s\":'',\n            \"d\":'',\n            \"f\":'',\n            \"g\":'',\n            \"h\":'',\n            \"j\":'',\n            \"k\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"c\":'',\n            \"v\":'',\n            \"b\":'',\n            \"n\":'',\n            \"m\":'',\n            \"p\":'',\n            \"b\":'',\n            \"v\":'',\n            \"g\":'',\n            \"h\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"t\":'',\n            \"e\":'',\n            \"r\":'',\n            \"t\":'',\n            \"y\":'',\n            \"u\":'',\n            \"i\":'',\n            \"o\":'',\n            \"p\":'',\n            \"a\":'',\n            \"s\":'',\n            \"d\":'',\n            \"f\":'',\n            \"g\":'',\n            \"h\":'',\n            \"j\":'',\n            \"k\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"c\":'',\n            \"v\":'',\n            \"b\":'',\n            \"n\":'',\n            \"m\":'',\n            \"p\":'',\n            \"b\":'',\n            \"v\":'',\n            \"g\":'',\n            \"h\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"t\":'',\n            \"e\":'',\n            \"r\":'',\n            \"t\":'',\n            \"y\":'',\n            \"u\":'',\n            \"i\":'',\n            \"o\":'',\n            \"p\":'',\n            \"a\":'',\n            \"s\":'',\n            \"d\":'',\n            \"f\":'',\n            \"g\":'',\n            \"h\":'',\n            \"j\":'',\n            \"k\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"c\":'',\n            \"v\":'',\n            \"b\":'',\n            \"n\":'',\n            \"m\":'',\n            \"p\":'',\n            \"b\":'',\n            \"v\":'',\n            \"g\":'',\n            \"h\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"t\":'',\n            \"e\":'',\n            \"r\":'',\n            \"t\":'',\n            \"y\":'',\n            \"u\":'',\n            \"i\":'',\n            \"o\":'',\n            \"p\":'',\n            \"a\":'',\n            \"s\":'',\n            \"d\":'',\n            \"f\":'',\n            \"g\":'',\n            \"h\":'',\n            \"j\":'',\n            \"k\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"c\":'',\n            \"v\":'',\n            \"b\":'',\n            \"n\":'',\n            \"m\":'',\n            \"p\":'',\n            \"b\":'',\n            \"v\":'',\n            \"g\":'',\n            \"h\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"t\":'',\n            \"e\":'',\n            \"r\":'',\n            \"t\":'',\n            \"y\":'',\n            \"u\":'',\n            \"i\":'',\n            \"o\":'',\n            \"p\":'',\n            \"a\":'',\n            \"s\":'',\n            \"d\":'',\n            \"f\":'',\n            \"g\":'',\n            \"h\":'',\n            \"j\":'',\n            \"k\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"c\":'',\n            \"v\":'',\n            \"b\":'',\n            \"n\":'',\n            \"m\":'',\n            \"p\":'',\n            \"b\":'',\n            \"v\":'',\n            \"g\":'',\n            \"h\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"t\":'',\n            \"e\":'',\n            \"r\":'',\n            \"t\":'',\n            \"y\":'',\n            \"u\":'',\n            \"i\":'',\n            \"o\":'',\n            \"p\":'',\n            \"a\":'',\n            \"s\":'',\n            \"d\":'',\n            \"f\":'',\n            \"g\":'',\n            \"h\":'',\n            \"j\":'',\n            \"k\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"c\":'',\n            \"v\":'',\n            \"b\":'',\n            \"n\":'',\n            \"m\":'',\n            \"p\":'',\n            \"b\":'',\n            \"v\":'',\n            \"g\":'',\n            \"h\":'',\n            \"l\":'',\n            \"z\":'',\n            \"x\":'',\n            \"t\":'',\n            \"e\":'',\n            \"r\":'',\n            \"t\":'',\n            \"y\":'',\n            \"u\":'',\n            \"i\":'',\n            \"o\":'',\n            \"p\":'',\n            \"a\":'',\n            \"s\":'',\n            \"d\":'',\n            \"f\":'',"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.lower()\n    if len(s)<=1:\n        return s\n    if ch in s:\n        return s[:s.index(ch)]+s[s.index(ch)+1:]\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n    if ch not in s:\n        return \"\"\n    if s.count(ch) == 1:\n        return s.replace(ch,\"\")\n    else:\n        return s.replace(ch,\"\") + remove_Occ(s,ch+s[1])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.lower()\n    ch=ch.lower()\n    if ch not in s:\n        return \"No occurrence found\"\n    else:\n        return s[0:len(s)-1]+s[len(s)-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch_list = list(ch)\n    \n    if(len(s) == 0):\n        return 0\n    elif(len(s) == 1):\n        if(s[0] == ch):\n            return 1\n    \n    if(s[0] == ch):\n        ch_list[0] = ch\n        ch_list.pop(len(ch_list)-1)\n        s = ''.join(ch_list)\n        return s\n    else:\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return False\n    if s.index(ch) == 0 or s.index(ch) == len(s)-1:\n        return False\n    s = s.replace(ch,\"\")\n    if len(s) > 0:\n        return s[0:0-len(s)] + s[len(s)-1:]\n    else:\n        return False\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    ch_dict = {'q':'Q', 'c':'C','m':'M', 'w':'W', 'b':'B', 'g':'G', 'h':'H', 'y':'Y', 'p':'P', 'r':'R', 't':'T', 'u':'U', 'v':'V', 'x':'X', 'z':'Z','s':'S', 'j':'J', 'n':'N', 'g':'G', 'w':'W', 'd':'D', 'e':'E', 'p':'P', 'k':'K', 'l':'L', 'v':'V', 'r':'R', 'h':'H', 'x':'X', 'q':'Q', 'c':'C','m':'M', 't':'T', 'p':'P', 'z':'Z', 'y':'Y', 'u':'U', 'w':'W', 'u':'U', 'z':'Z'}\n    end = ch_dict[ch]\n    return s.replace(end,'').replace(' ','')\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s is None or len(s) <= 0: \n        return\n    if ch =='': \n        return\n    if len(s) == 1: \n        s = s[0]\n    s = s[1:len(s)]\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    N = len(M)\n    S = []\n    for i in range(N):\n        for j in range(i+1, N):\n            if sum(M[i])+sum(M[j]) <= M[i][j]:\n                M[i], M[j] = M[j], M[i]\n            else:\n                M[i], M[j] = M[i], M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n-1):\n        for j in range(i,n):\n            if M[i][j] > M[j][i]:\n                temp = M[i][j]\n                M[i][j] = M[j][i]\n                M[j][i] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        sum_rows = 0\n        for j in range(len(M[i])):\n            sum_rows += M[i][j]\n        M[i].sort(key=lambda x: x[0])\n        M[i].reverse()\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    result = []\n    for i in range(len(M)):\n        row = []\n        for j in range(len(M[i])):\n            row.append(M[i][j])\n        result.append(sum(row))\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j][i+1]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    temp = []\n    for row in M:\n        temp.append(sum(row))\n    sorted_matrix = sorted(temp)\n    return temp, sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = []\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n        l.append(s)\n    for i in range(1, len(M)):\n        s = 0\n        for j in range(len(M[i])):\n            s += M[i][j]\n            l.append(s)\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = l[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    rows_sum = sum(M[:n])\n    l = rows_sum\n    r = rows_sum\n    s = rows_sum\n    for i in range(n):\n        if r == 0:\n            M[i] += M[i]\n            M[i] -= rows_sum\n            rows_sum = 0\n        elif l == 0:\n            M[i] += M[i]\n            rows_sum += M[i]\n            M[i] -= rows_sum\n            M[i] -= rows_sum\n            l = rows_sum\n        else:\n            M[i] += M[i]\n            M[i] -= rows_sum\n            rows_sum += M[i]\n            r -= rows_sum\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # process: sort rows\n    rows = sorted(M[0])\n    # process: sort columns\n    cols = sorted(M[1])\n    # process: sort squares\n    squares = sorted(M[2])\n    return rows, cols, squares\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    h_1 = (b+l)/2\n    v_1 = h_1*(l-b)/2\n    h_2 = (b+l)/2\n    v_2 = h_2*(b-l)/2\n    volume = v_1*v_2\n    return(volume)\n    \n    \n    "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (b*h)/2\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*l\n    volume = volume*"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    x = l+b\n    y = b+h\n    if x >= 0 :\n        return h*x*x - y*x - l*y\n    else :\n        return h*x*x*x - y*x - l*y\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 4/3 * (l**3) * (b**3) * (h**3)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*h*b)/3\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = b*(h**3)/3\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if b**2 == h**2:\n        print('Volume of a triangle is:', (h*b)/2)\n    elif b**2 > h**2:\n        print('Volume of a triangle is:', (2*b**2 - h**2)/2)\n    elif b**2 < h**2:\n        print('Volume of a triangle is:', (2*h - b**2)/2)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return h*b*l*l\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = (l+b) * h\n    volume = (area/2) * (l/2) * (h/2)\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[^a-z]', text)!= None or re.search(r'[A-Z]', text)!= None or re.search(r'[0-9]', text)!= None\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    for item in text:\n        if not item.isalpha():\n            return False\n    \n    return True\ndef text_to_sentence(text):\n    '''\n    Write a function that takes a string as an input and splits the string into a list of words.\n    '''\n    \n    #print(text)\n    \n    sentence_list = re.split(r'\\s',text)\n    return sentence_list\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    #your code here\n    pattern = r'[a-zA-Z]\\s*[^a-zA-Z]\\s*[a-zA-Z]'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #pass\n    if(text.lower() == text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_lowercase_hyphen(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_lowercase_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_space(text):\n    '''\n    Write a function that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_lowercase_underscore_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n    Write a function that returns true if the input string contains sequences of uppercase letters and false otherwise.\n    '''\n    # write your code here\n    result = re.search(\"(.)\\\\1\", text)\n    if result:\n        return True\n    else:\n        return False\ndef text_upper_lowercase_spaces(text):\n    '''\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #Your code here\n    return re.findall(r\"[A-Za-z]\\w*\\W*\", text)==[]\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    str = re.findall('[a-z]+', text)\n    print(str)\n    if str!= []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(text) < 2:\n        return False\n    result = False\n    for i in range(1, len(text)):\n        if text[i].lower()!= text[i - 1].lower():\n            result = False\n    return result\n    \ndef text_special_characters(text):\n    '''\n    Write a function that returns true if the input string contains sequences of special characters.\n    '''\n    if len(text) < 2:\n        return False\n    result = False\n    for i in range(1, len(text)):\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\\"' or text[i] == '\\\"':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\\"' or text[i] == '\\\"':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\\"' or text[i] == '\\\"':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            result = False\n        if text[i] == '\\'' or text[i] == '\\'':\n            resul"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not text:\n        return False\n    if not text.isalpha():\n        return False\n    if not text.islower():\n        return False\n    if not text.isspace():\n        return False\n    if not text.isdigit():\n        return False\n    if len(text) < 2 or text[0] == '_':\n        return False\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # create a regex pattern\n    pattern = '\\w+[a-z0-9_]*'\n    \n    # create a regular expression to match the input string\n    # and test if it matches\n    # if it does, return the result\n    # else return false\n    return re.match(pattern, text)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Write your code here\n    if len(a)<4:\n        return 0\n    elif len(a)==4:\n        return sum(a)\n    elif len(a)==5:\n        return sum(a) + len(a[0]) * 3\n    else:\n        return (len(a) * 2 + 3) * 4\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    result = 0\n    for i in range(a):\n        result += (a*a)\n    return result\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    square = a**2\n    return square\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return(4 * a**2)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if not a:\n        return 0\n    elif len(a) == 1:\n        return a[0] * 4\n    else:\n        return 4 * (len(a) - 1) + square_perimeter(a[1:len(a)])\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Your code here\n    return 4 * len(str(a))\n    \n    \n    # You should not change the code in or below\n    return 4 * (len(str(a))"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * len(a)\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2 + a * 2\n    \ndef is_square(a):\n    '''\n    Write a function that returns whether a given input is a square or not.\n    '''\n    return a ** 2 == a * 2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    for i in range(a):\n        perimeter += (a - i) * 4\n    return perimeter\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return string.replace(string[0], \"\").replace(string[0], \"\")\n    \ndef list_to_str(list):\n    '''\n    Write a function to convert the list to string\n    '''\n    return \"\".join(list)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    res = []\n    for i in range(len(string)):\n        if(string[i] not in res):\n            res.append(string[i])\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # get a list of all characters in the string\n    chars = list(string)\n    # loop through string and remove characters from the string\n    for char in chars: \n        # check if the char is in the second string\n        if char in chars: \n            # if it is, replace it with a space\n            chars[chars.index(char)] = \" \"\n    # return the list\n    return chars\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return_string = ''\n    for i in range(0, len(string)): \n        if string[i] in CHARACTERS:\n            return_string += string[i]\n    return return_string\ndef generate_key_pair():\n    '''\n    Generates a random keypair using the name of the module it is in.\n    '''\n    key_pair = key_pair[0]\n    return key_pair\ndef encrypt(key_pair,message):\n    '''\n    Encrypts a message using the public key of the module.\n    '''\n    cipher_text = []\n    for i in range(0,len(message)):\n        cipher_text.append(key_pair.encrypt(message[i].encode()))\n    return cipher_text\ndef decrypt(key_pair,message):\n    '''\n    Decrypts a message using the private key of the module.\n    '''\n    plain_text = []\n    for i in range(0,len(message)):\n        plain_text.append(key_pair.decrypt(message[i].encode()).decode())\n    return plain_text\ndef main():\n    '''\n    Main function.\n    '''\n    key_pair = generate_key_pair()\n    message = input(\"Enter the message to be encrypted:\\n\")\n    cipher_text = encrypt(key_pair,message)\n    print(\"Cipher Text:\\n\",cipher_text)\n    print(\"\\nDecrypted Text:\\n\",decrypt(key_pair,cipher_text))\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string.lower() if char not in set(string.lower())]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp = list()\n    for i in range(len(string)):\n        if string[i] in temp:\n            temp.remove(string[i])\n    return temp\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    for char in string:\n        if char not in res:\n            res.append(char)\n    return ''.join(res)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in string:\n        if i in string:\n            list.append(i)\n    return list\ndef list_to_str(list):\n    '''\n    Write a function to replace the characters present in the first list with the characters present in the second list.\n    '''\n    string = \"\"\n    for i in list:\n        string += i\n    return string\ndef decode(string):\n    '''\n    Encodes the string using the mapping in the table.\n    '''\n    string = list_to_str(string)\n    list = str_to_list(string)\n    for i in range(0, len(list), 2):\n        letter = list[i]\n        list[i] = list[i + 1]\n        list[i + 1] = letter\n    string = list_to_str(list)\n    print(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ls = []\n    ls_1 = []\n    for x in string:\n        if x not in ls:\n            ls_1.append(x)\n        else:\n            ls.append(x)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp_list = []\n    for i in range(len(string)):\n        if string[i] in temp_list:\n            continue\n        else:\n            temp_list.append(string[i])\n    return temp_list\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    array = []\n    for i in range(n):\n        array.append(arraynums[i])\n    dup_list = set(array)\n    print(dup_list)\n    if dup_list == set(array):\n        print('true')\n    else:\n        print('false')\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Your code here\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    #print(arraynums)\n    for num in arraynums:\n        if num in arraynums:\n            print(\"Duplicate\")\n            return True\n        else:\n            print(\"No Duplicate\")\n            return False"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        check_for = i\n        print(check_for)\n        if len(check_for) == len(arraynums) - 1:\n            print('Yes')\n            return check_for\n        elif len(check_for) == len(arraynums) - 1:\n            print('No')\n            return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    print(arraynums)\n    duplicates = []\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            duplicates.append(i)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # set all elements equal to the elements in array\n    sums = set(arraynums)\n    # check if any element is equal to the duplicate element\n    dups = any(sums.symmetric_difference(arraynums))\n    if dups == True:\n        return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(\"Testing duplicates function\")\n    print(\"\\nChecking for duplicates:\")\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if arraynums[i] == arraynums[j] or arraynums[i] not in arraynums:\n                print(arraynums[i], \"and\", arraynums[j])\n    print(\"\\nNot using duplicates\")\n    print(\"\\nTesting duplicates:\")\n    print(\"\\nChecking for duplicates:\")\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if arraynums[i] == arraynums[j] or arraynums[i] not in arraynums:\n                print(arraynums[i], \"and\", arraynums[j])\n    print(\"\\nNot using duplicates\")\n    \n    \n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_array = set(arraynums)\n    return unique_array\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    testlist = arraynums[:]\n    newarray = []\n    for num in arraynums:\n        if num not in newarray:\n            newarray.append(num)\n    return len(newarray) > 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Your code here\n    return x % 2 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x = int(x)\n    if (x % 2 == 0):\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True\n    \ndef is_nok(x): \n    '''\n    Write a function to check if the given number is no ko or not.\n    '''\n    return True\n    \ndef is_liquor(x): \n    '''\n    Write a function to check if the given number is liquor or not.\n    '''\n    return True\n    \ndef is_gold_liquor(x): \n    '''\n    Write a function to check if the given number is gold liquor or not.\n    '''\n    return True\n    \ndef is_emission(x): \n    '''\n    Write a function to check if the given number is emission or not.\n    '''\n    return True\n    \ndef is_dew_emission(x): \n    '''\n    Write a function to check if the given number is dew emission or not.\n    '''\n    return True\n    \ndef is_dew_liquor(x): \n    '''\n    Write a function to check if the given number is dew liquor or not.\n    '''\n    return True\n    \ndef is_flug_flup(x): \n    '''\n    Write a function to check if the given number is flug flup or not.\n    '''\n    return True\n    \ndef is_crescent_flug_flup(x): \n    '''\n    Write a function to check if the given number is crescent flug flup or not.\n    '''\n    return True\n    \ndef is_glow_flug_flup(x): \n    '''\n    Write a function to check if the given number is glow flug flup or not.\n    '''\n    return True\n    \ndef is_tentative_flug_flup(x): \n    '''\n    Write a function to check if the given number is tentative flug flup or not.\n    '''\n    return True\n    \ndef is_flug_flup(x): \n    '''\n    Write a function to check if the given number is flug flup or not.\n    '''\n    return True\n    \ndef is_dew_flug_flup(x): \n    '''\n    Write a function to check if the given number is dew flug flup or not.\n    '''\n    return True\n    \ndef is_dew_flug_spoon(x): \n    '''\n    Write a function to check if the given number is dew flug spoon or not.\n    '''\n    return True\n    \ndef is_dew_flug_spoon_al(x): \n    '''\n    Write a function to check if the given number is dew flug spoon al or not.\n    '''\n    return True\n    \ndef is_crescent_flug_spoon(x): \n    '''\n    Write a function to check if the given number is crescent flug spoon or not.\n    '''\n    return True\n    \ndef is_glow_flug_spoon(x): \n    '''\n    Write a function to check if the given number is glow flug spoon or not.\n    '''\n    return True\n    \ndef is_tentative_flug_spoon(x): \n    '''\n    Write a function to check if the given number is tentative flug spoon or not.\n    '''\n    return True\n    \ndef is_flug_spoon(x): \n    '''\n    Write a function to check if the given number is flug spoon or not.\n    '''\n    return True\n    \ndef is_dew_flug_spoon(x): \n    '''\n    Write a function to check if the given number is dew flug spoon or not.\n    '''\n    return True\n    \ndef is_dew_flug_spoon_al(x): \n    '''\n    Write a function to check if the given number is dew flug spoon al or not.\n    '''\n    return True\n    \ndef is_crescent_flug_spoon(x): \n    '''\n    Write a function to check if the given number is crescent flug spoon or not.\n    '''\n    return True\n    \ndef is_glow_flug_spoon(x): \n    '''\n    Write a function to check if the given number is glow flug spoon or not.\n    '''\n    return True\n    \ndef is_tentative_flug_spoon(x): \n    '''\n    Write a function to check if the given number is tentative flug spoon or not.\n    '''\n    return True\n    \ndef is_flug_spoon(x): \n    '''\n    Write a function to check if the given number is flug spoon or not.\n    '''\n    return True\n    \ndef is_dew_flug_spoon(x): \n    '''\n    Write a function to check if the given number is dew flug spoon or not.\n    '''\n    return True\n    \ndef is_dew_flug_spoon_al(x): \n    '''\n    Write a function to check if the given number is dew flug spoon al or not.\n    '''\n    return True\n    \ndef is_crescent_flug_spoon(x): \n    '''\n    Write a function to check if the given number is crescent flug spoon or not.\n    '''\n    return True\n    \ndef is_glow_flug_spoon(x): \n    '''\n    Write a function to check if the given number is glow flug spoon or not.\n    '''\n    return True\n    \ndef is_tentative_flug_spoon(x): \n    '''\n    Write a function to check if the given number is tentative flug spoon or not.\n    '''\n    return True\n    \ndef is_flug_spoon(x): \n    '''\n    Write a function to check if the given number is flug spoon or not.\n    '''\n    return True\n    \ndef is_dew_flug_spoon(x): \n    '''\n    Write a function to check if the given number is dew flug spoon or not.\n    '''\n    return True\n    \ndef is_dew_flug_spoon_al(x): \n    '''\n    Write a function to check if the given number is dew flug spoon al or not.\n    '''\n    return True\n    \ndef is_crescent_flug_spoon(x): \n    '''\n    Write a function to check if the given number is crescent flug spoon or not.\n    '''\n    return True\n    \ndef is_glow_flug_spoon(x): \n    '''\n    Write a function to check if the given number is glow flug spoon or not.\n    '''\n    return True\n    \ndef is_tentative_flug_spoon(x): \n    '''\n    Write a function to check if the given number is tentative flug spoon or not.\n    '''\n    return True\n    \ndef is_flug_spoon(x): \n    '''\n    Write a function to check if the given number is flug spoon or not.\n    '''\n    return True\n    \ndef is_dew_flug_spoon(x): \n    '''\n    Write a function to check if the given number is dew flug spoon or not.\n    '''\n    return True\n    \ndef is_dew_flug_spoon_al(x): \n    '''\n    Write a function to check if the given number is dew flug spoon al or not.\n    '''\n    return True\n    \ndef is_crescent_flug_spoon(x): \n    '''\n    Write a function to check if the given number is crescent flug spoon or not.\n    '''\n    return True\n    \ndef is_glow_flug_spoon(x): \n    '''\n    Write a function to check if the given number is glow flug spoon or not.\n    '''\n    return True\n    \ndef is_tentative_flug_spoon(x): \n    '''\n    Write a function to check if the given number is tentative flug spoon or not.\n    '''\n    return True\n    \ndef is_flug_spoon(x): \n    '"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x <= 0:\n        return False\n    if x <= 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return(x % 4 == 0 and x % 5 == 0) \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 'woodball' in str(x)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) if int(str(num)[::-1]) < num else int(str(num)[::-2])\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_str = \"\"\n    for i in str(num):\n        rev_str += i\n    if rev_str == str(num)[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = list(str(num))\n    for i in range(len(num)):\n        if int(num[i]) == 2:\n            num[i] = 3\n    return int(\"\".join(num))\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    def rev1(num):\n        '''\n        Function to reverse the number by only two digits\n        '''\n        n = len(num)\n        for i in range(n-2):\n            num[i] = str(int(num[i])*2)\n        return num\n    rev2 = \"\"\n    for i in range(n):\n        rev2 += num[i]\n    for i in range(n-1, -1, -2):\n        num[i] = str(int(num[i])*2)\n    return rev2+num[0]\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    return int(num)==(int(num)-2)\n    "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        dig = num % 10\n        rev_num += (dig * 10)\n        num = num // 10\n    if rev_num == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_rev = int(str(num)[::-1])\n    if num_rev < 2*num:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = int(num)\n    rev_num = 0\n    while num > 0:\n        if num % 2 == 0:\n            rev_num = rev_num * 10 + num % 10\n        else:\n            rev_num = rev_num * 10 + (num % 10)\n        num = num // 10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num > 0:\n        num = num*-1\n        num = num/2\n        rev(num)\n    else:\n        num = -1*num\n        rev(num)\n    return num\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = num * -1\n    rev2 = num * -2\n    return int(rev2 == rev)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    for i in range(len(arr)) :\n        for j in range(i+1, len(arr)) :\n            temp = arr[i] * arr[j]\n            if temp > max :\n                max = temp\n                \n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) < 1 : \n        return 0 \n    if arr[0]!= 1 : \n        arr = [i-1 for i in arr]\n    return find_Max_Num(arr[1:]) + arr[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Initialize the count variable to 0\n    count = 0\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    res = \"\"\n    n = 0\n    for i in range(len(arr)):\n        if(arr[i]!= 0):\n            res = res + str(arr[i])\n        if(arr[i] == 0):\n            if(n == 0):\n                res = \"0\" + res\n                n = 1\n            else:\n                res = \"0\" + res\n                n = 0\n        if(arr[i] == 1):\n            if(n == 0):\n                res = \"1\" + res\n                n = 1\n            else:\n                res = \"1\" + res\n                n = 0\n    return res\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    i = 0\n    while i < len(arr) : \n        # if there are 5 digits in the number \n        if arr[i] == '5' : \n            # remove the 5 from arr \n            arr.remove('5') \n            # iterate over the arr \n            j = 0 \n            while j < len(arr) : \n                # if there is a 5 in the arr \n                if arr[j] == '5' : \n                    arr.remove(arr[j]) \n                    # remove it from the arr \n                    arr.remove(arr[j]) \n                    # decrease the value of arr \n                    arr.remove(arr[j]) \n                    # increase the index of arr \n                    i = i + 1 \n                j = j + 1\n        # if there is any other digit in the arr \n        else : \n            i = i + 1\n    # if there are no more digits \n    if len(arr) == 0 : \n        return -1\n    else : \n        # return the max num \n        return max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    MaxNum = -1\n    max_num = 0\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = arr[0]\n    for i in arr[1:]:\n        if i > max :\n            max = i\n    return max\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest_num = arr[0]\n    for i in range(1,len(arr)) : \n        if(arr[i] > largest_num) :\n            largest_num = arr[i]\n    return largest_num \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                if arr[i] + arr[j] + arr[k] > max_num :\n                    max_num = arr[i] + arr[j] + arr[k]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    from itertools import permutations\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if both numbers are negative \n    if x<0:\n        return False\n    # if both numbers are positive\n    elif y<0:\n        return True\n    # otherwise there are no negatives\n    else:\n        return False\n    # if both numbers are equal\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return False\n    elif x > 0 and y < 0:\n        return False\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return x - y\n    else: \n        return y - x\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 or y < 0 or x > 2 * math.pi or y > 2 * math.pi: \n        print(\"Elements must be between -pi and pi\") \n        return False \n    else: \n        return True \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y<0 or x>0 and y>0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        print('1')\n    elif x < y:\n        print('0')\n    else:\n        print('0')\n        \n        \ndef main():\n    '''\n    The main function of this module.\n    '''\n    \n    while True:\n        print(\"Options:\\n1. Check the opponent's sign\\n2. Check the opponent's sign\\n3. Check the opponent's sign\\n4. Check the opposite signs of the two numbers.\\n5. Check the opposite signs of the two numbers\\n6. Check the opposite signs of the two numbers\\n7. Check the opposite signs of the two numbers\\n8. Check the opposite signs of the two numbers\\n9. Check the opposite signs of the two numbers\\n10. Check the opposite signs of the two numbers\\n0. Exit\")\n        user_option = int(input(\"Enter your option : \"))\n        \n        if user_option == 1:\n            opponent_Signs()\n            \n        elif user_option == 2:\n            opponent_Signs()\n            \n        elif user_option == 3:\n            opponent_Signs()\n            \n        elif user_option == 4:\n            opponent_Signs()\n            \n        elif user_option == 5:\n            opponent_Signs()\n            \n        elif user_option == 6:\n            opponent_Signs()\n            \n        elif user_option == 7:\n            opponent_Signs()\n            \n        elif user_option == 8:\n            opponent_Signs()\n            \n        elif user_option == 9:\n            opponent_Signs()\n            \n        elif user_option == 10:\n            opponent_Signs()\n            \n        elif user_option == 0:\n            break\n    \n    \nmain()\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y :\n        return True\n    if x < y :\n        return False\n    if x == y :\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # initialize variable\n    if x < 0:\n        return False\n    if y < 0:\n        return True\n    else:\n        return x > y \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y < 0) or (x < 0 and y >= 0): \n        return True\n    elif (x > 0 and y < 0) or (x > 0 and y >= 0): \n        return False\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    opposite = x < y \n    return opposite \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if (n == 0): \n        return 0\n    \n    # If the number is divisible by 3, return 1 \n    if (n % 3 == 0): \n        return 1\n    \n    # Otherwise, find the number of 3's \n    # and multiply them together \n    else: \n        return n * is_octagonal(n - 1) \n        \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(n+1))//2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 0 \n    else: \n        return (n*(n+1))//2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 2:\n        return n\n    elif n == 3:\n        return 6\n    else:\n        a = int(n/3)\n        b = int((n-a)/3)\n        ans = a + b\n        return ans\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    n = int(n)\n    while i <= n:\n        j = 0\n        while j <= i:\n            if i%j == 0:\n                break\n            j += 1\n        if j == i:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    l = n-1\n    while l>=3: \n        if l%3 == 0:\n            return l\n        l -= 2\n    return -1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n + 1) * (n + 2) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sq = int(n*n) \n    fact = (1+sq)**.5\n    return fact\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # get the first 3 digits\n    x = n % 10\n    \n    # if there is no more digits, then the number is an octagonal\n    if x == 0:\n        return None\n    \n    # return the value\n    return x * x\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n**0.5)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        for j in range(i+1,len(s)):\n            if (s[i] == s[j]):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    s=list(s)\n    for i in range(len(s)):\n        if s[i]=='0':\n            for j in range(i,len(s)):\n                if s[j]=='0':\n                    count+=1\n                    break\n        else:\n            for j in range(i,len(s)):\n                if s[j]==s[i]:\n                    count+=1\n                    break\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # your code goes here\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if int(s[i:j+1]) == int(s[i-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = {}\n    for c in s:\n        if c in m:\n            m[c] += 1\n        else:\n            m[c] = 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans = 0\n    for key, value in m.items():\n        if value == len(s):\n            ans += 1\n    return ans\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    m = defaultdict(int)\n    for c in s:\n        m[c] += 1\n    ans "
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def countSubstring(s):\n        counter = 0\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i:j+1].isdigit():\n                    counter += 1\n        return counter\n    \n    def countSubstrings(s):\n        if not s:\n            return 0\n        cnt = 1\n        prev = s[0]\n        for i in range(1, len(s)):\n            if prev == s[i]:\n                cnt += 1\n            else:\n                cnt = 1\n                prev = s[i]\n        return cnt\n    \n    count = 0\n    for i in range(1, len(s)):\n        count += countSubstring(s[i:])\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    return n - sum(map(lambda i : (i > 0) and (s[i] == s[i+1]), range(n-1)))"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    #print(d)\n    \n    for i in range(len(s)):\n        #print(s[i])\n        #print(len(s[i]))\n        d[s[i]] += 1\n        #print(d)\n    #print(d)\n    \n    for k, v in d.items():\n        #print(k, v)\n        if v == 0:\n            return 0\n        else:\n            return v\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        #check all the digits\n        #num = s[i:i+6]\n        if int(s[i:i+6]) == int(s[i:i+7]):\n            #num = s[i:i+6]\n            #num = sum(str(int(num)))\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # get the length of the string\n    length = len(s)\n    # count each digits in the string\n    count = 0\n    for i in range(0,length):\n        count += int(s[i])\n    # return the number of substrings that sum to the length\n    return count\ndef check_Balanced(s):\n    '''\n    Write a python function to check if a given string is a balanced palindrome or not.\n    '''\n    # initialize a variable to store the count of substrings\n    count = 0\n    # loop through the string and check if the number of digits is equal to the length of string\n    for i in range(0,len(s)):\n        count += int(s[i])\n    # check if the number of digits in the string is equal to the length of the string\n    if count == len(s):\n        # if the length of the string is odd, return false\n        if count & 1:\n            return False\n        # if the length of the string is even, return true\n        else:\n            return True\n    else:\n        # if the number of digits is not equal to the length of the string, return false\n        return False\ndef is_palindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    # initialize a variable to store the count of substrings\n    count = 0\n    # loop through the string and check if the number of digits is equal to the length of string\n    for i in range(0,len(s)):\n        count += int(s[i])\n    # check if the number of digits in the string is equal to the length of the string\n    if count == len(s):\n        # if the length of the string is odd, return false\n        if count & 1:\n            return False\n        # if the length of the string is even, return true\n        else:\n            return True\n    else:\n        # if the number of digits is not equal to the length of the string, return false\n        return False\ndef check_Palindrome(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    # initialize a variable to store the count of substrings\n    count = 0\n    # loop through the string and check if the number of digits is equal to the length of string\n    for i in range(0,len(s)):\n        count += int(s[i])\n    # check if the number of digits in the string is equal to the length of the string\n    if count == len(s):\n        # if the length of the string is odd, return false\n        if count & 1:\n            return False\n        # if the length of the string is even, return true\n        else:\n            return True\n    else:\n        # if the number of digits is not equal to the length of the string, return false\n        return False\ndef is_Palindrome_double(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    # initialize a variable to store the count of substrings\n    count = 0\n    # loop through the string and check if the number of digits is equal to the length of string\n    for i in range(0,len(s)):\n        count += int(s[i])\n    # check if the number of digits in the string is equal to the length of the string\n    if count == len(s):\n        # if the length of the string is odd, return false\n        if count & 1:\n            return False\n        # if the length of the string is even, return true\n        else:\n            return True\n    else:\n        # if the number of digits is not equal to the length of the string, return false\n        return False\ndef check_Palindrome_double(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    # initialize a variable to store the count of substrings\n    count = 0\n    # loop through the string and check if the number of digits is equal to the length of string\n    for i in range(0,len(s)):\n        count += int(s[i])\n    # check if the number of digits in the string is equal to the length of the string\n    if count == len(s):\n        # if the length of the string is odd, return false\n        if count & 1:\n            return False\n        # if the length of the string is even, return true\n        else:\n            return True\n    else:\n        # if the number of digits is not equal to the length of the string, return false\n        return False\ndef is_Palindrome_trunc(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    # initialize a variable to store the count of substrings\n    count = 0\n    # loop through the string and check if the number of digits is equal to the length of string\n    for i in range(0,len(s)):\n        count += int(s[i])\n    # check if the number of digits in the string is equal to the length of the string\n    if count == len(s):\n        # if the length of the string is odd, return false\n        if count & 1:\n            return False\n        # if the length of the string is even, return true\n        else:\n            return True\n    else:\n        # if the number of digits is not equal to the length of the string, return false\n        return False\ndef check_Palindrome_trunc(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    # initialize a variable to store the count of substrings\n    count = 0\n    # loop through the string and check if the number of digits is equal to the length of string\n    for i in range(0,len(s)):\n        count += int(s[i])\n    # check if the number of digits in the string is equal to the length of the string\n    if count == len(s):\n        # if the length of the string is odd, return false\n        if count & 1:\n            return False\n        # if the length of the string is even, return true\n        else:\n            return True\n    else:\n        # if the number of digits is not equal to the length of the string, return false\n        return False\ndef is_Palindrome_trunc_double(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    # initialize a variable to store the count of substrings\n    count = 0\n    # loop through the string and check if the number of digits is equal to the length of string\n    for i in range(0,len(s)):\n        count += int(s[i])\n    # check if the number of digits in the string is equal to the length of the string\n    if count == len(s):\n        # if the length of the string is odd, return false\n        if count & 1:\n            return False\n        # if the length of the string is even, return true\n        else:\n            return True\n    else:\n        # if the number of digits is not equal to the length of the string, return false\n        return False\ndef check_Palindrome_trunc_double(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    # initialize a variable to store the count of substrings\n    count = 0\n    # loop through the string and check if the number of digits is equal to the length of string\n    for i in range(0,len(s)):\n        count += int(s[i])\n    # check if the number of digits in the string is equal to the length of the string\n    if count == len(s):\n        # if the length of the string is odd, return false\n        if count & 1:\n            return False\n        # if the length of the string is even, return true\n        else:\n            return True\n    else:\n        # if the number of digits is not equal to the length of the string, return false\n        return False\ndef is_Palindrome_trunc_double_2(s):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    # initialize a variable to store the count of substrings\n    count = 0\n    # loop through th"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    table = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n):\n            sub = s[i:j]\n            sum = sum(map(int, sub))\n            if sum == n:\n                table[sub] += 1\n    return table\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min_num:\n            min_num = xs[i]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # get the smallest value\n    min = xs[0]\n    # for every number in the list\n    for i in xs:\n        # if number is smaller\n        if i < min:\n            # update the smallest number\n            min = i\n    # return the smallest number\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    nums = []\n    for x in xs:\n        nums.append(x)\n    nums.sort()\n    return nums[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Write your code here.\n    smallest = xs[0]\n    smallest_index = 0\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls = []\n    for i in xs:\n        if i not in ls:\n            ls.append(i)\n    ls.sort()\n    return ls[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min:\n            min = xs[i]\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    ls = list(xs)\n    return ls[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    min_value = xs[0]\n    for i in range(len(xs)):\n        if xs[i] < min_value:\n            min_value = xs[i]\n    return min_value\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - i - 1):\n            if abs(test_list[i][j] - test_list[i][j + 1]) > max_difference:\n                max_difference = abs(test_list[i][j] - test_list[i][j + 1])\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    first_index = 0\n    second_index = 0\n    while first_index < len(test_list) - 1 and second_index < len(test_list):\n        if test_list[first_index] <= test_list[second_index]:\n            test_list[first_index + 1] = max(test_list[first_index], test_list[second_index])\n            first_index += 1\n        else:\n            test_list[second_index + 1] = max(test_list[first_index], test_list[second_index])\n            second_index += 1\n    \n    return max(test_list) - min(test_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum_difference = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (i!= j and test_list[i][0] - test_list[j][0] > maximum_difference):\n                maximum_difference = test_list[i][0] - test_list[j][0]\n    return maximum_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = test_list[0] - test_list[1]\n    for item in test_list:\n        if item - max_difference < max_difference:\n            max_difference = item - max_difference\n    return max_difference\n    \ndef main():\n    # List of tuples\n    test_list = [(0,1), (1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9), (9,10), (10,11), (11,12), (12,13), (13,14), (14,15), (15,16), (16,17), (17,18), (18,19), (19,20), (20,21), (21,22), (22,23), (23,24), (24,25), (25,26), (26,27), (27,28), (28,29), (29,30), (30,31), (31,32), (32,33), (33,34), (34,35), (35,36), (36,37), (37,38), (38,39), (39,40), (40,41), (41,42), (42,43), (43,44), (44,45), (45,46), (46,47), (47,48), (48,49), (49,50), (50,51), (51,52), (52,53), (53,54), (54,55), (55,56), (56,57), (57,58), (58,59), (59,60), (60,61), (61,62), (62,63), (63,64), (64,65), (65,66), (66,67), (67,68), (68,69), (69,70), (70,71), (71,72), (72,73), (73,74), (74,75), (75,76), (76,77), (77,78), (78,79), (79,80), (80,81), (81,82), (82,83), (83,84), (84,85), (85,86), (86,87), (87,88), (88,89), (89,90), (90,91), (91,92), (92,93), (93,94), (94,95), (95,96), (96,97), (97,98), (98,99), (99,100), (100,101), (101,102), (102,103), (103,104), (104,105), (105,106), (106,107), (107,108), (108,109), (109,110), (110,111), (111,112), (112,113), (113,114), (114,115), (115,116), (116,117), (117,118), (118,119), (119,120), (120,121), (121,122), (122,123), (123,124), (124,125), (125,126), (126,127), (127,128), (128,129), (129,130), (130,131), (131,132), (132,133), (133,134), (134,135), (135,136), (136,137), (137,138), (138,139), (139,140), (140,141), (141,142), (142,143), (143,144), (144,145), (145,146), (146,147), (147,148), (148,149), (149,150), (150,151), (151,152), (152,153), (153,154), (154,155), (155,156), (156,157), (157,158), (158,159), (159,160), (160,161), (161,162), (162,163), (163,164), (164,165), (165,166), (166,167), (167,168), (168,169), (169,170), (170,171), (171,172), (172,173), (173,174), (174,175), (175,176), (176,177), (177,178), (178,179), (179,180), (180,181), (181,182), (182,183), (183,184), (184,185), (185,186), (186,187), (187,188), (188,189), (189,190), (190,191), (191,192), (192,193), (193,194), (194,195), (195,196), (196,197), (197,198), (198,199), (199,200), (200,201), (201,202), (202,203), (203,204), (204,205), (205,206), (206,207), (207,208), (208,209), (209,210), (210,211), (211,212), (212,213), (213,214), (214,215), (215,216), (216,217), (217,218), (218,219), (219,220), (220,221), (221,222), (222,223), (223,224), (224,225), (225,226), (226,227), (227,228), (228,229), (229,230), (230,231), (231,232), (232,233), (233,234), (234,235), (235,236), (236,237), (237,238), (238,239), (239,240), (240,241), (241,242), (242,243), (243,244), (244,245), (245,246), (246,247), (247,248), (248,249), (249,250), (250,251), (251,252), (252,253), (253,254), (254,255), (255,256), (256,257), (257,258), (258,259), (259,260), (260,261), (261,262), (262,263), (263,264), (264,265), (265,266), (266,267), (267,268), (268,269), (269,270), (270,271), (271,272), (272,273), (273,274), (274,275), (275,276), (276,277), (277,278), (278,279), (279,280), (280,281), (281,282), (282,283), (283,284), (284,285), (285,286), (286,287), (287,288), (288,289), (289,290), (290,291), (291,292), (292,293), (293,294), (294,295), (295,296), (296,297), (297,298), (298,299), (299,300), (300,301), (301,302), (302,303), (303,304), (304,305), (305,306), (306,307), (307,308), (308,309), (309,310), (310,311), (311,312), (312,313), (313,314), (314,315), (315,316), (316,317), (317,318), (318,319), (319,320), (320,321), (321,322), (322,323), (323,324), (324,325), (325,326), (326,327), (327,328), (328,329), (329,330), (330,331), (331,332), (332,333), (333,334), (334,335), (335,336), (336,337), (337,338), (338,339), (339,340), (340,341), (341,342), (342,343), (343,344), (344,345), (345,346), (346,347), (347,348), (348,349), (349,350), (350,351), (351,352), (352,353), (353,354), (354,355), (355,356), (356,357), (357,358), (358,359), (359,360), (360,361), (361,362), (362,363), (363,364), (364,365), (365,366), (366,367), (367,368), (368,369), (369,370), (370,371), (371,372), (372,373), (373,374), (374,375), (375,376), (376,377), (377,378), (378,379), (379,380), (380,381), (381,382), (382,383), (383,384), (384,385), (385"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    print('\\n', '#'*100, '\\n')\n    max = test_list[0]\n    diff = 0\n    for i in range(1, len(test_list)):\n        if max - test_list[i] > diff:\n            max = test_list[i]\n        elif max - test_list[i] < diff:\n            diff = max - test_list[i]\n    return max, diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create empty arrays of the same size\n    available_pairs = []\n    for i in range(0, len(test_list)):\n        available_pairs.append(test_list[i])\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code here\n    max_difference = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] + test_list[j] > max_difference:\n                max_difference = test_list[i] + test_list[j]\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    print(test_list)\n    max_difference = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            a, b = test_list[i], test_list[j]\n            if a < b:\n                a, b = b, a\n            if abs(a-b) > max_difference:\n                max_difference = abs(a-b)\n    print(max_difference)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in test_list:\n        for j in test_list:\n            if i > j:\n                max_difference = max(i - j, max_difference)\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diffs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diffs += abs(test_list[i] - test_list[j])\n    return diffs\n    \ntest_list = [(1,3,2), (2,3,1), (3,4,5), (1,1,1), (3,2,3)]\ntest_list2 = [(1,3,2), (2,3,1), (3,4,5), (1,1,1), (3,2,3)]\nprint(max_difference(test_list2))"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda subjectmarks: subjectmarks[1])"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key= lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(subjectmarks)\n    print(subjectmarks[0][1])\n    print(\"------\")\n    subjectmarks.sort(key=lambda tup: tup[1])\n    print(subjectmarks)\n    print(\"------\")\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    result=[]\n    for i in range(0,len(subjectmarks)):\n        for j in range(0,len(subjectmarks[i])):\n            if subjectmarks[i][j]>subjectmarks[i][1]:\n                subjectmarks[i][j],subjectmarks[i][1] = subjectmarks[i][1],subjectmarks[i][j]\n    for i in range(0,len(subjectmarks)):\n        result.append(subjectmarks[i])\n    return result"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list_of_tuples = [(tuple[1], tuple[0]) for tuple in subjectmarks]\n    list_of_tuples = sorted(list_of_tuples, reverse=True)\n    list_of_tuples = [(tuple[0], tuple[1]) for tuple in list_of_tuples]\n    return list_of_tuples\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # write your code here\n    import operator\n    return sorted(subjectmarks, key=operator.itemgetter(1))\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return None\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # case 1: only one list is provided\n    if len(data_list) <= 1:\n        return data_list\n    \n    # case 2: additional lists are provided\n    else:\n        # create a new list of lists\n        new_list = []\n        for num in data_list:\n            new_list.append(num)\n        \n        # recursively call the function\n        return recursive_list_sum(new_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write a recursive function to flatten a list and sum all of its elements.\n    # Note: Remember to use the map function to help your function\n    #       with lists.\n    sum_data = 0\n    #data_list = [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    for element in data_list:\n        if type(element) == list:\n            recursive_list_sum(element)\n            print(element)\n        else:\n            data_list.append(element)\n    return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened = []\n    for x in data_list:\n        for y in x:\n            flattened.append(y)\n    return sum(flattened)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    data_sum = 0\n    for el in data_list:\n        if type(el) is list:\n            data_sum += recursive_list_sum(el)\n    return data_sum\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \n    \n    \n    \n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i >= 0:\n            pos_count += 1\n    return pos_count\n    \n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos = pos + 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    result = 0\n    for i in list:\n        if i > 0:\n            result += 1\n    print(result)\n            \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    \n    result = 0\n    for i in list:\n        if i < 0:\n            result += 1\n    print(result)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n=0\n    for i in list:\n        if i > 0:\n            n+=1\n    print(n)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive_count = 0\n    for number in list:\n        if number > 0:\n            positive_count += 1\n    return positive_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for number in list:\n        if number > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for item in list:\n        if item >= 0:\n            positive += 1\n    return positive\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in list:\n        if i > 0:\n            positive += 1\n    print(\"Total positive numbers in list =\", positive)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # set up a dictionary to count how many ways to partition given numbers\n    d = dict()\n    for i in range(n+1):\n        d[i] = 0\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # n is the number of items in the set\n    # time complexity: O(n)\n    # space complexity: O(n)\n    return sum(set(bell_number(n-i) for i in range(1, n)))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 0\n    count = 0\n    for i in range(n,1,-1):\n        count += bell_number(i)\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n    \n    # write your code here\n    \n    \ndef bell_number_v2(n):\n    return bell_number_v1(n) + bell_number_v2(n-1)\n        \ndef bell_number_v1(n):\n    if n < 2:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number_v1(n-1) + bell_number_v1(n-2)\n    \ndef bell_number_v2(n):\n    return bell_number_v1(n) + bell_number_v2(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 2:\n        return n\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 0\n    # the base case: return the number of ways \n    # of numbers to partition the set (base case)\n    return (n - 1) // 2 + bell_number(n - 1) + bell_number(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    \n    if n == 1:\n        return 1\n        \n    if n == 2:\n        return 1\n        \n    if n == 3:\n        return 2\n    \n    if n == 4:\n        return 4\n    \n    return bell_number(n-2) + bell_number(n-1) + bell_number(n-3) + bell_number(n-4)\n    \n    \nprint(bell_number(5))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2: return 1\n    s = [0 for _ in range(n+1)]\n    s[1] = 1\n    for i in range(2, n+1):\n        if i % 2 == 0: s[i] = s[i//2] + s[i//2]\n        else: s[i] = s[i//2] + s[i//2 + 1]\n    return s[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def dfs(n,total,curr_count):\n        if curr_count == n:\n            return 1\n        \n        if total > n:\n            return 0\n        \n        if total < n:\n            return 0\n        \n        if n < 0:\n            return 0\n        \n        return dfs(n,total + sum(curr_count),curr_count + [])\n    \n    if n == 0:\n        return 1\n    \n    return dfs(n,0,0)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] < A[i+1]:\n            return False\n    return True\n    \ndef is_Strictly_increasing(A):\n    '''\n    Write a python function to check whether the given array is strictly increasing or not.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (A[0]!= A[1]) and (A[1]!= A[2]) and (A[2]!= A[3]) and (A[3]!= A[4]) and (A[4]!= A[5]) and (A[5]!= A[6]) and (A[6]!= A[7]) and (A[7]!= A[8]) and (A[8]!= A[9]) and (A[9]!= A[10]) and (A[10]!= A[11]) and (A[11]!= A[12]) and (A[12]!= A[13]) and (A[13]!= A[14]) and (A[14]!= A[15]) and (A[15]!= A[16]) and (A[16]!= A[17]) and (A[17]!= A[18]) and (A[18]!= A[19]) and (A[19]!= A[20]) and (A[20]!= A[21]) and (A[21]!= A[22]) and (A[22]!= A[23]) and (A[23]!= A[24]) and (A[24]!= A[25]) and (A[25]!= A[26]) and (A[26]!= A[27]) and (A[27]!= A[28]) and (A[28]!= A[29]) and (A[29]!= A[30]) and (A[30]!= A[31]) and (A[31]!= A[32]) and (A[32]!= A[33]) and (A[33]!= A[34]) and (A[34]!= A[35]) and (A[35]!= A[36]) and (A[36]!= A[37]) and (A[37]!= A[38]) and (A[38]!= A[39]) and (A[39]!= A[40]) and (A[40]!= A[41]) and (A[41]!= A[42]) and (A[42]!= A[43]) and (A[43]!= A[44]) and (A[44]!= A[45]) and (A[45]!= A[46]) and (A[46]!= A[47]) and (A[47]!= A[48]) and (A[48]!= A[49]) and (A[49]!= A[50]) and (A[50]!= A[51]) and (A[51]!= A[52]) and (A[52]!= A[53]) and (A[53]!= A[54]) and (A[54]!= A[55]) and (A[55]!= A[56]) and (A[56]!= A[57]) and (A[57]!= A[58]) and (A[58]!= A[59]) and (A[59]!= A[60]) and (A[60]!= A[61]) and (A[61]!= A[62]) and (A[62]!= A[63]) and (A[63]!= A[64]) and (A[64]!= A[65]) and (A[65]!= A[66]) and (A[66]!= A[67]) and (A[67]!= A[68]) and (A[68]!= A[69]) and (A[69]!= A[70]) and (A[70]!= A[71]) and (A[71]!= A[72]) and (A[72]!= A[73]) and (A[73]!= A[74]) and (A[74]!= A[75]) and (A[75]!= A[76]) and (A[76]!= A[77]) and (A[77]!= A[78]) and (A[78]!= A[79]) and (A[79]!= A[80]) and (A[80]!= A[81]) and (A[81]!= A[82]) and (A[82]!= A[83]) and (A[83]!= A[84]) and (A[84]!= A[85]) and (A[85]!= A[86]) and (A[86]!= A[87]) and (A[87]!= A[88]) and (A[88]!= A[89]) and (A[89]!= A[90]) and (A[90]!= A[91]) and (A[91]!= A[92]) and (A[92]!= A[93]) and (A[93]!= A[94]) and (A[94]!= A[95]) and (A[95]!= A[96]) and (A[96]!= A[97]) and (A[97]!= A[98]) and (A[98]!= A[99]) and (A[99]!= A[100]) and (A[100]!= A[101]) and (A[101]!= A[102]) and (A[102]!= A[103]) and (A[103]!= A[104]) and (A[104]!= A[105]) and (A[105]!= A[106]) and (A[106]!= A[107]) and (A[107]!= A[108]) and (A[108]!= A[109]) and (A[109]!= A[110]) and (A[110]!= A[111]) and (A[111]!= A[112]) and (A[112]!= A[113]) and (A[113]!= A[114]) and (A[114]!= A[115]) and (A[115]!= A[116]) and (A[116]!= A[117]) and (A[117]!= A[118]) and (A[118]!= A[119]) and (A[119]!= A[120]) and (A[120]!= A[121]) and (A[121]!= A[122]) and (A[122]!= A[123]) and (A[123]!= A[124]) and (A[124]!= A[125]) and (A[125]!= A[126]) and (A[126]!= A[127]) and (A[127]!= A[128]) and (A[128]!= A[129]) and (A[129]!= A[130]) and (A[130]!= A[131]) and (A[131]!= A[132]) and (A[132]!= A[133]) and (A[133]!= A[134]) and (A[134]!= A[135]) and (A[135]!= A[136]) and (A[136]!= A[137]) and (A[137]!= A[138]) and (A[138]!= A[139]) and (A[139]!= A[140]) and (A[140]!= A[141]) and (A[141]!= A[142]) and (A[142]!= A[143]) and (A[143]!= A[144]) and (A[144]!= A[145]) and (A[145]!= A[146]) and (A[146]!= A[147]) and (A[147]!= A[148]) and (A[148]!= A[149]) and (A[149]!= A[150]) and (A[150]!= A[151]) and (A[151]!= A[152]) and (A[152]!= A[153]) and (A[153]!= A[154]) and (A[154]!= A[155]) and (A[155]!= A[156]) and (A[156]!= A[157]) and (A[157]!= A[158]) and (A[158]!= A[159]) and (A[159]!= A[160]) and (A[160]!= A[161]) and (A[161]!= A[162]) and (A[162]!= A[163]) and (A[163]!= A[164]) and (A[164]!= A[165]) and (A[165]!= A[166]) and (A[166]!= A[167]) and (A[167]!= A[168]) and (A[168]!= A[169]) and (A[169]!= A[170]) and (A[170]!= A[171]) and (A[171]!= A[172]) and (A[172]!= A[173]) and (A[173]!= A[174]) and (A[174]!= A[175]) and (A[175]!= A[176]) and (A[176]!= A[177]) and (A[177]!= A[178]) and (A[178]!= A[179]) and (A[179]!= A[180]) and (A[180]!= A[181]) and (A[181]!= A[182]) and (A[182]!"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if (A[i] < A[i+1]): \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i - 1]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    print(is_Monotonic(A))\n    return is_Monotonic(A[1:])\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<2:\n        return False\n    else:\n        i=0\n        j=0\n        while i<len(A) and j<len(A):\n            if A[i]>A[j]:\n                i+=1\n            elif A[i]<A[j]:\n                j+=1\n            else:\n                return False\n        return True\nA=[2,4,6,1,5,2,3,6]\nprint(is_Monotonic(A))\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    N = len(A)\n    # Check rows\n    for i in range(N):\n        for j in range(N-i-1):\n            if A[j][0] > A[j+1][0] and A[j][1] < A[j+1][1]:\n                return False\n    # Check Columns\n    for i in range(N-1):\n        for j in range(N-1-i):\n            if A[j][0] < A[j+1][0] and A[j][1] > A[j+1][1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    def increasing_array(A):\n        if len(A) == 1:\n            return True\n        elif A[0] >= A[1]:\n            return increasing_array(A[1:])\n        else:\n            return False\n    print(increasing_array(A))\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    for i in range(n-1):\n        if A[i+1]<A[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l is None:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    j = len(l)\n    while i < j:\n        if l[i] == s[0]:\n            if len(l[i:]) > len(s):\n                return False\n            elif len(l[i:]) == len(s):\n                return True\n        i = i + 1\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)<len(s):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l[i:].startswith(s) for i in range(len(l)))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    subl = []\n    j = 0\n    while j < len(s):\n        if s[j] in l:\n            subl.append(s[j])\n            j = j + 1\n        else:\n            j = j + 1\n    return subl\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i+len(s)]==s for i in range(len(l)))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    while i < len(s):\n        if s[i:i+len(l)] == l:\n            return True\n        i += len(l)\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)):\n        if l[i]!= s[i]:\n            return False\n    return True\n    \n    \n    \nif __name__ == \"__main__\":\n    s = \"abc\"\n    a = [1, 2, 3, 4, 5]\n    print(is_sublist(a, s))"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Create a stack to maintain the stack where we are going to pop\n    stack = []\n    # Iterate over the given sublist\n    for i in range(len(s)):\n        # Pop the element from the stack\n        stack.pop()\n        # If the element is not there, we can append it to the stack\n        # as it is not a sublist\n        if not stack:\n            stack.append(s[i])\n        # If there is a sublist, we need to pop the element\n        # from the stack and check whether its a subset\n        else:\n            # Get the element from the stack and add it to the stack\n            # at the top of the stack\n            stack.append(s[i])\n            # Check whether the element is in the stack or not\n            # Check whether the stack is empty\n            if not stack:\n                return False\n            # Check if the element is not already in the stack\n            # if it is not in the stack, we push the element to\n            # stack\n            if s[i] not in stack:\n                stack.append(s[i])\n    # If the entire list is in the stack, then it is a subset\n    return True\n    \n    "
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # converting input to a list and removing unnecessary characters\n    Input = list(map(tuple, Input.split()))\n    \n    # checking if the lists are of equal length\n    if len(Input) == len(set(Input)):\n        return \"Tuple is empty.\"\n    \n    # checking if the lists are not empty or not\n    else:\n        return \"Invalid Input.\"\n    \n    return \"Completed!\"\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(Input) == len(set(Input))\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_length = len(Input)\n    for i in range(tuple_length):\n        for j in range(tuple_length):\n            if Input[i][0] == Input[j][0] and Input[i][1] == Input[j][1]:\n                return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    '''\n    Write a function to print all the given tuples.\n    '''\n    \n    '''\n    Write a function to print the number of pairs of each value in the given tuple.\n    '''\n    \n    \n    '''\n    Write a function to reverse a given tuple in a given order.\n    '''\n    \n    \n    '''\n    Write a function to check whether a given tuple has any duplicate numbers or not.\n    '''\n    \n    \n    '''\n    Write a function to print the even numbers from 1 to 100.\n    '''\n    \n    \n    \n    '''\n    Write a function to find the length of a tuple.\n    '''\n    \n    \n    \n    '''\n    Write a function to print the following tuples.\n    '''\n    \n    \n    \n    \n    \n    '''\n    Write a function to print the given tuple in a given order.\n    '''\n    \n    \n    \n    '''\n    Write a function to reverse a given tuple in a given order.\n    '''\n    \n    \n    \n    \n    '''\n    Write a function to count the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    '''\n    Write a function to find the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    '''\n    Write a function to find the number of odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    '''\n    Write a function to print the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    '''\n    Write a function to find the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to count the number of odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to check whether a given tuple has any duplicate numbers or not.\n    '''\n    \n    \n    \n    \n    \n    '''\n    Write a function to reverse a given tuple in a given order.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to count the number of odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to find the number of odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to find the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to count the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to count the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to find the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to find the number of odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to count the number of odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to find the number of odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to count the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to find the number of odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to count the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to count the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the odd numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to count the number of even numbers in a given tuple.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    '''\n    Write a function to print the even numbers in a given tuple.\n    '''\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(set(Input[i])):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #https://stackoverflow.com/questions/34676326/find-all-equal-length-tuples/34678323#34678323\n    if len(Input) == 0:\n        return True\n    \n    for i in range(len(Input)-1):\n        if Input[i]!= Input[i+1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 1:\n        return Input[0] == Input[0]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Input a tuple\n    tuple1 = (1, 2, 3)\n    tuple2 = (1, 2, 3, 4)\n    # loop through each tuple\n    for i in tuple1:\n        if tuple2.count(i)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        if len(Input) % 2 == 1:\n            return False\n        else:\n            return find_equal_tuple(Input[:len(Input)//2]) and find_equal_tuple(Input[len(Input)//2:])\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input=str(Input)\n    if len(Input)<=1:\n        return False\n    else:\n        for i in range(len(Input)):\n            for j in range(i+1,len(Input)):\n                if Input[i]!=Input[j]:\n                    return False\n        return True\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    len_nums = len(nums)\n    combs = [nums[0]]\n    for index in range(1, len_nums):\n        combs.append(nums[index] + nums[index-1])\n    nums = combs\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Traverse through all array elements\n    for j in range(len(nums)):\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) > 1:\n        mid = len(nums) // 2\n        left = nums[:mid]\n        right = nums[mid:]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_list = []\n    for i in range(len(nums)):\n        for j in range(len(nums) - i):\n            if nums[j] < nums[j+1]:\n                sorted_list.append(nums[j])\n                nums[j] = nums[j+1]\n                nums[j+1] = nums[j]\n    return sorted_list\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def comb(lst, p):\n        if p >= len(lst):\n            return\n        for i in range(p, len(lst)):\n            if lst[p] > lst[i]:\n                lst[i], lst[p] = lst[p], lst[i]\n                comb(lst, p)\n        return\n    comb(nums, 0)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        for j in range(n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Your code goes here\n    #raise NotImplementedError()\n    return n!= 0 and n!= 1\n    #raise NotImplementedError()\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        return (dif_Square(n-1) + dif_Square(n-2)) % 2 == 0\ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        return (dif_Square(n-1) - dif_Square(n-2)) % 2 == 0\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"Negative value\"\n    elif n > 99:\n        return \"Error: Numbers greater than 99 can't be represented as difference of two squares\"\n    elif n == 0:\n        return \"Square root of 0\"\n    else:\n        return 'Square root of'+ str(n ** 0.5) +'is'+ str(n ** 0.5)\n    \nprint(dif_Square(9))\nprint(dif_Square(8))\nprint(dif_Square(6))\nprint(dif_Square(5))\nprint(dif_Square(2))\nprint(dif_Square(0))\nprint(dif_Square(1))\nprint(dif_Square(2))"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq_1 = n * n\n    sq_2 = 2 * n\n    sq_3 = 3 * n\n    sq_4 = 4 * n\n    sq_5 = 5 * n\n    sq_6 = 6 * n\n    sq_7 = 7 * n\n    sq_8 = 8 * n\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        return'square is square'\n    elif n == 2:\n        return'square is not square'\n    elif n == 3:\n        return'square is 3 square'\n    elif n == 4:\n        return'square is 4 square'\n    elif n == 5:\n        return'square is 5 square'\n    elif n == 6:\n        return'square is 6 square'\n    elif n == 7:\n        return'square is 7 square'\n    elif n == 8:\n        return'square is 8 square'\n    elif n == 9:\n        return'square is 9 square'\n    elif n == 10:\n        return'square is 10 square'\n    else:\n        return 'not square'\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    dif = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(1, n//2 + 1):\n            dif += 1\n            if n % i == 0:\n                return dif\n        return dif\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    squares = []\n    square1 = 1\n    square2 = 1\n    for x in range(0,n+1):\n        square = x**2\n        squares.append(square)\n        square1 = square1 + square\n        square2 = square2 + square\n    if squares == [square1, square2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a=n*n\n    b=n*n\n    if (a>b) or (a<b):\n        print(\"Wrong input\")\n    else:\n        print(\"Right\")\ndef main(): \n    '''\n    Write a python function that checks whether the given input is a valid input or not.\n    '''\n    a=int(input(\"Input the number: \"))\n    b=int(input(\"Input the number: \"))\n    print(\"Right\")\n    if a>b:\n        print(\"Wrong input\")\n    elif a==b:\n        print(\"Right\")\n    elif a==b:\n        print(\"Right\")\n    else:\n        print(\"Wrong input\")\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if len(colors)!= len(pattern):\n            return False\n        for pattern_element in pattern:\n            if pattern_element not in colors:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for x in range(len(colors)):\n        if colors[x]!= patterns[x]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # read the first input\n    input_data = input(\"Enter the first input: \").split()\n    # read the second input\n    input_data.extend(input(\"Enter the second input: \").split())\n    # store the input data into a list\n    input_data = [int(i) for i in input_data]\n    # define the current index\n    index = 0\n    # start the recursive loop\n    while index < len(colors):\n        # check if current pattern is in the same pattern array\n        if colors[index] == input_data[index]:\n            index += 1\n        else:\n            # check if it is a new color\n            if index == len(input_data):\n                return True\n            # check if the current pattern is not in the same pattern array\n            else:\n                # if it is, save the index\n                if colors[index] not in patterns:\n                    # if it is not,\n                    # save the current index\n                    patterns.append(colors[index])\n                # if it is, increase the index\n                else:\n                    index += 1\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepattern(colors, pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    result = True\n    if len(colors) == len(patterns):\n        for x in range(len(colors)):\n            for y in range(len(patterns)):\n                if patterns[x][0] == colors[y]:\n                    if patterns[x][1]!= y:\n                        result = False\n    else:\n        result = False\n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    while i < len(patterns):\n        if patterns[i][0] > colors[i][0] and patterns[i][1] > colors[i][1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color, pattern in zip(colors, patterns):\n        for pos, char in enumerate(pattern):\n            if pos % 2 == 0:\n                if char!= color:\n                    return False\n            else:\n                if char!= color:\n                    return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        for j in range(i, len(colors)):\n            if colors[i]!= colors[j] and patterns[j][i] == 1:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i,col in enumerate(colors):\n        for j,pattern in enumerate(patterns):\n            if col == pattern[j]:\n                if i == j:\n                    return True\n                elif pattern[0] == col:\n                    return True\n                else:\n                    return False\n    return False\n        \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for pattern in patterns:\n        if colors == pattern:\n            return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    def is_group(lst, K):\n        return len(set(lst)) == len(lst) // K\n    \n    possibles = list(itertools.combinations(test_list, K))\n    # print(possibles)\n    res = []\n    for p in possibles:\n        if all(is_group(p, K) for p in possibles):\n            res.append(p)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][0] % test_list[j][0] == 0:\n                result_tuples.append([i, j])\n                break\n    return result_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for k_value in range(1,K+1):\n        for tuple_list in test_list:\n            if all(list(map(lambda element: element%k_value == 0, tuple_list))):\n                result.append(tuple_list)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple for tuple in test_list if all(tuple % i == 0 for i in range(1, K + 1) if tuple[0] % i == 0)]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = set()\n    for num, i in test_list:\n        if len(str(num)) % K == 0:\n            if num not in tuples:\n                tuples.add(num)\n    return tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    k_part = []\n    for tup in test_list:\n        if tup not in k_part:\n            k_part.append(tup)\n    return k_part\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [pair for pair in test_list if all(x % K == 0 for x in pair)]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for x in test_list:\n        for y in x:\n            if y % K == 0:\n                result.append(x)\n                break\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # put the list into a set\n    set_of_tuples = set(test_list)\n    # check whether all values are divisible by k\n    divisible = set_of_tuples.intersection(K)\n    if divisible:\n        return set(divisible)\n    return set()\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = int(n)\n    divisible = True\n    for i in range(2, int(x/2)+1):\n        if x%i == 0:\n            divisible = False\n            break\n    return divisible\n    \ndef is_Even(n):\n    '''\n    Write a python function to determine whether a number is even or odd.\n    '''\n    x = int(n)\n    if x%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    divide = 0\n    for i in n: \n        if int(i)%11 == 0: \n            divide += 1\n    if divide >= 2: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # write your code here\n    if n % 10 == 0: \n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\ndef is_Divisible(n): \n    '''\n    Write a python function to check whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n    \ndef Divisors(n):\n    '''\n    Return the list of divisors of a given number.\n    '''\n    lst=[]\n    for i in range(1,int(math.sqrt(n))+1):\n        if (n%i==0):\n            if (n//i==i):\n                lst.append(i)\n            else:\n                lst.append(i)\n                lst.append(n//i)\n    return lst\ndef GCD(x, y): \n    \"\"\" \n    Find the greatest common divisor of given numbers. \n    \"\"\"\n    while(y): \n        x, y = y, x % y \n    return x\ndef Divisors_set(n): \n    '''\n    Find the list of divisors of a given number.\n    '''\n    lst=[]\n    for i in range(1,int(math.sqrt(n))+1):\n        if (n%i==0):\n            if (n//i==i):\n                lst.append(i)\n            else:\n                lst.append(i)\n                lst.append(n//i)\n    return lst\ndef Divisors_set2(n): \n    '''\n    Find the list of divisors of a given number.\n    '''\n    lst=[]\n    for i in range(1,int(math.sqrt(n))+1):\n        if (n%i==0):\n            if (n//i==i):\n                lst.append(i)\n            else:\n                lst.append(i)\n                lst.append(n//i)\n    return lst\ndef Divisors_set3(n): \n    '''\n    Find the list of divisors of a given number.\n    '''\n    lst=[]\n    for i in range(1,int(math.sqrt(n))+1):\n        if (n%i==0):\n            if (n//i==i):\n                lst.append(i)\n            else:\n                lst.append(i)\n                lst.append(n//i)\n    return lst\ndef is_prime(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\n    \ndef is_prime2(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\n    \ndef is_prime3(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef is_prime4(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\n    \ndef is_prime5(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef is_prime6(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef is_prime7(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef is_prime8(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef is_prime9(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef is_prime10(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef is_prime11(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef is_prime12(n):\n    '''\n    Check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    l = 0\n    r = n\n    while r >= l:\n        if n % l == 0:\n            return True\n        l += 1\n        r -= 1\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0: \n        return True\n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_len = len(s)\n    if word_len % 2 == 0:\n        print (\"{} is even\".format(s))\n    else:\n        print (\"{} is odd\".format(s))\n        \nword_len(\"A man said something very funny to me.\")\nword_len(\"The quick brown fox jumped over the lazy dog\")\nword_len(\"The dog is the solution to an instance of the fire.\")"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1: \n        return \"Odd\"\n    return \"Even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #The word will only contain 'a', 'i', 'e', 'o', and 'l'\n    if(len(s)%2==1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    print(s)\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) <= 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    try:\n        len(s)\n        return False\n    except TypeError:\n        return True\n    \ndef square_root(x):\n    '''\n    Write a python function to square a number.\n    '''\n    try:\n        x = int(x)\n        if x > 0:\n            return x **.5\n        else:\n            return f\"{x} is not a positive integer\"\n    except ValueError:\n        return f\"{x} is not a positive integer\"\n    \ndef sum(x, y):\n    '''\n    Write a python function to add two numbers.\n    '''\n    try:\n        return x + y\n    except TypeError:\n        return f\"{x} is not a positive integer\"\n    \ndef product(x, y):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    try:\n        return x * y\n    except TypeError:\n        return f\"{x} is not a positive integer\"\n    \ndef mod(x, y):\n    '''\n    Write a python function to get the modulo of two numbers.\n    '''\n    try:\n        return x % y\n    except TypeError:\n        return f\"{x} is not a positive integer\"\n    \ndef div(x, y):\n    '''\n    Write a python function to get the divison of two numbers.\n    '''\n    try:\n        return x / y\n    except ZeroDivisionError:\n        return f\"{x} is not a positive integer\"\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome2(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef reversed_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef is_palidrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palidrome2(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palidrome3(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome4(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome5(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome6(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome7(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome8(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome9(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome10(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome11(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome12(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome13(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome14(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome15(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome16(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome17(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome18(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome19(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome20(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome21(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome22(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome23(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome24(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome25(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome26(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome27(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome28(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome29(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome30(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    for i in range(1,n+1):\n        if (n%i==0):\n            return i\n    return None\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    numbers=[]\n    for i in range(1,n+1):\n        if i%3==0:\n            numbers.append(i)\n    \n    return numbers\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    from itertools import permutations\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetra_n = 0\n    for x in range(n, n*(n+1)//2):\n        if x**2 + x + 1 in set(tetra_n):\n            tetra_n += 1\n    return tetra_n\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    result = []\n    for i in range(n): \n        result.append(sum(list(map(lambda x: x**3, list(range(i+1, n+1, 1))))))\n    return result[n-1]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    numbers = [1,3,5,7,9,11,13,17,19,23,29,31]\n    return numbers[n]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * tetrahedral_number(n - 1) + 3 * tetrahedral_number(n - 2) + n\n    \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i ** 2) * (i ** 2) + (i ** 4)\n    return sum\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    while n > a: \n        n -= a \n        a += 1\n    return a \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetra_number = n+1\n    for i in range(1,n+1): \n        if i**2!= n: \n            tetra_number = (tetra_number * i) % n \n    return tetra_number \n    \ndef tetra_number_range(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetra_number = 0\n    for i in range(1, n): \n        tetra_number = (tetra_number * i) % n \n    return tetra_number \n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Your code goes here\n    volume = 3.14*(r**2)\n    # Your code goes here\n    return volume\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4 * math.pi * r * r\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # return math.pi * r**2 * 3.14159\n    return 1/3.14159 * (2 * 3.14159 * r ** 2)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*math.pow(r,3)*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 3.14159 * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4*math.pi*r*r*math.pow(math.e,-3))/3\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    v = (4/3)*r*math.pi\n    print(\"The volume of a sphere with radius\",r,\"is\",v)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (r**3)/3\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef area_sphere(r):\n    '''\n    Write a function that finds the area of a sphere.\n    '''\n    return (4/3)*math.pi*r**2\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (1/3)*math.pi*r**3\ndef area_cube(r):\n    '''\n    Write a function that finds the area of a cube.\n    '''\n    return (1/3)*math.pi*r**2\ndef volume_cylinder(r,l):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    return (l**2/r**2)*math.pi\ndef area_cylinder(r,l):\n    '''\n    Write a function that finds the area of a cylinder.\n    '''\n    return (l**2/r**2)*math.pi\ndef volume_dodecahedron(r,l,h):\n    '''\n    Write a function that finds the volume of a dodecahedron.\n    '''\n    return (l**2/h**2)*math.pi\ndef area_dodecahedron(r,l,h):\n    '''\n    Write a function that finds the area of a dodecahedron.\n    '''\n    return (l**2/h**2)*math.pi\ndef volume_octahedron(r,l,h):\n    '''\n    Write a function that finds the volume of an octahedron.\n    '''\n    return (l**2/h**2)*math.pi\ndef area_octahedron(r,l,h):\n    '''\n    Write a function that finds the area of an octahedron.\n    '''\n    return (l**2/h**2)*math.pi\ndef volume_hexagon(r,l):\n    '''\n    Write a function that finds the volume of a hexagon.\n    '''\n    return (l**2/3)*math.pi\ndef area_hexagon(r,l):\n    '''\n    Write a function that finds the area of a hexagon.\n    '''\n    return (l**2/3)*math.pi\ndef volume_quadrilateral(r,l):\n    '''\n    Write a function that finds the volume of a quadrilateral.\n    '''\n    return (1/2)*math.pi*r*l**2\ndef area_quadrilateral(r,l):\n    '''\n    Write a function that finds the area of a quadrilateral.\n    '''\n    return (1/2)*math.pi*r*l**2\ndef volume_hexagon_kite(r,l):\n    '''\n    Write a function that finds the volume of a kite.\n    '''\n    return (l**2/3)*math.pi\ndef area_hexagon_kite(r,l):\n    '''\n    Write a function that finds the area of a kite.\n    '''\n    return (l**2/3)*math.pi\ndef volume_tetrahedron(r,l):\n    '''\n    Write a function that finds the volume of a tetrahedron.\n    '''\n    return (1/3)*math.pi*(r**2)*(l**2)\ndef area_tetrahedron(r,l):\n    '''\n    Write a function that finds the area of a tetrahedron.\n    '''\n    return (1/3)*math.pi*(r**2)*(l**2)\ndef volume_tetrahedron_sides(r,l):\n    '''\n    Write a function that finds the volume of a tetrahedron.\n    '''\n    return (1/3)*math.pi*(r**2)*(l**2)\ndef area_tetrahedron_sides(r,l):\n    '''\n    Write a function that finds the area of a tetrahedron.\n    '''\n    return (1/3)*math.pi*(r**2)*(l**2)\ndef volume_cuboctahedron(r,l,h):\n    '''\n    Write a function that finds the volume of a cuboctahedron.\n    '''\n    return (1/3)*math.pi*(r**2)*(l**2)*(h**3)\ndef area_cuboctahedron(r,l,h):\n    '''\n    Write a function that finds the area of a cuboctahedron.\n    '''\n    return (1/3)*math.pi*(r**2)*(l**2)*(h**3)\ndef volume_quadrilateral_kite(r,l):\n    '''\n    Write a function that finds the volume of a quadrilateral.\n    '''\n    return (l**2/3)*math.pi\ndef area_quadrilateral_kite(r,l):\n    '''\n    Write a function that finds the area of a quadrilateral.\n    '''\n    return (l**2/3)*math.pi\ndef volume_triangle(r,l):\n    '''\n    Write a function that finds the volume of a triangle.\n    '''\n    return (r*l**2)*math.pi\ndef area_triangle(r,l):\n    '''\n    Write a function that finds the area of a triangle.\n    '''\n    return (r*l**2)*math.pi\ndef volume_surface(r,l):\n    '''\n    Write a function that finds the volume of a surface.\n    '''\n    return (1/4)*math.pi*r**2*l**2\ndef area_surface(r,l):\n    '''\n    Write a function that finds the area of a surface.\n    '''\n    return (1/4)*math.pi*r**2*l**2\ndef volume_triangle_kite(r,l):\n    '''\n    Write a function that finds the volume of a triangle.\n    '''\n    return (1/6)*math.pi*(r**3)*(l**2)\ndef area_triangle_kite(r,l):\n    '''\n    Write a function that finds the area of a triangle.\n    '''\n    return (1/6)*math.pi*(r**3)*(l**2)\ndef volume_tetrahedron_kite(r,l,h):\n    '''\n    Write a function that finds the volume of a tetrahedron.\n    '''\n    return (1/6)*math.pi*(r**3)*(l**2)*(h**3)\ndef area_tetrahedron_kite(r,l,h):\n    '''\n    Write a function that finds the area of a tetrahedron.\n    '''\n    return (1/6)*math.pi*(r**3)*(l**2)*(h**3)\ndef volume_tetrahedron_side(r,l,h):\n    '''\n    Write a function that finds the volume of a tetrahedron.\n    '''\n    return (1/6)*math.pi*(r**3)*(l**2)*(h**3)\ndef area_tetrahedron_side(r,l,h):\n    '''\n    Write a function that finds the area of a tetrahedron.\n    '''\n    return (1/6)*math.pi*(r**3)*(l**2)*(h**3)\ndef volume_cuboctahedron_side(r,l,h):\n    '''\n    Write a function that finds the volume of a cuboctahedron.\n    '''\n    return (1/6)*math.pi*(r**3)*(l**2)*(h**3)\ndef area_cuboctahedron_side(r,l,h):\n    '''\n    Write a function that finds the area of a cuboctahedron.\n    '''\n    return (1/6)*math.pi*(r**3)*(l**2)*(h**3)\ndef volume_cube_side(r,l):\n    '''\n    Write a function that finds the volume of a cube.\n    '''\n    return (1/3)*math.pi*(r**3)*("
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*(3**0.5)\n    return v*r*r*r*math.pi\ndef volume_cube(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return l**3*3\ndef volume_dodecahedron(l):\n    '''\n    Write a function that calculates the volume of a dodecahedron.\n    '''\n    return l**3*4*3\ndef volume_cube_numbers(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return l**3*4*3*3\ndef area_sphere(r):\n    '''\n    Write a function that calculates the area of a sphere.\n    '''\n    return r**2*math.pi\ndef area_cube(l):\n    '''\n    Write a function that calculates the area of a cube.\n    '''\n    return l*l*3*math.pi\ndef area_dodecahedron(l):\n    '''\n    Write a function that calculates the area of a dodecahedron.\n    '''\n    return l*l*4*3*math.pi\ndef area_cube_numbers(l):\n    '''\n    Write a function that calculates the area of a cube.\n    '''\n    return l*l*4*3*3*math.pi\ndef volume_sphere_numbers(l):\n    '''\n    Write a function that calculates the volume of a sphere.\n    '''\n    return l**3*3*math.pi\ndef volume_cube_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return l**3*3*3*math.pi\ndef volume_dodecahedron_numbers(l):\n    '''\n    Write a function that calculates the volume of a dodecahedron.\n    '''\n    return l**3*4*3*math.pi\ndef volume_cube_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return l**3*4*3*3*math.pi\ndef area_sphere_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the area of a sphere.\n    '''\n    return l*math.pi*l*3\ndef area_cube_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the area of a cube.\n    '''\n    return l*math.pi*3*3\ndef volume_sphere_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a sphere.\n    '''\n    return l**3*3*math.pi\ndef volume_cube_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return l**3*3*3\ndef volume_dodecahedron_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a dodecahedron.\n    '''\n    return l**3*4*3*math.pi\ndef volume_cube_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return l**3*4*3*3\ndef volume_dodecahedron_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a dodecahedron.\n    '''\n    return l**3*4*3*3*math.pi\ndef volume_cube_numbers_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return l**3*4*3*3*3\ndef volume_sphere_numbers_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a sphere.\n    '''\n    return l**3*3*math.pi\ndef volume_cube_numbers_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return l**3*3*3*math.pi\ndef volume_dodecahedron_numbers_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a dodecahedron.\n    '''\n    return l**3*4*3*math.pi\ndef volume_cube_numbers_numbers_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return l**3*4*3*3*math.pi\ndef volume_dodecahedron_numbers_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a dodecahedron.\n    '''\n    return l**3*4*3*3*math.pi\ndef volume_cube_numbers_numbers_numbers_numbers_numbers(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return l**3*4*3*3*3*math.pi\ndef main():\n    print(\"{:.3f}\".format(volume_dodecahedron(0.2)))\n    print(\"{:.3f}\".format(volume_cube(0.2)))\n    print(\"{:.3f}\".format(volume_sphere(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_dodecahedron_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_dodecahedron_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_dodecahedron_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_dodecahedron_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_dodecahedron_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_dodecahedron_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_dodecahedron_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_dodecahedron_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_cube_numbers_numbers_numbers(0.2)))\n    print(\"{:.3f}\".format(volume_dodecahedron_numbers_numbers_numbers(0.2)))\n    print(\"{:."
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    chars = {}\n    for i in range(len(strr)):\n        chars[strr[i]] = (ord(strr[i]) + 27) % 256\n    return chars[strr]\n    \ndef encrypt_file(inpath):\n    '''\n    Input: path to text file to be encrypted\n    Output: path to encrypted file\n    '''\n    with open(inpath, 'r') as f:\n        file_contents = f.read()\n        f.close()\n    encrypted_file = \"\"\n    for char in file_contents:\n        encrypted_char = get_Char(char)\n        encrypted_file += chr(encrypted_char)\n    with open(inpath[:-4]+\"_cipher.txt\", 'w') as f:\n        f.write(encrypted_file)\n        f.close()\n    return encrypted_file\n    \ndef decrypt_file(inpath):\n    '''\n    Input: path to encrypted text file to be decrypted\n    Output: path to decrypted text file\n    '''\n    with open(inpath, 'r') as f:\n        file_contents = f.read()\n        f.close()\n    decrypted_file = \"\"\n    for char in file_contents:\n        decrypted_char = get_Char(char)\n        decrypted_file += chr(decrypted_char)\n    with open(inpath[:-4]+\"_cipher.txt\", 'w') as f:\n        f.write(decrypted_file)\n        f.close()\n    return decrypted_file\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(int(str(strr)[0]) + ord('A'))  \n    \ndef get_no_of_letters(strr):  \n    '''\n    Write a python function to return the number of letters of a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_digits(strr):  \n    '''\n    Write a python function to return the number of digits of a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_special_char(strr):  \n    '''\n    Write a python function to return the number of special characters of a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_uppercase_char(strr):  \n    '''\n    Write a python function to return the number of uppercase characters of a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_lowercase_char(strr):  \n    '''\n    Write a python function to return the number of lowercase characters of a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_punctuation(strr):  \n    '''\n    Write a python function to return the number of punctuation marks of a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_number(strr):  \n    '''\n    Write a python function to return the number of numbers in a given string.\n    '''\n    return len(strr)\n    \ndef get_capital_letters(strr):  \n    '''\n    Write a python function to return the number of capital letters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_spaces(strr):  \n    '''\n    Write a python function to return the number of spaces in a given string.\n    '''\n    return len(strr)\n    \ndef get_unique_letters(strr):  \n    '''\n    Write a python function to return the number of unique letters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_digits(strr):  \n    '''\n    Write a python function to return the number of digits in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_letters(strr):  \n    '''\n    Write a python function to return the number of letters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_special_char(strr):  \n    '''\n    Write a python function to return the number of special characters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_uppercase_char(strr):  \n    '''\n    Write a python function to return the number of uppercase characters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_lowercase_char(strr):  \n    '''\n    Write a python function to return the number of lowercase characters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_punctuation(strr):  \n    '''\n    Write a python function to return the number of punctuation marks in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_number(strr):  \n    '''\n    Write a python function to return the number of numbers in a given string.\n    '''\n    return len(strr)\n    \ndef get_capital_letters(strr):  \n    '''\n    Write a python function to return the number of capital letters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_spaces(strr):  \n    '''\n    Write a python function to return the number of spaces in a given string.\n    '''\n    return len(strr)\n    \ndef get_unique_letters(strr):  \n    '''\n    Write a python function to return the number of unique letters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_digits(strr):  \n    '''\n    Write a python function to return the number of digits in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_letters(strr):  \n    '''\n    Write a python function to return the number of letters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_special_char(strr):  \n    '''\n    Write a python function to return the number of special characters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_uppercase_char(strr):  \n    '''\n    Write a python function to return the number of uppercase characters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_lowercase_char(strr):  \n    '''\n    Write a python function to return the number of lowercase characters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_punctuation(strr):  \n    '''\n    Write a python function to return the number of punctuation marks in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_number(strr):  \n    '''\n    Write a python function to return the number of numbers in a given string.\n    '''\n    return len(strr)\n    \ndef get_capital_letters(strr):  \n    '''\n    Write a python function to return the number of capital letters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_spaces(strr):  \n    '''\n    Write a python function to return the number of spaces in a given string.\n    '''\n    return len(strr)\n    \ndef get_unique_letters(strr):  \n    '''\n    Write a python function to return the number of unique letters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_digits(strr):  \n    '''\n    Write a python function to return the number of digits in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_letters(strr):  \n    '''\n    Write a python function to return the number of letters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_special_char(strr):  \n    '''\n    Write a python function to return the number of special characters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_uppercase_char(strr):  \n    '''\n    Write a python function to return the number of uppercase characters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_lowercase_char(strr):  \n    '''\n    Write a python function to return the number of lowercase characters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_punctuation(strr):  \n    '''\n    Write a python function to return the number of punctuation marks in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_number(strr):  \n    '''\n    Write a python function to return the number of numbers in a given string.\n    '''\n    return len(strr)\n    \ndef get_capital_letters(strr):  \n    '''\n    Write a python function to return the number of capital letters in a given string.\n    '''\n    return len(strr)\n    \ndef get_no_of_spaces(strr):  \n    '''\n    Write a python function to return the number of spaces in a given string.\n    '''"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    str_char = []\n    for i in range(len(strr)):\n        str_char.append(ord(strr[i]) % 26)\n    return(str_char)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if not (type(strr) == str):\n        raise TypeError(\"strr must be a string\")\n    check = {'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5', 'f': '6', 'g': '7', 'h': '8', 'i': '9', 'j': 'A', 'k': 'B', 'l': 'C','m': 'D', 'n': 'E', 'o': 'F', 'p': 'G', 'q': 'H', 'r': 'I','s': 'J', 't': 'K', 'u': 'L', 'v': 'M', 'w': 'N', 'x': 'O', 'y': 'P', 'z': 'Q','':''}\n    return check[strr[0]] + strr[1:len(strr)]\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    res = \"\"\n    for i in strr:\n        try:\n            if ord(i) <= 65 or ord(i) >= 91:\n                res = res + i\n        except:\n            pass\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    global result\n    arr = []\n    for i in strr:\n        arr.append(ord(i))\n    n = 0\n    while n < len(arr):\n        mod_val = arr[n] % 26\n        arr[n] = arr[n] - mod_val * 26\n        n += 1\n    for i in arr:\n        result += chr(i)\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii = 0\n    for char in strr:\n        ascii += ord(char)\n    return chr(ascii%26+65)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    string = strr\n    for char in string:\n        ascii = ord(char)\n        ascii %= 26\n        new_ascii = ascii + ascii % 26\n        ascii = chr(new_ascii)\n    return ascii\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # split string into list\n    str_list = list(strr)\n    # convert characters to ints\n    for i in range(len(str_list)):\n        str_list[i] = int(str_list[i])\n    # find the max value\n    max_value = 0\n    for i in range(len(str_list)):\n        if str_list[i] > max_value:\n            max_value = str_list[i]\n    # find position of max\n    position = []\n    for i in range(len(str_list)):\n        if str_list[i] == max_value:\n            position.append(i)\n    # string from list to string\n    new_str = ''\n    for i in position:\n        new_str += str(chr(i+ord('A')))\n    return new_str\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    strr = strr.upper()\n    for i in range(0, len(strr)):\n        strr[i] = ord(strr[i]) % 26\n        \n    return strr\n    \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    res = \"\"\n    n = n % 26\n    if n == 0: \n        return res\n    elif n == 1: \n        return \"1\"\n    elif n == 3: \n        return \"9\"\n    elif n == 5: \n        return \"23\"\n    elif n == 7: \n        return \"345\"\n    else: \n        res = str(n) + \" \" + res\n        return res\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 0 \n    while i < n:\n        if i == 0:\n            print(n, end=', ')\n        elif i == 1:\n            print(n-i, end=', ')\n        elif i == 2:\n            print(n-i, end=', ')\n        else:\n            print(n-i, end=', ')\n        i += 1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    while i < n: \n        if i % 3 == 0:\n            yield i\n        if i % 3 == 2:\n            yield i+1\n        i += 1\n    \nnumbers = list(sequence(6)) \nfor i in numbers: \n    print(i)"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    num_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    list_length = len(num_list)\n    num_list.append(list_length)\n    return num_list[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    assert n > 0, 'number must be positive'\n    sequence = [1, 2, 3]\n    for x in range(4, n+1): \n        sequence.append(sequence[x - 1] + sequence[x-2]) \n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return sequence(n - 1) + sequence(n - 2)\ndef print_n_th(n):\n    '''\n    Print the nth number from the newman conway sequence.\n    '''\n    if n == 0: \n        print(\"1\")\n        return\n    elif n == 1: \n        print(\"2\")\n        return\n    else: \n        print_n_th(n - 1)\n        print_n_th(n - 2)\nprint_n_th(3)\nprint(sequence(3)"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    \n    # Calculate the number of newman numbers\n    nums = [1,2,3]\n    count = 0\n    for i in range(4, n+1):\n        if i % 2 == 1:\n            count += nums[i-2]\n        else:\n            count += nums[i-1]\n    return count\n    \nprint(sequence(5))\nprint(sequence(6))\nprint(sequence(7))\nprint(sequence(8))\nprint(sequence(9))\nprint(sequence(10))\nprint(sequence(11))\nprint(sequence(12))\nprint(sequence(13))\nprint(sequence(14))\nprint(sequence(15)"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    nums.reverse()\n    for i in range(n):\n        if i == 0:\n            nums[i + 1] = nums[i]\n        else:\n            nums[i + 1] = nums[i] + nums[i - 1]\n    return nums[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = (n - 1) // 2\n    if n == 1:\n        return 1\n    elif n % 2 == 1:\n        return sequence(n - 1) + 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n - 1) + 1 + sequence(n - 1)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 3.14159*(r**3)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    phi = math.pi * (r**2)\n    return 4 * math.pi * (r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfaceArea = 4 * math.pi * r ** 2\n    return surfaceArea\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #Assuming we have a 90 degree degrees,\n    #the area is the volume of the sphere\n    #Surface area of a sphere is 4*pi*r^3\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 6*r*r\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return round(3.14 * (r**2),2)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # initialise a radius\n    r_radius = r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4*(math.pi*(r**2))\n    return s\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    s = (4*math.pi*(r**3))\n    return s\ndef surfacearea_pentagon(r):\n    '''\n    Write a function to find the surface area of a pentagon.\n    '''\n    s = (4*math.pi*(r**5))\n    return s\ndef surfacearea_hexagon(r):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    s = (4*math.pi*(r**7))\n    return s\ndef surfacearea_quadrilateral(r):\n    '''\n    Write a function to find the surface area of a quadrilateral.\n    '''\n    s = (4*r**2)\n    return s\ndef surfacearea_tetrahedron(r):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    s = (8*r**3)\n    return s\ndef surfacearea_hexahedron(r):\n    '''\n    Write a function to find the surface area of a hexahedron.\n    '''\n    s = (8*(r**4))\n    return s\ndef surfacearea_octahedron(r):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    s = (8*(r**7))\n    return s\ndef surfacearea_tetrahedron_area(r):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    s = (8*(r**3))\n    return s\ndef surfacearea_quadrilateral_area(r):\n    '''\n    Write a function to find the surface area of a quadrilateral.\n    '''\n    s = (4*(r**2))\n    return s\ndef surfacearea_hexahedron_area(r):\n    '''\n    Write a function to find the surface area of a hexahedron.\n    '''\n    s = (4*(r**3))\n    return s\ndef surfacearea_octahedron_area(r):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    s = (4*(r**4))\n    return s\ndef surfacearea_decagon(r):\n    '''\n    Write a function to find the surface area of a decagon.\n    '''\n    s = (2*(r**3))\n    return s\ndef surfacearea_star(r):\n    '''\n    Write a function to find the surface area of a star.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_square(r):\n    '''\n    Write a function to find the surface area of an a square.\n    '''\n    s = r**2\n    return s\ndef surfacearea_a_pentagon(r):\n    '''\n    Write a function to find the surface area of an a pentagon.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_hexahedron(r):\n    '''\n    Write a function to find the surface area of an a heptahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_octahedron(r):\n    '''\n    Write a function to find the surface area of an a octahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_tetrahedron(r):\n    '''\n    Write a function to find the surface area of an a tetrahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_quadrilateral(r):\n    '''\n    Write a function to find the surface area of an a quadrilateral.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_hexahedron_area(r):\n    '''\n    Write a function to find the surface area of an a heptahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_octahedron_area(r):\n    '''\n    Write a function to find the surface area of an a octahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_decagon(r):\n    '''\n    Write a function to find the surface area of an a decagon.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_star(r):\n    '''\n    Write a function to find the surface area of an a star.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_decagon_area(r):\n    '''\n    Write a function to find the surface area of an a decagon.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_star_area(r):\n    '''\n    Write a function to find the surface area of an a star.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_quartic(r):\n    '''\n    Write a function to find the surface area of an a quartic.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_pentagon_area(r):\n    '''\n    Write a function to find the surface area of an a pentagon.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_hexagon_area(r):\n    '''\n    Write a function to find the surface area of an a hexagon.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_hexahedron_area(r):\n    '''\n    Write a function to find the surface area of an a heptahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_octahedron_area(r):\n    '''\n    Write a function to find the surface area of an a octahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_tetrahedron_area(r):\n    '''\n    Write a function to find the surface area of an a tetrahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_hexahedron_area(r):\n    '''\n    Write a function to find the surface area of an a heptahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_octahedron_area(r):\n    '''\n    Write a function to find the surface area of an a octahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_octahedron_area(r):\n    '''\n    Write a function to find the surface area of an a octahedron.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_decagon_area(r):\n    '''\n    Write a function to find the surface area of an a decagon.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_star_area(r):\n    '''\n    Write a function to find the surface area of an a star.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_decagon_area(r):\n    '''\n    Write a function to find the surface area of an a decagon.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_star_area(r):\n    '''\n    Write a function to find the surface area of an a star.\n    '''\n    s = (r**5)\n    return s\ndef surfacearea_a_quadrilateral_area(r):\n    '''\n    Write "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    S = 4 * math.pi * r**2\n    return S\ndef surfacearea_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    A = b * h\n    return A\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    S = a + b + c\n    return S\ndef surfacearea_poligon(L,h):\n    '''\n    Write a function to find the surface area of a poligon.\n    '''\n    A = L * h\n    return A\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle with radius r.\n    '''\n    A = (3.14159 * r**2)\n    return A\ndef area_square(S):\n    '''\n    Write a function to find the area of a square.\n    '''\n    A = S * S\n    return A\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    S = (a + b + c) / 2\n    return S\ndef area_polygon(A,B,C,D):\n    '''\n    Write a function to find the area of a polygon.\n    '''\n    S = (A * B) + (2 * C) + (D * B)\n    return S\ndef surface_area_circle(r):\n    '''\n    Write a function to calculate the surface area of a circle.\n    '''\n    A = (1/2) * math.pi * r**2\n    return A\ndef surface_area_rectangle(b,h):\n    '''\n    Write a function to calculate the surface area of a rectangle.\n    '''\n    A = b * h\n    return A\ndef surface_area_triangle(a,b,c):\n    '''\n    Write a function to calculate the surface area of a triangle.\n    '''\n    A = a * b + a * c\n    return A\ndef surface_area_poligon(L,h):\n    '''\n    Write a function to calculate the surface area of a poligon.\n    '''\n    A = L * h\n    return A\ndef volume_circle(r):\n    '''\n    Write a function to calculate the volume of a circle with radius r.\n    '''\n    A = (3.14159 * r**2)\n    return A\ndef volume_square(S):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    A = S * S\n    return A\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    A = (a + b + c) * math.sqrt(3)\n    return A\ndef volume_polygon(A,B,C,D):\n    '''\n    Write a function to calculate the volume of a polygon.\n    '''\n    A = (A * B) + (2 * C) + (D * B)\n    return A\ndef surface_volume_circle(r):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    A = math.pi * (r**2)\n    return A\ndef surface_volume_rectangle(b,h):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    A = b * h\n    return A\ndef surface_volume_triangle(a,b,c):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    A = a * b + a * c\n    return A\ndef surface_volume_poligon(L,h):\n    '''\n    Write a function to calculate the volume of a poligon.\n    '''\n    A = L * h\n    return A\ndef surface_volume_square(S):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    A = S * S\n    return A\ndef volume_square(S):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    A = S * S\n    return A\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    A = a * b * c\n    return A\ndef volume_polygon(A,B,C,D):\n    '''\n    Write a function to calculate the volume of a polygon.\n    '''\n    A = A * B * C\n    return A\ndef surface_volume_circle(r):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    A = 1/math.pi * math.pow(r,2)\n    return A\ndef surface_volume_rectangle(b,h):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    A = b * h\n    return A\ndef surface_volume_triangle(a,b,c):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    A = a * b * c\n    return A\ndef surface_volume_poligon(L,h):\n    '''\n    Write a function to calculate the volume of a poligon.\n    '''\n    A = L * h\n    return A\ndef surface_volume_square(S):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    A = S * S\n    return A\ndef volume_square(S):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    A = S * S\n    return A\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    A = a * b * c\n    return A\ndef volume_polygon(A,B,C,D):\n    '''\n    Write a function to calculate the volume of a polygon.\n    '''\n    A = A * B * C\n    return A\ndef volume_cylinder(L,H,radius):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    V = L * H\n    return V\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    S = (4 / 3) * math.pi * (r**3)\n    return S\ndef volume_rectangle(b,h):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    A = b * h\n    return A\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    A = (a + b + c) * math.sqrt(3)\n    return A\ndef volume_polygon(A,B,C,D):\n    '''\n    Write a function to calculate the volume of a polygon.\n    '''\n    A = (A * B) + (2 * C) + (D * B)\n    return A\ndef surface_volume_cylinder(L,H,radius):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    S = (4 / 3) * math.pi * (L**3) * (radius**3)\n    return S\ndef surface_volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    A = 1 / (4/3) * math.pi * (r**3)\n    return A\ndef surface_volume_rectangle(b,h):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    A = b * h\n    return A\ndef surface_volume_triangle(a,b,c):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    A = a * b * c\n    return A\ndef surface_volume_polygon(A,B,C,D):\n    '''\n    Write a function to calculate th"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    h = n//3\n    return int(h*h + (n-h)*h - h*h)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2*n+1\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    answer = 0\n    i = 0\n    while i <= n:\n        answer += i\n        i += 1\n    return answer\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n==1:\n        return 1\n    elif n==0:\n        return 0\n    else:\n        return centered_hexagonal_number(n-1)+centered_hexagonal_number(n-2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    lst = [0, 1, 2, 3]\n    if n == 0:\n        return lst[0]\n    if n == 1:\n        return lst[1]\n    if n == 2:\n        return lst[2]\n    if n == 3:\n        return lst[3]\n    return centered_hexagonal_number(n-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(n+1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_number = n*(n+1)/2\n    return hexagonal_number\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n // 3)*3\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    if n > 100:\n        raise Exception(\"The input number is greater than 100.\")\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # the user input of the dict\n    user_input1=input('Enter first dictionary: ')\n    user_input2=input('Enter second dictionary: ')\n    user_input3=input('Enter third dictionary: ')\n    # the user input of user input2\n    # user_input2=input('Enter first dictionary: ')\n    # the user input of user input3\n    # user_input3=input('Enter second dictionary: ')\n    user_input1=user_input1.split('/')\n    user_input2=user_input2.split('/')\n    user_input3=user_input3.split('/')\n    # the loop to merge both dictionaries into a single dictionary\n    dict1=dict(zip(user_input1, dict2))\n    dict2=dict(zip(user_input2, dict3))\n    dict3=dict(zip(user_input3, dict1))\n    # return dict3\n    return dict1, dict2, dict3\ndef merge_dictionaries_four(dict1, dict2, dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    # the user input of the dict\n    user_input1=input('Enter first dictionary: ')\n    user_input2=input('Enter second dictionary: ')\n    user_input3=input('Enter third dictionary: ')\n    user_input4=input('Enter fourth dictionary: ')\n    # the user input of user input3\n    # user_input3=input('Enter first dictionary: ')\n    # the user input of user input4\n    # user_input4=input('Enter second dictionary: ')\n    # the user input of user input2\n    # user_input2=input('Enter third dictionary: ')\n    # the user input of user input3\n    # user_input3=input('Enter fourth dictionary: ')\n    user_input1=user_input1.split('/')\n    user_input2=user_input2.split('/')\n    user_input3=user_input3.split('/')\n    user_input4=user_input4.split('/')\n    # the loop to merge both dictionaries into a single dictionary\n    dict1=dict(zip(user_input1, dict2))\n    dict2=dict(zip(user_input2, dict3))\n    dict3=dict(zip(user_input3, dict4))\n    dict4=dict(zip(user_input4, dict1))\n    # return dict4\n    return dict2, dict3, dict4\ndef merge_dictionaries_five(dict1, dict2, dict3, dict4, dict5):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    # the user input of the dict\n    user_input1=input('Enter first dictionary: ')\n    user_input2=input('Enter second dictionary: ')\n    user_input3=input('Enter third dictionary: ')\n    user_input4=input('Enter fourth dictionary: ')\n    # the user input of user input3\n    # user_input3=input('Enter first dictionary: ')\n    # the user input of user input4\n    # user_input4=input('Enter second dictionary: ')\n    # the user input of user input2\n    # user_input2=input('Enter third dictionary: ')\n    # the user input of user input3\n    # user_input3=input('Enter fourth dictionary: ')\n    user_input1=user_input1.split('/')\n    user_input2=user_input2.split('/')\n    user_input3=user_input3.split('/')\n    user_input4=user_input4.split('/')\n    user_input5=user_input5.split('/')\n    # the loop to merge both dictionaries into a single dictionary\n    dict1=dict(zip(user_input1, dict2))\n    dict2=dict(zip(user_input2, dict3))\n    dict3=dict(zip(user_input3, dict4))\n    dict4=dict(zip(user_input4, dict5))\n    dict5=dict(zip(user_input5, dict1))\n    # return dict5\n    return dict2, dict3, dict4, dict5\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key].update(d2[key])\n        else:\n            d1[key]=d2[key]\n    for key in d2:\n        if key in d3:\n            d2[key].update(d3[key])\n        else:\n            d2[key]=d3[key]\n    return d1\ndef merge_dictionaries(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key].update(d2[key])\n        else:\n            d1[key]=d2[key]\n    for key in d2:\n        if key in d3:\n            d2[key].update(d3[key])\n        else:\n            d2[key]=d3[key]\n    return d1\ndef merge_dictionaries_two(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key].update(d2[key])\n        else:\n            d1[key]=d2[key]\n    for key in d2:\n        if key in d3:\n            d2[key].update(d3[key])\n        else:\n            d2[key]=d3[key]\n    return d1\ndef merge_dictionaries_one(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key].update(d2[key])\n        else:\n            d1[key]=d2[key]\n    for key in d2:\n        if key in d3:\n            d2[key].update(d3[key])\n        else:\n            d2[key]=d3[key]\n    return d1\ndef merge_dictionaries_two_and_more(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key].update(d2[key])\n        else:\n            d1[key]=d2[key]\n    for key in d2:\n        if key in d3:\n            d2[key].update(d3[key])\n        else:\n            d2[key]=d3[key]\n    return d1\ndef merge_dictionaries_one_and_more(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key].update(d2[key])\n        else:\n            d1[key]=d2[key]\n    for key in d2:\n        if key in d3:\n            d2[key].update(d3[key])\n        else:\n            d2[key]=d3[key]\n    return d1\ndef merge_dictionaries_one_and_more_with_empty(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key].update(d2[key])\n        else:\n            d1[key]=d2[key]\n    for key in d2:\n        if key in d3:\n            d2[key].update(d3[key])\n        else:\n            d2[key]=d3[key]\n    return d1\ndef merge_dictionaries_one_and_more_with_empty_as_key(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key]=d2[key]\n        else:\n            d1[key]=d3[key]\n    for key in d2:\n        if key in d3:\n            d2[key].update(d3[key])\n        else:\n            d2[key]=d3[key]\n    return d1\ndef merge_dictionaries_two_and_more_with_empty_as_key(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key]=d2[key]\n        else:\n            d1[key]=d3[key]\n    for key in d2:\n        if key in d3:\n            d2[key].update(d3[key])\n        else:\n            d2[key]=d3[key]\n    return d1\ndef merge_dictionaries_two_and_more_with_empty_as_value(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key]=d2[key]\n        else:\n            d1[key]=d3[key]\n    for key in d2:\n        if key in d3:\n            d2[key].update(d3[key])\n        else:\n            d2[key]=d3[key]\n    return d1\ndef merge_dictionaries_two_and_more_with_empty_as_value_as_key(dict1, dict2, dict3):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #initialize dictionaries\n    d1=dict1\n    d2=dict2\n    d3=dict3\n    #loop through dictionary keys and values\n    for key in d1:\n        if key in d2:\n            #if dictionary contains value\n            d1[key]=d2[key]\n        else:\n            d1[key]=d3[key]\n    for key in d2:\n        if key in d3:\n            d2[key]"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = dict1\n    d1 = dict2\n    d2 = dict3\n    d3 = {}\n    if(len(d1)>len(d2)):\n        d = d1\n        d1 = d2\n        d2 = d3\n    d3.update(d1)\n    d3.update(d2)\n    return d3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Your code here\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # merge dictionaries\n    mergedDict = dict1.copy()\n    mergedDict.update(dict2)\n    mergedDict.update(dict3)\n    return mergedDict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1 = dict1.copy()\n    d2 = dict2.copy()\n    d3 = dict3.copy()\n    for key in d1:\n        d1[key].update(d2[key])\n    for key in d2:\n        d2[key].update(d3[key])\n    return d1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return ct.OrderedDict(dict1.items() + dict2.items() + dict3.items())\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    for x in list1:\n        list1[x] = list1[x]/len(list1)\n    return list1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # your code\n    freq_dict={}\n    for x in list1:\n        if x not in freq_dict:\n            freq_dict[x]=1\n        else:\n            freq_dict[x]=freq_dict[x]+1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        freq[i]=list1.count(i)\n    return freq\n    \ndef unique_list(list1):\n    '''\n    Write a function that finds the unique elements in a list and return the list of the unique elements in it.\n    '''\n    if list1==None or list1==[] or list1==\"\":\n        return []\n    else:\n        return list1[0]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if list1 == []:\n        return {}\n    elif list1 == None or len(list1) == 0:\n        return {}\n    else:\n        dict = collections.Counter(list1)\n        return dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # to make the list immutable\n    list1.sort()\n    # get the frequency of each element\n    count = collections.Counter(list1)\n    # return the frequency dictionary\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return dict(d)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # TODO\n    return {str(element[0]):element[1] for element in list1}\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    #create an empty dictionary\n    freq_dict = {}\n    \n    #iterate over the elements in the list and increment their frequency\n    for x in list1:\n        if x in freq_dict:\n            freq_dict[x] = freq_dict[x] + 1\n        else:\n            freq_dict[x] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = collections.Counter(list1)\n    return counts\ndef main():\n    '''\n    Write a function that counts the frequency of the elements of a list. The list should be of numbers.\n    '''\n    list1 = [1,2,3,4,5,6]\n    counts1 = freq_count(list1)\n    print(counts1)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that returns the number of the smallest elements of a list.\n    '''\n    list2 = [1,2,3,4,5,6,7,8,9]\n    counts2 = freq_count(list2)\n    print(counts2)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that returns the sum of all the squares of all the elements of a list.\n    '''\n    list3 = [1,2,3,4,5]\n    counts3 = freq_count(list3)\n    print(counts3)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that returns the average of all the elements of a list.\n    '''\n    list4 = [1,2,3,4,5]\n    counts4 = freq_count(list4)\n    print(counts4)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the elements of the list.\n    '''\n    list5 = [1,2,3,4,5]\n    counts5 = freq_count(list5)\n    print(counts5)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that returns the average of all the elements of a list.\n    '''\n    list6 = [1,2,3,4,5]\n    counts6 = freq_count(list6)\n    print(counts6)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the square of all the elements.\n    '''\n    list7 = [1,2,3,4,5]\n    counts7 = freq_count(list7)\n    print(counts7)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that returns the sum of all the squares of all the elements in a list.\n    '''\n    list8 = [1,2,3,4,5]\n    counts8 = freq_count(list8)\n    print(counts8)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list9 = [1,2,3,4,5]\n    counts9 = freq_count(list9)\n    print(counts9)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list10 = [1,2,3,4,5]\n    counts10 = freq_count(list10)\n    print(counts10)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list11 = [1,2,3,4,5]\n    counts11 = freq_count(list11)\n    print(counts11)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the square of all the elements.\n    '''\n    list12 = [1,2,3,4,5]\n    counts12 = freq_count(list12)\n    print(counts12)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the square of all the elements.\n    '''\n    list13 = [1,2,3,4,5]\n    counts13 = freq_count(list13)\n    print(counts13)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list14 = [1,2,3,4,5]\n    counts14 = freq_count(list14)\n    print(counts14)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list15 = [1,2,3,4,5]\n    counts15 = freq_count(list15)\n    print(counts15)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list16 = [1,2,3,4,5]\n    counts16 = freq_count(list16)\n    print(counts16)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list17 = [1,2,3,4,5]\n    counts17 = freq_count(list17)\n    print(counts17)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list18 = [1,2,3,4,5]\n    counts18 = freq_count(list18)\n    print(counts18)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list19 = [1,2,3,4,5]\n    counts19 = freq_count(list19)\n    print(counts19)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list20 = [1,2,3,4,5]\n    counts20 = freq_count(list20)\n    print(counts20)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list21 = [1,2,3,4,5]\n    counts21 = freq_count(list21)\n    print(counts21)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list22 = [1,2,3,4,5]\n    counts22 = freq_count(list22)\n    print(counts22)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list23 = [1,2,3,4,5]\n    counts23 = freq_count(list23)\n    print(counts23)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list24 = [1,2,3,4,5]\n    counts24 = freq_count(list24)\n    print(counts24)\n    print(\"**********************************************************************\")\n    \n    '''\n    Write a function that takes a list as input and returns the sum of all the squares of the elements in a list.\n    '''\n    list25 = [1,2,"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N==0:\n        return 0\n    if N==1:\n        return 1\n    if N==2:\n        return 1\n    if N==3:\n        return 1\n    if N%2==0:\n        return N//2\n    else:\n        return (N-1)//2\n    \ndef smallest_digits(N):\n    '''\n    Write a function to find the smallest number that is a multiple of 10\n    '''\n    smallest=0\n    for i in range(10):\n        if N%i==0:\n            smallest=closest_num(i)\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = min(N)\n    smallest_index = N.index(smallest)\n    return smallest_index\n    \n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(range(1, N+1), key=abs)\n    \n    "
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if N < 10:\n        print(N)\n        return N\n    \n    smaller = []\n    smaller.append(N)\n    \n    for i in range(10, N, 1):\n        if i < 10:\n            smaller.append(i)\n        else:\n            smaller.append(N//i)\n            if N%i == 0:\n                smaller.append(N%i)\n    \n    smaller.sort()\n    smaller = smaller[len(smaller)-1]\n    \n    return smaller\n    \ndef print_num(N):\n    '''\n    Write a function to print the numbers from 0 to N.\n    '''\n    \n    if N == 0:\n        print(0)\n        return\n    \n    for i in range(N):\n        print(N//i, i+1, N%i)\n    \ndef fib(N):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    \n    if N < 1:\n        print(\"Invalid input!\")\n        return\n        \n    if N == 1:\n        return 0\n    \n    if N == 2:\n        return 1\n    \n    return fib(N-1) + fib(N-2)\n    \ndef fib2(N):\n    '''\n    Write a function that returns the nth Fibonacci number.\n    '''\n    \n    if N < 1:\n        print(\"Invalid input!\")\n        return\n        \n    if N == 1:\n        return 0\n    \n    if N == 2:\n        return 1\n    \n    return fib2(N-1) + fib2(N-2)\n    \ndef main():\n    \n    while True:\n        N = int(input(\"Number of Fibonacci Numbers you want: \"))\n        \n        if N == 0:\n            break\n        \n        print(f\"{N}th Fibonacci Number is: {fib(N)}\")\n        \n        while True:\n            choice = input(\"Do you want to try again? (Y/N) \").lower()\n            \n            if choice == \"n\":\n                break\n            \n            if choice == \"y\":\n                continue\n                \nmain("
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(0, N):\n        if i+1 <= N:\n            closest = min(closest, i+1)\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N+1):\n        if N == i:\n            return i\n        if abs(N - i) < abs(N - i-1):\n            return i\n    return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for x in range(1, N):\n        if (N < x):\n            return x\n        if (x%2 == 0):\n            # print(x)\n            if x == (N/2):\n                return x\n            elif x == (N-1):\n                return x\n            elif x%2 == 1:\n                # print(x)\n                return x\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = int(N)\n    smallest_num = N\n    smallest_value = N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return N\n    else:\n        if N < 1:\n            print(\"Please enter an integer value greater than 1.\")\n        elif N == 2:\n            return 1\n        elif N == 3:\n            return 3\n        else:\n            k = 2\n            while N % k!= 0:\n                k += 1\n            return k\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(list1)\n    list1=list(list1)\n    list1.sort()\n    print(list1)\n    length=len(list1[0])\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n    \ndef delete_letter(s, r, c):\n    '''\n    Delete letter from the given square and replace it with a space.\n    '''\n    s[r][c] = \" \"\n    return s\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_word = 0\n    word = ''\n    for item in list1:\n        if len(item) > max_word:\n            max_word = len(item)\n            word = item\n    return word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) > 0:\n        return max(map(len, list1))\n    else:\n        return 0\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Write your code here\n    # Be sure to indent the function\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    max_len = 0\n    \n    for line in list1:\n        if len(line) > max_len:\n            max_len = len(line)\n            \n    return max_len\n    \n    \ndef write_lines(file, lines):\n    '''\n    Write lines to a file.\n    '''\n    \n    with open(file, 'w') as f:\n        for line in lines:\n            f.write(line + '\\n')\n    \n    \ndef read_lines(file):\n    '''\n    Read lines from a file.\n    '''\n    \n    if os.path.exists(file) == False:\n        print(\"File does not exist.\")\n        sys.exit()\n        \n    f = open(file, 'r')\n    \n    lines = []\n    \n    for line in f.readlines():\n        line = line.strip('\\n')\n        lines.append(line)\n    \n    f.close()\n    \n    return lines\n    \n    \ndef read_file(file):\n    '''\n    Read a file.\n    '''\n    \n    if os.path.exists(file) == False:\n        print(\"File does not exist.\")\n        sys.exit()\n        \n    f = open(file, 'r')\n    \n    lines = []\n    \n    for line in f.readlines():\n        line = line.strip('\\n')\n        lines.append(line)\n    \n    f.close()\n    \n    return lines\n    \n    \ndef write_file(file, lines):\n    '''\n    Write lines to a file.\n    '''\n    \n    f = open(file, 'w')\n    \n    for line in lines:\n        f.write(line + '\\n')\n        \n    f.close()\n    \n    \ndef main():\n    '''\n    Main program for program that reads an input file, writes it to another file, and then finds the longest word in each line.\n    '''\n    \n    # Prompt user for input file\n    input_file = input(\"Please enter the full path of the input file: \")\n    \n    # Ask user to select correct option for input file\n    while True:\n        try:\n            choice = int(input(\"\"\"\\nPlease select a file of the following options:\n                0. Read file\n                1. Write file\n                2. Find longest word in each line\n                3. Save the file\n                4. Exit program\n                Your choice: \"\"\"))\n            if choice == 0:\n                file = input(\"Please enter the full path of the input file: \")\n                file = file.replace('\\\\', '/')\n                \n                # Ask user for the output file\n                output_file = input(\"Please enter the full path of the output file: \")\n                output_file = output_file.replace('\\\\', '/')\n                \n                # Read the input file\n                lines = read_file(file)\n                \n                # Write the output file\n                write_file(output_file, lines)\n                \n                # Print the output file\n                print(f'\\n{output_file} was created.')\n                \n                # print the file sizes\n                print(f'{len(lines)} lines in {file}.')\n                \n                # Print the file lengths\n                print(f'{len_log(lines)} words in {file}.')\n                \n                # Ask user to select correct option for output file\n                \n            elif choice == 1:\n                file = input(\"Please enter the full path of the input file: \")\n                file = file.replace('\\\\', '/')\n                \n                # Read the input file\n                lines = read_file(file)\n                \n                # Write the output file\n                write_lines(output_file, lines)\n                \n                # Print the output file\n                print(f'\\n{output_file} was created.')\n                \n                # print the file sizes\n                print(f'{len(lines)} lines in {file}.')\n                \n                # Print the file lengths\n                print(f'{len_log(lines)} words in {file}.')\n                \n                # Ask user to select correct option for output file\n                \n            elif choice == 2:\n                lines = read_lines(file)\n                \n                # Write the output file\n                write_lines(output_file, lines)\n                \n                # Print the output file\n                print(f'\\n{output_file} was created.')\n                \n                # print the file sizes\n                print(f'{len(lines)} lines in {file}.')\n                \n                # Print the file lengths\n                print(f'{len_log(lines)} words in {file}.')\n                \n                # Ask user to select correct option for output file\n                \n            elif choice == 3:\n                file = input(\"Please enter the full path of the input file: \")\n                file = file.replace('\\\\', '/')\n                \n                # Read the input file\n                lines = read_file(file)\n                \n                # Write the output file\n                write_file(output_file, lines)\n                \n                # Print the output file\n                print(f'\\n{output_file} was created.')\n                \n                # print the file sizes\n                print(f'{len(lines)} lines in {file}.')\n                \n                # Print the file lengths\n                print(f'{len_log(lines)} words in {file}.')\n                \n                # Ask user to select correct option for output file\n                \n            elif choice == 4:\n                # Ask user to select correct option for input file\n                \n                print(\"Thanks for using this program.\")\n                sys.exit()\n            \n        except FileNotFoundError:\n            print(\"File does not exist.\")\n            \n            \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len = 0\n    word = ''\n    for i in list1:\n        if len(i) > len:\n            len = len\n            word = i\n    return len, word\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    if len(list1) == 0:\n        return 0\n    else:\n        return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # remove spaces\n    list1 = [element for element in list1 if element!='']\n    # remove special characters\n    list1 = [element for element in list1 if not element.isalpha()]\n    # remove numbers\n    list1 = [element for element in list1 if not element.isnumeric()]\n    # remove non-letters\n    list1 = [element for element in list1 if not element.isalpha()]\n    # if there are any spaces\n    if len(list1) > 0:\n        return len(max(list1, key=len))\n    else:\n        return 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for x in sub_str:\n        if x in str1:\n            count += 1\n        else:\n            count = 0\n            break\n    if count == len(sub_str):\n        return True\n    return False\n    \ndef main():\n    str1 = \"ABABAB\"\n    sub_str = \"ABA\"\n    print(find_substring(str1, sub_str))\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].find(sub_str) >= 0:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n    \ndef check_palindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \ndef check_even(x):\n    '''\n    Write a function to check if a given number is even or odd.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n    \ndef check_palindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1 = str1.lower()\n    sub_str = sub_str.lower()\n    str1 = list(str1)\n    sub_str = list(sub_str)\n    for i in range(len(str1)):\n        if str1[i] in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    else:\n        for i in range(len(str1)):\n            if str1[i:i+len(sub_str)] == sub_str:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(str1)<=len(sub_str):\n        return True\n    \n    else:\n        for i in range(len(str1)-len(sub_str)+1):\n            if str1[i:i+len(sub_str)]==sub_str:\n                return True\n    return False\n    \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Write your code here.\n    if n % 10!= 0:\n        return False\n    if n % 100 == 0:\n        if n % 400 == 0:\n            return False\n        else:\n            return True\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n == 4:\n        return False\n    if n == 5:\n        return False\n    if n == 6:\n        return False\n    if n == 7:\n        return False\n    if n == 8:\n        return False\n    if n == 9:\n        return False\n    if n == 10:\n        return False\n    if n == 11:\n        return False\n    if n == 12:\n        return False\n    if n == 13:\n        return False\n    if n == 14:\n        return False\n    if n == 15:\n        return False\n    if n == 16:\n        return False\n    if n == 17:\n        return False\n    if n == 18:\n        return False\n    if n == 19:\n        return False\n    if n == 20:\n        return False\n    if n == 21:\n        return False\n    if n == 22:\n        return False\n    if n == 23:\n        return False\n    if n == 24:\n        return False\n    if n == 25:\n        return False\n    if n == 26:\n        return False\n    if n == 27:\n        return False\n    if n == 28:\n        return False\n    if n == 29:\n        return False\n    if n == 30:\n        return False\n    if n == 31:\n        return False\n    if n == 32:\n        return False\n    if n == 33:\n        return False\n    if n == 34:\n        return False\n    if n == 35:\n        return False\n    if n == 36:\n        return False\n    if n == 37:\n        return False\n    if n == 38:\n        return False\n    if n == 39:\n        return False\n    if n == 40:\n        return False\n    if n == 41:\n        return False\n    if n == 42:\n        return False\n    if n == 43:\n        return False\n    if n == 44:\n        return False\n    if n == 45:\n        return False\n    if n == 46:\n        return False\n    if n == 47:\n        return False\n    if n == 48:\n        return False\n    if n == 49:\n        return False\n    if n == 50:\n        return False\n    if n == 51:\n        return False\n    if n == 52:\n        return False\n    if n == 53:\n        return False\n    if n == 54:\n        return False\n    if n == 55:\n        return False\n    if n == 56:\n        return False\n    if n == 57:\n        return False\n    if n == 58:\n        return False\n    if n == 59:\n        return False\n    if n == 60:\n        return False\n    if n == 61:\n        return False\n    if n == 62:\n        return False\n    if n == 63:\n        return False\n    if n == 64:\n        return False\n    if n == 65:\n        return False\n    if n == 66:\n        return False\n    if n == 67:\n        return False\n    if n == 68:\n        return False\n    if n == 69:\n        return False\n    if n == 70:\n        return False\n    if n == 71:\n        return False\n    if n == 72:\n        return False\n    if n == 73:\n        return False\n    if n == 74:\n        return False\n    if n == 75:\n        return False\n    if n == 76:\n        return False\n    if n == 77:\n        return False\n    if n == 78:\n        return False\n    if n == 79:\n        return False\n    if n == 80:\n        return False\n    if n == 81:\n        return False\n    if n == 82:\n        return False\n    if n == 83:\n        return False\n    if n == 84:\n        return False\n    if n == 85:\n        return False\n    if n == 86:\n        return False\n    if n == 87:\n        return False\n    if n == 88:\n        return False\n    if n == 89:\n        return False\n    if n == 90:\n        return False\n    if n == 91:\n        return False\n    if n == 92:\n        return False\n    if n == 93:\n        return False\n    if n == 94:\n        return False\n    if n == 95:\n        return False\n    if n == 96:\n        return False\n    if n == 97:\n        return False\n    if n == 98:\n        return False\n    if n == 99:\n        return False\n    if n == 100:\n        return False\n    if n == 101:\n        return False\n    if n == 102:\n        return False\n    if n == 103:\n        return False\n    if n == 104:\n        return False\n    if n == 105:\n        return False\n    if n == 106:\n        return False\n    if n == 107:\n        return False\n    if n == 108:\n        return False\n    if n == 109:\n        return False\n    if n == 110:\n        return False\n    if n == 111:\n        return False\n    if n == 112:\n        return False\n    if n == 113:\n        return False\n    if n == 114:\n        return False\n    if n == 115:\n        return False\n    if n == 116:\n        return False\n    if n == 117:\n        return False\n    if n == 118:\n        return False\n    if n == 119:\n        return False\n    if n == 120:\n        return False\n    if n == 121:\n        return False\n    if n == 122:\n        return False\n    if n == 123:\n        return False\n    if n == 124:\n        return False\n    if n == 125:\n        return False\n    if n == 126:\n        return False\n    if n == 127:\n        return False\n    if n == 128:\n        return False\n    if n == 129:\n        return False\n    if n == 130:\n        return False\n    if n == 131:\n        return False\n    if n == 132:\n        return False\n    if n == 133:\n        return False\n    if n == 134:\n        return False\n    if n == 135:\n        return False\n    if n == 136:\n        return False\n    if n == 137:\n        return False\n    if n == 138:\n        return False\n    if n == 139:\n        return False\n    if n == 140:\n        return False\n    if n == 141:\n        return False\n    if n == 142:\n        return False\n    if n == 143:\n        return False\n    if n == 144:\n        return False\n    if n == 145:\n        return False\n    if n == 146:\n        return False\n    if n == 147:\n        return False\n    if n == 148:\n        return False\n    if n == 149:\n        return False\n    if n == 150:\n        return False\n    if n == 151:\n        return False\n    if n == 152:\n        return False\n    if n == 153:\n        return False\n    if n == 154:\n        return False\n    if n == 155:\n        return False\n    if n == 156:\n        return False\n    if n == 157:\n        return False\n    if n == 158:\n        return False\n    if n == 159:\n        return False\n    if n == 160:\n        return False\n    if n == 161:\n        return False\n    if n == 162:\n        return False\n    if n == 163:\n        return False\n    if n == 164:\n        return False\n    if n == 165:\n        return False\n    if n == 166:\n        return False\n    if n == 167:\n        return False\n    if n == 168:\n        return False\n    if n == 169:\n        return False\n    if n == 170:\n        return False\n    if n == 171:\n        return False\n    if n == 172:\n        return False\n    if n == 173:\n        return False\n    if n == 174:\n        return False\n    if n == 175:\n        return False\n    if n == 176:\n        return False\n    if n == 177:\n        return False\n    if n == 178:\n        return False\n    if n == 179:\n        return False\n    if n == 180:\n        return False\n    if n == 181:\n        return False\n    if n == 182:\n        return False\n    if n == 183:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return not n % 2\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Your code here\n    return n % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    num_to_str = str(n)\n    num_to_str = num_to_str.replace(\"0\",\"\")\n    for i in range(len(num_to_str)):\n        if num_to_str[i] == \"1\" or num_to_str[i] == \"0\":\n            count += 1\n    if count >= 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return str(n)[::-1] == str(n)[::-1].count('0')\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if(n==0): \n        return True\n    elif(n%10==0):\n        return False\n    else:\n        return is_undulating(n//10)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n > 1\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 2:\n        return True\n    if n % 2 == 0: \n        return is_undulating(int(n/2))\n    else:\n        return False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (b == 0):\n        return a\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif a==0:\n        return 0\n    else:\n        return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 0\n    elif b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    return a*power(a,b-1)\ndef divide(a,b):\n    '''\n    Write a function that takes a number as input and returns its integer division.\n    '''\n    if b==0:\n        return 1\n    return a/divide(a,b-1)\ndef multi(a,b):\n    '''\n    Write a function that takes two positive integers as input and returns their multiplication.\n    '''\n    if b==0:\n        return 1\n    return a*multi(a,b-1)\ndef concat(a,b):\n    '''\n    Write a function that takes two positive integers as input and returns their concatenation.\n    '''\n    if b==0:\n        return 1\n    return a+b\ndef factorial(n):\n    '''\n    Write a function that takes an integer as input and returns its factorial.\n    '''\n    if n==0:\n        return 1\n    return n*factorial(n-1)\ndef main():\n    \"\"\"The main function that drives the program.\"\"\"\n    print(\"*** Welcome to the factorial calculator ***\")\n    print(\"Enter 'q' or 'quit' to quit.\\n\")\n    while True:\n        user_input=input(\"Enter a number:\\n\")\n        user_input=user_input.upper()\n        if user_input==\"Q\" or user_input==\"QUIT\":\n            print(\"You have quit.\")\n            break\n        try:\n            user_input=int(user_input)\n        except:\n            print(\"Invalid input. Try again.\")\n            continue\n        if user_input==0:\n            print(\"Bye!\")\n            break\n        if user_input<0:\n            print(\"Invalid input. Try again.\")\n            continue\n        elif user_input==1:\n            print(\"The result of the operation is 1\")\n            continue\n        else:\n            print(\"The result of the operation is \" + str(factorial(user_input)))\nif __name__=='__main__':\n    main()"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #pass\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(a,b)\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while (b > 0):\n        if (b % 2) == 0:\n            result = result * a\n            b = b / 2\n        else:\n            result = result * a\n            a = a * a\n            b = b * 2\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return a\n    else:\n        return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_list=[]\n    for index, value in enumerate(test_list):\n        if value[1]<value[0]:\n            minimum_list.append((value[1], index))\n    return minimum_list[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #return sorted(test_list)[0][1]\n    return sorted(test_list)[0][1]"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # O(n) time and O(1) space\n    return sorted(test_list, key = itemgetter(1))[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Find the values with the smallest second value\n    minimum = test_list[0][1]\n    for value in test_list[1:]:\n        if value[1] < minimum:\n            minimum = value[1]\n            # Take the second smallest value\n            second = value[0]\n    return second\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # TODO: Write the function\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    smallest = test_list[0]\n    smallest_index = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < smallest_index:\n            smallest_index = test_list[i][1]\n            smallest = test_list[i]\n        else:\n            pass\n    return smallest\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort test_list by second value \n    test_list.sort(key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = test_list[0][1]\n    for i in test_list:\n        if i[1] < min_value:\n            min_value = i[1]\n    return min_value\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code goes here\n    return sorted(test_list)[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    second_second = test_list[1][1]\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return max(lst, key=len)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Calculate how many items are in a list, including the head.\n    \n    count = 1\n    for i in lst:\n        count += 1\n    print(count)\n    # Calculate how many items are in a list, including the tail.\n    count = 0\n    for i in lst:\n        count += 1\n    print(count)\n    # Calculate how many items are in a list, including the middle.\n    count = 0\n    for i in lst:\n        count += 1\n    print(count)\n    # Calculate how many items are in a list, including the tail end.\n    count = 0\n    for i in lst:\n        count += 1\n    print(count)\n    # Calculate how many items are in a list, including the head.\n    count = 0\n    for i in lst:\n        count += 1\n    print(count)\n    # Calculate how many items are in a list, including the middle.\n    count = 0\n    for i in lst:\n        count += 1\n    print(count)\n    # Calculate how many items are in a list, including the tail end.\n    count = 0\n    for i in lst:\n        count += 1\n    print(count)\n    # Calculate how many items are in a list, including the head.\n    count = 0\n    for i in lst:\n        count += 1\n    print(count)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    smallest = lst[0]\n    for i in range(0, len(lst)):\n        if lst[i][0] < smallest:\n            smallest = lst[i][0]\n            min = i\n    return min + 1\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min=[]\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if len(lst[i])>len(lst[j]):\n                lst_min.append(lst[i])\n    return(len(lst_min))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum_length = 100000\n    for i in lst:\n        if len(i) < minimum_length:\n            minimum_length = len(i)\n    return minimum_length\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLen = len(lst[0])\n    for i in lst:\n        minLen = min(len(i),minLen)\n    return minLen\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for lst in lst:\n        if len(lst) < min_len:\n            min_len = len(lst)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    s=0\n    for i in lst:\n        s+=len(i)\n    return s\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minLen = len(lst)\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i < j:\n                if lst[i][2] < lst[j][2]:\n                    minLen = min(minLen, len(lst[i]))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) < 2:\n        return len(lst)\n    else:\n        smallest_len = len(lst[0])\n        for i in range(1, len(lst)):\n            if len(lst[i]) < smallest_len:\n                smallest_len = len(lst[i])\n        return smallest_len\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 1 + divisor(n - 1)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        divisors = 1\n        for i in range(2,n):\n            if n % i == 0:\n                divisors += 1\n        return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n    \ndef main():\n    print(divisor(10))\n    print(divisor(5))\n    print(divisor(12))\n    print(divisor(13))\n    print(divisor(6))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count +=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for divisor in range(1, n+1):\n        if n % divisor == 0:\n            divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n//divisor(n-1) + divisor(n-2)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if (n % i) == 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors += 1\n        i += 1\n    return divisors\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = dict()\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #TODO - write code to analyze and return the frequencies\n    #Hint - use built-in collections module and count the number of occurrences of each element\n    # Hint - In the function call below, you could pass an arbitrary number of lists and have it return a dictionary with the keys being the elements, and the values being the count of the element\n    #Hint - let's say I want to find the frequency of the character 'a' in the string 'python'. Do this using the count method.\n    #Hint - can we make this fun? Let's try and find it.\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dictionary:\n                frequency_dictionary[element] += 1\n            else:\n                frequency_dictionary[element] = 1\n    return frequency_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in range(len(list1)):\n        if list1[i] not in frequency_dict:\n            frequency_dict[list1[i]] = 1\n        else:\n            frequency_dict[list1[i]] += 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # you may add more functions if you'd like\n    list_of_elements = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list_of_elements.append(list1[i][j])\n    print(list_of_elements)\n    return sorted(list_of_elements)\n    \n    \nlist_of_lists = [[2,1,3,5,9], [0,1,2,3,4,5,6,7,8,9]]\nsorted_list = frequency_lists(list_of_lists)\nprint(sorted_list)"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in list1[i]:\n                if list1[i][j] not in freq:\n                    freq[list1[i][j]] = 1\n                else:\n                    freq[list1[i][j]] += 1\n    return freq\n    \ndef frequency_lists_2(list1):\n    '''\n    Write a function that takes in a list of lists of ints, and returns a dictionary with the count of each number for each list.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in list1[i]:\n                if list1[i][j] not in freq:\n                    freq[list1[i][j]] = 1\n                else:\n                    freq[list1[i][j]] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in list1:\n        for j in i:\n            if j in frequency_dict:\n                frequency_dict[j] = frequency_dict[j] + 1\n            else:\n                frequency_dict[j] = 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Your code here\n    count = {}\n    for i in range(0,len(list1),1):\n        count.update({i:list1[i].count(list1[i])})\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dictionary = {}\n    for element in list1:\n        if element not in frequency_dictionary:\n            frequency_dictionary[element] = 1\n        else:\n            frequency_dictionary[element] += 1\n    return frequency_dictionary\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary={}\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if list1[i][j] in dictionary.keys():\n                dictionary[list1[i][j]]=dictionary[list1[i][j]]+1\n            else:\n                dictionary[list1[i][j]]=1\n    return dictionary\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 0\n    lst = []\n    for i in range(0, len(numbers)):\n        sum += numbers[i]\n        lst.append(sum)\n    return lst\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not isinstance(numbers, list) : return numbers\n    elif len(numbers) == 0 : return numbers\n    elif len(numbers) == 1 : return numbers[0] * numbers[0]\n    elif len(numbers) == 2 : return numbers[0] * numbers[1]\n    else : return numbers[0] * multiply_num(numbers[1:])\n    \n    \ndef merge_sort(numbers):\n    '''\n    Write a function that sorts a list of numbers.\n    '''\n    if not isinstance(numbers, list) : return numbers\n    elif len(numbers) == 0 : return numbers\n    elif len(numbers) == 1 : return numbers\n    else : return merge_sort(numbers[1:]) + numbers[0]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # IMPORTANT : You will need to import the \"random\" module and use the \"random\" random() function to get random numbers from a uniform distribution.\n    import random\n    # Iterate over the list of numbers and multiply them with the random number in the list.\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i] * random.random())\n    # Return the list of the results as an integer.\n    return sum(result)"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplier = 1\n    length = len(numbers)\n    for i in range(0, length):\n        multiplier *= numbers[i]\n    return multiplier\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Start with an empty list to store the result\n    result = []\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] *= 10\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # TODO: multiply all numbers in a list\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 0\n    for i in numbers:\n        sum += i\n    return sum/len(numbers)\n    "
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # This is a nested loop that will iterate through all the numbers.\n    # Each iteration of the loop will iterate through each item in the numbers list.\n    # For each number, multiply it by the length of the list, and add 1 to the count.\n    # Return the sum of the numbers multiplied by the length of the list.\n    # How do we get the sum of all numbers multiplied by the length of the list?\n    # How do we get the sum of all numbers multiplied by the length of the list?\n    # For example, if we multiply all the numbers 1,2,3,4, and 5, and the list contains 3 numbers, the function should return 13.\n    # Create a nested loop and iterate through each number.\n    # Each iteration should iterate through each number in the numbers list.\n    # For each number, multiply it by the length of the list, and add 1 to the count.\n    # Return the sum of the numbers multiplied by the length of the list.\n    \n    # If the list is not of length 3, we will return the sum of all the numbers multiplied by the length of the list.\n    if len(numbers)!= 3:\n        return sum(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0: \n        n = -n\n        n = -n % 10\n        n = -n\n        n = -n\n    else: \n        n = n % 2\n    if n == 0: \n        n = '0'\n    elif n == 1: \n        n = '1'\n    return n\ndef binary_to_decimal(n): \n    '''\n    Write a function to convert a binary number to its decimal equivalent, represented as an integer.\n    '''\n    if n == '1': \n        n = 10\n    elif n == '0': \n        n = 0\n    return n\ndef binary_to_decimal_2(n): \n    '''\n    Write a function to convert a binary number to its decimal equivalent, represented as a string.\n    '''\n    if n == '0': \n        n = '1'\n    elif n == '1': \n        n = '0'\n    return n\ndef modular_exp(x, n, p): \n    '''\n    Given: x, n, p (integers)\n    Returns: (integer) the modular exponent of x with n digits, p. \n    If x is an integer then the result is the same as for x^n mod p (see below).\n    If p is an integer, x^n mod p is the same as x^n (see above). \n    The modulus must be a non-zero integer.\n    '''\n    if n == 0: \n        return x % p\n    elif n < 0: \n        n = -n % p \n        n = p - n\n    elif n == p: \n        return x % p\n    else: \n        x = x % p\n        n = n % p \n        n = p - n\n    return x * modular_exp(x, n, p)\ndef modular_exp_2(x, n, p): \n    '''\n    Given: x, n, p (integers)\n    Returns: (integer) the modular exponent of x with n digits, p. \n    If x is an integer then the result is the same as for x^n mod p (see below).\n    If p is an integer, x^n mod p is the same as x^n (see above). \n    The modulus must be a non-zero integer.\n    '''\n    if n == 0: \n        return x % p\n    elif n < 0: \n        n = -n % p \n        n = p - n\n    elif n == p: \n        return x % p\n    else: \n        x = x % p\n        n = n % p \n        n = p - n\n    return x * modular_exp_2(x, n, p)\ndef invmod(x, p): \n    '''\n    Given: x, p (integers)\n    Returns: the modulus of x with p digits, as an integer. \n    If x is an integer then the result is the same as p (see below).\n    If p is an integer, the result is the same as x modulo p. \n    The modulus must be a non-zero integer.\n    '''\n    if p == 0: \n        return 0\n    elif p < 0: \n        p = -p % p \n        return -invmod(x, p) \n    elif p == 1: \n        return x \n    else: \n        return p \ndef inverse_mod(x, p): \n    '''\n    Given: x, p (integers)\n    Returns: the inverse of x modulo p. \n    If x is an integer then the result is the same as modulo p (see below).\n    If p is an integer, the result is the same as modulo p. \n    The modulus must be a non-zero integer.\n    '''\n    if p == 0: \n        return 0\n    elif p < 0: \n        p = -p % p \n        return -inverse_mod(x, p)\n    elif p == 1: \n        return x\n    else: \n        return p\ndef gcd(a, b): \n    '''\n    Given: a, b (integers) \n    Returns: the GCD of a and b modulo 10**9. \n    If a and b are coprime, then the GCD is a. \n    '''\n    while b!= 0: \n        a, b = b, a % b \n    return a \ndef lcm(a, b): \n    '''\n    Given: a, b (integers) \n    Returns: the LCD of a and b modulo 10**9. \n    If a and b are coprime, then the LCD is a. \n    '''\n    while b!= 0: \n        a, b = b, a % b \n    return a \ndef modinv(a, m): \n    '''\n    Given: a, m (non-negative integers) \n    Returns: the modulus of a with m digits, as an integer. \n    '''\n    return inverse_mod(a, m)\ndef LCM(a, b): \n    '''\n    Given: a, b (integers) \n    Returns: the LCD of a and b modulo 10**9. \n    '''\n    return lcm(a, b) \ndef modinv_2(a, p): \n    '''\n    Given: a, p (non-negative integers) \n    Returns: the modulus of a with p digits, as an integer. \n    '''\n    return inverse_mod(a, p)\ndef modinv_mod_2(a, p): \n    '''\n    Given: a, p (non-negative integers) \n    Returns: the modulus of a with p digits, as an integer. \n    '''\n    return modinv_2(a, p)\ndef LCM_mod_2(a, b): \n    '''\n    Given: a, b (integers) \n    Returns: the LCD of a and b modulo 10**9. \n    '''\n    return lcm_mod_2(a, b)\ndef modinv_mod_2(a, p): \n    '''\n    Given: a, p (non-negative integers) \n    Returns: the modulus of a with p digits, as an integer. \n    '''\n    return modinv_mod_2(a, p)\ndef GCD(a, b): \n    '''\n    Given: a, b (integers) \n    Returns: the GCD of a and b modulo 10**9. \n    '''\n    if (a == 0): \n        return b \n    return GCD(b % a, a)\ndef LCM(a, b): \n    '''\n    Given: a, b (integers) \n    Returns: the LCD of a and b modulo 10**9. \n    '''\n    if (a == 0): \n        return b \n    return LCM(b % a, a)\ndef modinv_mod_2(a, p): \n    '''\n    Given: a, p (non-negative integers) \n    Returns: the modulus of a with p digits, as an integer. \n    '''\n    return modinv_mod_2(a, p)\ndef modinv_mod_2_mod_2(a, p): \n    '''\n    Given: a, p (non-negative integers) \n    Returns: the modulus of a with p digits, as an integer. \n    '''\n    return modinv_mod_2(a, p)\ndef LCM_mod_2_mod_2(a, b): \n    '''\n    Given: a, b (integers) \n    Returns: the LCD of a and b modulo 10**9. \n    '''\n    return modinv_mod_2_mod_2(a, b)\ndef LCM_mod_2_mod_2_mod_2(a, b): \n    '''\n    Given: a, b (integers) \n    Returns: the LCD of a and b modulo 10**9. \n    '''\n    return modinv_mod_2_mod_2(a, b)\ndef LCM_mod_2_mod_"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = []\n    while n:\n        res.append(str(n % 2))\n        n //= 2\n    return \"\".join(reversed(res))\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    val = str(n)\n    return val[len(val)-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    b = n \n    if b > 0:\n        if b % 2 == 0:\n            return \"{:b}\".format(b)\n        else:\n            return \"{:b}\".format(int(b / 2)) + \"{:b}\".format(b % 2)\n    else:\n        if b % 2 == 0:\n            return \"{:b}\".format(b)\n        else:\n            return \"{:b}\".format(int(b / 2)) + \"{:b}\".format(b % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = ''\n    # convert the number to binary\n    while n: \n        res = str(n % 2) + res\n        # print(res)\n        n //= 2\n    return res"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    ans = bin(n)[2:]\n    ans = ans.replace(\"0b\", \"\")\n    return ans\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    return str(n) + decimal_to_binary(n//2)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\"\n    if n < 0: \n        return \"-\" + decimal_to_binary(-n) \n    else: \n        return \"0\" + decimal_to_binary(n) \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0: \n        return f'{abs(n):b}'\n    else: \n        return f'{n:b}'\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0 or num == 1:\n        return num\n    else:\n        n = num\n        for i in range(2,num//2 + 1):\n            if num%i == 0:\n                n = n*i\n                break\n        if n == num:\n            n = n*num\n        return n\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    start = 1\n    \n    end = num\n    \n    while True:\n        \n        while end % 2 == 0:\n            end = int(end / 2)\n            \n        if start % 2 == 0:\n            start = int(start / 2)\n            \n        if end == 1:\n            break\n            \n        if start % 2 == 0:\n            start = int(start / 2)\n            \n        if end % 2 == 0:\n            end = int(end / 2)\n            \n    return start\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pal = ''\n    \n    while num!= 0:\n        rem = num % 10\n        pal += str(rem)\n        num //= 10\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    is_palindrome = False\n    i = 1\n    while(not is_palindrome):\n        if(i <= 10 ** 4):\n            is_palindrome = True\n        else:\n            is_palindrome = True\n            for j in range(i + 1, 10 ** 4 + 1):\n                if(num % j == 0):\n                    is_palindrome = False\n        i += 1\n    if(is_palindrome):\n        return num\n    else:\n        return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    elif num < 1:\n        return 1\n    else:\n        smallest_palindrome = num\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                continue\n            else:\n                smallest_palindrome = num/i\n                break\n        return smallest_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    if num == 1:\n        return 2\n    for i in range(len(nums)):\n        if nums[i]!= num:\n            return nums[i]\n    \n    return next_smallest_palindrome(num+1)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        for i in range(num//2):\n            if num%10==i or num%10==num-i:\n                return False\n        return True\n    \n    def next_smallest_palindrome(num):\n        if num<=1:\n            return num\n        \n        i,j = 1, num-1\n        \n        while i < j:\n            mid = (i+j)//2\n            if is_palindrome(mid):\n                return mid\n            elif is_palindrome(mid-1):\n                j = mid\n            else:\n                i = mid+1\n        return num\n    \n    i,j = 1, num-1\n    \n    while i < j:\n        mid = (i+j)//2\n        if is_palindrome(mid):\n            return mid\n        elif is_palindrome(mid-1):\n            j = mid\n        else:\n            i = mid+1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    import math\n    from math import sqrt\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #1. TODO: Write your code here.\n    num=int(num)\n    if(num<10):\n        return num\n    else:\n        return next_smallest_palindrome(str(num)[-1])\n    #2. TODO: Write your code here.\n    #return next_smallest_palindrome(str(num)[-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    elif num == 2:\n        return 3\n    elif num < 2:\n        return -1\n    else:\n        current = 1\n        for i in range(3,num):\n            if num % i == 0:\n                break\n            current = i\n        return num//i + 1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        print(\"The kth element does not exist\")\n        return -1\n    \n    return arr[k - 1"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start, end = 0, len(arr)-1\n    \n    while start <= end:\n        mid = (start+end) // 2\n        \n        if arr[mid] == k:\n            return arr[mid]\n            \n        elif arr[mid] > k:\n            end = mid - 1\n            \n        else:\n            start = mid + 1\n            \n    return arr[end]"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n    \n    l = len(arr)\n    return arr[l-k]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if not arr:\n        return -1\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == k:\n        return mid\n    \n    elif arr[mid] < k:\n        return kth_element(arr[mid+1:], k)\n    \n    else:\n        return kth_element(arr[:mid], k)\n    \n    \ndef kth_nth_occurence(arr, k):\n    '''\n    Write a function to find the kth occurrence of an element in the given array using 1-based indexing.\n    '''\n    \n    if not arr:\n        return -1\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == k:\n        return mid\n    \n    elif arr[mid] < k:\n        return kth_nth_occurence(arr[mid+1:], k)\n    \n    else:\n        return kth_nth_occurence(arr[:mid], k)\n    \n    \ndef kth_element_in_order(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 2-based indexing.\n    '''\n    \n    if not arr:\n        return -1\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == k:\n        return mid\n    \n    elif arr[mid] < k:\n        return kth_element_in_order(arr[mid+1:], k)\n    \n    else:\n        return kth_element_in_order(arr[:mid], k)\n    \n    \ndef kth_nth_element_in_order(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 2-based indexing.\n    '''\n    \n    if not arr:\n        return -1\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == k:\n        return mid\n    \n    elif arr[mid] < k:\n        return kth_nth_element_in_order(arr[mid+1:], k)\n    \n    else:\n        return kth_nth_element_in_order(arr[:mid], k)\n    \n    \ndef kth_element_post_order(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if not arr:\n        return -1\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == k:\n        return mid\n    \n    elif arr[mid] < k:\n        return kth_element_post_order(arr[mid+1:], k)\n    \n    else:\n        return kth_element_post_order(arr[:mid], k)\n    \n    \ndef kth_nth_element_post_order(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if not arr:\n        return -1\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == k:\n        return mid\n    \n    elif arr[mid] < k:\n        return kth_nth_element_post_order(arr[mid+1:], k)\n    \n    else:\n        return kth_nth_element_post_order(arr[:mid], k)\n    \n    \ndef kth_element_pre_order(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if not arr:\n        return -1\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == k:\n        return mid\n    \n    elif arr[mid] < k:\n        return kth_element_pre_order(arr[mid+1:], k)\n    \n    else:\n        return kth_element_pre_order(arr[:mid], k)\n    \n    \ndef kth_nth_element_pre_order(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if not arr:\n        return -1\n    \n    mid = len(arr)//2\n    \n    if arr[mid] == k:\n        return mid\n    \n    elif arr[mid] < k:\n        return kth_element_pre_order(arr[mid+1:], k)\n    \n    else:\n        return kth_element_pre_order(arr[:mid], k)\n    \n    \ndef main():\n    k = 2\n    arr = [1, 2, 3, 4, 5, 6]\n    \n    print(kth_element_in_order(arr, k))\n    print(kth_element_in_order(arr, k))\n    print(kth_element_in_order(arr, k))\n    print(kth_element_in_order(arr, k))\n    print(kth_element_in_order(arr, k))\n    print(kth_element_in_order(arr, k))\n    print(kth_element_in_order(arr, k))\n    print(kth_element_in_order(arr, k))\n    print(kth_element_in_order(arr, k))\n    print(kth_element_in_order(arr, k))\n    print(kth_element_in_order(arr, k))\n    \n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    print(kth_element_post_order(arr, k))\n    \n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre_order(arr, k))\n    print(kth_element_pre"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return None\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Traverse array and find kth element\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+k-1]:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 0:\n        raise Exception('K must be greater than 0')\n    if k > n:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] < k:\n            start = mid + 1\n        elif arr[mid] > k:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return None\n    if k == 1:\n        return arr[0]\n    return kth_element(arr[1:], k)\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    word = word[0]\n    for i in range(1,len(word)):\n        word = word[0:i] + word[i].upper() + word[i+1:]\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_string = word.replace('-', '').replace('_', '').title()\n    return camel_case_string\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if '_' in word:\n        return word[:word.index('_')]\n    else:\n        return word.upper()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for letter in word:\n        camel_word = camel_word + letter.capitalize()\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.lower()\n    return word[0].upper() + word[1:]\n    \n    \n    \n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for letter in word:\n        if letter == '_':\n            result = result + letter\n        elif letter.isupper():\n            result = result + letter.upper()\n        elif letter.islower():\n            result = result + letter.lower()\n    return result\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for char in word:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char.lower() + char.upper()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.lower().replace('-', '_').replace(' ', '_').replace('-', '_')\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    m = m + 1\n    u = []\n    for i in range(n+1):\n        u.append(i)\n    for i in range(n+1):\n        j = (n - 1) - i\n        k = (m - 1) - j\n        if u[k] > u[i] and u[j] > u[k]:\n            return \"no\"\n    return \"yes\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n \n    else:\n        if m % 2 == 0:\n            return eulerian_num(n-1, m//2) + eulerian_num(n-1, m//2 + 1)\n        else:\n            return eulerian_num(n-1, m//2) + eulerian_num(n-1, m//2 - 1)\n    \n    \n    \nif __name__ == \"__main__\": \n    n = int(input()) \n    m = int(input())\n    print(eulerian_num(n, m)) "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*(n-1)//2 + m*(m-1)//2\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # TODO: write your code here\n    \n    # get the base case\n    if n == m:\n        return 1\n    \n    if n > m:\n        m = n\n        n = m\n        \n    # generate the permutations\n    permutations = []\n    \n    # the index of the number\n    index = 0\n    \n    # recur for the number\n    while True:\n        \n        # generate the permutation\n        permutation = n + 1 + index\n        \n        # if permutation is already in the list\n        if permutation in permutations:\n            # return the number\n            return permutation\n        \n        # add the permutation to the permutation list\n        permutations.append(permutation)\n        \n        # check if the number is a prime number\n        if check_prime(permutation):\n            index += 1\n        \n        # if the number is not a prime\n        else:\n            break\n    \n    # the number is not a prime\n    return -"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Eulerian number of a(n, m) = ( n - 1 ) + ( m - 1 )\n    if m == 0:\n        return n-1\n    else:\n        return n-m\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return n\n    else:\n        return n+eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Mark the current vertex as already visited\n    # visted = [False for i in range(n+1)]\n    # visted[0] = True\n    # path = []\n    # def find_cycle(visted, path):\n    #     if len(path) > 0:\n    #         cycle = path[0]\n    #         for i in range(1, len(path)):\n    #             if visted[cycle[0]] and visted[path[i-1]]:\n    #                 cycle = path[i]\n    #             if visted[cycle[0]]:\n    #                 break\n    #         return cycle\n    #     cycle = []\n    #     for i in range(n+1):\n    #         if not visted[i]:\n    #             cycle.append(i)\n    #             visted[i] = True\n    #     for i in range(len(cycle)-1):\n    #         cycle.append(cycle[i] + cycle[i+1])\n    #     path.append(cycle)\n    #     cycle = []\n    #     for i in range(n+1):\n    #         if not visted[i]:\n    #             cycle.append(i)\n    #             visted[i] = True\n    #     for i in range(len(cycle)-1):\n    #         cycle.append(cycle[i] + cycle[i+1])\n    #     path.append(cycle)\n    #     cycle = []\n    #     for i in range(n+1):\n    #         if not visted[i]:\n    #             cycle.append(i)\n    #             visted[i] = True\n    #     for i in range(len(cycle)-1):\n    #         cycle.append(cycle[i] + cycle[i+1])\n    #     path.append(cycle)\n    #     return path\n    # path = find_cycle(visted, [])\n    # if len(path) > 0:\n    #     cycle = path[0]\n    #     for i in range(1, len(path)):\n    #         if visted[cycle[0]] and visted[path[i-1]]:\n    #             cycle = path[i]\n    #         if visted[cycle[0]]:\n    #             break\n    #     return cycle\n    # return n\n    \n    #Write a function to determine the cyclic numbers of a(n, m)\n    #by starting at visted[0] and finishing at visted[n]\n    # and calculating cycle[i]\n    #     if visted[cycle[i-1]] and visted[cycle[i-1]+m] and visted[cycle[i-1]+m+n] and visted[cycle[i-1]+m+n+m]:\n    #         return cycle[i]\n    # return n\n    \n    # Write a function to find the cyclic numbers a(n, m)\n    # by starting at visted[0] and finishing at visted[n]\n    # and calculating cycle[i]\n    #     if visted[cycle[i-1]] and visted[cycle[i-1]+m] and visted[cycle[i-1]+m+n] and visted[cycle[i-1]+m+n+m]:\n    #         return cycle[i]\n    # return n\n    \n    #Write a function to find the cyclic numbers a(n, m)\n    # by starting at visted[0] and finishing at visted[n]\n    # and calculating cycle[i]\n    #     if visted[cycle[i-1]] and visted[cycle[i-1]+m] and visted[cycle[i-1]+m+n] and visted[cycle[i-1]+m+n+m]:\n    #         return cycle[i]\n    # return n\n    \n    #Write a function to find the cyclic numbers a(n, m)\n    # by starting at visted[0] and finishing at visted[n]\n    # and calculating cycle[i]\n    #     if visted[cycle[i-1]] and visted[cycle[i-1]+m] and visted[cycle[i-1]+m+n] and visted[cycle[i-1]+m+n+m]:\n    #         return cycle[i]\n    # return n\n    \n    #Write a function to find the cyclic numbers a(n, m)\n    # by starting at visted[0] and finishing at visted[n]\n    # and calculating cycle[i]\n    #     if visted[cycle[i-1]] and visted[cycle[i-1]+m] and visted[cycle[i-1]+m+n] and visted[cycle[i-1]+m+n+m]:\n    #         return cycle[i]\n    # return n\n    \n    def eulerian_num(n, m): \n        '''\n        This function returns the Eulerian number a(n, m)\n        that can be performed using the following operations:\n        1. Find a cycle, find it's cycle length.\n        2. Find the next cycle, find it's cycle length.\n        3. Find the next cycle, find it's cycle length.\n        '''\n        # Mark the current vertex as already visited\n        # visted = [False for i in range(n+1)]\n        # visted[0] = True\n        # path = []\n        # def find_cycle(visted, path):\n        #     if len(path) > 0:\n        #         cycle = path[0]\n        #         for i in range(1, len(path)):\n        #             if visted[cycle[0]] and visted[path[i-1]]:\n        #                 cycle = path[i]\n        #             if visted[cycle[0]]:\n        #                 break\n        #         return cycle\n        #     cycle = []\n        #     for i in range(n+1):\n        #         if not visted[i]:\n        #             cycle.append(i)\n        #             visted[i] = True\n        #     for i in range(len(cycle)-1):\n        #         cycle.append(cycle[i] + cycle[i+1])\n        #     path.append(cycle)\n        #     cycle = []\n        #     for i in range(n+1):\n        #         if not visted[i]:\n        #             cycle.append(i)\n        #             visted[i] = True\n        #     for i in range(len(cycle)-1):\n        #         cycle.append(cycle[i] + cycle[i+1])\n        #     path.append(cycle)\n        #     cycle = []\n        #     for i in range(n+1):\n        #         if not visted[i]:\n        #             cycle.append(i)\n        #             visted[i] = True\n        #     for i in range(len(cycle)-1):\n        #         cycle.append(cycle[i] + cycle[i+1])\n        #     path.append(cycle)\n        #     cycle = []\n        #     for i in range(n+1):\n        #         if not visted[i]:\n        #             cycle.append(i)\n        #             visted[i] = True\n        #     for i in range(len(cycle)-1):\n        #         cycle.append(cycle[i] + cycle[i+1])\n        #     path.append(cycle)\n        #     return cycle\n        \n        # visted = [False for i in range(n+1)]\n        # visted[0] = True\n        # path = []\n        # def find_cycle(visted, path):\n        #     if len(path) > 0:\n        #         cycle = path[0]\n        #         for i in range(1, len(path)):\n        #             if visted[cycle[0]] and visted[path[i-1]]:\n        #                 cycle = path[i]\n        #             if visted[cycl"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    if m == 1:\n        return n\n    elif n == 1:\n        return 0\n    elif n < m:\n        return eulerian_num(n, m-1) + m - n\n    elif n > m:\n        return (m - n + eulerian_num(n-1, m-1))\n    \n    else:\n        return (m - n + eulerian_num(n-1, m-1))\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n!= m:\n        # compute eulerian num of a(n, m)\n        return 1 + eulerian_num(n-1, m-1)\n    return 0\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    if len(input_list) == 1:\n        return input_list\n    else:\n        split_list = list(zip(*input_list))\n        return sorted(split_list[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Step 1: First sort by index\n    # define a function for sorting by index.\n    def sort_list_by_index(input_list):\n        # reverse sort by index in the list\n        new_list = sorted(input_list, key=lambda x: x[1])\n        # sort by first element in the list\n        return sorted(new_list, key=lambda x: x[0])\n    # step 2: sort by alphabetical order\n    return sort_list_by_index(input_list)"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a new empty list to place sublists\n    # TODO: Append the sublist to the end of this empty list.\n    new_list = []\n    # TODO: Create a temporary list to hold the sublists\n    temp_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        for sub_list in sublist:\n            output_list.append(sub_list)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # sort the sublist by word in a list\n    def sort_word(string):\n        for word in string:\n            string.sort(key=str.lower)\n        return string\n    \n    # sort the sublist by lexical order\n    def sort_lexical(string):\n        sublist = []\n        for word in string:\n            word = sort_word(word)\n            sublist.append(word)\n        return sublist\n    \n    # sort the sublist by reverse lexical order\n    def sort_reverse_lexical(string):\n        sublist = []\n        for word in string:\n            word = sort_word(word)\n            sublist.append(word)\n        return sublist\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublists(input_list):\n        '''\n        Write a function to sort each sublist of strings in a given list of lists.\n        '''\n        def sort_sublists(input_list):\n            '''\n            Write a function to sort each sublist of strings in a given list of lists.\n            '''\n            if len(input_list) == 0:\n                return\n            else:\n                max_len = 0\n                for sublist in input_list:\n                    if len(sublist) > max_len:\n                        max_len = len(sublist)\n                sorted_list = [None] * len(input_list)\n                for i in range(len(input_list)):\n                    if len(input_list[i]) > max_len:\n                        sorted_list[i] = input_list[i]\n                    else:\n                        sorted_list[i] = input_list[i].split()\n                for j in range(len(sorted_list)):\n                    for k in range(len(sorted_list[j])):\n                        if len(sorted_list[j][k]) > max_len:\n                            sorted_list[j][k] = sorted_list[j][k].split()\n                return sorted_list\n        \n        if len(input_list) == 0:\n            return\n        else:\n            return sort_sublists(input_list[1:]) + sort_sublists(input_list[:-1])\n    \n    return sort_sublists(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    n = len(input_list)\n    # print(input_list)\n    # print(n)\n    for i in range(n):\n        for j in range(n-i-1):\n            # print(input_list[j][0])\n            if input_list[j][0] > input_list[j+1][0]:\n                input_list[j], input_list[j+1] = input_list[j+1], input_list[j]\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = input_list[i][j].replace('.','')\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # WRITE YOUR CODE HERE\n    for i in range(0, len(input_list)):\n        for j in range(0, len(input_list[i])):\n            if input_list[i][j] =='':\n                input_list[i][j] = '-'\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == 1:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for item in lst:\n        if(item==True):\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if(i):\n            count += 1\n    return count\n    \n    \ndef main():\n    lst = [True,True,True,True,False,True,True,True,False,False,False,False,True,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,True,True,True,True,False,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,True,True,True,True,True,True,True,True,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,True,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,False,False,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,True,False,False,False,True,False,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,True,True,False,False,True,True,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,False,True,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,False,False,False,True,False,False,False,True,True,False,False,False,True,False,True,False,False,False,True,True,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,True,False,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,False,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,True,False,True,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,True,False,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,False,False,True,False,True,False,True,True,True,False,False,False,True,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,False,False,True,True,False,False,True,True,False,False,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,False,True,True,False,False,False,False,True,True,False,True,False,False,False,True,False,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,False,False,False,True,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,False,False,False,True,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,True,False,False,False,True,False,False,False,True,True,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,False,False,True,True,False,False,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,True,False,True,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,False,True,False,False,False,True,True,False,False,False,False,False,False,False,True,False,False,True,False,False,False,False,False,False,False,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for x in lst:\n        if x==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for i in range(len(lst)):\n        if lst[i]==True:\n            count_true+=1\n    return count_true\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    total = 0\n    for item in lst:\n        if item == True:\n            total += 1\n    return total\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # COMPLETELY WORKED WITH LIST and TUPES\n    # ADD LIST TO TUPLE\n    # WRITE THE LIST TO THE TUPLE\n    # RETURN THE TUPLE\n    test_list.append(test_tup[0])\n    return tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Loop through the test list and append the tuple\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a list to be appended to the tuples\n    new_list = []\n    # append the tuple\n    for x in test_tup:\n        new_list.append(x)\n    # append the list\n    test_list.append(new_list)\n    # return the new list\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Write your code here\n    for x in range(len(test_list)):\n        for y in range(len(test_tup)):\n            test_tup[y][x] = test_list[x]\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if not isinstance(test_tup, tuple):\n        test_tup = (test_tup,)\n    test_list += test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    for index in test_tup:\n        test_list.append(index)\n    test_tup = tuple(test_list)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup[1])\n    test_tup[0] = test_tup[0]+1\n    test_tup.append(test_tup[0]+1)\n    print(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    for i in num1:\n        for j in num2:\n            merged.append(i+j)\n    for i in num3:\n        merged.append(i)\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a = []\n    b = []\n    c = []\n    i = 0\n    while len(a) < 3 and len(b) < 3 and len(c) < 3:\n        if num1[i] < num2[i] and num2[i] < num3[i]:\n            a.append(num1[i])\n            i = i + 1\n        elif num1[i] > num2[i] and num2[i] > num3[i]:\n            b.append(num2[i])\n            i = i + 1\n        elif num1[i] < num3[i] and num3[i] < num2[i]:\n            c.append(num3[i])\n            i = i + 1\n    if i > 0:\n        if a[i] < num3[i]:\n            a = a[0:i]\n    if i > 0 and b[i] < num3[i]:\n        b = b[0:i]\n    if i > 0 and c[i] < num3[i]:\n        c = c[0:i]\n    return a + b + c\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Write your code here.\n    n1=len(num1)\n    n2=len(num2)\n    n3=len(num3)\n    heap = [0] * (n1 + n2 + n3)\n    # print(heap)\n    # print(heapq.heapify(heap))\n    l1=[]\n    l2=[]\n    l3=[]\n    for i in range(n1 + n2 + n3):\n        if i >= n1:\n            heapq.heappush(heap,num1[i-n1])\n            l1.append(heapq.heappop(heap))\n        elif i >= n2:\n            heapq.heappush(heap,num2[i-n2])\n            l2.append(heapq.heappop(heap))\n        else:\n            heapq.heappush(heap,num3[i-n3])\n            l3.append(heapq.heappop(heap))\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == []:\n        return num3\n    elif num2 == []:\n        return num1\n    elif num2[0] < num1[0]:\n        num3.append(num2[0])\n        num2.pop(0)\n    else:\n        num3.append(num1[0])\n        num1.pop(0)\n    return merge_sorted_list(num1,num2,num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #create the merged list\n    merged_list=[]\n    \n    #iterate over the three lists\n    for i in range(len(num1)):\n        #append the number to the merged list\n        merged_list.append(num1[i])\n    for i in range(len(num2)):\n        #append the number to the merged list\n        merged_list.append(num2[i])\n    for i in range(len(num3)):\n        #append the number to the merged list\n        merged_list.append(num3[i])\n    \n    #return the merged list\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result=[]\n    i=0\n    j=0\n    k=0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] < num3[k]:\n            result.append(num1[i])\n            i+=1\n            j+=1\n            k+=1\n        elif num1[i] > num2[j] > num3[k]:\n            result.append(num2[j])\n            j+=1\n        else:\n            result.append(num3[k])\n            k+=1\n    while i < len(num1):\n        result.append(num1[i])\n        i+=1\n    while j < len(num2):\n        result.append(num2[j])\n        j+=1\n    while k < len(num3):\n        result.append(num3[k])\n        k+=1\n    return result\n    \ndef merge_sorted_list_2(list):\n    '''\n    Write a function to merge a sorted list into a single sorted list.\n    '''\n    result=[]\n    if len(list) == 0:\n        return result\n    if len(list) == 1:\n        return list\n    else:\n        mid = len(list) // 2\n        left_list = merge_sorted_list_2(list[:mid])\n        right_list = merge_sorted_list_2(list[mid:])\n        return merge_sorted_list(left_list, right_list, list)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None:\n        num1 = []\n    if num2 is None:\n        num2 = []\n    if num3 is None:\n        num3 = []\n    num1.extend(num2)\n    num1.extend(num3)\n    return sorted(num1)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 is None:\n        if num2 is None:\n            if num3 is None:\n                return None\n            return num3\n        else:\n            return None\n    elif num2 is None:\n        if num3 is None:\n            return None\n        return num1 + num3\n    elif num3 is None:\n        return num1 + num2\n    else:\n        return merge_sorted_list(num1,num2.next,num3.next) + num1 + num2 + num3.next\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    n1 = num1 + num2\n    n2 = num1 + num3\n    n3 = num2 + num3\n    res = []\n    heapq.heapify(res)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # your code goes here\n    num1.append(num2.pop())\n    num2.append(num3.pop())\n    return num1, num2, num3\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n):\n        result = result + (int(s[i])*(2**i))\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd=0\n    for i in range(n):\n        x=s[i%len(s)]\n        if (x=='1' or x=='0') and (s[i%len(s)]!='1' or s[i%len(s)]!='0'):\n            odd+=1\n    if odd==n:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) % 2 == 1:\n        return \"The given string is not valid.\"\n    else:\n        return n*len(s)//2\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd = 0\n    for i in range(1,n+1):\n        odd += (s[i-1] + s[i]) % 2\n        if (odd % 2 == 0):\n            odd = 0\n    return odd"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n%2==1:\n        return 0\n    else:\n        for i in range(n):\n            if s[i]%2!=0:\n                return 0\n        return 1\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return n % 2\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    a = s[0]\n    b = s[1]\n    s = s[2:]\n    if n % 2 == 1: \n        c = s[0]\n        d = s[1]\n        s = s[2:]\n        if b == c: \n            return odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2)\n        else: \n            return odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2)\n    else: \n        return odd_Equivalent(s,n//2) + odd_Equivalent(s,n//2)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res=0\n    for i in range(0,n):\n        for j in range(0,i+1):\n            if j==0:\n                res+=1\n            else:\n                res+=res\n    return res\nprint(odd_Equivalent(\"10\",10))\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd=0\n    for i in s:\n        if int(i)%2==1:\n            odd+=1\n        else:\n            pass\n    return odd\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist)!= type(list()):\n        return print(\"Please enter a list\")\n    else:\n        list1 = nestedlist\n        list2 = nestedlist[:]\n        list2.sort()\n        if (len(list1)==len(list2)):\n            for i in range(len(list1)):\n                for j in range(len(list2)):\n                    if (list1[i]==list2[j]):\n                        return print(\" \".join(list1))\n        else:\n            print(\"Please enter a list of length equal to the number of sublists\")\n            return common_in_nested_lists(nestedlist[1:])\n        \n    \ndef common_in_lists(list1,list2):\n    '''\n    Write a function to find the common elements in given lists.\n    '''\n    list3=[]\n    for i in range(len(list1)):\n        if list1[i] not in list3:\n            list3.append(list1[i])\n    return list3\n    \ndef common_in_tuple(tup1,tup2):\n    '''\n    Write a function to find the common elements in given tuples.\n    '''\n    if type(tup1)!= type(tuple()):\n        return print(\"Please enter a tuple\")\n    else:\n        tup3=tup1\n        tup4=tup1[:]\n        tup4.sort()\n        if (len(tup3)==len(tup4)):\n            for i in range(len(tup3)):\n                for j in range(len(tup4)):\n                    if (tup3[i]==tup4[j]):\n                        return print(\" \".join(tup3))\n        else:\n            print(\"Please enter a tuple of length equal to the number of sublists\")\n            return common_in_tuple(tup1[1:],tup2[1:])\n        \n        \ndef common_in_dictionary(dict1,dict2):\n    '''\n    Write a function to find the common elements in given dictionaries.\n    '''\n    dic3=dict()\n    for i in dict1.keys():\n        if i not in dic3.keys():\n            dic3[i]=dict1[i]\n    for j in dict2.keys():\n        if j not in dic3.keys():\n            dic3[j]=dict2[j]\n    for i in dic3.values():\n        if i not in dic3.values():\n            return i\n        \n    \ndef common_in_dict(dict1,dict2):\n    '''\n    Write a function to find the common elements in given dictionaries.\n    '''\n    dic4=dict()\n    for i in dict1.keys():\n        if i not in dic4.keys():\n            dic4[i]=dict1[i]\n    for j in dict2.keys():\n        if j not in dic4.keys():\n            dic4[j]=dict2[j]\n    for i in dic4.values():\n        if i not in dic4.values():\n            return i\n        \n    \ndef main():\n    list1=[]\n    list2=[]\n    list3=[]\n    list4=[]\n    list5=[]\n    list6=[]\n    list7=[]\n    list8=[]\n    list9=[]\n    list10=[]\n    list11=[]\n    list12=[]\n    list13=[]\n    list14=[]\n    list15=[]\n    list16=[]\n    list17=[]\n    list18=[]\n    list19=[]\n    list20=[]\n    list21=[]\n    list22=[]\n    list23=[]\n    list24=[]\n    list25=[]\n    list26=[]\n    list27=[]\n    list28=[]\n    list29=[]\n    list30=[]\n    list31=[]\n    list32=[]\n    list33=[]\n    list34=[]\n    list35=[]\n    list36=[]\n    list37=[]\n    list38=[]\n    list39=[]\n    list40=[]\n    list41=[]\n    list42=[]\n    list43=[]\n    list44=[]\n    list45=[]\n    list46=[]\n    list47=[]\n    list48=[]\n    list49=[]\n    list50=[]\n    list51=[]\n    list52=[]\n    list53=[]\n    list54=[]\n    list55=[]\n    list56=[]\n    list57=[]\n    list58=[]\n    list59=[]\n    list60=[]\n    list61=[]\n    list62=[]\n    list63=[]\n    list64=[]\n    list65=[]\n    list66=[]\n    list67=[]\n    list68=[]\n    list69=[]\n    list70=[]\n    list71=[]\n    list72=[]\n    list73=[]\n    list74=[]\n    list75=[]\n    list76=[]\n    list77=[]\n    list78=[]\n    list79=[]\n    list80=[]\n    list81=[]\n    list82=[]\n    list83=[]\n    list84=[]\n    list85=[]\n    list86=[]\n    list87=[]\n    list88=[]\n    list89=[]\n    list90=[]\n    list91=[]\n    list92=[]\n    list93=[]\n    list94=[]\n    list95=[]\n    list96=[]\n    list97=[]\n    list98=[]\n    list99=[]\n    list100=[]\n    list101=[]\n    list102=[]\n    list103=[]\n    list104=[]\n    list105=[]\n    list106=[]\n    list107=[]\n    list108=[]\n    list109=[]\n    list110=[]\n    list111=[]\n    list112=[]\n    list113=[]\n    list114=[]\n    list115=[]\n    list116=[]\n    list117=[]\n    list118=[]\n    list119=[]\n    list120=[]\n    list121=[]\n    list122=[]\n    list123=[]\n    list124=[]\n    list125=[]\n    list126=[]\n    list127=[]\n    list128=[]\n    list129=[]\n    list130=[]\n    list131=[]\n    list132=[]\n    list133=[]\n    list134=[]\n    list135=[]\n    list136=[]\n    list137=[]\n    list138=[]\n    list139=[]\n    list140=[]\n    list141=[]\n    list142=[]\n    list143=[]\n    list144=[]\n    list145=[]\n    list146=[]\n    list147=[]\n    list148=[]\n    list149=[]\n    list150=[]\n    list151=[]\n    list152=[]\n    list153=[]\n    list154=[]\n    list155=[]\n    list156=[]\n    list157=[]\n    list158=[]\n    list159=[]\n    list160=[]\n    list161=[]\n    list162=[]\n    list163=[]\n    list164=[]\n    list165=[]\n    list166=[]\n    list167=[]\n    list168=[]\n    list169=[]\n    list170=[]\n    list171=[]\n    list172=[]\n    list173=[]\n    list174=[]\n    list175=[]\n    list176=[]\n    list177=[]\n    list178=[]\n    list179=[]\n    list180=[]\n    list181=[]\n    list182=[]\n    list183=[]\n    list184=[]\n    list185=[]\n    list186=[]\n    list187=[]\n    list188=[]\n    list189=[]\n    list190=[]\n    list191=[]\n    list192=[]\n    list193=[]\n    list194=[]\n    list195=[]\n    list196=[]\n    list197=[]\n    list198=[]\n    list199=[]\n    list200=[]\n    list201=[]\n    list202=[]\n    list203=[]\n    list204=[]\n    list205=[]\n    list206=[]"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist[0]) is list:\n        common = []\n        for item in nestedlist:\n            if type(item) is list:\n                common = common + common_in_nested_lists(item)\n        return common\n    else:\n        return [nestedlist]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [el for el in nestedlist[0]]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [l for l in nestedlist if l]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_of_elements = []\n    for i in range(0, len(nestedlist)):\n        for j in range(0, len(nestedlist)):\n            list_of_elements.append(nestedlist[i][j])\n    return list_of_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for nested_list in nestedlist:\n        common_elements.extend(nested_list)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        if isinstance(i,list):\n            for x in i:\n                if isinstance(x,list):\n                    common.extend(x)\n        elif isinstance(i,list):\n            for x in i:\n                if isinstance(x,list):\n                    common.extend(x)\n    return list(set(common))\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for el in nestedlist:\n        if isinstance(el, list):\n            common = common.union(common_in_nested_lists(el))\n        elif el in common:\n            return el\n    return None\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty list to store result\n    list_of_elements = []\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [nested for nested in nestedlist if not nested in nestedlist]\n    "
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n    except Exception:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    is_empty = True\n    for dictionary in list1:\n        for key in dictionary:\n            if dictionary[key] == '':\n                is_empty = False\n                break\n    if is_empty == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i]!= {}:\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    if len(list1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)>0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        if type(element) is dict:\n            empty_dit(element.values())\n            break\n    else:\n        return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Your code here\n    for i in range(len(list1)):\n        if list1[i] == {}:\n            return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    print(\"*** start checking for empty dictionaries ***\")\n    print(\"The dictionaries are : \", end=\" \")\n    print(list1)\n    for i in range(len(list1)):\n        empty_list = []\n        for j in range(len(list1[i])):\n            if list1[i][j] == {}:\n                empty_list.append(j)\n        if len(empty_list) == 0:\n            print(list1[i], end=\" \")\n        else:\n            print(\"(\", end=\" \")\n            print(list1[i], \")\")\n    print(\"\\n\")\n    return list1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return nums[0] * 1000 + nums[1]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_list = []\n    for item in nums:\n        int_list.append(item)\n    return int_list\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_nums = list(map(int, nums))\n    return int_nums[0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(num) for num in nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return nums\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Your code here\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # YOUR CODE HERE\n    return 0\n    #raise NotImplementedError\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(i) for i in nums)\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pas"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for row in test_list:\n        for item in row:\n            if item!= \"\":\n                item = float(item)\n                result.append(item)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(len(test_list[i][j])):\n                test_list[i][j][k] = float(test_list[i][j][k])\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = list(test_list)\n    for element in test_list:\n        for i in range(len(element)):\n            if element[i]!= \"\":\n                element[i] = float(element[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    final_list = []\n    for list in test_list:\n        for item in list:\n            if type(item) is list:\n                for subitem in item:\n                    try:\n                        subitem = float(subitem)\n                        if subitem not in final_list:\n                            final_list.append(subitem)\n                    except Exception:\n                        pass\n            else:\n                try:\n                    item = float(item)\n                    if item not in final_list:\n                        final_list.append(item)\n                except Exception:\n                    pass\n    return final_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    def convert_to_float(li):\n        '''\n        Iterate through every item in a list and convert it to float.\n        '''\n        try:\n            for item in li:\n                if isinstance(item, float):\n                    return item\n        except ValueError:\n            return None\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    print(\"Converting the given list to float...\")\n    float_list = []\n    for lst in test_list:\n        for i in range(len(lst)):\n            if type(lst[i]) == list:\n                lst[i] = list_to_float(lst[i])\n            elif type(lst[i]) == str:\n                lst[i] = float(lst[i])\n            elif type(lst[i]) == int or type(lst[i]) == float:\n                lst[i] = float(lst[i])\n        float_list.append(lst)\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    num_elements = len(test_list)\n    for i in range(num_elements):\n        for j in range(i+1,num_elements):\n            num_to_convert = test_list[i] * test_list[j]\n            test_list[i] = num_to_convert\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = list(filter(lambda x: x is not None, test_list))\n    return list(map(lambda x: list_to_float(x), test_list))\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    #create empty list\n    list = []\n    #convert the string to list\n    list_string = string.split()\n    for x in list_string:\n        #add the list to the empty list\n        list.append(x)\n    #sort the list\n    list.sort()\n    #return the list\n    return list\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(' '))\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if len(string) < 0 or len(string) > 100000: \n        raise ValueError('String is too long!')\n    else: \n        return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split(' '))\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    words = string.split()\n    return words\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [word.strip() for word in string.split() if word.strip()]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    split = string.split(' ')\n    return split\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split()\n    for i in range(len(string)):\n        string[i] = list(string[i])\n    return string\n    \ndef reverse_string(string):\n    '''\n    Write a function that reverses a string.\n    '''\n    string_2 = \"\"\n    for i in range(len(string)):\n        string_2 += string[i][::-1]\n    return string_2\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split(' ')\n    return string\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # return the list of first appearance of the element\n    # time complexity: O(n)\n    # space complexity: O(n)\n    def first_occur(element):\n        left = 0\n        right = len(arr)-1\n        \n        while left <= right:\n            mid = (left + right)//2\n            if element == arr[mid]:\n                return mid\n            elif element < arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return -1\n    \n    # return the first occurence of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def find_first_occur(element):\n        first_occur = first_occur(element)\n        if first_occur == -1:\n            return -1\n        return first_occur\n    \n    # return the frequency of the element\n    # time complexity: O(n)\n    # space complexity: O(n)\n    def frequency(element):\n        count = 0\n        for i in arr:\n            if element == i:\n                count += 1\n        return count\n    \n    # return the index of the element\n    # time complexity: O(n)\n    # space complexity: O(n)\n    def index(element):\n        return arr.index(element)\n    \n    # return the length of the array\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def length(arr):\n        return len(arr)\n    \n    # return the first occurence of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def first_occur(element):\n        first_occur = first_occur(element)\n        if first_occur == -1:\n            return -1\n        return first_occur\n    \n    # return the frequency of the element\n    # time complexity: O(n)\n    # space complexity: O(n)\n    def frequency(element):\n        count = 0\n        for i in arr:\n            if element == i:\n                count += 1\n        return count\n    \n    # return the index of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def index(element):\n        return arr.index(element)\n    \n    # return the length of the array\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def length(arr):\n        return len(arr)\n    \n    # return the first occurence of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def first_occur(element):\n        first_occur = first_occur(element)\n        if first_occur == -1:\n            return -1\n        return first_occur\n    \n    # return the frequency of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def frequency(element):\n        count = 0\n        for i in arr:\n            if element == i:\n                count += 1\n        return count\n    \n    # return the index of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def index(element):\n        return arr.index(element)\n    \n    # return the length of the array\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def length(arr):\n        return len(arr)\n    \n    # return the first occurence of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def first_occur(element):\n        first_occur = first_occur(element)\n        if first_occur == -1:\n            return -1\n        return first_occur\n    \n    # return the frequency of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def frequency(element):\n        count = 0\n        for i in arr:\n            if element == i:\n                count += 1\n        return count\n    \n    # return the index of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def index(element):\n        return arr.index(element)\n    \n    # return the length of the array\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def length(arr):\n        return len(arr)\n    \n    # return the first occurence of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def first_occur(element):\n        first_occur = first_occur(element)\n        if first_occur == -1:\n            return -1\n        return first_occur\n    \n    # return the frequency of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def frequency(element):\n        count = 0\n        for i in arr:\n            if element == i:\n                count += 1\n        return count\n    \n    # return the index of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def index(element):\n        return arr.index(element)\n    \n    # return the length of the array\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def length(arr):\n        return len(arr)\n    \n    # return the first occurence of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def first_occur(element):\n        first_occur = first_occur(element)\n        if first_occur == -1:\n            return -1\n        return first_occur\n    \n    # return the frequency of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def frequency(element):\n        count = 0\n        for i in arr:\n            if element == i:\n                count += 1\n        return count\n    \n    # return the index of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def index(element):\n        return arr.index(element)\n    \n    # return the length of the array\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def length(arr):\n        return len(arr)\n    \n    # return the first occurence of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def first_occur(element):\n        first_occur = first_occur(element)\n        if first_occur == -1:\n            return -1\n        return first_occur\n    \n    # return the frequency of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def frequency(element):\n        count = 0\n        for i in arr:\n            if element == i:\n                count += 1\n        return count\n    \n    # return the index of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def index(element):\n        return arr.index(element)\n    \n    # return the length of the array\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def length(arr):\n        return len(arr)\n    \n    # return the first occurence of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def first_occur(element):\n        first_occur = first_occur(element)\n        if first_occur == -1:\n            return -1\n        return first_occur\n    \n    # return the frequency of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def frequency(element):\n        count = 0\n        for i in arr:\n            if element == i:\n                count += 1\n        return count\n    \n    # return the index of the element\n    # time complexity: O(n)\n    # space complexity: O(1)\n    def index(element):\n        return arr.index(element)\n    \n    # return the length of the array\n    # time complexity: O(n)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    result = []\n    for i in arr:\n        if i in result:\n            result.remove(i)\n        else:\n            result.append(i)\n    return result[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == arr[mid + 1]:\n            right = mid - 1\n        elif arr[mid] < arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr[left]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Helper function to get the count of occurrences\n    def countOccurences(arr, val):\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] == val:\n                count += 1\n        return count\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    for x in range(len(arr)):\n        first = arr[0]\n        if first!= arr[x]:\n            for y in range(len(arr)):\n                second = arr[y]\n                if first == second:\n                    if y == len(arr) - 1:\n                        return x\n                    else:\n                        break\n            return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    num_arr = len(arr)\n    left_index = 0\n    right_index = num_arr - 1\n    left_count = right_count = 0\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #return arr[0] if len(arr) == 1 else arr[0]\n    #return arr[0]\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # TODO: implement this function\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    length = len(arr)\n    search = 0\n    for i in range(0, length):\n        if arr[i]!= search:\n            search = arr[i]\n        else:\n            pass\n    return search\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in list1:\n        for j in list1:\n            if i + j > max:\n                max = i + j\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_val = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = list1[i][0] * list1[j][0]\n            if current_product > max_val:\n                max_val = current_product\n    return max_val\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = list1[0]\n    for i in range(0, len(list1)):\n        for j in range(i + 1, len(list1)):\n            temp = (list1[i][0] * list1[j][0])\n            if(temp > max_product):\n                max_product = temp\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    l1 = 0\n    l2 = 0\n    for i in list1:\n        for j in list1:\n            if i[0] > j[0]:\n                l1 = l1 + i[0] * j[1]\n            elif i[0] < j[0]:\n                l2 = l2 + j[0] * i[1]\n    return l1, l2\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_product_pairs(num_list):\n        '''\n        Returns the maximum product between the given list.\n        '''\n        #Iterate through each tuple\n        for n1 in num_list:\n            for n2 in num_list:\n                #If the product is positive, return the product\n                if n1 > n2:\n                    #If the product is negative, return the product\n                    if n1 < 0:\n                        return n1*n2\n                #If the product is negative, return 0\n                elif n1 < 0:\n                    return 0\n        return 0\n    #Return the maximum product\n    return max_product_pairs(list1)\n    "
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)<=1:\n        return (list1[0][0])\n    \n    max1=list1[0][0]\n    max2=list1[1][0]\n    for i in range(2,len(list1)):\n        if list1[i][0]>max1:\n            max1=list1[i][0]\n            max2=list1[i][1]\n    return (max1*max2)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n    \nprint(max_product_tuple([(1, 2), (2, 4), (3, 5), (2, 6), (3, 7)]))\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    sum_pairs = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            sum_pairs += list1[i][0]*list1[j][0]\n    return sum_pairs\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if max < list1[i][1] * list1[j][1]:\n                max = list1[i][1] * list1[j][1]\n    return max\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    amicable_numbers = []\n    \n    for i in range(1, limit + 1):\n        \n        if i == 2 and i > 0:\n            continue\n        \n        for j in range(1, i + 1):\n            if i % j == 0 and i!= j:\n                amicable_numbers.append(i * j)\n                \n    amicable_numbers = list(set(amicable_numbers))\n    amicable_numbers.sort()\n    \n    sum_amicable_numbers = sum(amicable_numbers)\n    \n    return sum_amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers=[]\n    sum=1\n    while sum<=limit:\n        if sum==1:\n            sum+=1\n        elif sum%2==0:\n            amicable_numbers.append(sum)\n            sum+=2\n        else:\n            amicable_numbers.append(sum)\n            sum+=1\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_list = []\n    amicable_numbers_sum = 0\n    for i in range(1, limit + 1):\n        if i % 2 == 0:\n            amicable_numbers_list.append(i)\n            if i in amicable_numbers_list:\n                amicable_numbers_sum += i\n        else:\n            for j in range(1, i):\n                if i % j == 0:\n                    if j in amicable_numbers_list:\n                        amicable_numbers_sum += i\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    \n    for number in range(1, limit+1):\n        if is_amicable(number):\n            result += number\n            \n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        # check if the sum of the two squares is divisible by each other\n        if num % (num - 1) == 0 and num % (num + 1) == 0:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1,limit):\n        if is_amicable(num):\n            sum += num\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_list = []\n    n = limit\n    while n!= 0:\n        if n % 2 == 0 and n % 3 == 0:\n            amicable_list.append(n)\n        n = n // 3\n        n = n // 2\n    return sum(amicable_list)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1,limit):\n        if sum([num for num in range(1, i) if num%2==0])==i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    if limit < 1:\n        return 0\n    amicable_numbers = []\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_value = cmath.phase(a*b)\n    return angle_value\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x1 = cmath.polar(a)\n    x2 = cmath.polar(b)\n    angle = (x2[0] - x1[0])/2\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == b == 0:\n        return 0\n    else:\n        c = cmath.sqrt(a.real**2+b.real**2+a.imag**2+b.imag**2)\n        if a.real == 0:\n            a.imag = -1*b.imag\n        elif b.real == 0:\n            b.imag = -1*a.imag\n        return abs(cmath.acos(cmath.tan(cmath.radians(a.real-b.real))))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c=cmath.sqrt(a*b)\n    return c.real,c.imag\ndef angle(a,b):\n    '''\n    Write a function to get the angle between two complex numbers.\n    '''\n    c=cmath.sqrt(a*a+b*b)\n    return c.real,c.imag\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    if c.imag==0:\n        angle = cmath.phase(c)\n    elif c.real==0:\n        angle = cmath.phase(c+0.j*cmath.e)\n    else:\n        angle = cmath.phase(c+0.j*cmath.e)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a.imag**2 + b.imag**2\n    return atan2(c, sqrt(a.real**2 + b.real**2))\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real,imag = a.real,a.imag\n    if imag > 0:\n        angle = 2*acos((real**2 + imag**2 -1)**(-1))\n    else:\n        angle = 2*acos(real**2 - imag**2)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    import math\n    return math.acos(complex(a,b))\ndef number_complex(a,b):\n    '''\n    Write a function to get the complex number.\n    '''\n    import math\n    return complex(a,b)\ndef is_complex(a,b):\n    '''\n    Write a function to test if a complex number is a real number.\n    '''\n    import math\n    if (type(a) == complex):\n        return False\n    elif (type(b) == complex):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        return cmath.pi/2\n    if a==0:\n        return 0\n    if a==b:\n        return 0\n    if b.real==a.real and b.imag==a.imag:\n        return 0\n    if b.real==0:\n        return cmath.acos(a.imag/b.imag)\n    return cmath.acos(a.imag/b.imag)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #numerator\n    num = b*b - 4*a*cmath.pi*b\n    #denominator\n    den = 2*a*b + a\n    #as a complex number, we need to convert it into real number\n    real = cmath.real(num)\n    #as a complex number, we need to convert it into imaginary number\n    im = cmath.imag(num)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count=0\n    str1=string\n    #using set to remove duplicate\n    set1 = set(str1)\n    for i in set1:\n        if i=='0':\n            count+=1\n        elif i=='1':\n            count-=1\n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    num = 0\n    for i in string:\n        if i == '0':\n            num += 1\n        elif i == '1':\n            num -= 1\n        length = max(length, num)\n    return length\n    \ndef longest_diff(string): \n    '''\n    Write a function to find the longest contiguous substring of the given string that has at most two 0s and two 1s. \n    '''\n    shortest_diff = 0\n    longest_diff = 0\n    shortest_index = 0\n    longest_index = 0\n    \n    for i in range(len(string) - 1):\n        if string[i] == '1':\n            #check if it has two 0s\n            if string[i + 1] == '0':\n                #increase the count of 0s\n                num = string[i] + string[i + 1]\n                num = str(num).count('0')\n                if num > longest_diff:\n                    longest_diff = num\n                    shortest_diff = string[i] + string[i + 1]\n                    shortest_index = i\n                #if not\n                #print(string[i] + string[i + 1])\n            #check if it has two 1s\n            elif string[i + 1] == '1':\n                #increase the count of 1s\n                num = string[i] + string[i + 1]\n                num = str(num).count('1')\n                if num > longest_diff:\n                    longest_diff = num\n                    shortest_diff = string[i] + string[i + 1]\n                    shortest_index = i\n    return 'Longest diff:'+ str(longest_diff) + ','+ 'Shortest diff:'+ str(shortest_diff) + ','+ 'Shortest index:'+ str(shortest_index) + ','+ 'Longest index:'+ str(longest_index)\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n        else:\n            length = 0\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    chars = len(string) \n    if chars < 2: \n        return 0 \n    else: \n        return find_length(string[1:chars-1]) \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    L = len(string)\n    max_diff = 0\n    for i in range(L):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, L):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n        max_diff = max(max_diff, count_0 - count_1)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    total_0_count = 0\n    total_1_count = 0\n    for i in range(len(string)):\n        if string[i] == 0:\n            total_0_count += 1\n        else:\n            total_1_count += 1\n        if string[i] == 1 and total_0_count > max_diff:\n            max_diff = total_0_count - total_1_count\n    return max_diff\n    \nif __name__ == \"__main__\":\n    string = \"00110011000111101100000000000000100000101000011111001100001000111011011011110100001101001100101000100010001\"\n    print(find_length(string)"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    start, end = 0, 0\n    num_zero = 0\n    num_one = 0\n    for i in range(len(string)): \n        if string[i] == \"0\":\n            num_zero += 1\n        else:\n            num_one += 1\n        if num_zero > 0:\n            end = i + 1\n            num_zero = 0\n            num_one = 0\n    return end - start + num_zero - num_one\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    temp_string = \"\"\n    for i in range(len(string)):\n        if string[i] == '0':\n            temp_string += '0'\n            length += 1\n        else:\n            temp_string += '1'\n            length -= 1\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l=0\n    r=len(string)\n    for i in range(len(string)):\n        if string[i]=='0':\n            l+=1\n        elif string[i]=='1':\n            r-=1\n    return l-r\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    total = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            total += 1\n        else:\n            total -= 1\n    return total\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a if a%b==0 else sum(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    num1=a\n    num2=b\n    res=0\n    while num1%num2!=0:\n        num1=num1//num2\n        res+=1\n    return res\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # create a function that checks if the number is divisible by 2\n    def divisible(num):\n        if (num % 2) == 0: \n            return False\n        for div in range(1,num): \n            if (num % div) == 0: \n                return False\n        return True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0: \n        return a \n    if a == 0: \n        return 0\n    return a * sum(b, a % b)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a<=0 or b<=0:\n        return \"Please enter valid input\"\n    if a%b==0:\n        c=a//b\n        return \"{}/{}={}\".format(c,b,c)\n    else:\n        return \"Please enter a valid input\"\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        a,b = b,a\n    while a % b!= 0:\n        a,b = b,a%b\n    return a\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0: \n        return a \n    else: \n        return a+sum(b%a, b) "
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b==0:\n        return a\n    return sum(a,b-1) \ndef main():\n    '''\n    This program prints out the common divisors of two given numbers.\n    '''\n    a=int(input(\"Enter the First Number: \"))\n    b=int(input(\"Enter the Second Number: \"))\n    print(sum(a,b)) \n    \n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, min(a,b)+1):\n        if a%i==0 and b%i==0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0 or b==0:\n        return 0\n    if a<=b:\n        if a%b==0:\n            return b+sum(a//b,b)\n        else:\n            return sum(a//b,b)\n    else:\n        return a+sum(b,a//b)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    res = 0\n    x = abs(x)\n    y = abs(y)\n    while x!=0:\n        res = x % 10\n        x //= 10\n        res = res * 10 + y % 10\n        y //= 10\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = int(x)\n    y = int(y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x_int = int(x)\n    y_int = int(y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # your code here\n    print(f\"x = {x}\")\n    print(f\"y = {y}\")\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(\"{} {}\".format(x,y))\n    print(\"{} {}\".format(result,x))\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(\"[+]\", x * y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return (x * y)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str.split():\n        if len(word) >= n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    i = 0\n    while i < len(str):\n        j = i\n        while j < len(str) and str[j] > str[i]:\n            j += 1\n        str[i:j] = str[i:j][::-1]\n        i = j\n    return str\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    for word in words:\n        if len(word) > n:\n            print(word, 'is longer than', n)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word = str.lower()\n    return [word for word in word if len(word)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    if not str:\n        return\n    len_words = []\n    for word in str:\n        len_words.append(len(word))\n    if n < min(len_words):\n        return\n    for i in range(len(str)):\n        for j in range(i, min(i+n, len(str))):\n            if len_words[j] > len_words[i]:\n                str[i], str[j] = str[j], str[i]\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Store the length\n    length = len(str)\n    # Set a dictionary to store the words with longer than n characters\n    dictionary = {}\n    # Iterate through each word in the string\n    for word in str:\n        # If the word is longer than n characters\n        if length < n:\n            # Remove the word from the list\n            str.remove(word)\n            # Update the dictionary\n            dictionary[word] = 1\n        # If the word is not longer than n characters\n        else:\n            # Remove the word from the list\n            str.remove(word)\n            # Add it to the dictionary\n            dictionary[word] = dictionary.get(word, 0) + 1\n    # Return the dictionary\n    return dictionary\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str:\n        if len(word) > n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return \" \".join(sorted(list(set(str.split()))))\n    "
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest_word = \"\"\n    for word in str:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    count = {}\n    for word in str.split():\n        count[word] = count.get(word, 0) + 1\n    words = [w for w in count if count[w] > n]\n    words.sort()\n    return words\n    \ndef main():\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    print(long_words(n, words))\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 0:\n                return False\n            else:\n                for k in range(len(my_matrix)):\n                    if my_matrix[i][j] == my_matrix[k][j]:\n                        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for row in my_matrix:\n        print(row)\n        print(row[0] + row[-1])\n        if row[0] + row[-1]!= row[0] * row[-1]:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for x in range(len(my_matrix)):\n        for y in range(len(my_matrix[x])):\n            if my_matrix[x][y]!= 0:\n                if x < y:\n                    return False\n                elif y > x:\n                    return False\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (len(my_matrix)!= len(my_matrix[0])):\n        return False\n    for i in range(len(my_matrix)):\n        if (my_matrix[i][i]!= 1):\n            return False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if (my_matrix[i][j]!= 1):\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if is_magic(my_matrix):\n        return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Write your code here\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # We want to see if the length of the matrix is even\n    if len(my_matrix) % 2 == 0:\n        # if the length of the matrix is even, we know it's a square\n        square_length = len(my_matrix) // 2\n        for i in range(square_length):\n            for j in range(square_length):\n                # if the diagonal values are odd, the square is a square\n                if my_matrix[i][j] % 2 == 1:\n                    print(my_matrix[i][j])\n                    return\n    # if the length of the matrix is not even, it's not a square\n    else:\n        # if the length of the matrix is odd, the square is a square\n        square_length = len(my_matrix) // 2\n        for i in range(square_length):\n            for j in range(square_length):\n                # if the diagonal values are odd, the square is a square\n                if my_matrix[i][j] % 2!= 1:\n                    print(my_matrix[i][j])\n                    return\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check for 1x1 and check for equality\n    # Check for 2x2 and check for 1x3\n    # Check for 3x3 and check for 1x4\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 1:\n                return False\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[j][i]!= 1:\n                return False\n    # Check for 1x1 and check for 5x1\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 5:\n                return False\n    # Check for 1x1 and check for 3x3\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 3:\n                return False\n    # Check for 1x1 and check for 2x2\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 2:\n                return False\n    # Check for 1x1 and check for 3x3\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 3:\n                return False\n    # Check for 1x1 and check for 4x4\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 4:\n                return False\n    # Check for 1x1 and check for 5x4\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 5:\n                return False\n    # Check for 1x1 and check for 6x4\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 6:\n                return False\n    # Check for 1x1 and check for 7x4\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 7:\n                return False\n    # Check for 1x1 and check for 8x4\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= 8:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    ## your code here\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrences = defaultdict(int)\n    for n in nums:\n        max_occurrences[n] += 1\n    return max(max_occurrences.values())\n    \n    \n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    nums.sort()\n    return nums[len(set(nums)) - 1]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    for k, v in d.items():\n        if v == max(d.values()):\n            return k\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(int)\n    for num in nums:\n        occurrences[num] += 1\n    return max(occurrences.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    \n    return max(d, key=d.get)\n    \ndef get_longest_common_subsequence(text1, text2):\n    '''\n    Given two strings, return a string which has the longest common subsequence\n    '''\n    \n    # find longest common subsequence\n    def longest_common_subsequence(text1, text2):\n        '''\n        Given two strings, return the longest common subsequence.\n        '''\n        \n        # create two pointers for both strings\n        p1, p2 = 0, 0\n        length = len(text1)\n        sequence = ''\n        \n        # start from second string, until the first string has been reached\n        while p2 < length:\n            # ignore the characters of the second string\n            while p1 < length and text1[p1] == text2[p2]:\n                p1 += 1\n                p2 += 1\n            \n            # if the characters are different, append the longer\n            # subsequence to the sequence.\n            if p1 == p2:\n                sequence += text2[p2]\n                p2 += 1\n                \n            # if the string is longer, update the pointer, and continue\n            # from the second string\n            else:\n                p1 = p2 + 1\n                sequence += text1[p1]\n                \n        # return the longest subsequence\n        return sequence\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = defaultdict(int)\n    for i in range(len(nums)):\n        max_freq[nums[i]] += 1\n    return max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    maximum = 0\n    for num in nums:\n        if num > maximum:\n            maximum = num\n    return maximum\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    temp = []\n    for x in nums:\n        temp.append(nums.count(x))\n    return max(temp)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums)==0:\n        return 0\n    max_freq = 0\n    for i in range(len(nums)):\n        if nums[i]>max_freq:\n            max_freq = nums[i]\n    return max_freq\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    return ''.join(reversed(str1.lower().replace(vowels, '')))\n    #return \"\".join(reversed(str1.lower().replace(vowels, '')))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = \"\"\n    vowels = 'aeiou'\n    vowels_counter = 0\n    for i in str1:\n        if i in vowels:\n            str2 += i\n        else:\n            str2 += str1[vowels_counter]\n            vowels_counter += 1\n        \n    return str2\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # \"The quick brown fox jumps over the lazy dog\"\n    # print(reverse_vowels('The quick brown fox jumps over the lazy dog'))\n    # \"reDjRoxUSt eXeTc*Y jOQmS q\"\n    # return reverse_vowels(str1.lower().replace('x','').replace('u','').replace('e','').replace('y','').replace('o','').replace('t','').replace('*','').replace('j','').replace('o','').replace('*',''))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel_dict = {'A':'a', 'E':'e', 'I':'i', 'O':'o', 'U':'u'}\n    str1 = str1.upper()\n    res = ''\n    for letter in str1:\n        if letter not in vowel_dict.values():\n            res += letter\n    print(res)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels = list(vowels)\n    vowels.reverse()\n    print(vowels)\n    return str1.translate(str.maketrans('aeiouAEIOU', 'AEIOU'))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # remove the vowels\n    str1 = str1.replace('aeiou', '')\n    # capitalize the vowels\n    str1 = str1.upper()\n    # remove all the vowels\n    str1 = str1.replace('A', 'a')\n    str1 = str1.replace('E', 'e')\n    str1 = str1.replace('I', 'i')\n    str1 = str1.replace('O', 'o')\n    str1 = str1.replace('U', 'u')\n    # return the reversed string\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels_reversed = []\n    \n    for x in str1:\n        if x == \"y\":\n            vowels_reversed.append(\"e\")\n        elif x in \"aeiou\":\n            vowels_reversed.append(x)\n        else:\n            vowels_reversed.append(\"a\")\n    \n    return \"\".join(vowels_reversed)\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=['a','e','i','o','u']\n    new_str=''\n    for letter in str1:\n        if letter in vowels:\n            new_str+=letter\n        else:\n            new_str+=' '\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # create a new string with the vowels reversed\n    reversed_string = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in VOWELS:\n            reversed_string += str1[i]\n        else:\n            reversed_string += str1[i].upper()\n    return reversed_string\n    # OUTPUT: F T Y B P S E O C O N A D E M S C A O\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_val = ''\n    for i in range(0, len(tup1)):\n        str_val += str(tup1[i])\n    return str_val\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    a = \"\"\n    for i in tup1:\n        a += str(i)\n    return a\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1=''\n    for i in range(len(tup1)):\n        if i == len(tup1)-1:\n            string1+=str(tup1[i])\n        else:\n            string1+=str(tup1[i])+', '\n    return string1[:-2]\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    lst = []\n    for i in range(len(tup1)):\n        lst.append(str(tup1[i]))\n    return \"(\" + \" \".join(lst) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '('+','.join([str(i) for i in tup1])+')'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup = '{'\n    for i in range(len(tup1)):\n        tup = tup + '\"' + str(tup1[i]) + '\"' + ', '\n    tup = tup[0:len(tup)-2]\n    tup = '[' + tup + ']'\n    return tup\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join([str(elem) for elem in tup1])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + ','\n    return str1[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s += str(i)\n        if i % 2 == 0:\n            s += ','\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x<0])\n    \nprint(sum_negativenum([1,2,3,-4]))\nprint(sum_negativenum([1,-2,3,4,-5,6]))\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # TODO: complete this function\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_nums = []\n    for num in nums:\n        if num < 0:\n            negative_nums.append(num)\n    return sum(negative_nums"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_num = 0\n    for num in nums:\n        if num < 0:\n            neg_num += num\n    return neg_num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sumnum = 0\n    for x in range(len(nums)):\n        if nums[x] < 0:\n            sumnum += nums[x]\n    return sumnum\n    \n    \n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative = 0\n    for num in nums:\n        if num < 0:\n            negative += num\n    return negative\n    \n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for x in nums:\n        if x < 0:\n            sum -= x\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total -= num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg = 0\n    for i in nums:\n        if i < 0:\n            neg += i\n    return neg\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n<0:\n        return 0\n    elif n>0:\n        n = n*(n+1)//2\n        return n\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        l = 0\n        r = n - 1\n        while r - l > 1:\n            h = (r - l) * (r - l) * (r - l)\n            if h == 1:\n                return r\n            elif h == 2:\n                return r\n            elif h == 3:\n                return l\n            elif h == 4:\n                return l\n            l = r\n            r = l + 1\n    return \"Error\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagon = n ** 2\n    i = 0\n    while hexagon - i < hexagon: \n        i += hexagon \n        hexagon -= hexagon \n    return hexagon \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n<6: \n        return n\n    else: \n        return hexagonal_num(n-6)+hexagonal_num(n-2)+hexagonal_num(n-1)\n    \ndef sum_digits(n): \n    '''\n    Return the sum of all the digits of n. \n    '''\n    while n > 0: \n        num = n % 10\n        n = n // 10\n        yield num \n    \ndef sum_digits_rec(n): \n    '''\n    Return the sum of all the digits of n. \n    '''\n    if n > 0: \n        return sum_digits_rec(n - 1) + n \n    else: \n        return 0\n        \ndef sum_digits_rec_rec(n): \n    '''\n    Return the sum of all the digits of n. \n    '''\n    if n > 0: \n        return sum_digits_rec_rec(n - 1) + n \n    else: \n        return 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    print(n, end ='')\n    for i in range(n + 1):\n        print(hexagonal_num(i), end ='')\n    print()\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex = 0\n    while n!= 0:\n        hex += n // 16\n        n = n // 16\n    return hex\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = 0\n    y = n\n    hex_num = 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x, y = n, 0\n    if n == 0:\n        return 0\n    while y < n:\n        x = (x + y) % 2\n        y = (y + x) % 2\n    return x\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n < 4):\n        return n*(n+1)\n    else:\n        return (n*(n-1))\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\ndef ones_count(nums):\n    '''\n    Write a function to find the ratio of ones to non-ones in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            count += 1\n    return count/len(nums)\ndef ones_ratio(nums):\n    '''\n    Write a function to find the ratio of ones to zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 1:\n            count += 1\n    return count/len(nums)\ndef zeroes_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to ones in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\ndef zeroes_ratio(nums):\n    '''\n    Write a function to find the ratio of zeroes to zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n=len(nums)\n    return round(float(nums.count(0)/(n+1)))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #This function counts the number of zeroes in the array.\n    zeros = 0\n    #We're going to use an array of zeros to count the number of zeros in the array.\n    zeros_array = array(nums.typecode)\n    #We're going to use an array of non-zeros to count the number of non-zeros in the array.\n    non_zeros = array('i', [0 for i in range(len(nums))])\n    #We're going to use an array of zeros and non-zeros to count the number of zeros in the array.\n    #The array will be of the same type as the array passed to the function.\n    count = array(nums.typecode)\n    #We're going to iterate through the array and find the number of zeros.\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n    zeros_array[:zeros] = zeros\n    count[zeros_array] = zeros\n    #We're going to iterate through the array and count the non-zeros.\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            non_zeros[i] = non_zeros[i] + 1\n    count[non_zeros] = non_zeros\n    return count\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Zeros count is a number of 1's in the array, otherwise 0.\n    zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n    zeroes = zeroes / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count_array = array('i',[0 for x in range(len(nums))])\n    zero_count_array.extend(array('i',[0 for x in range(len(nums))]))\n    for i in range(1,len(nums)):\n        zero_count_array[i] = nums[i] - nums[i-1]\n    return zero_count_array/sum(zero_count_array)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    return zeros/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i!= 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += pow(i, 2)\n    if total % 2 == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    s = str(n)\n    if (s[1] == \"0\") or (s[0] == \"0\"): \n        return False\n    else: \n        s = s[:len(s)-2]\n        if len(s) == 1: \n            return True\n        elif len(s) == 2: \n            return is_Sum_Of_Powers_Of_Two(s[1] * s[0]) \n    \n    # if (int(s[1]) * int(s[0])) == n: \n    #     return True\n    # else: \n    #     return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n > 2:\n        return all(is_Sum_Of_Powers_Of_Two(i) for i in range(3, n))\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 1:\n        return False\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            if i == 1 or i == n:\n                continue\n            else:\n                if i % 2 == 0:\n                    sum += i\n        return True if sum == n else False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_2=2**(n+1)\n    if n%power_of_2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return True\n    else: \n        if n == 2: \n            return True\n        else: \n            return n % 2 == 0\n    "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    \n    for i in range(1,int(math.sqrt(n)+1)): \n        if n % i == 0: \n            return False\n        if n // i == i: \n            return is_Sum_Of_Powers_Of_Two(n // i)\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    sum = 1\n    i = 0\n    while i < n: \n        if n % 2!= 0: \n            sum = sum * n \n            n = n // 2 \n        else: \n            i = i + 1 \n            n = n // 2 \n    if n == 1: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    def calculate_sum_of_pow_two_numbers(n): \n        '''\n        Calculate the sum of the pow-2 numbers in a given number n. \n        \n        '''\n        \n        if n < 10:\n            return n\n        elif n < 100:\n            return n**2\n        elif n < 1000:\n            return n**3\n        else:\n            return n**4\n    \n    return sum(calculate_sum_of_pow_two_numbers(i) for i in range(1, n+1)) == n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    if n%2 == 0: \n        return False\n    else: \n        for i in range(1,n+1): \n            if n == i: \n                return True\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    area = 3.14 * r**2\n    return area\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*(3.14*(r**2))\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    print(\"Circumference of the circle:\", 2*3.14*(r**2))\n    return 2*3.14*(r**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * (pi * r)\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * (r**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    print(\"The circumference is:\", circumference)\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    print(\"Finding circumference of a circle with radius {}\".format(r))\n    circumference = 3.14 * r * r\n    print(\"Circumference of a circle with radius {} is {}\".format(r, circumference))\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # write your function here\n    flatten = []\n    # for i in test_list:\n    #     for j in i:\n    #         flatten.append(j)\n    # return flatten\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = [[1, 2, 3], [3, 2, 1], [1, 2, 3, 4, 5]]\n    new_test_list = []\n    for item in test_list:\n        new_test_list = new_test_list + item\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    extracted = []\n    for i in test_list:\n        extracted.extend(i)\n    return extracted\n    pass\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for element in test_list:\n        if isinstance(element, list):\n            for item in element:\n                singly_list.append(item)\n        else:\n            singly_list.append(element)\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    my_list = []\n    for item in test_list:\n        my_list.extend(item)\n    return my_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            for x in item:\n                new_list.append(x)\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        for number in item:\n            flattened.append(number)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    my_set = []\n    for item in test_list:\n        for num in item:\n            my_set.append(num)\n    return my_set\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # find the length\n    test_len = len(test_list)\n    # if the length is less than 4, then return the whole list\n    if test_len < 4:\n        return test_list\n    # if the length is 5, then return a list of the number 1, 2, 3, 4, 5\n    if test_len == 5:\n        return [1, 2, 3, 4, 5]\n    # if the length is more than 5, then return a list of the numbers 1, 2, 3, 4, 5, 6\n    if test_len > 5:\n        return [i + 1 for i in test_list]\n    \ndef flatten_singly(test_list):\n    '''\n    Write a function that can be applied to any iterable and returns a new list\n    with all items flattened into the same place.\n    '''\n    # if the list is empty, return it\n    if not test_list:\n        return []\n    # check if the length of the list is less than 4, return the whole list\n    if len(test_list) < 4:\n        return test_list\n    # if the length is 5, return a list of the number 1, 2, 3, 4, 5\n    if len(test_list) == 5:\n        return [i + 1 for i in test_list]\n    # if the length is more than 5, return a list of the numbers 1, 2, 3, 4, 5, 6\n    return [i + 1 for i in test_list]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if not test_list:\n        return []\n    if not test_list[0]:\n        return []\n    \n    out = []\n    for item in test_list:\n        if not item:\n            out.append([])\n        else:\n            out[-1].append(item[0])\n            out.append(item[1:])\n    return out\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = 0\n    pancake = nums\n    while i < len(nums):\n        if i + 1 < len(nums):\n            if pancake[i] < pancake[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                i += 1\n            else:\n                i += 1\n        else:\n            i += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    else:\n        mid = len(nums) // 2\n        front = nums[:mid]\n        back = nums[mid:]\n        return pancake_sort(front) + [nums[mid]] + pancake_sort(back)\n    "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def quick_sort(arr):\n        p = len(arr)\n        if p < 2:\n            return arr\n        else:\n            mid = p // 2\n            left = quick_sort(arr[:mid])\n            right = quick_sort(arr[mid:])\n            return quick_sort(left) + [arr[mid]] + quick_sort(right)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        max_index = i\n        for j in range(i+1,len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        temp = nums[i]\n        nums[i] = nums[max_index]\n        nums[max_index] = temp\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    while len(heap) > 1:\n        smallest = heapq.heappop(heap)\n        largest = heapq.heappop(heap)\n        heapq.heappush(heap, smallest+largest)\n    return heap\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    print(nums)\n    if len(nums) < 2:\n        return nums\n    middle_index = len(nums)//2\n    middle_num = nums[middle_index]\n    nums.remove(middle_num)\n    nums.sort()\n    nums.append(middle_num)\n    nums = sorted(nums, reverse=True)\n    print(nums)\n    return nums\n    \n    # nums.sort(reverse=True)\n    # nums = sorted(nums, reverse=True)\n    # nums = [middle_index for middle_index in range(len(nums)) if nums[middle_index] == middle_num]\n    # nums = [middle_index for middle_index in range(len(nums)) if middle_num == nums[middle_index]]\n    # print(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # use slicing to take the first element off the end of the list\n    # and increment it by one, if it's the first element\n    # then it's the last element\n    # then swap it with the first element, if it's not, swap the first element with the second element\n    #... etc\n    # so if we have 5 things in the list, then it's a three-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # if we have 6 elements in the list, then it's a two-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # now we need to take the first element off the end and increment it by one, if it's the first element\n    # then it's the last element\n    # then swap it with the first element, if it's not, swap the first element with the second element\n    #... etc\n    # so if we have 5 things in the list, then it's a three-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # now we need to take the first element off the end and increment it by one, if it's the first element\n    # then it's the last element\n    # then swap it with the first element, if it's not, swap the first element with the second element\n    #... etc\n    # so if we have 5 things in the list, then it's a three-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # now we need to take the first element off the end and increment it by one, if it's the first element\n    # then it's the last element\n    # then swap it with the first element, if it's not, swap the first element with the second element\n    #... etc\n    # so if we have 5 things in the list, then it's a three-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # now we need to take the first element off the end and increment it by one, if it's the first element\n    # then it's the last element\n    # then swap it with the first element, if it's not, swap the first element with the second element\n    #... etc\n    # so if we have 5 things in the list, then it's a three-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # now we need to take the first element off the end and increment it by one, if it's the first element\n    # then it's the last element\n    # then swap it with the first element, if it's not, swap the first element with the second element\n    #... etc\n    # so if we have 5 things in the list, then it's a three-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # now we need to take the first element off the end and increment it by one, if it's the first element\n    # then it's the last element\n    # then swap it with the first element, if it's not, swap the first element with the second element\n    #... etc\n    # so if we have 5 things in the list, then it's a three-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # now we need to take the first element off the end and increment it by one, if it's the first element\n    # then it's the last element\n    # then swap it with the first element, if it's not, swap the first element with the second element\n    #... etc\n    # so if we have 5 things in the list, then it's a three-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # now we need to take the first element off the end and increment it by one, if it's the first element\n    # then it's the last element\n    # then swap it with the first element, if it's not, swap the first element with the second element\n    #... etc\n    # so if we have 5 things in the list, then it's a three-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a three-sided pancake sort\n    # now we need to take the first element off the end and increment it by one, if it's the first element\n    # then it's the last element\n    # then swap it with the first element, if it's not, swap the first element with the second element\n    #... etc\n    # so if we have 5 things in the list, then it's a three-sided pancake sort\n    # to make this simpler, we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    # so we need to add one element to the end of the list at each iteration\n    # so it's a two-sided pancake sort\n    "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(1, len(nums)):\n        swap(nums, i, 0)\n    return nums\n    \n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        curr_index = nums.index(i)\n        if curr_index < len(nums) - 1:\n            nums[curr_index + 1], nums[curr_index] = nums[curr_index], nums[curr_index + 1]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def partition(arr, start, end):\n        p = arr[end]\n        i = start\n        j = end\n        while i < j:\n            while i < j and arr[j] > p:\n                j-=1\n            arr[i], arr[j] = arr[j], arr[i]\n            i+=1\n            j-=1\n        arr[i], arr[j] = arr[j], arr[i]\n        return j\n    def quick_sort(arr, start, end):\n        if start >= end:\n            return\n        p = partition(arr, start, end)\n        quick_sort(arr, start, p-1)\n        quick_sort(arr, p+1, end)\n    quick_sort(nums, 0, len(nums)-1)\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i]!= list3[j]:\n                res+=1\n    return res\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if(list1[i]==list2[j] and list2[j]==list3[k]):\n                    count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i] == list3[j]:\n                count +=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    same = []\n    #for i in range(len(list1)):\n    #    for j in range(len(list2)):\n    #        if list1[i] == list2[j]:\n    #            same.append(list1[i])\n    #same.append(list1[i])\n    #same.append(list2[j])\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                same.append(list1[i])\n    for i in range(len(list3)):\n        if list1[i] == list2[i]:\n            same.append(list1[i])\n    #print(same)\n    return len(same)\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    for i in list3:\n        for j in list3:\n            if i == j:\n                count += 1\n    return count\n    \nlist1 = [\"a\",\"b\",\"c\"]\nlist2 = [\"a\",\"a\",\"b\"]\nlist3 = [\"a\",\"a\",\"a\"]\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return list1.count(list2[0])*list2.count(list3[0])*list3.count(list1[0]) + list1.count(list2[1])*list2.count(list3[1])*list3.count(list1[1]) + list1.count(list2[2])*list2.count(list3[2])*list3.count(list1[2])\n    \n    \n    \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i]):\n            count = count + 1\n    for i in range(len(list3)):\n        if(list3[i] == list1[i]):\n            count = count + 1\n    return count\n    \ndef count_differentpair(list1,list2,list3):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i]!= list2[i]):\n            count = count + 1\n    for i in range(len(list3)):\n        if(list3[i]!= list1[i]):\n            count = count + 1\n    return count\n    \ndef count_nonequal(list1,list2,list3):\n    '''\n    Write a function to count number items that are equal in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i]!= list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_common(list1,list2,list3):\n    '''\n    Write a function to count number items that are common in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_common2(list1,list2,list3):\n    '''\n    Write a function to count number items that are common in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i] == list3[i]):\n            count = count + 1\n    return count\n    \ndef count_unique(list1,list2,list3):\n    '''\n    Write a function to count number items that are unique in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i]):\n            count = count + 1\n    return count\n    \ndef count_unique2(list1,list2,list3):\n    '''\n    Write a function to count number items that are unique in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_unique3(list1,list2,list3):\n    '''\n    Write a function to count number items that are unique in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_unique4(list1,list2,list3):\n    '''\n    Write a function to count number items that are unique in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i]!= list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_nonequal3(list1,list2,list3):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i]!= list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_nonequal4(list1,list2,list3):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i]!= list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_samenumber(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_differentnumber(list1,list2,list3):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i]!= list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_nonequalnumber(list1,list2,list3):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i]!= list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_commonnumber(list1,list2,list3):\n    '''\n    Write a function to count number items that are common in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_uniquenumber(list1,list2,list3):\n    '''\n    Write a function to count number items that are unique in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_unique2number(list1,list2,list3):\n    '''\n    Write a function to count number items that are unique in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_unique3number(list1,list2,list3):\n    '''\n    Write a function to count number items that are unique in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_nonequal2number(list1,list2,list3):\n    '''\n    Write a function to count number items that are different in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i]!= list3[i]):\n            count = count + 1\n    return count\n    \ndef count_different2number(list1,list2,list3):\n    '''\n    Write a function to count number items that ar"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # The function count_samepair function returns a tuple of two numbers.\n    # The first value is the number of items that are identical in the same position of three lists, and the second value is the number of items that are identical in the same position of three lists.\n    # For example, count_samepair
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n = len(list1)\n    m = len(list2)\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            if list1[i] == list2[j] and list1[i]!= list3[j]:\n                c = c+1\n    return c\n    \ndef count_differentpair(list1,list2):\n    '''\n    Write a function to count number items that are not identical in the same position of three given lists.\n    '''\n    n = len(list1)\n    m = len(list2)\n    c = 0\n    for i in range(n):\n        for j in range(m):\n            if list1[i] == list2[j] and list2[i]!= list1[j]:\n                c = c+1\n    return c\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count1=0\n    count2=0\n    count3=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]:\n            count1+=1\n        elif list1[i]==list3[i]:\n            count2+=1\n        elif list2[i]==list3[i]:\n            count3+=1\n    return count1,count2,count3\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    if len(Input)<=1: return 0\n    \n    for i in range(len(Input)): \n        if type(Input[i]) is list:\n            return len(Input[i])\n    return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for x in Input:\n        if type(x) is tuple:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = 0\n    for i in range(len(Input)):\n        if Input[i] == []:\n            result += 1\n        else:\n            break\n    return result\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Counter = 0\n    for i in range(len(Input)):\n        if Input[i] == '[':\n            Counter = Counter + 1\n        elif Input[i] == ']':\n            Counter = Counter - 1\n        if Counter == 0:\n            return print(Counter)\n    return print(\"No lists present in the given tuple\")\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if len(Input) == 0:\n        return 0\n    else:\n        # Indexes of 'lists' in given tuple\n        lst = tuple(range(0, len(Input), 2))\n        # Count number of lists in tuple\n        count = len(lst)\n        # Add 1 to each element\n        for elem in range(0, len(lst)):\n            lst[elem] += 1\n        # Return count of lists\n        return count"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Hint: Use dictionary to find the number of lists\n    lists = 0\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if Input[i][j][0] == \"#\":\n                lists += 1\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    for i in range(0, len(Input)):\n        temp = 0\n        for j in range(0, len(Input)):\n            if(j < len(Input)):\n                if(Input[j][0] == Input[i][0]):\n                    temp = temp + 1\n        \n        if(temp!= 0):\n            return temp\n        \n    return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    N=len(Input)\n    if(N==1): return 0\n    ans=0\n    for i in range(N):\n        if Input[i][2]=='#': ans+=1\n    return ans\n    \ndef find_count(Input): \n    '''\n    Write a function to find number of strings present in the given tuple.\n    '''\n    N=len(Input)\n    ans=0\n    for i in range(N):\n        for j in range(N):\n            if Input[i][2]=='#' and Input[j][2]=='#': ans+=1\n    return ans\n    \ndef find_double(Input): \n    '''\n    Write a function to find number of strings present in the given tuple.\n    '''\n    N=len(Input)\n    ans=0\n    for i in range(N):\n        for j in range(N):\n            if Input[i][2]==Input[j][2] and Input[i][0]!=Input[j][0]: ans+=1\n    return ans\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = 0\n    for i in Input:\n        if type(i) is int:\n            l += 1\n    return l\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return(len(set(Input[0])))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    count = 0\n    abs_diff = 0\n    max_abs_diff = 0\n    for i in arr:\n        count += 1\n        abs_diff += abs(i - arr[0])\n        if count == len(arr):\n            max_abs_diff = abs_diff\n            break\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr) - 2):\n        max_diff = max(abs(arr[i]), abs(arr[i + 1]), abs(arr[i + 2]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    \n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            \n            if (arr[i] + arr[j]) > arr[j]:\n                \n                arr[i], arr[j] = arr[j], arr[i]\n    \n    return arr[n-1]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # This is the same as max(arr[i]-arr[j]) where i is the index of array, j is the index of array and arr is a list of elements.\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            temp_diff = abs(arr[i] - arr[j])\n            if temp_diff > max_diff:\n                max_diff = temp_diff\n    return max_diff\n    # return max(arr[i]-arr[j])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    d = []\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            d.append(abs(arr[i] - arr[j])) \n    return max(d) \n "
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #Initialize min and max values as 0 \n    min_val = 0\n    max_val = 0\n    for x in arr:\n        min_val = min(x, min_val)\n        max_val = max(x, max_val)\n    print(max_val - min_val)\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # write your code here\n    # find the absolute difference of all elements\n    max_abs_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            abs_diff = abs(arr[i] - arr[j])\n            if abs_diff > max_abs_diff:\n                max_abs_diff = abs_diff\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    print('max_abs_diff : ', max(arr) - min(arr)) \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)<=1:\n        return 0\n    maximum = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        if maximum < arr[i]-arr[i-1]:\n            maximum = arr[i]-arr[i-1]\n    return maximum\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    a = len(arr)\n    if a==0:\n        return 0\n    else:\n        B = arr[0]\n        C = arr[0]\n        \n        for i in range(1,a):\n            if arr[i]>B:\n                B=arr[i]\n            elif arr[i]<C:\n                C=arr[i]\n        return abs(B-C)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (None,None)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #print(n)\n    for x in range(a, n + 1):\n        for y in range(n + 1, a + b):\n            #print(x, y)\n            #print(x + y)\n            if x + y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    if a!= b:\n        x = (a, b)\n        y = n\n    else:\n        for i in range(1, a+1):\n            for j in range(i+1, a+1):\n                if b % j == 0:\n                    if x == None:\n                        x = i, j\n                        n = n / j\n                        break\n                    if n == 1:\n                        return x\n                    n = n / j\n        return None\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == n or b == n:\n        return (a, b)\n    elif a + b == n:\n        return (a, b)\n    elif a * b == n:\n        return (a, b)\n    elif a == n:\n        return (a, b)\n    elif b == n:\n        return (a, b)\n    else:\n        x = None\n        y = None\n        for i in range(a, n):\n            for j in range(i + 1, n):\n                x, y = find_solution(i, j, n)\n                if x!= None:\n                    break\n            if x!= None:\n                break\n        return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    i = 0\n    x = None\n    y = None\n    while i < n:\n        x = a[i] % b\n        y = b * x % n\n        i += 1\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    try:\n        a = int(a)\n        b = int(b)\n        if (a > 0) and (b > 0):\n            return a, b\n    except ValueError:\n        return None\n    if a % 2 == 0:\n        return find_solution(str(a // 2), str(b // 2), n)\n    else:\n        return find_solution(str(a // 2) + '1', str(b // 2) + '1', n)\n    \ndef get_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return None\n    if n == 0:\n        return a, b\n    if n > 0:\n        return get_solution(a, b, n // 2)\n    return get_solution(a, b, n // 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a = a % n\n    b = b % n\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == n and b == n:\n        return a, b\n    if b < 0 or a < 0:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def is_prime(n):\n        '''\n        n must be an integer (like a, b, c, or c, or c, and c)\n        Return True if n is a prime number, and False otherwise.\n        '''\n        if n <= 1:\n            return False\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5,int(sqrt(n))+1,6):\n            if n%i==0 or n%(i+2)==0:\n                return False\n        return True\n    def divide_into_two(n):\n        '''\n        Calculate a,b that satisfy ax+by = n\n        Return (a,b) if a,b can be divided into two primes, or None if no such pair exists\n        '''\n        if n == 0:\n            return None\n        for i in range(2,int(sqrt(n))+1,6):\n            if is_prime(i) and is_prime(n-i):\n                return (i,n-i)\n        return None\n    def get_coefs(a, b, n):\n        '''\n        Return the coefficients of ax + by = n as a tuple. If the result is not a tuple, return None.\n        '''\n        a = int(a)\n        b = int(b)\n        n = int(n)\n        if n%2 == 0 or n%3 == 0:\n            return None\n        if a == 1:\n            return (b,1)\n        if a == 0:\n            return (1,b)\n        if b == 0:\n            return (a,1)\n        c = divide_into_two(n)\n        if c is None:\n            return None\n        a = c[0]\n        b = c[1]\n        return (a,b)\n    def evaluate_all(a, b, n):\n        '''\n        Evaluate all pairs of ax + by = n\n        Return a list of tuples of coefficients of ax + by = n.\n        '''\n        a = int(a)\n        b = int(b)\n        n = int(n)\n        coefs = []\n        for a_coef,b_coef in get_coefs(a,b,n):\n            coefs.append((a_coef,b_coef))\n        return coefs\n    # Find solution\n    coefs = evaluate_all(a,b,n)\n    if len(coefs) == 0:\n        return None\n    # Find the first solution\n    x = coefs[0][0]\n    y = coefs[0][1]\n    for coef in coefs:\n        if coef[0]!= x or coef[1]!= y:\n            return None\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    global num_solutions\n    global path\n    global prefix_solution\n    if a[0] == b[0] == n:\n        return None, path, prefix_solution\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i][0]\n        list1[i] = list1[i][1]\n    for i in range(len(list2)):\n        list2[i] = list2[i][0]\n        list2[i] = list2[i][1]\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # empty list to store elements\n    result = []\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list2:\n        if i not in list1:\n            list3.append(i)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    temp_list = []\n    for i in range(len(list1)):\n        temp_list.append(list1[i])\n        for j in range(len(list2)):\n            if list2[j] in temp_list:\n                temp_list.remove(list2[j])\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [element for element in list1 if element not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element not in list2:\n            list1.remove(element)\n    return list1\n    \ndef intersection(list1, list2):\n    '''\n    Write a function to return all the common elements of two lists.\n    '''\n    common = set(list1) & set(list2)\n    return common\n    \ndef union(list1, list2):\n    '''\n    Write a function to return all the elements that are common between two lists.\n    '''\n    common = set(list1) | set(list2)\n    return common\n    \ndef difference(list1, list2):\n    '''\n    Write a function to return all the elements that are not common between two lists.\n    '''\n    common = set(list1) - set(list2)\n    return common\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list1[:], list2[:]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list2 == []:\n        return []\n    # set = set(list1)\n    # return list1[:len(list2)]\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if list1 == [] or list2 == []:\n        return 0\n    elif list1 == []:\n        return list2\n    elif list2 == []:\n        return list1\n    else:\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                list1.remove(list1[i])\n        return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Calculate the sum of the first n-2*i+1 terms of series\n    return n-2*(n-2)*sum_series(n-1)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(0, n, 1)) - (n - 2) * (n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n + (n-2) + (n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return (n + (n-2) + (n-4))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(1,n//2+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    i = 0\n    while i <= n//2:\n        s += i\n        i += 1\n    return s\n    \n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n * (n - 2) + (n-4)\ndef is_prime(n):\n    '''\n    Write a function that returns True if n is prime,\n    otherwise False. (In other words,\n    a number is composite if its only content\n    is digits.)\n    '''\n    if n==1: return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0: return False\n    return True\ndef sum_primes(n):\n    '''\n    This function takes a natural number (n) and\n    returns the sum of all primes below it.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if is_prime(i): sum += i\n    return sum\ndef main():\n    n = int(input())\n    print(sum_primes(n))\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    while n > 2:\n        sum += n\n        n -= 2\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        print(\"Invalid Input\")\n        return\n    x = n // 2\n    while x >= 0:\n        sum = 0\n        for i in range(0,x+1):\n            sum += i\n        print(sum)\n        x -= 1\n        \nsum_series(11)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = 0\n    if(s == 0):\n        a = l\n    elif(s == 1):\n        a = (l**2)\n    else:\n        a = (l**2 * tan((pi / s) * s))\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = int(s)\n    l = int(l)\n    if l >= 3:\n        return (s*(s-1)/2) * tan(pi/l)\n    else:\n        print(\"The length of the polygon should be greater than 3. \")\n        return 0\ndef area_circle(r):\n    '''\n    Write a function that calculates the area of a circle given its radius.\n    '''\n    return (r*r*3)/2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = l/2\n    area = 1/2 * (s**2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    c = (s * (l / 2)) / pi\n    return c\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return abs(s*l)**2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return abs(4*(s)/(2*(l+1)))\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * (l ** 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s*l**2\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # area of a regular polygon is calculated as (2*l)/3\n    return 2*l/3\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # if the length is not the number of sides or sides are 0 or only have one side, return 0.\n    if s == 0 or l == 0:\n        return 0\n    # use tan to convert the sides into radians.\n    # use the formula to calculate the area.\n    # return the result of this formula.\n    return round(tan((l/2)/s),3)\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #Your code goes here\n    s = 0\n    for i in range(1, n):\n        if n % i == 0:\n            s += i\n    if n == s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def is_divisible(n, p):\n        if p % n == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n==0: \n        return True\n    if n%2==0: \n        return False\n    for i in range(3,int(math.sqrt(n))+1): \n        if n%i==0: \n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # TODO: Write your code here\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Check to see if input is an integer\n    if type(n)!= int:\n        raise TypeError(\"Input must be an integer\")\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    #print(n)\n    if (n%2 == 0):\n        if(n <= 10):\n            return True\n        else:\n            return False\n    else:\n        if(n > 10):\n            return False\n        else:\n            for i in range(1,int(math.sqrt(n))+1):\n                if(n%i == 0):\n                    return False\n        \n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_a = [] \n    for i in range(1, int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            divisors_a.append(i) \n            if (i == int(math.sqrt(n))): \n                return True \n    return False \n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1):\n        if n%i == 0:\n            return False\n    return True\n    \ndef sum_div_2(n):\n    '''\n    Write a function to find the sum of all numbers in the range 1..n.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            sum += i\n    return sum\n    \ndef div_sum_2(n):\n    '''\n    Write a function that determines if the sum of the divisors of two integers is the same.\n    '''\n    for i in range(1, n+1):\n        if n%i == 0:\n            return False\n    return True\n    \ndef div_sum_3(n):\n    '''\n    Write a function that determines if the sum of the divisors of two integers is the same.\n    '''\n    for i in range(1, n+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor = 2\n    while n % divisor == 0:\n        divisor += 2\n    return divisor == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Strings are immutable\n    \n    count = 0\n    \n    # for each character of the string\n    for i in str1:\n        if i in str1.lower():\n            # if the character is in the alphabet, increment the count\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(set(str1))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    for ch in str1:\n        if str1.find(ch)!= -1:\n            char_count += 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    i = 0\n    j = 0\n    res = 0\n    while i < len(str1):\n        while j < len(str1):\n            if str1[i:j+1].isalpha():\n                res += 1\n                i += 1\n                j += 1\n            else:\n                i += 1\n        j = i\n        i = 0\n    return res\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = []\n    position = []\n    for i in range(len(str1)):\n        if str1[i].isalpha() == True:\n            position.append(i)\n        if str1[i] not in result:\n            result.append(str1[i])\n    print(position)\n    print(result)\n    \n    for i in position:\n        if str1[i].isalpha() == True:\n            result.append(str1[i])\n        if str1[i].isalpha() == False:\n            result.append(str1[i])\n    print(result)\n    print(position)\n    return result.count(str1[position[0]])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # number of times each character occurs\n    dic = {}\n    for c in str1:\n        if c.isalpha():\n            if c.lower() in dic:\n                dic[c.lower()] += 1\n            else:\n                dic[c.lower()] = 1\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letter_count = dict()\n    for letter in str1:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    return len(letter_count)\n    \ndef count_single_character(str1): \n    '''\n    Write a function to count the number of single characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    single_count = dict()\n    for letter in str1:\n        if letter in single_count:\n            single_count[letter] += 1\n        else:\n            single_count[letter] = 1\n    return len(single_count)\n    \ndef count_double_character(str1): \n    '''\n    Write a function to count the number of double characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    double_count = dict()\n    for letter in str1:\n        if letter in double_count:\n            double_count[letter] += 1\n        else:\n            double_count[letter] = 1\n    return len(double_count)\n    \ndef create_string(str1):\n    '''\n    Write a function to convert a number of strings into a string with each word as a single character.\n    '''\n    sentence = \"\"\n    for letter in str1:\n        sentence += letter\n    return sentence\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    count2 = 0\n    s = sorted(str1.lower())\n    for i in range(len(s)-1):\n        if (s[i] == s[i+1]):\n            count += 1\n        else:\n            count2 += 1\n    return count, count2\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # your code here\n    \n    # pass\n    \n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] & A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count=0\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count +=1\n    return even_count\n        \n    \n    \n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    odd_pair = 0\n    for i in A:\n        if i % 2 == 0:\n            even_pair += 1\n        else:\n            odd_pair += 1\n    return even_pair, odd_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        if A[i] & A[i+1] == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]==0:\n                even_pair += 1\n    return even_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                num_pairs += 1\n    print(num_pairs)\n    return num_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if A == []:\n        return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    #A=[1,2,3,4,5,6,7]\n    #A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    #A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    #A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    #A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    #A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    #A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    #A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    #A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    #A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    #A=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,7"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i] ^ A[j] == 0:\n                if A[i] % 2 == 0:\n                    even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair = 0\n    for i in range(len(A) - 1):\n        if A[i] == A[i + 1]:\n            pair += 1\n    return pair\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    def next_power_of_2(n): \n        '''\n        Write a python function to find the smallest power of 2 greater than or equal to n.\n        '''\n        if n < 1: \n            return 1\n        if n == 1: \n            return 2\n        while n % 2 == 0: \n            n /= 2\n        return next_power_of_2(n - 1)\n    return next_power_of_2(n)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    lst = []\n    for i in range(1, n): \n        if n % i == 0: \n            lst.append(i) \n            lst.append(n//i) \n    if len(lst) > 1: \n        return lst[-2] \n    else: \n        return -1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            return n\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # create a variable to store the number of powers of 2\n    power = 0\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    a = 2\n    b = 1\n    count = 0\n    while a**b <= n:\n        count += 1\n        a *= 2\n        b += 1\n    return coun"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 2\n    while power < n:\n        power = power * 2\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # I used try and except block to handle exceptions \n    try:\n        i = 2\n        while (i ** 2 < n):\n            i += 1\n        return i ** 2\n    # except:\n    #     print(\"N is not an integer. Please enter a valid integer.\")\n    #     return \"N is not an integer. Please enter a valid integer.\"\n    #     pass\n    except:\n        print(\"N is not an integer. Please enter a valid integer.\")\n        return \"N is not an integer. Please enter a valid integer.\"\n        pass\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    def power_2(n): \n        return n if n & (n - 1) == 0 else (n * power_2(n >> 1))\n    return power_2(2 * n)"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power=1\n    while power < n:\n        if n%power==0:\n            return power\n        else:\n            power=power+1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    ls = []\n    i = 2\n    while i <= n:\n        if n%i==0:\n            ls.append(i)\n            n=n//i\n        else:\n            i+=1\n    return min(ls)\n    # Time: O(logn) | Space: O(1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n = len(a)\n    nxt = 0\n    if x < n:\n        for i in range(n):\n            if a[i] == x:\n                nxt += 1\n    return nxt\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return list.count(a,x)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    s = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            s += 1\n    return s\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    # your code here\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if x==i:\n            count+=1\n    return count\ndef klucz(a,b):\n    '''\n    Write a function to check if a number is contained in b.\n    '''\n    for i in b:\n        if i in a:\n            return True\n    return False\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return(sum(a.count(num) for num in x))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x not in a:\n        return 0\n    else:\n        return a.index(x) + 1\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for num in list1:\n        if m <= num <= n:\n            result += num\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m==n:\n        return list1[m]\n    else:\n        return sum_range_list(list1,m+1,n) + sum_range_list(list1, m, n-1)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    summ = 0\n    for i in range(m, n + 1):\n        summ += list1[i]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0]\n    elif len(list1) == 2:\n        return list1[0] + list1[1]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sums = 0\n    i = 0\n    while i < len(list1):\n        sums += list1[i]\n        i += 1\n    print(list1[m:n])\n    return sums\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    def func(list1, m, n):\n        ans = 0\n        for i in range(m, n):\n            ans += list1[i]\n        return ans\n    return func\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    c = 0\n    i = 0\n    while i < m-1:\n        if list1[i] < list1[i+1]:\n            c += list1[i]\n            i += 1\n        else:\n            c += list1[i]\n            i += 1\n    c += list1[i]\n    return c\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    i, j = 0, 0\n    while i < len(list1):\n        sum += list1[i]\n        i += 1\n    while j < len(list1):\n        sum -= list1[j]\n        j += 1\n    if n <= len(list1):\n        i = 0\n        j = n - 1\n        while i <= len(list1):\n            sum -= list1[i]\n            i += 1\n        while j >= 0:\n            sum += list1[j]\n            j -= 1\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    list_numbers = []\n    for i in range(m, n + 1):\n        list_numbers.append(list1[i])\n    return sum(list_numbers)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = []\n    i = 0\n    j = 1\n    while i < 5:\n        l.append(i)\n        i += 1\n    while j < 5:\n        j += 1\n    return (math.sqrt(pow(a,3)*5*math.sqrt(4*(l[1]-l[0])*(l[2]-l[1])*(l[3]-l[2])*(l[4]-l[3])))/5)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Write your code here\n    return math.sqrt(a)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # round the number\n    a = round(a)\n    # if the number is odd, we need to return the number of sides in the given side\n    if(a % 2 == 0):\n        return (a * 3) + 4\n    # if the number is even, we need to return a total of half of the sides\n    else:\n        return a * 3 + 4\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 4*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # def perimeter(n):\n    #     '''\n    #     '''\n    #     return math.pow(2*n,3)\n    # return perimeter(a)\n    def area(n):\n        '''\n        '''\n        return n*(n+1)*(2*n+1)\n        # return round(area(n),2)\n    def perimeter_hexagon(n):\n        '''\n        '''\n        return (3*n**2)+(2*n**3)\n        # return round(perimeter(n),2)\n    # return round(perimeter_hexagon(a),2)\n    return area(a)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #p_list = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Write your code here.\n    return(4.0*a*a*math.sqrt(3)/3)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #function that adds sides of the polygon to a\n    def add_sides(a,b,c):\n        '''\n        function that adds sides of the polygon to a\n        '''\n        #first check if a is odd\n        if a % 2 == 0:\n            #if even, check if b is odd\n            if b % 2 == 0:\n                #if b is odd, check if c is odd\n                if c % 2 == 0:\n                    #check if c is even\n                    if c % 2 == 0:\n                        #add sides of the polygon to a\n                        a = a + b + c\n                        #return to a\n                        return a\n                    #if c is even, add sides of the polygon to a\n                    else:\n                        #add sides of the polygon to a\n                        a = a + b\n                        #return to a\n                        return a\n                #if b is even, add sides of the polygon to a\n                else:\n                    #add sides of the polygon to a\n                    a = a + b\n                    #return to a\n                    return a\n            #if c is odd, add sides of the polygon to a\n            else:\n                #add sides of the polygon to a\n                a = a + b\n                #return to a\n                return a\n        #if a is odd, add sides of the polygon to a\n        else:\n            #add sides of the polygon to a\n            a = a + b\n            #return to a\n            return a\n    #define a value for sides\n    sides = [1,3,5,7]\n    #find how many sides a pentagon has\n    a = sides.index(a)\n    #add the second value to the list of sides\n    sides.insert(a+1,b)\n    #add the third value to the list of sides\n    sides.insert(a+2,c)\n    #print the resulting list of sides\n    print(sides)\n    #add the two sides of the polygon to a\n    a = add_sides(a,a,a)\n    #return to a\n    return a\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5*3\ndef area_pentagon(a):\n    '''\n    Write a function that returns the area of a regular pentagon with sides a, b and c.\n    '''\n    return (a*2) + (2*a)*(2*math.cos(math.pi/4)) + (a*math.sqrt(3))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(2*a*(a+1)+2*a*(a+2))\ndef area_pentagon(a):\n    '''\n    Write a function to compute the area of a regular pentagon from the length of its sides.\n    '''\n    return math.pi*(math.pow(a,2))\ndef volume_pentagon(a):\n    '''\n    Write a function to compute the volume of a regular pentagon from the length of its sides.\n    '''\n    return math.pi*(math.pow(a,3))\ndef area_square(a):\n    '''\n    Write a function to compute the area of a square from the length of its sides.\n    '''\n    return math.pow(a,2)\ndef volume_square(a):\n    '''\n    Write a function to compute the volume of a square from the length of its sides.\n    '''\n    return math.pow(a,3)\ndef area_circle(a):\n    '''\n    Write a function to compute the area of a circle from the radius of its center.\n    '''\n    return math.pi*math.pow(a,2)\ndef volume_circle(a):\n    '''\n    Write a function to compute the volume of a circle from the radius of its center.\n    '''\n    return math.pi*math.pow(a,3)\ndef area_rhombus(a):\n    '''\n    Write a function to compute the area of a rhombus from the length of its sides.\n    '''\n    return math.pow(a,2)\ndef volume_rhombus(a):\n    '''\n    Write a function to compute the volume of a rhombus from the length of its sides.\n    '''\n    return math.pow(a,3)\ndef area_heptagon(a):\n    '''\n    Write a function to compute the area of a heptagon from the length of its sides.\n    '''\n    return math.pow(a,6)\ndef volume_heptagon(a):\n    '''\n    Write a function to compute the volume of a heptagon from the length of its sides.\n    '''\n    return math.pow(a,9)\ndef area_octagon(a):\n    '''\n    Write a function to compute the area of a octagon from the length of its sides.\n    '''\n    return math.pow(a,12)\ndef volume_octagon(a):\n    '''\n    Write a function to compute the volume of a octagon from the length of its sides.\n    '''\n    return math.pow(a,15)\ndef area_dodecagon(a):\n    '''\n    Write a function to compute the area of a dodecagon from the length of its sides.\n    '''\n    return math.pow(a,22)\ndef volume_dodecagon(a):\n    '''\n    Write a function to compute the volume of a dodecagon from the length of its sides.\n    '''\n    return math.pow(a,33)\ndef area_nonagon(a):\n    '''\n    Write a function to compute the area of a nonagon from the length of its sides.\n    '''\n    return math.pow(a,6)\ndef volume_nonagon(a):\n    '''\n    Write a function to compute the volume of a nonagon from the length of its sides.\n    '''\n    return math.pow(a,9)\ndef area_diagon(a):\n    '''\n    Write a function to compute the area of a diagonal from the length of its sides.\n    '''\n    return math.pow(a,1)\ndef volume_diagon(a):\n    '''\n    Write a function to compute the volume of a diagonal from the length of its sides.\n    '''\n    return math.pow(a,5)\ndef area_septagon(a):\n    '''\n    Write a function to compute the area of a septagon from the length of its sides.\n    '''\n    return math.pow(a,7)\ndef volume_septagon(a):\n    '''\n    Write a function to compute the volume of a septagon from the length of its sides.\n    '''\n    return math.pow(a,8)\ndef area_octagon_cap(a):\n    '''\n    Write a function to compute the area of an octagon cap from the length of its sides.\n    '''\n    return math.pow(a,10)\ndef volume_octagon_cap(a):\n    '''\n    Write a function to compute the volume of an octagon cap from the length of its sides.\n    '''\n    return math.pow(a,12)\ndef area_dodecagon_cap(a):\n    '''\n    Write a function to compute the area of a dodecagon cap from the length of its sides.\n    '''\n    return math.pow(a,15)\ndef volume_dodecagon_cap(a):\n    '''\n    Write a function to compute the volume of a dodecagon cap from the length of its sides.\n    '''\n    return math.pow(a,22)\ndef area_nonagon_cap(a):\n    '''\n    Write a function to compute the area of a nonagon cap from the length of its sides.\n    '''\n    return math.pow(a,33)\ndef volume_nonagon_cap(a):\n    '''\n    Write a function to compute the volume of a nonagon cap from the length of its sides.\n    '''\n    return math.pow(a,6)\ndef area_diagonal(a):\n    '''\n    Write a function to compute the area of a diagonal from the length of its sides.\n    '''\n    return math.pow(a,1)\ndef volume_diagonal(a):\n    '''\n    Write a function to compute the volume of a diagonal from the length of its sides.\n    '''\n    return math.pow(a,5)\ndef area_square_cap(a):\n    '''\n    Write a function to compute the area of an squaring cap from the length of its sides.\n    '''\n    return math.pow(a,1)\ndef volume_square_cap(a):\n    '''\n    Write a function to compute the volume of an squaring cap from the length of its sides.\n    '''\n    return math.pow(a,5)\ndef area_square_cap(a):\n    '''\n    Write a function to compute the area of a squaring cap from the length of its sides.\n    '''\n    return math.pow(a,1)\ndef area_rhombus_cap(a):\n    '''\n    Write a function to compute the area of a rhombus cap from the length of its sides.\n    '''\n    return math.pow(a,1)\ndef volume_rhombus_cap(a):\n    '''\n    Write a function to compute the volume of a rhombus cap from the length of its sides.\n    '''\n    return math.pow(a,5)\ndef area_heptagon_cap(a):\n    '''\n    Write a function to compute the area of an heptagon cap from the length of its sides.\n    '''\n    return math.pow(a,7)\ndef volume_heptagon_cap(a):\n    '''\n    Write a function to compute the volume of an heptagon cap from the length of its sides.\n    '''\n    return math.pow(a,8)\ndef area_octagon_cap(a):\n    '''\n    Write a function to compute the area of an octagon cap from the length of its sides.\n    '''\n    return math.pow(a,10)\ndef volume_octagon_cap(a):\n    '''\n    Write a function to compute the volume of an octagon cap from the length of its sides.\n    '''\n    return math.pow(a,12)\ndef area_dodecagon_cap(a):\n    '''\n    Write a function to compute the area of an dodecagon cap from the length of its sides.\n    '''\n    return math.pow(a,15)\ndef volume_dodecagon_cap(a):\n    '''\n    Write a function to compute the volume of an dode"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    counter = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            counter += 1\n        else:\n            counter = 0\n    return counter\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    from collections import Counter\n    counter = Counter(s)\n    print(counter.most_common(1))\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    total = 0\n    for char in s:\n        total += s.count(char)\n    return total\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pas"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for x in range(len(s)):\n        if s[x] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c=0\n    for char in s:\n        if char=='a' or char=='e' or char=='i' or char=='o' or char=='u':\n            c=c+1\n    return c\ns=input(\"Enter a string : \")\nprint(count_occurance(s))"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurances = 0\n    for char in s:\n        if char =='std':\n            occurances += 1\n    return occurances\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    result = 0\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    def count_occurance(s):\n        '''\n        Utility function to count the number of occurence of the string'std' in a given string.\n        '''\n        occ = {}\n        \n        for letter in s:\n            if letter not in occ:\n                occ[letter] = 1\n            else:\n                occ[letter] += 1\n        \n        return occ\n    \n    occ = count_occurance(s)\n    return sum(occ.values())"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 2:\n        tuple_type = type(test_tuple[0])\n        list_type = type(test_tuple[1])\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data = test_tuple[0]\n    value = test_tuple[1]\n    if(type(data) == type(value)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 1:\n        type_1 = test_tuple[0].dtype\n        type_2 = test_tuple[1].dtype\n        if type_1 == type_2:\n            print('{} has same data type as {}'.format(test_tuple, type_2))\n        else:\n            print('{} has different data type as {}'.format(test_tuple, type_2))\n    else:\n        print('{} has same data type as {}'.format(test_tuple, type_1))\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # printing the tuple to validate in case of error\n    print(test_tuple)\n    # print(type(test_tuple))\n    # using try and except in case of error\n    try:\n        # checking all the elements in tuple using try and except\n        for i in test_tuple:\n            # if any element not in tuple then then return error\n            if i not in tuple():\n                raise ValueError\n    except ValueError:\n        # print(ValueError)\n        return False\n    except TypeError:\n        # print(TypeError)\n        return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_data_types = ('int', 'float','str')\n    for element in test_tuple:\n        if not isinstance(element, tuple):\n            return False\n        if len(element)!= len(tuple_data_types):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    check_data = []\n    for i in test_tuple:\n        try:\n            check_data.append(type(i))\n        except:\n            print(f'Some of the elements in the tuple are of type {i} but we cannot check the type')\n            return\n    if len(check_data) == len(set(check_data)):\n        print('All the elements in the tuple have same data type')\n    else:\n        print('Some of the elements in the tuple are not of same type')\n    return\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return False\n    for i in test_tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n    \n    \ndef check_date(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return False\n    if not isinstance(test_tuple[0], date):\n        return False\n    return True\n    \n    \ndef check_email(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return False\n    if not isinstance(test_tuple[0], str):\n        return False\n    if not isinstance(test_tuple[0], str):\n        return False\n    if not isinstance(test_tuple[0], str):\n        return False\n    return True\n    \n    \ndef check_convert_to_int(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return False\n    if not isinstance(test_tuple[0], float):\n        return False\n    return True\n    \n    \ndef check_find_index(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return False\n    if not isinstance(test_tuple[0], int):\n        return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = test_tuple[0]\n    number_of_elements = len(test_tuple[1])\n    type_of_data_type = type(data_type)\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(map(lambda x:type(x)==str,test_tuple))\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    array_length = len(arr)\n    x = sorted(arr)\n    count = 0\n    for i in x:\n        if x.count(i) > count:\n            count = x.count(i)\n    return count >= n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    elif n == 2:\n        return arr[1] == x\n    elif arr[n//2] == x:\n        return is_majority(arr[:n//2], n//2, x) and is_majority(arr[n//2:], n//2, x)\n    elif arr[n//2] == x or arr[n//2] == x and x in arr:\n        return is_majority(arr[:n//2], n//2, x)\n    else:\n        return is_majority(arr[n//2:], n//2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n            if count > (n/2):\n                return True\n            else:\n                count = 0\n    return False\n    \n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return arr[0] == x\n    if arr[n//2] == x:\n        return is_majority(arr[n//2:], n//2, x)\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Create a counter to track number of times the element occurs\n    counter = 0\n    # Create a flag to track if the element is in the sorted array\n    # We'll use this to track which elements are in the array\n    is_in_arr = [False] * n\n    # Create an array that will hold the elements that are already in the sorted array\n    extend_arr = [arr[i] for i in range(n)]\n    # Create an array to store the element that is equal to the element\n    # that is in the sorted array\n    equal_arr = [arr[i] for i in range(n) if is_in_arr[i] == False]\n    # For every element in the sorted array\n    for i in range(n):\n        # If the element is in the sorted array\n        # and not equal to the element in the extend array\n        if is_in_arr[i] == False and extend_arr[i] == equal_arr[i]:\n            # Increment the counter by 1\n            counter += 1\n            # Check to see if the element is in the sorted array\n            # and not equal to the element in the extend array\n            if is_in_arr[i] == False and extend_arr[i] == equal_arr[i]:\n                # If the element is in the sorted array and not equal to the element in the extend array\n                # increment the counter by 1\n                counter += 1\n    # Check if the counter is greater than or equal to 0\n    if counter >= n/2:\n        # If the counter is greater than or equal to 0, then the array\n        # is a majority element\n        return True\n    else:\n        # If the counter is less than or equal to 0, then the array\n        # is not a majority element\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    maj = 0\n    pos = 0\n    for i in range(n):\n        if arr[i] > x and arr[i] >= maj:\n            maj = arr[i]\n            pos = i\n    return arr[pos] == maj\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return -1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # assert 0 <= n <= len(arr)\n    # assert 0 <= x <= n\n    # assert x >= n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TODO: Write your code here\n    # TODO: Complete this function\n    if n == 0 or n == 1:\n        return arr[n] == x\n    return arr[n] == arr[n//2] or arr[n//2] == x\n    \ndef find_majority(arr):\n    '''\n    Write a function that takes in a sorted array and returns the majority element. (The majority element is the element that occurs more than half the number of times.)\n    '''\n    # TODO: Write your code here\n    # TODO: Complete this function\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        if is_majority(arr, i, arr[i]):\n            return arr[i]\n    return arr[i]\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n - 1\n    while left < right:\n        if arr[left] == x:\n            if arr[right] == x:\n                return \"This element is the majority element of the array\"\n            else:\n                return \"This element is not the majority element of the array\"\n        elif arr[left] > x:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n        else:\n            right -= 1\n    return \"This element is the majority element of the array\"\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #set(1) = 2\n    #set(0) = 1\n    #set(1) = 2\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    binNum = bin(n)[2:]\n    #print(binNum)\n    #print(len(binNum))\n    count = 0\n    for i in range(len(binNum)):\n        #print(i)\n        if (binNum[i] == '1'):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in str(n):\n        if int(i) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    counter = 0\n    bin_num = bin(n)[2:]\n    for i in range(len(bin_num)):\n        if bin_num[i] == '1':\n            counter+=1\n    return counter\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    l=[]\n    for i in str(n):\n        l.append(int(i))\n    bit_count=0\n    for i in l:\n        if (i & 1)==0:\n            bit_count+=1\n    return bit_count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count_bits = 0\n    for i in str(n): \n        count_bits += int(i)\n    return count_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        count+=1\n    return count\n    \ndef count_Set_Bits_2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_3(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_4(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_5(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_6(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_7(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_8(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_9(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_10(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_11(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_12(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_13(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_14(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_15(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_16(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_17(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_18(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n            count+=1\n        n=n>>1\n    return count\n    \ndef count_Set_Bits_19(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    if n==0: \n        return 0\n    \n    count=0\n    while n>0: \n        n&=n-1\n        if n&1: \n        "
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # this function returns the number of set bits in a given integer\n    # input:n (integer)\n    # output:the number of set bits (binary digits with value 1) in n\n    if n < 0:\n        print('Enter a non negative number')\n    elif n == 0:\n        print('0 set bits')\n    else:\n        print('The number of set bits is {}'.format(sum([1 if (n >> x) & 1 else 0 for x in range(32)])))\n    print('Processing...')\n    return n\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # TODO: Write your code here\n    return int(n,2)\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #your code\n    if n < 0:\n        return 0\n    count = 0\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            count = count + 1\n        else:\n            count = count + 0\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_indices = []\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            odd_indices.append(i)\n    return odd_indices\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str = str.replace(\"1\",\"Odd\").replace(\"2\",\"Even\").replace(\"3\",\"Odd\").replace(\"4\",\"Even\").replace(\"5\",\"Odd\")\n    str = str.replace(\"4\",\"Even\").replace(\"5\",\"Odd\").replace(\"6\",\"Even\").replace(\"7\",\"Odd\")\n    str = str.replace(\"6\",\"Even\").replace(\"7\",\"Odd\").replace(\"8\",\"Even\").replace(\"9\",\"Odd\")\n    str = str.replace(\"7\",\"Even\").replace(\"8\",\"Odd\").replace(\"9\",\"Even\").replace(\"0\",\"Odd\").replace(\"1\",\"Even\").replace(\"2\",\"Odd\").replace(\"3\",\"Odd\")\n    str = str.replace(\"9\",\"Even\").replace(\"0\",\"Odd\").replace(\"1\",\"Even\").replace(\"2\",\"Odd\").replace(\"3\",\"Even\").replace(\"4\",\"Odd\").replace(\"5\",\"Even\").replace(\"6\",\"Odd\")\n    str = str.replace(\"6\",\"Odd\").replace(\"7\",\"Even\").replace(\"8\",\"Odd\").replace(\"9\",\"Odd\").replace(\"0\",\"Even\").replace(\"1\",\"Odd\").replace(\"2\",\"Odd\").replace(\"3\",\"Even\")\n    str = str.replace(\"8\",\"Odd\").replace(\"9\",\"Even\").replace(\"0\",\"Odd\").replace(\"1\",\"Odd\").replace(\"2\",\"Even\").replace(\"3\",\"Odd\")\n    str = str.replace(\"7\",\"Odd\").replace(\"8\",\"Even\").replace(\"9\",\"Odd\").replace(\"0\",\"Odd\").replace(\"1\",\"Odd\").replace(\"2\",\"Even\").replace(\"3\",\"Odd\")\n    str = str.replace(\"6\",\"Odd\").replace(\"7\",\"Odd\").replace(\"8\",\"Odd\").replace(\"9\",\"Odd\").replace(\"0\",\"Odd\").replace(\"1\",\"Odd\").replace(\"2\",\"Odd\").replace(\"3\",\"Odd\")\n    str = str.replace(\"5\",\"Odd\").replace(\"6\",\"Odd\").replace(\"7\",\"Odd\").replace(\"8\",\"Odd\").replace(\"9\",\"Odd\").replace(\"0\",\"Odd\").replace(\"1\",\"Odd\").replace(\"2\",\"Odd\").replace(\"3\",\"Odd\")\n    str = str.replace(\"4\",\"Odd\").replace(\"5\",\"Odd\").replace(\"6\",\"Odd\").replace(\"7\",\"Odd\").replace(\"8\",\"Odd\").replace(\"9\",\"Odd\").replace(\"0\",\"Odd\").replace(\"1\",\"Odd\").replace(\"2\",\"Odd\").replace(\"3\",\"Odd\")\n    str = str.replace(\"3\",\"Odd\").replace(\"4\",\"Odd\").replace(\"5\",\"Odd\").replace(\"6\",\"Odd\").replace(\"7\",\"Odd\").replace(\"8\",\"Odd\").replace(\"9\",\"Odd\").replace(\"0\",\"Odd\").replace(\"1\",\"Odd\").replace(\"2\",\"Odd\").replace(\"3\",\"Odd\")\n    str = str.replace(\"2\",\"Odd\").replace(\"3\",\"Odd\").replace(\"4\",\"Odd\").replace(\"5\",\"Odd\").replace(\"6\",\"Odd\").replace(\"7\",\"Odd\").replace(\"8\",\"Odd\").replace(\"9\",\"Odd\").replace(\"0\",\"Odd\").replace(\"1\",\"Odd\").replace(\"2\",\"Odd\").replace(\"3\",\"Odd\")\n    str = str.replace(\"1\",\"Odd\").replace(\"2\",\"Odd\").replace(\"3\",\"Odd\").replace(\"4\",\"Odd\").replace(\"5\",\"Odd\").replace(\"6\",\"Odd\").replace(\"7\",\"Odd\").replace(\"8\",\"Odd\").replace(\"9\",\"Odd\").replace(\"0\",\"Odd\").replace(\"1\",\"Odd\").replace(\"2\",\"Odd\").replace(\"3\",\"Odd\")\n    str = str.replace(\"0\",\"Odd\").replace(\"1\",\"Odd\").replace(\"2\",\"Odd\").replace(\"3\",\"Odd\").replace(\"4\",\"Odd\").replace(\"5\",\"Odd\").replace(\"6\",\"Odd\").replace(\"7\",\"Odd\").replace(\"8\",\"Odd\").replace(\"9\",\"Odd\").replace(\"0\",\"Odd\").replace(\"1\",\"Odd\").replace(\"2\",\"Odd\").replace(\"3\",\"Odd\")\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    # We need to find the index where it starts and goes\n    # The index starts from 0 to len(str) - 1\n    index = 0\n    while index < len(str):\n        if str[index] % 2!= 0:\n            odd_values.append(str[index])\n        index += 1\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Output: The odd values are 't', 'h', 'e', 'i', 'l', 'n', 'd', 'v', 'j'\n    if str==\"\":\n        return str\n    elif len(str)==1:\n        return str\n    else:\n        str=str[:int(len(str)/2)]+str[int(len(str)/2):]\n        return odd_values_string(str)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.lower()\n    start = 0\n    end = len(str) - 1\n    while (start <= end):\n        if str[start] % 2!= 0:\n            start = start + 1\n        if str[end] % 2 == 0:\n            end = end - 1\n        if (start < end):\n            if str[start] % 2!= 0 and str[end] % 2 == 0:\n                str = str[:start] + str[end + 1:]\n                start = start + 1\n                end = end - 1\n                if end == start:\n                    end = end + 1\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace('0','1').replace('1','0').replace('2','3').replace('4','5').replace('6','7').replace('7','8').replace('8','9').replace('9','0')\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(c for i, c in enumerate(str) if i%2!= 0)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = []\n    for index in range(len(str)):\n        if str[index % 2]!= str[index]:\n            odd_index.append(index)\n    for index in odd_index:\n        str = str[:index] + str[index+1:]\n    return str\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index = []\n    for index, character in enumerate(str):\n        if index % 2 == 0:\n            odd_index.append(character)\n    return \"\".join(odd_index)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    d = dict()\n    str_len = len(str)\n    for i in range(0,str_len):\n        d[str[i]] = d.get(str[i],0) + 1\n    odd_idx = 0\n    for i in d:\n        if d[i]%2 == 0:\n            odd_idx = i\n    return str[:odd_idx]\n    \n    \ndef dict_str(dict_string):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    str_len = len(dict_string)\n    if str_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,str_len):\n            d[dict_string[i]] = dict_string[i]\n        return d\n    \n    \ndef dict_dict_str(dict_str):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len = len(dict_str)\n    if dict_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,dict_len):\n            d[dict_str[i]] = dict_str[i]\n        return d\n    \n    \ndef dict_str_dict_dict(dict_str,dict_dict):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len = len(dict_str)\n    if dict_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,dict_len):\n            d[dict_str[i]] = dict_dict[i]\n        return d\n    \n    \ndef print_dict_str(dict_str):\n    '''\n    Write a python function to print the dictionary containing the different values in a given dictionary string.\n    '''\n    print(dict_str)\n    \n    \ndef dict_dict_str_dict(dict_str,dict_dict):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len = len(dict_str)\n    if dict_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,dict_len):\n            d[dict_str[i]] = dict_dict[i]\n        return d\n    \n    \ndef join_dict_str(dict_str):\n    '''\n    Write a python function to join a dictionary with a given dictionary string.\n    '''\n    str_len = len(dict_str)\n    if str_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,str_len):\n            d[dict_str[i]] = dict_str[i]\n        return d\n    \n    \ndef find_key(dict_str,key):\n    '''\n    Write a python function to return the index of the dictionary containing a given key.\n    '''\n    str_len = len(dict_str)\n    if str_len == 0:\n        return None\n    else:\n        if dict_str.get(key)!= None:\n            return str_len - 1\n        else:\n            return None\n    \n    \ndef reverse_dict(dict_str):\n    '''\n    Write a python function to reverse the dictionary stored in a given dictionary string.\n    '''\n    d = dict_str\n    d_reverse = dict()\n    d_reverse[d[key]] = value\n    for i in d:\n        d_reverse[i] = d[i]\n    return d_reverse\n    \n    \ndef dict_str_dict_str(dict_str,dict_str_reverse):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len = len(dict_str)\n    if dict_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,dict_len):\n            d[dict_str[i]] = dict_str_reverse[i]\n        return d\n    \n    \ndef dict_str_dict_str_reverse(dict_str,dict_str_reverse):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len = len(dict_str)\n    if dict_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,dict_len):\n            d[dict_str[i]] = dict_str_reverse[i]\n        return d\n    \n    \ndef dict_str_dict_str_dict(dict_str,dict_str_reverse):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len = len(dict_str)\n    if dict_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,dict_len):\n            d[dict_str[i]] = dict_str_reverse[i]\n        return d\n    \n    \ndef dict_dict_str_dict_str(dict_str,dict_str_reverse):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len = len(dict_str)\n    if dict_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,dict_len):\n            d[dict_str[i]] = dict_str_reverse[i]\n        return d\n    \n    \ndef set_list_2_dict(dict_list):\n    '''\n    Write a python function to set the value of the list to the dictionary.\n    '''\n    for i in range(0,len(dict_list)):\n        dict_list[i] = dict_list[i]\n        \n    return dict_list\n    \n    \ndef dict_dict_str_dict_list(dict_str,dict_str_reverse,dict_list):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len = len(dict_str)\n    if dict_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,dict_len):\n            d[dict_str[i]] = dict_list[i]\n        return d\n    \n    \ndef dict_str_str_list_str(dict_str,dict_str_reverse):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len = len(dict_str)\n    if dict_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,dict_len):\n            d[dict_str[i]] = dict_str_reverse[i]\n        return d\n    \n    \ndef dict_str_str_list_list(dict_str,dict_str_reverse):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len = len(dict_str)\n    if dict_len == 0:\n        return None\n    else:\n        d = dict()\n        for i in range(0,dict_len):\n            d[dict_str[i]] = dict_str_reverse[i]\n        return d\n    \n    \ndef dict_list_2_dict(dict_list):\n    '''\n    Write a python function to set the value of the list to the dictionary.\n    '''\n    for i in range(0,len(dict_list)):\n        dict_list[i] = dict_list[i]\n        \n    return dict_list\n    \n    \ndef dict_str_dict_list_str(dict_str,dict_str_reverse):\n    '''\n    Write a python function to return the dictionary containing the different values in a given dictionary string.\n    '''\n    dict_len "
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a \n    if b < min and c < min: \n        min = b \n    if a < min and c < min: \n        min = a \n    if b < min and min < c: \n        min = b \n    if a < min and min < c: \n        min = a \n    return min\ndef min_of_three2(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min = a \n    if b < min and c < min: \n        min = b \n    if a < min and c < min: \n        min = a \n    if b < min and min < c: \n        min = b \n    if a < min and min < c: \n        min = a \n    return min\ndef my_max(a,b,c):\n    '''\n    Write a function to find the largest number.\n    '''\n    return max(a,b,c)\ndef my_min(a,b,c):\n    '''\n    Write a function to find the smallest number.\n    '''\n    return min(a,b,c)\ndef my_sum(a,b,c):\n    '''\n    Write a function to calculate the sum of three numbers.\n    '''\n    return a + b + c\ndef my_prod(a,b,c):\n    '''\n    Write a function to calculate the product of three numbers.\n    '''\n    return a * b * c\ndef my_div(a,b,c):\n    '''\n    Write a function to calculate the quotient of three numbers.\n    '''\n    return a / b / c\ndef my_mod(a,b,c):\n    '''\n    Write a function to calculate the remainder of three numbers.\n    '''\n    return a % b % c\ndef my_abs(a):\n    '''\n    Write a function to return the absolute value of the input number.\n    '''\n    return abs(a)\ndef my_floor(a):\n    '''\n    Write a function to return the floor value of the input number.\n    '''\n    return a // 10\ndef my_ceil(a):\n    '''\n    Write a function to return the ceiling value of the input number.\n    '''\n    return a // 10\ndef my_sqrt(a):\n    '''\n    Write a function to return the square root of a number.\n    '''\n    return a ** (1/2)\ndef my_mod1(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_div1(a,b):\n    '''\n    Write a function to return the quotient of two numbers as a result.\n    '''\n    return a / b\ndef my_mod2(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_mod3(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_abs2(a):\n    '''\n    Write a function to return the absolute value of the input number.\n    '''\n    return abs(a)\ndef my_div2(a,b):\n    '''\n    Write a function to return the quotient of two numbers as a result.\n    '''\n    return a / b\ndef my_mod32(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_abs3(a):\n    '''\n    Write a function to return the absolute value of the input number.\n    '''\n    return abs(a)\ndef my_ceil3(a):\n    '''\n    Write a function to return the ceiling value of the input number.\n    '''\n    return a // 10\ndef my_floor3(a):\n    '''\n    Write a function to return the floor value of the input number.\n    '''\n    return a // 10\ndef my_abs4(a):\n    '''\n    Write a function to return the absolute value of the input number.\n    '''\n    return abs(a)\ndef my_floor4(a):\n    '''\n    Write a function to return the floor value of the input number.\n    '''\n    return a // 10\ndef my_ceil4(a):\n    '''\n    Write a function to return the ceiling value of the input number.\n    '''\n    return a // 10\ndef my_mod4(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_mod5(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_abs6(a):\n    '''\n    Write a function to return the absolute value of the input number.\n    '''\n    return abs(a)\ndef my_div6(a,b):\n    '''\n    Write a function to return the quotient of two numbers as a result.\n    '''\n    return a / b\ndef my_mod7(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_mod8(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_abs7(a):\n    '''\n    Write a function to return the absolute value of the input number.\n    '''\n    return abs(a)\ndef my_ceil7(a):\n    '''\n    Write a function to return the ceiling value of the input number.\n    '''\n    return a // 10\ndef my_floor7(a):\n    '''\n    Write a function to return the floor value of the input number.\n    '''\n    return a // 10\ndef my_mod8(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_mod9(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_abs8(a):\n    '''\n    Write a function to return the absolute value of the input number.\n    '''\n    return abs(a)\ndef my_floor9(a):\n    '''\n    Write a function to return the floor value of the input number.\n    '''\n    return a // 10\ndef my_mod10(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_abs10(a):\n    '''\n    Write a function to return the absolute value of the input number.\n    '''\n    return abs(a)\ndef my_ceil10(a):\n    '''\n    Write a function to return the ceiling value of the input number.\n    '''\n    return a // 10\ndef my_floor11(a):\n    '''\n    Write a function to return the floor value of the input number.\n    '''\n    return a // 10\ndef my_mod12(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_mod13(a,b):\n    '''\n    Write a function to return the modulo of two numbers as a result.\n    '''\n    return a % b\ndef my_abs13(a):\n    '''\n    Write a function to return the absolute value of the input number.\n    '''\n    return abs(a)\ndef my_ceil12(a):\n    '''\n    Write a function to return the ceiling value of the input number.\n    '''\n    return a // 10\ndef my_floor13(a):\n    '''\n    Write a function to return the floor value of the input number.\n    '''\n    return a // 10\nde"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a > b and a > c) or (b > c and b > a) or (c > a and c > b):\n        return c\n    if (a > b) or (b > c):\n        return a\n    return b\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b == c: \n        return a\n    if a < b < c: \n        return a\n    elif a < c < b: \n        return c\n    else: \n        return b\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    elif c<a and c<b:\n        return c\n    else:\n        return 'three error'"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c:\n        return a\n    elif a>b:\n        return b\n    elif a>c:\n        return c\n    else:\n        return a\n    \nprint(min_of_three(1,2,3))\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<b) and (a<c) :\n        min = a\n    elif (b<a) and (b<c) :\n        min = b\n    else:\n        min = c\n    return min\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        print(\"the smallest number is \",a)\n    elif b>a and b>c:\n        print(\"the smallest number is \",b)\n    else:\n        print(\"the smallest number is \",c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        minimum = a\n    elif b>a and b>c:\n        minimum = b\n    else: \n        minimum = c\n    return minimum\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b and b > c: \n        return a \n    elif b > c and c > a: \n        return b \n    else: \n        return c \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\ndef sum_of_three(a,b,c):\n    '''\n    Write a function to find the sum of three numbers.\n    '''\n    return a + b + c\ndef triple_of_three(a,b,c):\n    '''\n    Write a function to find the triple of three numbers.\n    '''\n    return a*b*c\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    return max(a,b,c)\ndef min_of_four(a,b,c):\n    '''\n    Write a function to find the minimum of four numbers.\n    '''\n    return min(a,b,c)\ndef sum_of_four(a,b,c,d):\n    '''\n    Write a function to find the sum of four numbers.\n    '''\n    return a+b+c+d\ndef triple_of_four(a,b,c,d):\n    '''\n    Write a function to find the triple of four numbers.\n    '''\n    return a*b*c*d\ndef add(a,b,c):\n    '''\n    Write a function to add two numbers together.\n    '''\n    return a+b+c\ndef pow(x,y):\n    '''\n    Write a function to raise a number to the power.\n    '''\n    return x**y\ndef divide(x,y):\n    '''\n    Write a function to divide a number by a number.\n    '''\n    return x/y\ndef square(x):\n    '''\n    Write a function to square a number.\n    '''\n    return x**2\ndef mod(x,y):\n    '''\n    Write a function to find the modulo of x by y.\n    '''\n    return x%y\ndef check_fib():\n    '''\n    Function to check the fibonacci sequence.\n    '''\n    n=int(input(\"Enter the value:\"))\n    a,b=0,1\n    for i in range(n):\n        a,b=b,a+b\n    print(\"The fibonacci sequence is\", a)\ndef fact(n):\n    '''\n    Function to check the factorial.\n    '''\n    if n==0:\n        print(\"The factorial of 0 is 1\")\n        return\n    elif n==1:\n        print(\"The factorial of 1 is 1\")\n        return\n    elif n==2:\n        print(\"The factorial of 2 is 2\")\n        return\n    else:\n        print(\"The factorial of\", n, \"is\", n*fact(n-1))\ndef sum_list(a,b,c):\n    '''\n    Function to add two lists.\n    '''\n    return a+b+c\ndef multiply(a,b,c):\n    '''\n    Function to multiply two lists.\n    '''\n    return a*b*c\ndef subtract(a,b,c):\n    '''\n    Function to subtract two lists.\n    '''\n    return a-b-c\ndef multiply_list(a,b,c):\n    '''\n    Function to multiply two lists.\n    '''\n    return a*b*c\ndef divide_list(a,b,c):\n    '''\n    Function to divide two lists.\n    '''\n    return a/b/c\ndef equal(a,b):\n    '''\n    Function to check if a and b are equal.\n    '''\n    if a==b:\n        print(\"They are equal\")\n        return\n    else:\n        print(\"They are not equal\")\ndef clear():\n    '''\n    Function to clear the console.\n    '''\n    print(\"\\n\"*100)\ndef error(message):\n    '''\n    Function to print a message.\n    '''\n    print(message)\ndef string_to_float(string):\n    '''\n    Convert string to float.\n    '''\n    return float(string)\ndef reverse(string):\n    '''\n    Function to reverse a string.\n    '''\n    return string[::-1]\ndef new_list(array):\n    '''\n    Function to add new list elements.\n    '''\n    return array[::-1]\ndef percentage(a,b):\n    '''\n    Function to check the percentage of two numbers.\n    '''\n    return (a/b)*100\ndef average(a,b):\n    '''\n    Function to calculate the average of two numbers.\n    '''\n    return (a+b)/2\ndef main():\n    '''\n    Function to start the program.\n    '''\n    print(\"\\n[1]Add\\n\")\n    print(\"[2]Subtract\\n\")\n    print(\"[3]Multiply\\n\")\n    print(\"[4]Divide\\n\")\n    print(\"[5]Square\\n\")\n    print(\"[6]Modulo\\n\")\n    print(\"[7]Square root\\n\")\n    print(\"[8]Square root of\\n\")\n    print(\"[9]Square root of a\\n\")\n    print(\"[10]Square root of a\\n\")\n    print(\"[11]Check the Fibonacci sequence\\n\")\n    print(\"[12]Factorial\\n\")\n    print(\"[13]Sum of list\\n\")\n    print(\"[14]Multiplication list\\n\")\n    print(\"[15]Subtraction list\\n\")\n    print(\"[16]Division list\\n\")\n    print(\"[17]Check the factorial\\n\")\n    print(\"[18]Check the Sum\\n\")\n    print(\"[19]Multiply List\\n\")\n    print(\"[20]Divide List\\n\")\n    print(\"[21]Square\\n\")\n    print(\"[22]Modulo\\n\")\n    print(\"[23]Square root\\n\")\n    print(\"[24]Square root of\\n\")\n    print(\"[25]Square root of a\\n\")\n    print(\"[26]Square root of a\\n\")\n    print(\"[27]Square root of a\\n\")\n    print(\"[28]Square root of a\\n\")\n    print(\"[29]Check the Fibonacci sequence\\n\")\n    print(\"[30]Factorial\\n\")\n    print(\"[31]Sum of list\\n\")\n    print(\"[32]Multiplication list\\n\")\n    print(\"[33]Subtraction list\\n\")\n    print(\"[34]Division list\\n\")\n    print(\"[35]Check the factorial\\n\")\n    print(\"[36]Check the Sum\\n\")\n    print(\"[37]Multiply List\\n\")\n    print(\"[38]Divide List\\n\")\n    print(\"[39]Square\\n\")\n    print(\"[40]Modulo\\n\")\n    print(\"[41]Square root\\n\")\n    print(\"[42]Square root of\\n\")\n    print(\"[43]Square root of a\\n\")\n    print(\"[44]Square root of a\\n\")\n    print(\"[45]Square root of a\\n\")\n    print(\"[46]Check the factorial\\n\")\n    print(\"[47]Check the Sum\\n\")\n    print(\"[48]Multiply List\\n\")\n    print(\"[49]Divide List\\n\")\n    print(\"[50]Square\\n\")\n    print(\"[51]Modulo\\n\")\n    print(\"[52]Square root\\n\")\n    print(\"[53]Square root of\\n\")\n    print(\"[54]Square root of a\\n\")\n    print(\"[55]Square root of a\\n\")\n    print(\"[56]Square root of a\\n\")\n    print(\"[57]Check the Fibonacci sequence\\n\")\n    print(\"[58]Factorial\\n\")\n    print(\"[59]Sum of list\\n\")\n    print(\"[60]Multiplication list\\n\")\n    print(\"[61]Subtraction list\\n\")\n    print(\"[62]Division list\\n\")\n    print(\"[63]Check the factorial\\n\")\n    print(\"[64]Check the Sum\\n\")\n    print(\"[65]Multiply List\\n\")\n    print(\"[66]Divide List\\n\")\n    print("
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n==1:\n        return(1)\n    if l==r:\n        return(0)\n    return (all_Bits_Set_In_The_Given_Range(n-1,l,r))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (i&(i-1)):\n            print(\"No, because the range is {}, which is not valid.\".format(i))\n        else:\n            print(\"Yes, because the range is {}, which is valid.\".format(i))\n    return\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #check to see if the range is valid.\n    if (l > n) or (r > n):\n        return \"Invalid Range\"\n    else:\n        #check to see if the bits are set in the range.\n        for i in range(l,r+1):\n            if (n & (1<<i)) == 0:\n                return \"Bit is not Set\"\n        #if all bits are set in the range, return true\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(n):\n        if (l <= n-i) and (n-i <= r):\n            print(bin(i), end=\" \")\n    print(\"\\n\")\n    return\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    sum = 0\n    if l <= r:\n        for i in range(l,r+1):\n            sum += i\n        for i in range(1,sum+1):\n            if sum % 2 == 0:\n                print(0)\n                return\n            else:\n                print(1)\n                return\n    else:\n        print(0)\n        return\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    global bits\n    if r<=n:\n        print(\"The given range is between\",l,\"and\",r)\n        bits=[]\n        for i in range(l,r+1):\n            if i<n:\n                bits.append(i)\n            else:\n                print(\"The number is\",i)\n                break\n    else:\n        print(\"The given range is outside the given range\")\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l<=r:\n        return n&(1<<r)==0\n    elif l==r:\n        return n==0\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #your code here\n    if(n == 0):\n        return True\n    if(n > 0):\n        if(l >= 0):\n            if(r <= n):\n                return all_Bits_Set_In_The_Given_Range(n-1,l-1,r)\n        return all_Bits_Set_In_The_Given_Range(n-1,l,r-1)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n<0 or n>=l:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for bit in range(l,r+1):\n        #print(bit)\n        if ( ( (bit & (2**n-1)) == 0) ) : \n            #print(1)\n            return True\n    #print(0)\n    return False\n    \ndef Count_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Count all the bits in the given range and return a dictionary with all the bits as keys and the number of times that bit is set as the value.\n    '''\n    count = {0:0}\n    for i in range(l,r+1):\n        count[i] = all_Bits_Set_In_The_Given_Range(n,i,i)\n    #print(count)\n    return count\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    output = []\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    if len(arr) <= n:\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 1:\n        return arr\n    elif arr[0] < 0:\n        arr[0] *= -1\n    elif arr[0] >= n:\n        arr[0] *= -1\n    j = 0\n    for i in range(1,n):\n        if arr[i] < 0:\n            arr[i] *= -1\n            arr[j] *= -1\n            arr[i] = arr[j]\n            j += 1\n        elif arr[i] >= n:\n            arr[i] *= -1\n            arr[j] = arr[i]\n            arr[i] = arr[j]\n            arr[j] = arr[i]\n            j += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if type(arr) is not list:\n        return arr\n    else:\n        if len(arr) == 0:\n            return []\n        else:\n            ans = []\n            for i in range(n):\n                if arr[i] < 0:\n                    ans.append(arr[i])\n                    ans.append(-arr[i])\n                else:\n                    ans.append(arr[i])\n                    ans.append(arr[i])\n                    ans.append(arr[i])\n            return ans\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # YOUR CODE HERE\n    if len(arr) <= n:\n        return arr\n    temp = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            temp = temp + arr[i]\n        else:\n            temp = temp - arr[i]\n    temp = temp/2\n    arr[0] = temp\n    arr.remove(temp)\n    for i in range(1, n):\n        if arr[i] < 0:\n            arr[i] = arr[i] + temp\n        else:\n            arr[i] = arr[i] - temp\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # write your code here\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = arr[-i-1]\n            arr[-i-1] = -arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = []\n    for x in range(0,len(arr)):\n        if arr[x] < 0:\n            new_arr.append(0)\n        elif arr[x] > 0:\n            new_arr.append(arr[x])\n        else:\n            new_arr.append(arr[x])\n            \n    for x in range(len(new_arr),n):\n        new_arr.append(0)\n    \n    return new_arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # YOUR CODE HERE\n    # raise NotImplementedError\n    if n == 0:\n        return []\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # This function can be done by swapping the first two elements of the input array in place (reversing the order of the input array)\n    # In this case, we will compare the input array[0], the first element, and input array[-1], the last element\n    # The result will be the same, since the first element will always have been swapped.\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return\n    arr = sorted(arr)\n    while arr[n] > 0:\n        arr[n] = arr[n-1]\n        n -= 1\n    if n!= 0:\n        arr[n] = arr[n]\n    arr.insert(0, 0)\n    arr.append(0)\n    arr.reverse()\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return(str1.replace(char,''))\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return char.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ',char)\n    return str1\n    \ndef process(string):\n    '''\n    Write a function that returns a string in the form:\n    \n    string[start:end]\n    \n    where start is the index of the first character that is not a whitespace character.\n    \n    start is the index of the first occurrence of the character you want.\n    \n    end is the index of the last character that is not a whitespace character.\n    '''\n    str_list=list(string)\n    start=0\n    end=len(str_list)\n    while True:\n        if str_list[start]==' ':\n            start+=1\n        elif str_list[start]!='':\n            end-=1\n            continue\n        else:\n            str_list[start]=char\n            break\n    return ''.join(str_list)\n    \ndef check_letter(string):\n    '''\n    Write a function that takes in a string and returns True if there are any non-alphanumeric characters in the string. Otherwise, return False.\n    '''\n    if len(string)==0:\n        return False\n    if any(not c.isalnum() for c in string):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    # Create a new string with characters replaced with blank spaces\n    new_str = \"\"\n    \n    # Loop through the string and replace the characters\n    for letter in str1:\n        if letter == char:\n            new_str +=''\n        else:\n            new_str += letter\n            \n    # Return the new string\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i == char:\n            str2 = str2 + i\n        else:\n            str2 = str2 + i\n    return str2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for c in str1:\n        if c == char:\n            c = char\n        else:\n            new_str += c\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\"\\n\",\"\")\n    return str1\n    \ndef write_csv(char,row):\n    '''\n    Write a function that takes in a character and row, and writes it to a csv, and returns the csv as a string.\n    '''\n    with open(\"/home/devnet/Kurid/kurid-api/kurid-api/data/my-data-files/my_data.csv\",\"a\") as csv_file:\n        csv_file.write(\"\\n\"+char)\n        csv_file.write(\",\")\n        csv_file.write(row)\n        csv_file.write(\"\\n\")\n    return \"Done writing csv\"\n    \ndef read_csv(char):\n    '''\n    Read a csv file, and print the values.\n    '''\n    with open(\"/home/devnet/Kurid/kurid-api/kurid-api/data/my-data-files/my_data.csv\",\"r\") as csv_file:\n        print(csv_file.read())\n        \ndef create_word_list(word):\n    '''\n    Create a list of words from a string, using a dictionary to find the correct dictionary.\n    '''\n    word_list=[]\n    letters=list(word)\n    for letter in letters:\n        if letter==' ':\n            word_list.append('')\n        else:\n            word_list.append(letter)\n    return word_list\n    \ndef list_duplicates(word_list):\n    '''\n    Create a list of words in which each word appears only once.\n    '''\n    word_list_duplicate=[]\n    for word in word_list:\n        if word not in word_list_duplicate:\n            word_list_duplicate.append(word)\n    return word_list_duplicate\n    \ndef remove_duplicates(word_list):\n    '''\n    Create a list of words without any duplicate words.\n    '''\n    word_list_removal=[]\n    for word in word_list:\n        if word not in word_list_removal:\n            word_list_removal.append(word)\n    return word_list_removal\n    \ndef remove_repeats(word_list):\n    '''\n    Create a list of words without any duplicate words, with no repetitions.\n    '''\n    word_list_removal=[]\n    for word in word_list:\n        if word not in word_list_removal:\n            word_list_removal.append(word)\n    return word_list_removal\n    \ndef remove_repeating_pairs(word_list):\n    '''\n    Create a list of words without any duplicate words, with no repeated pairs.\n    '''\n    word_list_removal=[]\n    for word in word_list:\n        if word not in word_list_removal:\n            if word not in word_list_removal:\n                word_list_removal.append(word)\n    return word_list_removal\n    \ndef remove_duplicate_pairs(word_list):\n    '''\n    Create a list of words without any duplicate words, with no repeated pairs.\n    '''\n    word_list_removal=[]\n    for word in word_list:\n        if word not in word_list_removal:\n            if word not in word_list_removal:\n                word_list_removal.append(word)\n    return word_list_removal\n    \ndef remove_duplicate_word_list(word_list):\n    '''\n    Create a list of words without any duplicate words, with no repeated pairs.\n    '''\n    word_list_removal=[]\n    for word in word_list:\n        if word not in word_list_removal:\n            word_list_removal.append(word)\n    return word_list_removal\n    \ndef create_word_list_from_file(file_name):\n    '''\n    Read the csv file containing the words, and create a list of words.\n    '''\n    with open(file_name) as file_input:\n        data = file_input.readlines()\n    word_list=data[0].split(',')\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)\n    word_list=remove_repeating_pairs(word_list)"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\" + char + \" \").strip()\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    str1=str1.replace(char,'')\n    str1=str1.replace('\\n','')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\r\",\"\")\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef med_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n mid-least items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef find_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef mean_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n mean items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef median_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n median items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef mode_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n mode items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef sum_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n sum items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef pop_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef heapify_nnum(list1,n,nlist,list2,heap):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n heapify items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    for i in range(n//2,n):\n        heap[nlist[i]].append(list1[i])\n    for i in range(n,n-1,-1):\n        heap[nlist[i]].append(list1[i])\n    for i in range(0,n):\n        heap[nlist[i]].append(list1[i])\n    return list2\ndef heap_sort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n sorted items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef heap_pop(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n pop items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef heap_pop_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n pop items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    for i in range(n//2,n):\n        list2.append(list1[i])\n    return list2\ndef heap_insert(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n insert items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    for i in range(0,n):\n        list1.append(list1[i])\n    return list1\ndef heap_insert_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n insert items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    for i in range(0,n):\n        list1.append(list1[i])\n    return list1\ndef heap_pop_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n pop items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef heap_pop_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n pop items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    for i in range(n//2,n):\n        list1.append(list1[i])\n    return list1\ndef heap_sort_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n sorted items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\ndef heap_sort(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n sorted items from the list.\n    '''\n    list1.sort()\n    list1 = [x for x in list1 if x!= 0]\n    list2=[]\n    for i in range(n//2,n):\n        list2.append(list1[i])\n    return list2\ndef heap_sort_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an intege"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if list1 == None:\n        return []\n    if len(list1)==0:\n        return []\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    final = []\n    for i in range(n):\n        final.append(list1[i])\n    for i in range(n,len(list1)):\n        final.append(list1[i])\n    for i in range(0,n):\n        final.append(list1[i])\n    return final\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your code here\n    heap=[]\n    # Using a list comprehension\n    for i in list1:\n        heapq.heappush(heap,i)\n        \n    out=[]\n    # While loop\n    while len(heap)>0:\n        # Get smallest element from list\n        smallest=heapq.heappop(heap)\n        # Push smallest element to the output list\n        out.append(smallest)\n        # Iterate again\n        while smallest not in list1:\n            smallest=heapq.heappop(heap)\n        # If smallest element isn't in output list\n        # Add smallest element to the output list\n        out.append(smallest)\n    return out\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    list1.sort(reverse=True)\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    lst = []\n    for i in list1:\n        if len(lst)<n:\n            heapq.heappush(lst,i)\n        else:\n            if i not in lst:\n                lst.append(i)\n    return lst\ndef area_of_polygon(A):\n    '''\n    Write a function that returns the area of a polygon.\n    '''\n    area = 0\n    for i in range(len(A)):\n        area += (A[i][0]-A[i][1])*(A[i][0]-A[i][1])\n    return area\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    output = []\n    for i in list1:\n        if len(heap) < n:\n            heapq.heappush(heap,i)\n            heapq.heappop(heap)\n        else:\n            output.append(heapq.heappop(heap))\n    return output\n    \n    \nprint(larg_nnum([1,3,7,9,12,20,24,34,50,67,87],5))\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    out = []\n    heap = []\n    # make heap from list\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    # iterate till list is not empty\n    for i in range(n,0,-1):\n        # if heap is not empty pop the largest element from the heap\n        if heap:\n            out.append(heapq.heappop(heap))\n        # if heap is empty pop all elements from the list\n        if len(heap) == 0:\n            pass\n        else:\n            heapq.heappush(heap,-list1[i])\n    return out\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    if n<=0:\n        print(\"not valid\")\n    elif n==1:\n        return list1\n    elif n==2:\n        return list1[0:2]\n    else:\n        for item in list1:\n            for item_one in item:\n                for item_two in item_one:\n                    for item_three in item_two:\n                        list2.append(item_three)\n    list2.sort()\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if list1 == []:\n        return []\n    if n == 0:\n        return []\n    if len(list1) <= n:\n        return list1\n    return list1[-n:]+larg_nnum(list1[:-n],n-1)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r**2) * np.pi * h**2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    return 0.5*(pow(h,2)+pow(r,2))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (h*(r**2)*(4.0*pi*r**2))\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    y = r*np.tan(h/2)\n    return (4*np.pi*y*r*h)*(1-(np.tan(h/2))**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 4*(r/h)**2\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 0\n    t = h\n    while t > 0:\n        s = s + r * t\n        t = t - (t/h)\n    return s\ndef lindem_cylinder(r,h):\n    '''\n    Write a function that returns the inital LINDEM (L = pi * r^2)\n    '''\n    s = 0\n    t = h\n    while t > 0:\n        s = s + r * t\n        t = t - (t/h)\n    return s\ndef heptad_cylinder(r,h):\n    '''\n    Write a function that returns the inital HEPTAD (H = 3pi * r^3)\n    '''\n    s = 0\n    t = h\n    while t > 0:\n        s = s + r * t\n        t = t - (t/h)\n    return s\ndef octad_cylinder(r,h):\n    '''\n    Write a function that returns the inital OCTAD (O = 2pi * r^3)\n    '''\n    s = 0\n    t = h\n    while t > 0:\n        s = s + r * t\n        t = t - (t/h)\n    return s\ndef rectangle_cylinder(r,h):\n    '''\n    Write a function that returns the inital rectangle (R = pi * r^2)\n    '''\n    s = 0\n    t = h\n    while t > 0:\n        s = s + r * t\n        t = t - (t/h)\n    return s\ndef parallelogram_cylinder(r,h):\n    '''\n    Write a function that returns the inital parallelogram (P = 3pi * r^3)\n    '''\n    s = 0\n    t = h\n    while t > 0:\n        s = s + r * t\n        t = t - (t/h)\n    return s\ndef octahedron_cylinder(r,h):\n    '''\n    Write a function that returns the inital octahedron (O = 3pi * r^3)\n    '''\n    s = 0\n    t = h\n    while t > 0:\n        s = s + r * t\n        t = t - (t/h)\n    return s\ndef trapeze_cylinder(r,h):\n    '''\n    Write a function that returns the inital trapeze (T = pi * r^3)\n    '''\n    s = 0\n    t = h\n    while t > 0:\n        s = s + r * t\n        t = t - (t/h)\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    r = r*100\n    a = 3.14*r**2\n    c = r*(h**2)*2\n    x = (c/2)/a\n    print(r, h, '-', x)\n    return x\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    L = 2*(r**2)\n    h = h/2\n    return L + (h/2)*(np.pi**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(r,h)\n    return (4/3)*np.pi*r*r*(h**3)*np.exp(2*h)*(3/2)**2\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l * l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l*l*l)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    s = 3.14 * (l ** 3)\n    return s\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l == 0:\n        return 0\n    elif l == 1:\n        return 1\n    elif l == 2:\n        return 4\n    elif l == 3:\n        return 9\n    elif l == 4:\n        return 16\n    else:\n        return (4 * 4 * 4) + (9 * 9 * 9) + (16 * 16 * 16)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # Initialize result variable\n    result = 0\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l = l*l\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = 0\n    for i in range(0, l*l, l):\n        v = v + i**3\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l == 1:\n        return 0\n    elif l % 1 == 0:\n        return int(l**.5)\n    else:\n        return (int(l**.5))**3\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_list = []\n    while (n>0): \n        if (n & 1 == 0): \n            even_list.append(1)\n        else: \n            even_list.append(0)\n        n=n>>1\n    return even_list\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    evens = 0\n    while n > 0:\n        n &= n-1\n        evens += 1\n    return evens\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    while n > 0:\n        if n & 1 == 0:\n            even_bits.append(1)\n        else:\n            even_bits.append(0)\n        n = n >> 1\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    f = \"even_bit_set_number(\" + str(n) + \")\"\n    exec(f)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1 == 0:\n            count += 1\n            n = n >> 1\n        else:\n            n = n << 1\n    print(count)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n = n >> 1\n    return count\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    i = 0\n    while (i < n):\n        if (i%2 == 0):\n            even_bits[i] = 1\n        else:\n            even_bits[i] = 0\n        i = i+1\n    print(even_bits)\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_numbers = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n    def set_even_bits(num): \n        '''\n        Set all even bits of a given number.\n        '''\n        for i in range(num): \n            if i%2 == 0: \n                even_numbers[i] = 1\n    return set_even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    output = 0\n    while n > 0:\n        output = output | (n & 1) \n        n >>= 1\n    return output\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    temp_list = []\n    while n > 0:\n        if n & 0x01 == 0:\n            temp_list.append(1)\n        else:\n            temp_list.append(0)\n        n = n >> 1\n    return temp_list\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = dict()\n    for i in test_list:\n        try:\n            result[i[0]] = result[i[0]] + 1\n        except:\n            result[i[0]] = 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #make a dictionary \n    dictionary = {}\n    #create a counter object \n    counter = Counter(test_list)\n    #loop through the dictionary and add each tuple to the counter.\n    for key, value in dictionary.items():\n        dictionary[key] = counter[key]\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    seen_dict = {}\n    count = 0\n    for x in test_list:\n        if x[0] in seen_dict:\n            seen_dict[x[0]] += 1\n        else:\n            seen_dict[x[0]] = 1\n        count += seen_dict[x[0]]\n    return seen_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output = {}\n    for tuple in test_list:\n        if tuple[0] not in output:\n            output[tuple[0]] = 1\n        else:\n            output[tuple[0]] += 1\n    return output\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n    \n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Here is an example of how the function works:\n    \n    # def check_occurences(test_list):\n    #     dict = {}\n    #     for tuple in test_list:\n    #         if tuple[0] in dict:\n    #             dict[tuple[0]] += 1\n    #         else:\n    #             dict[tuple[0]] = 1\n    #     return dict\n    \n    # In this example we have three tuples in test_list: ('a', 2), ('b', 4), ('c', 2) and the value 2 is the count of 'a' occuring in the test_list.\n    # This is because there is one 'a' tuple in the test_list and the two tuples are the same.\n    \n    # Notice that we do not count duplicate tuples.\n    \n    # If the function is in this example, we will have the following dictionary mapping tuples to the number of occurences in the test_list:\n    #     {'a': 2, 'b': 2, 'c': 4}\n    #     We are also interested in the keys of the dictionary.\n    #     Since the dictionary maps tuples to counts, we need to define the function that returns the number of times that a tuple occurs in the test_list.\n    #     The function should return two integers, the first being the number of times the tuple appears, and the second being the number of times that the tuple appears in the dictionary.\n    \n    # We will start with the first function:\n    \n    # def check_occurences(test_list):\n    #     dict = {}\n    #     for tuple in test_list:\n    #         if tuple[0] in dict:\n    #             dict[tuple[0]] += 1\n    #         else:\n    #             dict[tuple[0]] = 1\n    #     return dict\n    \n    # This function will take in the two tuples in test_list and count the number of occurrences of each tuple:\n    \n    def check_occurences(test_list):\n        dict = {}\n        for tuple in test_list:\n            if tuple[0] in dict:\n                dict[tuple[0]] += 1\n            else:\n                dict[tuple[0]] = 1\n        return dict\n    \n    def check_occurences2(test_list):\n        return Counter(test_list)\n    \n    def check_occurences3(test_list):\n        return {tuple[0]:tuple[1] for tuple in test_list}\n    \n    return check_occurences(test_list), check_occurences2(test_list), check_occurences3(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter_dict = Counter(test_list)\n    return counter_dict\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    \n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    substring = \"\"\n    for i in range(0,len(str)-1): \n        if(str[i] == str[i+1]):\n            count = count + 1\n        else: \n            substring = str[i]\n            if(str[i] == substring):\n                count = count + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    string=str\n    string=string.lower()\n    count=0\n    for i in range(len(string)-1):\n        for j in range(i+1,len(string)):\n            if string[i:j+1]==string[i:j+1].replace(\" \",\"\"):\n                count+=1\n    return count\n    \n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    a = len(str)\n    b = a/2\n    count = 0\n    for i in range(a):\n        if i+b>=a:\n            break\n        if str[i] == str[i+b]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(str.replace(' ','').split(\"'\"))\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substring_counter = 0\n    for i in range(len(str)-1):\n        if str[i] == str[i+1]:\n            substring_counter = substring_counter + 1\n    return substring_counter\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    num_of_substrings = 0\n    i = 0\n    while i < len(str):\n        if str[i] == str[i+1]:\n            num_of_substrings += 1\n        i += 1\n    return num_of_substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = len(str)\n    if l == 0:\n        return 0\n    res = 0\n    for i in range(l):\n        j = 0\n        temp = 0\n        while j < len(str):\n            if str[j]!= str[i]:\n                temp += 1\n            if temp == 3:\n                res += 1\n            j += 1\n        if temp == 3:\n            res += 1\n    return res"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]==str[i+1]:\n            continue\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # print(str)\n    count = 0\n    for i in range(0,len(str)-1):\n        # print(i)\n        if str[i] == str[i+1]:\n            count = count + 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    num_of_sequences = 0\n    # loop through n\n    for i in range(n):\n        # skip if odd number\n        if i % 2!= 0:\n            continue\n        # find the next element\n        element = m*i\n        # add to counter\n        num_of_sequences += int(math.floor(math.sqrt(element)))\n    return num_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sum = 0\n    for x in range(1, n + 1):\n        sum += (m*x)\n    return sum\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    if m > n:\n        return total\n    else:\n        for i in range(2,m+1):\n            if m%i == 0 and n%i == 0:\n                total += m//i + n//i + 1\n        return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count_seq = 0 \n    for i in range(1,n+1):\n        for j in range(i):\n            if (m - j) == (n - i):\n                count_seq += 1\n                break\n    return count_seq\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return int(2 * m * n / 2)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    tot = 0\n    for i in range(1, n + 1):\n        tot += 2 * i - 2 * m\n    return tot\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return get_total_number_of_sequences(m-1,n-1) + get_total_number_of_sequences(m-1,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 4 * m * (m+1) * (n+1) * (n+2)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n>m:\n        print(\"Not possible\")\n        return\n    else:\n        # Find all the possible sequences of length n\n        for i in range(1,(m+1)//2):\n            # Find all the possible sequences of length n-i\n            for j in range(1,(m+1)//i):\n                # If n-i = m, get the sum of all the possible sequences\n                if n-i == m:\n                    sum_of_possible_sequences = sum([x for x in range(i,m+1,i)])\n                    # if sum_of_possible_sequences == n:\n                    #     print(i,j)\n                    #     print(sum_of_possible_sequences)\n                    #     print(sum_of_possible_sequences == n)\n                    #     print()\n                elif n-i == m - j:\n                    sum_of_possible_sequences = sum([x for x in range(i,m+1,j)])\n                    if sum_of_possible_sequences == n:\n                        print(i,j)\n                        print(sum_of_possible_sequences)\n                        print(sum_of_possible_sequences == n)\n                        print()\n    retur"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1_copy=list1.copy()\n    list1_copy.pop()\n    list2_copy=list2.copy()\n    list2_copy.pop()\n    #print(list1_copy)\n    #print(list2_copy)\n    list1_copy.extend(list2_copy)\n    #print(list1_copy)\n    return list1_copy\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list2[0:len(list1)-1] + list1[len(list1)-1:]\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1_list2 = []\n    for i in list1:\n        list1_list2.append(i)\n    for i in list2:\n        list1_list2.append(i)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # YOUR CODE HERE\n    return list"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list(list1[0:len(list2)-1] + list2"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        print('Error: All lists must be the same length')\n        return\n    for i in range(len(list1)):\n        if list1[i][-1] in list2:\n            list1[i] = list1[i][:-1] + list2[list1[i][-1]]\n            \n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    i=0\n    for item in list1:\n        list1[i]=list2[i]\n        i+=1\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(0,len(list1)):\n        list1[i] = list2[i]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #your code here\n    return list1[0]\n    #add your code here\n    \n    \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1_backup = list1[0:-1]\n    list1[0:-1] = list2\n    list1[-1] = list2[-1]\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count=0\n    for c in str1:\n        if c==\" \":\n            count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    c=0\n    for i in str1:\n        if i == 'a' or i == 'b' or i == 'c':\n            c+=1\n    return c\n        \ndef count_spaces(str1):\n    '''\n    Write a function to count the number of spaces in a string.\n    '''\n    s=0\n    for i in str1:\n        if i =='':\n            s+=1\n    return s\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    def count_char(str1):\n        '''\n        The function will count the total number of characters.\n        '''\n        count = 0\n        for char in str1:\n            count += 1\n        return count\n    \n    return count_char(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        if char.isalpha():\n            char_count += 1\n    return char_count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i == \" \":\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    res = 0\n    for i in range(len(str1)):\n        if str1[i]==\" \":\n            res+=1\n    return res\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for i in str1:\n        charac += 1\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    cnt_char = 0\n    for i in range(0, len(str1)):\n        if str1[i] == str1[i].upper():\n            cnt_char = cnt_char + 1\n    return cnt_char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if (str1[i]==\"a\" or str1[i]==\"A\"):\n            count += 1\n        if (str1[i]==\"b\" or str1[i]==\"B\"):\n            count += 1\n        if (str1[i]==\"c\" or str1[i]==\"C\"):\n            count += 1\n        if (str1[i]==\"d\" or str1[i]==\"D\"):\n            count += 1\n        if (str1[i]==\"e\" or str1[i]==\"E\"):\n            count += 1\n        if (str1[i]==\"f\" or str1[i]==\"F\"):\n            count += 1\n        if (str1[i]==\"g\" or str1[i]==\"G\"):\n            count += 1\n        if (str1[i]==\"h\" or str1[i]==\"H\"):\n            count += 1\n        if (str1[i]==\"i\" or str1[i]==\"I\"):\n            count += 1\n        if (str1[i]==\"j\" or str1[i]==\"J\"):\n            count += 1\n        if (str1[i]==\"k\" or str1[i]==\"K\"):\n            count += 1\n        if (str1[i]==\"l\" or str1[i]==\"L\"):\n            count += 1\n        if (str1[i]==\"m\" or str1[i]==\"M\"):\n            count += 1\n        if (str1[i]==\"n\" or str1[i]==\"N\"):\n            count += 1\n        if (str1[i]==\"o\" or str1[i]==\"O\"):\n            count += 1\n        if (str1[i]==\"p\" or str1[i]==\"P\"):\n            count += 1\n        if (str1[i]==\"q\" or str1[i]==\"Q\"):\n            count += 1\n        if (str1[i]==\"r\" or str1[i]==\"R\"):\n            count += 1\n        if (str1[i]==\"s\" or str1[i]==\"S\"):\n            count += 1\n        if (str1[i]==\"t\" or str1[i]==\"T\"):\n            count += 1\n        if (str1[i]==\"u\" or str1[i]==\"U\"):\n            count += 1\n        if (str1[i]==\"v\" or str1[i]==\"V\"):\n            count += 1\n        if (str1[i]==\"w\" or str1[i]==\"W\"):\n            count += 1\n        if (str1[i]==\"x\" or str1[i]==\"X\"):\n            count += 1\n        if (str1[i]==\"y\" or str1[i]==\"Y\"):\n            count += 1\n        if (str1[i]==\"z\" or str1[i]==\"Z\"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\"-\"):\n            count += 1\n        if (str1[i]==\"!\"):\n            count += 1\n        if (str1[i]==\"/\"):\n            count += 1\n        if (str1[i]==\"*\"):\n            count += 1\n        if (str1[i]==\"+\"):\n            count += 1\n        if (str1[i]==\"=\"):\n            count += 1\n        if (str1[i]==\">\"):\n            count += 1\n        if (str1[i]==\"=\"):\n            count += 1\n        if (str1[i]==\"<\"):\n            count += 1\n        if (str1[i]==\"=\"):\n            count += 1\n        if (str1[i]==\">=\"):\n            count += 1\n        if (str1[i]==\"<=\"):\n            count += 1\n        if (str1[i]==\"|\"):\n            count += 1\n        if (str1[i]==\"*\"):\n            count += 1\n        if (str1[i]==\"+\"):\n            count += 1\n        if (str1[i]==\"-\"):\n            count += 1\n        if (str1[i]==\"*\"):\n            count += 1\n        if (str1[i]==\"+\"):\n            count += 1\n        if (str1[i]==\"-\"):\n            count += 1\n        if (str1[i]==\"=\"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\"/\"):\n            count += 1\n        if (str1[i]==\"*\"):\n            count += 1\n        if (str1[i]==\"+\"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\"-\"):\n            count += 1\n        if (str1[i]==\"!\"):\n            count += 1\n        if (str1[i]==\"/\"):\n            count += 1\n        if (str1[i]==\"|\"):\n            count += 1\n        if (str1[i]==\"*\"):\n            count += 1\n        if (str1[i]==\"+\"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\"<\"):\n            count += 1\n        if (str1[i]==\"=\"):\n            count += 1\n        if (str1[i]==\">\"):\n            count += 1\n        if (str1[i]==\"=\"):\n            count += 1\n        if (str1[i]==\">=\"):\n            count += 1\n        if (str1[i]==\"<=\"):\n            count += 1\n        if (str1[i]==\"<=\"):\n            count += 1\n        if (str1[i]==\"|\"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\"|\"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\"-\"):\n            count += 1\n        if (str1[i]==\"|\"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\"*\"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\"+\"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\"*\"):\n            count += 1\n        if (str1[i]==\"+\"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]==\" \"):\n            count += 1\n        if (str1[i]="
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for char in str1:\n        if char in string.ascii_lowercase:\n            char_count += 1\n    print(f'The count of characters in string is {char_count}')\n    return char_count\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Note:  \n    # Very advanced, but it works.  (Thanks Alex for helping me.)\n    # For a discussion on the other questions, please don't hesitate to contact me. \n    # Note that the function is allowed to return a negative number.\n    # So, if a function's docstring returns \"next_Perfect_Square(x)\", \n    # the function will accept x as an argument.\n    # So, if you try to write \"next_Perfect_Square(x)\", Python will raise a NameError. \n    # If your function needs a docstring, please write it to the docstring and then write it here.\n    # This is a very simple and concise example of what you could have in a function.\n    \n    def next_Perfect_Square_helper(x):\n        if x <= 1:\n            return x\n        n = math.sqrt(x)\n        return next_Perfect_Square_helper(n) + 1\n    if N <= 1:\n        return 1\n    return next_Perfect_Square_helper(N)\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    k = N\n    while (k * k) % 2 == 0:\n        k = k // 2\n    if k*k > N:\n        return N\n    else:\n        for i in range(k,0,-1):\n            if N % i == 0:\n                return i\n        return N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #get the first perfect square\n    square = math.sqrt(N)\n    #get the next perfect square\n    n = square + 1\n    while n <= N:\n        if N == (square ** 2):\n            return square\n        square = square + 1\n        n = n + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 2:\n        return None\n    # if we are given a number 1, we return the square\n    # if we are given a number 2, we return the square of 2\n    # so we have to make sure that we always choose the next perfect square\n    if N == 1 or N == 2:\n        return N\n    # if we have a perfect square\n    # we need to check if it is greater than the square\n    sqrtN = math.sqrt(N)\n    if sqrtN % 2 == 0:\n        return next_Perfect_Square(int(sqrtN))\n    else:\n        return next_Perfect_Square(int(N + (sqrtN + 1)))\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    pass \n    # next perfect square\n    \n    def check_perfect_square(x):\n        '''\n        check if a number is perfect square\n        '''\n        pass \n        # check if a number is perfect square\n    \n    def is_perfect_square(x):\n        '''\n        check if a number is perfect square\n        '''\n        pass \n        # check if a number is perfect square\n    \n    def next_Perfect_Square(N): \n        '''\n        Write a python function to find the next perfect square greater than a given number.\n        '''\n        pass \n        # next perfect square\n    \n    def is_Perfect_Square(x):\n        '''\n        check if a number is perfect square\n        '''\n        pass \n        # check if a number is perfect square\n    \n    def next_Perfect_Square(N):\n        '''\n        Write a python function to find the next perfect square greater than a given number.\n        '''\n        pass \n        # next perfect square\n    \n    is_perfect_square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    #check_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect square\n    is_Perfect_Square(N) # checking if a number is perfect square\n    next_Perfect_Square(N) # checking if a number is perfect squar"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    if N == 1:\n        return 1\n    elif N == 2:\n        return 4\n    elif N == 3:\n        return 6\n    elif N == 4:\n        return 10\n    elif N == 5:\n        return 12\n    elif N == 6:\n        return 14\n    elif N == 7:\n        return 16\n    elif N == 8:\n        return 20\n    elif N == 9:\n        return 24\n    elif N == 10:\n        return 30\n    elif N == 11:\n        return 40\n    elif N == 12:\n        return 50\n    elif N == 13:\n        return 60\n    elif N == 14:\n        return 70\n    elif N == 15:\n        return 80\n    elif N == 16:\n        return 90\n    elif N == 17:\n        return 100\n    elif N == 18:\n        return 120\n    elif N == 19:\n        return 140\n    elif N == 20:\n        return 170\n    elif N == 21:\n        return 190\n    elif N == 22:\n        return 220\n    elif N == 23:\n        return 250\n    elif N == 24:\n        return 300\n    elif N == 25:\n        return 350\n    elif N == 26:\n        return 400\n    elif N == 27:\n        return 450\n    elif N == 28:\n        return 500\n    elif N == 29:\n        return 520\n    elif N == 30:\n        return 550\n    elif N == 31:\n        return 600\n    elif N == 32:\n        return 620\n    elif N == 33:\n        return 660\n    elif N == 34:\n        return 700\n    elif N == 35:\n        return 720\n    elif N == 36:\n        return 750\n    elif N == 37:\n        return 800\n    elif N == 38:\n        return 850\n    elif N == 39:\n        return 1000\n    elif N == 40:\n        return 1050\n    elif N == 41:\n        return 1200\n    elif N == 42:\n        return 1302\n    elif N == 43:\n        return 1400\n    elif N == 44:\n        return 1520\n    elif N == 45:\n        return 1600\n    elif N == 46:\n        return 1700\n    elif N == 47:\n        return 1900\n    elif N == 48:\n        return 2050\n    elif N == 49:\n        return 2050\n    elif N == 50:\n        return 2200\n    elif N == 51:\n        return 2400\n    elif N == 52:\n        return 2600\n    elif N == 53:\n        return 3000\n    elif N == 54:\n        return 3200\n    elif N == 55:\n        return 3500\n    elif N == 56:\n        return 4000\n    elif N == 57:\n        return 4500\n    elif N == 58:\n        return 5000\n    elif N == 59:\n        return 6000\n    elif N == 60:\n        return 7000\n    elif N == 61:\n        return 8000\n    elif N == 62:\n        return 9000\n    elif N == 63:\n        return 10000\n    elif N == 64:\n        return 11000\n    elif N == 65:\n        return 12000\n    elif N == 66:\n        return 13000\n    elif N == 67:\n        return 14000\n    elif N == 68:\n        return 15000\n    elif N == 69:\n        return 16000\n    elif N == 70:\n        return 17000\n    elif N == 71:\n        return 18000\n    elif N == 72:\n        return 19000\n    elif N == 73:\n        return 20000\n    elif N == 74:\n        return 21000\n    elif N == 75:\n        return 22000\n    elif N == 76:\n        return 23000\n    elif N == 77:\n        return 24000\n    elif N == 78:\n        return 25000\n    elif N == 79:\n        return 26000\n    elif N == 80:\n        return 27000\n    elif N == 81:\n        return 28000\n    elif N == 82:\n        return 29000\n    elif N == 83:\n        return 30000\n    elif N == 84:\n        return 31000\n    elif N == 85:\n        return 32000\n    elif N == 86:\n        return 33000\n    elif N == 87:\n        return 34000\n    elif N == 88:\n        return 35000\n    elif N == 89:\n        return 36000\n    elif N == 90:\n        return 37000\n    elif N == 91:\n        return 38000\n    elif N == 92:\n        return 39000\n    elif N == 93:\n        return 40000\n    elif N == 94:\n        return 41000\n    elif N == 95:\n        return 42000\n    elif N == 96:\n        return 43000\n    elif N == 97:\n        return 44000\n    elif N == 98:\n        return 45000\n    elif N == 99:\n        return 46000\n    elif N == 100:\n        return 47000\n    elif N == 101:\n        return 48000\n    elif N == 102:\n        return 49000\n    elif N == 103:\n        return 50000\n    elif N == 104:\n        return 51000\n    elif N == 105:\n        return 52000\n    elif N == 106:\n        return 53000\n    elif N == 107:\n        return 54000\n    elif N == 108:\n        return 55000\n    elif N == 109:\n        return 56000\n    elif N == 110:\n        return 57000\n    elif N == 111:\n        return 58000\n    elif N == 112:\n        return 59000\n    elif N == 113:\n        return 60000\n    elif N == 114:\n        return 61000\n    elif N == 115:\n        return 62000\n    elif N == 116:\n        return 63000\n    elif N == 117:\n        return 64000\n    elif N == 118:\n        return 65000\n    elif N == 119:\n        return 66000\n    elif N == 120:\n        return 67000\n    elif N == 121:\n        return 68000\n    elif N == 122:\n        return 69000\n    elif N == 123:\n        return 70000\n    elif N == 124:\n        return 71000\n    elif N == 125:\n        return 72000\n    elif N == 126:\n        return 73000\n    elif N == 127:\n        return 74000\n    elif N == 128:\n        return 75000\n    elif N == 129:\n        return 76000\n    elif N == 130:\n        return 77000\n    elif N == 131:\n        return 78000\n    elif N == 132:\n        return 79000\n    elif N == 133:\n        return 80000\n    elif N == 134:\n        return 81000\n    elif N == 135:\n        return 82000\n    elif N == 136:\n        return 83000\n    elif N == 137:\n        return 84000\n    elif N == 138:\n        return 85000\n    elif N == 139:\n        return 86000\n    elif N == 140:\n        return 87000\n    elif N == 141:\n        return 88000\n    elif N == 142:\n        return 89000\n    elif N == 143:\n        return 90000\n    elif N == 144:\n        return 91000\n    elif N == 145:\n        return 92000\n    elif N == 146:\n        return 93000\n    elif N == 147:\n        return 94000\n    elif N == 148:\n        return 95000\n    elif N == 149:\n        return 96000\n    elif N == 150:\n        return 97000\n    elif N == 151:\n        return 98000\n    elif N == 152:\n        return 99000\n    elif N == 153:\n        return 100000\n    elif N == 154:\n        return 101000\n    elif N == 155:\n        return 102000\n    elif N == 156:\n        return 103000\n    elif N == 157:\n        return 104000\n    elif N == 158:\n        return 105000\n    elif N == 159:"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Your code here\n    N = int(N)\n    sqrt_N = math.sqrt(N)\n    for i in range(1,int(sqrt_N)):\n        if N%i==0:\n            return i\n    return sqrt_N\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 2:\n        return N\n    else:\n        val = N * (N + 1) // 2\n        if val > N:\n            return next_Perfect_Square(val)\n        else:\n            return val\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        return 0\n    if (N == 0):\n        return 1\n    \n    if (N == 1):\n        return 2\n    if (N == 2):\n        return 3\n    \n    if (N == 3):\n        return 4\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==1 or N==2:\n        return N\n    if N%2==0:\n        return 1\n    # now N is odd\n    # now use binary search to find next perfect square \n    # if the square is even, then we have a perfect square \n    # if the square is odd, we have a perfect square\n    # this is a quick way to get next perfect square\n    left=0\n    right=N//2\n    \n    while left<=right:\n        mid=(left+right)//2\n        # for mid, i in enumerate(sqrt(N)):\n        #     if i*i==N:\n        #         return mid\n        \n        if mid*mid==N:\n            if N%2==0:\n                return mid\n            else:\n                return mid\n            # if N is even, we have a perfect square\n            # if N is odd, we have a perfect square\n            # now left and right are not even or odd, we have a perfect square\n            # so, we have a perfect square\n        if N%mid==0:\n            if N%2==0:\n                return mid\n            else:\n                return mid\n            # if N is even, we have a perfect square\n            # if N is odd, we have a perfect square\n        if N%mid==1:\n            return mid\n        left=mid+1\n        right=mid-1\n    return -1\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    max_increasing = 0\n    max_decreasing = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            if max_increasing == 0:\n                max_increasing = arr[i]\n            else:\n                max_increasing = max(max_increasing, arr[i])\n        elif arr[i] < arr[i-1]:\n            if max_decreasing == 0:\n                max_decreasing = arr[i]\n            else:\n                max_decreasing = max(max_decreasing, arr[i])\n    \n    if max_increasing > max_decreasing:\n        return max_increasing\n    else:\n        return max_decreasing\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    res = 0\n    for i in range(1,len(arr)):\n        if arr[i]>arr[i-1]:\n            res+=arr[i]\n        else:\n            res+=arr[i-1]\n    return res\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    res = 0\n    for i in range(1,len(arr)):\n        if arr[i]>arr[i-1]:\n            res+=arr[i]\n        else:\n            res+=arr[i-1]\n    return res\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    res = 0\n    for i in range(1,len(arr)):\n        if arr[i]>arr[i-1]:\n            res+=arr[i]\n        else:\n            res+=arr[i-1]\n    return res\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    res = 0\n    for i in range(1,len(arr)):\n        if arr[i]>arr[i-1]:\n            res+=arr[i]\n        else:\n            res+=arr[i-1]\n    return res\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    res = 0\n    for i in range(1,len(arr)):\n        if arr[i]>arr[i-1]:\n            res+=arr[i]\n        else:\n            res+=arr[i-1]\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    n = len(arr)\n    \n    if n == 1:\n        return arr[0]\n    \n    max_sum = arr[0]\n    \n    # For each element, iterate backwards from the last element\n    for i in range(1, n-1):\n        current_sum = arr[i] + arr[i-1]\n        max_sum = max(current_sum, max_sum)\n        \n    # As we go up, the max value can be doubled. (The second one's incremented now)\n    # As we go down, the max value can be doubled. (The first one's decremented now)\n    # As we go up, the max value can be doubled. (The first one's incremented now)\n    \n    # If the last element's sum is greater than the current value, set the max value to the current value.\n    # Otherwise, set the current value to the current value plus the max value\n    # If this value is the max element (i.e., the current value), we found the maximum\n    # So the max value is the current value, and we return it\n    # If this value is not the max element (i.e., the current value), we find the maximum\n    # This might return the max element if the current value has no more elements.\n    # So we return the current element.\n    \n    # If the last element's sum is less than or equal to the current value,\n    # set the max to the current value + 1.\n    # Else, set the max to the current value + 1\n    # If this value is the max element, we found the maximum, so we return it\n    # Otherwise, we return the current element.\n    # So we return the max element\n    \n    return max_sum\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_subseq = max_sum(arr[:-1])\n    return max(arr[0] + max_subseq, arr[-1] + max_subseq, arr[-1] + max_subseq + max_subseq)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    # Base case\n    if (len(arr) == 1):\n        return arr[0]\n    # \n    for i in range(0,len(arr) - 1):\n        for j in range(0,i):\n            if(arr[j] > arr[j + 1]):\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            else:\n                continue\n        max_sum = max(max_sum, arr[i] + max_sum(arr[:i]))\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    for i in range(1, len(arr)): \n        max_sum = max(arr[i], max_sum + arr[i] )\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # TODO: Create a function that takes a list of numbers and returns the list of numbers with the maximum sum.\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    maximum = 0\n    for i in range(1, len(arr)):\n        left = arr[i-1]\n        right = arr[i]\n        if left + right > maximum:\n            maximum = left + right\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    def check(num): \n        if num == n: \n            return True\n        elif arr[num] < arr[num + 1]: \n            return False\n        else: \n            return check(num + 1)\n    return sum(check(i) for i in range(n))\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    for i in range(1, len(arr)): \n        j = i - 1\n        while arr[i] > arr[j] and j > 0: \n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n    return arr"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = None\n    if (number == 0):\n        squareroot = number\n    else:\n        while ((number*number) <= number):\n            if (number % 2) == 0:\n                number = number // 2\n            else:\n                number = 3 * number + 1\n    return squareroot\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def sqrt(number):\n        '''\n        Define the equation a_n = sqrt(x)\n        '''\n        if(number<0):\n            print('the number must be greater than 0')\n            return 0\n        else:\n            a = number\n            b = 0\n            while(b**2 < a):\n                b += 1\n            print(b)\n            if(b==1):\n                print('the number is a quadratic number')\n            else:\n                if(b%2 == 0):\n                    print('the number is not a quadratic number')\n                else:\n                    a = a/b\n                    print('the number is a bacayonian square root of',a)\n                    b = a\n    sqrt(number)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 2:\n        raise ValueError(\"Square root of a number less than 2 is undefined.\")\n    sqrt_of_number = (number ** 0.5)\n    return sqrt_of_number\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    result = []\n    for i in range(1, int(sqrt(number) + 1)):\n        if number % i == 0:\n            result.append(i)\n    if len(result) > 0:\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        return None\n    else:\n        if number % 2 == 0:\n            return babylonian_squareroot(number//2) + 1\n        else:\n            return babylonian_squareroot(number//2)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    left = 0\n    right = number\n    while (number > 0):\n        if (number % 2 == 0):\n            left = left * 3 + 1\n            right = right * 3 + 1\n        number = number // 2\n    return left + right\n    \n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number > 0:\n        return number**0.5\n    else:\n        return 0\n    # if we want to compute square roots it will be using sqrt\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Check if the input number is a single digit number\n    if(not isinstance(number, int)):\n        raise TypeError('Number has to be a single digit number')\n    \n    # Check if number is negative\n    if(number < 0):\n        raise ValueError('Number can not be negative')\n    \n    # Define the number of digits to compute\n    digits = 0\n    while(number!= 0):\n        number, digits = number // 10, digits + 1\n    # Call the method\n    return round(math.sqrt(number)"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # YOUR CODE HERE\n    square_root = 0\n    while square_root < number:\n        square_root = math.sqrt(number)\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    def squareroot(number):\n        square = 0\n        for i in range(1,number):\n            square = square + i\n        return square\n    return squareroot(number)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    result = 0\n    if len(str) == 0:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str: \n        return 0\n    count = [0] * 128\n    n = len(str)\n    i = 0\n    j = 0\n    while i < n:\n        count[ord(str[i]) - 97] += 1\n        i += 1\n    for j in range(len(str) - 1, -1, -1): \n        if count[ord(str[j]) - 97] > 0: \n            count[ord(str[j]) - 97] -= 1\n    i = 0\n    j = 0\n    while i < n: \n        if count[ord(str[i]) - 97] > 0: \n            j = i + 1\n            while j < n and count[ord(str[j]) - 97] > 0: \n                count[ord(str[j]) - 97] -= 1\n                j += 1\n        i += 1\n    max_len = len(str) - 1\n    while j < n: \n        max_len = max(max_len, j - i)\n        j += 1\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    res = 0\n    pal = set()\n    for s in str:\n        pal.add(s)\n    if len(str) < 2:\n        return 0\n    for i in range(len(str) - 1):\n        for j in range(i + 1, len(str)):\n            if str[i] == str[j] and str[i] in pal:\n                pal.remove(str[j])\n                res = max(res, j - i)\n    return res + 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps(str):\n        # base cases\n        if str == '':\n            return 0\n        if str == 'a' or str == 'c' or str == 'g' or str == 'u' or str == 'i' or str == 'o' or str == 'p' or str =='m' or str == 'f' or str =='s' or str == 'r' or str == 'w':\n            return 1\n        if str[0] == str[-1]:\n            return lps(str[1:-1]) + 1\n        # recursion\n        return max(lps(str[1:]), lps(str[:-1]))\n    print(lps(str))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_iter(str): \n        \"\"\"\n        :type s: string\n        :rtype: int\n        \"\"\"\n        n = len(str)\n        if n <= 1: \n            return 1\n        dp = [0] * (n+1)\n        dp[0] = 1\n        for i in range(1, n+1): \n            for j in range(i): \n                if str[i] == str[j]: \n                    dp[i] = dp[j] + dp[j+1] \n                else: \n                    dp[i] = max(dp[j], dp[j+1])\n        return dp[-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    max_sub = []\n    lps = []\n    i,j = 0, 0\n    #lps = [1, 2, 3, 4, 5]\n    while i < n:\n        if i < n and str[i] == str[j]:\n            i += 1\n            j += 1\n            lps.append(i)\n            lps.append(j)\n        else:\n            #lps.append(lps[-1]+1)\n            #if not lps or lps[-1] < lps[-2]:\n            if j < n:\n                lps.append(j)\n            if i < n:\n                lps.append(i)\n            \n            j,i = 0,0\n    #lps.append(lps[-1]+1)\n    #if not lps or lps[-1] < lps[-2]:\n    if j < n:\n        lps.append(j)\n    #lps.append(lps[-1]+1)\n    #print(lps)\n    return len(lps)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)<2:\n        return 0\n    pal = \"\"\n    for i in range(len(str)):\n        pal += str[i]\n    if len(str)==1:\n        return 1\n    else:\n        for i in range(len(str)-1):\n            pal = max(pal,str[i]+str[i+1],str[i]+str[i+2],str[i]+str[i+1])\n        return len(str)-2\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=0\n    for i in range(len(str)):\n        if str[i]==str[i][::-1]:\n            n+=1\n        else:\n            n-=1\n    return n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(str == ''): \n        return 0\n    else: \n        return 1 + max(lps(str[1:]), lps(str[:-1]), lps(str[::-1]))\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str is None or len(str) == 0: \n        return 0\n    \n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Store the length of the longest subsequence\n    max_len = 0\n    \n    # Initialize the longest subsequence to 0\n    for i in range(n): \n        for j in range(i): \n            if str[j] == str[i]: \n                if j == i: \n                    dp[i][i] = 0\n                else: \n                    dp[i][j] = dp[i+1][j+1]\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j+1])\n                \n            if dp[i][j] > max_len: \n                max_len = dp[i][j]\n            \n    return max_len\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n-2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Write your code here\n    return (n-1)/(n-1) + 1\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(1/n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return(n * (n+1) / 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n * harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n+1))/2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n*(n+1)/2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1, num2 in zip(array_nums1,array_nums2):\n        if num1 in array_nums2:\n            if num2 in array_nums1:\n                intersection.append(num1)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return_list=[]\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            return_list.append(array_nums1[i])\n    return return_list\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # write your code here\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    from collections import Counter\n    c1 = Counter(array_nums1)\n    c2 = Counter(array_nums2)\n    inter_dict = {}\n    for i in c1:\n        if i in c2:\n            inter_dict[i]=c1[i]\n        else:\n            pass\n    return inter_dict\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new_arr = []\n    for i in array_nums1:\n        if i in array_nums2:\n            new_arr.append(i)\n    return new_arr\n    \n    \n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)>len(array_nums2):\n        array_nums2, array_nums1 = array_nums1, array_nums2\n    sorted_nums1 = sorted(array_nums1)\n    sorted_nums2 = sorted(array_nums2)\n    left,right = 0, len(sorted_nums1)-1\n    while left<=right:\n        if sorted_nums1[left] in sorted_nums2:\n            return sorted_nums1[left]\n        if sorted_nums1[right] in sorted_nums2:\n            return sorted_nums1[right]\n        if sorted_nums1[left] > sorted_nums1[right]:\n            if sorted_nums1[left] <= sorted_nums2[right]:\n                left+=1\n            else:\n                right-=1\n        else:\n            if sorted_nums1[right] <= sorted_nums2[left]:\n                left+=1\n            else:\n                right-=1\n    return -1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if array_nums1 == array_nums2:\n        return [0,0]\n    if len(array_nums1) > len(array_nums2):\n        smaller = array_nums1\n        larger = array_nums2\n    else:\n        smaller = array_nums2\n        larger = array_nums1\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1_n = len(array_nums1)\n    array_nums2_n = len(array_nums2)\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # your code here\n    if len(array_nums1)< len(array_nums2):\n        array_nums1, array_nums2 = array_nums2, array_nums1\n    result = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            result.append(array_nums1[i])\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #Creating two empty arrays\n    array1 = []\n    array2 = []\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for x in tup:\n        if x == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if x == item:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    y = 0\n    if x in tup:\n        y += 1\n    return y\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ_list = []\n    for i in range(len(tup)):\n        if tup[i] == x:\n            occ_list.append(i)\n    return len(occ_list)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #HINT: You may find the function len is a built-in function in the standard lib you've been using. \n    #      The len(str) function returns the length of a string.\n    #HINT2: If you are returning a list, make sure you square brackets around the return statement.\n    return len(tup) == len(x) \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #Initialize the first iteration\n    if element not in list:\n        list.insert(0,element)\n        return list\n    \n    #Find the first element with an index greater than or equal to the element index\n    index = list.index(element)\n    #If the index is 0, then the element is already there\n    if index == 0:\n        list.insert(index-1,element)\n        return list\n    #If the index is greater than the length, then the element is at the end\n    elif index > len(list):\n        list.append(element)\n        return list\n    #If the element is not there, then the element is in the middle\n    else:\n        if index == len(list):\n            list.append(element)\n            return list\n        else:\n            mid = index - 1\n            #If the index is even, then the element is at the middle\n            if index % 2 == 0:\n                list.insert(mid+1,element)\n                return list\n            #If the index is odd, then the element is at the beginning\n            else:\n                list.insert(0,element)\n                return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    sorted_list = sorted(list, reverse=True) # sorts the list in order of decreasing order so it can be sorted\n    index = 0\n    while index < len(list):\n        if list[index] == element:\n            list.insert(index,element)\n        else:\n            index += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[0:1]+list[1:]+[element]\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    i = 0\n    while(i < len(list)):\n        if(element < list[i]):\n            list.insert(i,element)\n            break\n        else:\n            i += 1\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list[i] = element\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element not in list:\n        list.append(element)\n        return list\n    else:\n        i = 0\n        for i in range(len(list)):\n            if list[i]==element:\n                list.insert(i,element)\n                break\n        return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #your code goes here\n    temp_list = []\n    for item in list:\n        temp_list.append(item)\n    for item in element:\n        temp_list.append(item)\n    return temp_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index = 0\n    for item in list:\n        if index == 0:\n            list.insert(index,element)\n        index += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for element_value in list:\n        new_list.append(element_value)\n    return new_list\n    "
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #open file and read into list\n    file=open(\"data.txt\",\"r\")\n    read=file.readlines()\n    list=[]\n    for i in range(0,len(read)):\n        list.append(read[i])\n    file.close()\n    i=0\n    while i<len(list):\n        if list[i].find(\";\")!= -1:\n            a=list[i].split(\";\")\n            num1=float(a[0])\n            num2=float(a[1])\n            if(num1==0 and num2==0):\n                continue\n            elif(num1==0):\n                return \"NO POSITIVE POINT\"\n            elif(num2==0):\n                return \"NO POSITIVE POINT\"\n            elif(num1==0 or num2==0):\n                return \"NO POSITIVE POINT\"\n            else:\n                r1=cmath.sqrt(num1**2-num2**2)\n                r2=cmath.sqrt(num1**2+num2**2)\n                phi1=math.acos((num1**2-num2**2)/(2*num1*num2))\n                phi2=math.acos((num1**2+num2**2)/(2*num1*num2))\n                phi=phi1-phi2\n                return \"POINT ON RADIUS \" + str(round(r1,2)) + \" ANGLE: \" + str(phi)\n        i=i+1\n    return \"NO POSITIVE POINT\"\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    def find_ang_zero(x,y):\n        if (x!= 0 and y!= 0):\n            angle = (abs(x)-abs(y))/abs(x)\n            print(angle)\n            return angle\n        elif (x == 0 and y!= 0):\n            print(\"Angle = 0\")\n            return 0\n        elif (x!= 0 and y == 0):\n            angle = (abs(x)-abs(y))/abs(x)\n            print(angle)\n            return angle\n        else:\n            print(\"Angle = -1\")\n            return -1\n    \n    def convert_to_radians(angle):\n        '''\n        Convert angle from radians to degrees, radians = 180 * pi/180\n        '''\n        if (angle >= 0):\n            return angle * 180/math.pi\n        else:\n            return -angle * 180/math.pi\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    x = cmath.polar(numbers[0])\n    y = cmath.polar(numbers[1])\n    print(\"X:\",x[0],\"Y:\",y[0])\n    print(\"=\",x[1],\"i*j\")\n    print(\"=\",y[0],\"i*j\")\n    polar.append(x[0])\n    polar.append(y[0])\n    print(\"=\",polar[0],\"i*j\")\n    print(\"=\",polar[1],\"i*j\")\n    polar.append(x[1])\n    polar.append(y[1])\n    print(\"=\",polar[0],\"i*j\")\n    print(\"=\",polar[1],\"i*j\")\n    \n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #try to convert n numbers to complex\n    if (type(numbers) is not list):\n        numbers = list(map(float, numbers))\n    #if numbers is a list, convert them to the list, else return the list\n    elif (type(numbers) is list):\n        numbers = list(map(float, numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x=0\n    y=0\n    z=0\n    for i in range(0, len(numbers)):\n        if numbers[i] == \"C\":\n            z=z*cmath.sqrt(2)\n            x+=cmath.acos(numbers[i+1])*cmath.pi/180\n            y+=cmath.asin(numbers[i+1])*cmath.pi/180\n            z+=cmath.acos(numbers[i+2])*cmath.pi/180\n            x+=cmath.asin(numbers[i+3])*cmath.pi/180\n            y+=cmath.asin(numbers[i+4])*cmath.pi/180\n        elif numbers[i] == \"I\":\n            x+=cmath.pi/2\n            y+=cmath.pi/2\n            z+=1\n    return [x,y,z]\ndef test():\n    '''\n    This function makes sure that the normal operations work correctly.\n    '''\n    x=convert([\"1.0\",\"C\",\"I\"])\n    y=convert([\"1.0\",\"1.0\",\"1.0\"])\n    z=convert([\"1.0\",\"1.0\",\"1.0\"])\n    print(x,y,z)\n    print(x,y,z)\n    print(x,y,z)\n    print(x,y,z)\n    print(x,y,z)\n    print(x,y,z)\ndef main():\n    '''\n    This function checks the normal operations.\n    '''\n    test()\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # This function converts complex numbers to polar coordinates\n    #\n    # arguement :     numbers -- a complex number\n    #\n    # return value :    pol -- polar coordinates\n    \n    if type(numbers) == complex and len(str(numbers)) == 8:\n        num1 = numbers.real\n        num2 = numbers.imag\n        x = cmath.phase(num1)\n        y = cmath.phase(num2)\n        pol = cmath.polar(x,y)\n        return pol\n    else:\n        return []\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = numbers.real\n    i = numbers.imag\n    print(r)\n    print(i)\n    f = 1j*(r+i)\n    print(f)\n    print(abs(f))\n    print(convert(f))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #convert complex number to polar coordinates\n    x = cmath.polar(float(numbers.real))\n    y = cmath.polar(float(numbers.imag))\n    #convert polar to cartesian coordinates\n    return [x[1],x[0],y[1],y[0]]"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = cmath.polar(x,y)\n        s.append(z)\n    return s\ndef reverse(numbers):\n    '''\n    Write a python function to reverse complex numbers.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,-y)\n        s.append(z)\n    return s\ndef norm(numbers):\n    '''\n    Write a python function to norm(complex numbers).\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(z)\n    return cmath.norm(s)\ndef normalize(numbers):\n    '''\n    Write a python function to normalize(complex numbers).\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(z)\n    return cmath.norm(s)\ndef sqnorm(numbers):\n    '''\n    Write a python function to sqnorm(complex numbers).\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(z**2)\n    return cmath.sqrt(cmath.sqrt(s))\ndef distance(numbers1,numbers2):\n    '''\n    Write a python function to find the distance between two complex numbers.\n    '''\n    s = []\n    for i in range(len(numbers1)):\n        x = numbers1[i].real\n        y = numbers1[i].imag\n        z = complex(x,y)\n        s.append(cmath.sqrt(z**2))\n    for i in range(len(numbers2)):\n        x = numbers2[i].real\n        y = numbers2[i].imag\n        z = complex(x,y)\n        s.append(cmath.sqrt(z**2))\n    return cmath.sqrt(sum(s))\ndef dot(numbers1,numbers2):\n    '''\n    Write a python function to find the dot product between two complex numbers.\n    '''\n    s = []\n    for i in range(len(numbers1)):\n        x = numbers1[i].real\n        y = numbers1[i].imag\n        z = numbers2[i].real\n        s.append(x*y)\n    for i in range(len(numbers2)):\n        x = numbers2[i].real\n        y = numbers2[i].imag\n        z = numbers1[i].real\n        s.append(x*y)\n    return cmath.polar(cmath.sqrt(sum(s)),0)\ndef det(numbers):\n    '''\n    Write a python function to find the detenstion of a complex number.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(cmath.det(z))\n    return cmath.polar(cmath.sqrt(cmath.sqrt(cmath.mul(s,s))),0)\ndef inv(numbers):\n    '''\n    Write a python function to find the inverse of a complex number.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(cmath.polar(z,0))\n    return cmath.polar(cmath.sqrt(cmath.mul(s,s)),0)\ndef eulers(numbers):\n    '''\n    Write a python function to find the eulerian path of a complex number.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(z)\n    return cmath.euler(s)\ndef is_square(numbers):\n    '''\n    Write a python function to check whether a complex number is square or not.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(cmath.sqrt(z**2))\n    return cmath.sqrt(sum(s))**2==cmath.sqrt(cmath.mul(s,s))\ndef degree(numbers):\n    '''\n    Write a python function to calculate the degree of a complex number.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(cmath.degrees(z))\n    return s\ndef normalize_numbers(numbers):\n    '''\n    Write a python function to normalize a complex numbers.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(cmath.norm(z))\n    return s\ndef is_conjugate(numbers):\n    '''\n    Write a python function to check whether a complex number is conjugate or not.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(cmath.conj(z))\n    return cmath.conj(s)\ndef is_symmetric(numbers):\n    '''\n    Write a python function to check whether a complex number is symmetric or not.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(cmath.abs(z))\n    return cmath.abs(cmath.mul(s,s))==cmath.abs(cmath.mul(s,s))\ndef is_symmetric_numbers(numbers):\n    '''\n    Write a python function to check whether a complex numbers are symmetric or not.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(cmath.abs(z))\n    return cmath.abs(cmath.mul(s,s))==cmath.abs(cmath.mul(s,s))\ndef is_invertible(numbers):\n    '''\n    Write a python function to check whether a complex numbers is invertible or not.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,y)\n        s.append(z)\n    return cmath.norm(cmath.sqrt(cmath.mul(s,s)))<=2\ndef is_invertible_numbers(numbers):\n    '''\n    Write a python function to check whether a complex numbers is invertible or not.\n    '''\n    s = []\n    for i in range(len(numbers)):\n        x = numbers[i].real\n        y = numbers[i].imag\n        z = complex(x,"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    try:\n        result = complex(numbers.real, numbers.imag)\n        return result\n    except ValueError:\n        return None\n    except:\n        return None\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    #Hint: You'll need to make use of the built-in function len() and count() functions.\n    #Your job is to implement the function.\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    print(\"Number of integer elements in the list is: \" + str(count))\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    i = 0\n    for i in range(len(list1)):\n        if list1[i] == int:\n            i += 1\n    return i\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for item in list1:\n        if type(item) == int:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_elements = 0\n    for element in list1:\n        if type(element) == int:\n            num_elements += 1\n    return num_elements\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    sum = 0\n    for i in list1:\n        if type(i) == int:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    import itertools\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    if n == 0:\n        return result\n    \n    for i in range(l):\n        result.extend(combinations_with_replacement(l, n-1))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(itertools.combinations(l, r)) for r in range(n+1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        #i is the index of the list\n        for comb in combinations_with_replacement(l, i):\n            combs.append(tuple(comb))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(0, len(l), n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(1, len(l)+1):\n        for j in range(1, len(l) + 1):\n            if l[j-1] == l[j]:\n                comb_list.append(tuple([l[j-1], l[j]]))\n    return comb_list\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [''.join(e) for e in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # the number of repetitions\n    m = len(l)\n    # generate all the combinations\n    combos = []\n    for i in range(m):\n        for j in range(m):\n            combos.append((l[i], l[j]))\n    # check if the output is valid\n    if m!= len(combos):\n        raise ValueError('The list has repeated values')\n    return combos\n    \n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) == 0:\n        return []\n    else:\n        return combinations_colors(l[1:], n) + [l[0]] + combinations_colors(l[1:], n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Your code here\n    return 0\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # Handle invalid inputs\n    if n <= 0:\n        return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # hint: use a loop and a while loop\n    # loop through 1 to 1000\n    # for each value in the range from 1 to 1000\n    # if the value is a prime, add it to the count\n    \n    count = 0\n    for value in range(1, 1001):\n        # check whether the value is prime\n        if is_prime(value):\n            # if it is, add it to the count\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_num_list = []\n    prime_num_list = [0] * n # initialise the list with 0's\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Add any helper code here\n    \n    def check_prime(number):\n        if number < 2:\n            return False\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        return True\n    \n    # Write the function here\n    \n    if n <= 0:\n        return 0\n    \n    # if n is not greater than 2 and not a power of 2, then it's not a prime number\n    if n < 2 or n % 2 == 0:\n        return 0\n    \n    # if n is a power of 2, then it's a prime number\n    if n == 2:\n        return 1\n    \n    # else, iterate over the number's factors\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if not check_prime(n//i):\n                count += 1\n    return count\n    \n    # Add any helper code here"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        count = 0\n        for i in range(2, n):\n            if (n % i) == 0:\n                break\n            else:\n                count += 1\n        if count!= 0:\n            return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n    # List of primes\n    # https://stackoverflow.com/questions/19172477/how-to-check-if-a-number-is-prime-or-not-in-python\n    prime_list = []\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            prime_list.append(i)\n    return len(prime_list)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Write your code here\n    temp = a\n    a = b\n    b = temp\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a + b\n    b = a - b\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first_number=a\n    second_number=b\n    return (second_number,first_number)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # Write your code here\n    x,y=b,a\n    return (x,y)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    first = a\n    second = b\n    return second, first\n    \n    \ndef compare(a, b):\n    '''\n    Write a function that returns the number of times a number appears in a sequence.\n    '''\n    count = 0\n    if a > b:\n        count += 1\n    elif a < b:\n        count += 1\n    else:\n        count += 2\n    \n    return count\n    \n    \ndef quick_sort(a, n, a_count, b_count):\n    '''\n    Write a function that takes in two numbers and returns the sorted numbers.\n    '''\n    if n < 1:\n        return a, n\n    \n    a, low, high = a[:n], 0, n-1\n    pivot = a[n]\n    i, j = 0, n - 1\n    \n    for i in range(n):\n        if a[i] < pivot:\n            low += 1\n            a[i], a[low] = a[low], a[i]\n            \n    for j in range(low, n):\n        a[j], a[j+1] = a[j+1], a[j]\n        \n    a[low], a[n-1] = a[n-1], a[low]\n    \n    if low < n//2:\n        return quick_sort(a, n, low, n-1)\n    \n    return quick_sort(a, low, high, n-1)\n    \n    \ndef selection_sort(a):\n    '''\n    Write a function that sorts a sequence in ascending order using the selection sort algorithm.\n    '''\n    for i in range(len(a)):\n        min_idx = i\n        for j in range(i+1, len(a)):\n            if a[min_idx] > a[j]:\n                min_idx = j\n        a[i], a[min_idx] = a[min_idx], a[i]\n    \n    return a\n    \n    \ndef merge_sort(a):\n    '''\n    Write a function that sorts a sequence in ascending order using the merge sort algorithm.\n    '''\n    if len(a) == 1:\n        return a\n    mid = int(len(a) / 2)\n    \n    left_a = a[0:mid]\n    right_a = a[mid:len(a)]\n    \n    return merge(left_a, right_a)\n    \n    \ndef merge(a, b):\n    '''\n    Write a function that takes two sequences and returns a sorted sequence.\n    '''\n    i = 0\n    j = 0\n    \n    result = []\n    \n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n            \n    while i < len(a):\n        result.append(a[i])\n        i += 1\n        \n    while j < len(b):\n        result.append(b[j])\n        j += 1\n        \n    return result\n    \n    \ndef merge_sort_recursive(a):\n    '''\n    Write a function that takes in a sorted list and returns the recursively sorted version.\n    '''\n    if len(a) == 1:\n        return a\n    \n    mid = int(len(a) / 2)\n    \n    left = merge_sort_recursive(a[0:mid])\n    right = merge_sort_recursive(a[mid:len(a)])\n    \n    return merge(left, right)\n    \n    \ndef merge_sort_iterative(a):\n    '''\n    Write a function that takes in a sorted list and returns the recursively sorted version.\n    '''\n    if len(a) == 1:\n        return a\n    \n    if len(a) == 0:\n        return a\n    \n    mid = int(len(a) / 2)\n    \n    left = []\n    right = []\n    \n    for i in range(mid):\n        left.append(a[i])\n        \n    for i in range(mid, len(a)):\n        right.append(a[i])\n        \n    \n    return merge(left, right)\n    \n    \ndef heap_sort(a):\n    '''\n    Write a function that sorts a sequence in ascending order using the heap sort algorithm.\n    '''\n    def swap(a, i, j):\n        a[i], a[j] = a[j], a[i]\n    \n    def heapify(a, n, i):\n        index = i\n        left_index = 2 * i + 1\n        right_index = 2 * i + 2\n        \n        if left_index < n and a[left_index] > a[index]:\n            index = left_index\n            \n        if right_index < n and a[right_index] > a[index]:\n            index = right_index\n        \n        if index!= i:\n            swap(a, index, i)\n            heapify(a, n, index)\n            \n    def heap_sort_recursive(a):\n        n = len(a)\n        \n        for i in range(n//2, -1, -1):\n            heapify(a, n, i)\n        \n        for i in range(n-1, 0, -1):\n            swap(a, 0, i)\n            heapify(a, i, 0)\n            \n        return a\n    \n    def heap_sort_iterative(a):\n        n = len(a)\n        \n        for i in range(n//2, -1, -1):\n            heapify(a, n, i)\n        \n        for i in range(n-1, 0, -1):\n            a[0], a[i] = a[i], a[0]\n            \n            heapify(a, i, 0)\n        \n        return a\n    \n    a = a[:]\n    heap_sort_recursive(a)\n    return a\n    \n    \ndef radix_sort(a):\n    '''\n    Write a function that sorts a sequence in ascending order using the Radix sort algorithm.\n    '''\n    def get_digit(n, digit):\n        return ((n / 10) ** digit) * 10\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = str(a)\n    b = str(b)\n    a = a.split(',')\n    b = b.split(',')\n    b[0] = b[0][-1]\n    b[1] = b[1][:-1]\n    a = a[0],b\n    return a,b\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return_tup = test_tup1 + test_tup2\n    return_tup_max = tuple(return_tup)\n    return return_tup_max\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #raise NotImplementedError('Implement this function!')\n    \n    max_val = 0\n    current_val = 0\n    current_index = 0\n    \n    for i,j in test_tup1:\n        if j > current_val:\n            current_val = j\n            current_index = i\n            \n    for i,j in test_tup2:\n        if i > current_val:\n            current_val = i\n            current_index = j\n            \n    print(f'The maximized tuple: {test_tup1} with a value of {current_val} and index of {current_index}')\n    \n    return max_val, current_index, current_val\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # YOUR CODE HERE\n    return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    '''\n    Tests:\n    test_tup1 : ([1,2,3,4], [1,2,3,4])\n    test_tup2 : (1,2,3,4)\n    Returns:\n    True:  if both tuples are maximized\n    False: if one tuple is not maximized\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # 1. Define a function that returns the number of elements in each tuple\n    # 2. Define a function that returns the number of unique values in each tuple\n    # 3. Define a function that returns a tuple with the maximum of the numbers in each tuple\n    # 4. Define a function that returns the number of elements in the largest tuple\n    # 5. Define a function that returns the number of elements in the smallest tuple\n    # 6. Define a function that returns the number of unique values in the largest tuple\n    # 7. Define a function that returns the number of unique values in the smallest tuple\n    # 8. Define a function that returns the number of unique elements in the largest tuple\n    # 9. Define a function that returns the number of unique elements in the smallest tuple\n    # 10. Define a function that returns a tuple with the maximum of the numbers in each tuple\n    # 11. Define a function that returns a tuple with the smallest of the numbers in each tuple\n    # 12. Define a function that returns the number of unique values in the smallest tuple\n    # 13. Define a function that returns a tuple with the number of unique elements in the largest tuple\n    # 14. Define a function that returns a tuple with the number of unique elements in the smallest tuple\n    # 15. Define a function that returns a tuple with the smallest of the numbers in each tuple\n    # 16. Define a function that returns a tuple with the number of unique values in the smallest tuple\n    # 17. Define a function that returns a tuple with the number of unique elements in the smallest tuple\n    # 18. Define a function that returns a tuple with the number of unique elements in the largest tuple\n    # 19. Define a function that returns a tuple with the number of unique elements in the smallest tuple\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    '''\n    This function should perform the following:\n    - Calculate the maximum of the tuple values\n    - Compare the maximum to the input tuple\n    - Check if the tuple has more values than the input\n    - If the tuple is a smaller tuple, remove it from the tuple\n    - If the tuple is a larger tuple, add it to the tuple\n    - If the input tuple is empty, add an empty tuple to the tuple\n    - If the input tuple is not empty, remove it from the tuple\n    - Return the modified tuple\n    '''\n    '''\n    TODO: Write your code here\n    '''\n    a = tuple(test_tup1)\n    b = tuple(test_tup2)\n    c = a\n    d = b\n    e = c\n    f = d\n    g = e\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    elif test_tup2 > test_tup1:\n        return test_tup2\n    else:\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return test_tup1[:i] + test_tup2[i + 1:]\n        return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create variables for the highest and lowest values\n    high = 0\n    low = 0\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = [2]\n    for p in range(3, int(n**0.5)+1, 2):\n        if n%p == 0:\n            prime_list.append(p)\n            if p == n//p:\n                return prime_list[len(prime_list)-1]\n    return -1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = True\n    for i in range(2, n):\n        if prime:\n            prime = False\n            for j in range(2, i):\n                if i % j == 0:\n                    prime = True\n                    break\n        else:\n            prime = True\n    return n % prime\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [0] * n\n    prime[0] = 1\n    prime[1] = 1\n    for i in range(2,n):\n        if prime[i] == 0:\n            for j in range(i,n):\n                prime[j] = (prime[j] + prime[i]) % 10007\n        else:\n            for j in range(i,n):\n                prime[j] = (prime[j] + prime[i]) % 10007\n    return prime[n-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize first two primes\n    primes = [2] \n    cur_primes = [2]\n    i = 3\n    \n    while len(cur_primes) < n: \n        # find primes with modulus primes[i] \n        while i % primes[-1] == 0: \n            primes.append(primes[-1] + 1)\n        i += 1 \n        # if prime was found then increment primes[-1] \n        if primes[-1] == primes[-2]: \n            primes.pop() \n    \n    # append last prime to the prime list \n    primes.append(primes[-1]) \n    \n    # return the found nth prime \n    return primes[-1] \n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    \n    if n==2:\n        return 2\n    else:\n        prime = 2\n        while prime*prime<n:\n            if n%prime==0:\n                break\n            prime+=1\n        if n!=prime:\n            return 0\n        else:\n            return prime\n    \ndef main():\n    '''\n    Main function to run the program.\n    '''\n    #Get user input\n    n = int(input('Enter the nth newman\u2013shanks\u2013williams prime number: '))\n    print('The new man\u00a0is: ', end='')\n    print(newman_prime(n))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Write your code here.\n    prime = []\n    for i in range(2, n + 1):\n        isprime = True\n        for j in range(2, i + 1):\n            if i % j == 0:\n                isprime = False\n                break\n        if isprime:\n            prime.append(i)\n    return prime[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    if n in prime_list:\n        return n\n    else:\n        return newman_prime(n-1)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n > 1:\n        for i in range(2,n): \n            if (n % i) == 0: \n                break\n        else: \n            return n \n        return newman_prime(n-1)\n    else: \n        return -1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1 or n==2: return n\n    if n==3: return 2\n    if n==4: return 5\n    if n==5: return 6\n    if n>4: return (n+1)**2\n    return None\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = 2\n    if n < 3:\n        return 1\n    else:\n        while prime < n:\n            if n % prime == 0:\n                n //= prime\n                prime += 1\n            else:\n                prime += 1\n    return n\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = (test_tup1[0], test_tup1[1])\n    test_tup2 = (test_tup2[0], test_tup2[1])\n    return (test_tup1[0] / test_tup1[1], test_tup1[1] / test_tup1[0])\n    \ntest1 = (10, 15)\ntest2 = (20, 25)\ntest3 = (0, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # You'll need to delete the return statement in the next line\n    # Delete the return statement\n    # return result\n    div_result = 0\n    for element in test_tup1:\n        div_result = div_result * element\n    for element in test_tup2:\n        div_result = div_result * element\n    return div_result\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    num1 = test_tup1[0]\n    num2 = test_tup2[0]\n    def func(x, y):\n        '''\n        Returns the first element of the two tuples (element of the tuple) divided by the second element of the tuple.\n        '''\n        if x!= 0:\n            return x / y\n        else:\n            return 'Invalid input'\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for element in test_tup1:\n        if element in test_tup2:\n            result.append(1/test_tup2.index(element))\n        else:\n            result.append(0)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    total = 0\n    for i in test_tup1:\n        total += i\n    for j in test_tup2:\n        total += j\n    return total/len(test_tup1)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print('Division elements')\n    for i in range(0,len(test_tup1)):\n        print(i+1, test_tup1[i], test_tup2[i], test_tup1[i]/test_tup2[i], sep='\\t')\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert type(test_tup1) == tuple\n    assert type(test_tup2) == tuple\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Step 1: get the element counts\n    tup1_count = len(test_tup1)\n    tup2_count = len(test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split into two lists\n    first_part = list1[0:L]\n    second_part = list1[L:]\n    # Turn lists into tuples\n    first_part = tuple(first_part)\n    second_part = tuple(second_part)\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l = len(list1)\n    return list1[:L//2], list1[L//2:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Hint: use split and map with map\n    new_list = []\n    for i in range(0, len(list1), L):\n        new_list.append(list1[i:i+L])\n    return new_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #if the list has length less than L\n    if L < 0:\n        return []\n    # if the length of the list is greater than L\n    elif L > len(list1):\n        # if the list is even\n        if len(list1) % 2 == 0:\n            # divide the given list into two parts\n            return split_two_parts(list1, L//2)\n        else:\n            return split_two_parts(list1, (L-1)/2)\n    # if the length of the list is less than L\n    elif L == 0:\n        # return the original list\n        return list1, list1\n    # if the length of the list is greater than L\n    elif L == len(list1):\n        # return the original list\n        return list1, list1\n    # if the length of the list is odd\n    elif L % 2 == 1:\n        # return the first half\n        return split_two_parts(list1, L//2)\n    # if the length of the list is even\n    else:\n        # return the second half\n        return split_two_parts(list1, (L//2)+1)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_list = []\n    second_list = []\n    if len(list1) == 0:\n        return first_list, second_list\n    for i in range(len(list1)):\n        if L == 0:\n            break\n        elif len(list1[i]) == L:\n            first_list.append(list1[i])\n            L -= 1\n        elif len(list1[i]) > L:\n            break\n    for i in range(len(list1)):\n        if len(list1[i]) < L:\n            first_list.append(list1[i])\n            L += 1\n    return first_list, second_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_len = len(list1) // L\n    if len(list1) % L!= 0:\n        split_len += 1\n    return (list1[:split_len], list1[split_len:])\n    \ndef test_split_two_parts():\n    '''\n    A better test, however, in this function, you need to check whether the list you have received is divisible by L.\n    '''\n    L = 10\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list2 = [3, 6, 9, 12, 15]\n    list3 = split_two_parts(list1, L)\n    list4 = split_two_parts(list2, L)\n    assert len(list1) % L == 0\n    assert len(list2) % L == 0\n    assert len(list3) % L == 0\n    assert len(list4) % L == 0\n    \ndef merge_two_parts(a, b):\n    '''\n    Combine two lists as a new list.\n    '''\n    # your code here\n    merged = []\n    for i in a:\n        for j in b:\n            if i!= j:\n                merged.append(i)\n    return merged\n    \ndef test_merge_two_parts():\n    '''\n    A better test, however, in this function, you need to check whether the lists you have received are divisible by L.\n    '''\n    L = 10\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    b = [3, 6, 9, 12, 15]\n    a2 = merge_two_parts(a, b)\n    assert len(a) % L == 0\n    assert len(a2) % L == 0\n    \ndef main():\n    '''\n    A main function that prints the original list and the sorted list after converting them to a tuple.\n    '''\n    print(\"The original list is: \")\n    test_split_two_parts()\n    print(\"The sorted list is: \")\n    test_merge_two_parts()\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create two lists\n    a = []\n    b = []\n    # Create two lists\n    i = 0\n    # Iterate through the list\n    while i < len(list1):\n        # Add the list of numbers to two lists\n        a.append(list1[i])\n        i += 1\n    # Get the length of the first part\n    k = len(a)\n    # Get the length of the second part\n    l = L-k\n    # Create two lists\n    x = []\n    y = []\n    # Get the length of the first part\n    j = 0\n    # Iterate through the list\n    while j < l:\n        # Append the elements to the two lists\n        x.append(a[j])\n        j += 1\n        # Append the elements to the two lists\n        y.append(a[j])\n        j += 1\n    # Return the two lists\n    return x, y\n    "
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[0:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    splits = []\n    for x in range(len(list1)):\n        splits.append(list1[x:x+L])\n    return splits\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_in_dogs = h_age * 365\n    if h_age >= 60:\n        dogs_age = (years_in_dogs + 1)\n    else:\n        dogs_age = (years_in_dogs)\n    return dogs_age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = 0\n    for dog_age in range(1, h_age + 1):\n        age += 1\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 0\n    if h_age >= 6:\n        dog_age = h_age + 1\n    elif h_age >= 2:\n        dog_age = h_age - 1\n    else:\n        dog_age = h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_old = (h_age * 365) + (h_age * 12)\n    return(years_old)"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0 and h_age <= 2:\n        print(\"You are a dog.\")\n    elif h_age > 2 and h_age <= 6:\n        print(\"You are a dog.\")\n    elif h_age >= 6 and h_age <= 12:\n        print(\"You are a dog.\")\n    else:\n        print(\"You are NOT a dog.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years_old = h_age * 365\n    if h_age > 60:\n        dogs_in_years = h_age / 60\n        dogs_in_years_1 = dogs_in_years * 1.6\n        dogs_in_years_2 = dogs_in_years * 1.9\n        dogs_in_years_3 = dogs_in_years * 2.2\n        dogs_in_years_4 = dogs_in_years * 2.7\n        dogs_in_years_5 = dogs_in_years * 3\n        dogs_in_years_6 = dogs_in_years * 4.5\n        dogs_in_years_7 = dogs_in_years * 5.4\n        dogs_in_years_8 = dogs_in_years * 6.7\n        dogs_in_years_9 = dogs_in_years * 7.3\n        dogs_in_years_10 = dogs_in_years * 8.2\n        dogs_in_years_11 = dogs_in_years * 9.5\n        dogs_in_years_12 = dogs_in_years * 10.4\n        dogs_in_years_13 = dogs_in_years * 11.8\n        dogs_in_years_14 = dogs_in_years * 12.8\n        dogs_in_years_15 = dogs_in_years * 13.5\n        dogs_in_years_16 = dogs_in_years * 14.7\n        dogs_in_years_17 = dogs_in_years * 15.3\n        dogs_in_years_18 = dogs_in_years * 16.1\n        dogs_in_years_19 = dogs_in_years * 17.3\n        dogs_in_years_20 = dogs_in_years * 18.0\n        dogs_in_years_21 = dogs_in_years * 19.6\n        dogs_in_years_22 = dogs_in_years * 20.4\n        dogs_in_years_23 = dogs_in_years * 21.3\n        dogs_in_years_24 = dogs_in_years * 22.2\n        dogs_in_years_25 = dogs_in_years * 22.2\n        dogs_in_years_26 = dogs_in_years * 23.4\n        dogs_in_years_27 = dogs_in_years * 24.3\n        dogs_in_years_28 = dogs_in_years * 24.3\n        dogs_in_years_29 = dogs_in_years * 24.3\n        dogs_in_years_30 = dogs_in_years * 24.3\n        dogs_in_years_31 = dogs_in_years * 24.3\n        dogs_in_years_32 = dogs_in_years * 24.3\n        dogs_in_years_33 = dogs_in_years * 24.3\n        dogs_in_years_34 = dogs_in_years * 24.3\n        dogs_in_years_35 = dogs_in_years * 24.3\n        dogs_in_years_36 = dogs_in_years * 24.3\n        dogs_in_years_37 = dogs_in_years * 24.3\n        dogs_in_years_38 = dogs_in_years * 24.3\n        dogs_in_years_39 = dogs_in_years * 24.3\n        dogs_in_years_40 = dogs_in_years * 24.3\n        dogs_in_years_41 = dogs_in_years * 24.3\n        dogs_in_years_42 = dogs_in_years * 24.3\n        dogs_in_years_43 = dogs_in_years * 24.3\n        dogs_in_years_44 = dogs_in_years * 24.3\n        dogs_in_years_45 = dogs_in_years * 24.3\n        dogs_in_years_46 = dogs_in_years * 24.3\n        dogs_in_years_47 = dogs_in_years * 24.3\n        dogs_in_years_48 = dogs_in_years * 24.3\n        dogs_in_years_49 = dogs_in_years * 24.3\n        dogs_in_years_50 = dogs_in_years * 24.3\n        dogs_in_years_51 = dogs_in_years * 24.3\n        dogs_in_years_52 = dogs_in_years * 24.3\n        dogs_in_years_53 = dogs_in_years * 24.3\n        dogs_in_years_54 = dogs_in_years * 24.3\n        dogs_in_years_55 = dogs_in_years * 24.3\n        dogs_in_years_56 = dogs_in_years * 24.3\n        dogs_in_years_57 = dogs_in_years * 24.3\n        dogs_in_years_58 = dogs_in_years * 24.3\n        dogs_in_years_59 = dogs_in_years * 24.3\n        dogs_in_years_60 = dogs_in_years * 24.3\n        dogs_in_years_61 = dogs_in_years * 24.3\n        dogs_in_years_62 = dogs_in_years * 24.3\n        dogs_in_years_63 = dogs_in_years * 24.3\n        dogs_in_years_64 = dogs_in_years * 24.3\n        dogs_in_years_65 = dogs_in_years * 24.3\n        dogs_in_years_66 = dogs_in_years * 24.3\n        dogs_in_years_67 = dogs_in_years * 24.3\n        dogs_in_years_68 = dogs_in_years * 24.3\n        dogs_in_years_69 = dogs_in_years * 24.3\n        dogs_in_years_70 = dogs_in_years * 24.3\n        dogs_in_years_71 = dogs_in_years * 24.3\n        dogs_in_years_72 = dogs_in_years * 24.3\n        dogs_in_years_73 = dogs_in_years * 24.3\n        dogs_in_years_74 = dogs_in_years * 24.3\n        dogs_in_years_75 = dogs_in_years * 24.3\n        dogs_in_years_76 = dogs_in_years * 24.3\n        dogs_in_years_77 = dogs_in_years * 24.3\n        dogs_in_years_78 = dogs_in_years * 24.3\n        dogs_in_years_79 = dogs_in_years * 24.3\n        dogs_in_years_80 = dogs_in_years * 24.3\n        dogs_in_years_81 = dogs_in_years * 24.3\n        dogs_in_years_82 = dogs_in_years * 24.3\n        dogs_in_years_83 = dogs_in_years * 24.3\n        dogs_in_years_84 = dogs_in_years * 24.3\n        dogs_in_years_85 = dogs_in_years * 24.3\n        dogs_in_years_86 = dogs_in_years * 24.3\n        dogs_in_years_87 = dogs_in_years * 24.3\n        dogs_in_years_88 = dogs_in_years * 24.3\n        dogs_in_years_89 = dogs_in_years * 24.3\n        dogs_in_years_90 = dogs_in_years * 24.3\n        dogs_in_years_91 = dogs_in_years * 24.3\n        dogs_in_years_92 = dogs_in_years * 24.3\n        dogs_in_years_93 = dogs_in_years * 24.3\n        dogs_in_years_94 = dogs_in_years * 24.3\n        dogs_in_years_95 = dogs_in_years * 24.3\n        dogs_in_years_96 = dogs_in_years * 24.3\n        dogs_in_years_97 = dogs_in_years * 24.3\n        dogs_in_years_98 = dogs_in_years * 24.3\n        dogs_in_years_99 = dogs_in_years * 24.3\n        dogs_in_years_100 = dogs_in_years * 24.3\n        dogs_in_years_101 = dogs_in_years * 24.3\n        dogs_in_years_102 = dogs_in_years * 24.3\n        dogs_in_years_103 = dogs_in_years * 24.3\n        dogs_in_years_104 = dogs_in_years * 24.3\n        dogs_in_years"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    def increment(y):\n        '''\n        Increment the dog's age in dog's years by 1.\n        '''\n        return y + 1\n        \n    def decrement(y):\n        '''\n        Decrement the dog's age in dog's years by 1.\n        '''\n        return y - 1\n    \n    if h_age >= 18:\n        y = increment(h_age)\n    else:\n        y = decrement(h_age)\n    return y\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 18:\n        return \"You are old enough to vote!\"\n    elif h_age <=16:\n        return \"You are NOT old enough to vote\"\n    else:\n        return \"You are too young to vote\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    def dog_age_converter(h_age):\n        '''\n        In: h_age (int)\n        Out: dog_age (int)\n        '''\n        if h_age < 2:\n            dog_age = \"young\"\n        elif h_age < 4:\n            dog_age = \"adult\"\n        elif h_age < 6:\n            dog_age = \"old\"\n        return dog_age\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def split(S, n):\n        i = 0\n        arr = []\n        while(i < len(S)):\n            if i < n:\n                arr.append(S[i])\n                i = i + 1\n            else:\n                i = i + 1\n                arr.append(S[i])\n        return arr\n    return split(S, step)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #HINT: for the specific case that you are getting the step value of 2, there will be a single loop, each loop will end after the middle element, the last element.\n    #HINT2: Recursive implementation, so the main idea is to fill in the previous half of the list with the middle element and then then continue to the next half of the list.\n    #HINT3: We can do this by recursively slicing the previous half and reversing the rest of the list.\n    '''\n    def helper(S, i, step):\n        if i == step:\n            return S[:i]\n        else:\n            return helper(S, i + 1, step) + [S[i]] + helper(S, i + step, step)\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 1:\n        return [S]\n    if step == len(S):\n        return []\n    if step == 2:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    if step == 3:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 0]\n    if step == 4:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 1]\n    if step == 5:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 2]\n    if step == 6:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 3]\n    if step == 7:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 4]\n    if step == 8:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 5]\n    if step == 9:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 6]\n    if step == 10:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 7]\n    if step == 11:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 8]\n    if step == 12:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 9]\n    if step == 13:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 10]\n    if step == 14:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 11]\n    if step == 15:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 12]\n    if step == 16:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 13]\n    if step == 17:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 14]\n    if step == 18:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 15]\n    if step == 19:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 16]\n    if step == 20:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 17]\n    if step == 21:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 18]\n    if step == 22:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 19]\n    if step == 23:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 20]\n    if step == 24:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 21]\n    if step == 25:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 22]\n    if step == 26:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 23]\n    if step == 27:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 24]\n    if step == 28:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 25]\n    if step == 29:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 26]\n    if step == 30:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 27]\n    if step == 31:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 28]\n    if step == 32:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 29]\n    if step == 33:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 30]\n    if step == 34:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 31]\n    if step == 35:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 32]\n    if step == 36:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 33]\n    if step == 37:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 34]\n    if step == 38:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 35]\n    if step == 39:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 36]\n    if step == 40:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 37]\n    if step == 41:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 38]\n    if step == 42:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 39]\n    if step == 43:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 40]\n    if step == 44:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 41]\n    if step == 45:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 42]\n    if step == 46:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 43]\n    if step == 47:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 44]\n    if step == 48:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 45]\n    if step == 49:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 46]\n    if step == 50:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 47]\n    if step == 51:\n        return [S[i:i+step] for i in range(0, len(S), step) if i % step == 48]\n    if step == 52:\n        return [S[i:i+step] for i in range(0, len(S)"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    N = len(S)\n    ret = [[] for i in range(N // step + 1)]\n    for i in range(N // step):\n        ret[i] = S[i*step : (i+1)*step]\n    return ret\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [list(S[i:i+step]) for i in range(0, len(S), step)]\n    # return [list(S[i:i+step]) for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i : i + step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lists = []\n    for i in range(0, len(S), step):\n        lists.append(S[i:i+step])\n    return lists\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    lists = list(S)\n    for i in range(len(lists)):\n        lists[i] = lists[i][step-1::step]\n    return lists\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) <= step:\n        return [[S]]\n    else:\n        return [[S[i:i+step]] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef beziercurve_cube(b):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    b = float(b)\n    x = b**2\n    y = 2*b*(b-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef cubiccurve_cube(c):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    c = float(c)\n    x = c**2\n    y = 2*c*(c-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef rectangle_cube(r):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    r = float(r)\n    x = r**2\n    y = 2*r*(r-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef trapezoid_cube(t):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    t = float(t)\n    x = t**2\n    y = 2*t*(t-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef arc_trapezoid_cube(a):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    a = float(a)\n    x = a**2\n    y = 2*a*(a-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_cube(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef equilateral_triangle_cube(t):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    t = float(t)\n    x = t**2\n    y = 2*t*(t-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef cube_of_chiquiri_box(c):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    c = float(c)\n    x = c**2\n    y = 2*c*(c-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef triangle_cube_box(t):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    t = float(t)\n    x = t**2\n    y = 2*t*(t-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_cube_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    '''\n    Write a function to find the enclosed surface area of a cube given its side length.\n    '''\n    l = float(l)\n    x = l**2\n    y = 2*l*(l-x)\n    z = x*x*x\n    \n    return 2*math.pi*x*x*y\n    \ndef parallelogram_box(l):\n    ''"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    import math\n    import numpy as np\n    from scipy.linalg import solve\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l1 = l/2\n    l2 = l/2\n    l3 = l/2\n    l4 = l/2\n    l5 = l/2\n    l6 = l/2\n    l7 = l/2\n    l8 = l/2\n    l9 = l/2\n    l10 = l/2\n    l11 = l/2\n    l12 = l/2\n    l13 = l/2\n    l14 = l/2\n    l15 = l/2\n    l16 = l/2\n    l17 = l/2\n    l18 = l/2\n    l19 = l/2\n    l20 = l/2\n    l21 = l/2\n    l22 = l/2\n    l23 = l/2\n    l24 = l/2\n    l25 = l/2\n    l26 = l/2\n    l27 = l/2\n    l28 = l/2\n    l29 = l/2\n    l30 = l/2\n    l31 = l/2\n    l32 = l/2\n    l33 = l/2\n    l34 = l/2\n    l35 = l/2\n    l36 = l/2\n    l37 = l/2\n    l38 = l/2\n    l39 = l/2\n    l40 = l/2\n    l41 = l/2\n    l42 = l/2\n    l43 = l/2\n    l44 = l/2\n    l45 = l/2\n    l46 = l/2\n    l47 = l/2\n    l48 = l/2\n    l49 = l/2\n    l50 = l/2\n    l51 = l/2\n    l52 = l/2\n    l53 = l/2\n    l54 = l/2\n    l55 = l/2\n    l56 = l/2\n    l57 = l/2\n    l58 = l/2\n    l59 = l/2\n    l60 = l/2\n    l61 = l/2\n    l62 = l/2\n    l63 = l/2\n    l64 = l/2\n    l65 = l/2\n    l66 = l/2\n    l67 = l/2\n    l68 = l/2\n    l69 = l/2\n    l70 = l/2\n    l71 = l/2\n    l72 = l/2\n    l73 = l/2\n    l74 = l/2\n    l75 = l/2\n    l76 = l/2\n    l77 = l/2\n    l78 = l/2\n    l79 = l/2\n    l80 = l/2\n    l81 = l/2\n    l82 = l/2\n    l83 = l/2\n    l84 = l/2\n    l85 = l/2\n    l86 = l/2\n    l87 = l/2\n    l88 = l/2\n    l89 = l/2\n    l90 = l/2\n    l91 = l/2\n    l92 = l/2\n    l93 = l/2\n    l94 = l/2\n    l95 = l/2\n    l96 = l/2\n    l97 = l/2\n    l98 = l/2\n    l99 = l/2\n    l100 = l/2\n    l101 = l/2\n    l102 = l/2\n    l103 = l/2\n    l104 = l/2\n    l105 = l/2\n    l106 = l/2\n    l107 = l/2\n    l108 = l/2\n    l109 = l/2\n    l110 = l/2\n    l111 = l/2\n    l112 = l/2\n    l113 = l/2\n    l114 = l/2\n    l115 = l/2\n    l116 = l/2\n    l117 = l/2\n    l118 = l/2\n    l119 = l/2\n    l120 = l/2\n    l121 = l/2\n    l122 = l/2\n    l123 = l/2\n    l124 = l/2\n    l125 = l/2\n    l126 = l/2\n    l127 = l/2\n    l128 = l/2\n    l129 = l/2\n    l130 = l/2\n    l131 = l/2\n    l132 = l/2\n    l133 = l/2\n    l134 = l/2\n    l135 = l/2\n    l136 = l/2\n    l137 = l/2\n    l138 = l/2\n    l139 = l/2\n    l140 = l/2\n    l141 = l/2\n    l142 = l/2\n    l143 = l/2\n    l144 = l/2\n    l145 = l/2\n    l146 = l/2\n    l147 = l/2\n    l148 = l/2\n    l149 = l/2\n    l150 = l/2\n    l151 = l/2\n    l152 = l/2\n    l153 = l/2\n    l154 = l/2\n    l155 = l/2\n    l156 = l/2\n    l157 = l/2\n    l158 = l/2\n    l159 = l/2\n    l160 = l/2\n    l161 = l/2\n    l162 = l/2\n    l163 = l/2\n    l164 = l/2\n    l165 = l/2\n    l166 = l/2\n    l167 = l/2\n    l168 = l/2\n    l169 = l/2\n    l170 = l/2\n    l171 = l/2\n    l172 = l/2\n    l173 = l/2\n    l174 = l/2\n    l175 = l/2\n    l176 = l/2\n    l177 = l/2\n    l178 = l/2\n    l179 = l/2\n    l180 = l/2\n    l181 = l/2\n    l182 = l/2\n    l183 = l/2\n    l184 = l/2\n    l185 = l/2\n    l186 = l/2\n    l187 = l/2\n    l188 = l/2\n    l189 = l/2\n    l190 = l/2\n    l191 = l/2\n    l192 = l/2\n    l193 = l/2\n    l194 = l/2\n    l195 = l/2\n    l196 = l/2\n    l197 = l/2\n    l198 = l/2\n    l199 = l/2\n    l200 = l/2\n    l201 = l/2\n    l202 = l/2\n    l203 = l/2\n    l204 = l/2\n    l205 = l/2\n    l206 = l/2\n    l207 = l/2\n    l208 = l/2\n    l209 = l/2\n    l210 = l/2\n    l211 = l/2\n    l212 = l/2\n    l213 = l/2\n    l214 = l/2\n    l215 = l/2\n    l216 = l/2\n    l217 = l/2\n    l218 = l/2\n    l219 = l/2\n    l220 = l/2\n    l221 = l/2\n    l222 = l/2\n    l223 = l/2\n    l224 = l/2\n    l225 = l/2\n    l226 = l/2\n    l227 = l/2\n    l228 = l/2\n    l229 = l/2\n    l230 = l/2\n    l231 = l/2\n    l232 = l/2\n    l233 = l/2\n    l234 = l/2\n    l235 = l/2\n    l236 = l/2\n    l237 = l/2\n    l238 = l/2\n    l239 = l/2\n    l240 = l/2\n    l241 = l/2\n    l242 = l/2\n    l243 = l/2\n    l244 = l/2\n    l245 = l/2\n    l246 = l/2\n    l247 = l/2\n    l248 = l/2\n    l249 = l/2\n    l250 = l/2\n    l251 = l/2\n    "
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l*(l+1)/2)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from skimage.draw import rectangle\n    from skimage.filters import gabor\n    from skimage.transform import hough_circle, hough_circle_peaks\n    from skimage.filters import sobel, laplacian\n    from skimage.segmentation import clear_border\n    from skimage.util import img_as_float\n    from skimage.feature import blob_dog, blob_log, blob_doh, blob_sph\n    import cv2\n    from scipy import ndimage\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    if l > 1:\n        raise Exception('The side of a cube can not be greater than 1!')\n    s = (3*(l**2)-1)\n    return s\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # The main idea of this function is to calculate the lateral surface area of a cube\n    # from the two sides.\n    # The function will calculate the areas for all three sides of a cube\n    # and return the calculated area.\n    # For example, given side length: 1.5, 2.0 and 3.5,\n    # the function will calculate the surface area for the third side:\n    # 1.5 * 2.0 * 3.5 =  4.0\n    \n    # This function will return the calculated area for the third side\n    # from the two sides.\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = sqrt(l**2)\n    phi = math.acos(l**0.5)\n    phi = 180 - phi\n    phi = 360 - phi\n    phi = 90 - phi\n    phi = phi - 90\n    phi = 180 + phi\n    phi = 180 - phi\n    s = math.sin(phi)\n    c = math.cos(phi)\n    b = l*c\n    k = 2*b*(s**2)\n    return k\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import matplotlib.tri as mtri\n    from matplotlib.patches import Circle\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    area = (2 * (l**2))\n    return area\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n**2\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    import math\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum+=i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Declare a variable sum.\n    sum = 0\n    # Start counting from 0.\n    for i in range(1, n, 2):\n        # Use the value of i to determine the sum of squares of the values of i + 2, etc.\n        sum += i * i\n    # Return the sum.\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i < n:\n        j = i*i\n        sum += j\n        i += 1\n    return sum\n    \ndef odd_number(num):\n    '''\n    Return the sum of the odd numbers of the input number.\n    '''\n    sum = 0\n    i = 1\n    while i <= num:\n        j = i*i\n        if j % 2!= 0:\n            sum += j\n        i += 1\n    return sum\n    \ndef fibonacci(n):\n    '''\n    Return the nth term of the Fibonacci sequence, starting with 1.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef lucky_number(n):\n    '''\n    Return the first n natural numbers that are a sum of 0 and 1, not exceeding their product.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += fibonacci(i)\n        i += 1\n    if sum % 1 == 0:\n        return True\n    else:\n        return False\n    \ndef square_root(n):\n    '''\n    Return the square root of the input number.\n    '''\n    if n < 0:\n        print('Please enter a positive number.')\n        return None\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (square_root(n-1) + square_root(n-2)) / 2\n        \ndef sum_squares(num):\n    '''\n    Return the sum of all the squares of the input numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= num:\n        j = i*i\n        sum += j\n        i += 1\n    return sum\n    \ndef is_prime(num):\n    '''\n    Return True if the input number is a prime number and False otherwise.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(num))+1, 6):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n    return True\n    \ndef find_prime_list(num):\n    '''\n    Return a list of all numbers in the range 2 to num that are prime numbers.\n    '''\n    num_list = []\n    for i in range(2, num+1):\n        if is_prime(i):\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #Write your code here\n    if n<=1:\n        return 0\n    else:\n        return n**2\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return (n ** 2)\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n,2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = int(n)\n    if n % 2 == 1: \n        return int(n/2)\n    else:\n        return int(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n+1):\n        if (i**2) % 11 == 1:\n            return i\n        elif (i**2) % 11 == 2:\n            return i\n        elif (i**2) % 11 == 3:\n            return i\n        elif (i**2) % 11 == 4:\n            return i\n        elif (i**2) % 11 == 5:\n            return i\n        elif (i**2) % 11 == 6:\n            return i\n        elif (i**2) % 11 == 7:\n            return i\n        elif (i**2) % 11 == 8:\n            return i\n        elif (i**2) % 11 == 9:\n            return i\n        elif (i**2) % 11 == 10:\n            return i\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = 2\n    i = 2\n    while i <= n:\n        if star%2 == 0:\n            star += 1\n        i += 2\n    return star\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    star_num = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 2 == 0:\n            star_num += i\n    \n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1, n):\n        if n % i == 0:\n            return i\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1 or n == 2: \n        return n\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(1,n):\n        if n % i == 0:\n            return i\n    return None\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = []\n    for n in range(1, n + 1):\n        for k in range(2, n + 1):\n            if n % k == 0:\n                break\n        else:\n            result.append(n)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    number=[]\n    for i in range(n+1):\n        if(i==1 or i==n):\n            number.append(0)\n        elif(i%2==0):\n            number.append(1)\n        else:\n            number.append(2)\n    return number\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 1:\n        return 1\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k > 127:\n        raise ValueError('k must be less than 127')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k.upper()) - 97\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= 128:\n        raise ValueError('Unsupported ascii value')\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= 128:\n        return ord(chr(k))\n    else:\n        return k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isdigit():\n        return int(k)\n    else:\n        return ord(k)-33\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return (chr(ord(k) - 65))\n    except:\n        return \"unknown character: \" + k\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_table = {\n    'a':0x00,\n    'b':0x01,\n    'c':0x02,\n    'd':0x03,\n    'e':0x04,\n    'f':0x05,\n    'g':0x06,\n    'h':0x07,\n    'i':0x08,\n    'j':0x09,\n    'k':0x0a,\n    'l':0x0b,\n    'm':0x0c,\n    'n':0x0d,\n    'o':0x0e,\n    'p':0x0f,\n    'q':0x10,\n    'r':0x11,\n    's':0x12,\n    't':0x13,\n    'u':0x14,\n    'v':0x15,\n    'w':0x16,\n    'x':0x17,\n    'y':0x18,\n    'z':0x19,\n    ' ':0x1a,\n    '$':0x1b,\n    '%':0x1c,\n    '&':0x1d,\n    '*':0x1e,\n    '(':0x1f,\n    '+':0x20,\n    ',':0x21,\n    '-':0x22,\n    '.':0x23,\n    '/':0x24,\n    '0':0x25,\n    '1':0x26,\n    '2':0x27,\n    '3':0x28,\n    '4':0x29,\n    '5':0x2a,\n    '6':0x2b,\n    '7':0x2c,\n    '8':0x2d,\n    '9':0x2e,\n    ' ':0x2f,\n    '=':0x30,\n    '+':0x31,\n    '.':0x32,\n    '\\n':0x33,\n    '$':0x34,\n    '%':0x35,\n    '&':0x36,\n    '*':0x37,\n    '(':0x38,\n    ')':0x39,\n    '^':0x3a,\n    '&':0x3b,\n    '*':0x3c,\n    '(':0x3d,\n    ')':0x3e,\n    '^':0x3f,\n    '+':0x40,\n    '-' :0x41,\n    '_':0x42,\n    '+':0x43,\n    '=' :0x44,\n    '-':0x45,\n    ' ':0x46,\n    '_':0x47,\n    ' ':0x48,\n    '\\n':0x49,\n    '$':0x4a,\n    '%':0x4b,\n    '&':0x4c,\n    '*':0x4d,\n    '(':0x4e,\n    ')':0x4f,\n    '^':0x50,\n    '&':0x51,\n    '*':0x52,\n    '(':0x53,\n    ')':0x54,\n    '^':0x55,\n    '+':0x56,\n    '=':0x57,\n    ' ':0x58,\n    '(':0x59,\n    ')':0x5a,\n    '^':0x5b,\n    '+':0x5c,\n    '=' :0x5d,\n    ' ':0x5e,\n    '(':0x5f,\n    ')':0x60,\n    '^':0x61,\n    '+':0x62,\n    '=' :0x63,\n    ' ':0x64,\n    '+':0x65,\n    '=' :0x66,\n    ' ':0x67,\n    '+':0x68,\n    '=' :0x69,\n    ' ':0x6a,\n    '+':0x6b,\n    '=' :0x6c,\n    ' ':0x6d,\n    '+':0x6e,\n    '=' :0x6f,\n    ' ':0x70,\n    '+':0x71,\n    '=' :0x72,\n    ' ':0x73,\n    '+':0x74,\n    '=' :0x75,\n    ' ':0x76,\n    '+':0x77,\n    '=' :0x78,\n    ' ':0x79,\n    '+':0x7a,\n    '=' :0x7b,\n    ' ':0x7c,\n    '+':0x7d,\n    '=' :0x7e,\n    ' ':0x7f,\n    '+':0x80,\n    '=' :0x81,\n    ' ':0x82,\n    '+':0x83,\n    '=' :0x84,\n    ' ':0x85,\n    '+':0x86,\n    '=' :0x87,\n    ' ':0x88,\n    '+':0x89,\n    '=' :0x8a,\n    ' ':0x8b,\n    '+':0x8c,\n    '=' :0x8d,\n    ' ':0x8e,\n    '+':0x8f,\n    '=' :0x90,\n    ' ':0x91,\n    '+':0x92,\n    '=' :0x93,\n    ' ':0x94,\n    '+':0x95,\n    '=' :0x96,\n    ' ':0x97,\n    '+':0x98,\n    '=' :0x99,\n    ' ':0x9a,\n    '+':0x9b,\n    '=' :0x9c,\n    ' ':0x9d,\n    '+':0x9e,\n    '=' :0x9f,\n    ' ':0xa0,\n    '+':0xa1,\n    '=' :0xa2,\n    ' ':0xa3,\n    '+':0xa4,\n    '=' :0xa5,\n    ' ':0xa6,\n    '+':0xa7,\n    '=' :0xa8,\n    ' ':0xa9,\n    '+':0xaa,\n    '=' :0xab,\n    ' ':0xac,\n    '+':0xad,\n    '=' :0xae,\n    ' ':0xaf,\n    '+':0xb0,\n    '=' :0xb1,\n    ' ':0xb2,\n    '+':0xb3,\n    '=' :0xb4,\n    ' ':0xb5,\n    '+':0xb6,\n    '=' :0xb7,\n    ' ':0xb8,\n    '+':0xb9,\n    '=' :0xba,\n    ' ':0xbb,\n    '+':0xbc,\n    '=' :0xbd,\n    ' ':0xbe,\n    '+':0xbf,\n    '=' :0xc0,\n    ' ':0xc1,\n    '+':0xc2,\n    '=' :0xc3,\n    ' ':0xc4,\n    '+':0xc5,\n    '=' :0xc6,\n    ' ':0xc7,\n    '+':0xc8,\n    '=' :0xc9,\n    ' ':0xca,\n    '+':0xcb,\n    '=' :0xcc,\n    ' ':0xcd,\n    '+':0xce,\n    '=' :0xcf,\n    ' ':0xd0,\n    '+':0xd1,\n    '=' :0xd2,\n    ' ':0xd3,\n    '+':0xd4,\n    '=' :0xd5,\n    ' ':0xd6,\n    '+':0xd7,\n    '=' :0xd8,\n    ' '"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # YOUR CODE HERE\n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k) - ord('a') + ord('0') + ord('a') - ord('A') - 1)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0,len(arr)):\n        if (arr[i] % 2 == 0):\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[0:]) - arr[:]  # sum of even numbers at even indexes\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_sum_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_sum_index += 1\n    return even_sum, even_sum_index\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    sum_even = 0\n    for i in arr:\n        if i % 2 == 0:\n            even_index = even_index + 1\n            sum_even = sum_even + i\n    print(sum_even)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            even_index=even_index+arr[i]\n    print(even_index)\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if (arr[i] % 2 == 0):\n            even_sum = even_sum + arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            sum+=arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_index = i\n            break\n    if even_index == 0:\n        print(\"even index not found\")\n        return\n    for i in range(even_index):\n        even = even + arr[i]\n    print(even)\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            even += arr[i]\n    return even\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    count = 0\n    temp = n\n    while temp > 0:\n        count = count + 1\n        temp = temp // 10\n    return count\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 5 == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        return \"Please enter a positive integer.\"\n    else:\n        return sum(int(x)**5 for x in range(1, n+1))\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0: \n        return 0 \n    elif n < 0: \n        return None\n    else: \n        l = [1]\n        for i in range(2, n + 1): \n            x = l[i//2] \n            y = (x * x)\n            l.append(y) \n        x = 0\n        for i in range(0, len(l)): \n            if x < l[i]: \n                x = l[i] \n        return x \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    for i in range(n):\n        if i % 5 == 0:\n            sum_even = sum_even + (i**4)\n    print(sum_even)\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1): \n        sum += i**5\n    print(sum) \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    n = int(n)\n    power = 0\n    result = 0\n    while n > 0:\n        result += n ** power\n        power += 1\n        n -= 1\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(0,n):\n        if i%2==0:\n            sum+=i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**5\n    return sum\n    \ndef odd_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n odd natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**5\n    return sum\n    \ndef generate_sequential_numbers(n): \n    '''\n    Generate the first n natural numbers (0 to n) using a sequence of numbers that are not even or odd.\n    '''\n    number_list=[]\n    for i in range(n,0,-1):\n        if(i%2==0):\n            number_list.append(i)\n    return number_list\n    \ndef test_even_Power_Sum(n):\n    assert(even_Power_Sum(10)==33)\n    assert(even_Power_Sum(12)==6)\n    assert(even_Power_Sum(13)==6)\n    assert(even_Power_Sum(14)==0)\n    assert(even_Power_Sum(20)==0)\n    assert(even_Power_Sum(21)==21)\n    assert(even_Power_Sum(22)==22)\n    assert(even_Power_Sum(23)==0)\n    assert(even_Power_Sum(24)==0)\n    assert(even_Power_Sum(25)==25)\n    assert(even_Power_Sum(26)==6)\n    assert(even_Power_Sum(27)==0)\n    assert(even_Power_Sum(28)==0)\n    assert(even_Power_Sum(29)==29)\n    assert(even_Power_Sum(30)==0)\n    assert(even_Power_Sum(31)==31)\n    assert(even_Power_Sum(32)==0)\n    assert(even_Power_Sum(33)==33)\n    assert(even_Power_Sum(34)==0)\n    assert(even_Power_Sum(35)==35)\n    assert(even_Power_Sum(36)==0)\n    assert(even_Power_Sum(37)==37)\n    assert(even_Power_Sum(38)==38)\n    assert(even_Power_Sum(39)==39)\n    assert(even_Power_Sum(40)==40)\n    assert(even_Power_Sum(41)==41)\n    assert(even_Power_Sum(42)==42)\n    assert(even_Power_Sum(43)==43)\n    assert(even_Power_Sum(44)==44)\n    assert(even_Power_Sum(45)==45)\n    assert(even_Power_Sum(46)==46)\n    assert(even_Power_Sum(47)==47)\n    assert(even_Power_Sum(48)==48)\n    assert(even_Power_Sum(49)==49)\n    assert(even_Power_Sum(50)==50)\n    assert(even_Power_Sum(51)==51)\n    assert(even_Power_Sum(52)==52)\n    assert(even_Power_Sum(53)==53)\n    assert(even_Power_Sum(54)==54)\n    assert(even_Power_Sum(55)==55)\n    assert(even_Power_Sum(56)==56)\n    assert(even_Power_Sum(57)==57)\n    assert(even_Power_Sum(58)==58)\n    assert(even_Power_Sum(59)==59)\n    assert(even_Power_Sum(60)==60)\n    assert(even_Power_Sum(61)==61)\n    assert(even_Power_Sum(62)==62)\n    assert(even_Power_Sum(63)==63)\n    assert(even_Power_Sum(64)==64)\n    assert(even_Power_Sum(65)==65)\n    assert(even_Power_Sum(66)==66)\n    assert(even_Power_Sum(67)==67)\n    assert(even_Power_Sum(68)==68)\n    assert(even_Power_Sum(69)==69)\n    assert(even_Power_Sum(70)==70)\n    assert(even_Power_Sum(71)==71)\n    assert(even_Power_Sum(72)==72)\n    assert(even_Power_Sum(73)==73)\n    assert(even_Power_Sum(74)==74)\n    assert(even_Power_Sum(75)==75)\n    assert(even_Power_Sum(76)==76)\n    assert(even_Power_Sum(77)==77)\n    assert(even_Power_Sum(78)==78)\n    assert(even_Power_Sum(79)==79)\n    assert(even_Power_Sum(80)==80)\n    assert(even_Power_Sum(81)==81)\n    assert(even_Power_Sum(82)==82)\n    assert(even_Power_Sum(83)==83)\n    assert(even_Power_Sum(84)==84)\n    assert(even_Power_Sum(85)==85)\n    assert(even_Power_Sum(86)==86)\n    assert(even_Power_Sum(87)==87)\n    assert(even_Power_Sum(88)==88)\n    assert(even_Power_Sum(89)==89)\n    assert(even_Power_Sum(90)==90)\n    assert(even_Power_Sum(91)==91)\n    assert(even_Power_Sum(92)==92)\n    assert(even_Power_Sum(93)==93)\n    assert(even_Power_Sum(94)==94)\n    assert(even_Power_Sum(95)==95)\n    assert(even_Power_Sum(96)==96)\n    assert(even_Power_Sum(97)==97)\n    assert(even_Power_Sum(98)==98)\n    assert(even_Power_Sum(99)==99)\n    assert(even_Power_Sum(100)==100)\n    assert(even_Power_Sum(101)==101)\n    assert(even_Power_Sum(102)==102)\n    assert(even_Power_Sum(103)==103)\n    assert(even_Power_Sum(104)==104)\n    assert(even_Power_Sum(105)==105)\n    assert(even_Power_Sum(106)==106)\n    assert(even_Power_Sum(107)==107)\n    assert(even_Power_Sum(108)==108)\n    assert(even_Power_Sum(109)==109)\n    assert(even_Power_Sum(110)==110)\n    assert(even_Power_Sum(111)==111)\n    assert(even_Power_Sum(112)==112)\n    assert(even_Power_Sum(113)==113)\n    assert(even_Power_Sum(114)==114)\n    assert(even_Power_Sum(115)==115)\n    assert(even_Power_Sum(116)==116)\n    assert(even_Power_Sum(117)==117)\n    assert(even_Power_Sum(118)==118)\n    assert(even_Power_Sum(119)==119)\n    assert(even_Power_Sum(120)==120)\n    assert(even_Power_Sum(121)==121)\n    assert(even_Power_Sum(122)==122)\n    assert(even_Power_Sum(123)==123)\n    assert(even_Power_Sum(124)==124)\n    assert(even_Power_Sum(125)==125)\n    assert(even_Power_Sum(126)==126)\n    assert(even_Power_Sum(127)==127)\n    assert(even_Power_Sum(128)==128)\n    assert(even_Power_Sum(129)==129)\n    assert(even_Power_Sum(130)==130)\n    assert(even_Power_Sum(131)==131)\n    assert(even_Power_Sum(132)==132)\n    assert(even_Power_Sum(133)==133)\n    assert(even"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n, 0, -1):\n        result += i**(5)\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # code goes here\n    rear=[]\n    for i in test_list:\n        rear.append(i[2])\n    return rear\n    # code goes here\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Remove the first element in the list\n    test_list = test_list[1:]\n    # Add the last element in the list\n    test_list.append(test_list[-1])\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for x in test_list:\n        rear.append(x[1])\n    return rear"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[0] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for tup in test_list:\n        rear.append(tup[0])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(0,len(test_list)):\n        rear_list.append(test_list[i][1])\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for elem in test_list:\n        rear_list.append(elem[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extracted_list = []\n    # We loop through each element and extract the rear element\n    for tuples in test_list:\n        rear_extracted_list.append(tuples[0])\n    return rear_extracted_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1, test_tup2 = zip(*test_tup1)\n    return tuple(test_tup1) - tuple(test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]-test_tup2[i])\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_list = test_tup1[:]\n    test_list.pop(test_tup2[1])\n    test_list.pop(test_tup2[0])\n    return test_list\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = [test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))]\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # write your code here\n    count = 0\n    for i in test_tup1:\n        if i in test_tup2[count]:\n            count+=1\n            test_tup1.remove(i)\n            test_tup2[count].remove(i)\n            test_tup2[count].append(i)\n        else:\n            count+=1\n            test_tup1.remove(i)\n            test_tup2[count].append(i)\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if test_tup1!= test_tup2:\n        raise TypeError\n    else:\n        result = []\n        for i in range(0, len(test_tup1)):\n            result.append(test_tup1[i]-test_tup2[i])\n        return result\n    \nif __name__ == \"__main__\":\n    # demonstrate use of the function\n    # test_tup1 = (1,2,3,4,5,6,7)\n    # test_tup2 = (6,7,8,9,10,11,12)\n    # result = substract_elements(test_tup1, test_tup2)\n    # print(result)\n    print(\"---\")\n    print(substract_elements(((1,2,3,4,5,6,7), (6,7,8,9,10,11,12)), ((6,7,8,9,10,11,12), (1,2,3,4,5,6,7))))\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (6,7,8,9,10,11,12)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (6,7,8,9,10,11,12)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (6,7,8,9,10,11,12)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (6,7,8,9,10,11,12)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (6,7,8,9,10,11,12)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (6,7,8,9,10,11,12)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_elements(test_tup1, test_tup2)\n    print(result)\n    print(\"---\")\n    test_tup1 = (1,2,3,4,5,6,7)\n    test_tup2 = (1,2,3,4,5,6,7)\n    result = substract_element"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    return tuple((item for item in test_tup2 if item not in test_tup1))\n    \n    #raise NotImplementedError\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coefficients = []\n    for k in range(2, math.floor(math.sqrt(n)) + 1):\n        coefficients.append(n // k)\n        n %= k\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1): \n        if (i % 2) == 0: \n            sum += (i**2)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n + 1):\n        s += math.pow(i, 2) * math.pow(2, i)\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i*(2**i))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeff = 0\n    for i in range(1, n + 1):\n        sum_even_binomial_coeff += (i**2) * (math.factorial(i))\n    return sum_even_binomial_coeff\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    CoeffSum = 0\n    sum = 1\n    for i in range(0, n + 1, 2):\n        if i % 2 == 0:\n            CoeffSum += sum\n            sum = sum + 2 * sum\n        else:\n            sum = sum + sum * (2 * sum)\n    return CoeffSum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(n):\n        if (i % 2) == 0:\n            result += math.factorial(2)\n        else:\n            result += math.factorial(i)\n    return result\ndef odd_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    result = 0\n    for i in range(n):\n        if (i % 2) == 0:\n            result += math.factorial(2)\n        else:\n            result += math.factorial(i)\n    return result\ndef is_prime(num):\n    '''\n    Write a python function that takes in a positive integer n and checks whether it is a prime number.\n    '''\n    result = True\n    if num == 1:\n        result = False\n    if num == 2:\n        result = True\n    if num > 1:\n        for i in range(2, num):\n            if (num % i == 0):\n                result = False\n    if result == True:\n        return result\n    else:\n        return result\ndef is_even(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is even.\n    '''\n    result = False\n    if n == 1:\n        result = True\n    if n == 2:\n        result = True\n    if n % 2 == 0:\n        result = True\n    return result\ndef is_odd(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is odd.\n    '''\n    result = True\n    if n == 1:\n        result = True\n    if n == 2:\n        result = False\n    if n % 2 == 1:\n        result = False\n    return result\ndef is_square(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is square.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 0:\n            result = False\n            break\n    return result\ndef is_square_difference(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is a square difference.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    return result\ndef is_perfect(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is perfect.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    return result\ndef is_prime_factor(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is a prime factor.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    return result\ndef is_divisible_by(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is divisible by any number between 1 and 7.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    return result\ndef is_approx_divisible_by(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is approx divisible by any number between 1 and 4.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    return result\ndef is_divisible_by_4(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is divisible by 4.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    return result\ndef is_not_divisible_by(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is not divisible by any number between 1 and 4.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    return result\ndef is_even_odd(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is even or odd.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    return result\ndef is_in_power_of(n, power):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is in the power of a number between 1 and n.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    for j in range(2, power):\n        if j % 2 == 0:\n            result = False\n            break\n    return result\ndef is_power_of_2(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is power of 2.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    return result\ndef is_power_of_5(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is power of 5.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    if n % 5 == 0:\n        return result\n    else:\n        return False\ndef is_power_of_6(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is power of 6.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    if n % 6 == 0:\n        return result\n    else:\n        return False\ndef is_power_of_7(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is power of 7.\n    '''\n    result = True\n    for i in range(n):\n        if i % 2 == 1:\n            result = False\n            break\n    if n % 7 == 0:\n        return result\n    else:\n        return False\ndef is_positive(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is positive.\n    '''\n    result = True\n    if n < 0:\n        result = False\n    if n == 0:\n        result = False\n    if n >= 0:\n        result = True\n    return result\ndef is_negative(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is negative.\n    '''\n    result = True\n    if n < 0:\n        result = False\n    if n == 0:\n        result = False\n    if n >= 0:\n        result = True\n    return result\ndef is_prime_list(n):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is prime list.\n    '''\n    result = True\n    for i in range(n):\n        if is_not_divisible_by(i):\n            result = False\n            break\n    return result\ndef is_number_greater_or_equal_to_num(n, num):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is greater or equal to num.\n    '''\n    result = True\n    if n < num:\n        result = False\n    if n == num:\n        result = True\n    return result\ndef is_number_greater_than_num(n, num):\n    '''\n    Write a python function that takes in a positive integer n and checks whether n is greater than num.\n    '''\n    result = True\n    i"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    x = 1\n    while x <= n:\n        coeff_sum += (x*math.factorial(x)/(math.factorial(x-1)*math.factorial(x-2)))\n        x += 2\n    return coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(2*x)+(i)\n    return (x)\n    \ndef even_binomial_Coeff_Sum_2( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_3( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_4( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(2*x)+(i)\n        z=(2*x)+(i)+(2*x)\n    return (z)\n    \ndef even_binomial_Coeff_Sum_5( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_6( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_7( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_8( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_9( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_10( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_11( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_12( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_13( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_14( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_15( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x=0\n    for i in range(0,n):\n        x=(2*x)+(i+1)\n        y=(x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)+(2*x)\n    return (y)\n    \ndef even_binomial_Coeff_Sum_16( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += math.pow(2,i)\n    return sum\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*pi*r**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*3.14*(r**3)*(h**2)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # set variables\n    pi=3.1416\n    r,h=r/2,h/2\n    #calculate the volume\n    return pi*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    a = 3.14159265358979\n    volume = (4/3)*(r*h**3)\n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the volume.\n    '''\n    a = 3.14159265358979\n    volume = (4/3)*(4*pi*r**2)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # TODO: Replace the pass statement with your code\n    print('Please enter the length and height of your cylinder: ')\n    return 0.0\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r*h*r\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4 * np.pi * r**2\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    print(f\"volume of cylinder with radius {r} and height {h} is {volume(r,h)}\")\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14 * (r ** 2) * h\n    return v\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_list=[]\n    for i in dict.keys():\n        if(dict[i]>=n):\n            dict_list.append(i)\n    return dict_list\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dic = {}\n    for key,value in dict.items():\n        if value >= n:\n            dic[key] = value\n    return dic\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    output = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            output[key] = True\n    return output\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            filtered_dict[key] = dict[key]\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {i:dict[i] for i in dict.keys() if dict[i] >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    list_n = []\n    for i in dict.values():\n        if i >= n:\n            list_n.append(i)\n    return list_n\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = []\n    for key in dict.keys():\n        if dict[key] >= n:\n            result.append(key)\n    return result\n    \ndef dict_sort(dict):\n    '''\n    Sort a dictionary by the keys.\n    '''\n    keys = sorted(dict.keys())\n    for key in keys:\n        dict[key] = list(dict[key])\n        dict[key].sort()\n    return dict\n    \ndef dict_reverse(dict):\n    '''\n    Reverse a dictionary.\n    '''\n    for key in dict.keys():\n        dict[key] = dict[key][::-1]\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict = dict.copy()\n    if n not in newDict:\n        return dict\n    else:\n        newDict.pop(n,None)\n        return dict_filter(newDict,n)\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # initialize output dictionary with zeroes\n    output = {}\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # TODO: Write your code here\n    if not test_tup:\n        return 0\n    elif test_tup[0] == test_tup[1]:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    i = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            i += 1\n            continue\n    return i\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    first_element = test_tup[0]\n    for element in test_tup[1:]:\n        if element < first_element:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return 1\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #dictionaries\n    count = {}\n    #list\n    list = list(test_tup)\n    #index\n    index = 0\n    #while loop\n    while index < len(list):\n        if list[index] not in count:\n            count[list[index]] = 0\n        count[list[index]] += 1\n        index += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for elem in test_tup:\n        if elem < test_tup[0]:\n            return(0)\n    else:\n        return(1)\n    \n    "
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # TODO: Find the number of elements that occurs before the tuple element in the given tuple.\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n        else:\n            if test_tup[i] == test_tup[i-1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Initialize the count variable\n    count = 0\n    # Loop through the tuple to find the first element\n    for index, element in enumerate(test_tup):\n        # If the element is equal to the first element\n        if element == test_tup[index+1]:\n            # Increment count\n            count += 1\n    # Return count\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] < test_tup[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a,b = 0,1\n    while n > 1:\n        n, d = divmod(n, 2)\n        a, b = b, a + b\n    return a\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0: \n        return True\n    else:\n        n = n + 1\n        while n % 2 == 0: \n            n = n / 2\n            if n == 1: \n                return True\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    assert n >= 1, 'Input a positive integer.'\n    assert n <= 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n ** (1/2))\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 0\n    while (i <= n):\n        if (n-i) % 2 == 0:\n            return i + 1\n        i += 1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    l = len(n)\n    if l <= 2:\n        return n\n    else:\n        return n[l-2]+n[l-1]+n[l-2-1]+n[l-1-1]+n[l-2-1-1]+n[l-1-1-1]+n[l-2-1-1-1]+n[l-1-1-1-1-1]+n[l-2-1-1-1-1-1-1]\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(n+1))//2"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    import math\n    def find_dec(n):\n        if n == 1:\n            return 1\n        return find_dec(n-1) + find_dec(n-2)\n    return find_dec(n)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 8\n    elif n == 5:\n        return 13\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 64\n    elif n == 8:\n        return 128\n    elif n == 9:\n        return 256\n    elif n == 10:\n        return 512\n    elif n == 11:\n        return 1024\n    elif n == 12:\n        return 2048\n    elif n == 13:\n        return 4096\n    elif n == 14:\n        return 8192\n    elif n == 15:\n        return 16384\n    elif n == 16:\n        return 32768\n    elif n == 17:\n        return 65536\n    elif n == 18:\n        return 131072\n    elif n == 19:\n        return 262144\n    elif n == 20:\n        return 524288\n    elif n == 21:\n        return 1048576\n    elif n == 22:\n        return 2097152\n    elif n == 23:\n        return 4194304\n    elif n == 24:\n        return 8388608\n    elif n == 25:\n        return 16777216\n    elif n == 26:\n        return 33554432\n    elif n == 27:\n        return 67108864\n    elif n == 28:\n        return 134217728\n    elif n == 29:\n        return 268435456\n    elif n == 30:\n        return 536870912\n    elif n == 31:\n        return 1073741824\n    elif n == 32:\n        return -2147483648\n    elif n == 33:\n        return -9223372036854775808\n    elif n == 34:\n        return -9223372036854775807\n    elif n == 35:\n        return -1048576\n    elif n == 36:\n        return -268435456\n    elif n == 37:\n        return -1073741824\n    elif n == 38:\n        return -2147483648\n    elif n == 39:\n        return -2147483648\n    elif n == 40:\n        return -1073741824\n    elif n == 41:\n        return -1073741824\n    elif n == 42:\n        return -2147483648\n    elif n == 43:\n        return -2147483648\n    elif n == 44:\n        return -1073741824\n    elif n == 45:\n        return -1073741824\n    elif n == 46:\n        return -1073741824\n    elif n == 47:\n        return -2147483648\n    elif n == 48:\n        return -2147483648\n    elif n == 49:\n        return -2147483648\n    elif n == 50:\n        return -1073741824\n    elif n == 51:\n        return -1073741824\n    elif n == 52:\n        return -2147483648\n    elif n == 53:\n        return -2147483648\n    elif n == 54:\n        return -1073741824\n    elif n == 55:\n        return -1073741824\n    elif n == 56:\n        return -2147483648\n    elif n == 57:\n        return -2147483648\n    elif n == 58:\n        return -1073741824\n    elif n == 59:\n        return -1073741824\n    elif n == 60:\n        return -1073741824\n    elif n == 61:\n        return -1073741824\n    elif n == 62:\n        return -2147483648\n    elif n == 63:\n        return -1073741824\n    elif n == 64:\n        return -1073741824\n    elif n == 65:\n        return -2147483648\n    elif n == 66:\n        return -1073741824\n    elif n == 67:\n        return -1073741824\n    elif n == 68:\n        return -2147483648\n    elif n == 69:\n        return -2147483648\n    elif n == 70:\n        return -1073741824\n    elif n == 71:\n        return -1073741824\n    elif n == 72:\n        return -2147483648\n    elif n == 73:\n        return -2147483648\n    elif n == 74:\n        return -1073741824\n    elif n == 75:\n        return -1073741824\n    elif n == 76:\n        return -1073741824\n    elif n == 77:\n        return -2147483648\n    elif n == 78:\n        return -2147483648\n    elif n == 79:\n        return -1073741824\n    elif n == 80:\n        return -1073741824\n    elif n == 81:\n        return -1073741824\n    elif n == 82:\n        return -2147483648\n    elif n == 83:\n        return -2147483648\n    elif n == 84:\n        return -1073741824\n    elif n == 85:\n        return -2147483648\n    elif n == 86:\n        return -1073741824\n    elif n == 87:\n        return -1073741824\n    elif n == 88:\n        return -2147483648\n    elif n == 89:\n        return -2147483648\n    elif n == 90:\n        return -1073741824\n    elif n == 91:\n        return -1073741824\n    elif n == 92:\n        return -2147483648\n    elif n == 93:\n        return -2147483648\n    elif n == 94:\n        return -1073741824\n    elif n == 95:\n        return -1073741824\n    elif n == 96:\n        return -2147483648\n    elif n == 97:\n        return -2147483648\n    elif n == 98:\n        return -1073741824\n    elif n == 99:\n        return -2147483648\n    elif n == 100:\n        return -1073741824\n    elif n == 101:\n        return -1073741824\n    elif n == 102:\n        return -2147483648\n    elif n == 103:\n        return -2147483648\n    elif n == 104:\n        return -1073741824\n    elif n == 105:\n        return -2147483648\n    elif n == 106:\n        return -2147483648\n    elif n == 107:\n        return -1073741824\n    elif n == 108:\n        return -2147483648\n    elif n == 109:\n        return -2147483648\n    elif n == 110:\n        return -1073741824\n    elif n == 111:\n        return -2147483648\n    elif n == 112:\n        return -2147483648\n    elif n == 113:\n        return -2147483648\n    elif n == 114:\n        return -1073741824\n    elif n == 115:\n        return -2147483648\n    elif n == 116:\n        return -2147483648\n    elif n == 117:\n        return -1073741824\n    elif n == 118:\n        return -2147483648\n    elif n == 119:\n        return -2147483648\n    elif n == 120:\n        return -2147483648\n    elif n == 121:\n        return -1073741824\n    elif n == 122:\n        return -2147483648\n    elif n == 123:\n        return -2147483648\n    elif n == 124:\n        return -1073741824\n    elif n == 125:\n        return -2147483648\n    elif n == 126:\n        return -2147483648\n    elif n == 127:\n        return -1073741824"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    #number of times a square has been turned upside down\n    num_times_dec_side = 4\n    \n    if n == 1:\n        return 1\n    \n    if n%2 == 1:\n        return num_times_dec_side\n    \n    else:\n        return num_times_dec_side - 1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Write your code here\n    return_bool = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            return_bool = True\n    return index, return_bool\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if item < dlist[0]:\n        return None\n    elif item >= dlist[-1]:\n        return None\n    else:\n        for i in range(len(dlist)):\n            if dlist[i] == item:\n                return True, i\n        return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n        \n    return (False, -1)\n    \n    \n    \n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for index, el in enumerate(dlist):\n        if el == item:\n            return index, index\n    return False\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #Iterate through all elements in array and check if element is found\n    for i,e in enumerate(dlist):\n        if e == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Begin your code\n    for index, element in enumerate(dlist):\n        if element == item:\n            return index, element\n    return -1\n    \n    \n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    search_position = -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n    return index!= -1, index\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # if len(test_list) < 2:\n    #     return True\n    # if len(test_list) == 2:\n    #     return True if test_list[0]!= test_list[1] else False\n    # else:\n    #     for index in range(2, len(test_list)):\n    #         if test_list[index] == test_list[index - 1]:\n    #             return False\n    #     return True\n    \n    def all_unique_2(test_list):\n        '''\n        Write a python function to check if all the elements of a given list are unique or not.\n        '''\n        # if len(test_list) < 2:\n        #     return True\n        # for index in range(2, len(test_list)):\n        #     if test_list[index]!= test_list[index - 1]:\n        #         return False\n        # return True\n        \n        if len(test_list) == 2:\n            return True if test_list[0]!= test_list[1] else False\n        if len(test_list) == 1:\n            return True\n        else:\n            for index in range(2, len(test_list)):\n                if test_list[index]!= test_list[index - 1]:\n                    return False\n            return True\n    \n    print(all_unique_2(test_list))\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # your code goes here\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) < 2:\n        return False\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        else:\n            seen.add(element)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    for element in test_list:\n        if element in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if i in test_list:\n            return False\n        else:\n            return True\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Replace pass with your code\n    if len(test_list) < 3:\n        return False\n    else:\n        set_list = set(test_list)\n        return len(set_list) == len(set(test_list))\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Write your code here\n    for num in test_list:\n        if num in test_list:\n            return False\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    subtract = [i-j for i,j in zip(nums1,nums2)]\n    return subtract\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)< len(nums2):\n        nums1,nums2 = nums2,nums1\n    i,j = 0,0\n    while i < len(nums1):\n        nums1[i] -= nums2[j]\n        if nums1[i] < 0:\n            nums1[i] *= -1\n        i+=1\n    return nums1\ndef sum_nums(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    return sum(nums1) + sum(nums2)\n    \ndef main():\n    nums1 = [1,2,3,4,5]\n    nums2 = [1,2,3,4,5]\n    print(sub_list(nums1,nums2))\n    print(sum_nums(nums1,nums2))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    n1 = 0\n    n2 = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            n1 += 1\n        else:\n            n2 += 1\n    return n1,n2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums = nums1 + nums2\n    return nums\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # add all elements together\n    sums = []\n    for i in nums1:\n        for j in nums2:\n            sums.append(i+j)\n    return sums\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #TODO\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res_list = []\n    for x in range(len(nums1)):\n        res_list.append(nums1[x]-nums2[x])\n    return res_list\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    def sub_list1(nums1,nums2):\n        '''\n        Write a function to subtract two lists element-wise.\n        '''\n        l1 = []\n        l2 = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                l1.append(nums1[i]-nums2[j])\n        return l1\n        #return l2\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for num in range(len(nums1)):\n        sub_list.append(nums1[num]-nums2[num])\n    return sub_list\n    \n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1=list(nums1)\n    l2=list(nums2)\n    result=[]\n    for i in range(len(l1)):\n        result.append(l1[i]-l2[i])\n    return result\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    total = sum(set(str(n)))\n    if total < n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9}\n    f = n % 10\n    if f not in d.keys():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    assert type(n) == int, 'Expected a integer'\n    assert n >= 0, 'Input must be non negative'\n    assert n%10 == 0, 'Input must be evenly divisible by 10'\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def binary(n):\n        count=0\n        if n<=0:\n            return False\n        if n%2==0:\n            return False\n        for i in range(0,n+1):\n            count+=1\n            if count<=n:\n                if i==0 or i==n:\n                    return False\n                elif (n-i)%2==0:\n                    return False\n        return True\n    if n<10:\n        if n==0:\n            return False\n        if n%2==0:\n            return False\n        if n==0 and n!=1:\n            return True\n        if n==1:\n            return True\n        if n==0:\n            return False\n        if n%2==1:\n            return True\n        else:\n            return False\n    if n==10:\n        if n!=1:\n            return True\n        else:\n            return False\n    if n>10:\n        if n%2==0:\n            return False\n        if n%2==1:\n            return True\n        else:\n            return True\n        if n==0:\n            return False\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Pass the input to a dictionary and save it in an empty dictionary\n    d = dict(Counter(list(str(n))))\n    # Create a list of the digits and sort it\n    list = list(d.keys())\n    list.sort()\n    # Loop through the digits in the list\n    for i in range(len(list)):\n        # Check if the frequency of the digits in the list is less than or equal to the input\n        if d[list[i]] < n:\n            # If so then return False\n            return False\n        # Check if the frequency of the digits in the list is less than or equal to the input\n        else:\n            # If so then return True\n            return True\n    # If all digits are equal, return False\n    return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    val = 0\n    val = int(n)\n    for i in range(0, val+1):\n        digit = int(n[i])\n        if val%digit!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    x = 0\n    while n!= 0:\n        n, r = divmod(n, 10)\n        x += 1\n    for i in range(x):\n        if n == 0: \n            return False\n        else: \n            return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = str(n)\n    count = 0\n    for i in digits:\n        count += 1\n    if int(digits) <= int(n):\n        print(\"Numbers less than or equal to the given number are:\")\n        for j in digits:\n            print(int(j))\n        print(\"Number is greater than or equal to the number:\")\n        for k in digits:\n            print(k)\n    else:\n        print(\"Numbers less than or equal to the given number are:\")\n        for l in digits:\n            print(l)\n        print(\"Number is not greater than or equal to the number:\")\n        for m in digits:\n            print(m)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not isinstance(n,int):\n        raise TypeError('n must be an integer')\n    if n < 0: \n        raise ValueError('n must be >= 0')\n    elif n == 0:\n        raise ZeroDivisionError('n can\\'t be 0')\n    else: \n        pass\n    return n\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for el in list:\n        if el!= element:\n            print(\"Elements not equal\")\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if element not in i:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list==[]:\n        return True\n    else:\n        if list[0]==element:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    i = 0\n    j = len(list)-1\n    while i <= j:\n        if list[i] == element:\n            return False\n        elif element < list[i]:\n            i += 1\n        else:\n            j -= 1\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if type(list)!= list:\n        raise TypeError(\"The argument is not a list\")\n    if type(element)!= int or element < 1:\n        raise ValueError(\"The element is not an integer\")\n    for i in list:\n        if type(i)!= int or i < 1:\n            raise ValueError(\"The element is not an integer\")\n    return list == [element]\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if(list[i]!=element):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    for i in list:\n        if i == element:\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text.lower():\n        if 'b' in text.lower():\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return text.find('a')!= -1 or text.find('b')!= -1\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_in_string = re.findall(r'\\b\\w+\\b', text)\n    print(text_in_string)\n    return text_in_string == ['a','a','a']\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search('a.*b', text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.match(r'a([bc])b', text)\n    if match is None:\n        return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Regex pattern to match a string\n    pattern = r'(a){0,2}b'\n    # Match the string\n    match = re.search(pattern,text)\n    # Return the index of the match\n    return match.start()\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bc]' # a[bc] == 'b' or 'c'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"a\")\n    b = text.count(\"b\")\n    if a == b or (a == 2 and b == 2):\n        return True\n    else:\n        return False\ndef text_match_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'aa' character followed by four or five 'bb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aa\")\n    b = text.count(\"bb\")\n    if a == b or (a == 4 and b == 4):\n        return True\n    else:\n        return False\ndef text_match_four_six(text):\n    '''\n    Write a function that checks whether a string contains the 'aaa' character followed by four or five 'bbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaa\")\n    b = text.count(\"bbb\")\n    if a == b or (a == 4 and b == 4):\n        return True\n    else:\n        return False\ndef text_match_five_six(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by five or six 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 5 and b == 5):\n        return True\n    else:\n        return False\ndef text_match_four_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'aaa' character followed by four or five 'bbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaa\")\n    b = text.count(\"bbb\")\n    if a == b or (a == 6 and b == 6):\n        return True\n    else:\n        return False\ndef text_match_five_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by five or six 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 7 and b == 7):\n        return True\n    else:\n        return False\ndef text_match_six_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by six or seven 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 8 and b == 8):\n        return True\n    else:\n        return False\ndef text_match_seven_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by seven or eight 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 9 and b == 9):\n        return True\n    else:\n        return False\ndef text_match_eight_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by eight or nine 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 10 and b == 10):\n        return True\n    else:\n        return False\ndef text_match_nine_nineteen(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by nine or nineteen 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 11 and b == 11):\n        return True\n    else:\n        return False\ndef text_match_ten_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by ten or eleven 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 12 and b == 12):\n        return True\n    else:\n        return False\ndef text_match_eleven_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by eleven or twelve 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 13 and b == 13):\n        return True\n    else:\n        return False\ndef text_match_twelve_twenty(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by twelve or twenty 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 14 and b == 14):\n        return True\n    else:\n        return False\ndef text_match_twenty_twenty_three(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by twenty or twenty 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 15 and b == 15):\n        return True\n    else:\n        return False\ndef text_match_twenty_twenty_four(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by twenty or twenty 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 16 and b == 16):\n        return True\n    else:\n        return False\ndef text_match_twenty_four_five(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by twenty or twenty 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 17 and b == 17):\n        return True\n    else:\n        return False\ndef text_match_twenty_four_six(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by twenty or twenty 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 18 and b == 18):\n        return True\n    else:\n        return False\ndef text_match_four_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by four or seven 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == b or (a == 19 and b == 19):\n        return True\n    else:\n        return False\ndef text_match_five_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'aaaa' character followed by five or eight 'bbbb' characters.\n    '''\n    # check whether a character is there in the string\n    a = text.count(\"aaaa\")\n    b = text.count(\"bbbb\")\n    if a == "
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_split = text.split(' ')\n    for char in text_split:\n        if len(char) > 1:\n            if re.match(r'[A-Z]+\\s[A-Z]+', char):\n                return True\n        elif len(char) == 1:\n            if re.match(r'[A-Z]+\\s[A-Z]+', char):\n                return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    if text.count('a') == 2:\n        return True\n    elif text.count('b') == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #memo\n    #dp[i][j] stores the sum of the sum of the array from i-th index to j-th index \n    #dp[i][j] = max(dp[i][j-1], dp[i-1][j] + nums[i])\n    \n    n = len(a)\n    dp = [[0] * (k + 1) for i in range(n)]\n    \n    for i in range(n):\n        for j in range(k+1):\n            if j == 0:\n                dp[i][j] = a[i]\n            elif j == 1:\n                dp[i][j] = dp[i-1][j-1] + a[i]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + a[i]\n    return dp[-1][-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Corner case\n    if (n == 1):\n        return a[0]\n    elif (n == 2):\n        return max(a[0], a[1])\n    \n    # Initializing sum\n    sum = 0\n    \n    # Find sub array\n    for i in range(n):\n        # If sum is less than k, repeat it\n        if(sum + a[i] < k):\n            sum += a[i]\n        else:\n            # If sum is greater than k, check if sum can be done\n            # by repeating that many times.\n            # If yes, remove sum\n            if(sum > k):\n                sum -= a[i]\n            else:\n                sum = 0\n                \n    return sum\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sub_array_sum = 0\n    start = 0\n    end = 0\n    while start<=n:\n        \n        for i in range(k):\n            if start < n:\n                max_sub_array_sum += a[start]\n                start += 1\n            else:\n                break\n        if start == n:\n            break\n        \n        if end == n:\n            break\n        \n        max_sub_array_sum += a[end]\n        end += 1\n    return max_sub_array_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sub_array = [a[i] for i in range(len(a)) if i+k<len(a)]\n    max_sum = 0\n    max_sub_array_sum = 0\n    for i in range(len(sub_array)):\n        max_sub_array_sum += sub_array[i]\n    for i in range(len(sub_array)):\n        sub_array_sum = 0\n        for j in range(k):\n            sub_array_sum += sub_array[i+j]\n        if max_sub_array_sum - sub_array_sum > max_sum:\n            max_sum = max_sub_array_sum - sub_array_sum\n            max_sub_array_sum = sub_array_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = -1\n    sum_a = 0\n    for i in range(0, n):\n        sum_a += a[i]\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 0:\n        return 0\n    \n    dp_array = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if a[i-1] > a[i-1]:\n                dp_array[i][j] = dp_array[i-1][j-1]\n            else:\n                dp_array[i][j] = dp_array[i-1][j] + dp_array[i-1][j-1]\n    \n    return max(dp_array[n][k], dp_array[n][k+1])\n        "
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < k: \n        return -1\n    elif n == k: \n        return a[n-1]\n    max_sub_array_sum = -1\n    # iterate over the array\n    for i in range(n): \n        # find the sub array's maximum sum \n        sub_array_sum = sum(a[i:i+k]) \n        max_sub_array_sum = max(max_sub_array_sum, sub_array_sum) \n        # iterate over the sub array again \n        for j in range(i, n, k): \n            sub_array_sum = sum(a[j:j+k]) \n            max_sub_array_sum = max(max_sub_array_sum, sub_array_sum) \n    return max_sub_array_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the array as a list\n    m = [0] * n\n    m[0] = a[0]\n    for i in range(1, n):\n        m[i] = m[i - 1] + a[i]\n    \n    # find the index of the maximum sum \n    max_index = -1\n    for i in range(k):\n        max_sum = 0\n        for i in range(n):\n            max_sum += m[i]\n        if max_sum >= k:\n            max_sum -= k\n            max_index = i\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # find the length of the array\n    n = len(a)\n    # initialise the sub array\n    sub_array = [[0] * k for i in range(n)]\n    # fill the sub array\n    sub_array[0] = a[0]\n    for i in range(1, n):\n        for j in range(0, k):\n            sub_array[i][j] = sub_array[i - 1][j] + a[i]\n    # return maximum\n    return max(sub_array[-1])\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Your code here\n    # find max sum of sub array\n    s=0\n    for i in range(k):\n        s=s+(a[i]+a[i+k])\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            s += i ** 2\n    print(s)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(i%2==0):\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if (i % 2) == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0 \n    for i in range(1,n+1):\n        if i%2==0:\n            s = s + i\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    if n % 2 == 0:\n        sum = (n ** 2)\n        return sum\n    else:\n        sum = n ** 2\n        return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+(i*i)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Define the function\n    def square_of_even_numbers(n):\n        '''\n        Write a function that accepts a number as an argument.\n        The function should return the sum of squares of the first n even numbers.\n        '''\n        # Define the function\n        def sum_of_squares(n):\n            '''\n            The function takes in a number and returns the sum of squares of the first n even numbers.\n            '''\n            # Define the function\n            if n % 2 == 0:\n                return n ** 2\n            else:\n                return n ** 2 + (n ** 2 + 1) / 2\n        # Call the function\n        return sum_of_squares(n)\n    # Call the function\n    return square_of_even_numbers(n)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i ** 2)\n    return sum\n    \ndef cubes(n):\n    '''\n    Write a python function that takes in an integer n and returns the cube of the number.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i ** 3\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for x in range(0, n+1):\n        sum = sum + x**2\n    return sum\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max_length = 0\n    # write your logic here\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n            \n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # your code here\n    if not list1:\n        return 0\n    \n    max_length_a = []\n    for i in range(len(list1)):\n        max_length_a.append(len(list1[i]))\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    max_length = 0\n    for x in list1:\n        if len(x) > max_length:\n            max_length = len(x)\n            max_list = x\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = list()\n    max_length = list1[0][0]\n    for elem in list1:\n        if max_length < len(elem):\n            max_length = len(elem)\n    return max_length\n    # return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) <= 0:\n        return -1\n    length = []\n    length.append(list1[0])\n    length.append(len(list1[0]))\n    for i in range(1,len(list1)):\n        length.append(max(length[i-1],len(list1[i])))\n    return max(length)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(x) for x in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for sub_list in list1:\n        length += len(sub_list)\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for row in list1:\n        if len(row) > max_length:\n            max_length = len(row)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for i in range(len(list1)):\n        length += len(list1[i])\n    return length\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or k == 1:\n        return 1\n    if k == 0:\n        return 0\n    return count_no_of_ways(n-1,k) + count_no_of_ways(n-1,k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return len(list(str(2**n-1)))\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0: \n        return 1\n    if k == 0: \n        return 0\n    if (n < 2) | (k < 2): \n        return 0\n    return min(count_no_of_ways(n-1, k), \n        count_no_of_ways(n-1, k-1)) + count_no_of_ways(n-1, k) \n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < k: \n        return -1\n    if k == 0: \n        return 0 \n    if k == 1: \n        return 1 \n    ways = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]]\n    return count_ways(n, k, ways)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n == 0 or k == 0): \n        return 0\n    else: \n        return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\ndef print_fence(n, k): \n    '''\n    Print the fence using the count_no_of_ways() function.\n    '''\n    if (n == 0 or k == 0): \n        print(\"Draw\")\n    else: \n        print(\"[\",end=\"\")\n        for i in range(n, n + k): \n            print(count_no_of_ways(n, k), end=\" \") \n        print(\"]\") \n        print(\"[\",end=\"\")\n        for i in range(n, n + k): \n            print(count_no_of_ways(n - 1, k), end=\" \") \n        print(\"]\")\ndef main(): \n    '''\n    Display the fence using the count_no_of_ways() function.\n    '''\n    n = int(input())\n    k = int(input())\n    print_fence(n, k) \nif __name__==\"__main__\":\n    main() "
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or k < 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif k == 1:\n        return 1 + count_no_of_ways(n-1, 2)\n    else:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 2 or n < k:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 1 or k < 1: \n        return 0\n    # if n == 1:\n    #     return 1\n    # else:\n    #     ways = 2\n    #     for i in range(1, n):\n    #         ways += count_no_of_ways(i, k)\n    #     return ways\n    if n == 1: \n        return 1\n    else:\n        ways = 2\n        for i in range(1, n):\n            ways += count_no_of_ways(i, k)\n        ways = ways - 2\n        return ways \n    "
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base Cases\n    if n == 0 or k == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return n\n    \n    if k == 0:\n        return 1\n    \n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # get all even numbers \n    numbers = []\n    for i in range(n,m,2):\n        numbers.append(i)\n    # find the quotient\n    return round(n/2)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = 0\n    r = 0\n    if(n <= 0):\n        print(\"n must be greater than 0\")\n    else:\n        if(m == 0):\n            print(n)\n        elif(m >= n):\n            m = int(m)\n            n = n*(10**(m+1))\n            q = n\n            while(n%m!= 0):\n                n = n//m\n                q = q + 1\n            r = n\n            return q,r\n        else:\n            print(\"n must be less than 10^n\")\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m < n:\n        return find(n, m + 1)\n    elif m == n:\n        return n\n    else:\n        return find(n, m - 1)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (round(n/m,0))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # logic to find the difference between two numbers\n    if n<=0 or m<=0:\n        return 0\n    n_numerator = n%10\n    m_numerator = m%10\n    # print(n_numerator,m_numerator)\n    if m_numerator == 0:\n        return n_numerator\n    else:\n        return m_numerator\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        return n\n    if n==0:\n        return 0\n    else:\n        return n%m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    def eq(n,m):\n        return ((n+m)//2)\n    return eq if (m>=n) else eq + (m//2)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #TODO: Calculate your answer\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n > m):\n        if(n < 0):\n            return -m\n        else:\n            return n\n    elif(n < 0):\n        return -n\n    else:\n        return n\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0 or m == 1:\n        return n\n    else:\n        return find(n%m, m)\n    \n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(\"Testing otherside rightangle...\")\n    side_ratio=0.25\n    p1=0\n    p2=0\n    p3=0\n    sides=0\n    print(\"Calculating triangle sides...\")\n    for i in range(0,h):\n        if (h>=i+1):\n            p1+=h/3\n        if (h<i+1):\n            p2+=h/3\n        if (h<(i+1)):\n            p3+=h/3\n    print(\"Side 1: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p1/(2*p2)\n    print(\"Side 2: \" + str(math.sqrt(p1**2+(p3**2)+(p2**2))))\n    side_ratio=p1/(2*p3)\n    print(\"Side 3: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p2/(2*p1)\n    print(\"Side 4: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p2/(2*p2)\n    print(\"Side 5: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p3/(2*p2)\n    print(\"Side 6: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p3/(2*p3)\n    print(\"Side 7: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p1/(2*p3)\n    print(\"Side 8: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p3/(2*p2)\n    print(\"Side 9: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p2/(2*p2)\n    print(\"Side 10: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p2/(2*p3)\n    print(\"Side 11: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p3/(2*p1)\n    print(\"Side 12: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p3/(2*p2)\n    print(\"Side 13: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p2/(2*p3)\n    print(\"Side 14: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    side_ratio=p1/(2*p3)\n    print(\"Side 15: \" + str(math.sqrt(p1**2+(p2**2)+(p3**2))))\n    print(\"Calculating ratios...\")\n    print(\"Side 1: \" + str(side_ratio))\n    print(\"Side 2: \" + str(side_ratio))\n    print(\"Side 3: \" + str(side_ratio))\n    print(\"Side 4: \" + str(side_ratio))\n    print(\"Side 5: \" + str(side_ratio))\n    print(\"Side 6: \" + str(side_ratio))\n    print(\"Side 7: \" + str(side_ratio))\n    print(\"Side 8: \" + str(side_ratio))\n    print(\"Side 9: \" + str(side_ratio))\n    print(\"Side 10: \" + str(side_ratio))\n    print(\"Side 11: \" + str(side_ratio))\n    print(\"Side 12: \" + str(side_ratio))\n    print(\"Side 13: \" + str(side_ratio))\n    print(\"Side 14: \" + str(side_ratio))\n    print(\"Side 15: \" + str(side_ratio))\n    print(\"Side 16: \" + str(side_ratio))\n    print(\"Side 17: \" + str(side_ratio))\n    print(\"Side 18: \" + str(side_ratio))\n    print(\"Side 19: \" + str(side_ratio))\n    print(\"Side 20: \" + str(side_ratio))\n    print(\"Side 21: \" + str(side_ratio))\n    print(\"Side 22: \" + str(side_ratio))\n    print(\"Side 23: \" + str(side_ratio))\n    print(\"Side 24: \" + str(side_ratio))\n    print(\"Side 25: \" + str(side_ratio))\n    print(\"Side 26: \" + str(side_ratio))\n    print(\"Side 27: \" + str(side_ratio))\n    print(\"Side 28: \" + str(side_ratio))\n    print(\"Side 29: \" + str(side_ratio))\n    print(\"Side 30: \" + str(side_ratio))\n    print(\"Side 31: \" + str(side_ratio))\n    print(\"Side 32: \" + str(side_ratio))\n    print(\"Side 33: \" + str(side_ratio))\n    print(\"Side 34: \" + str(side_ratio))\n    print(\"Side 35: \" + str(side_ratio))\n    print(\"Side 36: \" + str(side_ratio))\n    print(\"Side 37: \" + str(side_ratio))\n    print(\"Side 38: \" + str(side_ratio))\n    print(\"Side 39: \" + str(side_ratio))\n    print(\"Side 40: \" + str(side_ratio))\n    print(\"Side 41: \" + str(side_ratio))\n    print(\"Side 42: \" + str(side_ratio))\n    print(\"Side 43: \" + str(side_ratio))\n    print(\"Side 44: \" + str(side_ratio))\n    print(\"Side 45: \" + str(side_ratio))\n    print(\"Side 46: \" + str(side_ratio))\n    print(\"Side 47: \" + str(side_ratio))\n    print(\"Side 48: \" + str(side_ratio))\n    print(\"Side 49: \" + str(side_ratio))\n    print(\"Side 50: \" + str(side_ratio))\n    print(\"Side 51: \" + str(side_ratio))\n    print(\"Side 52: \" + str(side_ratio))\n    print(\"Side 53: \" + str(side_ratio))\n    print(\"Side 54: \" + str(side_ratio))\n    print(\"Side 55: \" + str(side_ratio))\n    print(\"Side 56: \" + str(side_ratio))\n    print(\"Side 57: \" + str(side_ratio))\n    print(\"Side 58: \" + str(side_ratio))\n    print(\"Side 59: \" + str(side_ratio))\n    print(\"Side 60: \" + str(side_ratio))\n    print(\"Side 61: \" + str(side_ratio))\n    print(\"Side 62: \" + str(side_ratio))\n    print(\"Side 63: \" + str(side_ratio))\n    print(\"Side 64: \" + str(side_ratio))\n    print(\"Side 65: \" + str(side_ratio))\n    print(\"Side 66: \" + str(side_ratio))\n    print(\"Side 67: \" + str(side_ratio))\n    print(\"Side 68: \" + str(side_ratio))\n    print(\"Side 69: \" + str(side_ratio))\n    print(\"Side 70: \" + str(side_ratio))\n    print(\"Side 71: \" + str(side_ratio))\n    print(\"Side 72: \" + str(side_ratio))\n    print(\"Side 73: \" + str(side_ratio))\n    print(\"Side 74: \" + str(side_ratio))\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #w=720,h=1400\n    #make the formula to calculate the third side of a right angled triangle\n    x = w/2\n    y = h/2\n    #calculate the angle of the triangle\n    angle = math.atan2(y,x)\n    #use trig to calculate the third side of a right angled triangle\n    return angle\ndef otherside_bottomangle(w,h):\n    '''\n    Write a function to find the third side of a bottom angled triangle.\n    '''\n    #w=720,h=1400\n    #make the formula to calculate the third side of a bottom angled triangle\n    x = w/2\n    y = h/2\n    #calculate the angle of the triangle\n    angle = math.atan2(y,x)\n    #use trig to calculate the third side of a bottom angled triangle\n    return angle\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    #w=720,h=1400\n    #make the formula to calculate the third side of a left angled triangle\n    x = w/2\n    y = h/2\n    #calculate the angle of the triangle\n    angle = math.atan2(y,x)\n    #use trig to calculate the third side of a left angled triangle\n    return angle\ndef getSide(w,h,angle):\n    '''\n    Write a function to find the side of a triangle.\n    '''\n    #angle=60\n    #find the angle of the triangle\n    #convert to radians\n    angle = math.radians(angle)\n    #calculate the angle of the triangle\n    angle = angle*180/math.pi\n    #convert to degrees\n    angle = math.degrees(angle)\n    #calculate the side of a triangle\n    #convert to meters\n    side = ((w**2+h**2)**(1/2))/math.sin(angle)\n    return side\ndef getSides(w,h,angle):\n    '''\n    Write a function to calculate the sides of a triangle.\n    '''\n    #angle=60\n    #find the angle of the triangle\n    #convert to radians\n    angle = math.radians(angle)\n    #calculate the angle of the triangle\n    angle = angle*180/math.pi\n    #convert to degrees\n    angle = math.degrees(angle)\n    #calculate the sides of a triangle\n    #convert to meters\n    side1 = ((w**2+h**2)**(1/2))/math.sin(angle)\n    side2 = (w**2+h**2)**(1/2)\n    side3 = ((w**2+h**2)**(1/2))/math.sin(angle)\n    #calculate the side of a triangle\n    #convert to meters\n    side = side1+side2+side3\n    #convert to kilometers\n    side = side*1000\n    #convert to feet\n    side = side/12\n    #convert to meters\n    side = side*1000\n    #convert to feet\n    side = side/12\n    #convert to feet\n    return side\ndef getHead(w,h):\n    '''\n    Write a function to calculate the height of a triangle.\n    '''\n    #w=720,h=1400\n    #find the angle of the triangle\n    #convert to radians\n    angle = math.radians(120)\n    #calculate the angle of the triangle\n    angle = angle*180/math.pi\n    #convert to degrees\n    angle = math.degrees(angle)\n    #calculate the side of a triangle\n    #convert to meters\n    side1 = ((w**2+h**2)**(1/2))/math.sin(angle)\n    side2 = (w**2+h**2)**(1/2)\n    #calculate the height of a triangle\n    #convert to meters\n    height = side1+side2\n    #convert to feet\n    height = height*1000\n    #convert to feet\n    return height\ndef getHeight(w,h):\n    '''\n    Write a function to calculate the height of a triangle.\n    '''\n    #w=720,h=1400\n    #find the angle of the triangle\n    #convert to radians\n    angle = math.radians(120)\n    #calculate the angle of the triangle\n    angle = angle*180/math.pi\n    #convert to degrees\n    angle = math.degrees(angle)\n    #calculate the side of a triangle\n    #convert to meters\n    side1 = ((w**2+h**2)**(1/2))/math.sin(angle)\n    side2 = (w**2+h**2)**(1/2)\n    #calculate the height of a triangle\n    #convert to meters\n    height = side1+side2\n    #convert to feet\n    height = height*1000\n    #convert to feet\n    return height\ndef getWidth(w,h):\n    '''\n    Write a function to calculate the width of a triangle.\n    '''\n    #w=720,h=1400\n    #find the angle of the triangle\n    #convert to radians\n    angle = math.radians(60)\n    #calculate the angle of the triangle\n    angle = angle*180/math.pi\n    #convert to degrees\n    angle = math.degrees(angle)\n    #calculate the side of a triangle\n    #convert to meters\n    side1 = ((w**2+h**2)**(1/2))/math.sin(angle)\n    side2 = (w**2+h**2)**(1/2)\n    #calculate the width of a triangle\n    #convert to meters\n    width = side1+side2\n    #convert to feet\n    width = width*1000\n    #convert to feet\n    return width\ndef getWidths(w,h):\n    '''\n    Write a function to calculate the widths of a triangle.\n    '''\n    #w=720,h=1400\n    #find the angle of the triangle\n    #convert to radians\n    angle = math.radians(60)\n    #calculate the angle of the triangle\n    angle = angle*180/math.pi\n    #convert to degrees\n    angle = math.degrees(angle)\n    #calculate the side of a triangle\n    #convert to meters\n    side1 = ((w**2+h**2)**(1/2))/math.sin(angle)\n    side2 = (w**2+h**2)**(1/2)\n    #calculate the width of a triangle\n    #convert to meters\n    width1 = side1\n    width2 = side2\n    #calculate the width of a triangle\n    #convert to feet\n    width = width1+width2\n    #convert to feet\n    return width\ndef getSideLengths(w,h):\n    '''\n    Write a function to calculate the side lengths of a triangle.\n    '''\n    #w=720,h=1400\n    #find the angle of the triangle\n    #convert to radians\n    angle = math.radians(60)\n    #calculate the angle of the triangle\n    angle = angle*180/math.pi\n    #convert to degrees\n    angle = math.degrees(angle)\n    #calculate the side of a triangle\n    #convert to meters\n    side1 = ((w**2+h**2)**(1/2))/math.sin(angle)\n    side2 = (w**2+h**2)**(1/2)\n    #calculate the side of a triangle\n    #convert to meters\n    length1 = side1\n    length2 = side2\n    #calculate the side length of a triangle\n    #convert to feet\n    length = length1+length2\n    #convert to feet\n    return length\ndef getLengths(w,h):\n    '''\n    Write a function to calculate the lengths of a triangle.\n    '''\n    #w=720,h=1400\n    #find the angle of the triangle\n    #convert to radians\n    angle = mat"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2+(h**2))**0.5\n    \ndef otherside_topangle(w,h):\n    '''\n    Write a function to find the third side of a topangled triangle.\n    '''\n    return (w**2+(h**2))**0.5\n    \ndef get_side_angle(p1,p2,p3):\n    '''\n    This function finds the angle between two points.\n    \n    The angles are in radians.\n    '''\n    angle1 = math.atan2(p2[1]-p1[1], p2[0]-p1[0])\n    angle2 = math.atan2(p3[1]-p1[1], p3[0]-p1[0])\n    angle3 = math.atan2(p3[1]-p1[1], p3[0]-p1[0])\n    angle = (angle1 + angle2 + angle3) / 2\n    return angle\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle = math.atan2((w-h),math.sqrt((w-h)**2+h**2))\n    return angle\n    \n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # It checks if the coordinates are within the triangle bounding box\n    if(w >= 0 and h >= 0):\n        if(w < (h * 0.5) and h < (w * 0.5)):\n            return 0\n        elif(w > (h * 0.5) and h < (w * 0.5)):\n            return 1\n        else:\n            return 2\n    else:\n        return 3\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    m=h/2\n    a=math.sqrt(m*m+w*w)\n    return a\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    m=h/2\n    a=math.sqrt(m*m+w*w)\n    return a\ndef otherside_corner(w,h):\n    '''\n    Write a function to find the third side of a left-side triangle.\n    '''\n    m=h/2\n    a=math.sqrt(m*m+w*w)\n    return a\ndef side_left_angle(w,h):\n    '''\n    Write a function to find the left side of a right angled triangle.\n    '''\n    m=h/2\n    a=math.sqrt(m*m+w*w)\n    return a\ndef side_right_angle(w,h):\n    '''\n    Write a function to find the right side of a right angled triangle.\n    '''\n    m=h/2\n    a=math.sqrt(m*m+w*w)\n    return a\ndef side_up_angle(w,h):\n    '''\n    Write a function to find the upper side of a right angled triangle.\n    '''\n    m=h/2\n    a=math.sqrt(m*m+w*w)\n    return a\ndef side_down_angle(w,h):\n    '''\n    Write a function to find the lower side of a right angled triangle.\n    '''\n    m=h/2\n    a=math.sqrt(m*m+w*w)\n    return a\ndef perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    a=w*h\n    return a\ndef area(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    a=w*h\n    return a\ndef perimeter_and_area(w,h):\n    '''\n    Write a function to find the perimeter and the area of a triangle.\n    '''\n    a=w*h\n    per=perimeter(w,h)\n    return per,area(w,h)\ndef side_angle(w,h):\n    '''\n    Write a function to find the side angle.\n    '''\n    m=otherside_leftangle(w,h)\n    a=side_up_angle(w,h)\n    return m,a\ndef side_angle_and_area(w,h):\n    '''\n    Write a function to find the side angle and the area of a triangle.\n    '''\n    m=otherside_leftangle(w,h)\n    a=side_up_angle(w,h)\n    per=perimeter(w,h)\n    area=area(w,h)\n    return per,area,m,a\ndef side_angle_and_perimeter(w,h):\n    '''\n    Write a function to find the side angle and the perimeter of a triangle.\n    '''\n    m=otherside_leftangle(w,h)\n    a=side_up_angle(w,h)\n    per=perimeter(w,h)\n    return per,perimeter,m,a\ndef side_angle_and_area_and_perimeter(w,h):\n    '''\n    Write a function to find the side angle and the area and perimeter of a triangle.\n    '''\n    m=otherside_leftangle(w,h)\n    a=side_up_angle(w,h)\n    per=perimeter(w,h)\n    area=area(w,h)\n    return per,perimeter,area,m\ndef side_angle_and_area_and_perimeter_and_area(w,h):\n    '''\n    Write a function to find the side angle and the area and perimeter and area of a triangle.\n    '''\n    m=otherside_leftangle(w,h)\n    a=side_up_angle(w,h)\n    per=perimeter(w,h)\n    area=area(w,h)\n    return per,perimeter,perimeter,area\ndef side_angle_and_area_and_perimeter_and_area_and_perimeter(w,h):\n    '''\n    Write a function to find the side angle and the area and perimeter and area and perimeter and perimeter of a triangle.\n    '''\n    m=otherside_leftangle(w,h)\n    a=side_up_angle(w,h)\n    per=perimeter(w,h)\n    area=area(w,h)\n    area=perimeter(w,h)\n    return area,area,perimeter,perimeter\ndef area_and_perimeter(w,h):\n    '''\n    Write a function to find the area and perimeter of a triangle.\n    '''\n    a=area(w,h)\n    per=perimeter(w,h)\n    return a,per\ndef area_and_perimeter_and_area(w,h):\n    '''\n    Write a function to find the area and perimeter and area of a triangle.\n    '''\n    a=area(w,h)\n    per=perimeter(w,h)\n    return a,perimeter,a\ndef area_and_perimeter_and_perimeter(w,h):\n    '''\n    Write a function to find the area and perimeter and perimeter of a triangle.\n    '''\n    a=area(w,h)\n    per=perimeter(w,h)\n    return per,perimeter,perimeter\ndef parallelogram(w,h):\n    '''\n    Write a function to find the parallelogram.\n    '''\n    a=w*h\n    return a\ndef parallelogram_and_area(w,h):\n    '''\n    Write a function to find the parallelogram and the area of a triangle.\n    '''\n    a=w*h\n    return a\ndef parallelogram_and_perimeter(w,h):\n    '''\n    Write a function to find the parallelogram and the perimeter of a triangle.\n    '''\n    a=w*h\n    per=perimeter(w,h)\n    return per\ndef parallelogram_and_area_and_perimeter(w,h):\n    '''\n    Write a function to find the parallelogram and the area and perimeter of a triangle.\n    '''\n    a=w*h\n    per=perimeter(w,h)\n    return a,perimeter,perimeter\ndef parallelogram_and_area_and_perimeter_and_area(w,h):\n    '''\n    Write a function to find the parallelogram and the area and perimeter and area of a triangle.\n    '''\n    a=w*h\n    per=perimeter(w,h)\n    return a,perimeter,perimeter,a\ndef parallelogram_and_area_and_perimeter_and_area_and_perimeter(w,h):\n    '''\n    Write a function to find the parallelogram and the area and perimeter and perimeter and perimeter and perimeter of a triangle.\n    '''\n    a=w*h\n    per=perimeter(w,h)\n    return per,perimeter,perimeter,perimeter,a\ndef parallelogram_and_area_and_perimeter_and_area_and_perimeter_and_perimeter(w,h):\n    '''\n    Write a function to find the parallelogram and the area and perimeter and perimeter and perimeter and perimeter of a triangle.\n    '''\n    a=w*h\n    per=perimeter(w,h)\n    return a,perimeter,perimeter,perimeter,perimeter\ndef parallelogram_and_perimeter_and_perimeter(w,h):\n    '''\n    Write a function to find the parallelogram and the perimeter of a triangle.\n    '''\n    a=w*h\n    per=perimeter(w,h)\n    return per\ndef parallelogram_and_perimeter_and_area(w,h):\n    '''\n    Write a function to find the parallelogram and the area of a triangle.\n    '''\n    a=w*h\n    per=perimeter(w,h"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w-h\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    p=[]\n    for i in range(0,w):\n        for j in range(0,h):\n            if i==0 and j==0:\n                p.append(w//2)\n            if i==0 and j>0:\n                p.append(w//2-j)\n            if i>0 and j==0:\n                p.append(w//2-i)\n            if i>0 and j>0:\n                p.append(w//2-i)\n    return p\n    \ndef main():\n    '''\n    Write a function that calculates the area and perimeter of a right angled triangle.\n    '''\n    h=int(input(\"Enter the height of the triangle: \"))\n    w=int(input(\"Enter the width of the triangle: \"))\n    p=otherside_rightangle(w,h)\n    area=h*w*(len(p))\n    perimeter=2*h*w+2*len(p)\n    print(area,\"\\n\",perimeter,\"\\n\")\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x=math.sqrt(w*w+h*h)\n    return(x)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w/h > 0.8:\n        return math.tan(math.radians(90))\n    elif w/h < 0.1:\n        return math.tan(math.radians(90))*(1/math.tan(math.radians(90)))\n    else:\n        return math.tan(math.radians(90))*(1/math.tan(math.radians(90)))*w/h\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Replace this code with proper code\n    \n    \n    maximum = listval[0]\n    \n    for i in listval:\n        if i > maximum:\n            maximum = i\n    return maximum\n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Replace this code with proper code\n    \n    \n    minimum = listval[0]\n    \n    for i in listval:\n        if i < minimum:\n            minimum = i\n    return minimum\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval:\n        return max(listval)\n    else:\n        return None\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    temp_max = 0\n    for i in listval:\n        temp_max = max(i, temp_max)\n    return temp_max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = 0\n    for item in listval:\n        if item > max:\n            max = item\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Set the value to 0\n    max_val = 0\n    # Iterate over the values in the list\n    for i in listval:\n        # Check the value against the max\n        if i > max_val:\n            max_val = i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Input list\n    # Output\n    # Example\n    # Input : [1,2,4,8,16,32]\n    # Output : 32\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    newlist = []\n    for i in listval:\n        if i > newlist:\n            newlist = i\n    return newlist\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    # if the list contains only one element\n    if len(listval) == 1:\n        return listval[0]\n    \n    # take the max of all elements\n    max_val = listval[0]\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    \n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum=0\n    for i in range(1,number+1):\n        if number%i==0:\n            sum=sum+i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # YOUR CODE HERE\n    div = 0\n    for i in range(1, number):\n        if number%i == 0:\n            div+= i\n    return div\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    if number == 0:\n        return 0\n    \n    if number == 1:\n        return 1\n    \n    if number == 2:\n        return 2\n    \n    for i in range(3, int(math.sqrt(number))+1):\n        if number%i == 0:\n            return number//i\n    return number\n    \n    \ndef divisors(n):\n    '''\n    Write a function to return all the divisors of a number.\n    '''\n    \n    lst = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    i = 1\n    while i <= number:\n        if number%i == 0:\n            sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number % 2 == 0:\n        return 2\n    else:\n        return (number+2)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number==0:\n        return 0\n    elif number==1:\n        return 1\n    elif number==2:\n        return 2\n    elif number==3:\n        return 6\n    elif number==4:\n        return 24\n    elif number==5:\n        return 120\n    elif number==6:\n        return 720\n    elif number==7:\n        return 1024\n    elif number==8:\n        return 2048\n    elif number==9:\n        return 4096\n    elif number==10:\n        return 8192\n    elif number==11:\n        return 16384\n    else:\n        return None\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 1\n    for d in range(2, number + 1):\n        if number % d == 0:\n            div = div + d\n    return div\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # check if number is even or not\n    if number % 2 == 0:\n        # calculate the first and last half\n        first_half = int(number/2)\n        last_half = number - first_half\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i = 0\n    j = 0\n    inv = []\n    temp = []\n    m = len(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    invCount = 0\n    n = len(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for num in arr:\n        if num!= 0:\n            inv_count +=1\n    if inv_count == 0:\n        return 0\n    else:\n        return 1 + max(inv_count, get_Inv_Count(arr[1:inv_count]))\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    InvCount = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                InvCount = InvCount + 1\n    return InvCount\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = []\n    arr.sort()\n    for i in range(len(arr)):\n        for j in range(0, len(arr) - i - 1):\n            if arr[j] > arr[j + 1] and arr[j] > arr[j + 2]:\n                inv_count.append(arr[j])\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv=0\n    for i in range(1,len(arr)):\n        if arr[i]<arr[i-1]:\n            inv+=1\n        else:\n            break\n    return inv\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    numInversions = 0\n    for i in range(1, len(arr)): \n        if arr[i] < arr[i-1]: \n            numInversions += 1\n            if numInversions > 1: \n                arr[i], arr[i-1] = arr[i-1], arr[i]\n        else:\n            numInversions += 1\n    return numInversions\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Code here\n    Inversions = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j] < arr[i]:\n                Inversions += 1\n    return Inversions\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    if isinstance(list1, list):\n        return list1\n    else:\n        return list(flatten_list(list1[0]), flatten_list(list1[1]))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for sublist in list1:\n        if type(sublist) is list:\n            flattened.extend(flatten_list(sublist))\n        else:\n            flattened.append(sublist)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n    "
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    temp = []\n    for sublist in list1:\n        if type(sublist) is list:\n            temp.extend(flatten_list(sublist))\n        else:\n            temp.append(sublist)\n    return temp\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    elif len(list1) == 0:\n        return None\n    else:\n        flattened = []\n        for sublist in list1:\n            flattened.extend(flatten_list(sublist))\n        return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened = []\n    for sublist in list1:\n        for item in sublist:\n            flattened.append(item)\n    return flattened\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    if list1[0] == None:\n        return list1\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return [list1[0]] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if type(item) == type([]):\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = 0\n    for row in stdata:\n        res = max(res, max_aggregate(row))\n    return res\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregated_data = defaultdict(lambda: 0)\n    for key, val in stdata:\n        aggregated_data[key] += val\n    return max(aggregated_data.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_value = -1\n    max_aggregate_key = None\n    for i in range(len(stdata)):\n        if stdata[i][1] > max_aggregate_value:\n            max_aggregate_value = stdata[i][1]\n            max_aggregate_key = stdata[i][0]\n    return max_aggregate_value, max_aggregate_key\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for row in stdata:\n        temp_max_aggregate = 0\n        for i in range(len(row)):\n            temp_max_aggregate += row[i]\n        if temp_max_aggregate > max_aggregate:\n            max_aggregate = temp_max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxagg = 0\n    for i in range(len(stdata)):\n        try:\n            maxagg = max(maxagg, stdata[i][0])\n        except:\n            pass\n    return maxagg\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate=0\n    for tup in stdata:\n        if tup[1]>max_aggregate:\n            max_aggregate=tup[1]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    for i in stdata:\n        max_sum = max_sum+i[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    num_tuples = len(stdata)\n    if num_tuples == 0:\n        return 0\n    for element in stdata:\n        if element[0] > max_aggregate:\n            max_aggregate = element[0]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = sorted(stdata)\n    data_dict = {}\n    for (i, x) in enumerate(stdata):\n        data_dict[x] = i\n    return data_dict\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for x in stdata:\n        if x[1] > max_agg:\n            max_agg = x[1]\n    return max_agg\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    sum_b = 0\n    sum_m = 0\n    for i in range(1,n+1):\n        sum_b = sum_b + (i & 1) * (i & 1)\n        sum_m = sum_m + i\n    return sum_b, sum_m\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Hint: https://stackoverflow.com/questions/54377586/count-binary-sequences-of-length-2-in-python\n    # Step 1 : Calculate nth term\n    # Step 2 : compute the sum of the first n terms\n    # Step 3 : return the count of the sum of the first n terms\n    \n    if n == 1:\n        return 1\n    else:\n        return int(count_binary_seq(n-1)) + int(count_binary_seq(n-2))\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    def helper(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        return helper(n-1) + helper(n-2)\n    for i in range(2, n):\n        res += helper(i)\n    return res\nprint(count_binary_seq(32))"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    cnt_1 = 0\n    cnt_2 = 0\n    for i in range(n):\n        cnt_1 += (1 << i)\n    for i in range(n, n + 2):\n        cnt_2 += (1 << i)\n    return cnt_1 - cnt_2\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq(n): \n        '''\n        This function will count the binary sequences\n        of length 2n and return the number of pairs (0,1) and (1,0). \n        '''\n        dp = [0]*(n+1) \n        for i in range(n, 0, -1): \n            dp[i] = dp[i-1]+1 \n        return sum(dp) \n    return count_binary_seq(n) \n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    m = 10**9+7\n    MOD = 10**9+7\n    dp = [[0] * m for _ in range(n+1)]\n    dp[0][0] = 1\n    dp[0][1] = 0\n    for i in range(2, n+1):\n        dp[i][0] = (dp[i-1][0] + dp[i-1][1]) % MOD\n        dp[i][1] = (dp[i-1][0] * dp[i-1][1] + dp[i-1][1] % MOD) % MOD\n    return dp[n][0]\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base cases \n    if n==1:\n        return 1\n    elif n==0:\n        return 0\n    else:\n        # initialize variables\n        sum_of_first_n_bits = 0 \n        sum_of_last_n_bits = 0\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    return sum(bin(i)[2:] for i in range(2 * n + 1))\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    s = 0\n    a = 0\n    while a < n:\n        s = s + 2 ** a\n        a += 1\n    return s\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        bit = 0\n        for j in range(i-1):\n            bit = (bit + 1) % 2\n        count = count + bit\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        raise TypeError\n    depth = 0\n    for k in d:\n        if type(d[k]) == dict:\n            depth += dict_depth(d[k])\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # traverse the dictionary\n    d_len = len(d)\n    for i in range(0, d_len-1):\n        if(i == d_len-2):\n            print(d[i+1][0], end=\" \")\n        else:\n            print(d[i+1][0], end=\" \")\n    print(d[0][0])\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    if d == {} or (type(d)!= dict):\n        return -1\n    depth = 0\n    for key, value in d.items():\n        depth += dict_depth(value)\n    return depth\n    \ndef compare(a, b):\n    '''\n    Compare the two dictionaries.\n    '''\n    if a == b:\n        return 0\n    if type(a) == dict and type(b) == dict:\n        return 1\n    if type(a) == dict and type(b)!= dict:\n        return -1\n    if type(b) == dict and type(a)!= dict:\n        return 1\n    if type(a) == dict and type(b) == list:\n        return -1\n    if type(a) == list and type(b) == list:\n        return 1\n    if type(a)!= dict and type(b) == dict:\n        return -1\n    if type(a) == list and type(b)!= list:\n        return 1\n    if type(a)!= dict and type(b) == list:\n        return -1\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if 'None' in d.values():\n        return 0\n    else:\n        return 1 + max(dict_depth(d[k]) for k in d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for i in d:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d.keys():\n        if d[i] > depth:\n            depth = d[i]\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict: return 0\n    deep = 0\n    for k,v in d.items():\n        deep += dict_depth(v)\n    return deep\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 1\n    if type(d) == dict:\n        return 1 + max(dict_depth(d[k]) for k in d)\n    else:\n        return 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d = list(d.items())\n    for i,j in d:\n        if type(i) is dict:\n            d.remove(j)\n            depth(j)\n        elif type(i) is list:\n            depth(i)\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    total = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            total += dict_depth(v)\n        elif type(v) == dict:\n            total += 1\n    return total"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        for j in range(0,len(arr)) :\n            if (i<j) :\n                if rotations==1 :\n                    if index==0 :\n                        arr[i][j],arr[j][i]=arr[j][i],arr[i][j]\n                elif rotations==-1 :\n                    if index==(len(arr)-1) :\n                        arr[i][j],arr[j][i]=arr[j][i],arr[i][j]\n    return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (rotations == 0):\n        return arr[index]\n    elif (rotations%2 == 1) :\n        if (index+1>len(arr)-1) :\n            return arr[index]\n        else :\n            return find_Element(arr,ranges,rotations-1,index+1)\n    elif (rotations%2 == 0) :\n        if (index-1<0) :\n            return arr[index]\n        else :\n            return find_Element(arr,ranges,rotations,index-1)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[rotations*ranges + index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(rotations) > 0 :\n        rotations = rotations - 1\n    \n    for i in range(ranges[index][0],ranges[index][1]) :\n        if arr[i] == 0 :\n            return False\n        if arr[i] == 2 :\n            return True\n    return False\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    if index >= len(arr):\n        return -1\n    \n    if index < 0 or index >= len(arr):\n        return -1\n    \n    # find the index of all possible combination of elements for the rotation\n    rot_index = (index // (len(ranges) - 1)) * len(ranges) + index % (len(ranges) - 1)\n    \n    # find the index of all possible combination of elements for the rotation\n    for i in range(len(ranges) - rot_index):\n        rot_index += i + 1\n    \n    # return the final index of all possible combination of elements for the rotation\n    return rot_index - len(ranges)\n    "
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = arr[ranges[0]]\n    end = arr[ranges[1]]\n    start = start[index]\n    end = end[index]\n    r = rotations\n    return (end[0],start[1])\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i = 0\n    for el in arr :\n        if (i % len(ranges) == index) :\n            return el\n        else :\n            i += 1\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    for i in range(rotations) :\n        if len(arr) == 0 :\n            return None\n        elif arr[index] > arr[-1] :\n            index = index -1\n        elif arr[index] < arr[0] :\n            index = index + 1\n        else :\n            arr.pop(index)\n            arr.insert(index,arr[index])\n            index += 1\n    return arr\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Index should be given as a list.\n    # Element should be given as an integer.\n    # Returns the element if it is found.\n    #\n    # If it is not found, an error is returned.\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    for i in range(len(arr)) :\n        for j in range(len(arr[i])) :\n            if (i in range(rotations) or j in range(rotations)):\n                if arr[i][j]!= -1 :\n                    arr[i][j] = index\n                    return arr\n            elif (i in range(rotations) or j in range(rotations,len(arr[i]))):\n                if arr[i][j]!= -1 :\n                    arr[i][j] = index\n                    return arr\n    return arr\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile('p')\n    return p.search(words).group()\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile('p')\n    return p.search(words).group()\ndef start_withz(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'z'.\n    '''\n    z = re.compile('z')\n    return z.search(words).group()\ndef end_withz(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'z'.\n    '''\n    z = re.compile('z')\n    return z.search(words).group()\ndef start_withv(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'v'.\n    '''\n    v = re.compile('v')\n    return v.search(words).group()\ndef end_withv(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'v'.\n    '''\n    v = re.compile('v')\n    return v.search(words).group()\ndef start_witht(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 't'.\n    '''\n    t = re.compile('t')\n    return t.search(words).group()\ndef end_witht(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 't'.\n    '''\n    t = re.compile('t')\n    return t.search(words).group()\ndef start_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    n = re.compile('n')\n    return n.search(words).group()\ndef end_withn(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'n'.\n    '''\n    n = re.compile('n')\n    return n.search(words).group()\ndef start_withr(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'r'.\n    '''\n    r = re.compile('r')\n    return r.search(words).group()\ndef end_withr(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'r'.\n    '''\n    r = re.compile('r')\n    return r.search(words).group()\ndef start_withu(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'u'.\n    '''\n    u = re.compile('u')\n    return u.search(words).group()\ndef end_withu(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'u'.\n    '''\n    u = re.compile('u')\n    return u.search(words).group()\ndef start_withe(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'e'.\n    '''\n    e = re.compile('e')\n    return e.search(words).group()\ndef end_withe(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'e'.\n    '''\n    e = re.compile('e')\n    return e.search(words).group()\ndef start_withl(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'l'.\n    '''\n    l = re.compile('l')\n    return l.search(words).group()\ndef end_withl(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'l'.\n    '''\n    l = re.compile('l')\n    return l.search(words).group()\ndef start_withm(words):\n    '''\n    Write a function to return two words from a list of words starting with letter'm'.\n    '''\n    m = re.compile('m')\n    return m.search(words).group()\ndef end_withm(words):\n    '''\n    Write a function to return two words from a list of words starting with letter'm'.\n    '''\n    m = re.compile('m')\n    return m.search(words).group()\ndef start_withd(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'd'.\n    '''\n    d = re.compile('d')\n    return d.search(words).group()\ndef end_withd(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'd'.\n    '''\n    d = re.compile('d')\n    return d.search(words).group()\ndef start_withrp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'rp'.\n    '''\n    rp = re.compile('rp')\n    return rp.search(words).group()\ndef end_withrp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'rp'.\n    '''\n    rp = re.compile('rp')\n    return rp.search(words).group()\ndef start_withi(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'i'.\n    '''\n    i = re.compile('i')\n    return i.search(words).group()\ndef end_withi(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'i'.\n    '''\n    i = re.compile('i')\n    return i.search(words).group()\ndef start_withf(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'f'.\n    '''\n    f = re.compile('f')\n    return f.search(words).group()\ndef end_withf(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'f'.\n    '''\n    f = re.compile('f')\n    return f.search(words).group()\ndef start_withg(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'g'.\n    '''\n    g = re.compile('g')\n    return g.search(words).group()\ndef end_withg(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'g'.\n    '''\n    g = re.compile('g')\n    return g.search(words).group()\ndef start_withh(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'h'.\n    '''\n    h = re.compile('h')\n    return h.search(words).group()\ndef end_withh(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'h'.\n    '''\n    h = re.compile('h')\n    return h.search(words).group()\ndef start_withj(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'j'.\n    '''\n    j = re.compile('j')\n    return j.search(words).group()\ndef end_withj(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'j'.\n    '''\n    j = re.compile('j')\n    return j.search(words).group()\ndef start_withk(words):\n    '''\n    Write a function to return two words from a list of words starting with lette"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if type(words)!= list: return None\n    p_word = words[0]\n    if p_word.lower() == \"p\":\n        return words\n    return None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'p':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[-1] == 'p':\n            letter = i[:-1]\n            p = i\n    return letter, p\ndef something_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter'something'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] =='something':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef number_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'number'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'number':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef even_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'even'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'even':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef odd_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'odd'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'odd':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef dot_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'dot'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[-1] == '.':\n            letter = i[:-1]\n            p = i\n    return letter, p\ndef function_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'function'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[-1] == 'function':\n            letter = i[:-1]\n            p = i\n    return letter, p\ndef add_space_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'addspace'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'addspace':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef special_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter'special'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[-1] =='special':\n            letter = i[:-1]\n            p = i\n    return letter, p\ndef before_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'before'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'before':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef after_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'after'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'after':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef last_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'last'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'last':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef first_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'first'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'first':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef first_with_p(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'firstp'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[-1] == 'p':\n            letter = i[:-1]\n            p = i\n    return letter, p\ndef last_with_p(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'lastp'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'lastp':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef first_with_p_1(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'firstp1'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'firstp1':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef last_with_p_1(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'lastp1'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'lastp1':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef middle_with(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter'middle'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] =='middle':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef before_with_2(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'before2'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'before2':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef after_with_2(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'after2'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'after2':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef before_with_3(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'before3'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'before3':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef after_with_3(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'after3'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'after3':\n            letter = i[1:]\n            p = i\n    return letter, p\ndef after_with_4(words):\n    '''\n    Write a function to return two words from a list of words beginning with letter 'after4'.\n    '''\n    letter = ''\n    p = ''\n    for i in words:\n        if i[0] == 'after4':\n            letter = i[1:]\n            p = i"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first=words[0]\n    second=words[1]\n    if first==\"p\":\n        return [second]\n    else:\n        return [first]\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    first=words[0]\n    second=words[1]\n    if first==\"p\":\n        return [second]\n    else:\n        return [first]\ndef first_withp(words):\n    '''\n    Write a function to return a word from a list of words that starts with letter 'p'.\n    '''\n    first=words[0]\n    if first==\"p\":\n        return words[1]\n    else:\n        return words[0]\ndef main():\n    words=input().split(\",\")\n    print(end_withp(words))\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = words[0].lower()\n    for i in range(1, len(words)):\n        if words[i][0].lower() == p:\n            return words[i]\n    return ''\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    first = \"\"\n    second = \"\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0],words[1]\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    return words[-1],words[-2]\ndef end_withr(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'r'.\n    '''\n    return words[-2],words[-1]\ndef start_withr(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'r'.\n    '''\n    return words[0],words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = \"\"\n    for word in words:\n        if word[0] == \"p\":\n            p = word[1:]\n            break\n    return p\n    \ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    p = \"\"\n    for word in words:\n        if word[-1] == \"p\":\n            p = word[:-1]\n            break\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start = False\n    \n    for word in words:\n        if word[0] == 'p':\n            start = True\n            break\n        if start:\n            if word[0] == 'r':\n                return word[1:], word[2:]\n            \n    return words\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    start = False\n    \n    for word in words:\n        if word[-1] == 'p':\n            start = True\n            break\n        if start:\n            if word[-1] == 'r':\n                return word[:-1], word[-2:]\n            \n    return words\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # TODO: Write your code here\n    return words[0],words[-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return max(a[:k], key=lambda x: x)\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum = 0\n    max_sum = 0\n    if k == 0:\n        return sum\n    if index == n:\n        return sum\n    \n    if a[index] < a[index-1]:\n        sum = max_sum_increasing_subseq(a, n, index-1, k-1)\n    else:\n        sum = max_sum_increasing_subseq(a, n, index-1, k)\n        sum = sum + a[index]\n    return sum\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if a[index] < a[index + k]:\n        return max_sum_increasing_subseq(a, n - 1, index, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    n = len(a)\n    if n == 1:\n        return a[0]\n    if index + n <= k:\n        return max(a[index + n - 1] + a[index], a[index] + a[index + 1])\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Last k element to include\n    k_element = k\n    # Current subsequence\n    subseq = []\n    # Prefix\n    prefix = 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[k]\n    if a[index] > a[index + 1]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), a[index + 1] + max_sum_increasing_subseq(a, n, index, k + 1))\n    else:\n        return a[index + 1] + max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return a[0]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n - 1:\n        return a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    if index >= n:\n        return a[index]\n    if index < n and a[index] > a[index-1]:\n        return max(a[index-1], a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    return max(a[index], a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base cases\n    if k < 0:\n        return 0\n    if n == 0:\n        return 0\n    if k >= len(a):\n        return a[-1] + max(max_sum_increasing_subseq(a, n - 1, index + 1, k), max_sum_increasing_subseq(a, n - 1, index, k - 1))\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m][n]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    try:\n        colon = tuplex[n+1]\n    except IndexError:\n        raise ValueError(\"No colon.\")\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # Check type of input.\n    if not isinstance(tuplex, tuple):\n        raise TypeError('{} is not a tuple!'.format(type(tuplex)))\n    if not tuplex:\n        raise TypeError('{} is an empty tuple!'.format(type(tuplex)))\n    # Check length.\n    if len(tuplex)!= n:\n        raise ValueError('{} is not the same length as the tuple!'.format(len(tuplex)))\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    def rec(tuplex):\n        if len(tuplex) == m*n:\n            return ''.join(tuplex)\n        return rec(tuplex[1:]) + rec(tuplex[:1])\n    return rec(tuplex)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # if m, n are positive integers\n    if m >= 0 and n >= 0:\n        # if m, n are multiples of 5\n        if m % 5 == 0 and n % 5 == 0:\n            # if m, n are equal to 15 and not equal to 3\n            if (m == 15 and n!= 3) or (m == 3 and n == 15):\n                # if m, n are equal to 1 and not equal to 2\n                if (m == 1 and n!= 2) or (m == 2 and n == 1):\n                    # if m, n are equal to 3 and not equal to 5\n                    if (m == 3 and n == 3) or (m == 5 and n == 3):\n                        # if m, n are equal to 2 and not equal to 4\n                        if (m == 2 and n == 2) or (m == 4 and n == 2):\n                            return tuplex[m - 2:n - 2]\n            else:\n                # if m, n are equal to 2 and not equal to 4\n                if (m == 2 and n == 2) or (m == 4 and n == 2):\n                    # if m, n are equal to 3 and not equal to 5\n                    if (m == 3 and n == 3) or (m == 5 and n == 3):\n                        # if m, n are equal to 2 and not equal to 5\n                        if (m == 2 and n == 2) or (m == 4 and n == 2):\n                            return tuplex[m - 2:n - 2]\n        else:\n            # if m, n are equal to 1 and not equal to 2\n            if (m == 1 and n!= 2) or (m == 2 and n == 1):\n                # if m, n are equal to 3 and not equal to 5\n                if (m == 3 and n == 3) or (m == 5 and n == 3):\n                    # if m, n are equal to 2 and not equal to 5\n                    if (m == 2 and n == 2) or (m == 4 and n == 2):\n                        # if m, n are equal to 4 and not equal to 5\n                        if (m == 4 and n == 4) or (m == 5 and n == 4):\n                            return tuplex[m - 2:n - 2]\n    else:\n        # if m, n are multiples of 5\n        if m % 5 == 0 and n % 5 == 0:\n            # if m, n are equal to 15 and not equal to 3\n            if (m == 15 and n!= 3) or (m == 3 and n == 15):\n                # if m, n are equal to 1 and not equal to 2\n                if (m == 1 and n!= 2) or (m == 2 and n == 1):\n                    # if m, n are equal to 3 and not equal to 5\n                    if (m == 3 and n == 3) or (m == 5 and n == 3):\n                        # if m, n are equal to 2 and not equal to 4\n                        if (m == 2 and n == 2) or (m == 4 and n == 2):\n                            return tuplex[m - 2:n - 2]\n            else:\n                # if m, n are equal to 2 and not equal to 4\n                if (m == 2 and n == 2) or (m == 4 and n == 2):\n                    # if m, n are equal to 3 and not equal to 5\n                    if (m == 3 and n == 3) or (m == 5 and n == 3):\n                        # if m, n are equal to 2 and not equal to 5\n                        if (m == 2 and n == 2) or (m == 4 and n == 2):\n                            return tuplex[m - 2:n - 2]\n        else:\n            # if m, n are equal to 1 and not equal to 2\n            if (m == 1 and n!= 2) or (m == 2 and n == 1):\n                # if m, n are equal to 3 and not equal to 5\n                if (m == 3 and n == 3) or (m == 5 and n == 3):\n                    # if m, n are equal to 2 and not equal to 5\n                    if (m == 2 and n == 2) or (m == 4 and n == 2):\n                        # if m, n are equal to 4 and not equal to 5\n                        if (m == 4 and n == 4) or (m == 5 and n == 4):\n                            return tuplex[m - 2:n - 2]\n    # if m, n are equal to 1 and not equal to 2\n    if (m == 1 and n!= 2) or (m == 2 and n == 1):\n        # if m, n are equal to 3 and not equal to 5\n        if (m == 3 and n == 3) or (m == 5 and n == 3):\n            # if m, n are equal to 2 and not equal to 5\n            if (m == 2 and n == 2) or (m == 4 and n == 2):\n                # if m, n are equal to 4 and not equal to 5\n                if (m == 4 and n == 4) or (m == 5 and n == 4):\n                    return tuplex[m - 2:n - 2]\n    # if m, n are equal to 2 and not equal to 4\n    if (m == 2 and n == 2) or (m == 4 and n == 2):\n        # if m, n are equal to 4 and not equal to 5\n        if (m == 4 and n == 4) or (m == 5 and n == 4):\n            return tuplex[m - 2:n - 2]\n    # if m, n are equal to 1 and not equal to 5\n    if (m == 1 and n!= 5) or (m == 2 and n == 1):\n        # if m, n are equal to 3 and not equal to 5\n        if (m == 3 and n == 3) or (m == 5 and n == 3):\n            # if m, n are equal to 2 and not equal to 5\n            if (m == 2 and n == 2) or (m == 4 and n == 2):\n                # if m, n are equal to 4 and not equal to 5\n                if (m == 4 and n == 4) or (m == 5 and n == 4):\n                    return tuplex[m - 2:n - 2]\n    # if m, n are equal to 2 and not equal to 4\n    if (m == 2 and n == 2) or (m == 4 and n == 2):\n        # if m, n are equal to 4 and not equal to 5\n        if (m == 4 and n == 4) or (m == 5 and n == 4):\n            return tuplex[m - 2:n - 2]\n    # if m, n are equal to 1 and not equal to 5\n    if (m == 1 and n!= 5) or (m == 2 and n == 1):\n        # if m, n are equal to 3 and not equal to 5\n        if (m == 3 and n == 3) or (m == 5 and n == 3):\n            # if m, n are equal to 2 and not equal to 5\n            if (m == 2 and n == 2) or (m == 4 and n == 2):\n                # if m, n are equal to 4 and not equal to 5\n                if (m == 4 and n == 4) or (m == 5 and n == 4):\n                    return tuplex[m - 2:n - 2]\n    # if m, n are equal to 1 and not equal to 2\n    if (m == 1 and n!= 2) or (m == 2 and n == 1):\n        # if m, n are equal to 3 and not equal to 5\n        if (m == 3 and n == 3) or (m == 5 and n == 3):\n            # if m, n are equal to 2 and not equal to 5\n            if (m == 2 and n == 2) or (m == 4 and n == 2):\n                # if m, n are equal to 4 and not equal to 5\n                if (m == 4 and n == 4) or (m == 5 and n == 4):\n                    return tuplex[m - 2:n - 2]\n    # if m, n are equal to 1 and not equal to 3\n    if (m == 1 and n!= 3) or (m == 2 and n == 1):\n        # if m, n are equal to 3 and not equal to 5\n        if (m == 3 and n == 3) or (m == 5 and n == 3):\n            # if m, n are equal to 2 and not equal to 5\n            if (m == 2 and n == 2) or (m == 4 and n == 2):\n                # if m, n are equal to 4 and not equal to 5\n                if ("
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_colon = []\n    for tuplex_tuplex in tuplex:\n        for item in m:\n            if type(item) == tuple:\n                tuplex_colon.append(item[1])\n                tuplex_colon.append(item[2])\n    return tuple(tuplex_colon)\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuple = []\n    for t in range(len(tuplex)):\n        colon_tuple.append([])\n        for i in range(len(tuplex)):\n            colon_tuple[t].append(tuplex[i][t])\n    if m==n==0:\n        return colon_tuple\n    elif m==n==1:\n        return colon_tuple[m]\n    else:\n        return colon_tuple[m][n]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        result.append([])\n        for j in range(n):\n            result[i].append(tuplex[i][j])\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[0][:m] + ':' + tuplex[1][:n] + ':' + tuplex[2][:m] + ':' + tuplex[3][:n] + ':' + tuplex[4][:m] + ':' + tuplex[5][:n] + ':' + tuplex[6][:m] + ':' + tuplex[7][:n] + ':' + tuplex[8][:m] + ':' + tuplex[9][:n]\ndef colon_trilex(trilex,m,n):\n    '''\n    Write a function to get a colon of a triplet.\n    '''\n    return trilex[0][:m] + ':' + trilex[1][:n] + ':' + trilex[2][:m] + ':' + trilex[3][:n] + ':' + trilex[4][:m] + ':' + trilex[5][:n] + ':' + trilex[6][:m] + ':' + trilex[7][:n] + ':' + trilex[8][:m] + ':' + trilex[9][:n] + ':' + trilex[10][:m] + ':' + trilex[11][:n] + ':' + trilex[12][:m] + ':' + trilex[13][:n] + ':' + trilex[14][:m]\ndef colon_trilex_subset(trilex,m,n):\n    '''\n    Write a function to get a subset of a triplet.\n    '''\n    return trilex[0][:m] + ':' + trilex[1][:n] + ':' + trilex[2][:m] + ':' + trilex[3][:n] + ':' + trilex[4][:m] + ':' + trilex[5][:n] + ':' + trilex[6][:n] + ':' + trilex[7][:n] + ':' + trilex[8][:m] + ':' + trilex[9][:n] + ':' + trilex[10][:n] + ':' + trilex[11][:n] + ':' + trilex[12][:m] + ':' + trilex[13][:n] + ':' + trilex[14][:n]\ndef colon_trilex_subset_2(trilex,m,n):\n    '''\n    Write a function to get a subset of a triplet.\n    '''\n    return trilex[0][:m] + ':' + trilex[1][:n] + ':' + trilex[2][:m] + ':' + trilex[3][:n] + ':' + trilex[4][:m] + ':' + trilex[5][:n] + ':' + trilex[6][:n] + ':' + trilex[7][:n] + ':' + trilex[8][:m] + ':' + trilex[9][:n] + ':' + trilex[10][:m] + ':' + trilex[11][:n] + ':' + trilex[12][:n] + ':' + trilex[13][:n]\ndef colon_hexagon(hexagon,m,n):\n    '''\n    Write a function to get a hexagon of a tuple.\n    '''\n    return hexagon[0][:m] + ':' + hexagon[1][:n] + ':' + hexagon[2][:m] + ':' + hexagon[3][:n] + ':' + hexagon[4][:m] + ':' + hexagon[5][:n] + ':' + hexagon[6][:m] + ':' + hexagon[7][:n] + ':' + hexagon[8][:m] + ':' + hexagon[9][:n] + ':' + hexagon[10][:m] + ':' + hexagon[11][:n] + ':' + hexagon[12][:m] + ':' + hexagon[13][:n] + ':' + hexagon[14][:m]\ndef colon_hexagon_subset(hexagon,m,n):\n    '''\n    Write a function to get a subset of a tuple.\n    '''\n    return hexagon[0][:m] + ':' + hexagon[1][:n] + ':' + hexagon[2][:m] + ':' + hexagon[3][:n] + ':' + hexagon[4][:m] + ':' + hexagon[5][:n] + ':' + hexagon[6][:m] + ':' + hexagon[7][:n] + ':' + hexagon[8][:m] + ':' + hexagon[9][:n] + ':' + hexagon[10][:m] + ':' + hexagon[11][:n] + ':' + hexagon[12][:n] + ':' + hexagon[13][:n]\ndef colon_hexagon_subset_2(hexagon,m,n):\n    '''\n    Write a function to get a subset of a tuple.\n    '''\n    return hexagon[0][:m] + ':' + hexagon[1][:n] + ':' + hexagon[2][:m] + ':' + hexagon[3][:n] + ':' + hexagon[4][:m] + ':' + hexagon[5][:n] + ':' + hexagon[6][:m] + ':' + hexagon[7][:n] + ':' + hexagon[8][:m] + ':' + hexagon[9][:n] + ':' + hexagon[10][:m] + ':' + hexagon[11][:n] + ':' + hexagon[12][:m] + ':' + hexagon[13][:n]\ndef colon_circle(circle,m,n):\n    '''\n    Write a function to get a circle of a tuple.\n    '''\n    return circle[0][:m] + ':' + circle[1][:n] + ':' + circle[2][:m] + ':' + circle[3][:n] + ':' + circle[4][:m] + ':' + circle[5][:n] + ':' + circle[6][:m] + ':' + circle[7][:n] + ':' + circle[8][:m] + ':' + circle[9][:n] + ':' + circle[10][:m] + ':' + circle[11][:n] + ':' + circle[12][:m] + ':' + circle[13][:n] + ':' + circle[14][:m]\ndef colon_circle_subset(circle,m,n):\n    '''\n    Write a function to get a subset of a tuple.\n    '''\n    return circle[0][:m] + ':' + circle[1][:n] + ':' + circle[2][:m] + ':' + circle[3][:n] + ':' + circle[4][:m] + ':' + circle[5][:n] + ':' + circle[6][:m] + ':' + circle[7][:n] + ':' + circle[8][:m] + ':' + circle[9][:n] + ':' + circle[10][:m] + ':' + circle[11][:n] + ':' + circle[12][:m] + ':' + circle[13][:n]\ndef colon_circle_subset_2(circle,m,n):\n    '''\n    Write a function to get a subset of a tuple.\n    '''\n    return circle[0][:m] + ':' + circle[1][:n] + ':' + circle[2][:m] + ':' + circle[3][:n] + ':' + circle[4][:m] + ':' + circle[5][:n] + ':' + circle[6][:m] + ':' + circle[7][:n] + ':' + circle[8][:m] + ':' + circle[9][:n] + ':' + circle[10][:m] + ':' + circle[11][:n] + ':' + circle[12][:m] + ':' + circle[13][:n]\ndef colon_octagon(octagon,m,n):\n    '''\n    Write a function to get a octagon of a tuple"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c1=[]\n    c2=[]\n    for j in range(m+1):\n        for i in range(n+1):\n            c1.append(tuplex[j][i])\n    for j in range(m+1):\n        for i in range(n+1):\n            c2.append(tuplex[j][i]+tuplex[j][i+1])\n    return c1,c2\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res = []\n    for num in nums1:\n        if num in nums2:\n            for i in range(N):\n                if nums2[i] in nums1:\n                    nums1.remove(num)\n                    break\n        else:\n            res.append(num)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def get_factors(nums):\n        '''\n        get the factors of the given nums\n        '''\n        factors = []\n        for i in range(1, len(nums)+1):\n            if len(nums) % i == 0:\n                factors.append(i)\n        return factors\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # result = []\n    # for i in range(N):\n    #     if nums1[i] > nums2[i]:\n    #         result.append(nums1[i] * nums2[i])\n    #     else:\n    #         result.append(nums2[i] * nums1[i])\n    # return result\n    \n    result = []\n    \n    for i in range(N):\n        if nums1[i] > nums2[i]:\n            result.append(nums1[i] * nums2[i])\n        else:\n            result.append(nums2[i] * nums1[i])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # O(NlogN)\n    if len(nums1) < N:\n        return -1\n    return large_product_helper(nums1, nums2, N, 0, 0)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1, nums2, n = nums1, nums2, N\n    out = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] * nums2[j] > N:\n                out.append((nums1[i], nums2[j]))\n                break\n    return out\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #time complexity: O(n + m)\n    #space complexity: O(n)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    if len(nums2) == 1:\n        return nums1\n    res = []\n    i = 0\n    while i < len(nums1):\n        res.append(1)\n        i += 1\n    i = 0\n    while i < len(nums2):\n        res.append(nums2[i])\n        i += 1\n    nums1.sort()\n    nums2.sort()\n    for i in range(N-len(res)):\n        res.append(nums1[i] * nums2[i])\n    return res\n    \ndef Large_Product(nums, N):\n    '''\n    Write a function that finds the largest product of nums.\n    '''\n    if len(nums) == 1:\n        return 1\n    res = []\n    i = 0\n    while i < len(nums):\n        res.append(1)\n        i += 1\n    i = 0\n    while i < len(nums):\n        res[i] = nums[i] * nums[i]\n        i += 1\n    nums.sort()\n    nums.reverse()\n    res.reverse()\n    res = res[:N-1]\n    return res\n    \ndef Medium_Product(nums, N):\n    '''\n    Write a function that finds the largest product of nums.\n    '''\n    if len(nums) == 1:\n        return 1\n    res = []\n    i = 0\n    while i < len(nums):\n        res.append(1)\n        i += 1\n    i = 0\n    while i < len(nums):\n        res[i] = nums[i] * nums[i]\n        i += 1\n    nums.sort()\n    nums.reverse()\n    res.reverse()\n    res = res[:N-1]\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    factors_1 = []\n    factors_2 = []\n    for i in nums1:\n        if i % N == 0:\n            factors_1.append(i)\n    for i in nums2:\n        if i % N == 0:\n            factors_2.append(i)\n    for i in range(0, len(factors_1)):\n        if factors_1[i] > factors_2[i]:\n            factors_1[i] = factors_1[i] * N\n            factors_1.pop(i)\n    for i in range(0, len(factors_2)):\n        if factors_2[i] > factors_1[i]:\n            factors_2[i] = factors_2[i] * N\n            factors_2.pop(i)\n    \n    \n    if factors_1 == factors_2:\n        print(factors_1[-1])\n    elif len(factors_1) > len(factors_2):\n        print(factors_1[-1], factors_2[-1])\n    else:\n        print(factors_2[-1], factors_1[-1])\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Your code here\n    m = len(nums1)\n    n = len(nums2)\n    for i in range(m+n):\n        for j in range(m+n):\n            if i<j:\n                if nums1[i]<nums2[j]:\n                    nums1[i],nums2[j] = nums2[j],nums1[i]\n                else:\n                    break\n    return nums1\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    m = N\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return ((a+b)/2)\n    \ndef stdev(a,b):\n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    return ((a-b)/math.sqrt(len(a)))\n    \ndef min(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \ndef max(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef mode(a,b):\n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    return (a)\n    \ndef variance(a,b):\n    '''\n    Write a python function to find the variance of two numbers.\n    '''\n    return (b-a)/(len(a)-1)\n    \ndef skewness(a,b):\n    '''\n    Write a python function to find the skewness of two numbers.\n    '''\n    return (b-a)/(len(a)-1)\n    \ndef kurtosis(a,b):\n    '''\n    Write a python function to find the kurtosis of two numbers.\n    '''\n    return (b-a)/(len(a)-1"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a\n    if b>a:\n        max = b\n    return max\nprint(maximum(2,3))\nprint(maximum(4,6))\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    if b>a:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # find the max\n    if b==a:\n        return a\n    elif a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    if b==0:\n        return a\n    return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        a,b=b,a\n    if a==0:\n        return b\n    return a\n        \ndef sum(a,b):\n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    return a+b\n    \ndef square(a):\n    '''\n    Write a python function to find the square of a number.\n    '''\n    return a*a\n    \ndef cube(a):\n    '''\n    Write a python function to find the cube of a number.\n    '''\n    return a*a*a\n    \ndef exp(a):\n    '''\n    Write a python function to find the exponential of a number.\n    '''\n    return a*a*a\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    return n*factorial(n-1)\n    \ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    while a!=0:\n        if a%b==0:\n            return b\n        a=a//b\n    return 0\n    \ndef fib(n):\n    '''\n    Write a python function to find the fibonacci series of a number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\n        \ndef primes(n):\n    '''\n    Write a python function to find all prime numbers between 1 and n.\n    '''\n    if n==0:\n        return []\n    elif n==1:\n        return [0]\n    else:\n        all_primes = []\n        primes = []\n        for i in range(2,n):\n            if all(x%i for x in primes):\n                primes.append(i)\n        for p in primes:\n            if p not in all_primes:\n                all_primes.append(p)\n        return all_primes\n    \ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return i\n    return n\n    \ndef main():\n    print(f'The greatest common divisor of two numbers is {gcd(100,40)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,1000)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,1000)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(100,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(1000,10)}.')\n    print(f'The greatest common divisor of two numbers is {gcd(10,10)}.')\n    print(f'The greatest common divisor of two numbers is "
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    if a > b:\n        max = a\n        min = b\n    else:\n        max = b\n        min = a\n    \n    return max,min\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = []\n    for i in range(len(str1)):\n        list1.append(str1[i])\n    return tuple(list1)\n    \ndef get_sequence(str1):\n    '''\n    Write a function that converts a string into a list.\n    '''\n    list1 = []\n    for i in str1:\n        list1.append(i)\n    return list1\n    \ndef reverse_string(str1):\n    '''\n    Write a function that reverses a given string.\n    '''\n    list2 = []\n    for i in range(len(str1)//2):\n        list2.append(str1[i])\n        list2.append(str1[len(str1)-i-1])\n    return list2\n    \ndef convert_to_binary(str1):\n    '''\n    Write a function that converts a given string into a binary string.\n    '''\n    binary_string = ''\n    for i in range(len(str1)):\n        binary_string += str1[i]\n    return binary_string\n    \ndef bin_to_int(binary_string):\n    '''\n    Write a function that converts a binary string to an integer.\n    '''\n    numbers = []\n    for i in range(len(binary_string)):\n        if binary_string[i] == '0':\n            numbers.append(2)\n        if binary_string[i] == '1':\n            numbers.append(1)\n        if binary_string[i] == '2':\n            numbers.append(0)\n    return numbers\n    \ndef int_to_bin(int1):\n    '''\n    Write a function that converts an integer into a binary string.\n    '''\n    binary_string = ''\n    while int1 > 0:\n        binary_string += str(int1 % 2)\n        int1 //= 2\n    return binary_string\n    \ndef sum_of_binary_numbers(binary_string):\n    '''\n    Write a function that calculates the sum of all binary numbers in a given binary string.\n    '''\n    sum = 0\n    for i in range(len(binary_string)):\n        sum += binary_string[i]\n    return sum\n    \ndef count_of_binary_numbers(binary_string):\n    '''\n    Write a function that counts all the binary numbers in a given binary string.\n    '''\n    count = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '0':\n            count += 1\n        if binary_string[i] == '1':\n            count += 1\n        if binary_string[i] == '2':\n            count += 1\n    return count\n    \ndef sum_of_single_digit_numbers(digit):\n    '''\n    Write a function that calculates the sum of all single digit numbers in a given digit string.\n    '''\n    sum = 0\n    for i in range(len(digit)):\n        sum += int(digit[i])\n    return sum\n    \ndef count_of_single_digit_numbers(digit):\n    '''\n    Write a function that counts all the single digit numbers in a given digit string.\n    '''\n    count = 0\n    for i in range(len(digit)):\n        if digit[i] == '0':\n            count += 1\n        if digit[i] == '1':\n            count += 1\n        if digit[i] == '2':\n            count += 1\n    return count\n    \ndef get_sum(binary_string):\n    '''\n    Write a function that calculates the sum of all binary numbers in a given binary string.\n    '''\n    sum = 0\n    for i in range(len(binary_string)):\n        sum += binary_string[i]\n    return sum\n    \ndef get_count(binary_string):\n    '''\n    Write a function that counts all the binary numbers in a given binary string.\n    '''\n    count = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '0':\n            count += 1\n        if binary_string[i] == '1':\n            count += 1\n        if binary_string[i] == '2':\n            count += 1\n    return count\n    \ndef get_average(binary_string):\n    '''\n    Write a function that calculates the average of all single digit numbers in a given digit string.\n    '''\n    count = 0\n    sum = 0\n    for i in range(len(binary_string)):\n        sum += int(binary_string[i])\n        count += 1\n    sum = sum // count\n    return sum\n    \ndef test_sum_of_binary_numbers():\n    '''\n    Write a function that tests the sum of all binary numbers in a given binary string.\n    '''\n    str1 = '111'\n    print(str1)\n    assert str1 == str_to_tuple(str1)\n    assert get_sequence(str1) == ['0', '1']\n    assert reverse_string(str1) == ['1', '0']\n    assert convert_to_binary(str1) == '11100'\n    assert bin_to_int('11100') == [3, 3]\n    assert int_to_bin('3') == '11100'\n    assert sum_of_binary_numbers(str1) == 123\n    assert count_of_binary_numbers(str1) == 4\n    assert get_sum(str1) == 123\n    assert get_count(str1) == 4\n    assert get_average(str1) == 123.0\n    \ndef test_get_sum():\n    '''\n    Write a function that tests the sum of all single digit numbers in a given digit string.\n    '''\n    str1 = '111'\n    print(str1)\n    assert str1 == str_to_tuple(str1)\n    assert get_sequence(str1) == ['0', '1']\n    assert reverse_string(str1) == ['1', '0']\n    assert convert_to_binary(str1) == '1111'\n    assert bin_to_int('1111') == [3, 3]\n    assert sum_of_binary_numbers(str1) == 11\n    assert count_of_binary_numbers(str1) == 4\n    assert get_sum(str1) == 11\n    assert get_count(str1) == 4\n    assert get_average(str1) == 11.0\n    \ndef test_get_count():\n    '''\n    Write a function that tests the count of all single digit numbers in a given digit string.\n    '''\n    str1 = '111'\n    print(str1)\n    assert str1 == str_to_tuple(str1)\n    assert get_sequence(str1) == ['0', '1']\n    assert reverse_string(str1) == ['1', '0']\n    assert convert_to_binary(str1) == '1111'\n    assert bin_to_int('1111') == [3, 3]\n    assert sum_of_binary_numbers(str1) == 12\n    assert count_of_binary_numbers(str1) == 4\n    assert get_sum(str1) == 12\n    assert get_count(str1) == 4\n    assert get_average(str1) == 12.0\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(sorted(list(str1)))\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Change the value to the same type as it is.\n    str1 = str1.lower()\n    # Split the string by spaces.\n    t = str1.split(\" \")\n    # Map the strings to their character values.\n    char_dict = dict((c, ord(c)) for c in t)\n    # Return the tuple.\n    return tuple(char_dict.values())\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # your code here\n    return tuple(str1)\n    \n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s = str(str1)\n    tup = ()\n    for i in range(len(s)):\n        tup += (s[i],)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(' ', '')\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    if type(str1) == list:\n        return tuple(str1)\n    elif type(str1) == str:\n        return tuple(str1)\n    else:\n        raise TypeError('Input is not a valid list or string')\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    string = []\n    for c in str1:\n        if c == \" \":\n            string.append(c)\n        else:\n            string.append(c.upper())\n    return tuple(string)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Declare a variable\n    tuple_str = ()\n    # Convert the given string to a tuple\n    for char in str1:\n        tuple_str += (char,)\n    return tuple_str\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n!= 0:\n        if n < 0:\n            n = -n\n        if n < 8:\n            if n <= 7:\n                n = n - 1\n        else:\n            if n <= 3:\n                n = n - 4\n        if n < 4:\n            if n <= 1:\n                n = n - 2\n        else:\n            if n <= 5:\n                n = n - 6\n        if n < 3:\n            if n <= 2:\n                n = n - 4\n        else:\n            if n <= 5:\n                n = n - 4\n        if n < 4:\n            if n <= 2:\n                n = n - 3\n        else:\n            if n <= 4:\n                n = n - 5\n        if n < 5:\n            if n <= 1:\n                n = n - 2\n        else:\n            if n <= 3:\n                n = n - 6\n        if n <= 4:\n            if n <= 2:\n                n = n - 4\n        else:\n            if n <= 6:\n                n = n - 4\n        if n <= 2:\n            if n <= 1:\n                n = n - 2\n        else:\n            if n <= 3:\n                n = n - 6\n        if n <= 6:\n            if n <= 4:\n                n = n - 4\n        else:\n            if n <= 7:\n                n = n - 4\n    else:\n        if n <= 7:\n            if n <= 4:\n                n = n - 2\n        else:\n            if n <= 3:\n                n = n - 6\n        if n <= 2:\n            if n <= 4:\n                n = n - 4\n        else:\n            if n <= 6:\n                n = n - 4\n        if n <= 1:\n            if n <= 4:\n                n = n - 2\n        else:\n            if n <= 5:\n                n = n - 6\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    lmb = 0\n    while lmb!= n:\n        lmb = ((lmb+1)&n)\n    return lmb\ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    rmb = 0\n    while rmb!= n:\n        rmb = ((rmb+1)&n)\n    return rmb\ndef add_string_to_array(string,array):\n    '''\n    Write a python function to add a string to a list.\n    '''\n    for x in string:\n        array.append(x)\n    return array\ndef remove_string_from_array(string,array):\n    '''\n    Write a python function to remove a string from a list.\n    '''\n    array_length = len(array)\n    for i in range(0,array_length-1):\n        if(array[i] == string):\n            del array[i]\n    return array\ndef set_string_to_array(string,array):\n    '''\n    Write a python function to set a string to a list.\n    '''\n    for x in string:\n        array.append(x)\n    return array\ndef get_array_size(array):\n    '''\n    Write a python function to get the size of a list.\n    '''\n    size = 0\n    for i in range(len(array)):\n        size = size + 1\n    return size\ndef get_array_at_position(array,position):\n    '''\n    Write a python function to get the element at a given position.\n    '''\n    if(position < 0 or position >= len(array)):\n        return -1\n    else:\n        return array[position]\ndef remove_element_from_array(string,array):\n    '''\n    Write a python function to remove a string from a list.\n    '''\n    for i in range(len(array)):\n        if(array[i] == string):\n            del array[i]\n    return array\ndef remove_duplicates(array):\n    '''\n    Write a python function to remove duplicate elements from a list.\n    '''\n    size = get_array_size(array)\n    array_length = len(array)\n    for i in range(0,array_length-1):\n        if(array[i] == array[i+1]):\n            del array[i]\n    return array\ndef get_array_length(array):\n    '''\n    Write a python function to get the length of a list.\n    '''\n    size = get_array_size(array)\n    return size\ndef get_sum_of_all_digits(n):\n    '''\n    Write a python function to calculate the sum of all digits of a positive integer.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    return sum\ndef get_sum_of_all_digits_but_even_number(n):\n    '''\n    Write a python function to calculate the sum of all digits of a positive integer.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum = sum + i\n    return sum\ndef get_sum_of_all_digits_even_number(n):\n    '''\n    Write a python function to calculate the sum of all digits of a positive integer.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum = sum + i\n    return sum\ndef get_max_digit(string,array):\n    '''\n    Write a python function to get the maximum digit in a string.\n    '''\n    max_digit = 0\n    for i in range(len(string)):\n        if(string[i] > max_digit):\n            max_digit = string[i]\n    return max_digit\ndef get_min_digit(string,array):\n    '''\n    Write a python function to get the minimum digit in a string.\n    '''\n    min_digit = -1\n    for i in range(len(string)):\n        if(string[i] < min_digit):\n            min_digit = string[i]\n    return min_digit\ndef create_string_from_array(array):\n    '''\n    Write a python function to create a string from a list.\n    '''\n    string = \"\"\n    for i in range(len(array)):\n        string = string + str(array[i])\n    return string\ndef create_string_from_array_but_without_repeating_characters(array):\n    '''\n    Write a python function to create a string from a list.\n    '''\n    string = \"\"\n    for i in range(len(array)):\n        if(array[i] not in string):\n            string = string + array[i]\n    return string\ndef create_string_from_array_but_without_repeating_characters_and_another_time(array):\n    '''\n    Write a python function to create a string from a list.\n    '''\n    string = \"\"\n    for i in range(len(array)):\n        if(array[i] not in string):\n            if(len(array[i]) > 1):\n                string = string + array[i]\n            else:\n                string = string + array[i][0]\n    return string\ndef create_string_from_array_but_with_repeating_characters(array):\n    '''\n    Write a python function to create a string from a list.\n    '''\n    string = \"\"\n    for i in range(len(array)):\n        if(array[i] not in string):\n            string = string + array[i]\n    return string\ndef create_string_from_array_but_with_repeating_characters_and_another_time(array):\n    '''\n    Write a python function to create a string from a list.\n    '''\n    string = \"\"\n    for i in range(len(array)):\n        if(array[i] not in string):\n            if(len(array[i]) > 1):\n                string = string + array[i]\n            else:\n                string = string + array[i][0]\n    return string\ndef get_all_digits(string):\n    '''\n    Write a python function to get all the digits of a string.\n    '''\n    all_digits = []\n    for i in range(len(string)):\n        all_digits.append(string[i])\n    return all_digits\ndef get_all_digits_but_not_repeating_characters(string):\n    '''\n    Write a python function to get all the digits of a string.\n    '''\n    all_digits = []\n    for i in range(len(string)):\n        if(string[i] not in all_digits):\n            all_digits.append(string[i])\n    return all_digits\ndef create_array_from_list(list):\n    '''\n    Write a python function to create a list from a string.\n    '''\n    array = []\n    for i in range(len(list)):\n        array.append(list[i])\n    return array\ndef create_array_from_list_but_without_repeating_characters(list):\n    '''\n    Write a python function to create a list from a string.\n    '''\n    array = []\n    for i in range(len(list)):\n        if(list[i] not in array):\n            array.append(list[i])\n    return array\ndef create_array_from_list_but_without_repeating_characters_and_another_time(list):\n    '''\n    Write a python function to create a list from a string.\n    '''\n    array = []\n    for i in range(len(list)):\n        if(list[i] not in array):\n            if(len(list[i]) > 1):\n                array.append(list[i])\n            else:\n                array.append(list[i][0])\n    return array\ndef calculate_string_with_digits(string):\n    '''\n    Write a python function to calculate a string in base 10 with the digits.\n    '''\n    array = []\n    for i in range(len(string))"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # uncomment to see the results\n    # print(\"set bit left most unset\")\n    # print(\"left most unset bit :\", bin(n&0b1110))\n    # print(\"current bit :\", bin(n&0b1101))\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 0x80: \n        n = n & 0xFF \n        n |= 0x80 \n    return n \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n is None: return\n    if n.bit_length() == 1:\n        return\n    if n.bit_length() == 2:\n        n |= 0x80\n    else:\n        n = n | 0x80\n    return n\n    \ndef leftmost_unset_bit(n): \n    '''\n    Return the left most unset bit of an unsigned integer.\n    '''\n    if n is None: return None\n    if n.bit_length() == 1:\n        return n\n    if n.bit_length() == 2:\n        return n\n    return n | 0x80\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #Get the number of bits\n    l = len(n)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 2 == 0: \n        n = n & 1\n        return n\n    else: \n        return 1\n    \n    \ndef set_right_most_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    if n & 1 == 0: \n        n = n >> 1\n        return n\n    else: \n        return 0\n    \ndef set_rightmost_unset_bit(n):\n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    if n & 1 == 0: \n        n = n >> 1\n        return n\n    else: \n        return 0\n    \n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    global left_most_unset_bit\n    left_most_unset_bit = n\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: return\n    set_bits = [x for x in bin(n)][2:]\n    set_bits.reverse()\n    set_bits = set_bits.zfill(8)\n    set_bits = int(\"0b\"+set_bits, 2)\n    n = n & (n - 1)\n    n = n | set_bits\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    left_most_unset_bit = 1\n    while left_most_unset_bit & n!= 0:\n        left_most_unset_bit = left_most_unset_bit << 1\n    return left_most_unset_bit\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 4*3.14*r**2*math.acos(1-2*(h/r))*math.pi\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return 4/3.14*math.pi*r**3\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3.14*math.pi*r**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 4/3.14*h*math.pi*r**3\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r*h\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 0\n    for i in range(1,r+1):\n        if r%i == 0:\n            volume += (i*h)/i*(1-i)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    a=math.pi*r*r\n    c=2*(r*r)\n    d=4*(h*h)\n    volume=math.sqrt(a+c+d)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    c = math.sqrt(r * r * h / 2) # Using the standard formula\n    return c * c * math.pi * math.sin(2*math.pi*h/c) # calculating the volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r=float(r)\n    h=float(h)\n    a=3.14*h*h\n    v=3.14*r*r*a\n    return round(v,2)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # assume r is always positive\n    pi = math.pi\n    r2 = r*r\n    m1 = (3*r2+2*r2*r2)/2\n    m2 = r2*h\n    m3 = r2*h*h\n    m4 = 2*r2*h*h\n    m5 = 2*r2*r2*h\n    m6 = (r2*h*h)*(r2-2*r2)\n    m7 = (r2*h*r2)+(r2*r2-4*r2)*r2\n    m8 = (r2*r2*r2+2*r2*r2-r2)*r2\n    m9 = r2*r2*r2*r2\n    m10 = 4*r2*r2*r2\n    m11 = 4*r2*r2*r2*r2\n    m12 = r2*r2*r2*r2*r2\n    m13 = (r2*r2*r2*r2)+(r2*r2*r2-4*r2)*r2\n    m14 = (r2*r2*r2*r2*r2)+(r2*r2*r2-2*r2)*r2\n    m15 = (r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m16 = r2*r2*r2*r2*r2\n    m17 = 2*r2*r2*r2*r2\n    m18 = r2*r2*r2*r2*r2\n    m19 = (r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m20 = r2*r2*r2*r2*r2\n    m21 = (r2*r2*r2*r2*r2)+(r2*r2*r2-2*r2)*r2\n    m22 = (r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m23 = r2*r2*r2*r2*r2*r2\n    m24 = r2*r2*r2*r2*r2*r2\n    m25 = (r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m26 = r2*r2*r2*r2*r2*r2\n    m27 = (r2*r2*r2*r2*r2*r2)+(r2*r2*r2-2*r2)*r2\n    m28 = r2*r2*r2*r2*r2*r2\n    m29 = (r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m30 = r2*r2*r2*r2*r2*r2\n    m31 = (r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m32 = r2*r2*r2*r2*r2*r2\n    m33 = (r2*r2*r2*r2*r2*r2)+(r2*r2*r2-2*r2)*r2\n    m34 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m35 = r2*r2*r2*r2*r2*r2*r2\n    m36 = r2*r2*r2*r2*r2*r2*r2\n    m37 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m38 = r2*r2*r2*r2*r2*r2*r2\n    m39 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m40 = r2*r2*r2*r2*r2*r2*r2\n    m41 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m42 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-2*r2)*r2\n    m43 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m44 = r2*r2*r2*r2*r2*r2*r2\n    m45 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m46 = r2*r2*r2*r2*r2*r2*r2\n    m47 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m48 = r2*r2*r2*r2*r2*r2*r2\n    m49 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m50 = r2*r2*r2*r2*r2*r2*r2\n    m51 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m52 = r2*r2*r2*r2*r2*r2*r2\n    m53 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m54 = r2*r2*r2*r2*r2*r2*r2\n    m55 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m56 = r2*r2*r2*r2*r2*r2*r2\n    m57 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m58 = r2*r2*r2*r2*r2*r2*r2\n    m59 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m60 = r2*r2*r2*r2*r2*r2*r2\n    m61 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m62 = r2*r2*r2*r2*r2*r2*r2\n    m63 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m64 = r2*r2*r2*r2*r2*r2*r2\n    m65 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*r2-r2)*r2\n    m66 = r2*r2*r2*r2*r2*r2*r2\n    m67 = (r2*r2*r2*r2*r2*r2*r2)+(r2*r2*"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r == 0 and h == 0):\n        return 0\n    elif (r == 0 and h!= 0):\n        return 1.5 * h**2\n    else:\n        return 1.5 * r**2 * math.acos((h/r)**3)\n    \ndef vol_sep(r1,h1,r2,h2):\n    '''\n    Write a function to find the volume of a square segment\n    such that it covers the horizontal and vertical sides.\n    '''\n    if (r1 < 0):\n        r1 = -r1\n    if (r2 < 0):\n        r2 = -r2\n    if (h1 < 0):\n        h1 = -h1\n    if (h2 < 0):\n        h2 = -h2\n    if (r1!= r2):\n        return 0\n    elif (h1!= h2):\n        return 1.5 * r1**2 * math.acos((h1/h2)**3)\n    else:\n        return 1.5 * r1**2 * math.acos((r1/r2)**3)\n    \ndef vol_mid(r,h):\n    '''\n    Write a function to find the volume of a square\n    of the shape of a given shape.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0):\n        return 1.5 * r**2 * math.acos((h/r)**3)\n    else:\n        return 0.5 * r**2 * math.acos((r/h)**3)\n    \ndef vol_tri(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0):\n        return 1.5 * r**2 * math.acos((r/h)**3)\n    else:\n        return 0.5 * r**2 * math.acos((r/h)**3)\n    \ndef vol_approx(r,h,epsilon):\n    '''\n    Write a function to find the volume of a square of the\n    shape of a given shape.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0):\n        return 1.5 * r**2 * math.acos((r/h)**3)\n    else:\n        return 0.5 * r**2 * math.acos((r/h)**3)\n    \ndef vol_curve(r,h):\n    '''\n    Write a function to find the volume of a curve of a given shape.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0):\n        return 1.5 * r**2 * math.acos((r/h)**3)\n    else:\n        return 0.5 * r**2 * math.acos((r/h)**3)\n    \ndef vol_ellip(r,h):\n    '''\n    Write a function to find the volume of an ellipsoid of a given shape.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0):\n        return 1.5 * r**2 * math.acos((r/h)**3)\n    else:\n        return 0.5 * r**2 * math.acos((r/h)**3)\n    \ndef vol_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere of a given shape.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0):\n        return 1.5 * r**2 * math.acos((r/h)**3)\n    else:\n        return 0.5 * r**2 * math.acos((r/h)**3)\n    \ndef vol_tetra(r,h):\n    '''\n    Write a function to find the volume of a tetrahedron of a given shape.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0):\n        return 1.5 * r**2 * math.acos((r/h)**3)\n    else:\n        return 0.5 * r**2 * math.acos((r/h)**3)\n    \ndef vol_hexagon(r,h):\n    '''\n    Write a function to find the volume of a hexagon of a given shape.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0):\n        return 1.5 * r**2 * math.acos((r/h)**3)\n    else:\n        return 0.5 * r**2 * math.acos((r/h)**3)\n    \ndef vol_octagon(r,h):\n    '''\n    Write a function to find the volume of a octagon of a given shape.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0):\n        return 1.5 * r**2 * math.acos((r/h)**3)\n    else:\n        return 0.5 * r**2 * math.acos((r/h)**3)\n    \ndef vol_triangle(r,h):\n    '''\n    Write a function to find the volume of a triangle of a given shape.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0):\n        return 1.5 * r**2 * math.acos((r/h)**3)\n    else:\n        return 0.5 * r**2 * math.acos((r/h)**3)\n    \ndef vol_mesh(mesh):\n    '''\n    Write a function to find the volume of a mesh of a given shape.\n    '''\n    if (mesh < 0):\n        mesh = -mesh\n    if (mesh!= 0):\n        return 1.5 * mesh**2 * math.acos((mesh/mesh.L())**3)\n    else:\n        return 0.5 * mesh**2 * math.acos((mesh/mesh.L())**3)\n    \ndef vol_obj(obj):\n    '''\n    Write a function to find the volume of an object.\n    '''\n    if (obj < 0):\n        obj = -obj\n    if (obj!= 0):\n        return 1.5 * obj**2 * math.acos((obj/obj.L())**3)\n    else:\n        return 0.5 * obj**2 * math.acos((obj/obj.L())**3)\n    \ndef vol_mesh_obj(obj):\n    '''\n    Write a function to find the volume of a mesh of a given shape.\n    '''\n    if (obj < 0):\n        obj = -obj\n    if (obj!= 0):\n        return 1.5 * obj**2 * math.acos((obj/obj.L())**3)\n    else:\n        return 0.5 * obj**2 * math.acos((obj/obj.L())**3)\n    \ndef vol_cylinder(r,h,cylinder_type):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    if (r < 0):\n        r = -r\n    if (h < 0):\n        h = -h\n    if (r!= 0 and h!= 0)"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    x = (r**2 - r)**3\n    volume = 4 * (x * math.pi * h**3)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi*(r**2)*h\n    return vol\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return highest_Power_of_2(n/2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        ans = 0\n        i = 0\n        while n > i:\n            if n%2!= 0:\n                n = n//2\n                ans += 1\n            else:\n                n = n//4\n                ans += 1\n                \n            i = i+1\n        return ans\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 0\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 'Error: Input must be an integer greater than or equal to zero'\n    for i in range(n, 0, -1):\n        if i < n:\n            if i % 2 == 0:\n                return i**2\n            else:\n                return i**2 * 2\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return \"Please enter a number greater than 0\"\n    elif n == 0:\n        return 0\n    else:\n        for i in range(2,n):\n            if n%2 == 0:\n                print(n,\"is an odd number\")\n                return\n            else:\n                print(n,\"is an even number\")\n        return\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            if i > max_power:\n                max_power = i\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 2\n    while i <= n: \n        if n % i == 0: \n            return n // i\n        i += 1 \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        if power == 1 or power == n:\n            return power\n        else:\n            power += 1\n    return None\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while (2**power < n):\n        power = power + 1\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = \"\"\n    num = 2\n    while num <= n:\n        result += str(num)\n        num += 1\n    return result\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2:\n        return n\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    d = dict()\n    for i in range(n):\n        d[i] = (i + 2) * (i + 2)\n    for i in range(n):\n        lucas = d[i] - d[n - i - 1]\n        if lucas < 0:\n            return -1\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    n = int(n)\n    a = [0, 1, 3, 9, 13, 51, 1, 13, 51, 2, 7, 39, 38, 1, 1, 6, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = n-2\n    if (n%2)!= 0:\n        lucas = lucas +1\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_numbers = [0, 1] \n    for i in range(1, n + 1): \n        lucas_numbers.append((lucas_numbers[i - 1] + lucas_numbers[i - 2]) % (10 ** 9 + 7)) \n    return lucas_numbers[n] \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) \ndef find_lucas_recursive(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    if n == 3: \n        return find_lucas_recursive(n-1) + find_lucas_recursive(n-2)\ndef find_fib(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 3\n    else: \n        return find_fib(n-1) + find_fib(n-2) \ndef find_fib_recursive(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    else: \n        return find_fib_recursive(n-1) + find_fib_recursive(n-2)\ndef fibonacci_number_fast(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return fibonacci_number_fast(n-1) + fibonacci_number_fast(n-2)\ndef fibonacci_number_recursive(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return fibonacci_number_recursive(n-1) + fibonacci_number_recursive(n-2)\ndef fibonacci_number_dynamic(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        list_1 = [0, 1] \n        list_2 = [1, 0] \n        return fibonacci_number_dynamic(n-1) + list_1[n] + list_2[n] \ndef fibonacci_number_dynamic_recursive(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        list_1 = [0, 1] \n        list_2 = [1, 0] \n        return fibonacci_number_dynamic_recursive(n-1) + list_1[n] + list_2[n] \ndef fibonacci_number(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return fibonacci_number(n-1) + fibonacci_number(n-2)\ndef fibonacci_number_recursive(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        list_1 = [0, 1] \n        list_2 = [1, 0] \n        return fibonacci_number_recursive(n-1) + list_1[n] + list_2[n] \ndef fibonacci_number_dynamic_recursive(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        list_1 = [0, 1] \n        list_2 = [1, 0] \n        return fibonacci_number_dynamic_recursive(n-1) + list_1[n] + list_2[n] \ndef fibonacci_number_dynamic(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        list_1 = [0, 1] \n        list_2 = [1, 0] \n        return fibonacci_number_dynamic(n-1) + list_1[n] + list_2[n] \ndef fibonacci_number_dynamic_recursive(n): \n    '''\n    Write a function to find then'th fibonacci number.\n    '''\n    if n <= 0: \n        raise Exception (\"invalid input\") \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        list_1 = [0, 1] \n        list_2 = [1, 0] \n        return fibonacci_number_dynamic_recursive(n-1) + list_1[n] + list_2[n] \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    x = 0\n    y = n - 1\n    while x < y:\n        z = x + y\n        if z % 2 == 0:\n            return z\n        y -= 1\n        x += 1\n    return -1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # find the first i such that i > 0\n    for i in range(n):\n        if i>0:\n            # if the first i is positive, check if the last is odd\n            if (n-i)%2 == 1:\n                return n - i - 1\n    # return -1 if it's not possible\n    return -1"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return n\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        if isinstance(item, str):\n            item = item.format(string)\n        item.replace('{}', string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(string) == 1:\n        return list_ + [string]\n    else:\n        return [string] + add_string(list_[:len(string)], string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        if string == '{':\n            i.append(string)\n        elif string == '}':\n            i.pop()\n        else:\n            i.append(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(string)\n    \n    if len(list_) <= 0:\n        return list_\n    else:\n        for i in range(len(list_)):\n            list_.append(list_[i] + str(i))\n        return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        item = list_[list_[0]]\n        item = str(item)\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        item = item.replace('/','')\n        item = item.replace(',','')\n        item = item.replace('.','')\n        item = item.replace('[','')\n        item = item.replace(']','')\n        item = item.replace('{','')\n        item = item.replace('}','')\n        item = item.replace(' ', '')\n        item = item.replace(\"'\",'')\n        ite"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(list_)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i].replace('{', '').replace('}', '')\n        list_[i] = list_[i].replace(' ', '_')\n        list_[i] = list_[i].replace(',', '_')\n        list_[i] = list_[i].replace('{', '')\n        list_[i] = list_[i].replace('}', '')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace(' ', '_')\n        list_[i] = list_[i].replace(',', '_')\n        list_[i] = list_[i].replace('{', '')\n        list_[i] = list_[i].replace('}', '')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace(' ', '_')\n        list_[i] = list_[i].replace(',', '_')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace(' ', '_')\n        list_[i] = list_[i].replace(',', '_')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace(' ', '_')\n        list_[i] = list_[i].replace(',', '_')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace(' ', '_')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace(' ', '_')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        list_[i] = list_[i].replace('_','')\n        lis"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in string:\n        if isinstance(i, str):\n            list_.append(i)\n        else:\n            raise TypeError(\"String argument can only be a string\")\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list_ + [string]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if len(list_) == 0:\n        list_.append(string)\n        return list_\n    else:\n        if string[-1] in [\"e\", \"a\", \"o\", \"i\", \"u\", \"A\", \"O\", \"I\", \"U\"]:\n            if string[-1] in [\"A\", \"O\", \"I\", \"U\"]:\n                new_list = []\n                for element in list_:\n                    new_list.append(element.replace(string[-1], \"-\"))\n            else:\n                new_list = []\n                for element in list_:\n                    new_list.append(element.replace(string[-1], \"\"))\n            list_ = new_list\n        elif string[-1] in [\"i\", \"n\", \"t\"]:\n            if string[-1] in [\"a\", \"o\", \"i\", \"u\"]:\n                new_list = []\n                for element in list_:\n                    new_list.append(element.replace(string[-1], \"\"))\n            else:\n                new_list = []\n                for element in list_:\n                    new_list.append(element.replace(string[-1], \"\"))\n            list_ = new_list\n        elif string[-1] in [\"z\", \"y\", \"m\", \"l\", \"e\", \"n\", \"g\"]:\n            if string[-1] in [\"y\", \"z\"]:\n                new_list = []\n                for element in list_:\n                    new_list.append(element.replace(string[-1], \"\"))\n            else:\n                new_list = []\n                for element in list_:\n                    new_list.append(element.replace(string[-1], \"\"))\n            list_ = new_list\n        else:\n            if string[-1] == \".\":\n                new_list = []\n                for element in list_:\n                    new_list.append(element.replace(string[-1], \"\"))\n            else:\n                new_list = []\n                for element in list_:\n                    new_list.append(element.replace(string[-1], \"\"))\n            list_ = new_list\n        return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    def nested_dict(d, l):\n        if isinstance(l, list):\n            for i in l:\n                if isinstance(i, dict):\n                    d.update(nested_dict(d.get(i), i.get('list', [])))\n                else:\n                    d[i] = [] if l.get(i) is None else l.get(i)\n        else:\n            d[l] = [] if l.get(l) is None else l.get(l)\n    return nested_dict(l1, l2), nested_dict(l3, l1), nested_dict(l2, l3)\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for key, value in l1:\n        d[key] = value\n        d[key] = d.get(key, [])\n        d[key].append(value)\n    for key, value in l2:\n        d[key] = d.get(key, [])\n        d[key].append(value)\n    for key, value in l3:\n        d[key] = d.get(key, [])\n        d[key].append(value)\n    return d\n    \nl1 = [['a', 'b', 'c'], ['d', 'e', 'f']]\nl2 = [['g', 'h'], ['i', 'j'], ['k', 'l']]\nl3 = [['m', 'n'], ['o', 'p']]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for l in l1:\n        res[l] = convert_list_dictionary(l2, l3, l1[l])\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {key: value for key, value in enumerate(l1)}\n    d2 = {key: value for key, value in enumerate(l2)}\n    d3 = {key: value for key, value in enumerate(l3)}\n    return d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {l1[i]: l2[i] for i in range(len(l1))}\n    d2 = {l2[i]: l3[i] for i in range(len(l2))}\n    d3 = {l3[i]: l1[i] for i in range(len(l3))}\n    return d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #nested_dictionary_1 = {\"name\": \"Nuha\", \"age\": 56}\n    #nested_dictionary_2 = {\"name\": \"Nuha\", \"age\": 56}\n    #nested_dictionary_3 = {\"name\": \"Nuha\", \"age\": 56, \"father\": \"Nuha\"}\n    #nested_dictionary_4 = {\"name\": \"Nuha\", \"age\": 56, \"father\": {\"name\": \"Nuha\"}}\n    #nested_dictionary_5 = {\"name\": \"Nuha\", \"age\": 56, \"father\": {\"name\": \"Nuha\"}}\n    #nested_dictionary_6 = {\"name\": \"Nuha\", \"age\": 56, \"father\": {\"name\": \"Nuha\"}}\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    from itertools import chain\n    from collections import defaultdict\n    d1 = defaultdict(dict)\n    d2 = defaultdict(dict)\n    d3 = defaultdict(dict)\n    for l in list(chain(l1, l2, l3)):\n        d1[l[0]][l[1]] = l[2]\n        d2[l[1]][l[0]] = l[2]\n        d3[l[0]][l[1]] = l[2]\n    return d1, d2, d3\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for l in l1:\n        d[l] = convert_list_dictionary(l1, l2, l3)\n    for k in l2:\n        d[k] = l3[k]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    list_dict = {}\n    list_dict['list1'] = l1\n    list_dict['list2'] = l2\n    list_dict['list3'] = l3\n    return list_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return dict(zip(l1, l2))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    sum = 0\n    for i in range(2,n+1):\n        if (i%2==0):\n            sum += i//2\n        if (i%3==0):\n            sum += i//3\n        if (i%4==0):\n            sum += i//4\n        if (i%5==0):\n            sum += i//5\n        if (sum > n):\n            sum = n\n    return sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return (get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3))\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    s1 = 0\n    s2 = 0\n    for i in range(1, int(n)):\n        if (i % 2) == 0:\n            s1 = s1 + f(i/2)\n        if (i % 3) == 0:\n            s2 = s2 + f(i/3)\n        if (i % 4) == 0:\n            s2 = s2 + f(i/4)\n        if (i % 5) == 0:\n            s2 = s2 + f(i/5)\n    return max(s1, s2)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Solution 1:\n    #\n    # def max_sum_recursive(n):\n    #     if n == 0:\n    #         return 0\n    #     elif n == 1:\n    #         return 1\n    #     elif n == 2:\n    #         return 2\n    #     else:\n    #         max_of_sums = max(max_of_sums, n * max_sum_recursive(n - 2))\n    #         return n * max_sum_recursive(n - 1) + max_of_sums\n    #\n    # return max_sum_recursive(n)\n    #\n    # Solution 2:\n    #\n    # def max_sum_iter(n):\n    #     # if n <= 1:\n    #     #     return 0\n    #     # elif n == 2:\n    #     #     return 1\n    #     # else:\n    #     #     return max(max_sum_iter(n-2), max_sum_iter(n-1)) + n\n    #\n    # return max_sum_iter(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += f(i)\n    return sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Your code here\n    return max( (max( (f(n/2),f(n/3),f(n/4),f(n/5))), n) )\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max = f(n)\n    for i in range(2, int(n**0.5)+1):\n        if f(i)>max:\n            max = f(i)\n    return max\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    for i in range (2, n+1):\n        print (f'f(n/{i}) = {i}/{i**2}+{i}/{i**3}+{i}/{i**4}+{i}/{i**5}')\n        if i**2 + i**3 + i**4 + i**5 > n:\n            print ('Not possible')\n            exit()\n        if n%i == 0:\n            print ('Not possible')\n            exit()\n    print ('Possible')\n    return (n**2 + n**3 + n**4 + n**5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1:\n        return n\n    else:\n        return get_max_sum(n-1) + max(n-1,1,1)\ndef solution(n):\n    return get_max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return f(n)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    longest = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > longest:\n            longest = len(input_list[i])\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = max(input_list)\n    return input_list.index(max_length)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if input_list is None or len(input_list) == 0:\n        return None\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    for item in input_list:\n        if len(item) > len(max_length):\n            max_length = item\n    return max_length\n    \ndef main():\n    '''\n    main()\n    '''\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(len(list_))\n    print(max_length_list(list_))\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Write your code here\n    return max(input_list"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list=[]\n    for i in input_list:\n        length_list.append(len(i))\n    \n    return max(length_list)\n    "
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # change it to a list\n    test_tup = list(test_tup)\n    # iterate through the list\n    for i in range(len(test_tup)):\n        # check if the element already exists in the list\n        if test_tup[i] in test_tup:\n            return False\n    return True\n    \ndef check_perm(test_tup):\n    '''\n    Write a function that returns True if the given tuple is a permutation of the given list.\n    '''\n    # modify the list by removing duplicates from it\n    test_tup = list(set(test_tup))\n    # set the length of the list\n    l = len(test_tup)\n    # iterate through the list\n    for i in range(l):\n        # iterate through the list\n        for j in range(l):\n            # if the current element is the same as the other elements, return False\n            if test_tup[j] == test_tup[i]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    d = dict()\n    for tup in test_tup:\n        if tup not in d:\n            d[tup] = 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return not any(tup[i] == tup[i+1] for i in range(len(tup) - 1))\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) > 0:\n        raise Exception('Tuple contains duplicate values')\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    output_list = []\n    for value in test_tup:\n        if value in output_list:\n            return False\n        else:\n            output_list.append(value)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if type(test_tup) == tuple:\n        for elem in test_tup:\n            if elem in test_tup:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup.append(i)\n    return len(new_tup) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set_tup = set(test_tup)\n    if len(set_tup)!= len(test_tup):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup in set(test_tup):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = True\n    for i in range(len(test_tup)):\n        if test_tup[i] in test_tup:\n            distinct = False\n            break\n    return distinct\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # creating empty list\n    char_list = []\n    \n    # create a for loop to iterate over the string\n    for index, char in enumerate(str1):\n        if char not in char_list:\n            # append the character to the list\n            char_list.append(char)\n            # increase index by one\n            index += 1\n        else:\n            break\n        \n    # create a variable to return the index\n    return index\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_char_seen = {char: 1 for char in str1}\n    for char in str1:\n        if char in first_char_seen:\n            first_char_seen[char] += 1\n        else:\n            first_char_seen[char] = 1\n    for char in str1:\n        if first_char_seen[char] > 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    lst = []\n    for i in str1:\n        if str1.count(i) == 1:\n            lst.append(i)\n    return lst[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    first_char=str1[0]\n    if str1.count(first_char) == 0:\n        return 'No first non-repeating character found'\n    else:\n        return first_char\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counter = 0\n    for i in str1:\n        if str1[counter] == str1[counter+1]:\n            counter += 1\n        else:\n            counter = 0\n    return str1[counter+1]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    n = len(str1)\n    char_frequency = {}\n    for i in range(n):\n        char = str1[i]\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    result = ''\n    for char in char_frequency:\n        if char_frequency[char] == 1:\n            result = char\n    return result\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    import string\n    list_ = list(string.ascii_lowercase)\n    i = 0\n    while i < len(str1):\n        if str1[i].lower() not in list_:\n            i += 1\n            continue\n        else:\n            break\n    return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    unique_char = []\n    char_index = {}\n    for i in range(len(str1)):\n        if str1[i] not in char_index:\n            unique_char.append(str1[i])\n            char_index[str1[i]] = []\n        char_index[str1[i]].append(i)\n    print(\"Unique character in this string: \", unique_char)\n    print(\"The first unique character in this string: \", char_index[unique_char[0]])\n    print(\"The first unique character in this string: \", char_index[unique_char[0]])\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    l = []\n    for i in str1:\n        l.append(i)\n    \n    for i in range(len(str1)):\n        if str1[i] not in l:\n            l.append(str1[i])\n    return l[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    def non_repeating(str1):\n        for i in range(0, len(str1)):\n            if str1[i] == str1[i][::-1]:\n                return False\n        return True\n    \n    return non_repeating(str1)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not (re.match(regex,string)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    check_string = ''.join(string)\n    check_string = str(string).replace(' ','')\n    if len(string)==len(check_string):\n        if string[0] == check_string[0]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0]==string[-1]\ndef check_char_space(string):\n    '''\n    Check whether a string starts or ends with the same character or not, such as \"a\", \"b\", \"c\", and \"a b\".\n    '''\n    return string.startswith(string[0]) or string.endswith(string[-1])\ndef check_if_digit(string):\n    '''\n    Write a function to check whether a string consists of digits or not.\n    '''\n    return bool(re.match(r'^[0-9]+$',string))\ndef check_if_digit_space(string):\n    '''\n    Check whether a string consists of digits or not, such as \"a\", \"b\", \"c\", and \"a b\".\n    '''\n    return bool(re.match(r'^[0-9]+\\.?$',string))\ndef check_word(string):\n    '''\n    Check whether a string is in the dictionary, such as \"kitten\", \"lion\", \"tiger\", and \"kitty\".\n    '''\n    if string in dictionary.keys():\n        return True\n    else:\n        return False\ndef check_word_space(string):\n    '''\n    Check whether a string is in the dictionary, such as \"kitten\", \"lion\", \"tiger\", and \"kitty\".\n    '''\n    if string.startswith(string[0]) or string.endswith(string[-1]):\n        return True\n    else:\n        return False\ndef check_word_unique(string):\n    '''\n    Check whether a string is in the dictionary, such as \"kitten\", \"lion\", \"tiger\", and \"kitty\".\n    '''\n    if string in dictionary.values():\n        return True\n    else:\n        return False\ndef check_words_unique(string):\n    '''\n    Check whether a string is in the dictionary, such as \"kitten\", \"lion\", \"tiger\", and \"kitty\".\n    '''\n    if string.startswith(string[0]) or string.endswith(string[-1]):\n        if string in dictionary.keys():\n            return True\n        else:\n            return False\n    else:\n        return False\ndef check_prefix(string):\n    '''\n    Check whether a string is in the dictionary, such as \"kitten\", \"lion\", \"tiger\", and \"kitty\".\n    '''\n    if string.startswith(string[0]) or string.endswith(string[-1]):\n        return True\n    else:\n        return False\ndef check_suffix(string):\n    '''\n    Check whether a string is in the dictionary, such as \"kitten\", \"lion\", \"tiger\", and \"kitty\".\n    '''\n    if string.endswith(string[-1]):\n        return True\n    else:\n        return False\ndef check_number(string):\n    '''\n    Check whether a string is in the dictionary, such as \"1.1\", \"1.2.3\", \"2.2\", and \"2.3\".\n    '''\n    if string.split(\".\")[-1].isnumeric() or string.split(\".\")[-1].split(\".\")[0].isnumeric():\n        return True\n    else:\n        return False\ndef check_positive_integer(string):\n    '''\n    Check whether a string is in the dictionary, such as \"1.1\", \"1.2.3\", \"2.2\", and \"2.3\".\n    '''\n    if re.match(r'^[-+]?\\d+$',string):\n        return True\n    else:\n        return False\ndef check_string_length(string):\n    '''\n    Check whether a string is a string or not.\n    '''\n    if not check_word_space(string):\n        if not check_string_length(string[0]):\n            return True\n        elif not check_string_length(string[-1]):\n            return True\n    elif not check_string_length(string[0]):\n        return True\n    elif not check_string_length(string[-1]):\n        return True\n    else:\n        return False\ndef check_string_length_space(string):\n    '''\n    Check whether a string is a string or not.\n    '''\n    if not check_string_length(string[0]):\n        return True\n    elif not check_string_length(string[-1]):\n        return True\n    else:\n        return False\ndef check_string_length_unique(string):\n    '''\n    Check whether a string is a string or not.\n    '''\n    if not check_string_length_space(string[0]):\n        return True\n    elif not check_string_length_space(string[-1]):\n        return True\n    else:\n        return False\ndef check_string_length_repeat(string):\n    '''\n    Check whether a string is a string or not.\n    '''\n    if not check_string_length(string[0]):\n        return True\n    elif not check_string_length(string[-1]):\n        return True\n    else:\n        return False\ndef check_if_symbol(string):\n    '''\n    Check whether a string is a string or not.\n    '''\n    if not check_string_length(string):\n        return True\n    else:\n        return False\ndef check_if_symbol_space(string):\n    '''\n    Check whether a string is a string or not.\n    '''\n    if not check_string_length_space(string):\n        return True\n    else:\n        return False\ndef check_if_symbol_unique(string):\n    '''\n    Check whether a string is a string or not.\n    '''\n    if not check_string_length_unique(string):\n        return True\n    else:\n        return False\ndef check_if_symbol_repeat(string):\n    '''\n    Check whether a string is a string or not.\n    '''\n    if not check_string_length_repeat(string):\n        return True\n    else:\n        return False\ndef check_if_not_symbol(string):\n    '''\n    Check whether a string is a string or not.\n    '''\n    if not check_string_length(string):\n        return True\n    else:\n        return False\ndef check_number_negative(string):\n    '''\n    Check whether a string is a number or not.\n    '''\n    if not check_string_length(string):\n        return True\n    else:\n        return False\ndef check_number_positive(string):\n    '''\n    Check whether a string is a number or not.\n    '''\n    if not check_string_length(string):\n        return True\n    else:\n        return False\ndef check_string_capital(string):\n    '''\n    Check whether a string is a capital or not.\n    '''\n    if string[0].isupper():\n        return True\n    else:\n        return False\ndef check_string_lowercase(string):\n    '''\n    Check whether a string is a lowercase or not.\n    '''\n    if string[0].islower():\n        return True\n    else:\n        return False\ndef check_string_uppercase(string):\n    '''\n    Check whether a string is a uppercase or not.\n    '''\n    if string[0].isupper():\n        return True\n    else:\n        return False\ndef check_string_symbol(string):\n    '''\n    Check whether a string is a symbol or not.\n    '''\n    if not check_string_length(string):\n        return True\n    else:\n        return False\ndef check_string_not_symbol(string):\n    '''\n    Check whether a string is a not symbol or not.\n    '''\n    if not check_string_length(string):\n        return True\n    else:\n        return False\ndef check_number_exceed(string):\n    '''\n    Check whether a string is an over a number or not.\n    '''\n    if string in dictionary.values():\n        return True\n    else:"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0]!= string[-1]):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex, string)!= None\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    for char in string:\n        if char == 'a' or char == 'A' or char == '1' or char == '0':\n            return False\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0]!= string[-1]):\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    return string[0] == string[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    is_start = True\n    is_end = True\n    if not (string[0]==string[-1]):\n        is_end = False\n    if not (string[0]==string[-1]):\n        is_start = False\n    return is_start and is_end\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    while i < 3:\n        if a[i] >= b[i] and a[i] >= c[i]:\n            j += 1\n        elif b[i] >= a[i] and b[i] >= c[i]:\n            k += 1\n        elif c[i] >= a[i] and c[i] >= b[i]:\n            k += 1\n        i += 1\n    return [a[0], a[1], a[2]] if j > k else [b[0], b[1], b[2]] if j > k else [c[0], c[1], c[2]]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == len(b) == len(c):\n        if (len(a) % 2 == 0):\n            return (a[int(len(a)/2)] + a[int(len(a)/2-1)])/2\n        elif (len(a) % 2!= 0):\n            return a[int(len(a)/2)]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 3:\n        return (int(a[2]) + int(a[1]) + int(a[0]))/3\n    elif len(a) > 3:\n        return median_numbers(a[:-2],a[-1],a[-2])\n    else:\n        return a[0]\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a)!= 3:\n        return \"Invalid Input\"\n    if len(b)!= 3:\n        return \"Invalid Input\"\n    if len(c)!= 3:\n        return \"Invalid Input\"\n    numbers = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(a):\n        numbers.append(a[i])\n        i += 1\n    while j < len(b):\n        numbers.append(b[j])\n        j += 1\n    while k < len(c):\n        numbers.append(c[k])\n        k += 1\n    numbers.sort()\n    return numbers\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==b==c==0:\n        print(a)\n    elif a>b and a>c:\n        print(a)\n    elif a<b and a>c:\n        print(b)\n    elif a<b and a<c:\n        print(c)\n    else:\n        print('No Median')\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_list = [a,b,c]\n    len(a_list)\n    if len(a_list)<3:\n        return a_list[1]\n    else:\n        return (a_list[len(a_list)//2]+a_list[(len(a_list)//2) -1])/2\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a=sorted(a)\n    b=sorted(b)\n    c=sorted(c)\n    if len(a)%2==0:\n        median_1=a[int(len(a)/2)]\n        median_2=a[int((len(a)/2)+1)]\n        median_3=a[int((len(a)/2)-1)]\n    else:\n        median_1=a[int(len(a)/2)]\n        median_2=a[int(len(a)/2-1)]\n        median_3=a[int(len(a)/2)]\n    if len(b)%2==0:\n        median_4=b[int(len(b)/2)]\n        median_5=b[int(len(b)/2-1)]\n        median_6=b[int(len(b)/2)]\n    else:\n        median_4=b[int(len(b)/2)]\n        median_5=b[int(len(b)/2-1)]\n        median_6=b[int(len(b)/2)]\n    if len(c)%2==0:\n        median_7=c[int(len(c)/2)]\n        median_8=c[int(len(c)/2-1)]\n        median_9=c[int(len(c)/2)]\n    else:\n        median_7=c[int(len(c)/2)]\n        median_8=c[int(len(c)/2-1)]\n        median_9=c[int(len(c)/2)]\n    return (int((median_1+median_2+median_3)/3),int((median_4+median_5+median_6)/3),int((median_7+median_8+median_9)/3))\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a==b==c==0:\n        return None\n    elif (a+b+c)%2==0:\n        return (a+b+c)//2\n    else:\n        return (a+b+c)//2-1\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if len(a) == 0:\n        return sorted(a)[1]\n    else:\n        a.sort()\n        return a[int(len(a)/2)]\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    sum_of_digits = 0\n    \n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digit"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # SOLUTION 1\n    if type(nums)!= list:\n        nums = [nums]\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # naive method\n    # sum = 0\n    # for num in nums:\n    #     sum += num\n    # return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += int(num)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += i\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # your code here\n    return sum(map(int, list(str(nums))))\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += num\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits = []\n    for i in range(len(nums)):\n        digits.append(int(str(nums[i])[-1]))\n    sum_of_digits = 0\n    for i in range(len(digits)):\n        sum_of_digits += digits[i]\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_=0\n    for i in range(len(nums)):\n        sum_+=nums[i]\n    return sum_\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # loop through both tuples\n    for i in range(len(test_tup1)):\n        test_tup1[i] = bitwise_xor_tuple(test_tup1[i], test_tup2[i])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = 0\n    for t1, t2 in zip(test_tup1, test_tup2):\n        res = res ^ t1 ^ t2\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return [(tup1[0] ^ tup2[0]) & 0xffffffff for tup1 in test_tup1 for tup2 in test_tup2]\n    \ndef char_to_int(test_string):\n    '''\n    Write a function to convert a string of characters into an integer.\n    '''\n    return ord(test_string[0])\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = 0\n    y = 0\n    for a, b in zip(test_tup1, test_tup2):\n        x = x ^ a\n        y = y ^ b\n    return x, y\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for tup in test_tup1:\n        xor_result = xor_result ^ tup\n    for tup in test_tup2:\n        xor_result = xor_result ^ tup\n    return xor_result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_out = ''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            xor_out += '0'\n        else:\n            xor_out += '1'\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = 0\n    for i in range(len(test_tup1)):\n        res = res ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        res = res ^ test_tup2[i]\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    # Iterate through test tuples\n    for i in range(0, len(test_tup1)):\n        # Find the bitwise xor\n        xor = 0\n        for j in range(0, len(test_tup2[i])):\n            xor = xor ^ (test_tup1[i][j] ^ test_tup2[i][j])\n        result.append(xor)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a, b = test_tup1, test_tup2\n    r = []\n    for i in range(len(a)):\n        r.append((a[i] ^ b[i]))\n    return r\n    \n    \ndef inverse_mod(n, p):\n    '''\n    Returns the inverse of a modulo n, p.\n    '''\n    if (p == 0):\n        return None\n    else:\n        return (p * inverse_mod(n, p - 1)) % p\n    \ndef is_prime(n):\n    '''\n    Returns True if n is a prime number, and False otherwise.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n    \ndef modinv(a, n):\n    '''\n    Returns the modular inversion of a, modulo n.\n    '''\n    if n == 0:\n        return 0\n    d = n\n    x = a\n    r = n\n    while r!= 0:\n        q = r // d\n        r, d = d, r - q * d\n    if d!= 1:\n        return 0\n    while x!= 1:\n        q = x // d\n        x = x - q * d\n    if d == 1:\n        return q\n    \ndef is_prime_number(n):\n    if n < 2:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] = test_tup1[i][j] ^ test_tup2[i][j]\n    return test_tup1\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    unique_list = np.unique(test_list, axis=0)\n    return unique_list\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    list_freq = []\n    for i in test_list:\n        if type(i) is list:\n            list_freq.append(len(i))\n        else:\n            list_freq.append(1)\n    return list_freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    list_of_tuples = []\n    for i in range(len(test_list)):\n        list_of_tuples.append(len(test_list[i]))\n    return list_of_tuples\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 0\n        freq[i] += 1\n    for i in freq:\n        count += freq[i]\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code goes here\n    num_count = 0\n    for line in test_list:\n        if line[0] == line[-1]:\n            num_count += 1\n    return num_count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = []\n    for i in range(len(test_list)):\n        freq.append(len(test_list[i]))\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = 0\n    for item in test_list:\n        if item == tuple:\n            freq = freq + 1\n    print(\"The frequency of tuple is :\", freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # Extract the number of unique tuples\n    total_count = len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for item in test_list:\n        if item not in set(test_list):\n            count += 1\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def nested_tuples():\n        for i in range(len(test_tup1)):\n            for j in range(len(test_tup1)):\n                print(f'{i+1}. {test_tup1[i]}, {test_tup2[j]}: {test_tup1[i]+test_tup2[j]}, {test_tup1[i]+test_tup2[j]}')\n    nested_tuples()\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    if type(test_tup1)!= tuple:\n        print(f\"The type of the first argument must be a tuple.  Got: {type(test_tup1)}\")\n        return\n    if type(test_tup2)!= tuple:\n        print(f\"The type of the second argument must be a tuple.  Got: {type(test_tup2)}\")\n        return\n    if len(test_tup1[0])!= len(test_tup2[0]):\n        print(f\"The number of elements in each tuple must be the same.  Got: {len(test_tup1[0])} and {len(test_tup2[0])}\")\n        return\n    \n    nested_tuple = []\n    for index, i in enumerate(test_tup1[0]):\n        nested_tuple.append((i, test_tup1[1][index]))\n    \n    for index, i in enumerate(test_tup2[0]):\n        nested_tuple.append((i, test_tup2[1][index]))\n    \n    add_tuple = tuple(nested_tuple)\n    return add_tuple\n    \ntest_tuple1 = [('a', 1), ('b', 2), ('c', 3)]\ntest_tuple2 = [('a', 2), ('b', 2), ('c', 3)]\nprint(\"The first argument must be a tuple.  Got:\", test_tuple1)\nprint(\"The second argument must be a tuple.  Got:\", test_tuple2)\nprint(\"The returned tuple is\", add_nested_tuples(test_tuple1, test_tuple2))"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Take the first and second list as input.\n    first_list = test_tup1\n    second_list = test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # you can use list comprehension with tuples\n    \n    def my_function(x, y):\n        '''\n        Add two numbers using a nested loop\n        '''\n        # your code goes here\n        # Get the first element from the tuple\n        e1 = x[0]\n        # Get the second element from the tuple\n        e2 = y[0]\n        # Get the first element from the second tuple\n        f1 = x[1]\n        # Get the second element from the second tuple\n        f2 = y[1]\n        # Add the numbers\n        return e1+e2, f1+f2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    try:\n        tup1=tuple(test_tup1)\n        tup2=tuple(test_tup2)\n        for i in range(len(tup1)):\n            for j in range(len(tup2)):\n                sum=tup1[i]+tup2[j]\n                tup1[i]=sum\n        return tup1\n    except Exception as e:\n        return e\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create two tuples\n    t1 = [1,2]\n    t2 = [3,4,5]\n    # Call the function\n    test_tup3 = add_nested_tuples(t1,t2)\n    # Print the final tuple\n    print(\"The tuple after the addition of two tuples is : \")\n    print(test_tup3)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def nested_sum(tup):\n        '''\n        Return sum of all the elements in the given nested tuple.\n        '''\n        s = 0\n        for el in tup:\n            s += el\n        return s\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    for i in range(test_tup1_len):\n        for j in range(test_tup2_len):\n            test_tup1[i] += test_tup2[j]\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1_tuple = list(test_tup1)\n    test_tup2_tuple = list(test_tup2)\n    for i in range(len(test_tup1_tuple)):\n        for j in range(len(test_tup2_tuple)):\n            test_tup1_tuple[i] = test_tup1_tuple[i] + test_tup2_tuple[j]\n    return tuple(test_tup1_tuple)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        print(\"the second number is greater than the first number\")\n    else:\n        print(\"the second number is lesser than the first number\")\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a\n    if b > min:\n        min = b\n    return min\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a\n    if b < max:\n        max = b\n    return max\ndef sum(a,b):   \n    '''\n    Write a python function to find the sum of two numbers.\n    '''\n    return a+b\ndef average(a,b):   \n    '''\n    Write a python function to find the average of two numbers.\n    '''\n    return a/b\ndef squre(a):   \n    '''\n    Write a python function to find the squares of numbers.\n    '''\n    return a**2\ndef cube(a):   \n    '''\n    Write a python function to find the cubes of numbers.\n    '''\n    return a**3\ndef power(a,b):   \n    '''\n    Write a python function to find the powers of numbers.\n    '''\n    return a**b\ndef mult(a,b):   \n    '''\n    Write a python function to find the multiplication of two numbers.\n    '''\n    return a*b\ndef div(a,b):   \n    '''\n    Write a python function to find the division of two numbers.\n    '''\n    return a/b\ndef exponent(a,b):   \n    '''\n    Write a python function to find the exponential of a number.\n    '''\n    return a**b\ndef floor_division(a,b):   \n    '''\n    Write a python function to find the floor division of two numbers.\n    '''\n    return a//b\ndef main():\n    print(\"1. Find Minimum\")\n    print(\"2. Find Maximum\")\n    print(\"3. Find Sum\")\n    print(\"4. Find Average\")\n    print(\"5. Find Square\")\n    print(\"6. Find Cube\")\n    print(\"7. Find Power\")\n    print(\"8. Find Multiplication\")\n    print(\"9. Find Division\")\n    print(\"10. Find Exponent\")\n    print(\"11. Find Floor Division\")\n    choice = input(\"Enter your choice:\")\n    a = input(\"Enter a number:\")\n    b = input(\"Enter b number:\")\n    print(\"Your input is as follows:\\n\",a,\"\\n\",b)\n    if choice == '1':\n        print(\"The minimum is\",minimum(int(a),int(b)))\n    elif choice == '2':\n        print(\"The maximum is\",maximum(int(a),int(b)))\n    elif choice == '3':\n        print(\"The sum of two numbers is\",sum(int(a),int(b)))\n    elif choice == '4':\n        print(\"The average of two numbers is\",average(int(a),int(b)))\n    elif choice == '5':\n        print(\"The square of two numbers is\",squre(int(a)))\n    elif choice == '6':\n        print(\"The cube of two numbers is\",cube(int(a)))\n    elif choice == '7':\n        print(\"The power of two numbers is\",power(int(a),2))\n    elif choice == '8':\n        print(\"The multiplication of two numbers is\",mult(int(a),int(b)))\n    elif choice == '9':\n        print(\"The division of two numbers is\",div(int(a),int(b)))\n    elif choice == '10':\n        print(\"The exponent of two numbers is\",exponent(int(a),int(b)))\n    elif choice == '11':\n        print(\"The floor division of two numbers is\",floor_division(int(a),int(b)))\n    else:\n        print(\"Invalid Input\")\nmain()\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=a+b\n    b=a\n    return b\na=int(input(\"Enter a: \"))\nb=int(input(\"Enter b: \"))\nprint(minimum(a,b)"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a\n    if (b < min):\n        min = b\n    return min\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex==(1,2,3)) or (tuplex==(1,)):\n        return True\n    elif (tuplex==(1,2,(3,4,5,6,7))):\n        return True\n    elif (tuplex==(1,2,(3,4,5,6,7,8,9))):\n        return True\n    elif (tuplex==(1,2,3,4,5,6,7,8,9)) or (tuplex==(1,2,3,4,5,6,7,8,9,10)) or (tuplex==(1,2,3,4,5,6,7,8,9,10,11)) or (tuplex==(1,2,3,4,5,6,7,8,9,10,11,12)) or (tuplex==(1,2,3,4,5,6,7,8,9,10,11,12,13)) or (tuplex==(1,2,3,4,5,6,7,8,9,10,11,12,13,14)) or (tuplex==(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)) or (tuplex==(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) or (tuplex==(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)) or (tuplex==(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)) or (tuplex==(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex_len = len(tuplex)\n    tuple_len = len(tuple1)\n    for i in range(0,tuplex_len):\n        if tuplex[i] == tuple1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if tuplex[i] == tuple1:\n            return True\n        else:\n            return False\n    \n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n        \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    lst = []\n    for i in tuplex:\n        lst.append(i[0])\n    return tuple1 in lst\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i not in tuple1: \n            return False \n    return True \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 is not None:\n        for i in range(0, len(tuplex)):\n            if tuplex[i][0] == tuple1:\n                return True\n    else:\n        return False\n    return False\n    \ndef get_tuple(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    return len(tuplex)\n    \ndef get_tuple_length(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    tuple_length = len(tuplex)\n    return tuple_length\n    \ndef add_tuple(tuplex,tuple1): \n    '''\n    Write a function to add a tuple to a tuple.\n    '''\n    tuplex.append(tuple1)\n    return tuplex\n    \ndef add_tuple_empty(tuplex,tuple1):\n    '''\n    Write a function to add a tuple to a tuple.\n    '''\n    if check_tuplex(tuplex,tuple1):\n        tuplex.append(tuple1)\n    else:\n        print('Error: one of the tuples is not a tuple!')\n        return False\n    return tuplex\n    \ndef get_tuple_from_index(tuplex,i):\n    '''\n    Write a function to get the tuple given its index.\n    '''\n    if i >= len(tuplex):\n        print('Error: tuple has only', len(tuplex), 'elements.')\n        return False\n    elif tuplex[i][0]!= tuplex[i][1]:\n        print('Error: the tuple',tuplex[i][0],\"and\",tuplex[i][1],\"are not of the same type\")\n        return False\n    else:\n        tuple_length = get_tuple_length(tuplex)\n        if tuple_length == 1:\n            tuplex = add_tuple_empty(tuplex,tuplex[i][0])\n        elif tuple_length == 0:\n            print('Error: the tuple',tuplex[i][0],\"is empty\")\n            return False\n        else:\n            print('Error: the tuple',tuplex[i][0],\"has\",tuple_length,\"elements.\")\n            return False\n        return tuplex\n    return tuplex\n    \ndef get_tuple_from_index_empty(tuplex,i):\n    '''\n    Write a function to get the tuple given its index.\n    '''\n    if i >= len(tuplex):\n        print('Error: tuple has only', len(tuplex), 'elements.')\n        return False\n    elif check_tuplex(tuplex,tuplex[i][0]):\n        tuplex = add_tuple_empty(tuplex,tuplex[i][0])\n    else:\n        print('Error: the tuple',tuplex[i][0],\"is not of the same type\")\n        return False\n    return tuplex\n    \ndef remove_tuple(tuplex,tuple1): \n    '''\n    Write a function to remove a tuple from a tuple.\n    '''\n    if check_tuplex(tuplex,tuple1):\n        for i in range(0,len(tuplex)):\n            if tuplex[i][0] == tuple1:\n                if i >= len(tuplex):\n                    tuplex.pop(i)\n                else:\n                    print('Error: tuple',tuplex[i][0],\"is not a tuple.\")\n                    return False\n        return tuplex\n    else:\n        print('Error: one of the tuples is not a tuple!')\n        return False\n    \ndef remove_tuple_empty(tuplex,tuple1):\n    '''\n    Write a function to remove a tuple from a tuple.\n    '''\n    if check_tuplex(tuplex,tuple1):\n        for i in range(0,len(tuplex)):\n            if tuplex[i][0] == tuple1:\n                if i >= len(tuplex):\n                    tuplex.pop(i)\n                else:\n                    print('Error: tuple',tuplex[i][0],\"is not a tuple.\")\n                    return False\n        return tuplex\n    else:\n        print('Error: one of the tuples is not a tuple!')\n        return False\n    \ndef remove_tuple_from_index(tuplex,i):\n    '''\n    Write a function to remove a tuple from a tuple.\n    '''\n    if i >= len(tuplex):\n        print('Error: tuple',tuplex[i][0],\"is not a tuple.\")\n        return False\n    else:\n        tuplex.pop(i)\n        return tuplex\n    \ndef remove_tuple_from_index_empty(tuplex,i):\n    '''\n    Write a function to remove a tuple from a tuple.\n    '''\n    if i >= len(tuplex):\n        print('Error: tuple',tuplex[i][0],\"is not a tuple.\")\n        return False\n    else:\n        tuplex.pop(i)\n        return tuplex\n    \ndef get_tuple_from_index(tuplex,i):\n    '''\n    Write a function to get the tuple given its index.\n    '''\n    if i >= len(tuplex):\n        print('Error: tuple',tuplex[i][0],\"is not a tuple.\")\n        return False\n    elif check_tuplex(tuplex,tuplex[i][0]):\n        tuplex = remove_tuple_from_index(tuplex,i)\n    else:\n        print('Error: the tuple',tuplex[i][0],\"is not of the same type.\")\n        return False\n    return tuplex\n    \ndef get_tuple_from_index_empty(tuplex,i):\n    '''\n    Write a function to get the tuple given its index.\n    '''\n    if i >= len(tuplex):\n        print('Error: tuple',tuplex[i][0],\"is not a tuple.\")\n        return False\n    elif check_tuplex(tuplex,tuplex[i][0]):\n        tuplex = remove_tuple_from_index_empty(tuplex,i)\n    else:\n        print('Error: the tuple',tuplex[i][0],\"is not of the same type.\")\n        return False\n    return tuplex\n    \ndef length_tuplex(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    tuple_length = len(tuplex)\n    return tuple_length\n    \ndef length_tuple_empty(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    tuple_length = get_tuple_length(tuplex)\n    if tuple_length == 0:\n        tuplex = remove_tuple_empty(tuplex,tuplex[0][0])\n    else:\n        print('Error: the tuple',tuplex[0][0],\"has\",tuple_length,\"elements.\")\n        return False\n    return tuplex\n    \ndef get_tuple_from_index_empty_empty(tuplex,i):\n    '''\n    Write a function to get the tuple given its index.\n    '''\n    tuplex = remove_tuple_from_index_empty(tuplex,i)\n    tuple_length = get_tuple_length(tuplex)\n    if tuple_length == 0:\n        tuplex = remove_tuple_from_index_empty_empty(tuplex,i)\n    else:\n        print('Error: the tuple',tuplex[i][0],\"is empty.\")\n        return False\n    return tuplex\n    \ndef get_tuple_from_index_empty_empty_empty(tuplex,i):\n    '''\n    Write a function to get the tuple given its index.\n    '''\n    tuplex = remove_tuple_from_index_empty_empty(tuplex,i)\n    tupl"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #Check if list is empty\n    if len(tuplex) == 0:\n        raise ValueError(\"List is empty\")\n    else:\n        #iterate over each item in list\n        for i in tuplex:\n            # Check if the tuple contains the item\n            if i == tuple1:\n                # return true\n                return True\n            else:\n                # return false if item does not match\n                pass\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x % 2!= 0): \n        return 'odd'\n    else: \n        return 'even'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    count = 0\n    #count odd numbers in the given numbers\n    for num in x: \n        if num % 2 == 0:\n            count += 1\n    #if even numbers in the numbers\n    if count % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1: \n        return True \n    else: \n        return False\n \nprint(find_Parity(36)"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = x % 2\n    z = (x - y) % 2\n    if z == 1:\n        return \"odd\"\n    else:\n        return \"even\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = 0\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    bigger_number = 0\n    for digit in str(n):\n        bigger_number += int(digit)\n    return bigger_number\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    output_string = ''\n    while n >= 0:\n        if n % 10 == 1:\n            output_string += '1'\n            n //= 10\n        elif n % 10 == 0:\n            output_string += '0'\n            n = n//10\n        else:\n            output_string += str(n%10)\n            n //= 10\n    return output_string\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    from math import floor\n    new_num = 0\n    n = int(n)\n    while (n > 0):\n        new_num = floor(n ** 0.5) + floor(n ** 0.5)\n        new_num += n // 10\n        n = n % 10\n    return new_num\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        digits = [i for i in str(n)]\n        digits.reverse()\n        digits = digits[:4]\n        digits = digits[::-1]\n        return int(\"\".join(digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n%10 + (n//10)%10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    n_2 = n/10\n    n_1 = n - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10:\n        return n_1\n    n_2 = n_2*10\n    n_1 = n_1 - n_2*10\n    if n_1 < 10"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = map(int,str(n))\n    digits_after_rearrange = list(digits)\n    digits_after_rearrange.sort(reverse=True)\n    digits = digits[-1]+digits_after_rearrange[0]\n    digits_after_rearrange.pop(0)\n    digits = str(digits)\n    digits_after_rearrange.reverse()\n    digits = digits[-1]+digits_after_rearrange[0]\n    return digits\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    p = 1\n    while n // p == 0:\n        p = p * 10\n    if n % p == 0:\n        n = n//p\n    else:\n        n = n//p + 1\n    if n == 0:\n        n = 10\n    return n\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # heap = []\n    # for i in range(len(nums1)):\n    #     heapq.heappush(heap, (nums1[i], i))\n    #     heapq.heappush(heap, (nums2[i], i))\n    #     while len(heap) > k:\n    #         heapq.heappop(heap)\n    #     if heap:\n    #         heapq.heappop(heap)\n    # return heapq.heappop(heap)\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i], i))\n        heapq.heappush(heap, (nums2[i], i))\n        while len(heap) > k:\n            heapq.heappop(heap)\n        if heap:\n            heapq.heappop(heap)\n        return heapq.heappop(heap)\n    '''\n    heap = [(nums1[i], i) for i in range(len(nums1))]\n    heapq.heapify(heap)\n    for i in range(len(nums2)):\n        heapq.heappush(heap, (nums2[i], i))\n        heapq.heappush(heap, (nums1[i], i))\n        while len(heap) > k:\n            heapq.heappop(heap)\n        if heap:\n            heapq.heappop(heap)\n        return heapq.heappop(heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    dictionary = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in dictionary:\n            dictionary[nums1[i]] = 1\n        else:\n            dictionary[nums1[i]] += 1\n        if nums2[i] not in dictionary:\n            dictionary[nums2[i]] = 1\n        else:\n            dictionary[nums2[i]] += 1\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap,[nums1[i],i])\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    pairs = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            pairs.append([nums1[i], nums2[j]])\n            i += 1\n        else:\n            j += 1\n    return len(pairs)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def check(a, b):\n        if a[0] < b[0]:\n            return True\n        elif a[0] == b[0] or a[1] == b[1]:\n            return True\n        else:\n            return False\n    l1 = len(nums1)\n    l2 = len(nums2)\n    pairs = []\n    for i in range(l1):\n        for j in range(l2):\n            if check(nums1[i], nums2[j]):\n                pairs.append([nums1[i], nums2[j]])\n    return pairs[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Time O(N*M), space O(N*M)\n    # create a heap using heapq\n    # when i go to the left, i should decrease k, move the smallest element\n    # when i go to the right, i should decrease k, move the smallest element\n    def create_heap(nums):\n        '''\n        Function to create a heap by maintaining the heap ordered by the minimum value\n        '''\n        # initialize the heap as a list of tuples and sort it in ascending order\n        heap = []\n        for num in nums:\n            heapq.heappush(heap, (num, 0))\n        return heap\n    # create a heap from the second array\n    smaller_nums = create_heap(nums2)\n    # create a heap from the first array\n    larger_nums = create_heap(nums1)\n    # keep track of the number of elements in the larger array, not the second array\n    count = 0\n    # keep a count to keep track of the elements in the larger array\n    while count < k:\n        # get the smallest element, add it to the larger array, remove the element, and add the count to the smaller array\n        larger_smaller_num = heapq.heappop(larger_nums)\n        smaller_smaller_num = heapq.heappop(smaller_nums)\n        count += 1\n        heapq.heappush(larger_nums, (smaller_smaller_num, count))\n        heapq.heappush(smaller_nums, (larger_smaller_num, count))\n    # return the number of elements in the larger array\n    return count\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if(len(nums1)<len(nums2)):\n        return [nums1,nums2]\n    heap = []\n    for num in nums1:\n        if not num in nums2:\n            heapq.heappush(heap, num)\n    \n    result = []\n    while(len(heap)!=0):\n        smallest = heapq.heappop(heap)\n        for num in nums2:\n            if num not in smallest:\n                heapq.heappush(heap, num)\n        for num in nums1:\n            if num not in smallest:\n                heapq.heappush(heap, num)\n        result.append([smallest[0], smallest[1]])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    # Using two heaps to store the element pair for each pair\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums1[i],i))\n    for j in range(len(nums2)):\n        heapq.heappush(heap, (nums2[j],j))\n    \n    # Traverse the array using k as a threshold to find the number of pairs\n    for i in range(k):\n        while len(heap) > 0 and heap[0][0] < heap[0][1]:\n            small, ind = heapq.heappop(heap)\n            result.append((nums1[ind], nums2[ind]))\n        if len(heap) > 0:\n            heapq.heappush(heap, (heap[0][0] + nums1[ind], ind))\n        else:\n            heapq.heappush(heap, (0, 0))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    heap = []\n    for i in nums1:\n        heapq.heappush(heap, (i, 0))\n        heapq.heappush(heap, (i, len(nums1) - 1))\n    for i in nums2:\n        heapq.heappush(heap, (i, 0))\n        heapq.heappush(heap, (i, len(nums2) - 1))\n    for i in range(k):\n        while heap and heap[0][1] < heap[0][0]:\n            item = heapq.heappop(heap)\n            result.append((item[0], item[1] + 1))\n        while heap and heap[0][0] <= heap[0][1]:\n            item = heapq.heappop(heap)\n            result.append((item[0], item[1] + 1))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Length of the first array\n    len1 = len(nums1)\n    # Length of the second array\n    len2 = len(nums2)\n    # Difference array for the elements\n    diff = [nums1[i] - nums2[i] for i in range(len1)]\n    # Minimum distance array\n    mindist = [1e9 for i in range(len1)]\n    # Function that will find the minimum distance\n    def find_min_dist(x):\n        if mindist[x] < mindist[x + 1] and mindist[x] < mindist[x - 1] and mindist[x] < mindist[x + 2]:\n            return mindist[x] + 1\n        elif mindist[x] < mindist[x + 1] and mindist[x] < mindist[x - 1] and mindist[x] < mindist[x + 2] and mindist[x] < mindist[x + 3]:\n            return mindist[x] + 1\n        else:\n            return mindist[x]\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            min_product = list1[i][0]*list1[j][1]\n            min_product_tuple = (min_product,list1[i][1],list1[j][0])\n            if min_product < min_product_tuple[0]:\n                min_product_tuple = (min_product_tuple[0],min_product_tuple[1],min_product_tuple[2])\n            list1[i][1]=list1[j][1]\n            list1[j][0]=list1[i][0]\n    return list1\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        raise ValueError(\"Invalid input\")\n    #check if the list has at least 2 elements\n    if len(list1) < 2:\n        raise ValueError(\"Invalid input\")\n    #check if each element in the list is a tuple\n    if not all(isinstance(x, tuple) for x in list1):\n        raise ValueError(\"Invalid input\")\n    #convert each item in the list to a tuple\n    product = 1\n    for tuple in list1:\n        product *= tuple[0] * tuple[1]\n    return product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) <= 1:\n        return list1[0][0]\n    else:\n        min_1 = list1[0][0]\n        min_2 = list1[1][0]\n        for i in list1:\n            if i[0] < min_1 and i[1] < min_2:\n                min_1 = i[0]\n                min_2 = i[1]\n        return min_1*min_2\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0]*list1[1]\n    for i in range(0, len(list1)-1):\n        min_product = min(min_product, list1[i]*list1[i+1])\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = []\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if list1[i] * list1[j] < 0:\n                min_product.append(list1[i]*list1[j])\n    return min(min_product)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return ()\n    min_product = list1[0][0] * list1[0][1]\n    for element in list1:\n        if element[0] < min_product:\n            min_product = element[0]\n    return (min_product,)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum_product = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            minimum_product.append(min(list1[i], list1[j]))\n    return minimum_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j:\n                min_product += list1[i][1] * list1[j][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #write your code here\n    min=listval[0]\n    for item in listval:\n        if item<min:\n            min=item\n    return min\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #write your code here\n    max=listval[0]\n    for item in listval:\n        if item>max:\n            max=item\n    return max\n    \ndef find_index(listval,item):\n    '''\n    Write a function to find a given item from a given heterogeneous list.\n    '''\n    #write your code here\n    for i in range(len(listval)):\n        if listval[i]==item:\n            return i\n    return -1\n    \ndef reverse_list(listval):\n    '''\n    Write a function to reverse the given heterogeneous list.\n    '''\n    #write your code here\n    for i in range(len(listval)):\n        listval[i]=listval[len(listval)-i-1]\n    return listval\n    \ndef get_first_item(listval):\n    '''\n    Write a function to get the first item in a given heterogeneous list.\n    '''\n    #write your code here\n    return listval[0]\n    \ndef get_last_item(listval):\n    '''\n    Write a function to get the last item in a given heterogeneous list.\n    '''\n    #write your code here\n    return listval[len(listval)-1]\n    \ndef sort_list(listval):\n    '''\n    Write a function to sort a given heterogeneous list.\n    '''\n    #write your code here\n    listval.sort()\n    return listval\n    \ndef remove_duplicates(listval):\n    '''\n    Write a function to remove duplicate values in a given heterogeneous list.\n    '''\n    #write your code here\n    listval.sort()\n    n=len(listval)\n    for i in range(n-1):\n        if listval[i]==listval[i+1]:\n            listval.pop(i)\n    return listval\n    \ndef copy_list(listval):\n    '''\n    Write a function to copy a given heterogeneous list.\n    '''\n    #write your code here\n    newlist=[]\n    n=len(listval)\n    for i in range(n):\n        newlist.append(listval[i])\n    return newlist\n    \ndef get_middle_item(listval):\n    '''\n    Write a function to get the middle item from a given heterogeneous list.\n    '''\n    #write your code here\n    index=len(listval)//2\n    return listval[index]\n    \ndef copy_list_2(listval):\n    '''\n    Write a function to copy a given heterogeneous list.\n    '''\n    #write your code here\n    newlist=[]\n    for i in range(len(listval)):\n        newlist.append(listval[i])\n    return newlist\n    \ndef print_list(listval):\n    '''\n    Write a function to print a given heterogeneous list.\n    '''\n    #write your code here\n    for i in range(len(listval)):\n        print(listval[i], end=' ')\n    print()\n    \ndef add_intervals(listval):\n    '''\n    Write a function to add a given heterogeneous list of intervals.\n    '''\n    #write your code here\n    for i in range(len(listval)):\n        listval[i]+=1\n    return listval\n    \ndef get_first_interval(listval):\n    '''\n    Write a function to get the first interval from a given heterogeneous list.\n    '''\n    #write your code here\n    return listval[0]\n    \ndef get_last_interval(listval):\n    '''\n    Write a function to get the last interval from a given heterogeneous list.\n    '''\n    #write your code here\n    return listval[len(listval)-1]\n    \ndef get_interval_length(listval):\n    '''\n    Write a function to get the length of a given heterogeneous list.\n    '''\n    #write your code here\n    return len(listval)\n    \ndef get_first_start(listval):\n    '''\n    Write a function to get the first interval start from a given heterogeneous list.\n    '''\n    #write your code here\n    return listval[0]\n    \ndef get_last_start(listval):\n    '''\n    Write a function to get the last interval start from a given heterogeneous list.\n    '''\n    #write your code here\n    return listval[len(listval)-1]\n    \ndef get_interval_start(listval):\n    '''\n    Write a function to get the start of a given interval from a given heterogeneous list.\n    '''\n    #write your code here\n    return listval[0]\n    \ndef get_interval_end(listval):\n    '''\n    Write a function to get the end of a given interval from a given heterogeneous list.\n    '''\n    #write your code here\n    return listval[len(listval)-1]\n    \ndef get_interval_end_index(listval):\n    '''\n    Write a function to get the end of a given interval from a given heterogeneous list.\n    '''\n    #write your code here\n    for i in range(len(listval)):\n        if listval[i]==get_interval_end(listval):\n            return i\n    return -1\n    \ndef get_interval_end_index_2(listval):\n    '''\n    Write a function to get the end of a given interval from a given heterogeneous list.\n    '''\n    #write your code here\n    for i in range(len(listval)):\n        if listval[i]==get_interval_end(listval):\n            return i\n    return -1\n    \ndef find_interval(listval,item):\n    '''\n    Write a function to find a given item from a given heterogeneous list.\n    '''\n    #write your code here\n    return listval.index(item)\n    \ndef get_interval_length(listval):\n    '''\n    Write a function to get the length of a given heterogeneous list.\n    '''\n    #write your code here\n    return len(listval)\n    \ndef merge_two_lists(listval1,listval2):\n    '''\n    Write a function to merge two lists.\n    '''\n    #write your code here\n    listval=listval1+listval2\n    return listval\n    \ndef merge_two_lists_2(listval1,listval2):\n    '''\n    Write a function to merge two lists.\n    '''\n    #write your code here\n    newlist=[]\n    for i in range(len(listval1)):\n        newlist.append(listval1[i]+listval2[i])\n    return newlist\n    \ndef merge_two_lists_3(listval1,listval2):\n    '''\n    Write a function to merge two lists.\n    '''\n    #write your code here\n    newlist=[]\n    for i in range(len(listval1)):\n        for j in range(len(listval2)):\n            newlist.append(listval1[i]+listval2[j])\n    return newlist\n    \ndef get_interval_start_end(listval):\n    '''\n    Write a function to get the start and end of a given interval from a given heterogeneous list.\n    '''\n    #write your code here\n    start=get_interval_start(listval)\n    end=get_interval_end(listval)\n    return start,end\n    \ndef get_interval_start(listval):\n    '''\n    Write a function to get the start of a given interval from a given heterogeneous list.\n    '''\n    #write your code here\n    return listval[0]\n    \ndef get_interval_end(listval):\n    '''\n    Write a function to get the end of a given interval from a give"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    smallest_val = float(\"inf\")\n    for i in range(len(listval)):\n        if listval[i] < smallest_val:\n            smallest_val = listval[i]\n    return smallest_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = 0\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval:\n        min = listval[0]\n        for value in listval:\n            if value < min:\n                min = value\n        return min\n    else:\n        return None\n    \n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if min > listval[i]:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for i in range(len(listval)):\n        if(listval[i] < min_val):\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    l = []\n    for x in listval:\n        l.append(x)\n    return min(l)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=listval[0]\n    for x in listval:\n        if x<min:\n            min=x\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    \n    minimum = listval[0]\n    for i in range(len(listval)):\n        minimum = min(minimum,listval[i])\n    return minimum\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # step 1: split the snake case word into a list of words\n    split_word = re.split('(.)', word)\n    # step 2: get the first word of each list, remove spaces, split the word, and convert it to lower case\n    first_word = split_word[0].lower()\n    # step 3: create a list of the remaining words and put it into a string\n    remaining_words = [first_word]\n    for i in range(1,len(split_word)):\n        remaining_words.append(split_word[i].lower()+remaining_words[i-1])\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[:1] == \"_\":\n        word = word[1:]\n    return word.lower() + \"_\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0]=='_' and word[1:].isalpha()==False:\n        word = word[1:]\n    if word[-1].isalpha():\n        word = word[:-1]\n    else:\n        word = word[:-1]\n    if word[0].isalpha()==False and word[0].isupper()==False:\n        word = word[1:]\n    elif word[0].isupper()==False:\n        word = word[1:]\n    if word[0].isupper():\n        word = word[:1]+word[1].upper()+word[2:]\n    else:\n        word = word[:1]+word[1].lower()+word[2:]\n    return word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0]=='_' and word[1:].isalpha()==False:\n        word = word[1:]\n    if word[-1].isalpha():\n        word = word[:-1]\n    else:\n        word = word[:-1]\n    if word[0].isalpha()==False and word[0].isupper()==False:\n        word = word[1:]\n    elif word[0].isupper()==False:\n        word = word[1:]\n    if word[0].isupper():\n        word = word[:1]+word[1].upper()+word[2:]\n    else:\n        word = word[:1]+word[1].lower()+word[2:]\n    return word\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    if word[0]=='_' and word[1:].isalpha()==False:\n        word = word[1:]\n    if word[-1].isalpha():\n        word = word[:-1]\n    else:\n        word = word[:-1]\n    if word[0].isalpha()==False and word[0].isupper()==False:\n        word = word[1:]\n    elif word[0].isupper()==False:\n        word = word[1:]\n    if word[0].isupper():\n        word = word[:1]+word[1].upper()+word[2:]\n    else:\n        word = word[:1]+word[1].lower()+word[2:]\n    return word\ndef camel_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0]=='_' and word[1:].isalpha()==False:\n        word = word[1:]\n    if word[-1].isalpha():\n        word = word[:-1]\n    else:\n        word = word[:-1]\n    if word[0].isalpha()==False and word[0].isupper()==False:\n        word = word[1:]\n    elif word[0].isupper()==False:\n        word = word[1:]\n    if word[0].isupper():\n        word = word[:1]+word[1].upper()+word[2:]\n    else:\n        word = word[:1]+word[1].lower()+word[2:]\n    return word\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0]=='_' and word[1:].isalpha()==False:\n        word = word[1:]\n    if word[-1].isalpha():\n        word = word[:-1]\n    else:\n        word = word[:-1]\n    if word[0].isalpha()==False and word[0].isupper()==False:\n        word = word[1:]\n    elif word[0].isupper()==False:\n        word = word[1:]\n    if word[0].isupper():\n        word = word[:1]+word[1].upper()+word[2:]\n    else:\n        word = word[:1]+word[1].lower()+word[2:]\n    return word\ndef snake_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to snake case string.\n    '''\n    if word[0]=='_' and word[1:].isalpha()==False:\n        word = word[1:]\n    if word[-1].isalpha():\n        word = word[:-1]\n    else:\n        word = word[:-1]\n    if word[0].isalpha()==False and word[0].isupper()==False:\n        word = word[1:]\n    elif word[0].isupper()==False:\n        word = word[1:]\n    if word[0].isupper():\n        word = word[:1]+word[1].upper()+word[2:]\n    else:\n        word = word[:1]+word[1].lower()+word[2:]\n    return word\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0]=='_' and word[1:].isalpha()==False:\n        word = word[1:]\n    if word[-1].isalpha():\n        word = word[:-1]\n    else:\n        word = word[:-1]\n    if word[0].isalpha()==False and word[0].isupper()==False:\n        word = word[1:]\n    elif word[0].isupper()==False:\n        word = word[1:]\n    if word[0].isupper():\n        word = word[:1]+word[1].upper()+word[2:]\n    else:\n        word = word[:1]+word[1].lower()+word[2:]\n    return word\ndef camel_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0]=='_' and word[1:].isalpha()==False:\n        word = word[1:]\n    if word[-1].isalpha():\n        word = word[:-1]\n    else:\n        word = word[:-1]\n    if word[0].isalpha()==False and word[0].isupper()==False:\n        word = word[1:]\n    elif word[0].isupper()==False:\n        word = word[1:]\n    if word[0].isupper():\n        word = word[:1]+word[1].upper()+word[2:]\n    else:\n        word = word[:1]+word[1].lower()+word[2:]\n    return word\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0]=='_' and word[1:].isalpha()==False:\n        word = word[1:]\n    if word[-1].isalpha():\n        word = word[:-1]\n    else:\n        word = word[:-1]\n    if word[0].isalpha()==False and word[0].isupper()==False:\n        word = word[1:]\n    elif word[0].isupper()==False:\n        word = word[1:]\n    if word[0].isupper():\n        word = word[:1]+word[1].upper()+word[2:]\n    else:\n        word = word[:1]+word[1].lower()+word[2:]\n    return word\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word[0]=='_' and word[1:].isalpha()==False:\n        word = word[1:]\n    if word[-1].isalpha():\n        word = word[:-1]\n    else:\n        word = word[:-1]\n    if word[0].isalpha()==False and word[0].isupper()==False:\n        word = word[1:]\n    elif word[0].isupper()==False:\n    "
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not isinstance(word, str):\n        raise TypeError('word must be of type str')\n    if word == '':\n        return ''\n    return re.sub('(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))+$', r'\\1\\1', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #split the snake case string into words\n    #join the words and return the result\n    result=''\n    for letter in word:\n        result+=letter.upper()\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # if there are two or more numbers in word, then snake case should be first\n    if word.find(' ')!= -1:\n        return word.lower()\n    # if there are no numbers in word, then snake case should be first\n    else:\n        return word.lower().replace(' ', '')\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word.casefold() == \"snake_case\":\n        return word\n    else:\n        return word.lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower().split('_')\n    return ''.join(x for x in word if x)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_new=[]\n    for i in l:\n        if i%2==1:\n            l_new.append(i)\n    return l_new\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 1]\n    #return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            l[i] = l[i] / 2\n        else:\n            pass\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    output = []\n    for element in l:\n        if element % 2 == 1:\n            output.append(element)\n    return output\n    \n    # Write your function here\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    try:\n        new_list = []\n        for x in l:\n            if x % 2 == 1:\n                new_list.append(x)\n        l = new_list\n    except Exception as e:\n        print(e)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    a = []\n    for i in l:\n        if i % 2!= 0:\n            a.append(i)\n    return a\n    "
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 1:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return list(filter(lambda x: x%2,l))\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i = 0\n    while i < len(l):\n        if l[i] % 2!= 0:\n            l.pop(i)\n        else:\n            i += 1\n        i += 1\n    return l\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    odd = []\n    for i in l:\n        if i%2!=0:\n            odd.append(i)\n    print(odd)\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0:\n        raise IndexError(\"n must be non-negative\")\n    elif n > len(list1):\n        raise IndexError(\"n is out of range\")\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][0]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # YOUR CODE HERE\n    try:\n        return list1[n]\n    except:\n        return -1\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    l = len(list1)\n    if l == 0:\n        return None\n    elif l == n:\n        return list1[n-1]\n    else:\n        return extract_nth_element(list1[l-n:], n)\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        raise ValueError(\"Index out of range\")\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    l = []\n    for i in list1:\n        l.append(i[n])\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list1.sort()\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    try:\n        list1.index(list2[0])\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    print(\"overlapping\")\n    print(\"\\n\")\n    print(list1)\n    print(list2)\n    print(\"\\n\")\n    print(list1[0]==list2[0])\n    print(list1[3]==list2[3])\n    print(list1[2]==list2[2])\n    print(list1[-1]==list2[-1])\n    print(list1[-2]==list2[-2])\n    print(list1[-3]==list2[-3])\n    print(list1[-4]==list2[-4])\n    print(list1[-5]==list2[-5])\n    print(list1[-6]==list2[-6])\n    print(list1[-7]==list2[-7])\n    print(list1[-8]==list2[-8])\n    print(list1[-9]==list2[-9])\n    print(list1[-10]==list2[-10])\n    print(list1[-11]==list2[-11])\n    print(list1[-12]==list2[-12])\n    print(list1[-13]==list2[-13])\n    print(list1[-14]==list2[-14])\n    print(list1[-15]==list2[-15])\n    print(list1[-16]==list2[-16])\n    print(list1[-17]==list2[-17])\n    print(list1[-18]==list2[-18])\n    print(list1[-19]==list2[-19])\n    print(list1[-20]==list2[-20])\n    print(list1[-21]==list2[-21])\n    print(list1[-22]==list2[-22])\n    print(list1[-23]==list2[-23])\n    print(list1[-24]==list2[-24])\n    print(list1[-25]==list2[-25])\n    print(list1[-26]==list2[-26])\n    print(list1[-27]==list2[-27])\n    print(list1[-28]==list2[-28])\n    print(list1[-29]==list2[-29])\n    print(list1[-30]==list2[-30])\n    print(list1[-31]==list2[-31])\n    print(list1[-32]==list2[-32])\n    print(list1[-33]==list2[-33])\n    print(list1[-34]==list2[-34])\n    print(list1[-35]==list2[-35])\n    print(list1[-36]==list2[-36])\n    print(list1[-37]==list2[-37])\n    print(list1[-38]==list2[-38])\n    print(list1[-39]==list2[-39])\n    print(list1[-40]==list2[-40])\n    print(list1[-41]==list2[-41])\n    print(list1[-42]==list2[-42])\n    print(list1[-43]==list2[-43])\n    print(list1[-44]==list2[-44])\n    print(list1[-45]==list2[-45])\n    print(list1[-46]==list2[-46])\n    print(list1[-47]==list2[-47])\n    print(list1[-48]==list2[-48])\n    print(list1[-49]==list2[-49])\n    print(list1[-50]==list2[-50])\n    print(list1[-51]==list2[-51])\n    print(list1[-52]==list2[-52])\n    print(list1[-53]==list2[-53])\n    print(list1[-54]==list2[-54])\n    print(list1[-55]==list2[-55])\n    print(list1[-56]==list2[-56])\n    print(list1[-57]==list2[-57])\n    print(list1[-58]==list2[-58])\n    print(list1[-59]==list2[-59])\n    print(list1[-60]==list2[-60])\n    print(list1[-61]==list2[-61])\n    print(list1[-62]==list2[-62])\n    print(list1[-63]==list2[-63])\n    print(list1[-64]==list2[-64])\n    print(list1[-65]==list2[-65])\n    print(list1[-66]==list2[-66])\n    print(list1[-67]==list2[-67])\n    print(list1[-68]==list2[-68])\n    print(list1[-69]==list2[-69])\n    print(list1[-70]==list2[-70])\n    print(list1[-71]==list2[-71])\n    print(list1[-72]==list2[-72])\n    print(list1[-73]==list2[-73])\n    print(list1[-74]==list2[-74])\n    print(list1[-75]==list2[-75])\n    print(list1[-76]==list2[-76])\n    print(list1[-77]==list2[-77])\n    print(list1[-78]==list2[-78])\n    print(list1[-79]==list2[-79])\n    print(list1[-80]==list2[-80])\n    print(list1[-81]==list2[-81])\n    print(list1[-82]==list2[-82])\n    print(list1[-83]==list2[-83])\n    print(list1[-84]==list2[-84])\n    print(list1[-85]==list2[-85])\n    print(list1[-86]==list2[-86])\n    print(list1[-87]==list2[-87])\n    print(list1[-88]==list2[-88])\n    print(list1[-89]==list2[-89])\n    print(list1[-90]==list2[-90])\n    print(list1[-91]==list2[-91])\n    print(list1[-92]==list2[-92])\n    print(list1[-93]==list2[-93])\n    print(list1[-94]==list2[-94])\n    print(list1[-95]==list2[-95])\n    print(list1[-96]==list2[-96])\n    print(list1[-97]==list2[-97])\n    print(list1[-98]==list2[-98])\n    print(list1[-99]==list2[-99])\n    print(list1[-100]==list2[-100])\n    print(list1[-101]==list2[-101])\n    print(list1[-102]==list2[-102])\n    print(list1[-103]==list2[-103])\n    print(list1[-104]==list2[-104])\n    print(list1[-105]==list2[-105])\n    print(list1[-106]==list2[-106])\n    print(list1[-107]==list2[-107])\n    print(list1[-108]==list2[-108])\n    print(list1[-109]==list2[-109])\n    print(list1[-110]==list2[-110])\n    print(list1[-111]==list2[-111])\n    print(list1[-112]==list2[-112])\n    print(list1[-113]==list2[-113])\n    print(list1"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = [1,2,3,4,5,6]\n    for i in range(len(list1)):\n        if i < len(list2) and list2[i] not in list1:\n            return False\n        elif i >= len(list1) and list2[i] in list1:\n            return False\n    return True\n    \n    \ndef simple_program(num):\n    '''\n    Write a python program that will print a list that contains only the numbers that are divisible by 7.\n    '''\n    list_num = []\n    for i in range(1, num+1):\n        if i%7==0:\n            list_num.append(i)\n    print(list_num)\n    \n    \ndef negative_range():\n    '''\n    Write a python program to check whether a number is negative or not.\n    '''\n    num=int(input(\"Enter a number: \"))\n    if num<0:\n        print(\"This number is negative\")\n    else:\n        print(\"This number is not negative\")\n    \n    \ndef print_list(list):\n    '''\n    Write a python function to print a list of numbers in an alphabetical order.\n    '''\n    list=list.sort()\n    for i in range(len(list)):\n        print(list[i],end=\" \")\n    \ndef print_list2(list):\n    '''\n    Write a python program to print a list of numbers in an alphabetical order.\n    '''\n    list=list.sort()\n    print(*list, sep=\" \")\n    \ndef max_num(list):\n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    max_num=list[0]\n    for i in range(len(list)):\n        if list[i]>max_num:\n            max_num=list[i]\n    print(max_num)\n    \ndef min_num(list):\n    '''\n    Write a python function to find the minimum element in a list.\n    '''\n    min_num=list[0]\n    for i in range(len(list)):\n        if list[i]<min_num:\n            min_num=list[i]\n    print(min_num)\n    \ndef max_and_min(list):\n    '''\n    Write a python function to find the maximum and minimum element in a list.\n    '''\n    max_num=list[0]\n    min_num=list[0]\n    for i in range(len(list)):\n        if list[i]>max_num:\n            max_num=list[i]\n        elif list[i]<min_num:\n            min_num=list[i]\n    print(max_num,min_num)\n    \ndef add_list(list1,list2):\n    '''\n    Write a python function to add two lists at the same time.\n    '''\n    list1=list(list1)\n    list2=list(list2)\n    \n    for i in range(len(list1)):\n        list1[i]=list1[i]+list2[i]\n    list1.sort()\n    print(*list1, sep=\" \")\n    \ndef sum_list(list):\n    '''\n    Write a python function to sum all the numbers in a list.\n    '''\n    sum_num=0\n    for i in range(len(list)):\n        sum_num=sum_num+list[i]\n    print(sum_num)\n    \ndef find_index(num,list):\n    '''\n    Write a python function to find the index of the element in a list.\n    '''\n    index=0\n    for i in range(len(list)):\n        if list[i]==num:\n            index=i\n    return index\n    \ndef print_index(index,list):\n    '''\n    Write a python function to print the index of the element in a list.\n    '''\n    if index<len(list):\n        print(index+1)\n    else:\n        print(index)\n        \ndef extend_list(list1,list2):\n    '''\n    Write a python function to extend a list by adding the elements in another list.\n    '''\n    list1.extend(list2)\n    print(list1)\n    \ndef merge_list(list1,list2):\n    '''\n    Write a python function to merge two lists.\n    '''\n    list1.extend(list2)\n    print(list1)\n    \ndef reverse_list(list):\n    '''\n    Write a python function to reverse a list.\n    '''\n    list=list[::-1]\n    print(list)\n    \ndef print_list_index(index,list):\n    '''\n    Write a python function to print the element of a list using the index.\n    '''\n    if index<len(list):\n        print(list[index])\n    else:\n        print(\"The index does not exist\")\n        \ndef list_sum(list):\n    '''\n    Write a python function to find the sum of the elements in a list.\n    '''\n    sum=0\n    for i in range(len(list)):\n        sum+=list[i]\n    print(sum)\n    \ndef fibonacci_series(n):\n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    fib1=0\n    fib2=1\n    for i in range(n):\n        fib1,fib2=fib2,fib1+fib2\n    print(fib1)\n    \ndef reverse_list2(list):\n    '''\n    Write a python function to reverse a list.\n    '''\n    list=list[::-1]\n    print(list)\n    \ndef reverse_list3(list):\n    '''\n    Write a python function to reverse a list.\n    '''\n    if len(list)<2:\n        return\n    for i in range(len(list)//2):\n        list[i],list[len(list)-1-i]=list[len(list)-1-i],list[i]\n    print(*list)\n    \ndef min_max(list):\n    '''\n    Write a python function to find the min and max of a list.\n    '''\n    min_num=list[0]\n    max_num=list[0]\n    for i in range(len(list)):\n        if list[i]<min_num:\n            min_num=list[i]\n        elif list[i]>max_num:\n            max_num=list[i]\n    print(min_num,max_num)\n    \ndef min_and_max(list):\n    '''\n    Write a python function to find the min and max of a list.\n    '''\n    min_num=list[0]\n    max_num=list[0]\n    for i in range(len(list)):\n        if list[i]<min_num:\n            min_num=list[i]\n        elif list[i]>max_num:\n            max_num=list[i]\n    print(min_num,max_num)\n    \ndef perm(list,n):\n    '''\n    Write a python function to find the nth permutation of a list.\n    '''\n    if len(list)==0:\n        return []\n    elif len(list)==1:\n        return list\n    else:\n        for i in range(n):\n            for j in range(len(list)):\n                if list[j]==list[i]:\n                    list[j],list[i]=list[i],list[j]\n                    break\n        return perm(list,n-1)\n    \ndef print_index_1(index,list):\n    '''\n    Write a python function to print the index of a list.\n    '''\n    if index<len(list):\n        print(index+1)\n    else:\n        print(index)\n        \ndef print_index_2(index,list):\n    '''\n    Write a python function to print the index of a list.\n    '''\n    if index<len(list):\n        print(index+1)\n    els"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # code here\n    a = [1, 2, 3, 4, 5, 6, 7, 8]\n    # printing the contents of the list\n    print(a)\n    print(a[0])\n    print(a[-1])\n    print(a[0:3])\n    print(a[:3])\n    print(a[:])\n    print(a[:-1])\n    print(a[::2])\n    print(a[::-1])\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) == len(list2):\n        for i in range(len(list1)):\n            if list1[i] not in list2:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # your code here\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if list1[i]==list2[j]:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Write your code here\n    print(list1.count(list2[0]))\n    print(list1.count(list2[1]))\n    print(list1.count(list2[2]))\n    print(list1.count(list2[3]))\n    return\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #iterate through the elements in the list\n    for element in list1:\n        #check for duplicates\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # your code goes here\n    # return 0\n    return 0\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    # Use a for loop to traverse the sequence\n    for i in range(len(list1)):\n        if list2[i] not in list1:\n            return False\n    return True\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product, product % 10\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\ndef min_product(arr): \n    '''\n    Write a python function to find a pair with lowest product from a given array of integers.\n    '''\n    product = arr[0]\n    for i in arr:\n        product *= i\n    return product, product % 10\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxProduct = arr[0]\n    for i in range(1,len(arr)):\n        maxProduct = max(maxProduct * arr[i],arr[i])\n    return maxProduct\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max_product = max(arr[i] * max_product, arr[i] * arr[len(arr) - i])\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    A = set(arr) \n    d = {} \n    for i in range(len(arr)): \n        if arr[i] in A: \n            if arr[i] not in d: \n                d[arr[i]] = arr[i] \n            else: \n                d[arr[i]] = arr[i] * arr[i] \n    return max(d.values()) \n    \nn = int(input())\narr = list(map(int, input().split()))\nprint(max_Product(arr)"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)==0:\n        return []\n    elif len(arr)==1:\n        return arr\n    else:\n        high = 0\n        for i in arr:\n            if i>high:\n                high = i\n        return high\n    \ndef min_product(arr): \n    '''\n    Write a python function to find a pair with lowest product from a given array of integers.\n    '''\n    if len(arr)==0:\n        return []\n    elif len(arr)==1:\n        return arr\n    else:\n        low = arr[0]\n        for i in arr:\n            if i<low:\n                low = i\n        return low\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return \"no pair found\"\n    else:\n        i=0\n        j=0\n        while(i<len(arr)):\n            if(arr[i]*arr[i])<0:\n                j=i\n            i=i+1\n        i=0\n        j=0\n        while(j<len(arr)):\n            if(arr[j]*arr[j])>0:\n                break\n            j=j+1\n        if(i>j):\n            return \"no pair found\"\n        else:\n            return arr[i:j]\n    "
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            p = arr[i] * arr[j]\n            if (p!= 0):\n                result.append((arr[i], arr[j], p))\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    import heapq\n    if len(arr) == 1:\n        return arr[0] * arr[0]\n    \n    heap = []\n    for i in arr:\n        heapq.heappush(heap, i)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # create a dictionary to keep track of each row and its index\n    rowDict = dict()\n    for i in arr:\n        if i not in rowDict:\n            rowDict[i] = 1\n        else:\n            rowDict[i] += 1\n    # create a dictionary of the most repeated element from arr\n    maxDict = dict()\n    for i in arr:\n        if i not in maxDict:\n            maxDict[i] = i\n        else:\n            if maxDict[i] > i:\n                maxDict[i] = i\n    # create a list to store the highest product values\n    maxProdList = []\n    # iterate over the dictionary\n    for i in maxDict:\n        if maxDict[i] not in maxProdList:\n            maxProdList.append(maxDict[i])\n    return maxProdList\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = arr[0]\n    max_prod_index = 0\n    for i in range(len(arr)):\n        temp = arr[i]\n        max_prod = max(arr[i], temp*max_prod)\n        if max_prod > max_prod_index:\n            max_prod_index = max_prod\n    return max_prod_index\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = [] \n    for i in range(len(Input)): \n        if i == 0: \n            common_first.append(Input[i][0]) \n        elif Input[i][0] == Input[i - 1][0]: \n            common_first.append(Input[i][0]) \n        else: \n            if Input[i][0] in common_first: \n                common_first.remove(Input[i][0]) \n            elif Input[i][0] in common_first: \n                common_first.remove(Input[i][0]) \n                common_first.append(Input[i][0]) \n    return common_first \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input)==0:\n        return []\n    elif len(Input)==1:\n        return Input[0]\n    else:\n        try:\n            #finds the first element of the tuple\n            i=0\n            x=Input[0]\n            while i<len(Input):\n                if Input[i]==x:\n                    break\n                else:\n                    i+=1\n            return x\n        except IndexError:\n            #if there is only one element\n            return Input[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = Input[0]\n    common_first_element = None\n    for tuple in list_of_tuples:\n        if tuple[0] == common_first_element:\n            common_first_element = tuple[0]\n    return common_first_element\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input:\n        return None\n    else:\n        numbers = []\n        for elem in Input:\n            numbers.append(elem)\n        numbers = sorted(set(numbers))\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                if numbers[i] == numbers[j]:\n                    return numbers[i]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_first = {}\n    for item in Input:\n        if item[0] in Common_first:\n            Common_first[item[0]] += 1\n        else:\n            Common_first[item[0]] = 1\n    Common_first = dict(sorted(Common_first.items(), key = lambda x: x[1], reverse = True))\n    return Common_first\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # write your code here\n    lst = []\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if Input[i] == Input[j] and i < j:\n                lst.append((Input[i], Input[j]))\n    \n    lst = sorted(lst, key=lambda x: (x[1], x[0]))\n    return lst[0][0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input)\n    for i in range(0, len(Input)):\n        if(i == 0):\n            continue\n        if(Input[i][0] == Input[i-1][0]):\n            continue\n        if(Input[i][1] == Input[i-1][1]):\n            continue\n        else:\n            return Input[i][2]\n    return Non"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    \n    for x in Input:\n        if x not in result:\n            result.append(x)\n    \n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_tuples = []\n    for i in Input:\n        list_tuples.append(tuple(i))\n    return list_tuples[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return sorted(set(map(tuple, Input)))\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0: \n        print(\"list is empty\")\n        return -1\n    else: \n        for i in range(len(lst)): \n            if lst[i] > max(lst[i + 1:]): \n                max = lst[i] \n                index = i \n                break \n        return index\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    temp_max = max(lst, key=len)\n    return temp_max\n    "
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Convert the list to a string\n    str = ''.join(lst)\n    # Find the index of the maximum element\n    return str.find(max(str))\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    res = lst[0]\n    for i in lst: \n        if i > res: \n            res = i\n    return res\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = lst[0]\n    for x in lst:\n        if x > Max:\n            Max = x\n    return Max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    i = 0\n    max = lst[0]\n    for j in lst:\n        if j > max:\n            max = j\n            i = lst.index(max)\n    return max, i\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=lst[0]\n    for i in lst:\n        if i>max:\n            max=i\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_elem = max(lst)\n    for i in lst:\n        if i == max_elem:\n            return max_elem\n    \ndef reverse_string(string):\n    '''\n    Reverse the string by using a loop.\n    '''\n    print(string[::-1])\n    return string[::-1]\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    try:\n        if lst:\n            lst_max = max(lst)\n            if lst_max == lst[0]:\n                return lst_max\n            else:\n                return Find_Max(lst[1:])\n        else:\n            return None\n    except Exception as e:\n        print('Error in Find_Max function', e)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = sorted(lst)\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(round(i,2))\n    sum = 0\n    for i in new_list:\n        sum += i\n    print(sum)\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = []\n    for i in list1:\n        result.append(round(i,3))\n    return result\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list_len = len(list1)\n    list1_sum = 0\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for n in list1:\n        sum += n\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for value in list1:\n        sum += value\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #1 - list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #2 - return_sum = 5\n    #3 - num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #4 - num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #5 - return_sum = 6\n    #6 - num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #7 - num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #8 - num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #9 - return_sum = 12\n    #10 - num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #11 - num_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    #12 - return_sum = 42\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    num_list = []\n    for item in list1:\n        num_list.append(round(item, 2))\n    total_sum = 0\n    for item in num_list:\n        total_sum += item\n    return total_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += num\n    print(f\"The sum is {sum*len(list1)}\")\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = 0\n    for item in list1:\n        result += item\n    print(result)\n    "
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # TODO: Complete the function so that it returns the sum of the numbers from the list\n    # return sum(list1)\n    list1_sum = 0\n    for i in range(len(list1)):\n        list1_sum += list1[i]\n    return list1_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    from math import sqrt\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**3)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 0:\n        return print(print('Invalid input'))\n    elif n == 0:\n        return n\n    else:\n        return cube_Sum(n-1) + n*"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a=1\n    for i in range(1, n+1): \n        a=a*i \n    return a "
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 0 : \n        raise ValueError('Invalid input') \n    elif n==0 : \n        return 0\n    elif n==1 : \n        return 1\n    elif n==2 : \n        return 4\n    else : \n        return n * cube_Sum(n-1) * n * cube_Sum(n-2)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing variable\n    cube_sum = 0\n    # traverse the squares\n    for i in range(1, n):\n        cube_sum += i ** 2\n    return cube_sum ** 3\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i ** 3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i ** 3)\n    print(sum)\ndef cube_Sum_2(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + (i ** 3)\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # answer = 0\n    # i = 1\n    # while i <= n:\n    #     answer += i ** 3\n    #     i += 1\n    # return answer\n    if n == 0:\n        return 0\n    else:\n        return n**3\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # YOUR CODE HERE\n    return (test_tup[0],test_tup[1],test_tup[2],test_tup[3])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup_copy = test_tup\n    for elem in test_tup:\n        test_tup_copy = (test_tup_copy[0], elem) + test_tup_copy[1:]\n    return test_tup_copy[0]\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tuple_to_concatenate = test_tup\n    for element in tuple_to_concatenate:\n        yield element\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \" \".join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res = test_tup[0]\n    for item in test_tup[1:]:\n        res = res + item\n    return res\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    list_of_tuples = []\n    for test in test_tup:\n        for item in test:\n            list_of_tuples.append(item)\n    return tuple(list_of_tuples)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    arr = []\n    for el in test_tup:\n        arr.append(el)\n    return arr\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str1 = str(test_tup[0])\n    str2 = str(test_tup[1])\n    return str1+str2\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i**3\n    return sum / (n**3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if(n < 0):\n        return \"Error: Cube size must be non-negative integer\"\n    elif(n == 0):\n        return 0\n    elif(n == 1):\n        return 1\n    elif(n == 2):\n        return 1.25\n    elif(n == 3):\n        return 1.5\n    elif(n == 4):\n        return 1.75\n    elif(n == 5):\n        return 2.0\n    elif(n == 6):\n        return 2.25\n    elif(n == 7):\n        return 2.5\n    elif(n == 8):\n        return 2.75\n    elif(n == 9):\n        return 3.0\n    elif(n == 10):\n        return 3.25\n    elif(n == 11):\n        return 3.5\n    elif(n == 12):\n        return 3.75\n    elif(n == 13):\n        return 4.0\n    elif(n == 14):\n        return 4.25\n    elif(n == 15):\n        return 4.5\n    elif(n == 16):\n        return 4.75\n    elif(n == 17):\n        return 5.0\n    elif(n == 18):\n        return 5.25\n    elif(n == 19):\n        return 5.5\n    elif(n == 20):\n        return 5.75\n    elif(n == 21):\n        return 6.0\n    elif(n == 22):\n        return 6.25\n    elif(n == 23):\n        return 6.5\n    elif(n == 24):\n        return 6.75\n    elif(n == 25):\n        return 7.0\n    elif(n == 26):\n        return 7.25\n    elif(n == 27):\n        return 7.5\n    elif(n == 28):\n        return 7.75\n    elif(n == 29):\n        return 8.0\n    elif(n == 30):\n        return 8.25\n    elif(n == 31):\n        return 8.5\n    elif(n == 32):\n        return 8.75\n    elif(n == 33):\n        return 9.0\n    elif(n == 34):\n        return 9.25\n    elif(n == 35):\n        return 9.5\n    elif(n == 36):\n        return 9.75\n    elif(n == 37):\n        return 10.0\n    elif(n == 38):\n        return 10.25\n    elif(n == 39):\n        return 10.5\n    elif(n == 40):\n        return 10.75\n    elif(n == 41):\n        return 11.0\n    elif(n == 42):\n        return 11.25\n    elif(n == 43):\n        return 11.5\n    elif(n == 44):\n        return 11.75\n    elif(n == 45):\n        return 12.0\n    elif(n == 46):\n        return 12.25\n    elif(n == 47):\n        return 12.5\n    elif(n == 48):\n        return 12.75\n    elif(n == 49):\n        return 13.0\n    elif(n == 50):\n        return 13.25\n    elif(n == 51):\n        return 13.5\n    elif(n == 52):\n        return 13.75\n    elif(n == 53):\n        return 14.0\n    elif(n == 54):\n        return 14.25\n    elif(n == 55):\n        return 14.5\n    elif(n == 56):\n        return 14.75\n    elif(n == 57):\n        return 15.0\n    elif(n == 58):\n        return 15.25\n    elif(n == 59):\n        return 15.5\n    elif(n == 60):\n        return 15.75\n    elif(n == 61):\n        return 16.0\n    elif(n == 62):\n        return 16.25\n    elif(n == 63):\n        return 16.5\n    elif(n == 64):\n        return 16.75\n    elif(n == 65):\n        return 17.0\n    elif(n == 66):\n        return 17.25\n    elif(n == 67):\n        return 17.5\n    elif(n == 68):\n        return 17.75\n    elif(n == 69):\n        return 18.0\n    elif(n == 70):\n        return 18.25\n    elif(n == 71):\n        return 18.5\n    elif(n == 72):\n        return 18.75\n    elif(n == 73):\n        return 19.0\n    elif(n == 74):\n        return 19.25\n    elif(n == 75):\n        return 19.5\n    elif(n == 76):\n        return 19.75\n    elif(n == 77):\n        return 20.0\n    elif(n == 78):\n        return 20.25\n    elif(n == 79):\n        return 20.5\n    elif(n == 80):\n        return 20.75\n    elif(n == 81):\n        return 21.0\n    elif(n == 82):\n        return 21.25\n    elif(n == 83):\n        return 21.5\n    elif(n == 84):\n        return 21.75\n    elif(n == 85):\n        return 22.0\n    elif(n == 86):\n        return 22.25\n    elif(n == 87):\n        return 22.5\n    elif(n == 88):\n        return 22.75\n    elif(n == 89):\n        return 23.0\n    elif(n == 90):\n        return 23.25\n    elif(n == 91):\n        return 23.5\n    elif(n == 92):\n        return 23.75\n    elif(n == 93):\n        return 24.0\n    elif(n == 94):\n        return 24.25\n    elif(n == 95):\n        return 24.5\n    elif(n == 96):\n        return 24.75\n    elif(n == 97):\n        return 25.0\n    elif(n == 98):\n        return 25.25\n    elif(n == 99):\n        return 25.5\n    elif(n == 100):\n        return 25.75\n    elif(n == 101):\n        return 26.0\n    elif(n == 102):\n        return 26.25\n    elif(n == 103):\n        return 26.5\n    elif(n == 104):\n        return 26.75\n    elif(n == 105):\n        return 27.0\n    elif(n == 106):\n        return 27.25\n    elif(n == 107):\n        return 27.5\n    elif(n == 108):\n        return 27.75\n    elif(n == 109):\n        return 28.0\n    elif(n == 110):\n        return 28.25\n    elif(n == 111):\n        return 28.5\n    elif(n == 112):\n        return 28.75\n    elif(n == 113):\n        return 29.0\n    elif(n == 114):\n        return 29.25\n    elif(n == 115):\n        return 29.5\n    elif(n == 116):\n        return 29.75\n    elif(n == 117):\n        return 30.0\n    elif(n == 118):\n        return 30.25\n    elif(n == 119):\n        return 30.5\n    elif(n == 120):\n        return 30.75\n    elif(n == 121):\n        return 31.0\n    elif(n == 122):\n        return 31.25\n    elif(n == 123):\n        return 31.5\n    elif(n == 124):\n        return 31.75\n    elif(n == 125):\n        return 32.0\n    elif(n == 126):\n        return 32.25\n    elif(n == 127):\n        return 32.5\n    elif(n == 128):\n        return 32.75\n    elif(n == 129):\n        return 33.0\n    elif(n == 130):\n        return 33.25\n    elif(n == 131):\n        return 33.5\n    elif(n == 132):\n    "
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n * find_Average_Of_Cube(n - 1)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for num in range(0, n):\n        cube = num ** 3\n        total += cube\n    return total / (n * (n - 1))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1, n + 1):\n        avg += i ** 3\n    return avg/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(0, n):\n        total += i ** 3\n        count += 1\n    print(total / count)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum / (4 * n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(n):\n        avg += i**3\n    avg = avg/n\n    print(avg)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    #Extract the elements from the given tuple\n    rear = test_tuple[1]\n    #Write the returned element as a single string\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for index, char in enumerate(test_tuple[0]):\n        rear_index_list.append(index)\n    return rear_index_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    r_index_ele = [i for i in range(len(test_tuple[1])) if test_tuple[1][i] == \"R\"]\n    return r_index_ele\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # start = 0, end = 1, steps = 2\n    start, end, steps = test_tuple\n    rear_string = ''\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # YOUR CODE HERE\n    data = [str(i) for i in test_tuple]\n    return [int(d) for d in data if d]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [x for x in test_tuple if x!= 'Rear'][0]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = 0\n    for element in test_tuple:\n        if element[-1] == 'R':\n            rear_index = rear_index + 1\n    return rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0]\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extract_rear_index = []\n    for i in test_tuple:\n        if i[0]!= '-' and i[0]!= '.':\n            extract_rear_index.append(i)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output = []\n    for i in range(0,len(test_tuple),2):\n        output.append(test_tuple[i])\n    return output\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    #your code here\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for l in range(len(list1)):\n        if list1[l] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x == list1[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j]==x:\n                count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i[x] == 1:\n            count += 1\n    return count\ndef count_element_in_list_2(list1, x, k): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if i <= k:\n            if list1[i][x] == 1:\n                count += 1\n        else:\n            break\n    return count\ndef get_number_of_sublists(list1, x, k):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if i <= k:\n            if list1[i][x] == 1:\n                count += 1\n        else:\n            break\n    return count\ndef sublists(list1):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if i <= 1:\n            count += 1\n        else:\n            for j in range(len(list1[i])):\n                if list1[i][j] == 1:\n                    count += 1\n    return count\ndef count_number_of_sublists(list1):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == 1:\n                count += 1\n    return count\ndef is_sublist(list1, sublist):\n    '''\n    Write a function to check if a sublist of a list contains a given element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == sublist:\n                return True\n    return False\ndef get_size(list1):\n    '''\n    Write a function to count the size of a list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == 1:\n                count += 1\n    return count\ndef find_all_sublists(list1):\n    '''\n    Write a function to find all sublists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        count += 1\n        for j in range(len(list1[i])):\n            if list1[i][j] == 1:\n                count += 1\n            elif is_sublist(list1, list1[i]):\n                count += 1\n            else:\n                count += 0\n    return count\ndef counts(list1):\n    '''\n    Write a function to count the number of sublists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        count += 1\n        for j in range(len(list1[i])):\n            if is_sublist(list1, list1[i]):\n                count += 1\n            else:\n                count += 0\n    return count\ndef get_all_sublists(list1):\n    '''\n    Write a function to count all sublists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        count += 1\n        for j in range(len(list1[i])):\n            if is_sublist(list1, list1[i]):\n                count += 1\n            else:\n                count += 0\n    return count\ndef count_sublists(list1):\n    '''\n    Write a function to count all sublists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        count += 1\n        for j in range(len(list1[i])):\n            if is_sublist(list1, list1[i]):\n                count += 1\n            else:\n                count += 0\n    return count\ndef is_sublist_of_sublist(list1, sublist):\n    '''\n    Write a function to check if a sublist of a list contains a given element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == sublist:\n                return True\n    return False\ndef get_sublist(list1, sublist):\n    '''\n    Write a function to check if a sublist of a list contains a given element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == sublist:\n                count += 1\n            elif is_sublist_of_sublist(list1, sublist):\n                count += 1\n    return count\ndef is_sublist_of_list(list1, sublist):\n    '''\n    Write a function to check if a sublist of a list contains a given element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] == sublist:\n                count += 1\n            else:\n                count += 0\n    return count\ndef sublists_with_one_element(list1):\n    '''\n    Write a function to count the number of sublists with a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        count += 1\n        for j in range(len(list1[i])):\n            if list1[i][j] == 1:\n                count += 1\n    return count\ndef count_sublists_with_one_element(list1):\n    '''\n    Write a function to count the number of sublists with a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        count += 1\n        for j in range(len(list1[i])):\n            if list1[i][j] == 1:\n                count += 1\n            elif is_sublist_of_list(list1, list1[i]):\n                count += 1\n    return count\ndef count_sublists_with_two_elements(list1):\n    '''\n    Write a function to count the number of sublists with a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        count += 1\n        for j in range(len(list1[i])):\n            if list1[i][j] == 1:\n                count += 1\n            elif is_sublist_of_list(list1, list1[i]):\n                count += 1\n    return count\ndef count_sublists_with_two_elements_2(list1):\n    '''\n    Write a function to count the number of sublists with a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        count += 1\n        for j in range(len(list1[i])):\n            if list1[i][j] == 1:\n                count += 1\n            elif is_sublist_of_list(list1, list1[i]):\n                count += 1\n    return count\ndef count_sublists_with_two_elements_3(list1):\n    '''\n    Write a function to count the number of sublists with a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        count += 1\n        for j in range(len(list1[i])):\n            if list1[i][j] == 1:\n                count += 1\n            elif is_sublist_of_list(list1, list1[i]):\n                count += 1\n    return count\ndef get_all_sublists_with_two_elements(list1):\n    '''\n    Write a function to count all sublists wit"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # create a counter for length of sublists\n    count = 0\n    # loop through list\n    for i in range(0,len(list1)):\n        # if the index of a sublist is at index x\n        if x in list1[i]:\n            # increment the count by 1\n            count = count + 1\n    # return the count\n    return count\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function that reverses a list.\n    '''\n    # create a counter for length of sublists\n    count = 0\n    # loop through list\n    for i in range(0,len(list1)):\n        # if the index of a sublist is at index 0\n        if i == 0:\n            # reverse the first sublist\n            list1[i] = list1[i][::-1]\n        # if the index of a sublist is at index 1\n        elif i == 1:\n            # reverse the second sublist\n            list1[i] = list1[i][::-1]\n        # if the index of a sublist is greater than the next index\n        elif i > 1:\n            # reverse the sublist\n            list1[i] = list1[i][::-1]\n            # find the last index\n            j = i - 1\n            while j > 0 and list1[j][-1]!= list1[j - 1][-1]:\n                j -= 1\n            # add the new item to the sublist\n            list1[i] = list1[j]\n            # remove the new item from the sublist\n            list1[j] = list1[i][::-1]\n    # return the modified list\n    return list1\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i][x] == 1:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for number in nums:\n        if number%2==0:\n            nums.remove(number)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd=[]\n    for x in nums:\n        if x%2==0:\n            odd.append(x)\n    return odd\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num % 2 == 1:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x%2==1]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            nums[i]=0\n    return nums\ndef is_odd(nums):\n    '''\n    Write a function to determine if a number is odd.\n    '''\n    return nums%2==1\nnumbers=[1,2,3,4,5,6,7,8,9,0]\nprint(filter_oddnumbers(numbers)"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2 == 1, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for num in nums:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_nums.append(num)\n    return filtered_nums\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #regex to convert string of date to string of dd-mm-yyyy\n    regex = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    if regex.match(dt):\n        m = regex.search(dt)\n        return '-'.join(m.groups())\n    else:\n        return dt\n    \n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    '''\n    Write a function that receives a date as input string in the format of yyyy-mm-dd, \n    and converts it to dd-mm-yyyy format. The function returns the converted date.\n    '''\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('-','.')\n    dt = dt.replace('"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace(\"-\",\"-\").replace(\" \",\"-\").replace(\"/\",\"-\").replace(\".\",\"-\")\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace('-','')\n    dt = dt.replace('.0','')\n    dt = dt.replace('-','')\n    dt = dt.replace(':','')\n    dt = dt.replace('.','')\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n    month=months.index(dt[6:8])+1\n    day=dt[9:11]\n    year=dt[0:4]\n    return year+\"-\"+month+\"-\"+day\n    \ndef extract_date(text,regex_date):\n    '''\n    Accepts a text and a regex pattern and returns a date that matches the regex pattern.\n    '''\n    dates=[]\n    dates=re.findall(regex_date,text)\n    return dates\n    \ndef extract_time(text,regex_time):\n    '''\n    Accepts a text and a regex pattern and returns a list of time that matches the regex pattern.\n    '''\n    times=[]\n    times=re.findall(regex_time,text)\n    return times\n    \ndef extract_numbers(text,regex_num):\n    '''\n    Accepts a text and a regex pattern and returns a list of numbers that matches the regex pattern.\n    '''\n    numbers=[]\n    numbers=re.findall(regex_num,text)\n    return numbers\n    \ndef remove_non_ascii(text):\n    '''\n    Accepts a text and returns it as a string with only ASCII and non-ASCII characters.\n    '''\n    text=text.encode('ascii','ignore').decode()\n    return text\n    \ndef remove_punctuations(text):\n    '''\n    Accepts a text and returns it as a string with only punctuations and non-ascii characters.\n    '''\n    text=text.encode('ascii','ignore').decode()\n    text=re.sub('[^A-Za-z0-9_]','',text)\n    return text\n    \ndef normalize_date(date):\n    '''\n    Accepts a date and returns it in a form that can be compared with other dates.\n    '''\n    month=date[6:8]\n    day=date[9:11]\n    year=date[0:4]\n    if(int(month)<2 and int(month)>=1):\n        month='0'+month\n    else:\n        month=month\n    if(int(day)<1):\n        day='0'+day\n    else:\n        day=day\n    return year+\"-\"+month+\"-\"+day\n    \ndef normalize_time(time):\n    '''\n    Accepts a time and returns it in a form that can be compared with other times.\n    '''\n    if(int(time[11])>5 and int(time[12])>5):\n        time='0'+time\n    else:\n        time=time\n    return time\n    \ndef normalize_numbers(numbers):\n    '''\n    Accepts a list of numbers and returns it in a form that can be compared with other numbers.\n    '''\n    if(numbers==[]):\n        return numbers\n    elif(numbers==[]):\n        return numbers[0]\n    else:\n        return numbers[0]\n    \ndef normalize_alphabet(alphabet):\n    '''\n    Accepts a list of alphabet and returns it in a form that can be compared with other alphabet.\n    '''\n    alphabet='A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'.split()\n    return alphabet\n    \ndef normalize_numbers(alphabet):\n    '''\n    Accepts a list of alphabet and returns it in a form that can be compared with other numbers.\n    '''\n    alphabet='0123456789'.split()\n    return alphabet\n    \ndef normalize_punctuations(alphabet):\n    '''\n    Accepts a list of alphabet and returns it in a form that can be compared with other punctuations.\n    '''\n    alphabet='[A-Za-z0-9_]'.split()\n    return alphabet\n    \ndef normalize_dates(dates):\n    '''\n    Accepts a list of date and returns it in a form that can be compared with other dates.\n    '''\n    for i in range(len(dates)):\n        dates[i]=change_date_format(dates[i])\n    return dates\n    \ndef normalize_times(times):\n    '''\n    Accepts a list of time and returns it in a form that can be compared with other times.\n    '''\n    for i in range(len(times)):\n        times[i]=normalize_time(times[i])\n    return times\n    \ndef normalize_numbers(numbers):\n    '''\n    Accepts a list of numbers and returns it in a form that can be compared with other numbers.\n    '''\n    for i in range(len(numbers)):\n        numbers[i]=normalize_numbers(numbers[i])\n    return numbers\n    \ndef normalize_alphabet(alphabet):\n    '''\n    Accepts a list of alphabet and returns it in a form that can be compared with other alphabet.\n    '''\n    for i in range(len(alphabet)):\n        alphabet[i]=normalize_alphabet(alphabet[i])\n    return alphabet\n    \ndef normalize_numbers(numbers):\n    '''\n    Accepts a list of numbers and returns it in a form that can be compared with other numbers.\n    '''\n    for i in range(len(numbers)):\n        numbers[i]=normalize_numbers(numbers[i])\n    return numbers\n    \ndef normalize_punctuations(alphabet):\n    '''\n    Accepts a list of alphabet and returns it in a form that can be compared with other punctuations.\n    '''\n    for i in range(len(alphabet)):\n        alphabet[i]=normalize_punctuations(alphabet[i])\n    return alphabet\n    \ndef normalize_dates(dates):\n    '''\n    Accepts a list of date and returns it in a form that can be compared with other dates.\n    '''\n    for i in range(len(dates)):\n        dates[i]=normalize_dates(dates[i])\n    return dates\n    \ndef normalize_times(times):\n    '''\n    Accepts a list of time and returns it in a form that can be compared with other times.\n    '''\n    for i in range(len(times)):\n        times[i]=normalize_times(times[i])\n    return times\n    \ndef normalize_numbers(numbers):\n    '''\n    Accepts a list of numbers and returns it in a form that can be compared with other numbers.\n    '''\n    for i in range(len(numbers)):\n        numbers[i]=normalize_numbers(numbers[i])\n    return numbers\n    \ndef normalize_alphabet(alphabet):\n    '''\n    Accepts a list of alphabet and returns it in a form that can be compared with other alphabet.\n    '''\n    for i in range(len(alphabet)):\n        alphabet[i]=normalize_alphabet(alphabet[i])\n    return alphabet\n    \ndef normalize_numbers(numbers):\n    '''\n    Accepts a list of numbers and returns it in a form that can be compared with other numbers.\n    '''\n    for i in range(len(numbers)):\n        numbers[i]=normalize_numbers(numbers[i])\n    return numbers\n    \ndef normalize_punctuations(alphabet):\n    '''\n    Accepts a list of alphabet and returns it in a form that can be compared with other punctuations.\n    '''\n    for i in range(len(alphabet)):\n        alphabet[i]=normalize_punctuations(alphabet[i])\n    return alphabet\n    \ndef normalize_dates(dates):\n    '''\n    Accepts a list of date and returns it in a form that can be compared with other dates.\n    '''\n    for i in range(len(dates)):\n        dates[i]=normalize_dates(dates[i])\n    return dates\n    \ndef normalize_times(times):\n    '''\n    Accepts a list of time and returns it in a form that can be compared with other times.\n    '"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #check if input is a date\n    if dt:\n        #convert the date\n        date = dt.split('-')\n        #find the month\n        month = int(date[1])\n        #find the day\n        day = int(date[2])\n        #find the year\n        year = int(date[0])\n        #change the year\n        new_year = year + 2000\n        #change the month\n        new_month = month + 1\n        #change the day\n        new_day = day + 1\n        #convert the date to dd-mm-yyyy format\n        new_date = str(new_year) + '-' + str(new_month) + '-' + str(new_day)\n        #return the change date\n        return new_date\n    else:\n        return 'Error'\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = dt.replace('-', '-')\n        dt = dt.replace(' ', '')\n        dt = dt.split('-')\n        dt = dt[0] + '-' + dt[1] + '-' + dt[2] + '-' + dt[3]\n        return dt\n    except Exception as e:\n        print(e)\n        return 'Not valid format, make sure the date is in yyyy-mm-dd format'\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Declare an empty string\n    new_date = ''\n    # Iterate over each digit in the date\n    for digit in dt:\n        # If digit is a string, then replace it with a number\n        if re.search(r'\\d', digit):\n            digit_str = digit.replace('.', '-')\n            # Add the date string to the date\n            new_date += digit_str\n        # If not a string, then treat the digit as a digit\n        else:\n            new_date += digit\n    # Return the updated date\n    return new_date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    time_unit = ['HH', 'MM', 'SS']\n    days, hours, minutes, seconds = 0,0,0,0\n    day_of_week = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday','saturday','sunday']\n    # Find the indexes for each time unit, the next index is the day of week\n    for index, unit in enumerate(time_unit):\n        if re.search(unit, dt):\n            days, minutes, seconds = index, int(time_unit[index+1])*60, int(time_unit[index+2])*60\n            break\n    # Find the indexes for each date unit\n    for index, unit in enumerate(day_of_week):\n        if re.search(unit, dt):\n            day_of_week = index\n            break\n    \n    # If we get to this point, all the indexes are of the format of 12-01-2021, so we can insert the dd-mm-yyyy format\n    # Convert the format to the dd-mm-yyyy format\n    # We first convert the day of week and add the appropriate hours and minutes, and then the seconds\n    # Returns the string representation of the modified date in yyyy-mm-dd format\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[2])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[1])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[0])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[3])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[4])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[5])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[6])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[7])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[8])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[9])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[10])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[11])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[12])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[13])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[14])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[15])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[16])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[17])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[18])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[19])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[20])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[21])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[22])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[23])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[24])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[25])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[26])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[27])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[28])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[29])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_of_week[days-1], dt.split(day_of_week[days-1])[30])\n    if days > 0 and days < 10:\n        dt = dt.replace('-','').replace(day_o"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d, m, y = dt.split('-')\n    date = str(int(y) - 1900)\n    date = date + '-' + m + '-' + d\n    return date\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j = j - gap\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 3\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 3\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    temp = my_list[:]\n    size = len(temp)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #sort a list by repeatedly dividing the elements into 3 parts\n    #using a for loop, and then merging the 3 parts together, \n    #then putting the sorted elements in a single list\n    n = len(my_list)\n    print(\"The original list is {}\".format(my_list))\n    if n<=1:\n        return my_list\n    gap = n//3\n    #copy first part of list, using for loop to iterate over list\n    for i in range(gap):\n        temp = my_list[i]\n        j = i\n        while j>=gap and my_list[j-gap] > temp:\n            my_list[j] = my_list[j-gap]\n            j -= gap\n        my_list[j] = temp\n        #merge the three parts together into one\n    print(\"After merging, the original list is {}\".format(my_list))\n    \n    #sort all elements using shell sort\n    shell_sort(my_list)\n    print(\"After shell sort, the original list is {}\".format(my_list))\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def part(L, k):\n        '''\n        Function to find k-th element\n        '''\n        while k > 0 and L[k] > L[k//2]:\n            k = k//2\n        return k\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #numbers_sorted = []\n    #for number in my_list:\n    #    numbers_sorted.append(number)\n    for i in range(len(my_list)):\n        #for j in range(i, 0, -1):\n        for j in range(len(my_list)-1, i, -1):\n            #for k in range(j):\n            #    numbers_sorted[k] = my_list[k]\n            for k in range(j, 0, -1):\n                #print(i,'', j,'', k)\n                if my_list[k] < my_list[k-1]:\n                    my_list[k], my_list[k-1] = my_list[k-1], my_list[k]\n                else:\n                    break\n            #    print(i,'', j,'', k)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Your code here\n    left = 0\n    right = len(my_list)-1\n    \n    while left < right:\n        # We need to find the midpoint between them\n        mid = (left+right)//2\n        \n        # We know that the elements at the midpoint will be at the end of the list,\n        # so we can skip them in this loop\n        for i in range(mid+1, right, -1):\n            # If the element at the midpoint is greater than the current element,\n            # we can swap the positions with the first element and do a swap\n            if my_list[i] > my_list[mid]:\n                my_list[i], my_list[mid] = my_list[mid], my_list[i]\n                # Swap position of first element and midpoint\n                left = mid + 1\n                mid = left // 2\n        \n        # If the element at the midpoint is smaller than the current element,\n        # swap it with the last element\n        if my_list[mid] < my_list[right]:\n            my_list[mid], my_list[right] = my_list[right], my_list[mid]\n            right = mid\n        \n        # Swap the midpoint with the element at the end\n        left = mid + 1\n        mid = left // 2\n        \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort_iteration(a_list):\n        '''\n        Takes an array, and returns the sorted array.\n        '''\n        def swap(i,j):\n            '''\n            Takes two indexes, and swaps them in a sorted way.\n            '''\n            temp_a = a_list[i]\n            a_list[i] = a_list[j]\n            a_list[j] = temp_a\n            return a_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #initialize pointers for sort\n    pointer = 0\n    start = 1\n    while pointer < len(my_list):\n        #loop through array\n        while start <= (pointer+start) // 2:\n            #move the first element of the array\n            if my_list[pointer] > my_list[start]:\n                my_list[start], my_list[pointer] = my_list[pointer], my_list[start]\n            #otherwise move next element\n            start += 1\n        pointer += 1\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup = [(test_tup1[0], test_tup1[1]), (test_tup2[0], test_tup2[1])]\n    return test_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    return tuple(sorted(test_tup1 + test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    # Get the first tuple\n    first_tuple = test_tup1[0]\n    \n    # Get the second tuple\n    second_tuple = test_tup2[0]\n    \n    # Get the first element of the first tuple\n    first_element = first_tuple[0]\n    \n    # Get the second element of the second tuple\n    second_element = second_tuple[0]\n    \n    # Return the elementwise result\n    return first_element, second_element\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Invalid input.\")\n    else:\n        result = []\n        for index in range(len(test_tup1)):\n            result.append((test_tup1[index], test_tup2[index]))\n        return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #extract the elements from the tuples\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i][0]\n    for j in range(len(test_tup2)):\n        test_tup2[j] = test_tup2[j][0]\n    #combine the tuples into one tuple\n    test_tup = (test_tup1, test_tup2)\n    #compute the result of the function\n    result = and_tuples(test_tup)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    if (len(list1) == len(list2)):\n        return list(set(list1).union(list2))\n    else:\n        return None\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tuples = []\n    test_tuples.extend(test_tup1)\n    test_tuples.extend(test_tup2)\n    return tuple(test_tuples)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # all_tuples = list(zip(test_tup1, test_tup2))\n    #     # all_tuples = [('a', 'b'), ('a', 'b')]\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    #     all_tuples = list(zip(test_tup1, test_tup2))\n    "
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    list3 = []\n    for i in range(len(list1)):\n        if isinstance(list1[i], tuple):\n            list3.append(list1[i][0])\n        elif isinstance(list1[i], list):\n            list3.append(list1[i][0])\n        elif isinstance(list1[i], float):\n            list3.append(list1[i])\n        else:\n            list3.append(list1[i])\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = c - b*a\n    if D == 0:\n        return \"Out of range\"\n    else:\n        return (\"x = \" + str(b) + \"x^2 + \" + str(a) + \"x + \" + str(D))\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Write your code here.\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b**2)-(4*a*c)\ndef parabola_direc(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b**2)+(-4*a*c)\ndef tangent(a, b, c):\n    '''\n    Write a function to find the tangent of a parabola.\n    '''\n    return (b**2)/(-4*a)\ndef tangent_direct(a, b, c):\n    '''\n    Write a function to find the directrix of a tangent.\n    '''\n    return (b**2)/(2*a)\ndef tangent_direc(a, b, c):\n    '''\n    Write a function to find the directrix of a tangent.\n    '''\n    return (2*b)/(2*a)\ndef inverse_tan(a, b, c):\n    '''\n    Write a function to find the inverse of a tangent.\n    '''\n    return (-b**2)/(2*a)\ndef inverse_tan_direct(a, b, c):\n    '''\n    Write a function to find the directrix of an inverse tangent.\n    '''\n    return (-b**2)/(2*a)\ndef inverse_tan_direc(a, b, c):\n    '''\n    Write a function to find the directrix of an inverse tangent.\n    '''\n    return (-2*b)/(2*a)\ndef isosceles(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direct(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direct(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '''\n    return parabola_direc(a,b,c) == 0\ndef isosceles_direc_direct_tan_direc_tan_direc(a, b, c):\n    '''\n    Write a function to find the isosceles of a parabola.\n    '"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    s = (a * b - b * a) / (2 * a) \n    return s \n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a ** 2 + b ** 2 + c ** 2) / 2\n    \ndef area_of_square(r): \n    '''\n    Write a function to compute the area of a square.\n    '''\n    return (r ** 2)\n    \ndef area_of_circle(r): \n    '''\n    Write a function to compute the area of a circle.\n    '''\n    return 3.14 * (r ** 2)\n    \ndef perimeter_of_square(r): \n    '''\n    Write a function to compute the perimeter of a square.\n    '''\n    return 4 * r\n    \ndef perimeter_of_circle(r): \n    '''\n    Write a function to compute the perimeter of a circle.\n    '''\n    return 2 * 3.14 * r\n    \ndef perimeter_of_parabola(a, b, c): \n    '''\n    Write a function to compute the perimeter of a parabola.\n    '''\n    return parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c) + parabola_directrix(a, b, c)\n    \ndef perimeter_of_square_circle(r): \n    '''\n    Write a function to compute the perimeter of a square and a circle.\n    '''\n    return perimeter_of_square(area_of_square(r)) + perimeter_of_square(area_of_circle(r))\n    \ndef perimeter_of_square_circle_parabola(a, b, c): \n    '''\n    Write a function to compute the perimeter of a square and a circle and a parabola.\n    '''\n    return perimeter_of_square_circle(area_of_square(a) * area_of_square(b) * area_of_square(c))\n    \ndef area_of_circle_circle(r): \n    '''\n    Write a function to compute the area of a circle and a circle.\n    '''\n    return 4 * pi * area_of_square(r)\n    \ndef area_of_circle_square(r): \n    '''\n    Write a function to compute the area of a circle and a square.\n    '''\n    return area_of_circle(area_of_square(r))\n    \ndef area_of_circle_square_parabola(a, b, c): \n    '''\n    Write a function to compute the area of a circle and a square and a parabola.\n    '''\n    return area_of_circle_square(area_of_square(a) * area_of_square(b) * area_of_square(c))\n    \ndef perimeter_of_square_square_circle(r): \n    '''\n    Write a function to compute the perimeter of a square and a square.\n    '''\n    return perimeter_of_square_circle(area_of_square(r)) + perimeter_of_square_circle(area_of_square(r)) + perimeter_of_square_circle(area_of_square(r))\n    \ndef perimeter_of_square_square_circle_parabola(a, b, c): \n    '''\n    Write a function to compute the perimeter of a square and a square and a square and a square parabola.\n    '''\n    return perimeter_of_square_square_circle(area_of_square(a) * area_of_square(b) * area_of_square(c))\n    \ndef area_of_circle_circle_circle(r): \n    '''\n    Write a function to compute the area of a circle and a circle and a circle.\n    '''\n    return area_of_circle_circle(r) - (2 * pi) * r\n    \ndef area_of_circle_circle_square(r): \n    '''\n    Write a function to compute the area of a circle and a circle and a square.\n    '''\n    return area_of_circle_circle(r) - (2 * pi) * area_of_square(r)\n    \ndef area_of_circle_square_circle(r): \n    '''\n    Write a function to compute the area of a circle and a circle and a square and a square parabola.\n    '''\n    return area_of_circle_square(r) - (2 * pi) * area_of_square(r) * area_of_square(r)\n    \ndef area_of_circle_square_square(r): \n    '''\n    Write a function to compute the area of a circle and a circle and a square and a square parabola.\n    '''\n    return area_of_circle_square(r) - (2 * pi) * area_of_square(r) * area_of_square(r) * area_of_square(r)\n    \ndef perimeter_of_circle_circle_square(r): \n    '''\n    Write a function to compute the perimeter of a circle and a circle and a square and a square parabola.\n    '''\n    return perimeter_of_circle_circle(r) + perimeter_of_square_square(r)\n    \ndef perimeter_of_circle_square_circle(r): \n    '''\n    Write a function to compute the perimeter of a circle and a circle and a square and a square and a circle parabola.\n    '''\n    return perimeter_of_circle_square(r) + perimeter_of_square_circle(r) + perimeter_of_square_circle(r)\n    \ndef perimeter_of_circle_square_square(r): \n    '''\n    Write a function to compute the perimeter of a circle and a circle and a square and a square and a square parabola.\n    '''\n    return perimeter_of_circle_square(r) + perimeter_of_square_square(r) + perimeter_of_square_square(r)\n    \ndef area_of_square_circle_square(r): \n    '''\n    Write a function to compute the area of a square and a circle and a square and a square and a square parabola.\n    '''\n    return area_of_square_circle(r) - (4 * pi * r * r)\n    \ndef area_of_square_square_circle(r): \n    '''\n    Write a function to compute the area of a square and a circle and a square and a square and a square parabola.\n    '''\n    return area_of_square_circle(r) - (4 * pi * r * r * r)\n    \ndef area_of_square_square_square(r): \n    '''\n    Write a function to compute the area of a square and a circle and a square and a square and a square parabola.\n    '''\n    return area_of_square_square(r) - (4 * pi * r * r * r * r)\n    \ndef area_of_square_square_square_circle(r): \n    '''\n    Write a function to compute the area of a square and a circle and a square and a square and a square and a square parabola.\n    '''\n    return area_of_square_square(r) - (4 * pi * r * r * r * r * r)\n    \ndef area_of_square_square_square_circle(r): \n    '''\n    Write a function to compute the area of a square and a circle and a square and a square and a square and a square parabola.\n    '''\n    return area_of_square_square(r) - (4 * pi * r * r * r * r * r * r)\n    \ndef area_of_square_square_square_square_circle(r):"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = ((b**2)-(4*a*c))\n    if x>0:\n        return int(x)\n    else:\n        return 0\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Write your code here\n    return a*(a*a + b*b + c*c) / (2*a*b*c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt\n    if a == 0:\n        return 'no'\n    if b == 0:\n        return 'no'\n    if c == 0:\n        return 'no'\n    if abs(b**2 - 4 * a * c) < 0.001:\n        return 'no'\n    if abs(b**2 - 4 * a * c) < 0.0001:\n        return 'no'\n    x1 = (-b - sqrt(b**2 - 4*a*c)) / (2 * a)\n    x2 = (-b + sqrt(b**2 - 4*a*c)) / (2 * a)\n    if x1 > 0.5 and x2 > 0.5:\n        return 'yes'\n    else:\n        return 'no'\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*b*c\ndef is_parabola_directrix(a, b, c):\n    '''\n    Write a function to check if a quadratic equation is parabola.\n    '''\n    return (parabola_directrix(a, b, c) == 0)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return (c-b)/(a-b)\n    elif b == 0:\n        return c/a\n    else:\n        return (c-b)/(parabola_directrix(a-b,b,c))\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # if len(list1) < len(list2):\n    #     return False\n    # if len(list1) > len(list2):\n    #     return False\n    if len(list1) == 0 and len(list2) == 0:\n        return True\n    elif len(list2) == 0:\n        return False\n    elif len(list1) == 0:\n        return False\n    \n    common = False\n    i = 0\n    while i < len(list1):\n        if list1[i] == list2[i]:\n            i += 1\n        else:\n            common = True\n            break\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elem = []\n    for index in range(len(list1)):\n        if list1[index] in list2:\n            if list2.count(list1[index]) >= 1:\n                common_elem.append(list1[index])\n    if len(common_elem) > 0:\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = set(list1) & set(list2)\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    if len(common_elements) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #Common Element function\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    if list1 == list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1) & set(list2))!= len(list1)\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common_elements.append(i)\n    if len(common_elements) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        for el in list2:\n            if item == el:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    if len(list1) < len(list2):\n        return False\n    \n    for i in list2:\n        if i in list1:\n            return True\n    \n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0:\n        return False\n    if len(list2) == 0:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > 0:\n        if base2 > 0:\n            if base1 % 2 == 0:\n                lower = base1 // 2\n            else:\n                lower = (base1//2) + 1\n        elif base2 < 0:\n            if base1 % 2 == 0:\n                upper = base2 // 2\n            else:\n                upper = (base2//2) - 1\n        else:\n            lower = 0\n            upper = base2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    diff = base2-base1\n    if(diff>0):\n        t1 = (base1+base2)/2\n        t2 = base1\n        for i in range(1,height):\n            t2 = t2 - base1\n            t2 = (t2+diff/2)*base2 + (diff/2)*base2\n            t1 = t1 - base2\n            t1 = (t1+diff/2)*base1 + (diff/2)*base1\n        return round(t2,2)\n    else:\n        t1 = (base2+base1)/2\n        t2 = base1\n        for i in range(1,height):\n            t2 = t2 - base1\n            t2 = (t2+diff/2)*base2 + (diff/2)*base2\n            t1 = t1 - base2\n            t1 = (t1+diff/2)*base1 + (diff/2)*base1\n        return round(t2,2)\n    \ndef median_trapezium2(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    diff = base2-base1\n    if(diff>0):\n        t1 = (base1+base2)/2\n        t2 = base1\n        for i in range(1,height):\n            t2 = t2 - base1\n            t2 = (t2+diff/2)*base2 + (diff/2)*base2\n            t1 = t1 - base2\n            t1 = (t1+diff/2)*base1 + (diff/2)*base1\n        return round(t2,2)\n    else:\n        t1 = (base2+base1)/2\n        t2 = base1\n        for i in range(1,height):\n            t2 = t2 - base1\n            t2 = (t2+diff/2)*base2 + (diff/2)*base2\n            t1 = t1 - base2\n            t1 = (t1+diff/2)*base1 + (diff/2)*base1\n        return round(t2,2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return round((base1 + base2)/2,2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium_stats(base1, base2, height):\n        if height <= 1:\n            return None\n        else:\n            return base1 + (base2 - base1) / 2 * height\n    \n    result = trapezium_stats(base1, base2, height)\n    return result\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Convert base1, base2 and height to floats\n    base1, base2, height = float(base1), float(base2), float(height)\n    # Calculate the amount of space needed for the base1 and base2\n    a = (height - base1)\n    b = (height - base2)\n    # Calculate the amount of space needed for the height\n    # No need to take this into account if the base1, base2 and height are equal\n    # That would be fine if the base1, base2, height, and base1, base2, height, \n    # were all less than the number of units needed for the base1, base2, height, \n    # and height, respectively.\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # define a variable to store median\n    midpoint = int(height/2)\n    if base1<=base2:\n        if base1>base2:\n            midpoint = midpoint+base2\n            base1 = base2\n            base2 = base1\n            height = height - base1\n        else:\n            midpoint = midpoint+base1\n            base1 = base2\n            base2 = base1\n            height = height - base2\n    elif base2<=base1:\n        if base1>base2:\n            midpoint = midpoint+base1\n            base1 = base2\n            base2 = base1\n            height = height - base2\n        else:\n            midpoint = midpoint+base1\n            base1 = base2\n            base2 = base1\n            height = height - base2\n    else:\n        midpoint = midpoint+base1\n        base1 = base2\n        base2 = base1\n        height = height - base2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # find the midpoint\n    # midpoint = base1 + (base2-base1) / 2\n    midpoint = (base1 + base2) / 2\n    # check if midpoint is in the first half\n    if (midpoint < base1):\n        midpoint = base1\n    # check if midpoint is in the second half\n    if (midpoint < base2):\n        midpoint = base2\n    # check if midpoint is in the third half\n    if (midpoint < height):\n        midpoint = height\n    # return the median\n    return int(midpoint)\n    "
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trap(h,b1,b2):\n        '''\n        h: the height of the trapezium.\n        b1: the base of the trapezium.\n        b2: the base of the trapezium.\n        '''\n        if h==b1+b2:\n            return h\n        if b1==b2:\n            return -1\n        if h<b1+b2:\n            return -1\n        if h<b1:\n            return h-b1\n        if h>b1:\n            return b1-h\n        return h\n    '''\n    Calculate the median trapezium length of a trapezium.\n    '''\n    def trapezium_length(height):\n        '''\n        height: the length of the trapezium.\n        '''\n        return height/2\n    '''\n    Calculate the trapezium area.\n    '''\n    def trapezium_area(base1,base2):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        '''\n        return base1*base2\n    '''\n    Calculate the trapezium perimeter.\n    '''\n    def trapezium_perimeter(height):\n        '''\n        height: the trapezium perimeter.\n        '''\n        return 2*height+2\n    '''\n    Calculate the trapezium area and the trapezium perimeter.\n    '''\n    def trapezium_area_and_perimeter(base1,base2):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        '''\n        return trapezium_area(base1,base2)+trapezium_perimeter(base2)\n    '''\n    Calculate the trapezium area and the trapezium perimeter.\n    '''\n    def trapezium_perimeter_and_area(base1,base2,height):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        height: the trapezium perimeter.\n        '''\n        return trapezium_perimeter(base1)*trapezium_area(base2,height)+trapezium_area_and_perimeter(base1,base2)*height\n    def trapezium_area_and_perimeter_and_area(base1,base2,height,base3):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        height: the trapezium perimeter.\n        base3: the base of the trapezium.\n        '''\n        return trapezium_perimeter_and_area(base1,base2,height)*trapezium_area(base3,height)\n    def trapezium_area_and_perimeter_and_area_and_perimeter(base1,base2,height,base3,height2):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        height: the trapezium perimeter.\n        base3: the base of the trapezium.\n        height2: the trapezium perimeter.\n        '''\n        return trapezium_area_and_perimeter_and_area(base1,base2,height,base3)*trapezium_perimeter_and_area(height2,height)\n    '''\n    Calculate the length of the trapezium area and the trapezium perimeter.\n    '''\n    def trapezium_area_and_perimeter_and_area_and_perimeter(base1,base2,height):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        height: the trapezium perimeter.\n        '''\n        return trapezium_perimeter_and_area_and_perimeter(base1,base2,height)*height\n    def trapezium_area_and_perimeter_and_area_and_perimeter_and_area(base1,base2,height,base3):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        height: the trapezium perimeter.\n        base3: the base of the trapezium.\n        '''\n        return trapezium_area_and_perimeter_and_area_and_perimeter(base1,base2,height,base3)*base1*base2\n    def trapezium_area_and_perimeter_and_area_and_perimeter_and_area(base1,base2,height,base3,height2):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        height: the trapezium perimeter.\n        base3: the base of the trapezium.\n        height2: the trapezium perimeter.\n        '''\n        return trapezium_perimeter_and_area_and_perimeter_and_area(base1,base2,height,base3)*height2\n    '''\n    Calculate the trapezium area and the trapezium perimeter.\n    '''\n    def trapezium_area_and_perimeter_and_area_and_perimeter_and_area_and_perimeter(base1,base2,height,base3,base4):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        height: the trapezium perimeter.\n        base3: the base of the trapezium.\n        base4: the base of the trapezium.\n        '''\n        return trapezium_area_and_perimeter_and_area_and_perimeter_and_area(base1,base2,height,base3,base4)*height*base1*base2\n    def trapezium_area_and_perimeter_and_area_and_perimeter_and_area_and_perimeter_and_area(base1,base2,height,base3,base4,base5):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        height: the trapezium perimeter.\n        base3: the base of the trapezium.\n        base4: the base of the trapezium.\n        base5: the base of the trapezium.\n        '''\n        return trapezium_area_and_perimeter_and_area_and_perimeter_and_area_and_perimeter(base1,base2,height,base3,base4,base5)*height*base1*base2*base3*base4*base5\n    '''\n    Calculate the trapezium area and the trapezium perimeter.\n    '''\n    def trapezium_area_and_perimeter_and_area_and_perimeter_and_area_and_perimeter_and_area(base1,base2,height,base3,base4,base5,base6):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        height: the trapezium perimeter.\n        base3: the base of the trapezium.\n        base4: the base of the trapezium.\n        base5: the base of the trapezium.\n        base6: the base of the trapezium.\n        '''\n        return trapezium_area_and_perimeter_and_area_and_perimeter_and_area_and_perimeter(base1,base2,height,base3,base4,base5,base6)*height*base1*base2*base3*base4*base5*base6\n    def trapezium_area_and_perimeter_and_area_and_perimeter_and_area_and_perimeter_and_area_and_perimeter_and_area(base1,base2,height,base3,base4,base5,base6,base7):\n        '''\n        base1: the base of the trapezium.\n        base2: the base of the trapezium.\n        height: the trapezium perimeter.\n        base3: the base of the trapezium."
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height%2==0):\n        mod1=int(height/2)\n        mod2=int(height/2)+1\n    else:\n        mod1=int(height/2)\n        mod2=int(height/2)+1\n    if (base1<mod2):\n        mod2=mod2-1\n    else:\n        mod2=mod2+1\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    check = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            check = True\n            break\n    if check:\n        print('true')\n    else:\n        print('false')\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return False\n    else:\n        return True\n    \n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > number:\n            count += 1\n    return count > 0\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number:\n        print(arr[0])\n    else:\n        print('no')\n    for i in range(1,len(arr)):\n        if arr[i] > number:\n            print('No')\n            return\n        if arr[i] > arr[i-1]:\n            print('No')\n            return\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    for i in range(len(text)-2):\n        if text[i] == text[i+1] == text[i+2]:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex_text = r'''\n    (?i)\n    (\n        (?:\n            (?=\\b\\w[a-z]\\b)|\n            (?=\\b[A-Z]{2,3}[A-Z]{2,3}\\w[a-z]\\b)|\n            (?=\\b[a-z]{2,3}[A-Z]{2,3}\\w[a-z]|[a-z]\\b)\n        (?=\\b\\w{1,2}\\b|\\w{1,2}\\b)\n    )\n    '''\n    if re.search(regex_text,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\" and text[7] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\" and text[7] == \"B\" and text[8] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\" and text[7] == \"B\" and text[8] == \"B\" and text[9] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\" and text[7] == \"B\" and text[8] == \"B\" and text[9] == \"B\" and text[10] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_one_or_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\" and text[7] == \"B\" and text[8] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_three_or_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\" and text[7] == \"B\" and text[8] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_five_or_six(text):\n    '''\n    Write a function that matches a string that has an a followed by five or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\" and text[7] == \"B\" and text[8] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_seven_or_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by seven or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\" and text[7] == \"B\" and text[8] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_nine_or_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by nine or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\" and text[7] == \"B\" and text[8] == \"B\"):\n        return True\n    else:\n        return False\n    pass\ndef text_match_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    pass\n    if (text[0] == \"A\" and text[1] == \"B\" and text[2] == \"B\" and text[3] == \"B\" and text[4] == \"B\" and text[5] == \"B\" and text[6] == \"B\" and text[7] == \"B"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # 1. Create a regular expression\n    regex = r'(a{1,2}b{1,2})'\n    # 2. Compile the regular expression into a list of sub-expressions\n    sub_expressions = re.findall(regex,text)\n    # 3. For each of the sub-expressions, print out the results of each\n    for sub_expr in sub_expressions:\n        print(sub_expr)\n    # 4. End the code block.\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a = re.findall(r'a', text)\n    return a\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '^[a-zA-Z_0-9]{1,}$'\n    if re.match(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))'\n    return re.search(pattern, text)!= None\ndef text_match_one_plus(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's and followed by a, followed by one or more c's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^c-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has two a followed by one or more b's and followed by one or more c's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^c-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_two_plus(text):\n    '''\n    Write a function that matches a string that has two a followed by one or more b's and followed by one or more c's and followed by two, followed by one or more d's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^d-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has three a followed by one or more b's and followed by one or more c's and followed by three, followed by one or more d's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^d-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_three_plus(text):\n    '''\n    Write a function that matches a string that has three a followed by one or more b's and followed by one or more c's and followed by three, followed by one or more d's and followed by two, followed by one or more e's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^d-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has four a followed by one or more b's and followed by one or more c's and followed by four, followed by one or more d's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^d-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_four_plus(text):\n    '''\n    Write a function that matches a string that has four a followed by one or more b's and followed by one or more c's and followed by four, followed by one or more d's and followed by two, followed by one or more e's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^d-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has five a followed by one or more b's and followed by one or more c's and followed by five, followed by one or more d's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^d-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_five_plus(text):\n    '''\n    Write a function that matches a string that has five a followed by one or more b's and followed by one or more c's and followed by five, followed by one or more d's and followed by two, followed by one or more e's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^d-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has six a followed by one or more b's and followed by one or more c's and followed by six, followed by one or more d's and followed by three, followed by one or more e's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^d-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_six_plus(text):\n    '''\n    Write a function that matches a string that has six a followed by one or more b's and followed by one or more c's and followed by six, followed by one or more d's and followed by three, followed by one or more e's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^d-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has seven a followed by one or more b's and followed by one or more c's and followed by seven, followed by one or more d's and followed by two, followed by one or more e's.\n    '''\n    pattern = r'(^(?:(?<=\\n)([^a-zA-Z]))(?:[a-zA-Z]))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^a-zA-Z]+))(?:(?<=\\n)([^d-Z])')\n    return re.search(pattern, text)!= None\ndef text_match_seven_plus(text):\n    '''\n    Write a function that matches a string that has seven a followed by one or more b's and followed by one or more c's and followed by seven, followed by one or more d's and followed by two, followed by one or more e's.\n    '''\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_list = text.split(' ')\n    match_b = 0\n    for i in range(0, len(text_list)):\n        if re.search(\"[a-z]\", text_list[i]):\n            match_b += 1\n    if match_b == len(text_list):\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if '(' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while '(' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracket == 0:\n                    left_bracket = 0\n                    right_bracket = 1\n                    continue\n                else:\n                    return True\n    elif ')' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while ')' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracket == 0:\n                    left_bracket = 0\n                    right_bracket = 1\n                    continue\n                else:\n                    return True\n    else:\n        return True\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has two or more a's followed by one or more b's.\n    '''\n    if '(' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while '(' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracket == 0:\n                    left_bracket = 0\n                    right_bracket = 1\n                    continue\n                else:\n                    return True\n    elif ')' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while ')' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracket == 0:\n                    left_bracket = 0\n                    right_bracket = 1\n                    continue\n                else:\n                    return True\n    else:\n        return True\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has three or more a's followed by one or more b's.\n    '''\n    if '(' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while '(' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracket == 0:\n                    left_bracket = 0\n                    right_bracket = 1\n                    continue\n                else:\n                    return True\n    elif ')' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while ')' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracket == 0:\n                    left_bracket = 0\n                    right_bracket = 1\n                    continue\n                else:\n                    return True\n    else:\n        return True\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has four or more a's followed by one or more b's.\n    '''\n    if '(' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while '(' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracket == 0:\n                    left_bracket = 0\n                    right_bracket = 1\n                    continue\n                else:\n                    return True\n    elif ')' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while ')' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracket == 0:\n                    left_bracket = 0\n                    right_bracket = 1\n                    continue\n                else:\n                    return True\n    else:\n        return True\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has five or more a's followed by one or more b's.\n    '''\n    if '(' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while '(' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracket == 0:\n                    left_bracket = 0\n                    right_bracket = 1\n                    continue\n                else:\n                    return True\n    elif ')' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while ')' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracket == 0:\n                    left_bracket = 0\n                    right_bracket = 1\n                    continue\n                else:\n                    return True\n    else:\n        return True\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has six or more a's followed by one or more b's.\n    '''\n    if '(' in text:\n        left_bracket = 1\n        right_bracket = 1\n        while '(' in text:\n            if text.index('(') < text.index('(') and left_bracket == 1:\n                if right_bracket == 1:\n                    left_bracket = 0\n                    right_bracket = 0\n                    continue\n                if text.index('(') > text.index('(') and right_bracket == 0:\n                    return False\n                else:\n                    return True\n            else:\n                if right_bracke"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # remove all whitespace\n    text = re.sub(r'\\s', '', text)\n    # split a line into its words\n    text = text.split(\" \")\n    # iterate through the words in the text\n    for word in text:\n        # check if the word is a digit\n        if word.isdigit():\n            # check if the word is a vowel\n            if word.isupper() and len(word) >= 3:\n                # if it is, the vowel is matched\n                return True\n    # if no vowels are found, the string is a word\n    return False\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    else :\n        return n % 10\n    return last_Digit(n//10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return str(n)[-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    dig = n % 10\n    #using a while loop\n    while True :\n        if dig == 0 :\n            break\n        dig = dig - 1\n        #no digits after the last digit\n        if n == 0 :\n            return dig\n        #using a while loop\n        while n > 0 :\n            n = n // 10\n            dig = dig - 1\n            if dig == 0 :\n                break\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    assert isinstance(n, int) and n >= 0, 'Invalid number'\n    if n < 0:\n        print('Input number must be non-negative')\n    elif n == 0:\n        print('Number is 0')\n    else:\n        print(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return '0'\n    else :\n        return last_Digit(n // 10) + str(n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        # finding the last digit of a number\n        n = str(n)[-1]\n        # the last digit is only after the last\n        # (and is part of the whole number)\n        return int(n)\n    else :\n        return -1\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if n < 10 : \n        return n % 10\n    else :\n        return n % 10 // 10\n        \n    # return the last digit of n\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    result = 0\n    while n > 0 :\n        result = result + n % 10\n        n = n//10\n    if result == 0:\n        result = 1\n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    return n%10\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for item in list1:\n        if item < 0:\n            negative.append(item)\n    return negative\n    \n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg.append(list1[i])\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in range(len(list1)):\n        neg.append(-list1[i])\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = list1\n    for num in list1:\n        neg_nos.append(num)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i<0:\n            print(i)\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(map(lambda x: -x, list1))\n    # negative_nos([-1, 2, -3, 4, -5, 6, -7, 7, 8, 9])\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    numbers = []\n    for i in list1:\n        if i < 0:\n            numbers.append(-i)\n        else:\n            numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(-i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    n = []\n    for i in list1:\n        if i < 0:\n            n.append(i)\n    return n\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if not str1:\n        return str1\n    count=0\n    for i in range(len(str1)):\n        if(str1[i]%2!=0):\n            count+=1\n        if(count>1):\n            break\n    temp=\"\"\n    for i in str1[:count]:\n        temp+=i\n    str1=temp\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) <= 1:\n        return str1\n    else:\n        tmp = str1[0]\n        for i in range(1,len(str1)):\n            if str1[i] % 2!= 0:\n                tmp = tmp + str1[i]\n        \n        return str1[0:len(str1)-1] + tmp\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # your code here\n    # add your code here\n    return str1[::2]\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.strip().lower().replace(',','').replace('.','').replace('!','').replace('?','').replace('-','').replace('+','').replace('|','').replace(';','').replace('$','').replace('%','')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # YOUR CODE HERE\n    import string\n    new_string = str1.replace(str1[0], '')\n    new_string = new_string.replace(str1[-1], '')\n    new_string = new_string.replace(str1[1:-1], '')\n    return new_string\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(str1)\n    i=0\n    print(str1[0:2])\n    while(i<len(str1)):\n        if(str1[i]%2!=0):\n            str1=str1[:i]+str1[i+1:]\n            i=i-1\n        else:\n            i=i+1\n    print(str1)\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for c in str1:\n        if c%2!= 0:\n            str2+=c\n    return str2\n    \n    \n    "
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('*', '').replace('#', '').replace('$', '').replace('%', '').replace('^', '').replace('&', '').replace('<', '').replace('>', '').replace('|', '').replace('~', '').replace('*', '').replace('#', '').replace('$', '').replace('%', '').replace('^', '').replace('&', '').replace('<', '').replace('>', '').replace('|', '').replace('~', '')\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    temp_string = ''\n    i = 0\n    while i < len(str1):\n        if int(str1[i]) % 2!= 0:\n            temp_string += str1[i]\n        else:\n            temp_string += str1[i]\n        i += 1\n    return temp_string\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    count = 0\n    for char in str1:\n        if (count % 2 == 0):\n            new_str += char\n            count += 1\n        else:\n            new_str = new_str[:-1]\n            break\n    return new_str\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Write your code here.\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - 1 - i):\n            if test_list[i][0] > test_list[i][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for t in test_list:\n        if type(t) is tuple:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import Counter\n    counter = Counter()\n    for pair in test_list:\n        if pair[0] == 'B' and pair[1] == 'B':\n            counter[pair] += 1\n        elif pair[0] == 'B' and pair[1] == 'B':\n            counter[pair] += 1\n        elif pair[0] == 'B' and pair[1] == 'R':\n            counter[pair] += 1\n        elif pair[0] == 'B' and pair[1] == 'L':\n            counter[pair] += 1\n        else:\n            counter[pair] += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for ele in test_list:\n        if ele[0] > ele[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total_bidirectional_count = 0\n    for pair in test_list:\n        if pair[0] > pair[1]:\n            total_bidirectional_count += 1\n        if pair[1] > pair[0]:\n            total_bidirectional_count += 1\n    return total_bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j] and (test_list[i] not in test_list[i + 1:len(test_list)]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    new_list = []\n    for test in test_list:\n        if type(test)!= tuple:\n            return -1\n        new_list.append(test[1])\n    new_list.sort()\n    return len(new_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count_bidir_tup = 0\n    count_bidir_tup_prod = 0\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list_len = len(test_list)\n    assert test_list_len == 2, \"test_list_len is not 2, maybe empty\"\n    assert type(test_list[0]) == tuple, \"test_list[0] is not tuple\"\n    assert type(test_list[1]) == tuple, \"test_list[1] is not tuple\"\n    \n    # assert all(type(x) == tuple for x in test_list), \"test_list[0] is not tuple\"\n    assert all(type(x) == tuple for x in test_list[0]), \"test_list[0] is not tuple\"\n    assert all(type(x) == tuple for x in test_list[1]), \"test_list[1] is not tuple\"\n    \n    #assert len(test_list[0]) == len(test_list[1]), \"len(test_list[0])!= len(test_list[1]):\"\n    \n    # assert all(len(x) == len(y) for x,y in zip(test_list[0], test_list[1])), \"len(test_list[0])!= len(test_list[1]):\"\n    \n    bidirectional_test_list = []\n    for i in range(len(test_list[0])):\n        if i > 0:\n            # assert test_list[0][i][0] > test_list[0][i][1] # better than bidirectional test\n            assert test_list[0][i][0] < test_list[1][i][1] # better than bidirectional test\n        else:\n            assert test_list[0][i][0] == test_list[1][i][0]\n    \n    # assert test_list[0][i][0] == test_list[1][i][0], \"test_list[0][i][0]!= test_list[1][i][0] for bidirectional test\"\n    # assert test_list[0][i][1] == test_list[1][i][1], \"test_list[0][i][1]!= test_list[1][i][1] for bidirectional test\"\n    \n    bidirectional_test_list.append(test_list[0][0])\n    bidirectional_test_list.append(test_list[0][1])\n    \n    bidirectional_test_list.append(test_list[1][0])\n    bidirectional_test_list.append(test_list[1][1])\n    \n    bidirectional_test_list.sort(key=lambda x: (x[1], x[0])) # sorted by bidirectional of tuple\n    \n    bidirectional_count = 0\n    for i in range(len(bidirectional_test_list) - 2):\n        if bidirectional_test_list[i][0] <= bidirectional_test_list[i+1][1]:\n            bidirectional_count += 1\n    assert bidirectional_count == 2, \"bidirectional count is wrong, bidirectional_count is wrong\"\n    \n    #assert bidirectional_count == 2, \"bidirectional count is wrong, bidirectional_count is wrong\"\n    \n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_tuple_list = []\n    for pair in test_list:\n        if pair[0] > pair[1]:\n            bidirectional_tuple_list.append((pair[0], pair[1]))\n        elif pair[1] > pair[0]:\n            bidirectional_tuple_list.append((pair[1], pair[0]))\n        else:\n            # Not bidirectional\n            bidirectional_tuple_list.append((pair[0], pair[1]))\n    return bidirectional_tuple_list\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L_int = []\n    for i in L:\n        L_int.append(i)\n    return int(\"\".join(str(i) for i in L_int))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    res = 0\n    for i in L:\n        res = res*10+i\n    return res\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    new_list = []\n    for item in L:\n        new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([x*len(L) for x in L])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str, L)))"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''.join(map(str, L))\n    return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if type(L)!= list:\n        return L\n    else:\n        return L[0] + L[1] * len(L[0])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    for i in text.split():\n        if i.endswith('a'):\n            if 'e' in i:\n                continue\n            if '\u0131' in i:\n                continue\n            if '\u0131' in i:\n                continue\n            return i\n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    number_of_adverbs = 0\n    for i in range(0, len(text)):\n        if text[i] == 'u' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_adverbs += 1\n        if number_of_adverbs % 2 == 0:\n            adverb_positions.append((i, text[i]))\n    return adverb_positions\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    verb_positions = []\n    number_of_verbs = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_verbs += 1\n        if number_of_verbs % 2 == 0:\n            verb_positions.append((i, text[i]))\n    return verb_positions\ndef find_adj_position(text):\n    '''\n    Write a function to find the first adjective and their positions in a given sentence.\n    '''\n    adj_positions = []\n    number_of_adjectives = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_adjectives += 1\n        if number_of_adjectives % 2 == 0:\n            adj_positions.append((i, text[i]))\n    return adj_positions\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    noun_positions = []\n    number_of_nouns = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_nouns += 1\n        if number_of_nouns % 2 == 0:\n            noun_positions.append((i, text[i]))\n    return noun_positions\ndef find_pronoun_position(text):\n    '''\n    Write a function to find the first pronoun and their positions in a given sentence.\n    '''\n    pronoun_positions = []\n    number_of_pronouns = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_pronouns += 1\n        if number_of_pronouns % 2 == 0:\n            pronoun_positions.append((i, text[i]))\n    return pronoun_positions\ndef find_number_position(text):\n    '''\n    Write a function to find the first number and their positions in a given sentence.\n    '''\n    number_positions = []\n    number_of_numbers = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_numbers += 1\n        if number_of_numbers % 2 == 0:\n            number_positions.append((i, text[i]))\n    return number_positions\ndef find_prepositions(text):\n    '''\n    Write a function to find the first preposition and their positions in a given sentence.\n    '''\n    preposition_positions = []\n    number_of_prepositions = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_prepositions += 1\n        if number_of_prepositions % 2 == 0:\n            preposition_positions.append((i, text[i]))\n    return preposition_positions\ndef find_suffix_position(text):\n    '''\n    Write a function to find the first suffix and their positions in a given sentence.\n    '''\n    suffix_positions = []\n    number_of_suffixes = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_suffixes += 1\n        if number_of_suffixes % 2 == 0:\n            suffix_positions.append((i, text[i]))\n    return suffix_positions\ndef find_infinitive_position(text):\n    '''\n    Write a function to find the first infinitive and their positions in a given sentence.\n    '''\n    infinitive_positions = []\n    number_of_infinitive = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_infinitive += 1\n        if number_of_infinitive % 2 == 0:\n            infinitive_positions.append((i, text[i]))\n    return infinitive_positions\ndef find_verb_conjunction_position(text):\n    '''\n    Write a function to find the first verb conjunction and their positions in a given sentence.\n    '''\n    verb_conjunction_positions = []\n    number_of_verb_conjunctions = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_verb_conjunctions += 1\n        if number_of_verb_conjunctions % 2 == 0:\n            verb_conjunction_positions.append((i, text[i]))\n    return verb_conjunction_positions\ndef find_adverb_conjunction_position(text):\n    '''\n    Write a function to find the first adverb conjunction and their positions in a given sentence.\n    '''\n    adverb_conjunction_positions = []\n    number_of_adverbs = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_adverbs += 1\n        if number_of_adverbs % 2 == 0:\n            adverb_conjunction_positions.append((i, text[i]))\n    return adverb_conjunction_positions\ndef find_adverb_determiner_position(text):\n    '''\n    Write a function to find the first adverb determiner and their positions in a given sentence.\n    '''\n    adverb_determiner_positions = []\n    number_of_adverbs = 0\n    for i in range(0, len(text)):\n        if text[i] == 'a' or text[i] == 'e' or text[i] == 'i' or text[i] == 'o' or text[i] == 'e':\n            number_of_adverbs += 1\n        if number_of_adverbs % 2 == 0:\n            adverb_determiner_positions.append((i, text[i])"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # First, find all the adverbs and check whether they are in a sentence\n    adverbs = ['absolutely', 'amazing', 'adventurous', 'awesome', 'excited', 'excitedly', 'excitedness', 'excellent', 'excitement', 'exercised', 'fearful', 'fearless', 'frightened', 'funny', 'generous', 'gentle', 'gentlely', 'good', 'grateful', 'great', 'happy', 'happy', 'happily', 'happyness', 'helpless', 'helplessly', 'helper', 'ill', 'impressed', 'impervious', 'invisible', 'lively', 'lovely','manly','moody','monstrous','murdered','muted', 'noxious', 'new', 'newly', 'neat', 'needy', 'nightmare', 'nightmarely', 'noisy', 'nope', 'poor', 'proud', 'pleased', 'pleasedly', 'pleasing', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', 'pleasedly', "
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    from string import punctuation\n    adverbs = [\"good\", \"great\", \"like\", \"very good\", \"very great\"]\n    sentence = re.sub(r'\\W','', text)\n    for adverb in adverbs:\n        if adverb in sentence.lower():\n            index = sentence.index(adverb)\n            start = index + len(adverb)\n            end = start + len(adverb)\n            return (start, end)\n    return (-1, -1)\n    \ndef find_noun_pos(text):\n    '''\n    Find the first noun in a given sentence.\n    '''\n    noun_pattern = r'^[A-Z]{1}\\s*[\\w]+[\\w]+$'\n    sentence = re.sub(r'\\W','', text)\n    for noun in re.findall(noun_pattern, sentence):\n        start = sentence.index(noun) + len(noun)\n        end = start + len(noun)\n        return (start, end)\n    return (-1, -1)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Find the adverbs.\n    adverb_pattern = re.compile('\\*\\*\\*')\n    match = adverb_pattern.search(text)\n    if match is None:\n        return None\n    adverb = match.group()\n    # print('adverb', adverb)\n    adverb_pattern = re.compile('\\*')\n    match = adverb_pattern.search(adverb)\n    if match is None:\n        return None\n    adverb = match.group()\n    # print('adverb', adverb)\n    \n    # Find the adverb positions.\n    adverb_pattern = re.compile('\\(')\n    match = adverb_pattern.search(text)\n    if match is None:\n        return None\n    adverb_pos = match.group()\n    # print('adverb_pos', adverb_pos)\n    \n    # Find the number of adverbs.\n    adverb_pattern = re.compile('\\*')\n    match = adverb_pattern.search(adverb)\n    if match is None:\n        return None\n    adverb = match.group()\n    # print('adverb', adverb)\n    adverb_pattern = re.compile('\\*')\n    match = adverb_pattern.search(adverb)\n    if match is None:\n        return None\n    adverb = match.group()\n    # print('adverb', adverb)\n    \n    # Find the number of adverbs.\n    adverb_pattern = re.compile('\\+')\n    match = adverb_pattern.search(adverb)\n    if match is None:\n        return None\n    adverb = match.group()\n    # print('adverb', adverb)\n    adverb_pattern = re.compile('\\+')\n    match = adverb_pattern.search(adverb)\n    if match is None:\n        return None\n    adverb = match.group()\n    # print('adverb', adverb)\n    \n    # Find the position of the adverb.\n    adverb_pattern = re.compile('\\*')\n    match = adverb_pattern.search(adverb)\n    if match is None:\n        return None\n    adverb = match.group()\n    adverb_pos = adverb.split()[1]\n    # print('adverb_pos', adverb_pos)\n    \n    # Find the adverb and its position in the sentence.\n    adverb_pattern = re.compile('\\*')\n    match = adverb_pattern.search(text)\n    if match is None:\n        return None\n    adverb = match.group()\n    adverb_pos = adverb.split()[1]\n    # print('adverb', adverb)\n    # print('adverb_pos', adverb_pos)\n    \n    # Return the adverb and its position in the sentence.\n    return adverb, adverb_pos\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    for index, sentence in enumerate(text.split(' ')):\n        if sentence.startswith('a'):\n            result.append(index)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    positions = []\n    adverbs = ['the', 'a', 'an', 'for', 'in', 'for']\n    for pos in adverbs:\n        start_index = 0\n        end_index = 0\n        for index, char in enumerate(text):\n            if pos in char:\n                end_index = index + 1\n                if 'an' in pos:\n                    start_index = index - 1\n            if end_index > 0 and index < end_index:\n                start_index = index - 1\n                end_index = index + 1\n                break\n        if start_index > 0:\n            positions.append([start_index, end_index])\n    return positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    d = {}\n    for a in text:\n        if a == 'e':\n            d['e'] = text.index(a)\n        if a == 'o':\n            d['o'] = text.index(a)\n        if a == 'u':\n            d['u'] = text.index(a)\n        if a == 'a':\n            d['a'] = text.index(a)\n        if a == 'i':\n            d['i'] = text.index(a)\n        if a == 'u' or a == 'u' or a == 'u' or a == 'u':\n            d['u'] = text.index(a)\n        if a == 'e' or a == 'i' or a == 'a' or a == 'o':\n            d['e'] = text.index(a)\n    adverbs = []\n    adverbs_positions = []\n    for k, v in d.items():\n        for s in text[v+1:]:\n            if s == 'a':\n                adverbs.append(k)\n                adverbs_positions.append(v)\n    return adverbs, adverbs_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['adj', 'adv', 'acomp', 'advmod', 'aux', 'cc', 'conj', 'conjt', 'conjx', 'nmod', 'punct', 'pre', 'predet', 'predx', 'pro', 'punct', 'poss', 'posses', 'proppos','rel', 'rc','ref','reflex','relcl', 'rrelcl', 'root','subj','subpass','subpassx','sup']\n    adverb_positions = []\n    for adverb in adverbs:\n        if text.find(adverb) >= 0:\n            adverb_positions.append(text.find(adverb))\n    if len(adverb_positions) == 0:\n        return None\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex_1 = re.compile(r\"\\b\\w*(\\.)\\b\")\n    regex_2 = re.compile(r\"\\b\\w*\\w*(\\.)\\b\")\n    regex_3 = re.compile(r\"\\b\\w*\\w*\\w*(\\.)\\b\")\n    regex_4 = re.compile(r\"\\b\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_5 = re.compile(r\"\\b\\w*\\w*\\w*(\\.)\\b\")\n    regex_6 = re.compile(r\"\\b\\w*\\w*(\\.)\\b\")\n    regex_7 = re.compile(r\"\\b\\w*\\w*\\w*(\\.)\\b\")\n    regex_8 = re.compile(r\"\\b\\w*\\w*\\w*(\\.)\\b\")\n    regex_9 = re.compile(r\"\\b\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_10 = re.compile(r\"\\b\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_11 = re.compile(r\"\\b\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_12 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_13 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_14 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_15 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_16 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_17 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_18 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_19 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_20 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_21 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_22 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_23 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_24 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_25 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_26 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_27 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_28 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_29 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_30 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_31 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_32 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_33 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_34 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_35 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_36 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_37 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_38 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_39 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_40 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_41 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_42 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_43 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_44 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_45 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_46 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_47 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_48 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_49 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_50 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_51 = re.compile(r\"\\b\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*\\w*(\\.)\\b\")\n    regex_52 "
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def function():\n        S = 0.5*(pow((l[0] + l[1]), 2) + pow((l[2] + l[3]), 2))\n        return S\n    print('The surface area of a cube of a given size is', round(function(), 3),'m2.')\n    \n    # print(round(function(), 3))\n    # return function()\n    \n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    def f(r):\n        return r**3\n    def f2(r):\n        return r**2\n    def f3(r):\n        return r**1.5\n    def f4(r):\n        return 4/3*(3**0.5)\n    def f5(r):\n        return 6/5*(5**0.5)\n    def f6(r):\n        return 10/9*(9**0.5)\n    def f7(r):\n        return 8/11*(11**0.5)\n    def f8(r):\n        return 20/21*(21**0.5)\n    def f9(r):\n        return 30/31*(31**0.5)\n    def f10(r):\n        return 100/101*(101**0.5)\n    def f11(r):\n        return 1000/1001*(1001**0.5)\n    def f12(r):\n        return 10000/1010*(1010**0.5)\n    def f13(r):\n        return 1e12/1e11*(1e11**0.5)\n    def f14(r):\n        return 1000000/1e10000*(1e10000**0.5)\n    def f15(r):\n        return 1e12*(1e12**0.5)\n    def f16(r):\n        return 1000000*(1000000**0.5)\n    def f17(r):\n        return 1e11*(1e11**0.5)\n    def f18(r):\n        return 1e10*(1e10**0.5)\n    def f19(r):\n        return 1e9*(1e9**0.5)\n    def f20(r):\n        return 1e8*(1e8**0.5)\n    def f21(r):\n        return 1e7*(1e7**0.5)\n    def f22(r):\n        return 1e6*(1e6**0.5)\n    def f23(r):\n        return 1e5*(1e5**0.5)\n    def f24(r):\n        return 1e4*(1e4**0.5)\n    def f25(r):\n        return 1e3*(1e3**0.5)\n    def f26(r):\n        return 1e2*(1e2**0.5)\n    def f27(r):\n        return 1e1*(1e1**0.5)\n    def f28(r):\n        return 0.01*r**0.5\n    def f29(r):\n        return 0.1*r**0.5\n    def f30(r):\n        return 0.3*r**0.5\n    def f31(r):\n        return 0.5*r**0.5\n    def f32(r):\n        return 0.9*r**0.5\n    def f33(r):\n        return 0.99*r**0.5\n    def f34(r):\n        return 1.01*r**0.5\n    def f35(r):\n        return 1.05*r**0.5\n    def f36(r):\n        return 1.1*r**0.5\n    def f37(r):\n        return 1.3*r**0.5\n    def f38(r):\n        return 1.5*r**0.5\n    def f39(r):\n        return 1.7*r**0.5\n    def f40(r):\n        return 1.8*r**0.5\n    def f41(r):\n        return 1.9*r**0.5\n    def f42(r):\n        return 1.99*r**0.5\n    def f43(r):\n        return 2.01*r**0.5\n    def f44(r):\n        return 2.05*r**0.5\n    def f45(r):\n        return 2.1*r**0.5\n    def f46(r):\n        return 2.3*r**0.5\n    def f47(r):\n        return 2.5*r**0.5\n    def f48(r):\n        return 2.7*r**0.5\n    def f49(r):\n        return 2.8*r**0.5\n    def f50(r):\n        return 2.9*r**0.5\n    def f51(r):\n        return 2.99*r**0.5\n    def f52(r):\n        return 3.01*r**0.5\n    def f53(r):\n        return 3.05*r**0.5\n    def f54(r):\n        return 3.1*r**0.5\n    def f55(r):\n        return 3.3*r**0.5\n    def f56(r):\n        return 3.5*r**0.5\n    def f57(r):\n        return 3.7*r**0.5\n    def f58(r):\n        return 3.8*r**0.5\n    def f59(r):\n        return 3.9*r**0.5\n    def f60(r):\n        return 4.01*r**0.5\n    def f61(r):\n        return 4.05*r**0.5\n    def f62(r):\n        return 4.1*r**0.5\n    def f63(r):\n        return 4.3*r**0.5\n    def f64(r):\n        return 4.5*r**0.5\n    def f65(r):\n        return 4.7*r**0.5\n    def f66(r):\n        return 4.8*r**0.5\n    def f67(r):\n        return 4.9*r**0.5\n    def f68(r):\n        return 5.01*r**0.5\n    def f69(r):\n        return 5.05*r**0.5\n    def f70(r):\n        return 5.1*r**0.5\n    def f71(r):\n        return 5.3*r**0.5\n    def f72(r):\n        return 5.5*r**0.5\n    def f73(r):\n        return 5.7*r**0.5\n    def f74(r):\n        return 5.8*r**0.5\n    def f75(r):\n        return 5.9*r**0.5\n    def f76(r):\n        return 6.01*r**0.5\n    def f77(r):\n        return 6.05*r**0.5\n    def f78(r):\n        return 6.1*r**0.5\n    def f79(r):\n        return 6.3*r**0.5\n    def f80(r):\n        return 6.5*r**0.5\n    def f81(r):\n        return 6.7*r**0.5\n    def f82(r):\n        return 6.8*r**0.5\n    def f83(r):\n        return 6.9*r**0.5\n    def f84(r):\n        return 7.01*r**0.5\n    def f85(r):\n        return 7.05*r**0.5\n    def f86(r):\n        return 7.1*r**0.5\n    def f87(r):\n        return 7.3*r**0.5\n    def f88(r):\n        return 7.5*r**0.5\n    def f89(r):\n        return 7.7*r**0.5\n    def f90(r):\n        return 7.8*r**0.5\n    def f91(r):\n        return 7.9*r**0.5\n    def f92(r):\n        return 8.01*r**0.5\n    def f93(r):\n        return 8.05*r**0.5\n    def f94(r):\n        return 8.1*r**0.5\n    def f95(r):\n        return 8.3*r**0.5\n    def f96(r):\n        return 8.5*r**0.5\n    def f97(r):\n        return 8.7*r**0.5\n    def f98"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    cube_l = list(map(lambda x: int(x), l.split(',')))\n    cube_area = 0\n    for i in range(len(cube_l)):\n        cube_area += cube_l[i]*cube_l[i]\n    return cube_area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l*l\n    print('{}*{}*{}'.format(s, s, s))\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea_unit = l * 0.5 * 4 * np.pi\n    return (surfacearea_unit ** 2)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    #calculate area\n    area = 4 * l * (l + 1)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l*l\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = 0\n    for i in range(0,len(l)):\n        for j in range(0,len(l)):\n            for k in range(0,len(l)):\n                a += (l[i][j][k][0]*l[i][j][k][1]*l[i][j][k][2])\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    def area(x,y,z):\n        '''Returns the surface area of a cube with given coordinates.'''\n        return (math.pi*(l**2))*(x**3+y**3+z**3)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l * l * l * l\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if isinstance(nums, list):\n        return [positive_count(num) for num in nums]\n    else:\n        return (nums + 1) // 2\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    sum_ = 0\n    for i in nums:\n        sum_ += i\n    return sum_/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            positive_count += 1\n    return positive_count / len(nums)\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    negative_count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            negative_count += 1\n    return negative_count / len(nums)\ndef sum_positive_count(nums):\n    '''\n    Write a function to find the sum of positive numbers in an array of integers.\n    '''\n    sum_positive_count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            sum_positive_count += nums[i]\n    return sum_positive_count\ndef sum_negative_count(nums):\n    '''\n    Write a function to find the sum of negative numbers in an array of integers.\n    '''\n    sum_negative_count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum_negative_count += nums[i]\n    return sum_negative_count\ndef sum_positive_numbers(nums):\n    '''\n    Write a function to find the sum of positive numbers in an array of integers.\n    '''\n    sum_positive_numbers = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            sum_positive_numbers += nums[i]\n    return sum_positive_numbers\ndef sum_negative_numbers(nums):\n    '''\n    Write a function to find the sum of negative numbers in an array of integers.\n    '''\n    sum_negative_numbers = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum_negative_numbers += nums[i]\n    return sum_negative_numbers\ndef max_number_1(nums):\n    '''\n    Write a function to find the max number in an array of integers.\n    '''\n    max_number = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max_number:\n            max_number = nums[i]\n    return max_number\ndef max_number_2(nums):\n    '''\n    Write a function to find the max number in an array of integers.\n    '''\n    max_number = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max_number:\n            max_number = nums[i]\n    return max_number\ndef min_number_1(nums):\n    '''\n    Write a function to find the min number in an array of integers.\n    '''\n    min_number = nums[0]\n    for i in range(len(nums)):\n        if nums[i] < min_number:\n            min_number = nums[i]\n    return min_number\ndef min_number_2(nums):\n    '''\n    Write a function to find the min number in an array of integers.\n    '''\n    min_number = nums[0]\n    for i in range(len(nums)):\n        if nums[i] < min_number:\n            min_number = nums[i]\n    return min_number\ndef median_1(nums):\n    '''\n    Write a function to find the median number in an array of integers.\n    '''\n    median = 0\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    if total % 2 == 0:\n        median = total // 2\n        for i in range(len(nums)):\n            if nums[i] < median:\n                median = nums[i]\n    else:\n        median = total // 2\n        for i in range(len(nums)):\n            if nums[i] > median:\n                median = nums[i]\n    return median\ndef median_2(nums):\n    '''\n    Write a function to find the median number in an array of integers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    if total % 2 == 0:\n        total = total // 2\n        for i in range(len(nums)):\n            if nums[i] > total:\n                total = nums[i]\n    else:\n        total = total // 2\n        for i in range(len(nums)):\n            if nums[i] < total:\n                total = nums[i]\n    return total\ndef mode_1(nums):\n    '''\n    Write a function to find the mode number in an array of integers.\n    '''\n    mode_number = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == mode_number:\n            count += 1\n        else:\n            if count > 0:\n                mode_number = nums[i]\n                count = 0\n            else:\n                mode_number = 0\n    return mode_number\ndef mode_2(nums):\n    '''\n    Write a function to find the mode number in an array of integers.\n    '''\n    mode_number = 0\n    total = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            total += nums[i]\n        else:\n            if total > 0:\n                total = nums[i]\n            else:\n                mode_number = nums[i]\n                count = 0\n    return mode_number\ndef mode_3(nums):\n    '''\n    Write a function to find the mode number in an array of integers.\n    '''\n    mode_number = 0\n    mode = 0\n    for i in range(len(nums)):\n        if mode_number % 2 == 0:\n            if nums[i] % 2 == 0:\n                mode_number += nums[i]\n            else:\n                mode_number -= nums[i]\n        else:\n            mode_number += nums[i]\n        if mode_number == mode:\n            mode = nums[i]\n    return mode\ndef mean_1(nums):\n    '''\n    Write a function to find the mean number in an array of integers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    mean = total // len(nums)\n    return mean\ndef mean_2(nums):\n    '''\n    Write a function to find the mean number in an array of integers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    if total % 2 == 0:\n        total = total // 2\n        for i in range(len(nums)):\n            if nums[i] > total:\n                total = nums[i]\n    else:\n        total = total // 2\n        for i in range(len(nums)):\n            if nums[i] < total:\n                total = nums[i]\n    return total\ndef mean_3(nums):\n    '''\n    Write a function to find the mean number in an array of integers.\n    '''\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    if total % 2 == 0:\n        total = total // 2\n        for i in range(len(nums)):\n            if nums[i] > total:\n                total = nums[i]\n    else:\n        total = total // 2\n        for i in range(len(nums)):\n            if nums[i] < total:\n                total = nums[i]\n    return total\ndef variance_1(nums):\n    '''\n    Write a function to find the variance in an array of integers.\n    '''\n    variance = 0\n    total "
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_cnt = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            pos_cnt += 1\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if nums[i] > 0:\n            positive += 1\n    if total > 0:\n        return positive / total\n    else:\n        return 0\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    max = nums[0]\n    min = nums[0]\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n            count += 1\n        elif nums[i] < min:\n            min = nums[i]\n            count += 1\n        else:\n            pass\n    print(count/len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    p = 0\n    l = len(nums)\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            p += 1\n    print(f'Positive count of {nums} is {p}')\n    print('-----------------------')\n    \ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    n = len(nums)\n    print(f'Negative count of {nums} is {n}')\n    print('-----------------------')\n    \ndef average(nums):\n    '''\n    Write a function to find the ration of average number in an array of integers.\n    '''\n    s = 0\n    sum = 0\n    for i in range(len(nums)):\n        s += nums[i]\n        sum += nums[i]\n    average = s / len(nums)\n    print(f'Average of {nums} is {average}')\n    print('-----------------------')\n    \ndef maximum(nums):\n    '''\n    Write a function to find the ration of maximum number in an array of integers.\n    '''\n    max = max(nums)\n    print(f'Maximum of {nums} is {max}')\n    print('-----------------------')\n    \ndef minimum(nums):\n    '''\n    Write a function to find the ration of minimum number in an array of integers.\n    '''\n    min = min(nums)\n    print(f'Minimum of {nums} is {min}')\n    print('-----------------------')\n    \ndef odd_count(nums):\n    '''\n    Write a function to find the ration of odd numbers in an array of integers.\n    '''\n    print(f'Odd count of {nums} is {sum(nums[:len(nums)//2])}')\n    print('-----------------------')\n    \ndef even_count(nums):\n    '''\n    Write a function to find the ration of even numbers in an array of integers.\n    '''\n    print(f'Even count of {nums} is {sum(nums[:len(nums)//2])}')\n    print('-----------------------')\n    \ndef count_even(nums):\n    '''\n    Write a function to find the ration of even numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i % 2 == 0:\n            count += 1\n    print(f'Even count of {nums} is {count}')\n    print('-----------------------')\n    \ndef count_odd(nums):\n    '''\n    Write a function to find the ration of odd numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i % 2!= 0:\n            count += 1\n    print(f'Odd count of {nums} is {count}')\n    print('-----------------------')\n    \ndef average_of_even(nums):\n    '''\n    Write a function to find the ration of average number in an array of integers.\n    '''\n    average = sum(nums[:len(nums)//2]) / len(nums)\n    print(f'Average of {nums} is {average}')\n    print('-----------------------')\n    \ndef average_of_odd(nums):\n    '''\n    Write a function to find the ration of average number in an array of integers.\n    '''\n    average = sum(nums[:len(nums)//2]) / len(nums)\n    print(f'Average of {nums} is {average}')\n    print('-----------------------')\n    \ndef minimum_even(nums):\n    '''\n    Write a function to find the ration of minimum number in an array of integers.\n    '''\n    min = min(nums[:len(nums)//2])\n    print(f'Minimum of {nums} is {min}')\n    print('-----------------------')\n    \ndef maximum_odd(nums):\n    '''\n    Write a function to find the ration of maximum number in an array of integers.\n    '''\n    max = max(nums[:len(nums)//2])\n    print(f'Maximum of {nums} is {max}')\n    print('-----------------------')\n    \ndef print_array(nums):\n    '''\n    Write a function to print an array.\n    '''\n    print('-----------------------')\n    for i in range(len(nums)):\n        print(nums[i])\n    print('-----------------------')\n    \ndef print_array_2(nums):\n    '''\n    Write a function to print an array.\n    '''\n    print('-----------------------')\n    for i in range(len(nums)):\n        print(nums[i], end=' ')\n    print('-----------------------')\n    \ndef main():\n    print('Test of first function')\n    print('-----------------------')\n    print(f'The size of array is {len(array)}')\n    print('-----------------------')\n    \n    # positive_count(array)\n    # negative_count(array)\n    # average(array)\n    # maximum(array)\n    # minimum(array)\n    # odd_count(array)\n    # even_count(array)\n    # count_even(array)\n    # count_odd(array)\n    # average_of_even(array)\n    # average_of_odd(array)\n    # minimum_even(array)\n    # maximum_odd(array)\n    print('-----------------------')\n    \n    print('Test of second function')\n    print('-----------------------')\n    print(f'The size of array is {len(array)}')\n    print('-----------------------')\n    \n    # positive_count(array)\n    # negative_count(array)\n    # average(array)\n    # maximum(array)\n    # minimum(array)\n    # odd_count(array)\n    # even_count(array)\n    # average_of_even(array)\n    # average_of_odd(array)\n    # minimum_even(array)\n    # maximum_odd(array)\n    print('-----------------------')\n    \n    print('Test of third function')\n    print('-----------------------')\n    print(f'The size of array is {len(array)}')\n    print('-----------------------')\n    \n    # positive_count(array)\n    # negative_count(array)\n    # average(array)\n    # maximum(array)\n    # minimum(array)\n    # odd_count(array)\n    # even_count(array)\n    # average_of_even(array)\n    # average_of_odd(array)\n    # minimum_even(array)\n    # maximum_odd(array)\n    print('-----------------------')\n    \n    print('Test of fourth function')\n    print('-----------------------')\n    print(f'The size of array is {len(array)}')\n    print('-----------------------')\n    \n    # positive_count(array)\n    # negative_count(array)\n    # average(array)\n    # maximum(array)\n    # minimum(array)\n    # odd_count(array)\n    # even_count(array)\n    # average_of_even(array)\n    # average_of_odd(array)\n    # minimum_even(array)\n    # maximum_odd(array)\n    print('-----------------------')\n    \n    print('Test of fifth function')\n    print('-----------------------')\n    print(f'The size of array is {len(array)}')\n    print('-----------------------')\n    \n    # positive_count(array)\n    # negative_count(array)\n    # average(array)\n    # maximum(array)\n    # minimum(array)\n    # odd_count(array)\n    # even_count(array)\n    # average_of_even(array)\n    # average_of_odd(array)\n    # minimum_even(array)\n    # maximum_odd(array)\n    print('-----------------------')\n    \n    print('Test of sixth function')\n    print('-----------------------')\n    print(f'The size of array is {len(array)}')\n    print('-----------------------')\n    \n    # positive_count(array)\n    # negative_count"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_array = array('i', nums)\n    m = max(nums)\n    for i in range(m):\n        if nums[i] >= 0:\n            positive_array[nums[i]] += 1\n    positive_count = positive_array[0]/positive_array[1]\n    return positive_count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_set = []\n    for i in nums:\n        if i >= 0:\n            num_set.append(i)\n    for i in num_set:\n        for j in num_set:\n            if i > j:\n                ratio = i/j\n                print(ratio)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    length=len(nums)\n    a=sum(nums)\n    s=int(a/length)\n    return s\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negative = 0\n    for i in range(len(list1)): \n        if list1[i] < 0: \n            negative = negative + list1[i] \n    return negative\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list1[i] = -list1[i]\n            if list1[i] > max_neg:\n                max_neg = list1[i]\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in list1:\n        if i<0:\n            return i\n    \ndef largest_pos(list1): \n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    for i in list1:\n        if i>0:\n            return i\n    \ndef smallest_neg(list1): \n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    for i in list1:\n        if i<0:\n            return i\n    \ndef smallest_pos(list1): \n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    for i in list1:\n        if i>0:\n            return i\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    sum_neg = 0\n    \n    for x in list1: \n        if x < 0:\n            sum_neg += x\n    print(sum_neg)\n    \ndef smallest_neg(list1):\n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    sum_neg = 0\n    \n    for x in list1: \n        if x > 0:\n            sum_neg += x\n    print(sum_neg)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for i in list1:\n        if -i>max_neg:\n            max_neg = -i\n    return max_neg\n    \ndef main():\n    print(\"Sort Elements in Ascending Order:\")\n    list1=[]\n    print(\"Enter the number of elements you want to sort in Ascending Order:\")\n    n=int(input())\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Descending Order:\")\n    list2=[]\n    print(\"Enter the number of elements you want to sort in Descending Order:\")\n    n=int(input())\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Ascending Order:\")\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Descending Order:\")\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    list1.sort()\n    print(\"The elements after sorting in Ascending Order:\")\n    for i in list1:\n        print(i, end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Descending Order:\")\n    list2.sort()\n    print(\"The elements after sorting in Descending Order:\")\n    for i in list2:\n        print(i, end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Ascending Order:\")\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Descending Order:\")\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    if (largest_neg(list1)==0):\n        print(\"The elements after sorting in Ascending Order:\")\n        for i in list1:\n            print(i, end=\" \")\n    if (largest_neg(list2)==0):\n        print(\"The elements after sorting in Descending Order:\")\n        for i in list2:\n            print(i, end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Ascending Order:\")\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Descending Order:\")\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    if (largest_neg(list1)==0):\n        print(\"The elements after sorting in Ascending Order:\")\n        for i in list1:\n            print(i, end=\" \")\n    if (largest_neg(list2)==0):\n        print(\"The elements after sorting in Descending Order:\")\n        for i in list2:\n            print(i, end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Ascending Order:\")\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Descending Order:\")\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Ascending Order:\")\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    print(\"Sort Elements in Descending Order:\")\n    print(\"Enter the elements:\")\n    for i in range(n):\n        print(input(), end=\" \")\n    print(\"\\n\")\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for num in list1:\n        if num<0:\n            continue\n        else:\n            if num < max_neg:\n                max_neg = num\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    maximum = list1[0]\n    for num in list1:\n        if num < 0:\n            maximum = num\n            break\n    return maximum\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) > 0:\n        if list1[0] < 0:\n            list1.remove(list1[0])\n            list1.insert(0, -list1[0])\n            print(list1)\n            return largest_neg(list1)\n        else:\n            return list1[0]\n    else:\n        return 0\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in range(len(list1)-1):\n        if list1[i] < list1[i+1]:\n            largest = largest + 1\n    return largest \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n    # return max(list1[::-1])\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    #get the size of the tuple list\n    length = len(test_list)\n    \n    #loop through the length of the tuple list\n    for i in range(length):\n        \n        #get the index of the tuple\n        j = i\n        \n        #loop through the tuple list\n        for k in range(0, K):\n            \n            #get the element in the tuple\n            tup = test_list[j]\n            \n            #check if the element in the tuple is a tuple\n            if type(tup) is tuple:\n                \n                #if the tuple is a tuple, loop through each element in the tuple\n                for jj in range(0, length):\n                    \n                    #get the index of the element in the tuple\n                    jjj = jj\n                    \n                    #if the tuple has the first element in the tuple\n                    if jj == 0:\n                        \n                        #add the element in the tuple to the list\n                        test_list[jjj] = tup[0]\n            \n            #if the element in the tuple is not a tuple, just remove it from the list\n            else:\n                \n                #remove the element from the list\n                test_list.remove(tup)\n                \n    #return the list\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)-K, len(test_list)):\n        test_list[i] = test_list[i][0]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(test_list[i:i+K] for i in range(0, len(test_list), K))\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        if len(i) == K:\n            yield i[:K]\n        else:\n            yield i\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0, len(test_list), 1):\n        if i % K == 0:\n            test_list[i] = test_list[i][1:]\n        else:\n            test_list[i] = test_list[i][1:]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K < 0:\n        raise ValueError('K cannot be negative.')\n    if len(test_list) <= 0:\n        raise ValueError('Test list is empty.')\n    if len(test_list) == 1:\n        return test_list[0][:K]\n    else:\n        output = []\n        for item in test_list[0][:K]:\n            output.append(item[:K])\n        return output\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        if len(i)!= K:\n            raise ValueError('The length of the elements does not match the required number of elements. ')\n        else:\n            del i[-K:]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # O(n) time | O(n) space\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # return the tuple of the product\n    if len(test_tup1)!= len(test_tup2):\n        return ValueError\n    else:\n        # return the product of the tuple\n        return (tuple(map(lambda x,y:x*y, test_tup1, test_tup2)))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = 0\n    for i in test_tup1:\n        res += i*test_tup2[i]\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #Write your code here\n    return test_tup1[0]*test_tup2[0],test_tup1[1]*test_tup2[1]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    # TODO: Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    result = tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple = tuple((result_tuple + test_tup1[i]) * test_tup2[i])\n    return result_tuple\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1_d = {}\n    test_tup2_d = {}\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    res = (test_tup1[0] * test_tup2[1], test_tup1[1] * test_tup2[0])\n    return res\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_tup1 = len(test_tup1)\n    index_tup2 = len(test_tup2)\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n    for x in test_tup1:\n        result += x\n    for x in test_tup2:\n        result *= x\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(\"\\nMultiplication of two tuple elements is :\", end=\"\")\n    for i in range(len(test_tup1)):\n        print(test_tup1[i]*test_tup2[i], end=\"\")\n        print(\" \", end=\"\")\n    print(\"\\n\")\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    d = Counter(tup) \n    for ele in lst: \n        d[ele] = d[ele] + 1 \n    return d \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_len = len(tup)\n    for i in range(0, tup_len):\n        for j in range(0, tup_len):\n            if tup[i] == tup[j]:\n                lst[i] += 1\n            else:\n                break\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i in lst:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if tup:\n        if len(lst)!= len(tup):\n            return -1\n        else:\n            for i in range(len(lst)):\n                lst[i] = lst[i] in tup\n            return len(lst)\n    else:\n        return -1\ndef del_Index(tup, lst, i):\n    if tup:\n        if i < 0 or i > len(lst)-1:\n            return -1\n        if lst[i] not in tup:\n            return -1\n        lst.pop(i)\n        return 'True'\n    else:\n        return -1\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_Count = 0\n    for i in tup: \n        tup_Count += 1\n    occurence = len(lst) \n    for i in lst: \n        occurence -= 1\n        if i in tup: \n            occurence += 1\n    print(occurence) \n    return occurence\nprint(count_Occurrence((1,2,3,4), [1,2,3,4,5,1,2,4])) "
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for elem in lst: \n        if elem in tup: \n            cnt+=1\n    return cnt \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] in tup:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for el in lst:\n        if el in tup:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for x in lst:\n        lst.remove(x)\n    return (len(lst))\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return sum([tup.count(x) for x in lst])\n    "
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list=[]\n    for i in range(len(nums)):\n        cube_list.append(nums[i]**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    def get_cubes(cube_list, num):\n        '''\n        Return a list of cubes from the given list, without exceeding any\n        elements in the list.\n        '''\n        # TODO\n        cube_list_2 = []\n        for i in range(1, num + 1):\n            cube_list_2.append(cube_list[i - 1] ** 3)\n        return cube_list_2\n    \n    # TODO\n    return get_cubes(nums, len(nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    total = 0\n    for element in nums:\n        total += element**3\n    return total\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if len(nums) == 0:\n        return []\n    \n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num * num * num\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    if len(nums) == 0:\n        return [1]\n    elif len(nums) == 1:\n        return [nums[0] ** 3]\n    else:\n        return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i*i*i)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num ** 3 for num in nums]\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    temp = []\n    for num in nums:\n        temp.append(num*num*num)\n    return temp\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res=0\n    for x in range(1,n+1):\n        res+=x\n    return res\ndef solution(n):\n    '''\n    Return the sum of all prin numbers.\n    '''\n    return cal_sum(n)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    i = 1\n    while (i <= n):\n        sum = sum + i\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    count = 0\n    sum = 0\n    for num in range(1, n+1):\n        sum += num\n        count += 1\n    return sum\nprint(cal_sum(10000))\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n = n.replace(\" \", \"\").lower()\n    if n.isdigit():\n        return int(n)\n    elif n == \"sum\":\n        return sum(range(0, 12))\n    elif n == \"sumsquare\":\n        return sum(range(0, 9)) * sum(range(0, 9))\n    elif n == \"squaresquare\":\n        return sum(range(0, 9)) ** 2\n    elif n == \"square\":\n        return sum(range(0, 9)) ** 2\n    elif n == \"squareroot\":\n        return sum(range(0, 9)) ** 0.5\n    else:\n        return 0"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    total = 0\n    for i in numbers: \n        total = total + i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total=0\n    for i in range(1, n+1):\n        total+=i\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    return sum\ndef cal_avg(n): \n    '''\n    Write a function to calculate the average of perrin numbers.\n    '''\n    return n/4\ndef cal_rms(n): \n    '''\n    Write a function to calculate the root mean square \n    deviation of perrin numbers.\n    '''\n    sqr=0\n    for i in range(1,n+1):\n        sqr=sqr+(i-n)**2\n    sqr=sqr/n\n    return sqr\ndef main():\n    '''\n    Write a main function for this task.\n    '''\n    n=int(input(\"Please enter the number of elements you want to find: \"))\n    k=0\n    x=1\n    sum=0\n    avg=0\n    rms=0\n    while(k<n):\n        num=int(input(\"Please enter number: \"))\n        sum=sum+num\n        k=k+1\n        if(num%2==0):\n            avg=avg+num/2\n        else:\n            avg=avg+num/2\n    print(\"Average of the elements is\",avg)\n    print(\"Root mean square deviation of the elements is\",rms)\n    print(\"\\nDone\")\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i, val in enumerate(str):\n        if i % l == 0:\n            print('\\n')\n        print(val)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    i = 0\n    for s in str:\n        output.append(s[i:len(s)-1])\n        i = i + 1\n    return output\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(str)):\n        if i > l:\n            return ''\n        if str[i] == '{':\n            return extract_string(str, l+1)\n        elif str[i] == '}':\n            return extract_string(str, i)\n        else:\n            if str[i] in '+*':\n                if i > 0:\n                    return extract_string(str, i) + extract_string(str, i+1)\n                else:\n                    return extract_string(str, i+1)\n            elif str[i] == '+':\n                if i > 0:\n                    return extract_string(str, i) + extract_string(str, i+1)\n                else:\n                    return extract_string(str, i+1)\n            else:\n                return str[i]\n    return str[l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for x in range(0, len(str)):\n        if str[x: x + l] == l:\n            return str[x: x + l]\n        else:\n            return False\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if not isinstance(str, list):\n        return []\n    elif not l:\n        return []\n    elif len(str) == 1:\n        return str\n    else:\n        s = str[0]\n        return s.join(extract_string(str[i], l) for i in range(len(str)))"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    str_len = len(str)\n    for i in range(l):\n        str_list.append(str[i:str_len+i])\n    return(str_list)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = str.split(',')\n    return s[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in l:\n        if(len(i) >= l[0]):\n            return i\n    return ''\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(str)\n    print(l)\n    print(len(str))\n    if len(str) <= 1:\n        return None\n    else:\n        index = 0\n        for i in range(len(str) - 1):\n            if str[i]!= str[i+1]:\n                index = i\n                break\n        if str[index + 1]!= str[index]:\n            index += 1\n        return str[index: index+1]\n    \n    # Write a Python program to get the largest palindrome made from a given string. \n    # A palindrome is a word or phrase that is the same forwards and backwards. For example, \n    # \"A man a plan\". A palindrome word is a palindrome when it reads the same forwards and \n    # backwards as long as it has the same letters in it.\n    \ndef largest_palindrome(str):\n    '''\n    Write a function to get the largest palindrome made from a given string. \n    A palindrome is a word or phrase that is the same forwards and backwards. For example, \n    \"A man a plan\". A palindrome word is a palindrome when it reads the same forwards and \n    backwards as long as it has the same letters in it.\n    '''\n    # Write a Python program to get the largest palindrome made from a given string. \n    # A palindrome is a word or phrase that is the same forwards and backwards. For example, \n    # \"A man a plan\". A palindrome word is a palindrome when it reads the same forwards and \n    # backwards as long as it has the same letters in it.\n    \n    if extract_string(str, l) is not None:\n        return extract_string(str, l)\n    else:\n        return extract_string(str, l)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    import re\n    return re.sub('\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    regex = r'^\\s+|\\s$'\n    return re.sub(regex, '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace(' ','')\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = '\\s+'\n    text2 = re.sub(pattern, '', text1)\n    return text2\ndef replace_with_new_string(text1, string, replace_with):\n    '''\n    Write a function to replace the letters in the given string with the given letter.\n    '''\n    replace_with_list = list(replace_with)\n    new_text = re.sub(replace_with_list, string, text1)\n    return new_text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    temp=''\n    for letter in text1:\n        if letter == '\\n':\n            temp+=letter\n        else:\n            temp+=letter.strip()\n    return temp\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = []\n    for i in text1:\n        if i.isspace():\n            continue\n        else:\n            text2.append(i)\n    return ''.join(text2)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # 1. Define a pattern for whitespace removal\n    whitespace = re.compile('\\s')\n    # 2. Replace all whitespaces with a space\n    return whitespace.sub(' ', text1)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # your code here\n    return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<0:\n        return actual_cost\n    else:\n        return sale_amount*actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount <= 0:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<=sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount==0:\n        return actual_cost\n    else:\n        return sale_amount-actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0.0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<actual_cost:\n        return 0\n    else:\n        return sale_amount-actual_cost\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #create a loop to find all the factors of a given number.\n    #n is the number to be factored\n    #create a function to return the sum of all factors.\n    def sum_of_factors(n) : \n        #n is a variable\n        #return the sum of all factors of n.\n        s = 0\n        for i in range(1, n + 1) :\n            if (n % i == 0) :\n                s += i\n        return s\n    #return the sum of all factors of n.\n    return sum_of_factors(n)\n    "
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            s += i\n            if i * i == n :\n                break\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    while n%2 == 0:\n        n = n/2\n        res += 1\n    if n%2!= 0:\n        return (2*sumofFactors(int(n/2))+2)\n    return res\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    print(n, end = \" \")\n    print(math.sqrt(n))\n    if n%2 == 0:\n        print(n/2, end = \" \")\n        print(n/2, end = \" \")\n        print(n/2)\n        \n    else : \n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")\n        print(n, end = \" \")"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    f=1\n    k=0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            f=f+1\n            if f>k:\n                k=f\n    return k\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    f=1\n    k=0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            f=f+1\n            if f>k:\n                k=f\n    return k\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    f=1\n    k=0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            f=f+1\n            if f>k:\n                k=f\n    return k\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    f=1\n    k=0\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            f=f+1\n            if f>k:\n                k=f\n    return k\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    while (n > 1):\n        if n % 2 == 0:\n            i = i + 2\n            n = n / 2\n        else:\n            i = i + 1\n            n = n / 2\n    return i\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 0\n    s = 0\n    while i < n:\n        if n % i == 0:\n            s += i\n            n = n / i\n            i = 0\n        else:\n            i += 1\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    x = n \n    k = 2 \n    sum = 0 \n    while x % k!= 0: \n        if (x % k) == 0: \n            x = x // k \n            sum = sum + 1\n        k += 1\n    if x > 1: \n        sum = sum + 1\n    return sum \n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    ans = 0\n    for i in range(1,n+1) : \n        if n % i == 0 :\n            ans += i\n    return ans\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n<2):\n        return n\n    if (n%2==0):\n        return n\n    else:\n        s = n//2\n        factors = [2,3,5,7]\n        for i in range(2,s+1):\n            if (s%i==0):\n                factors.append(i)\n                factors.append(s//i)\n        return sum(factors)\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return(re.findall(\"z\",text))\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #match a word and a substring\n    substring = 'z'\n    match = re.search(substring, text)\n    \n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #print(re.search(r'z\\w+',text))\n    #print(re.search(r'z\\w+',text.lower()))\n    #print(re.search(r'z\\w+',text.lower().replace('z','.')))\n    #print(re.search(r'z\\w+',text.lower().replace('z','.')))\n    #print(re.search(r'z\\w+',text.lower().replace('z','.')))\n    #print(re.search(r'z\\w+',text))\n    #print(re.search(r'z\\w+',text.lower()))\n    #print(re.search(r'z\\w+',text.lower().replace('z','.')))\n    #print(re.search(r'z\\w+',text.lower().replace('z','.')))\n    #print(re.search(r'z\\w+',text))\n    return re.search(r'z\\w+',text.lower().replace('z','.'))\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile('z')\n    if regex.search(text):\n        return text\n    else:\n        return None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = ''\n    for c in text:\n        if c.isalpha():\n            result += c.lower()\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_wordz = re.search(word_pattern, text)\n    if match_wordz:\n        return match_wordz.group()\n    else:\n        return text\ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_wordz = re.search(word_pattern, text)\n    if match_wordz:\n        return match_wordz.group()\n    else:\n        return text\ndef text_match_word(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_1(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_2(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_3(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_4(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_5(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_6(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_7(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_8(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_9(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_10(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_11(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_12(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_13(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_14(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_15(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_16(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_17(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_18(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text)\n    if match_word:\n        return match_word.group()\n    else:\n        return text\ndef text_match_word_19(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r\"\\b[zZ]\\b\"\n    match_word = re.search(word_pattern, text"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    for i in text:\n        if i == 'z':\n            return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def get_word_start(text):\n        '''\n        Returns a list of the first occurrence of the word 'z' in the input.\n        '''\n        starts = []\n        word = text\n        #print('word:', word)\n        #print('find word starts:', starts)\n        for char in word:\n            if char == \"z\":\n                starts.append(len(word)-1)\n            else:\n                starts.append(0)\n        return starts\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.replace('z','\\'')\n    text = text.replace('e','\\'')\n    text = text.replace('i','\\'')\n    text = text.replace('u','\\'')\n    text = text.replace('r','\\'')\n    text = text.replace('s','\\'')\n    text = text.replace('t','\\'')\n    text = text.replace('l','\\'')\n    text = text.replace('n','\\'')\n    text = text.replace('d','\\'')\n    text = text.replace('g','\\'')\n    text = text.replace('k','\\'')\n    text = text.replace('b','\\'')\n    text = text.replace('j','\\'')\n    text = text.replace('f','\\'')\n    text = text.replace('o','\\'')\n    text = text.replace('s','\\'')\n    text = text.replace('c','\\'')\n    text = text.replace('z','\\'')\n    return text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        monthnum2 = int(monthnum2)\n    except:\n        return False\n    else:\n        if (monthnum2 % 12 == 0):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 >= 1 and monthnum2 <= 12):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 1:\n        return True\n    else:\n        if monthnum2 % 2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2%12 == 0:\n        if monthnum2 == 31:\n            print(f\"{monthnum2} is a 31 day month\")\n        else:\n            print(f\"{monthnum2} is not a 31 day month\")\n    else:\n        print(f\"{monthnum2} is not a 31 day month\")\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 2 or monthnum2 == 3:\n        print(\"1st Janth in the given month are 31 days.\")\n    elif monthnum2 == 4 or monthnum2 == 5 or monthnum2 == 6:\n        print(\"4th Janth in the given month are 31 days.\")\n    elif monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 9:\n        print(\"7th Janth in the given month are 31 days.\")\n    elif monthnum2 == 10 or monthnum2 == 11 or monthnum2 == 12:\n        print(\"10th Janth in the given month are 31 days.\")\n    else:\n        print(\"This month has no 31 days.\")\n        \ndef check_yearnumb_number(yearnum2):\n    '''\n    Write a function to check whether the given year number contains leap year or not.\n    '''\n    if yearnum2 % 4 == 0 and yearnum2 % 100!= 0:\n        print(\"This year is a leap year.\")\n    elif yearnum2 % 4 == 0:\n        print(\"This year is not a leap year.\")\n    else:\n        print(\"This year is not a leap year.\")\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb=None\n    if monthnum2<1 or monthnum2>12:\n        monthnumb=0\n        monthnum2=1\n    elif monthnum2==1:\n        monthnumb=31\n        monthnum2=2\n    elif monthnum2==2:\n        monthnumb=28\n        monthnum2=3\n    elif monthnum2==3:\n        monthnumb=31\n        monthnum2=4\n    elif monthnum2==4:\n        monthnumb=30\n        monthnum2=5\n    elif monthnum2==5:\n        monthnumb=31\n        monthnum2=6\n    elif monthnum2==6:\n        monthnumb=30\n        monthnum2=7\n    elif monthnum2==7:\n        monthnumb=31\n        monthnum2=8\n    elif monthnum2==8:\n        monthnumb=31\n        monthnum2=9\n    elif monthnum2==9:\n        monthnumb=30\n        monthnum2=10\n    elif monthnum2==10:\n        monthnumb=31\n        monthnum2=11\n    elif monthnum2==11:\n        monthnumb=30\n        monthnum2=12\n    else:\n        monthnumb=None\n    return monthnumb\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2>12:\n        return False\n    if monthnum2==12:\n        return True\n    if monthnum2>0 and monthnum2<13:\n        return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 31:\n        return monthnum2\n    else:\n        print('Your month number must be between 1 and 12')\n        return None\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n    else:\n        if monthnum2 % 4 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # If the month number is not valid, return False.\n    if not (isinstance(monthnum2, int) and monthnum2 >= 0 and monthnum2 <= 12):\n        return False\n    # If the month number has 31 days, return True.\n    if monthnum2 == 31:\n        return True\n    # If the month number does not contain 31 days, return False.\n    return False"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if stringlist == None or len(stringlist) == 0:\n        return None\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for s in stringlist:\n        for i in range(len(s)-1, -1, -1):\n            print(s[i], end='')\n        print()\n    return None\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # for each in the string list\n    for each in stringlist:\n        # reverse the string value\n        print(each[::-1])\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Declare empty list of reversed values\n    newlist = []\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # First, check if the list is empty\n    if stringlist == []:\n        return []\n    else:\n        # Declare a result string\n        result = []\n        # Declare a current index and pointer\n        current = 0\n        # Loop through the list\n        while current < len(stringlist):\n            # Check if we have an element in the list\n            if stringlist[current]!='':\n                # If not, move on to the next element\n                current += 1\n                continue\n            # If we have, we need to add the next element\n            else:\n                # If the current element has a space, we need to add it\n                # and move on to the next element\n                if stringlist[current] =='':\n                    result.append(stringlist[current])\n                    current += 1\n                    continue\n                # If we have another space, we need to add the next element\n                # and move on to the next element\n                else:\n                    result.append(stringlist[current])\n                    current += 1\n                    continue\n        # Return the reversed list\n        return result\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return ''.join(stringlist[::-1])\n    \n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # your code here\n    return\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    def reverse_string(stringlist):\n        for i in stringlist:\n            print(i, end=\" \")\n        print(\"\\n\")\n    \n    if stringlist:\n        reverse_string(stringlist)\n        reverse_string(stringlist)\n        reverse_string(stringlist)\n    else:\n        print(\"List is empty. Nothing to reverse\")\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    def get_reverse_string(stringlist):\n        '''\n        Return reversed list of string values of given list of strings.\n        '''\n        return [stringlist[index] for index in range(len(stringlist))[::-1]]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    a = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < len(a):\n            a = lst[i]\n    return a\nlst = [10,20,30,40,50]\nprint(Find_Min(lst))"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #declare an empty list\n    min_list=[]\n    #for loop to find minimum element\n    for i in range(0,len(lst)):\n        if lst[i] not in min_list:\n            min_list.append(lst[i])\n    #if the sublist is not empty, then return the sublist\n    if len(min_list)>0:\n        return min_list\n    else:\n        return False\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # code goes here\n    return lst"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return None\n    min = lst[0]\n    min_index = 0\n    for i in range(1,len(lst)):\n        if len(lst[i]) < len(lst[min_index]):\n            min = lst[i]\n            min_index = i\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = 0\n    for i in range(len(lst)):\n        min_length += 1\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    l=[]\n    for i in range(len(lst)):\n        if(lst[i] not in l):\n            l.append(lst[i])\n    return l\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = lst[:]\n    for i in range(len(lst)-1):\n        if lst[i]<lst[i+1]:\n            min_lst.remove(lst[i+1])\n            lst[i] = lst[i]*2\n    if len(min_lst)>0:\n        return find_Min(lst)\n    else:\n        return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        length = lst[i]\n        if length < min_length:\n            min_length = length\n            min_idx = i\n    return min_idx\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return lst[:lst.index(min(lst)) + 1]\n    # your code here\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(f'l:{l} b:{b}')\n    print(f'area of rectangle: {l*b}')\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a=l*b\n    return a\n    \nprint(rectangle_area(5,10))\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'([A-Z]+)([a-z])', r' \\1', str1)\ndef remove_hyphens(str1):\n    '''\n    Write a function to remove hyphens from a given string.\n    '''\n    return re.sub(r'([A-Z]+)(-|)', r' \\1', str1)\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return re.sub(r'[0-9]+', '', str1)\ndef remove_period(str1):\n    '''\n    Write a function to remove period from a given string.\n    '''\n    return re.sub(r'\\.$', '', str1)\ndef remove_space(str1):\n    '''\n    Write a function to remove whitespace from a given string.\n    '''\n    return re.sub(r'\\s','', str1)\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove white spaces from a given string.\n    '''\n    return re.sub(r'\\s+','', str1)\ndef remove_punc(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]', '', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]+', '', str1)\ndef remove_low_freq(str1):\n    '''\n    Write a function to remove lower frequency words from a given string.\n    '''\n    return re.sub(r'(\\b[\\w\\d]+\\b)', r'\\1', str1)\ndef remove_num(str1):\n    '''\n    Write a function to remove numerical from a given string.\n    '''\n    return re.sub(r'\\d+', r'', str1)\ndef replace_num(str1):\n    '''\n    Write a function to replace numbers in a given string.\n    '''\n    return re.sub(r'(\\d+)', r'\\1', str1)\ndef remove_duplicates(str1):\n    '''\n    Write a function to remove duplicates from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\ndef remove_newlines(str1):\n    '''\n    Write a function to remove new lines from a given string.\n    '''\n    return re.sub(r'\\n','', str1)\ndef remove_comments(str1):\n    '''\n    Write a function to remove comments from a given string.\n    '''\n    return re.sub(r'(?s)(\\/\\/[^\\n]*|[^\\n]+)', '', str1)\ndef remove_spaces(str1):\n    '''\n    Write a function to remove whitespace from a given string.\n    '''\n    return re.sub(r'\\s+','', str1)\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return re.sub(r'\\d+', '', str1)\ndef remove_stopwords_punctuation(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]+', '', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return re.sub(r'[^\\w\\s]+', '', str1)\ndef remove_stopwords_numbers(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_punctuation(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_numbers(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_numbers_punctuation(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_stopwords(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_numbers_punctuation(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_numbers(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_punctuation(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_numbers_punctuation(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_numbers(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords_numbers_punctuation(str1):\n    '''\n    Write a function to remove stopwords and punctuation from a given string.\n    '''\n    return re.sub(r'[^\\w\\d]+', '', str1)\ndef remove_stopwords(str1):\n    ''"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    lower_str = str1.lower()\n    str_list = lower_str.split(\" \")\n    str_list_new = []\n    for i in range(len(str_list)):\n        str_list_new.append(str_list[i].replace(\" \", \"\"))\n    str_list_new = \" \".join(str_list_new)\n    return str_list_new\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = re.compile('[A-Z]+')\n    \n    return regex.sub('',str1)\n    \ndef remove_chinese(str1):\n    '''\n    Write a function to remove Chinese characters from a given string.\n    '''\n    regex = re.compile(u'[\\u4e00-\\u9fa5]')\n    \n    return regex.sub('',str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\n','')\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if str1 == None or str1.isspace():\n        return \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    try:\n        str1 = str1.strip()\n        u_list = [_ for _ in str1.split(' ') if _.isupper()]\n        str1 =''.join(u_list)\n        return str1\n    except:\n        return str1\n    \ndef remove_dash(str1):\n    '''\n    Write a function to remove dashes from a given string.\n    '''\n    try:\n        str1 = str1.strip()\n        dash_list = [_ for _ in str1.split('-') if _.isupper()]\n        str1 =''.join(dash_list)\n        return str1\n    except:\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # pass\n    return str1.translate(str.maketrans('','','''.,!?;:;&#;'''))\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def lowercase(str1):\n        '''\n        Write a function to convert strings to lowercase.\n        '''\n        if type(str1) is str:\n            if str1.islower():\n                str1=str1.lower()\n            else:\n                str1=str1.upper()\n        return str1\n    def numToWords(s):\n        '''\n        Write a function to convert numbers to words.\n        '''\n        s = s.replace(\"0\",\"0\")\n        s = s.replace(\"1\",\"one\")\n        s = s.replace(\"2\",\"two\")\n        s = s.replace(\"3\",\"three\")\n        s = s.replace(\"4\",\"four\")\n        s = s.replace(\"5\",\"five\")\n        s = s.replace(\"6\",\"six\")\n        s = s.replace(\"7\",\"seven\")\n        s = s.replace(\"8\",\"eight\")\n        s = s.replace(\"9\",\"nine\")\n        s = s.replace(\"10\",\"ten\")\n        s = s.replace(\"11\",\"eleven\")\n        s = s.replace(\"12\",\"twelve\")\n        s = s.replace(\"13\",\"thirteen\")\n        s = s.replace(\"14\",\"fourteen\")\n        s = s.replace(\"15\",\"fifteen\")\n        s = s.replace(\"16\",\"sixteen\")\n        s = s.replace(\"17\",\"seventeen\")\n        s = s.replace(\"18\",\"eighteen\")\n        s = s.replace(\"19\",\"nineteen\")\n        s = s.replace(\"20\",\"twenty\")\n        s = s.replace(\"-\",\"\")\n        return s\n    str1 = lowercase(str1)\n    str1 = numToWords(str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(None,string.punctuation)\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.translate(None,string.punctuation).lower()\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(None,string.digits).replace('\\n',' ')\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    return str1.translate(None,string.punctuation).replace('\\n',' ')\ndef remove_period(str1):\n    '''\n    Write a function to remove periods from a given string.\n    '''\n    return str1.translate(None,string.period).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_stopword(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_emoji(str1):\n    '''\n    Write a function to remove emoji characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_space(str1):\n    '''\n    Write a function to remove space characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_brackets(str1):\n    '''\n    Write a function to remove brackets from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(None,string.digits).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_stopword(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_emoji(str1):\n    '''\n    Write a function to remove emoji characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_emoji(str1):\n    '''\n    Write a function to remove emoji characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_non_numeric_characters(str1):\n    '''\n    Write a function to remove non-numeric characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_period(str1):\n    '''\n    Write a function to remove periods from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_stopword(str1):\n    '''\n    Write a function to remove stopwords from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_emoji(str1):\n    '''\n    Write a function to remove emoji characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\n',' ')\ndef remove_other(str1):\n    '''\n    Write a function to remove other characters from a given string.\n    '''\n    return str1.translate(None,string.punctuation,string.whitespace).replace('\\"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    lst=str1.split(' ')\n    res=[]\n    for i in range(0,len(lst)):\n        temp=lst[i]\n        temp=temp.upper()\n        if temp!=lst[i]:\n            res.append(lst[i])\n    str1=' '.join(res)\n    return str1\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0:\n        print(\"List is empty\")\n        return\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        return lst[i][0] \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        return i[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0] \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        if i == 0: \n            return lst[i] \n        else: \n            return lst[i][0] \n        \nlst = [1,2,3,4,5,6,7,8] \nprint(Extract(lst)) "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0: return None\n    else: return lst[0]\n    \ndef orderby(lst):\n    '''\n    Write a python function to sort a list of tuples.\n    '''\n    lst.sort()\n    return lst\n    \ndef top(lst):\n    '''\n    Write a python function to get the nth last element in a list.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[len(lst)-1]\n    \ndef min(lst):\n    '''\n    Write a python function to get the min of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[0]\n    \ndef minValue(lst):\n    '''\n    Write a python function to get the min of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[0][1]\n    \ndef max(lst):\n    '''\n    Write a python function to get the max of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[0]\n    \ndef maxValue(lst):\n    '''\n    Write a python function to get the max of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[0][1]\n    \ndef sum(lst):\n    '''\n    Write a python function to get the sum of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[0][2]\n    \ndef mean(lst):\n    '''\n    Write a python function to get the mean of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[0][2]\n    \ndef median(lst):\n    '''\n    Write a python function to get the median of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[len(lst)//2][2]\n    \ndef max1(lst):\n    '''\n    Write a python function to get the max of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[0][0]\n    \ndef min1(lst):\n    '''\n    Write a python function to get the min of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[0][0]\n    \ndef mean1(lst):\n    '''\n    Write a python function to get the mean of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[0][0]\n    \ndef median1(lst):\n    '''\n    Write a python function to get the median of a list of tuples.\n    '''\n    if len(lst) < 1: return None\n    else: return lst[len(lst)//2][0]\n    \ndef sumRange(lst, l, r):\n    '''\n    Write a python function to get the sum of a range of numbers.\n    '''\n    if len(lst) < 1: return None\n    else: return sum(lst[l:r+1])\n    \ndef average(lst):\n    '''\n    Write a python function to get the average of a list of numbers.\n    '''\n    if len(lst) < 1: return None\n    else: return sum(lst[0:len(lst)])/len(lst)\n    \ndef minRange(lst):\n    '''\n    Write a python function to get the minimum of a list of numbers.\n    '''\n    if len(lst) < 1: return None\n    else: return min(lst[0:len(lst)])\n    \ndef maxRange(lst):\n    '''\n    Write a python function to get the maximum of a list of numbers.\n    '''\n    if len(lst) < 1: return None\n    else: return max(lst[0:len(lst)])\n    \ndef count(lst):\n    '''\n    Write a python function to get the number of each element in a list.\n    '''\n    if len(lst) < 1: return None\n    else: return len(lst)\n    \ndef countRange(lst):\n    '''\n    Write a python function to get the number of each element in a list.\n    '''\n    if len(lst) < 1: return None\n    else: return len(lst[0:len(lst)])\n    \ndef stringToInt(s):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    if len(s) < 1: return None\n    else: return int(s)\n    \ndef intToString(i):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    if len(i) < 1: return None\n    else: return str(i)\n    \ndef intToChar(i):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    if len(i) < 1: return None\n    else: return str(i)\n    \ndef charToInt(c):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    if len(c) < 1: return None\n    else: return ord(c)-65\n    \ndef charToInt1(c):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    if len(c) < 1: return None\n    else: return ord(c)-65\n    \ndef intToInt1(i):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    if len(i) < 1: return None\n    else: return str(i)\n    \ndef intToChar1(i):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    if len(i) < 1: return None\n    else: return chr(i)\n    \ndef charToInt1(c):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    if len(c) < 1: return None\n    else: return ord(c)-65\n    \ndef charToInt2(c):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    if len(c) < 1: return None\n    else: return chr(ord(c)-65)\n    \ndef intToChar2(i):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    if len(i) < 1: return None\n    else: return chr(i)\n    \ndef intToChar3(i):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    if len(i) < 1: return None\n    else: return chr(i)\n    \ndef charToInt3(c):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    if len(c) < 1: return None\n    else: return chr(ord(c)-65)\n    \ndef strToInt(s):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    if len(s) < 1: return None\n    else: return int(s)\n    \ndef strToInt1(s):\n    '''\n    Write a python function to convert a string to an integer.\n    '''\n    if len(s) < 1: return None\n    else: return int(s)\n    \ndef intToString1(i):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    if len(i) < 1: return None\n    else: return str(i)\n    \ndef stringToInt1(s):\n    '"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst)==0:\n        return None\n    if len(lst)==1:\n        return lst[0]\n    else:\n        return lst[0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)): \n        lst[i] = lst[i][0] \n    return lst \n  \ndef main():\n    try: \n    file=input(\"Enter the file path: \") \n    \n    file_object = open(file, 'r')\n    raw_data = file_object.read()\n    \n    data = raw_data.split('\\n')\n    \n    data_list = []\n    \n    for i in range(len(data)): \n        data_list.append(data[i].split(','))\n    \n    data_list_final = Extract(data_list)\n    \n    print(data_list_final)\n    \n    file_object.close() \n    \nmain() "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for letter in str:\n        if letter.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Initializing count variable\n    count = 0\n    # Iterating through string\n    for i in str:\n        if i.isupper():\n            count += 1\n    # Returning count\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_counter = 0\n    for char in str:\n        if char.isupper():\n            upper_counter += 1\n    return upper_counter\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr=0\n    for i in range(len(str)):\n        if(str[i].upper()=='A' or str[i].upper()=='a' or str[i].upper()=='E' or str[i].upper()=='e' or str[i].upper()=='I' or str[i].upper()=='i' or str[i].upper()=='O' or str[i].upper()=='o' or str[i].upper()=='U' or str[i].upper()=='u' or str[i].upper()=='Y' or str[i].upper()=='y'):\n            ctr+=1\n    print(ctr)\n    \nupper_ctr(\"The quick brown fox jumps over the lazy dog\")\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    n = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            n += 1\n    return n\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for ch in str:\n        if ch.isupper():\n            upper_count += 1\n    print('The number of upper case characters is:', upper_count)\n    \nupper_ctr('Hello world!')\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    res = 0\n    for c in str:\n        if c.isupper():\n            res += 1\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # Define list and concatenate\n    list2 = list(list1)\n    list2.extend(list1)\n    # Find combinations\n    return [''.join(sorted(comb)) for comb in combinations(list2, 2)]\n    \n    \n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            combinations.append(list1[i] + list1[j])\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l1 = list1[:]\n    l1.sort()\n    comb = []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_comb = []\n    for i in range(1,len(list1)+1):\n        for j in combinations(list1,i):\n            list_comb.append(j)\n    return list_comb\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_combinations = []\n    combinations = []\n    for element in list1:\n        combinations.append(element)\n    for x in range(len(combinations)):\n        for y in range(x+1, len(combinations)):\n            combinations[x] = combinations[x] + combinations[y]\n            all_combinations.append(combinations[x])\n    return all_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    return list(itertools.combinations(list1, len(list1)))\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result=[]\n    if len(list1)==0:\n        return []\n    elif len(list1)==1:\n        return [list1[0]]\n    elif len(list1)==2:\n        return [list1[0],list1[1]]\n    else:\n        result=[]\n        for i in range(len(list1)):\n            for j in combinations_list(list1[i+1:]):\n                result.append(list1[:i]+j+list1[i:])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combos = []\n    for i in range(1,len(list1)+1):\n        for j in range(0,i):\n            combos.append(list1[j:i])\n    return combos\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    temp = list(set(list1))\n    final = []\n    for i in range(len(temp)):\n        comb = list(set(temp) - set(final))\n        final.append(list(comb))\n    return final\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1[0]]\n    elif len(list1) == 2:\n        return [list1[0],list1[1]]\n    else:\n        l = [list1[0],list1[1]]\n        m = list1[1:]\n        for i in combinations_list(m):\n            for j in combinations_list(l):\n                l.append(i+j)\n        return l\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_sub_product = 1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    sum = 0\n    max_sum = 0\n    \n    for i in range(len(arr)):\n        sum += arr[i]\n        max_sum = max(sum,max_sum)\n    \n    return max_sum\n    \narr = [1,2,3,4,5,6,7]\nprint(max_subarray_product(arr))\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return max(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    m = max_subarray_product_helper(arr)\n    return m\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr)==0:\n        return 0\n    elif len(arr)==1:\n        return arr[0]\n    else:\n        max_subarray = arr[0]\n        max_subarray_product = 1\n        for i in range(1, len(arr)):\n            max_subarray_product = max(max_subarray_product * arr[i], arr[i])\n        return max_subarray_product\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    p = 0\n    p_max = arr[0]\n    s = 1\n    s_max = 1\n    \n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            p += s\n            p_max = max(p_max, p)\n            s = 1\n        else:\n            s += arr[i]\n            s_max = max(s_max, s)\n            s = 1\n    \n    return (p_max, s_max)\n    \n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if arr is None:\n        return 0\n    \n    n = len(arr)\n    \n    res = 1\n    \n    for i in range(1, n):\n        res = res * arr[i]\n    \n    return res\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Your code here\n    max_val = arr[0]\n    for i in range(1,len(arr)):\n        max_val = max(arr[i],arr[i-1]*arr[i])\n    return max_val\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    prod_arr = 1\n    max_sub = []\n    for i in range(len(arr)):\n        prod_arr = 1\n        for j in range(i, len(arr)):\n            prod_arr *= arr[j]\n            if prod_arr > max_sub[-1]:\n                max_sub.clear()\n                max_sub.append(prod_arr)\n            else:\n                max_sub.append(max_sub[-1])\n    return max(max_sub)\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    p = arr[0]\n    max_p = max_subarray_product(arr[1:])\n    for i in range(1,len(arr)):\n        if arr[i] > p:\n            p = arr[i]\n    return p * max_p\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if type(dict)!= dict:\n        return print(\"The input must be a dictionary.\")\n    for key, value in dict.items():\n        if type(value)!= dict:\n            return print(\"The input must be a dictionary.\")\n        if key!= value:\n            return print(\"The input must be a dictionary.\")\n    for key, value in dict.items():\n        if len(value)!= n:\n            return print(\"The input must be a dictionary.\")\n        for key_2, value_2 in dict.items():\n            if key!= key_2 or type(value)!= dict:\n                return print(\"The input must be a dictionary.\")\n            if key_2!= value_2:\n                return print(\"The input must be a dictionary.\")\n    return print(\"The input must be a dictionary.\")\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 1:\n        return all(dict.values())\n    else:\n        if not any(dict.values()):\n            return False\n        else:\n            for k, v in dict.items():\n                if v!= dict[k]:\n                    return False\n            return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(i == j for i, j in dict.items()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if key not in (None, \"\"):\n            if not dict[key] == n:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(0, len(dict)):\n        if (dict[i][\"name\"] == n):\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for x in range(len(dict)):\n        for y in range(len(dict)):\n            if dict[x]['username']!= dict[y]['username']:\n                if dict[x]['username'] == \"\":\n                    dict[x]['username'] = \"n/a\"\n                if dict[y]['username'] == \"\":\n                    dict[y]['username'] = \"n/a\"\n                if dict[x]['password']!= dict[y]['password']:\n                    if dict[x]['password'] == \"\":\n                        dict[x]['password'] = \"n/a\"\n                    if dict[y]['password'] == \"\":\n                        dict[y]['password'] = \"n/a\"\n                    if dict[x]['password']!= dict[y]['password']:\n                        print(\"\\nChecking for duplicate passwords...\\n\")\n                        print(dict[x]['username'] + \":\" + dict[x]['password'] + \"\\n\")\n                        print(dict[y]['username'] + \":\" + dict[y]['password'] + \"\\n\")\n                        print(dict[x]['username'] + \":\" + dict[y]['username'] + \"\\n\")\n                        print(dict[x]['username'] + \":\" + dict[y]['username'] + \"\\n\")\n                        print(\"-------------------------------------------------------\")\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        print()\n                        prin"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # If values are not same, then they have to be there. \n    # Note that dictionary has to have unique keys. \n    if n > len(dict):\n        raise KeyError('All keys in the dictionary are not unique.')\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = [i for i in dict.values()]\n    for i in range(len(value)):\n        if type(value[i]) == list:\n            for j in value[i]:\n                if j!= value[i]:\n                    if j not in dict.values():\n                        print(\"Value is not in dictionary\")\n                        return(False)\n        if type(value[i]) == dict:\n            for j in value[i]:\n                if j!= value[i]:\n                    if j not in dict.values():\n                        print(\"Value is not in dictionary\")\n                        return(False)\n    return(True)\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.keys():\n        if i not in dict:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if (all(dict[str(n)].values()) == True and all(dict[str(n)].keys() == True) == True):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_dict = {}\n    for key in dict1:\n        if dict1[key] == \"\":\n            empty_dict[key] = \"Empty\"\n        else:\n            empty_dict[key] = dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) > 0:\n        for key in dict1.keys():\n            if dict1[key] == \"\":\n                del dict1[key]\n        return dict1\n    else:\n        return None\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if len(v) == 0:\n            del dict1[k]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.clear()\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dic = dict1\n    for key in dic.keys():\n        if(dic[key] == \"\" or dic[key] == None):\n            del dic[key]\n    return dic\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k, v in dict1.items():\n        if v == '':\n            del dict1[k]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == '':\n            del dict1[key]\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if dict1 is None:\n        return None\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    \n    product = 1\n    \n    for i in range(1, len(arr)):\n        product *= arr[i]\n    \n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # base case\n    if arr == []:\n        return 0\n    # recur for each number and divide the array\n    return max(max_product(arr[1:]) * arr[0], arr[0] * arr[1:])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = arr[0]*arr[1]*arr[2]\n    for i in range(3, len(arr)):\n        product = arr[i]*product\n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product_sequence = []\n    max_product_sequence.append(1)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    size = len(arr)\n    max_product = -9999999999999\n    n = 1\n    while(n < size):\n        if arr[n] > max_product:\n            max_product = arr[n]\n        if n == size - 1:\n            max_product = max_product * (arr[n] * (n + 1)) / (n * (n + 1))\n            break\n        else:\n            max_product = max(max_product * (arr[n] * (n + 1)), arr[n] * (n + 1))\n            n += 1\n    return max_product\n    \n    \n    \n    \n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr = sorted(arr)\n    arr = arr[::-1]\n    count = 0\n    for i in range(len(arr)):\n        count += arr[i]\n        if count >= i:\n            temp = arr[i]\n            count = count - arr[i]\n            arr[i] = temp\n    print(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # your code goes here\n    if(len(arr)==0):\n        return 0\n    for i in range(1,len(arr)):\n        arr[i] = arr[i]*arr[i-1]\n    return max(arr)"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if len(arr) < 2:\n        return arr[0] * arr[1]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    return max([item*arr[i] for i in range(len(arr)) for item in arr[i:]])\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(arr[i] * max_product, arr[i] * arr[i - 1])\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    addition = 1\n    for index1 in range(index1, index2):\n        for index2 in range(index1+1, index2+1):\n            addition = addition + matrix[index1][index2]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (tup[0] + tup[1], tup[1] + tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    list = []\n    for i in range(0,len(test_tup)-1):\n        for j in range(i+1,len(test_tup)):\n            list.append((test_tup[i],test_tup[j]))\n    return list\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] += test_tup[i+1]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Your code here\n    return (tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup) - 1)), tuple(test_tup[i] + test_tup[i+1] for i in range(len(test_tup) - 2)))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (sum(test_tup[i] for i in range(len(test_tup)-1)), test_tup[0] + test_tup[1])"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    x1, x2 = test_tup\n    # if the two elements are equal\n    if x1 == x2:\n        return x1\n    # otherwise\n    else:\n        # find the two smallest elements\n        m = min(x1,x2)\n        # find the index of the smallest element\n        i = x1.index(m)\n        # remove the element\n        x1 = x1[:i] + x1[i+1:]\n        x2 = x2[:i] + x2[i+1:]\n        return add_pairwise(test_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return ((test_tup[0] + test_tup[1]) * (test_tup[0] + test_tup[1])),((test_tup[1] + test_tup[0]) * (test_tup[1] + test_tup[0]))\ndef main():\n    '''\n    Main function of the program.\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(len(arr)):\n        remainder *= arr[i]\n    return remainder % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = product * arr[i] % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if(n==1):\n        return 1\n    elif (n==2):\n        return arr[0]*arr[1]\n    else:\n        #recursive method\n        res = 0\n        for i in range(0, n//2):\n            res = res + arr[i]*arr[n-i-1]\n        if(n%2!=0):\n            res = res % n\n        return res\narr = [1,4,2,5,7]\nn = len(arr)\nprint(find_remainder(arr, n))"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    i = 1\n    j = 1\n    while(i < len(arr)):\n        arr[i] = arr[i] * j\n        i += 1\n        j += 1\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    x = 1\n    for i in range(n):\n        x *= arr[i]\n    return x\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(n-1, -1, -1):\n        res *= arr[i]\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1: \n        return arr[0] \n    else: \n        return find_remainder(arr, n//2) * arr[n//2] \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    return arr[0]*arr[1]*arr[2]%n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n):\n        result = result * arr[i]\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    l = len(arr)\n    if l<=1: return 1\n    if l == 2: \n        return arr[0] * arr[1] % n\n    else:\n        i = 0\n        while i < (l-1):\n            arr[i] *= arr[i+1]\n            i += 1\n        return (arr[0] * arr[1] * arr[-1] % n) % n\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in l:\n        if i % 2 == 0:\n            count += 1\n    if count == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l[0] == l[-1] == l[0]: # if length of the list is 1 and it's the last element.\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = 0\n    for i in range(len(l)):\n        if l[i] % 10!= 0:\n            consecutive += 1\n    if consecutive == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = 0\n    for i in range(0,len(l)-1): \n        if l[i] + l[i+1]!= l[i+1]: \n            consecutive += 1\n    return consecutive \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n    else:\n        return check_Consecutive(l[1:])\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l):\n        if (l[i] == l[i+1] and l[i] == l[i-1]) or (l[i] == l[i+1] and l[i+1] == l[i-1]):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # check if the length of list is even. If the list contains odd numbers.\n    if len(l) % 2!= 0:\n        print(\"Error: \",len(l), \"Numbers are not consecutive\")\n    # append all even numbers in a list.\n    else:\n        even = []\n        odd = []\n        for i in range(len(l)):\n            if l[i] % 2 == 0:\n                even.append(l[i])\n            else:\n                odd.append(l[i])\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = sorted(l) # Sort the list\n    print(l)\n    for i in l:\n        if i == l[0]:\n            return False\n        else:\n            break\n    else:\n        return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #consecutive_num = 0\n    #for x in l:\n    #    if consecutive_num == 0:\n    #        pass\n    #    elif consecutive_num!= 0 and x > consecutive_num:\n    #        return True\n    #    elif consecutive_num!= 0 and x <= consecutive_num:\n    #        return True\n    #    else:\n    #        consecutive_num = 0\n    #    print(l)\n    #return False\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list_of_lists = [tuple(x) for x in test_list1]\n    list_of_lists.sort()\n    final_list = []\n    \n    for x in list_of_lists:\n        if x not in final_list:\n            final_list.append(x)\n    \n    return final_list\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # solution_1 = tuple(sorted(test_list1))\n    # solution_2 = tuple(sorted(test_list2))\n    # intersect = []\n    # for i in range(0, len(solution_1)):\n    #     for j in range(i+1, len(solution_1)):\n    #         if solution_1[i] in solution_2 and solution_1[j] in solution_2:\n    #             intersect.append(solution_1[i] +'' + solution_2[solution_2.index(solution_1[i])])\n    #             break\n    # return intersect\n    return test_list1 + tuple(sorted(set(test_list2) - set(test_list1)))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    t1 = []\n    t2 = []\n    for element in test_list1:\n        if element not in t1:\n            t1.append(element)\n    for element in test_list2:\n        if element not in t2:\n            t2.append(element)\n    intersection = t1\n    print(f'Tuple Intersection of Test Lists: {intersection}')\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # your code here\n    temp = set()\n    i = 0\n    j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] < test_list2[j]:\n            temp.add(test_list1[i])\n            i = i + 1\n        elif test_list1[i] > test_list2[j]:\n            temp.add(test_list2[j])\n            j = j + 1\n        else:\n            temp.add(test_list1[i])\n            temp.add(test_list2[j])\n            j = j + 1\n            i = i + 1\n    return temp\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = [element for element in test_list1 if element not in test_list2]\n    return test_list1\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = ()\n    \n    for i in range(0,len(test_list1)):\n        for j in range(i+1,len(test_list1)):\n            if test_list1[i] == test_list1[j]:\n                intersection = intersection + (test_list1[i],)\n    \n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = ()\n    for item in test_list1:\n        if item in test_list2:\n            result += (item,)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    try:\n        intersection = test_list1[0]\n        for element in test_list2:\n            if element in test_list1:\n                test_list1.remove(element)\n                test_list1.insert(0, intersection)\n                return intersection\n    except IndexError:\n        print('IndexError')\n        print(test_list1)\n        print(test_list2)\n        raise IndexError\n    raise IndexError\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #return tuple(sorted(test_list1))\n    #print(test_list1)\n    #print(test_list2)\n    return tuple(sorted(set(test_list1) & set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = list(test_list1)\n    test_list2 = list(test_list2)\n    new_tuple = tuple(test_list1)\n    #print(new_tuple)\n    if len(test_list1)==len(test_list2):\n        for i in range(len(test_list1)):\n            if test_list1[i]==test_list2[i]:\n                new_tuple.remove(test_list2[i])\n    return new_tuple\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    res = ''\n    for c in str1:\n        if c == ch:\n            res += newch\n        else:\n            res += c\n    return res\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    import string\n    newstr = ''\n    for i in str1:\n        if i!= ch:\n            newstr += newch\n        else:\n            newstr += i\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.lower()\n    ch = ch.lower()\n    count_a = 0\n    count_u = 0\n    count_c = 0\n    count_o = 0\n    count_t = 0\n    count_i = 0\n    count_m = 0\n    count_s = 0\n    count_g = 0\n    count_n = 0\n    count_b = 0\n    count_k = 0\n    count_y = 0\n    count_c_a = 0\n    count_u_a = 0\n    count_c_u = 0\n    count_u_u = 0\n    count_c_i = 0\n    count_u_i = 0\n    count_c_m = 0\n    count_u_m = 0\n    count_c_s = 0\n    count_u_s = 0\n    count_c_g = 0\n    count_u_g = 0\n    count_c_n = 0\n    count_u_n = 0\n    count_c_b = 0\n    count_u_b = 0\n    count_c_k = 0\n    count_u_k = 0\n    count_c_y = 0\n    count_u_y = 0\n    count_c_c = 0\n    count_u_c = 0\n    count_c_o = 0\n    count_u_o = 0\n    count_c_t = 0\n    count_u_t = 0\n    count_c_i = 0\n    count_u_i = 0\n    count_c_m = 0\n    count_u_m = 0\n    count_c_s = 0\n    count_u_s = 0\n    count_c_g = 0\n    count_u_g = 0\n    count_c_n = 0\n    count_u_n = 0\n    count_c_b = 0\n    count_u_b = 0\n    count_c_k = 0\n    count_u_k = 0\n    count_c_y = 0\n    count_u_y = 0\n    count_c_c = 0\n    count_u_c = 0\n    count_c_o = 0\n    count_u_o = 0\n    count_c_t = 0\n    count_u_t = 0\n    count_c_i = 0\n    count_u_i = 0\n    count_c_m = 0\n    count_u_m = 0\n    count_c_s = 0\n    count_u_s = 0\n    count_c_g = 0\n    count_u_g = 0\n    count_c_n = 0\n    count_u_n = 0\n    count_c_b = 0\n    count_u_b = 0\n    count_c_k = 0\n    count_u_k = 0\n    count_c_y = 0\n    count_u_y = 0\n    count_c_c = 0\n    count_u_c = 0\n    count_c_o = 0\n    count_u_o = 0\n    count_c_t = 0\n    count_u_t = 0\n    count_c_i = 0\n    count_u_i = 0\n    count_c_m = 0\n    count_u_m = 0\n    count_c_s = 0\n    count_u_s = 0\n    count_c_g = 0\n    count_u_g = 0\n    count_c_n = 0\n    count_u_n = 0\n    count_c_b = 0\n    count_u_b = 0\n    count_c_k = 0\n    count_u_k = 0\n    count_c_y = 0\n    count_u_y = 0\n    count_c_c = 0\n    count_u_c = 0\n    count_c_o = 0\n    count_u_o = 0\n    count_c_t = 0\n    count_u_t = 0\n    count_c_i = 0\n    count_u_i = 0\n    count_c_m = 0\n    count_u_m = 0\n    count_c_s = 0\n    count_u_s = 0\n    count_c_g = 0\n    count_u_g = 0\n    count_c_n = 0\n    count_u_n = 0\n    count_c_b = 0\n    count_u_b = 0\n    count_c_k = 0\n    count_u_k = 0\n    count_c_y = 0\n    count_u_y = 0\n    count_c_c = 0\n    count_u_c = 0\n    count_c_o = 0\n    count_u_o = 0\n    count_c_t = 0\n    count_u_t = 0\n    count_c_i = 0\n    count_u_i = 0\n    count_c_m = 0\n    count_u_m = 0\n    count_c_s = 0\n    count_u_s = 0\n    count_c_g = 0\n    count_u_g = 0\n    count_c_n = 0\n    count_u_n = 0\n    count_c_b = 0\n    count_u_b = 0\n    count_c_k = 0\n    count_u_k = 0\n    count_c_y = 0\n    count_u_y = 0\n    count_c_c = 0\n    count_u_c = 0\n    count_c_o = 0\n    count_u_o = 0\n    count_c_t = 0\n    count_u_t = 0\n    count_c_i = 0\n    count_u_i = 0\n    count_c_m = 0\n    count_u_m = 0\n    count_c_s = 0\n    count_u_s = 0\n    count_c_g = 0\n    count_u_g = 0\n    count_c_n = 0\n    count_u_n = 0\n    count_c_b = 0\n    count_u_b = 0\n    count_c_k = 0\n    count_u_k = 0\n    count_c_y = 0\n    count_u_y = 0\n    count_c_c = 0\n    count_u_c = 0\n    count_c_o = 0\n    count_u_o = 0\n    count_c_t = 0\n    count_u_t = 0\n    count_c_i = 0\n    count_u_i = 0\n    count_c_m = 0\n    count_u_m = 0\n    count_c_s = 0\n    count_u_s = 0\n    count_c_g = 0\n    count_u_g = 0\n    count_c_n = 0\n    count_u_n = 0\n    count_c_b = 0\n    count_u_b = 0\n    count_c_k = 0\n    count_u_k = 0\n    count_c_y = 0\n    count_u_y = 0\n    count_c_c = 0\n    count_u_c = 0\n    count_c_o = 0\n    count_u_o = 0\n    count_c_t = 0\n    count_u_t = 0\n    count_c_i = 0\n    count_u_i = 0\n    count_c_m = 0\n    count_u_m = 0\n    count_c_s = 0\n    count_u_s = 0\n    count_c_g = 0\n    count_u_g = 0\n    count_c_n = 0\n    count_u_n = 0\n    count_c_b = 0\n    count_u_b = 0\n    count_c_k = 0\n    count_u_k = 0\n    count_c_y = 0\n    count_u_y = 0\n    count_c_c = 0\n    count_u_c = 0\n    count_c_o = 0\n    count_u_o = 0\n    count_c_t = 0\n    count_u_t = 0\n    count_c_i = 0\n    count_u_i = 0\n    count_c_m = 0\n    count_u_m = 0\n    count_c_s = 0\n    count_u_s = 0\n    count_c_g = 0\n    count_u_g = 0\n    count_c_n = 0\n    count_u_"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    assert str1!= None\n    assert newch!= None\n    assert ch!= None\n    str1 = str1.lower()\n    newstr = str1.replace(ch,newch)\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    try:\n        # if a string is passed\n        if type(str1)==str:\n            if newch.isalpha():\n                return str1.replace(ch,newch)\n            else:\n                return str1.replace(ch,newch.upper())\n        else:\n            # if a string is a list\n            # add the newch to the start\n            if newch.isalpha():\n                return str1[0:len(str1)-1]+newch+str1[len(str1):]\n            else:\n                return str1[0:len(str1)-1]+newch.upper()+str1[len(str1):]\n    except:\n        print('Error')\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1, key=dict1.get, reverse=True)\n    return sorted_dict\ndef quick_sort(arr):\n    '''\n    Write a quick sort algorithm.\n    '''\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[-1]\n        less_arr = [i for i in arr[:-1] if i <= pivot]\n        greater_arr = [i for i in arr[:-1] if i > pivot]\n        return quick_sort(less_arr) + [pivot] + quick_sort(greater_arr)\ndef binary_search(arr, search, start, end):\n    '''\n    Write a binary search algorithm.\n    '''\n    if start >= end:\n        return -1\n    else:\n        mid = (start + end) // 2\n        if search < arr[mid]:\n            return binary_search(arr, search, mid + 1, end)\n        elif search > arr[mid]:\n            return binary_search(arr, search, start, mid - 1)\n        else:\n            return mid\ndef partition(arr, low, high):\n    '''\n    Write a partition algorithm.\n    '''\n    if low < high:\n        i = partition(arr, low, high)\n        arr[low], arr[i] = arr[i], arr[low]\n        return i\ndef quick_sort_part(arr, start, end):\n    '''\n    Write a quick sort algorithm.\n    '''\n    if start >= end:\n        return arr\n    else:\n        i = partition(arr, start, end)\n        quick_sort_part(arr, start, i)\n        quick_sort_part(arr, i+1, end)\ndef quick_sort_recursion(arr, start, end):\n    '''\n    Write a quick sort algorithm recursively.\n    '''\n    if start >= end:\n        return arr\n    else:\n        i = partition(arr, start, end)\n        quick_sort_recursion(arr, start, i-1)\n        quick_sort_recursion(arr, i+1, end)\ndef partition(arr, low, high):\n    '''\n    Write a partition algorithm.\n    '''\n    pivot = arr[high]\n    i = low-1\n    for j in range(low, high):\n        if arr[j]<= pivot:\n            i+=1\n            arr[i],arr[j]=arr[j],arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1\ndef merge_sort(arr):\n    '''\n    Write a merge sort algorithm.\n    '''\n    if len(arr) < 2:\n        return arr\n    else:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return left + right\ndef quick_sort_recursion(arr, start, end):\n    '''\n    Write a quick sort algorithm recursively.\n    '''\n    if start >= end:\n        return arr\n    else:\n        i = partition(arr, start, end)\n        quick_sort_recursion(arr, start, i-1)\n        quick_sort_recursion(arr, i+1, end)\ndef quick_sort_iter(arr, start, end):\n    '''\n    Write a quick sort algorithm iteratively.\n    '''\n    if start >= end:\n        return arr\n    else:\n        pivot = arr[end]\n        i = start-1\n        j = end+1\n        while i<j:\n            if arr[i]<pivot:\n                i+=1\n            elif arr[j]>pivot:\n                j-=1\n            else:\n                arr[i],arr[j] = arr[j],arr[i]\n        arr[i+1],arr[end] = arr[end],arr[i+1]\n        return quick_sort_iter(arr, start, i-1)\ndef quick_sort_iter(arr, start, end):\n    '''\n    Write a quick sort algorithm iteratively.\n    '''\n    if start >= end:\n        return arr\n    else:\n        pivot = arr[end]\n        i = start-1\n        j = end+1\n        while i<j:\n            if arr[i]<pivot:\n                i+=1\n            elif arr[j]>pivot:\n                j-=1\n            else:\n                arr[i],arr[j] = arr[j],arr[i]\n        arr[i+1],arr[end] = arr[end],arr[i+1]\n        return quick_sort_iter(arr, start, i-1)\ndef merge_sort_iter(arr):\n    '''\n    Write a merge sort algorithm iteratively.\n    '''\n    if len(arr) < 2:\n        return arr\n    else:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort_iter(left)\n        right = merge_sort_iter(right)\n        return left + right\ndef bubble_sort(arr):\n    '''\n    Write a bubble sort algorithm.\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j]>arr[j+1]:\n                arr[j],arr[j+1] = arr[j+1],arr[j]\ndef heap_sort(arr):\n    '''\n    Write a heap sort algorithm.\n    '''\n    n = len(arr)\n    for i in range(n//2-1,-1,-1):\n        arr[i],arr[0] = arr[0],arr[i]\n        arr = heap_sort(arr)\n        arr[i],arr[0] = arr[0],arr[i]\ndef count_sort(arr):\n    '''\n    Write a count sort algorithm.\n    '''\n    n = len(arr)\n    counter = Counter(arr)\n    for key, value in counter.items():\n        arr[key] = value\n        arr[value] = key\n    i = len(arr)-1\n    while i>=0:\n        key, value = arr[i], arr[i-1]\n        i-=1\n        arr[i] = value\n        arr[value] = key\ndef reverse_string(arr, start, end):\n    '''\n    Write a reverse string algorithm.\n    '''\n    while start<=end:\n        arr[start],arr[end] = arr[end],arr[start]\n        start+=1\n        end-=1\ndef count_sort_recursion(arr, start, end):\n    '''\n    Write a count sort algorithm recursively.\n    '''\n    if start >= end:\n        return arr\n    else:\n        i = count_sort_recursion(arr, start+1, end)\n        arr[start],arr[i] = arr[i],arr[start]\n        return i\ndef count_sort_iter(arr, start, end):\n    '''\n    Write a count sort algorithm iteratively.\n    '''\n    if start >= end:\n        return arr\n    else:\n        i = start+1\n        j = end+1\n        while i<=j:\n            arr[i],arr[j] = arr[j],arr[i]\n            i+=1\n            j-=1\n        arr[start],arr[end] = arr[end],arr[start]\n        return count_sort_iter(arr, start, i-1)\ndef count_sort_iter(arr, start, end):\n    '''\n    Write a count sort algorithm iteratively.\n    '''\n    if start >= end:\n        return arr\n    else:\n        i = start+1\n        j = end+1\n        while i<=j:\n            arr[i],arr[j] = arr[j],arr[i]\n            i+=1\n            j-=1\n        arr[start],arr[end] = arr[end],arr[start]\n        return count_sort_iter(arr, start, i-1)\ndef merge_sor"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    newDict = {}\n    for i in dict1:\n        if dict1[i] not in newDict:\n            newDict[dict1[i]] = 1\n        else:\n            newDict[dict1[i]] += 1\n    sorted_dict = sorted(newDict.items(),key=lambda kv: kv[1])\n    return dict(sorted_dict)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    dict2 = dict()\n    for key,value in dict1.items():\n        if value not in dict2:\n            dict2[value] = []\n        dict2[value].append(key)\n    \n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counts = Counter(dict1)\n    sort = []\n    for key in counts:\n        counts[key] = counts.get(key, 0)\n    for key, value in counts.items():\n        sort.append((value, key))\n    sort = sorted(sort, reverse=True)\n    return sort\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Need to use a default dictionary for our keys\n    # then create a dictionary to add our new keys\n    sorted_dict = dict()\n    sorted_dict = {v:k for k, v in dict1.items()}\n    sorted_dict_new = {k:v for k, v in sorted_dict.items()}\n    #print(sorted_dict_new)\n    return sorted_dict_new\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key = lambda kv: kv[1]))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for i in dict1.items():\n        dict1[i[0]] = dict1[i[0]] + dict1[i[1]]\n    #dict1 = dict1.items()\n    sorted_dict = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    dict1 = dict1.fromkeys(dict1, 0)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = []\n    for i in dict1:\n        list1.append(dict1[i])\n    \n    list1.sort()\n    dict1.clear()\n    dict1.update(list1)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys = dict1.keys()\n    for k in keys:\n        dict1[k] = sorted(dict1[k])\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # 1. Declare a new list.\n    new_list = []\n    # 2. Use max() to find the maximum value.\n    for num in nums:\n        if num > max(new_list):\n            max_val = num\n        if num < min(new_list):\n            min_val = num\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Method 1 : O(n) time\n    if len(nums) == 0:\n        return 0\n    \n    min_num = float('inf')\n    max_num = float('-inf')\n    \n    for num in nums:\n        min_num = min(min_num, num)\n        max_num = max(max_num, num)\n    \n    return max_num - min_num\n    \n    # Method 2: O(n) time\n    if len(nums) == 0:\n        return 0\n    \n    for i in range(len(nums) - 1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] > nums[j]:\n                return nums[i] + nums[j]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #create an empty dictionary\n    dictionary = {}\n    #adding values to dictionary\n    for num in nums:\n        dictionary[num] = dictionary.get(num,0) + 1\n    #returns the sum of the values in dictionary\n    return sum(dictionary.values())\n    "
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = nums[0]\n    min_value = nums[0]\n    for number in nums:\n        if number > max_value:\n            max_value = number\n        if number < min_value:\n            min_value = number\n    return max_value + min_value\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # this is the simplest solution to the problem, but this solution would be harder to read, and the solution\n    # is going to be the same\n    # base case: if all the values are 0, there is no sum, so return 0\n    if len(nums) == 0:\n        return 0\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print('Return the sum of the largest and smallest value in the given array: ')\n    if not nums:\n        return 0\n    max_val = max(nums)\n    min_val = min(nums)\n    print(f'Maximum value in nums: {max_val}')\n    print(f'Minimum value in nums: {min_val}')\n    return max_val+min_val\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # if len(nums) == 1:\n    #     return nums[0]\n    # elif len(nums) == 2:\n    #     return max(nums) + min(nums)\n    # elif len(nums) == 3:\n    #     return max(nums) + min(nums) + max(nums)\n    # elif len(nums) > 3:\n    #     return max(nums) + min(nums) + max(nums) + min(nums)\n    # else:\n    #     return max(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = []\n    for num in nums:\n        result.append(num)\n        if num > result[-1]:\n            result[-1] = num\n    result.sort()\n    return sum(result)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    sum = 0\n    if nums == []:\n        return 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    if sum > max_value:\n        sum = max_value\n    if sum < min_value:\n        sum = min_value\n    return sum\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    lower_string = lower_string.replace(' ', '')\n    lower_string = lower_string.replace('.', '')\n    lower_string = lower_string.replace(',', '')\n    lower_string = lower_string.replace('!', '')\n    lower_string = lower_string.replace('-', '')\n    lower_string = lower_string.replace(' ', '')\n    lower_string = lower_string.replace('.', '')\n    lower_string = lower_string.replace(',', '')\n    lower_string = lower_string.replace('!', '')\n    lower_string = lower_string.replace('-', '')\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_list = []\n    for i in string:\n        if i.islower():\n            lower_list.append(i.lower())\n    return lower_list\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    print(lower_string)\n    print(type(lower_string))\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string is None or string == '' or string.lower() == '':\n        return None\n    else:\n        return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # complete the function\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i.lower()!= i:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    str3 = str2.replace(' ', '')\n    return str3\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # step1: remove all lowercase\n    str2 = str1.lower()\n    # step2: remove all lowercase spaces and digits\n    str2 = re.sub(\"([a-z])([0-9]*)\", \"\\\\1\\\\2\", str2)\n    # step3: remove all lowercase symbols\n    str2 = re.sub(\"([a-z])([A-Z])\", \"\\\\1\\\\2\", str2)\n    # step4: remove all upper case\n    str2 = re.sub(\"([a-z])([A-Z])\", \"\\\\1\\\\2\", str2)\n    # step5: remove all special characters\n    str2 = re.sub(\"([!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~])([a-zA-Z0-9!#$%&'()*+,-./:;<=>?@[\\]^_`{|}~])\", \"\\\\1\\\\2\", str2)\n    # step6: remove all non-letters\n    str2 = re.sub(\"([a-zA-Z])([A-Z])\", \"\\\\1\\\\2\", str2)\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    def remove_lowercase_substring(str):\n        '''\n        iterate through string to remove a lowercase substring.\n        '''\n        for i in range(len(str)):\n            if str[i].islower():\n                str = str.replace(str[i], '')\n        return str\n    return remove_lowercase_substring(str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #Regex\n    regex = r'[A-Z][a-z]'\n    #Search for each substring\n    for i in re.finditer(regex, str1):\n        #Replace each substring with the new string\n        str1 = str1.replace(i.group(), i.group().lower())\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'aAoOo':\n            start+=1\n        end = start\n        while end<len(str1) and str1[end] in 'aAoOo':\n            end+=1\n        #print(str1[start:end+1])\n        return str1[:start]+str1[end+1:]\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'aAoOo':\n            start+=1\n        end = start\n        while end<len(str1) and str1[end] in 'AOo':\n            end+=1\n        #print(str1[start:end+1])\n        return str1[:start]+str1[end+1:]\ndef remove_all(str1):\n    '''\n    Write a function to remove all substrings from a given string.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'abcdefghijklmnopqrstuvwxyz':\n            start+=1\n        end = start\n        while end<len(str1) and str1[end] not in 'abcdefghijklmnopqrstuvwxyz':\n            end+=1\n        #print(str1[start:end+1])\n        return str1[:start]+str1[end+1:]\ndef convert_to_lowercase(str1):\n    '''\n    Write a function to convert all substrings of the string to lowercase.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'abcdefghijklmnopqrstuvwxyz':\n            start+=1\n        end = start\n        while end<len(str1) and str1[end] in 'abcdefghijklmnopqrstuvwxyz':\n            end+=1\n        #print(str1[start:end+1])\n        return str1[:start]+str1[end+1].lower()+str1[end+2:]\ndef convert_to_uppercase(str1):\n    '''\n    Write a function to convert all substrings of the string to uppercase.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'aAoOo':\n            start+=1\n        end = start\n        while end<len(str1) and str1[end] in 'AOo':\n            end+=1\n        #print(str1[start:end+1])\n        return str1[:start]+str1[end+1].upper()+str1[end+2:]\ndef convert_to_all(str1):\n    '''\n    Write a function to convert all substrings of the string to all lowercase and uppercase.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            start+=1\n        end = start\n        while end<len(str1) and str1[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            end+=1\n        #print(str1[start:end+1])\n        return str1[:start]+str1[end].upper()+str1[end+1:]\ndef convert_to_all_length(str1):\n    '''\n    Write a function to convert all substrings of the string to all lowercase and uppercase with their lengths.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            start+=1\n        end = start\n        while end<len(str1) and str1[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            end+=1\n        #print(str1[start:end+1])\n        return str1[:start]+str1[end]+str1[end+1:]\ndef convert_to_all_capital(str1):\n    '''\n    Write a function to convert all substrings of the string to all lowercase and uppercase with their capitals.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            start+=1\n        end = start\n        while end<len(str1) and str1[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            end+=1\n        #print(str1[start:end+1])\n        return str1[:start]+str1[end].upper()+str1[end+1:]\ndef convert_to_all_all_lower(str1):\n    '''\n    Write a function to convert all substrings of the string to all lowercase and uppercase with their lengths.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            start+=1\n        end = start\n        while end<len(str1) and str1[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            end+=1\n        #print(str1[start:end+1])\n        return str1[:start]+str1[end]+str1[end+1:]\ndef convert_to_all_all_upper(str1):\n    '''\n    Write a function to convert all substrings of the string to all lowercase and uppercase with their capitals.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            start+=1\n        end = start\n        while end<len(str1) and str1[end] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            end+=1\n        #print(str1[start:end+1])\n        return str1[:start]+str1[end].upper()+str1[end+1:]\ndef convert_to_all_all_capital_upper(str1):\n    '''\n    Write a function to convert all substrings of the string to all lowercase and uppercase with their capitals.\n    '''\n    if len(str1)==0 or str1[0]==' ':\n        return str1\n    else:\n        start = 0\n        while start < len(str1) and str1[start] not in 'abcdefg"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace('?','')\n    str1 = str1.replace(':','')\n    str1 = str1.replace('.','')\n    str1 = str1.replace('!','')\n    str1 = str1.replace('\\n','')\n    str1 = str1.replace('\\t','')\n    str1 = str1.replace('\\r','')\n    str1 = str1.replace(';','')\n    str1 = str1.replace('-','')\n    str1 = str1.replace('!','')\n    str1 = str1.replace('-','')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    for i in range(len(str2)):\n        if str2[i]==\" \":\n            str2 = str2.replace(\" \", \"\")\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Check if the string contains any lowercase characters\n    if not re.search(\"[a-zA-Z]\", str1):\n        # replace each character with an underscore character\n        str1 = str1.replace(\"_\", \" \")\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return -1\n    else:\n        return n % 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digit_count = 0\n    while n > 0 :\n        digit = n % 10\n        if digit == 0 :\n            return digit\n        else :\n            n = n // 10\n            digit_count += 1\n    return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Your code here\n    if n<10:\n        return n\n    else:\n        return n%10\n    \ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Your code here\n    if n<10:\n        return n\n    else:\n        return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        print('0')\n    elif n == 1 :\n        print('1')\n    elif n == 2 :\n        print('2')\n    elif n == 3 :\n        print('3')\n    elif n == 4 :\n        print('4')\n    elif n == 5 :\n        print('5')\n    elif n == 6 :\n        print('6')\n    elif n == 7 :\n        print('7')\n    elif n == 8 :\n        print('8')\n    elif n == 9 :\n        print('9')\n    elif n >= 10 :\n        print('10')\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    for i in range(1, n+1) :\n        if (n % i == 0) :\n            return i\n        else : return -1\n    \n    \n    \n    \n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digits = []\n    for i in range(len(str(n))):\n        digits.append(int(str(n)[i]))\n    return digits[0]\n    \nprint(first_Digit(123))\nprint(first_Digit(1234))\nprint(first_Digit(123456789012345))\nprint(first_Digit(999999999))\nprint(first_Digit
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    lst = []\n    for i in range(n) : \n        lst.append(int(str(i)))\n    return lst[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = str(n)\n    if len(n) == 0:\n        return 0\n    for i in range(0,len(n)) :\n        if n[i].isdigit() == True:\n            return int(n[i])\n    \ndef count_Digit(n) :  \n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count = 0\n    n = str(n)\n    if len(n) == 0:\n        return 0\n    for i in range(0,len(n)) :\n        if n[i].isdigit() == True:\n            count += 1\n    return count\n    \ndef is_Valid_Number(n) :  \n    '''\n    Write a python function to check whether a given number is a valid number.\n    '''\n    \n    n = str(n)\n    if len(n) == 0:\n        return False\n    for i in range(0,len(n)) :\n        if n[i].isdigit() == True:\n            return True\n    return False\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n!= 0 :\n        \n        rem = n % 10\n        n = n // 10\n        return rem\n    \ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n!= 0 :\n        \n        rem = n % 10\n        n = n // 10\n        return rem\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    return n%10\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    newList = []\n    for i in list:\n        if i % 2!= 0:\n            newList.append(i)\n    return newList\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i % 2!= 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    evens = []\n    for i in list: \n        if i % 2 == 0: \n            evens.append(i) \n    return evens\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    new_list = []\n    for item in list:\n        if item % 2 == 1:\n            new_list.append(item)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for element in list:\n        if(element % 2 == 1):\n            result.append(element)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2==1:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    evens = []\n    odds = []\n    for i in list: \n        if i % 2 == 0:\n            evens.append(i)\n        else: \n            odds.append(i)\n    return evens, odds\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [int(i) for i in list if not int(i)%2]\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = []\n    for i in range(0,n+1) :\n        cubes.append(i**3)\n    return sum(cubes)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i ** 3\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # TODO: define your code\n    def recur(n, cubes, ans):\n        if n == 0:\n            ans.append(cubes)\n            return\n        \n        for i in range(n,len(cubes)):\n            ans.append(cubes[i] - cubes[i-1])\n            recur(n-1, cubes, ans)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i**3\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cube1 = 1\n    for i in range(1, n+1) :\n        cube1 = cube1 * (i ** 3)\n    return cube1\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    n = len(n)\n    total = 0\n    for i in n:\n        total += i * i * i\n    \n    print(total)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # your code here\n    cubes=[]\n    for i in range(1,n+1) :\n        cubes.append(i**3)\n    result = sum(cubes) - sum(range(1,n+1))\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    print(total)\n    return total\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = n%10\n    sum = 0\n    for i in range(1,n+1) :\n        sum = sum + (i**3)\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # base case\n    if n==1:\n        return n\n    elif n==2:\n        return 2\n    elif n==3:\n        return 6\n    else:\n        return n+difference(n-1)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    k = 0\n    for i in range(len(A)-1):\n        if A[i]!= A[i+1]:\n            k += 1\n    return k\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #if n is less then 1 then it returns an error\n    if N < 2 : \n        return 0 \n    \n    # we create an array with all the pairs\n    Pair_array = []\n    for i in range(N) : \n        Pair_array.append(A[i] ^ A[i+1])\n    # we create a count variable\n    count = 0 \n    #we loop through the array\n    for i in range(N) : \n        # checking if the xor value of each element is odd \n        if Pair_array[i] == 0 : \n            count += 1 \n    # we return the count variable \n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if A == [] : return 0\n    if N == 0 : return 0\n    if A[0] == A[1] : \n        return 2*(len(A[1:])-1)\n    if N & 1!= 0 :\n        return len(A) + find_Odd_Pair(A[1:],N//2)\n    else :\n        return len(A[1:]) + find_Odd_Pair(A[1:],N//2)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    s = set(A)\n    x = sum(s)\n    m = 0\n    for i in range(N):\n        if A[i] & 1!= A[i]:\n            m += 1\n    if m!= 0:\n        return m\n    else:\n        return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #print(A)\n    cnt = 0\n    for i in range(N-1) : \n        for j in range(i+1,N) : \n            #print(\"xor val: \",A[i]^A[j])\n            if A[i]^A[j] == 0 : \n                cnt +=1 \n    return cnt\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor = 0\n    for i in range(len(A)) :\n        xor += A[i] ^ (A[i] >> 1)\n    \n    if xor & (xor - 1)!= 0 :\n        print(\"Number of pairs with odd xor value is:\", (xor ^ (xor >> 1)))\n    else :\n        print(\"Number of pairs with odd xor value is:\", 0)\n    \nif __name__ == \"__main__\" :\n    A = [1,2,3,4,5,6,7,8,9,10]\n    N = len(A)\n    find_Odd_Pair(A,N)\n    "
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pairs = 0 \n    A_xor = 0 \n    for i in range(N-1) : \n        if A[i] & A[i+1]!= 0 : \n            pairs += 1 \n            A_xor |= A[i] \n            A_xor |= A[i+1] \n    return pairs % 2 \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(N-1) : \n        for j in range(i,N) : \n            if (A[i] & A[j])!= 0 : \n                odd += 1\n    return odd\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    c = 0\n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if (A[i]^A[j])&1 == 1 : \n                c = c+1\n    return c\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    # 0 -> 1\n    # 1 -> 1\n    # 2 -> 1\n    # 3 -> 0\n    # 4 -> 0\n    \n    \n    i = 0\n    j = 0\n    \n    while(j<N-1) :\n        \n        if(A[i]&A[j]==0) :\n            i+=1\n            j+=1\n        else :\n            if(A[i]&A[j]&1) :\n                i+=1\n            else :\n                j+=1\n    \n    if(i==N-1) :\n        return 0\n    else :\n        return i+1\n    \ndef isPairSum(A,N) :\n    '''\n    Write a python function to check if the input array is a sum of pairs whose sums are equal to the input array.\n    '''\n    \n    i = 0\n    j = 0\n    \n    while(j<N-1) :\n        \n        if(A[i]&A[j]==A[i]&A[j]&1) :\n            i+=1\n            j+=1\n        else :\n            if(A[i]&A[j]&1) :\n                i+=1\n            else :\n                j+=1\n    \n    if(i==N-1) :\n        return 1\n    else :\n        return 0\n    \ndef find_Pairs(A) :\n    '''\n    Write a python function to find the pairs whose sum is odd.\n    '''\n    \n    # 0 -> 1\n    # 1 -> 1\n    # 2 -> 1\n    # 3 -> 0\n    # 4 -> 0\n    \n    \n    S = set()\n    i = 0\n    j = 0\n    \n    while(j<len(A)-1) :\n        \n        if(A[i]&A[j]==A[i]&A[j]&1) :\n            S.add((A[i],A[j]))\n            i+=1\n            j+=1\n        else :\n            if(A[i]&A[j]&1) :\n                i+=1\n            else :\n                j+=1\n    \n    if(i==len(A)-1) :\n        return S\n    else :\n        return []\n    \ndef find_odd_pairs(A) :\n    '''\n    Write a python function to find the odd pairs whose sum is odd.\n    '''\n    \n    # 0 -> 1\n    # 1 -> 1\n    # 2 -> 1\n    # 3 -> 0\n    # 4 -> 0\n    \n    \n    S = set()\n    i = 0\n    j = 0\n    \n    while(j<len(A)-1) :\n        \n        if(A[i]&A[j]==A[i]&A[j]&1) :\n            if(A[i]&A[j]&1) :\n                S.add((A[i],A[j]))\n            i+=1\n            j+=1\n        else :\n            if(A[i]&A[j]&1) :\n                i+=1\n            else :\n                j+=1\n    \n    if(i==len(A)-1) :\n        return S\n    else :\n        return []\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            char = char.lower()\n        if char.islower():\n            char = char.upper()\n        if char.isalpha():\n            count += 1\n    if count >= 1:\n        print(\"'\", string, \"'\", sep='')\n    if count == 0:\n        print(\"'\", string, \"'\")\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if not string:\n        return string\n    \n    lower_chars = string.lower()\n    return lower_chars.replace(' ', '').replace('\\'', '').replace('&', '').replace('.', '').replace('?', '')\n    \n    "
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    \n    return string.replace(' ', '_').replace('_','').title()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # TODO\n    return ''.join([''if c =='' else c.lower() for c in string]"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.upper().strip().isalpha():\n        return string.replace(string[0].upper(), \"\")\n    elif string.lower().strip().isalpha():\n        return string.replace(string[0].lower(), \"\")\n    else:\n        return string\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for c in string:\n        if c.isupper():\n            new_string += c.lower()\n        elif c.islower():\n            new_string += c.upper()\n        else:\n            new_string += c\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.title()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_str = \"\"\n    for c in string:\n        if c == string[0]:\n            new_str += c\n        else:\n            new_str += c.upper()\n    return new_str\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(map(lambda x,y: abs(x-y), n1, n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = 0\n    for i in range(0, 9):\n        d = d + (n1 - n2 * i)\n    return d\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = {}\n    for i in range(10):\n        d[i] = 0\n    for i in range(1, 10):\n        for j in range(10):\n            d[i] += (n1 - (10**(j-1))) * (n2 - (10**(j-1)))\n    return d[int(n2)]\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 < 10 and n2 < 10:\n        return abs(n1 - n2)\n    elif n1 < 10 and n2 > 10:\n        if n1 < n2:\n            return abs(n1 - n2) + digit_distance_nums(n2, n1)\n        elif n2 < n1:\n            return abs(n1 - n2) + digit_distance_nums(n1, n2)\n        else:\n            return digit_distance_nums(n2, n1)\n    else:\n        return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = 0\n    for i in range(n1):\n        d += abs(n2 - n1) * (10 ** i)\n    return d\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if not isinstance(n1, int):\n        raise TypeError('n1 must be an integer')\n    if not isinstance(n2, int):\n        raise TypeError('n2 must be an integer')\n    return (n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    elif n1 == 0:\n        return n2\n    elif n2 == 0:\n        return n1\n    else:\n        return n1-n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        n1, n2 = n2, n1\n    diff = 0\n    for i in range(n1, n2 + 1):\n        diff += (10**(n1 - i)) - (10**(n2 - i))\n    return diff\n    # Should return the sum of the digits in the input n1, n2, and the difference between them.\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1<0 or n2<0:\n        return -1\n    else:\n        diff = 0\n        i=0\n        while n1>0:\n            diff += pow(10,i)\n            i+=1\n            n1-=pow(10,i)\n        i=0\n        while n2>0:\n            diff += pow(10,i)\n            i+=1\n            n2-=pow(10,i)\n        return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        small = n2\n    else:\n        small = n1\n    small_sum = 0\n    digit_diff = 0\n    for digit in str(small):\n        digit_diff = digit_diff + int(digit)\n    for digit in str(small):\n        small_sum += int(digit)\n    return digit_diff - small_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sub_sum = 0\n    left = 0\n    right = 0\n    start = 0\n    end = size - 1\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Base Cases\n    if size == 1:\n        return a[0]\n    if size == 2:\n        return a[0] + a[1]\n    # Recur for all sublists\n    n = size\n    sublist = []\n    for i in range(size):\n        sublist.append(max_sub_array_sum(a, n - 1))\n    print(sublist)\n    sublist.append(a[0])\n    sublist.append(a[-1])\n    print(sublist)\n    # Find max\n    return max(sublist)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_sum = 0\n    for i in range(size):\n        sub_sum += max_sub_array_sum(a, size-i-1)\n    return sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    left = 0\n    right = size - 1\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    n = len(a)\n    \n    # For the first element, return a sum of 0\n    if n == 0:\n        return 0\n    \n    # For the remaining elements, calculate the largest sublist by\n    # iterating over the list in reverse order.\n    # We only need to check for the 0th element because\n    # the length of the largest sublist is 1\n    for i in range(n-1, -1, -1):\n        # If the current index is the last element, return a sum\n        if i == n-1:\n            return sum(a[i:])\n        \n        # If the current index is a zero, then we will\n        # just return the sum of the previous element\n        # and the current element\n        if a[i] == 0:\n            return sum(a[i:]) + a[i]\n        \n        # We have already found the largest sublist, so\n        # just return the current element.\n        return max(a[i], a[i] + a[i])\n    \n    # If we reach here, then the list is not a valid\n    # subarray. Return None.\n    return None"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    t = 0\n    a_max = 0\n    for i in range(len(a)):\n        t += a[i]\n        if i == 0:\n            a_max = a[i]\n        else:\n            if a[i] > a_max:\n                a_max = a[i]\n    return t - a_max\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size == 1:\n        return a[size]\n    max_sum = 0\n    max_sum_list = []\n    for i in range(0, size):\n        curr_sum = a[i]\n        if i == 0:\n            sub_sum = curr_sum\n        else:\n            sub_sum = max_sum\n            if sub_sum > curr_sum:\n                max_sum_list.append(curr_sum)\n                curr_sum = sub_sum\n            else:\n                curr_sum += sub_sum\n        max_sum += sub_sum\n    max_sum_list.append(curr_sum)\n    return max_sum_list\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = 0\n    for i in range(0, size):\n        if max_sub < 0:\n            max_sub = a[i]\n        else:\n            max_sub = max(a[i], max_sub)\n    return max_sub\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    \n    # Check if the list is a single number, if it is return it as a sum\n    if a[0] == 0:\n        return a[0]\n    \n    # if the list is a list of integers, use helper function to return max sub-array sum\n    if isinstance(a, list):\n        return max_sub_array_sum(a[1:], size - 1)\n    \n    # return the largest sum that is not a list of integers\n    return max(a[0:size]) + max(a[size:])\n    \n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    i=0\n    sub_sum=0\n    while i<len(a):\n        sub_sum=sub_sum+a[i]\n        i=i+1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #\n    # Write your code here.\n    #\n    t1 = tuple(sorted(test_tup1))\n    t2 = tuple(sorted(test_tup2))\n    #\n    # Write your code here.\n    #\n    return t1, t2\n    pass\n    #\n    #raise NotImplementedError\n    #\n    # raise NotImplementedError\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    i = 0\n    j = 0\n    temp_list = []\n    temp_list1 = []\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] < test_tup2[j]:\n            temp_list1.append(test_tup1[i])\n            i = i + 1\n        elif test_tup1[i] > test_tup2[j]:\n            temp_list2.append(test_tup2[j])\n            j = j + 1\n        else:\n            temp_list1.append(test_tup1[i])\n            temp_list2.append(test_tup2[j])\n            i = i + 1\n            j = j + 1\n    if i < len(test_tup1):\n        temp_list1.extend(test_tup1[i:])\n    if j < len(test_tup2):\n        temp_list2.extend(test_tup2[j:])\n    \n    return temp_list1, temp_list2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # your code goes here\n    output = list(set(test_tup1).union(test_tup2))\n    output.sort()\n    return output\n    \n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = ()\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if test_tup1 == () and test_tup2 == ():\n        return ()\n    if test_tup1 == () or test_tup2 == ():\n        return (())\n    if test_tup1[0] < test_tup2[0]:\n        test_tup1 = (test_tup1[1], test_tup1[0])\n    else:\n        test_tup2 = (test_tup2[1], test_tup2[0])\n    if test_tup1[1] < test_tup2[1]:\n        test_tup1 = (test_tup1[0], test_tup1[1])\n    else:\n        test_tup2 = (test_tup2[0], test_tup2[1])\n    if test_tup1[1] == test_tup2[1]:\n        return ()\n    return (test_tup1[0], test_tup2[1])"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # TODO: Write your code here\n    tup1 = tuple(sorted(test_tup1))\n    tup2 = tuple(sorted(test_tup2))\n    return tup1, tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    print(l1, l2)\n    if len(l1)>len(l2):\n        temp = l2\n        l2 = l1\n        l1 = temp\n    elif len(l2)>len(l1):\n        temp = l1\n        l1 = l2\n        l2 = temp\n    print(l1, l2)\n    return sorted(l1+l2)\n    \n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    i = 0\n    j = 0\n    while(i < len(test_tup1) and j < len(test_tup2)):\n        if(test_tup1[i] < test_tup2[j]):\n            i += 1\n        elif(test_tup1[i] > test_tup2[j]):\n            j += 1\n        else:\n            temp = test_tup1[i]\n            test_tup1[i] = test_tup2[j]\n            test_tup2[j] = temp\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1 + test_tup2\n    else:\n        return test_tup2 + test_tup1\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    maxLength = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > maxLength:\n            maxLength = len(lst[i])\n    return maxLength\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_len = 0\n    lst_length = 0\n    lst_two_length = []\n    lst_two_length.append(lst[0])\n    \n    for i in range(1,len(lst)):\n        if len(lst[i]) > max_len:\n            lst_two_length.clear()\n            lst_two_length.append(lst[i])\n            lst_two_length.append(lst[i])\n        elif len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            lst_two_length = [lst[i]]\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Creating empty lists\n    sublist_lengths = []\n    sublist_count = []\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count = 0\n    max_length = 0\n    lst = sorted(lst, reverse = True)\n    for i in range(len(lst)):\n        count = count + 1\n        if (count % 2) == 0:\n            max_length = max_length + 1\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(0, len(lst)):\n        curr_length = 0\n        for j in range(0, len(lst[i])):\n            curr_length += 1\n        if curr_length > max_length:\n            max_length = curr_length\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst_len = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if len(lst[i][j]) > max(lst[i][j]):\n                max = len(lst[i][j])\n            else:\n                continue\n            lst_len.append(max)\n    return max(lst_len)\n    \n    \n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst == []:\n        return 0\n    else:\n        lst = sorted(lst, key = len, reverse=True)\n        length = 0\n        for i in range(len(lst)):\n            length += 1\n            if (length >= lengthMax):\n                lengthMax = length\n            else:\n                pass\n        return lengthMax\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n    else:\n        ans = 1\n        for i in range(1, len(lst)):\n            if lst[i - 1] == lst[i]:\n                ans += 1\n            else:\n                ans = 1\n        return ans\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 1\n    max_length = 1\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] > lst[j] and length <= max_length:\n                max_length = length\n            length += 1\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLen = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j] and len(lst[i]) > maxLen:\n                maxLen = len(lst[i])\n    return maxLen\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace('\\'','')\n    return text\ndef remove_vowels(text):\n    '''\n    Write a function to remove all vowels in a string.\n    '''\n    vowels = 'aeiou'\n    text = text.lower()\n    result = ''\n    for i in text:\n        if i in vowels:\n            result += i\n    return result\ndef get_first(text):\n    '''\n    Write a function to return the first character of a string.\n    '''\n    result = text[0]\n    return result\ndef remove_whitespace(text):\n    '''\n    Write a function to remove all whitespace from a string.\n    '''\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    return text\ndef is_digit(s):\n    '''\n    Write a function to check whether a string is a digit.\n    '''\n    s = s.replace(' ', '')\n    s = s.replace('-','')\n    return s.isdigit()\ndef is_upper(s):\n    '''\n    Write a function to check whether a string is an upper case one.\n    '''\n    s = s.replace(' ', '')\n    return s.isupper()\ndef is_lower(s):\n    '''\n    Write a function to check whether a string is a lower case one.\n    '''\n    s = s.replace(' ', '')\n    return s.islower()\ndef is_space(s):\n    '''\n    Write a function to check whether a string is a space one.\n    '''\n    s = s.replace(' ', '')\n    return s.isspace()\ndef is_alpha(s):\n    '''\n    Write a function to check whether a string is an alpha one.\n    '''\n    s = s.replace(' ', '')\n    return s.isalpha()\ndef remove_letters(text):\n    '''\n    Write a function to remove all characters from a string that are not letters.\n    '''\n    text = text.lower()\n    result = ''\n    for i in text:\n        if i not in 'abcdefghijklmnopqrstuvwxyz':\n            result += i\n    return result\ndef is_digit_a_to_z(s):\n    '''\n    Write a function to check whether a string is a digit a to z.\n    '''\n    s = s.replace(' ', '')\n    return s.isdigit()\ndef count_letters(text):\n    '''\n    Write a function to count the letters in a string.\n    '''\n    count = 0\n    for i in text:\n        if i.isalpha():\n            count += 1\n    return count\ndef count_digits(text):\n    '''\n    Write a function to count the digits in a string.\n    '''\n    count = 0\n    for i in text:\n        if i.isdigit():\n            count += 1\n    return count\ndef sum_letters(text):\n    '''\n    Write a function to sum the letters in a string.\n    '''\n    result = 0\n    for i in text:\n        result += ord(i)\n    return result\ndef remove_num(text):\n    '''\n    Write a function to remove numbers from a string.\n    '''\n    text = text.replace('\\n','')\n    result = ''\n    for i in text:\n        if i.isdigit():\n            result += i\n    return result\ndef remove_c(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'c':\n            result +=''\n    return result\ndef remove_p(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'p':\n            result +=''\n    return result\ndef remove_s(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i =='s':\n            result +=''\n    return result\ndef remove_r(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'r':\n            result +=''\n    return result\ndef remove_w(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'w':\n            result +=''\n    return result\ndef remove_t(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 't':\n            result +=''\n    return result\ndef remove_y(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'y':\n            result +=''\n    return result\ndef remove_m(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i =='m':\n            result +=''\n    return result\ndef remove_l(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'l':\n            result +=''\n    return result\ndef remove_o(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'o':\n            result +=''\n    return result\ndef remove_v(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'v':\n            result +=''\n    return result\ndef remove_x(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'x':\n            result +=''\n    return result\ndef remove_b(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'b':\n            result +=''\n    return result\ndef remove_f(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'f':\n            result +=''\n    return result\ndef remove_g(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'g':\n            result +=''\n    return result\ndef remove_j(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'j':\n            result +=''\n    return result\ndef remove_k(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'k':\n            result +=''\n    return result\ndef remove_l(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'l':\n            result +=''\n    return result\ndef remove_n(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if i == 'n':\n            result +=''\n    return result\ndef remove_o(text):\n    '''\n    Write a function to remove a character from a string.\n    '''\n    result = ''\n    for i in text:\n        if "
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace(\"'\", \"\").replace('\"', \"\")\n    values = []\n    if \"(\" in text:\n        tmp_text = text.replace(\"(\", \"\").replace(\")\", \"\")\n        regexp = re.compile(r'\\(.*\\)|\\)|\\)|\\s')\n        tmp_list = regexp.findall(tmp_text)\n        for i in tmp_list:\n            if \" \" in i:\n                tmp_str = i.replace(\" \", \"\").replace(\"\\n\", \"\").replace(\"\\t\", \"\").replace(\"\\r\", \"\").replace(\"\\f\", \"\").replace(\"\\xa0\", \"\")\n                values.append(tmp_str)\n            else:\n                values.append(i)\n    elif text.count(\" \")!= 0:\n        tmp_text = text.replace(\" \", \"\").replace(\"\\n\", \"\").replace(\"\\t\", \"\").replace(\"\\r\", \"\").replace(\"\\f\", \"\").replace(\"\\xa0\", \"\")\n        values.append(tmp_text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\w{1,30}\\s[\u2019\u00ab\u00bb]', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'''(?P<value>[^\"]+?) \"(?P<value_end>[^\"]+)\"\"\"(?P<value_end_escaped>.+?)\"\"\"(?P<value_escaped>.*?)\"''')\n    match = pattern.search(text)\n    if match is None:\n        print(\"No match found\")\n        return\n    value = match.group('value').replace('\"', '')\n    value_end = match.group('value_end')\n    value_end_escaped = match.group('value_end_escaped')\n    value_escaped = match.group('value_escaped')\n    print(f'value: {value}')\n    print(f'value_end: {value_end}')\n    print(f'value_end_escaped: {value_end_escaped}')\n    print(f'value_escaped: {value_escaped}')\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # extract all values (within double quotation marks) between quotation marks\n    values = re.findall(r'\\w+[^\\\"]*[\\\"]?\\w+', text)\n    # remove quotation marks\n    values = [value.replace('\\\"', \"\") for value in values]\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    for i in range(0,len(text),2):\n        try:\n            values.append(text[i:i+2])\n        except IndexError:\n            break\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    val = re.findall(r'[^( ]+', text)\n    return val\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #The special case when there is a quotation mark\n    if text.startswith(\"'\"):\n        return [value.strip() for value in text.split(r'\"')]\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = []\n    for i in text:\n        if i.isalpha():\n            result.append(i)\n    return ''.join(result)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r\"^(\\w+)'(\\w+)\")\n    result = re.findall(regex, text)\n    return result\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j] and arr[i]!= arr[j]:\n                if arr[i] > arr[j]:\n                    ans += 1\n    return ans\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j] :\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count=0\n    for i in range(n):\n        if arr[i]==arr[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # start with a list of all the possible pairs\n    pairs = []\n    for i in range(n):\n        for j in range(i+1,n):\n            pairs.append([i,j])\n    \n    # count the number of pairs\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j] and abs(arr[i] - arr[j]) == 1:\n                count += 1\n            if arr[i] < arr[j]:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    possible_pairs = 0\n    # for x in range(len(arr)-1):\n    #     for y in range(x+1, len(arr)):\n    #         if (arr[x]!= arr[y]) and (arr[y]!= arr[x]):\n    #             possible_pairs+=1\n    #             print(possible_pairs)\n    #             return possible_pairs\n    #         else:\n    #             continue\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # def count_Pairs(arr,n):\n    \n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            continue\n        if arr[i] % 2!= arr[i-1] % 2:\n            count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j] and (arr[i]<arr[j] or i==j):\n                count=count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j] and arr[i]!= arr[j]:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                c += 1\n    return c\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    freq = {}\n    \n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    print(freq)\n    \n    for i in range(n):\n        if arr[i] in freq:\n            print(freq[arr[i]])\n            freq[arr[i]] += 1\n        else:\n            print(1)\n        \n    print(freq)\n        \n    \n    return(freq)    \n    \ndef check_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and prints the number of pairs where elements are equal and the value is greater than the value passed in.\n    '''\n    freq = {}\n    \n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    print(freq)\n    \n    for i in range(n):\n        if arr[i] in freq:\n            print(freq[arr[i]])\n            freq[arr[i]] += 1\n        else:\n            print(1)\n        \n    print(freq)\n        \n    \n    return(freq)    \n    \ndef count_smallest_value(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of unordered pairs where both elements are less than the value passed in.\n    '''\n    freq = {}\n    \n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    print(freq)\n    \n    for i in range(n):\n        if arr[i] in freq:\n            print(freq[arr[i]])\n            freq[arr[i]] += 1\n        else:\n            print(1)\n        \n    print(freq)\n        \n    \n    return(freq)    \n    \ndef count_greatest_value(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of unordered pairs where both elements are greater than the value passed in.\n    '''\n    freq = {}\n    \n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    print(freq)\n    \n    for i in range(n):\n        if arr[i] in freq:\n            print(freq[arr[i]])\n            freq[arr[i]] += 1\n        else:\n            print(1)\n        \n    print(freq)\n        \n    \n    return(freq)    \n    \ndef count_unique_values(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of unordered pairs where the number of unique elements is also the value passed in.\n    '''\n    freq = {}\n    \n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    print(freq)\n    \n    for i in range(n):\n        if arr[i] in freq:\n            print(freq[arr[i]])\n            freq[arr[i]] += 1\n        else:\n            print(1)\n        \n    print(freq)\n        \n    \n    return(freq)    \n    \ndef count_unique_values(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of unordered pairs where the number of unique elements is also the value passed in.\n    '''\n    freq = {}\n    \n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    print(freq)\n    \n    for i in range(n):\n        if arr[i] in freq:\n            print(freq[arr[i]])\n            freq[arr[i]] += 1\n        else:\n            print(1)\n        \n    print(freq)\n        \n    \n    return(freq)    \n    \ndef main(): \n    \n    print(\"1. Count Number of Unordered Pairs\\n2. Count Number of Pairs of Equal Value\\n3. Count Number of Unordered Pairs\\n4. Count Number of Pairs of Less Than Value\\n5. Count Number of Pairs of Greater Than Value\\n6. Count Number of Pairs of Equal Value\\n7. Count Number of Pairs of Smallest Value\\n8. Count Number of Pairs of Most Value\\n9. Count Number of Pairs of Equal Value\\n10. Count Number of Pairs of Less Than Value\")\n    while True:\n        \n        try:\n            option = int(input(\"Enter a number: \"))\n            if option >= 1 and option <= 9:\n                break\n            else:\n                print(\"Invalid Number\")\n        except ValueError:\n            print(\"Invalid Number\")\n    \n    if option == 1:\n        print(count_unordered_values(arr, n))\n        \n    elif option == 2:\n        print(count_Pairs(arr, n))\n        \n    elif option == 3:\n        print(check_Pairs(arr, n))\n        \n    elif option == 4:\n        print(count_smallest_value(arr, n))\n        \n    elif option == 5:\n        print(count_greatest_value(arr, n))\n        \n    elif option == 6:\n        print(count_unique_values(arr, n))\n        \n    elif option == 7:\n        print(check_unique_values(arr, n))\n    \n    elif option == 8:\n        print(count_unordered_values(arr, n))\n        \n    elif option == 9:\n        print(count_Pairs(arr, n))\n        \n    elif option == 10:\n        print(count_smallest_value(arr, n))\n        \n    else:\n        print(\"Invalid Number\")\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if word.isalpha(): \n        return word\n    else: \n        return word.split()\n    \n    \ndef is_upper(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isupper() for c in word)\n    \n    \ndef is_upper2(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isupper() for c in word) and not any(c.isupper() for c in word)\n    \n    \ndef is_number(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isdigit() for c in word) and not any(c.isdigit() for c in word)\n    \n    \ndef is_number2(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isdigit() for c in word) and not any(c.isdigit() for c in word) and not any(c.isdigit() for c in word)\n    \n    \ndef is_letter(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word)\n    \n    \ndef is_letter2(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word) and not any(c.isalpha() for c in word)\n    \n    \ndef is_letter3(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word)\n    \n    \ndef is_alphabet(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word)\n    \n    \ndef is_alphabet2(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word) and not any(c.isalpha() for c in word)\n    \n    \ndef is_alphabet3(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word)\n    \n    \ndef is_special(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word)\n    \n    \ndef is_special2(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word)\n    \n    \ndef is_special3(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word)\n    \n    \ndef is_number_special(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isdigit() for c in word) and not any(c.isdigit() for c in word) and not any(c.isdigit() for c in word) and not any(c.isdigit() for c in word)\n    \n    \ndef is_number_special2(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isdigit() for c in word) and not any(c.isdigit() for c in word) and not any(c.isdigit() for c in word) and not any(c.isdigit() for c in word) and not any(c.isdigit() for c in word)\n    \n    \ndef is_number_special3(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isdigit() for c in word) and not any(c.isdigit() for c in word) and not any(c.isdigit() for c in word) and not any(c.isdigit() for c in word) and not any(c.isdigit() for c in word)\n    \n    \ndef is_special_special(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word)\n    \n    \ndef is_special_special2(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word)\n    \n    \ndef is_special_special3(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word) and not any(c.isalpha() for c in word)\n    \n    \ndef is_lower(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.islower() for c in word)\n    \n    \ndef is_lower2(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.islower() for c in word) and not any(c.islower() for c in word) and not any(c.islower() for c in word) and not any(c.islower() for c in word)\n    \n    \ndef is_lower3(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.islower() for c in word) and not any(c.islower() for c in word) and not any(c.islower() for c in word) and not any(c.islower() for c in word) and not any(c.islower() for c in word)\n    \n    \ndef is_upper(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return all(c.isupper() for c in word)\n    \n    \ndef is_upper2(word): \n    '''\n    Write a python function to check if the string word is uppercase.\n    '''\n    return al"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    split_string = word.split(\" \")\n    return split_string\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # your code goes here\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # words = 'The quick brown fox jumps over the lazy dog'\n    # print(words)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    \n    split_word = []\n    words = []\n    \n    for letter in word:\n        if letter in \"aeiou\":\n            split_word.append(letter)\n    \n    return split_word\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [x for x in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum=0\n    while(n!= 0):\n        sum = sum + n % 10\n        n = int(n / 10)\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(str(n)[0]) + sum_digits(int(str(n)[1:]))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s=0\n    while(n):\n        s+=n%10\n        n//=10\n    return s"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if(type(n)!= int):\n        raise TypeError\n    elif(n < 0):\n        raise ValueError\n    else:\n        s = 0\n        while(n!= 0):\n            s += n % 10\n            n = n // 10\n        return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i) for i in str(n)])\ndef sum_up_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\ndef sum_digits_and_pow(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef sum_up_digits_and_pow(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_and_pow_2(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef max_digit(n):\n    '''\n    Write a function that returns the maximum digit of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return max([int(i) for i in str(n)])\ndef max_digit_2(n):\n    '''\n    Write a function that returns the maximum digit of a non-negative integer.\n    '''\n    return max([int(i)**n for i in str(n)])\ndef max_digits(n):\n    '''\n    Write a function that returns the maximum digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return max([int(i) for i in str(n)])\ndef sum_digits_and_pow_2_2(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_and_pow_2(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_and_pow(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_2(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef max_digits_2(n):\n    '''\n    Write a function that returns the maximum digits of a non-negative integer.\n    '''\n    return max([int(i)**n for i in str(n)])\ndef sum_digits_and_pow_2_2_2(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_and_pow_2(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_and_pow(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_2(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_2_2(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i)**n for i in str(n)])\ndef max_digits_2_2(n):\n    '''\n    Write a function that returns the maximum digits of a non-negative integer.\n    '''\n    return max([int(i)**n for i in str(n)])\ndef sum_digits_and_pow_2_2_2(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_and_pow_2(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_and_pow(n):\n    '''\n    Write a function that returns the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n,int):\n        raise TypeError(\"please enter an integer\")\n    if n<0:\n        raise ValueError(\"please enter a positive integer\")\n    return sum([int(i)**n for i in str(n)])\ndef sum_digits_2(n):\n    '''\n    Write a function that returns the sum of the digits of a no"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if(n <= 0): return 0\n    return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    sum = 0\n    while n!= 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    \n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_digits = 0\n    while n:\n        dig = n % 10\n        sum_digits += dig\n        n = n // 10\n    return sum_digits\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #create a new empty list\n    newList = []\n    #create a loop and add elements to the newList\n    for i in list1:\n        newList.append(i)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #declare empty list\n    sortlist = []\n    #loop through list\n    for i in list1:\n        #append to sortlist\n        sortlist.append(i)\n    #sort\n    for i in range(len(sortlist)):\n        #check if the i element is greater than the last element\n        if sortlist[i] > sortlist[i-1]:\n            #swap\n            sortlist[i], sortlist[i-1] = sortlist[i-1], sortlist[i]\n    #return sorted list\n    return sortlist\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    check_list = sorted(list1)\n    return check_list\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return False\n    else:\n        if len(list1) == 1:\n            return list1[0] == list1[0]\n        else:\n            return list1[0] >= list1[1]"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Your code here\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] < list1[j]:\n                return False\n    return True\n    \ndef sort_list(list1, reverse=False):\n    '''\n    Write a function to merge two sorted lists into a single list\n    (lists are assumed to be in the same order).\n    '''\n    if not list1:\n        return []\n    if not list1[0]:\n        list1.pop(0)\n    if not list1[len(list1)-1]:\n        list1.pop()\n    if len(list1) > 1:\n        if list1[0] > list1[1]:\n            list1[0], list1[len(list1)-1] = list1[len(list1)-1], list1[0]\n        if not reverse:\n            return list1\n        else:\n            return list1[::-1]\n    return [list1[0]]\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    return list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [dict() for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    print(length)\n    list_dict = []\n    return list_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    return [{} for i in range(0, length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for _ in range(length):\n        empty_list.append(dict())\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict = {}\n    for i in range(length):\n        empty_dict[i] = {}\n    return empty_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length<0 or length>20:\n        print(\"Invalid number of items in the list.\")\n        return\n    if not length<20:\n        print(\"Invalid length of the list.\")\n        return\n    for i in range(0,length):\n        empty_list_dict = dict()\n        for j in range(0,20):\n            empty_list_dict[j] = \"*\"\n        my_list.append(empty_list_dict)\n    return my_list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # copy the list into a new variable\n    new_list = list1\n    # create a copy of the first list\n    second_list = new_list[:]\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Start from the first element.\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j]!='':\n                list1[i][j] =''\n    # Re-sort each element.\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j]!='':\n                list1[i][j] = list1[i][j].rstrip()\n                list1[i][j] = list1[i][j].lstrip()\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    list2 = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            list2.append(list1[i][j])\n    list2.sort()\n    return list2\n    \ndef sublist_sort(list):\n    '''\n    Write a function to sort a list of sublists using the sort() function.\n    '''\n    \n    list2 = []\n    for i in range(0,len(list)):\n        for j in range(0,len(list[i])):\n            list2.append(list[i][j])\n    list2.sort()\n    return list2\n    \ndef sublist_sort_in_place(list):\n    '''\n    Write a function to sort a list of sublists using the sort() function.\n    '''\n    \n    for i in range(0,len(list)):\n        for j in range(0,len(list[i])):\n            list[i][j] = sort(list[i][j])\n    return list\n    \ndef sublist_sort_recursive(list):\n    '''\n    Write a function to sort a list of sublists using the sort() function.\n    '''\n    \n    if len(list) == 1:\n        return list\n    else:\n        list2 = []\n        if len(list) % 2 == 0:\n            for i in range(0,len(list),2):\n                list2.append(list[i])\n            list2.sort()\n            list2.append(list[len(list)-1])\n            return sublist_sort_recursive(list2)\n        else:\n            for i in range(0,len(list),2):\n                list2.append(list[i])\n            list2.sort()\n            list2.append(list[len(list)-1])\n            return sublist_sort_recursive(list2)\n            \ndef sublist_sort_recursive_2(list):\n    '''\n    Write a function to sort a list of sublists using the sort() function.\n    '''\n    \n    if len(list) == 1:\n        return list\n    else:\n        list2 = []\n        if len(list) % 2 == 0:\n            for i in range(0,len(list),2):\n                list2.append(list[i])\n            list2.sort()\n            list2.append(list[len(list)-1])\n            return sublist_sort_recursive_2(list2)\n        else:\n            for i in range(0,len(list),2):\n                list2.append(list[i])\n            list2.sort()\n            list2.append(list[len(list)-1])\n            return sublist_sort_recursive_2(list2)\n            \ndef swap(list1,i,j):\n    '''\n    Write a function to swap the elements at index i and index j in a given list.\n    '''\n    list2 = list1[:]\n    list2[i],list2[j] = list2[j],list2[i]\n    return list2\n    \ndef list_swap(list1,i,j):\n    '''\n    Write a function to swap the elements at index i and index j in a given list.\n    '''\n    list2 = list1[:]\n    list2[i],list2[j] = list2[j],list2[i]\n    return list2\n    \ndef list_index(list1,i):\n    '''\n    Write a function to find the index of an element in a given list.\n    '''\n    for j in range(0,len(list1)):\n        if list1[j] == i:\n            return j\n    return -1\n        \ndef list_index_recursive(list1,i):\n    '''\n    Write a function to find the index of an element in a given list.\n    '''\n    if len(list1) == 1:\n        return 0\n    if list1[len(list1)-1] == i:\n        return len(list1)-1\n    return list_index_recursive(list1[0:len(list1)-1],i)\n    \ndef list_index_recursive_2(list1,i):\n    '''\n    Write a function to find the index of an element in a given list.\n    '''\n    if len(list1) == 1:\n        return 0\n    if list1[len(list1)-1] == i:\n        return len(list1)-1\n    return list_index_recursive_2(list1[0:len(list1)-1],i)\n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list of lists using the reverse() function.\n    '''\n    \n    for i in range(0,len(list1)):\n        for j in range(len(list1)-1,i,-1):\n            list1[j],list1[j-1] = list1[j-1],list1[j]\n    return list1\n    \ndef list_reverse(list1):\n    '''\n    Write a function to reverse a list of lists using the reverse() function.\n    '''\n    \n    for i in range(0,len(list1)):\n        for j in range(len(list1)-1,i,-1):\n            list1[j],list1[j-1] = list1[j-1],list1[j]\n    return list1\n    \ndef list_check_list(list1):\n    '''\n    Write a function to check if a list is a valid list of lists.\n    '''\n    \n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if list1[i][j] not in list1:\n                return False\n    return True\n    \ndef list_check_list_recursive(list1):\n    '''\n    Write a function to check if a list is a valid list of lists.\n    '''\n    \n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if list1[i][j] not in list1:\n                return False\n    return True\n    \ndef list_check_list_recursive_2(list1):\n    '''\n    Write a function to check if a list is a valid list of lists.\n    '''\n    \n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if list1[i][j] not in list1:\n                return False\n    return True\n    \ndef list_check_list_2(list1):\n    '''\n    Write a function to check if a list is a valid list of lists.\n    '''\n    \n    for i in range(0,len(list1)):\n        if list1[i] not in list1:\n            return False\n    return True\n    \ndef list_check_list_2_recursive(list1):\n    '''\n    Write a function to check if a list is a valid list of lists.\n    '''\n    \n    if len(list1) == 1:\n        return True\n    if len(list1) % 2 == 0:\n        for i in range(0,len(list1),2):\n            if list1[i] not in list1:\n                return False\n        return True\n    else:\n        for i in range(0,len(list1),2):\n            if list1[i] not in list1:\n                return False\n        return True\n    \ndef list_check_list_2_recursive_2(list1):\n    '''\n    Write a function to check if a list is a valid list of lists.\n    '''\n    \n    if len(list1) == 1:\n        return True\n    if len(list1) % 2 == 0:\n        for i in range(0,len(list1),2):\n            if list1[i] not in list1:\n                return False\n        return True\n    else:\n        for i in range(0,len(list1),2):\n            if list1[i] not in list1:\n                return False\n        return True\n        \ndef list_chec"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = len(list1[0])\n    for i in range(l):\n        for j in range(len(list1)):\n            if list1[j][i]!= \" \":\n                list1[j].insert(i,\" \")\n                break\n    return list1\n    \ndef create_list(string):\n    '''\n    Read a string and return a list of the string's elements.\n    '''\n    l = string.split()\n    l = [x[0] for x in l]\n    l = [x[1:] for x in l]\n    l = [int(x) for x in l]\n    return l\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    temp = []\n    for sublist in list1:\n        for i in sublist:\n            if type(i) == str:\n                temp.append(i)\n    return sorted(temp)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = lambda x: [len(x[i]) for i in range(len(x))])\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create list of lists\n    l = []\n    # loop through the array of lists\n    for x in list1:\n        # append each element to the list\n        l.append(x)\n    # sort the array\n    l.sort()\n    # return the list\n    return l\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if list1==[]:\n        return None\n    if len(list1)==1:\n        return list1\n    if len(list1)==2:\n        if list1[0]==list1[1]:\n            return [list1[0],list1[1]]\n        else:\n            return [list1[1],list1[0]]\n    if len(list1)==3:\n        if list1[0]+list1[1]==list1[2]:\n            return [list1[0],list1[1],list1[2]]\n        if list1[0]+list1[1]==list1[2]:\n            return [list1[1],list1[0],list1[2]]\n        if list1[0]+list1[1]==list1[2]:\n            return [list1[1],list1[0],list1[2]]\n    if len(list1)==4:\n        if list1[0]+list1[1]==list1[2]+list1[3]:\n            return [list1[0],list1[1],list1[2],list1[3]]\n        if list1[0]+list1[1]==list1[2]+list1[3]:\n            return [list1[1],list1[0],list1[2],list1[3]]\n        if list1[0]+list1[1]==list1[2]+list1[3]:\n            return [list1[1],list1[0],list1[2],list1[3]]\n        if list1[0]+list1[1]==list1[2]+list1[3]:\n            return [list1[2],list1[0],list1[1],list1[3]]\n        if list1[0]+list1[1]==list1[2]+list1[3]:\n            return [list1[2],list1[0],list1[1],list1[3]]\n    if len(list1)==5:\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[0],list1[1],list1[2],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[1],list1[0],list1[2],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4]]\n    if len(list1)==6:\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[0],list1[1],list1[2],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[1],list1[0],list1[2],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1[4]+list1[5]:\n            return [list1[2],list1[0],list1[1],list1[3],list1[4],list1[5]]\n        if list1[0]+list1[1]==list1[2]+list1[3]+list1"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # get the longest sublist\n    longest_sublist_len = 0\n    for sublist in list1:\n        if len(sublist) > longest_sublist_len:\n            longest_sublist_len = len(sublist)\n    # create a new list\n    sublists = []\n    for sublist in list1:\n        sublist = sublist + [\"\"] * longest_sublist_len\n        sublists.append(sublist)\n    # sort each sublist\n    for i in range(0, len(sublists)):\n        for j in range(i, len(sublists)):\n            if sublists[i][j] == \"\":\n                pass\n            else:\n                sublists[i][j] = sublists[j][i]\n    # return the sorted sublists\n    return sublists\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # define a function that will iterate through the number of lists\n    def iterate(num_list):\n        '''\n        Take a list of lists and returns the number of elements in the lists\n        '''\n        return len(list(filter(lambda ele: ele == num_list, num_list)))\n    \n    # iterate through the number of lists\n    return list(map(iterate, nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pas"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = []\n    temp_nums = []\n    for num in nums:\n        if num not in temp_nums:\n            temp_nums.append(num)\n    return temp_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return [num for num in nums if num not in nums[:num+1]]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    d = dict(zip(nums,range(len(nums))))\n    return [x for x in nums if d[x]==nums.count(x)]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # YOUR CODE HERE\n    duplicates = []\n    for num in nums:\n        if num not in duplicates:\n            duplicates.append(num)\n    return duplicates\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in range(0,len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i]==nums[j]:\n                nums.remove(nums[i])\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    print(nums)\n    nums = list(set(nums))\n    print(nums)\n    return nums\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    for value in list_data:\n        count_of_unique_num = 0\n        for index in range(1, value+1):\n            if index not in list_data:\n                count_of_unique_num += 1\n        product_of_unique_num = count_of_unique_num\n    return product_of_unique_num\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # remove duplicates\n    list_data = list(dict.fromkeys(list_data))\n    # sort the list\n    list_data = sorted(list_data)\n    # return the product\n    return list_data[0]*list_data[1]*list_data[2]\n    \n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for data in list_data:\n        product *= data\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print(list_data)\n    product_list = [x for x in list_data if x not in list_data]\n    product = 1\n    for num in product_list:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for number in list_data:\n        product *= number\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    temp_list = []\n    for num in list_data:\n        if num not in temp_list:\n            temp_list.append(num)\n    return len(temp_list)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    sum_num = 0\n    for num in list_data:\n        sum_num = sum_num + num\n    \n    return sum_num\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total = 0\n    for i in list_data:\n        total += i\n    return total\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # store the product in a variable\n    product = 1\n    # iterate over the list\n    for i in list_data:\n        # check if the element is in the list\n        if i in list_data:\n            # if it is, the product of the element is added to the total product\n            product *= i\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    pi = math.pi\n    area = (3.0 * r * math.pow(h, 2))\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #print('Surface area of cylinder is', surfacearea_cylinder(r,h))\n    return(surfacearea_cylinder(r,h))\n    \nr=int(input('Enter radius of the cylinder: '))\nh=int(input('Enter height of the cylinder: '))\nsurfacearea_cylinder(r,h"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #set variables\n    r = r\n    h = h\n    #Create a base case\n    if r == 0:\n        return 0\n    #Create a rectangle with 1st base case\n    elif r == 1:\n        return h*(1-r)\n    #Determine the area of the rectangle\n    else:\n        return h*r*(1-r)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    m = 6*h*(h-r)\n    return m\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4.0 * np.pi * r * h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (4*3.14*r*h)\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #raise NotImplementedError()\n    r2 = (r**2)\n    h2 = (h**2)\n    return h2*np.pi*r2*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # the main logic is:\n    # (r+h)2*pi\n    # the main output is a float\n    # then you need to multiply by pi\n    # then multiply by two pi to return the surface area\n    #\n    # write your code below this line\n    a = ((r+h)**2)*2*3.141592\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return h * (4/3) * math.pi * r**3\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S = 2 * (r**2 + h**2)\n    return S\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # your code goes here\n    if len(A)!= len(B):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    l = list(A)\n    s = l[0]\n    d = l[-1]\n    i = 0\n    k = 0\n    if len(l)==1:\n        return(True)\n    while(i<len(l)):\n        if s==l[i]:\n            k+=1\n            i+=1\n        else:\n            break\n        if k==d:\n            return(True)\n        i+=1\n        k+=1\n    return(False)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)!= len(B): \n        return False\n    for i in range(0,len(A)): \n        if B[i]!= A[i] and not is_Sub_Array(A[:i]+A[i+1:],B): \n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) == 0:\n        return True\n    elif len(B) == 1:\n        return A[0] == B[0]\n    else:\n        return B[0] == A[0] and is_Sub_Array(A[1:],B[1:])\n    \n    \n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        return False\n    elif len(B)<len(A):\n        return False\n    else:\n        flag=True\n        for i in range(len(A)):\n            if B[i] in A[i]:\n                flag=False\n        return flag\nA=[1,2,3,4,5,6,7,8,9]\nB=[5,6,7,8,9]\nprint(is_Sub_Array(A,B))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(a in B for a in A)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    c = 0\n    for i in range(len(A)): \n        if A[i] in B: \n            c = c + 1\n    if c == len(A): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) == len(B):\n        for i in range(len(B)):\n            if A[i] not in B:\n                return False\n        return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    is_Sub_Array=False\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i] == A[j]:\n                return is_Sub_Array\n    return is_Sub_Array\ndef main():\n    A = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]\n    B = [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]\n    print(is_Sub_Array(A,B))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return len(A)==len(B) and all([(x in A) for x in B])\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n + 1): \n        fact = fact * i \n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # write your code here\n    if n<0:\n        return 0\n    elif n<=2:\n        return 1\n    else:\n        return n%10+last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        raise ValueError('n must be >= 0')\n    if n == 0:\n        return 0\n    else:\n        factorial = 1\n        while n > 0:\n            factorial *= n\n            n -= 1\n        return factorial\n    \ndef last_Digit_Fibonacci_1(n): \n    '''\n    Write a python function to find the last digit in Fibonacci sequence.\n    '''\n    if n < 0:\n        raise ValueError('n must be >= 0')\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return last_Digit_Fibonacci_1(n-1) + last_Digit_Fibonacci_1(n-2)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print('The input number must be a positive number.')\n        return\n    elif n == 0:\n        print('The input number must be a positive number.')\n        return\n    elif n == 1:\n        print('The input number must be a positive number.')\n        return\n    else:\n        print('The last digit is: ', end='')\n        print(lastDigitFactorial(n))\n        return\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    dig = 1\n    for i in range(1, n+1):\n        dig = dig * i\n    return dig"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #Code here\n    num=str(n)\n    num=num[-1]\n    return int(num)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10\n    \n    '''\n    A python function to perform floor division and the remainder is\n    calculated using a while loop.\n    '''\ndef math_Factorial(n): \n    '''\n    Write a python function that calculates the factorial of an integer\n    and return it.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10\n    \n    '''\n    Write a python function that finds the factorial of an number.\n    '''\ndef factorial(n): \n    '''\n    A python function to find the factorial of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial(n - 10)\n    \n    '''\n    Write a python function to find the factorial of an integer.\n    '''\ndef factorial_with_recursion(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_2(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_3(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_4(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_5(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_6(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_7(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_8(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_9(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_10(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_11(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_12(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_13(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_14(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_15(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_16(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_17(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_18(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion_19(n): \n    '''\n    A recursive function that returns the factorial of an integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n * factorial_with_recursion(n - 10)\n    \n    '''\n    Write a python function that finds the factorial of an integer.\n    '''\ndef factorial_with_recursion"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # your code goes here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return n\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1.reverse()\n    list2.reverse()\n    list3.reverse()\n    return list1+list2+list3\n    \n    \n    \ndef list_concatenate(list1,list2):\n    '''\n    Write a function that concatenates 2 lists.\n    '''\n    return list1+list2\n    \n    \n    \ndef list_strip(list1):\n    '''\n    Write a function that removes all whitespace from the left and right of each element in a given list.\n    '''\n    return list1.strip()\n    \n    \n    \ndef list_convert_to_numeric(list1):\n    '''\n    Write a function that converts the string passed in to a number.\n    '''\n    return int(list1)\n    \n    \ndef list_convert_to_bool(list1):\n    '''\n    Write a function that converts the string passed in to a boolean value.\n    '''\n    return bool(list1)\n    \n    \ndef list_remove_duplicates(list1):\n    '''\n    Write a function that removes all duplicates from a given list.\n    '''\n    return list(set(list1))\n    \n    \n    \ndef list_int_to_bool(list1):\n    '''\n    Write a function that converts the list of integers to a boolean.\n    '''\n    return bool(list1)\n    \n    \ndef list_int_to_list(list1):\n    '''\n    Write a function that converts a list to a new list where the values are all integers.\n    '''\n    return [int(i) for i in list1]\n    \n    \ndef list_to_string(list1):\n    '''\n    Write a function that converts a list to a string.\n    '''\n    return str(list1)\n    \n    \ndef list_to_string_and_bool(list1):\n    '''\n    Write a function that converts a list to a string and a boolean.\n    '''\n    return str(list1), bool(list1)\n    \n    \ndef list_to_string_and_int(list1):\n    '''\n    Write a function that converts a list to a string and a number.\n    '''\n    return str(list1), int(list1)\n    \n    \ndef string_to_list(string1):\n    '''\n    Write a function that converts a string to a list.\n    '''\n    return [i for i in string1.split()]\n    \n    \ndef string_to_list_and_bool(string1):\n    '''\n    Write a function that converts a string to a list and a boolean.\n    '''\n    return [i for i in string1.split()], bool(string1)\n    \n    \ndef list_map(list1, function):\n    '''\n    Write a function that applies the function to each item in a given list.\n    '''\n    return [function(i) for i in list1]\n    \n    \ndef list_map_and_bool(list1, function):\n    '''\n    Write a function that applies the function to each item in a given list and a boolean.\n    '''\n    return [function(i) for i in list1], bool(list1)\n    \n    \ndef list_map_and_int(list1, function):\n    '''\n    Write a function that applies the function to each item in a given list and a number.\n    '''\n    return [function(i) for i in list1], int(list1)\n    \n    \ndef list_map_and_bool_and_int(list1, function):\n    '''\n    Write a function that applies the function to each item in a given list and a boolean and a number.\n    '''\n    return [function(i) for i in list1], [function(i) for i in list1], int(list1)\n    \n    \ndef string_to_map(string1):\n    '''\n    Write a function that converts a string to a list.\n    '''\n    return [i for i in string1.split()]\n    \n    \ndef string_to_map_and_bool(string1):\n    '''\n    Write a function that converts a string to a list and a boolean.\n    '''\n    return [i for i in string1.split()], bool(string1)\n    \n    \ndef string_to_map_and_int(string1):\n    '''\n    Write a function that converts a string to a list and a number.\n    '''\n    return [i for i in string1.split()], int(string1)\n    \n    \ndef string_to_bool_and_int(string1):\n    '''\n    Write a function that converts a string to a list and a boolean and a number.\n    '''\n    return [i for i in string1.split()], bool(string1), int(string1)\n    \n    \ndef string_to_bool_and_int(string1):\n    '''\n    Write a function that converts a string to a list and a boolean and a number.\n    '''\n    return [i for i in string1.split()], bool(string1), int(string1)\n    \n    \ndef string_to_bool(string1):\n    '''\n    Write a function that converts a string to a list and a boolean.\n    '''\n    return [i for i in string1.split()]\n    \n    \ndef string_to_list_and_bool(string1):\n    '''\n    Write a function that converts a string to a list and a boolean.\n    '''\n    return [i for i in string1.split()], bool(string1)\n    \n    \ndef string_to_list_and_int(string1):\n    '''\n    Write a function that converts a string to a list and a number.\n    '''\n    return [i for i in string1.split()], int(string1)\n    \n    \ndef string_to_list_and_bool_and_int(string1):\n    '''\n    Write a function that converts a string to a list and a boolean and a number.\n    '''\n    return [i for i in string1.split()], [i for i in string1.split()], int(string1)\n    \n    \ndef string_to_list_and_bool_and_int(string1):\n    '''\n    Write a function that converts a string to a list and a boolean and a number.\n    '''\n    return [i for i in string1.split()], [i for i in string1.split()], int(string1)\n    \n    \ndef string_to_bool_and_int(string1):\n    '''\n    Write a function that converts a string to a list and a boolean and a number.\n    '''\n    return [i for i in string1.split()], bool(string1), int(string1)\n    \n    \ndef string_to_bool(string1):\n    '''\n    Write a function that converts a string to a list and a boolean.\n    '''\n    return [i for i in string1.split()]\n    \n    \ndef string_to_list_and_bool(string1):\n    '''\n    Write a function that converts a string to a list and a boolean.\n    '''\n    return [i for i in string1.split()], bool(string1)\n    \n    \ndef string_to_list_and_int(string1):\n    '''\n    Write a function that converts a string to a list and a number.\n    '''\n    return [i for i in string1.split()], int(string1)\n    \n    \ndef string_to_list_and_bool_and_int(string1):\n    '''\n    Write a function that converts a string to a list and a boolean and a number.\n    '''\n    return [i for i in string1.split()], [i for i in string1.split()], int(string1)\n    \n    \ndef string_to_bool_and_int(string1):\n    '''\n    Write a function that converts a string to a list and a boolean and a number.\n    '''\n    return [i for i in string1.split()], bool(string1), int(string1)\n    \n    \ndef string_to_list_and_bool_and_int(string1)"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == 0:\n        return list3\n    if len(list2) == 0:\n        return list3\n    if len(list3) == 0:\n        return list1\n    temp_list3 = []\n    i = 0\n    j = 0\n    k = 0\n    for x in range(len(list2)):\n        temp_list3.append(list3[i])\n        temp_list3.append(list2[j])\n        temp_list3.append(list1[k])\n        i = i + 1\n        j = j + 1\n        k = k + 1\n    return temp_list3\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(zip(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in list1:\n        for j in list2:\n            result.append(i + j)\n    for i in list3:\n        result.append(i)\n    return result\n    \n    \n    \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(itertools.chain.from_iterable(zip(list1,list2,list3))"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result_list = []\n    for i in range(len(list1)):\n        for j in range(len(list2[i])):\n            for k in range(len(list3[i])):\n                result_list.append(list1[i][j] + list2[i][k] + list3[i][k])\n    return result_list\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    len1,len2,len3 = len(list1),len(list2),len(list3)\n    if len1==len2 and len1==len3:\n        for x in range(len1):\n            result.append(list1[x])\n    elif len2==len3:\n        for x in range(len2):\n            result.append(list2[x])\n    elif len3==len2:\n        for x in range(len3):\n            result.append(list3[x])\n    return result\n    # pass\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)<len(list2):\n        list1=list2[:len(list1)]\n    elif len(list1)>len(list2):\n        list2=list1[:len(list2)]\n    #print(list1,list2,list3)\n    \n    return list1+list2+list3\n    \n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            result.append(list1[i] + list2[j] + list3[i+j])\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    hash_dict1 = dict()\n    hash_dict2 = dict()\n    for i in test_tup1:\n        for j in test_tup2:\n            if i == j:\n                if i not in hash_dict1:\n                    hash_dict1[i] = 0\n                else:\n                    hash_dict1[i] += 1\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    i = 0\n    j = 0\n    while (i < len(test_tup1)):\n        if (test_tup1[i]!= test_tup2[i]):\n            dissimilar.append(test_tup1[i])\n            i += 1\n        else:\n            i += 1\n    \n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    s=set()\n    for i in test_tup1:\n        if i not in test_tup2:\n            s.add(i)\n    return s\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    a = tuple(test_tup1)\n    b = tuple(test_tup2)\n    if len(a) == 0 or len(b) == 0:\n        return None\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return test_tup1[0] - test_tup2[0]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #make a list to store the dissimilar elements\n    dissimilar_elements = []\n    \n    #iterate through all the elements of tuples to find the dissimilar elements\n    for elem in test_tup1:\n        if elem in test_tup2:\n            dissimilar_elements.append(elem)\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diss_lst = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            diss_lst.append(test_tup1[i])\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    try:\n        res = {}\n        for item in test_tup1:\n            if item not in res:\n                res[item] = test_tup1.count(item)\n        for item in test_tup2:\n            if item not in res:\n                res[item] = test_tup2.count(item)\n        return res.values()\n    except:\n        return 0\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    num_elements = len(test_tup1)\n    #write your code here\n    for i in range(num_elements):\n        if test_tup1[i] < test_tup2[i]:\n            return test_tup1[i]\n    return test_tup2[i]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_set1 = set()\n    test_set2 = set()\n    for tup in test_tup1:\n        test_set1.add(tup[0])\n        test_set2.add(tup[1])\n    for tup in test_tup2:\n        if tup[0] not in test_set1 or tup[1] not in test_set2:\n            return tup\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    odd_tuple = test_tuple[1]\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[0]\n    for ele in test_tuple[1:]:\n        if ele % 2 == 0:\n            even_tuple = even_tuple + ele\n        else:\n            even_tuple = even_fnc(even_tuple, ele)\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_arr = []\n    for x in test_tuple:\n        if x % 2 == 0:\n            even_arr.append(x)\n    \n    even_fnc(test_tuple, even_arr)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_val = test_tuple[0]\n    if even_fnc(even_val, test_tuple[1]):\n        test_tuple = test_tuple[1:]\n    else:\n        return tuple(even_val)\n    return even_fnc(even_val, test_tuple[0])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc = list(even_fnc)\n    even_fnc = list(map(lambda x: list(x), even_fnc))\n    odd_ele = []\n    for i in range(len(test_tuple)):\n        if test_tuple[i][1] % 2 == 0:\n            odd_ele.append(test_tuple[i])\n        else:\n            even_fnc.append(test_tuple[i])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(test_tuple)):\n        if test_tuple[i]%2 == 0:\n            even_list.append(test_tuple[i])\n        else:\n            odd_list.append(test_tuple[i])\n    odd_ele = even_fnc(odd_list)\n    even_ele = even_fnc(even_list)\n    new_tuple = (even_ele, odd_ele)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    tuple = test_tuple\n    if len(tuple) == 1:\n        return tuple\n    even = []\n    odd = []\n    for x in range(len(tuple)):\n        if not tuple[x]%2:\n            even.append(tuple[x])\n        else:\n            odd.append(tuple[x])\n    new_tuple = tuple[:len(tuple)-len(even)] + odd + tuple[len(tuple)-len(even):]\n    return even + odd + new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = test_tuple[:]\n    even_tuple.remove(even_fnc)\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    even_list2 = []\n    i = 0\n    for i in test_tuple:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            even_list2.append(i)\n    if even_fnc(even_list2):\n        even_tuple = (even_list2,even_list)\n    else:\n        even_tuple = (even_list,even_list2)\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple, lambda x,y: x[1] % y[1] == 0)\n    return test_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b * (b+1)/2\n    a = a + s\n    a = a + (a-b) * (a-b)/2\n    return a \n    \ndef surface_Area_2(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = ((b*b+s*s-b*s)/2) * (b*b+s*s-b*s)/2\n    return a\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # base edge\n    a = s[0]\n    for e in s[1:]:\n        a += e\n    return abs(a*a - b*b)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sum = 0\n    for i in range(1,b):\n        sum += s*i\n    return sum"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s) * (s/2)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(f'Surface Area of Pyramid with base edge {b} and height {s} is : ',end='')\n    for h in range(1, s+1):\n        print(h,end=',')\n    print()\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    n = 0\n    for i in range(1,b):\n        n = n + (i/b)*s\n        area = area + n*(i/b)\n        #area = area + (i/b) * s\n        #print(\"Area of \"+str(n))\n    print(\"Area of \"+str(area))\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    area = 0\n    for i in range(1,s+1):\n        for j in range(1,s+1):\n            area += 1/math.sqrt(3) * i * j * math.pow(1-j,2)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    pass\ndef surface_Area(b,s): \n    '''\n    Write a python function to find th"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Initialize the variable that will be used to calculate the area and perimeter of the\n    #square Pyramid\n    area = 0\n    perimeter = 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return 'Empty'\n    else:\n        return dict1\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('The dictionary is empty')\n        return True\n    else:\n        print('The dictionary is not empty')\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for item in dict1:\n        if dict1[item]!= None:\n            return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for i in dict1:\n        if dict1[i] == 'empty':\n            return True\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return 'dict is empty'\n    else:\n        return dict1\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n    \n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_list = [0 for i in range(num+1)]\n    for i in range(1,num+1):\n        catalan_list[i] = catalan_list[i-1] + catalan_list[i-1]\n    return catalan_list[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n=2\n    n1=0\n    n2=1\n    for i in range(1,num):\n        n1+=1/n*n2\n        n2=n2*(n+1)\n    return n1/n2\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    cnt = 0\n    num_list = [1, 0]\n    if num == 0:\n        return num_list\n    for i in range(num):\n        cnt += num_list[i]\n        num_list.append((cnt % 10) + (num_list[i] % 10))\n    return num_list\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n    \nprint(catalan_number(6))"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # all the values are an integer between 1 and 1000\n    # the set will have 100 values\n    # the range has to be set in the form of the range of numbers\n    # it should return the catalan number as integer\n    # the return should be int\n    # the return value is the last index of the set\n    # the set will have 100 values\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    # Will return\n    # 0 if there is no catalan number\n    # 1 if there is catalan number 1\n    # 2 if there is catalan number 2\n    # 3 if there is catalan number 3\n    # 4 if there is catalan number 4\n    \n    # Easy\n    return 1\n    \n    # Very easy\n    return num * catalan_number(num-1)\n    \n    # Very difficult\n    # if num > 0:\n    #     return (catalan_number(num-1) + catalan_number(num-2))\n    #     return num\n    # else:\n    #     return -1\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(1, num):\n        sum = sum + pow(i, 2)\n    return sum\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        first = 1\n        second = 1\n        n = num\n        while n > 1:\n            first *= n - 1\n            second *= n - 1\n            n = n - 1\n        return first + second + 1"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Step 1 : define the variables\n    a = 1\n    b = 0\n    c = 0\n    d = 0\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    def catalan_number(num):\n        \n        def series(n):\n            result = []\n            # Use a loop if needed\n            for i in range(1, n + 1):\n                # Get the number by multiplies and adds\n                result.append(n * i)\n            return result\n        \n        def sum(series):\n            # Sum all numbers in series\n            result = 0\n            for i in series:\n                result += i\n            return result\n        \n        # Check if series is passed as argument\n        if type(num) is not int:\n            raise TypeError(\"catalan_number() takes 1 argument, number.\")\n        \n        # Call series with passed number of times\n        return series(num)\n    \n    return sum(series(num))\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    positions = []\n    string = re.findall(r'(ly|ly|ll)', text)\n    for i in range(len(string)):\n        if 'ly' in string[i]:\n            positions.append(i)\n    \n    for i in range(len(positions)):\n        result.append(string[positions[i]-1])\n    \n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['apparition', 'pleural', 'defence', 'perception', 'explanation', 'quantity','score', 'contrast', 'quality', 'descend', 'noun', 'arabe', 'adj','verb']\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    for i in range(len(text) - 1, -1, -1):\n        if text[i] == 'ly':\n            adverb_start = i\n            break\n    for i in range(len(text), 0, -1):\n        if text[i - 1] == 'ly':\n            adverb_end = i\n            break\n    return adverb_start, adverb_end\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    for i in range(len(text)-1, -1, -1):\n        if text[i] == 'y' and text[i-1] == 'l':\n            start_index = i\n            break\n    if start_index == -1:\n        return -1\n    end_index = start_index\n    while end_index < len(text) and text[end_index] == 'e':\n        end_index += 1\n    return end_index\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define list to store the adverbs\n    adverbs = []\n    # Find all the adverb ending with ly\n    pattern = re.compile(r'ly$')\n    match = pattern.findall(text)\n    # Find the indices of all the adverb ending with ly\n    for i in range(len(match)):\n        if i > 0 and match[i][-1] == 'ly':\n            adverbs.append([i, match[i][:-1]])\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r'(ly|lyx|ly|lyx|ly|lyx|ly|ly|lyx|ly|lyx|ly|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|ly|lyx|ly|lyx|ly|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|lyx|ly|ly"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = [\"lion\", \"tiger\", \"elephant\", \"monkey\", \"horse\", \"sheep\", \"cow\", \"beaver\"]\n    final_adverbs = []\n    for adverb in adverbs:\n        found_adverb = re.search(\"[aeiouAEIOU]\", text)\n        if found_adverb!= None:\n            found_adverb_positions = found_adverb.span()\n            if (found_adverb_positions[0] > 0) and (found_adverb_positions[1] > 0):\n                final_adverbs.append(adverb)\n    return final_adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r'(.*?)(ly|l)')\n    match = regex.findall(text)\n    return match[0][1].strip('ly')\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'^ly$', text)\ndef find_adverbs_2(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'^[aeiou]ly$', text)\ndef find_verbs(text):\n    '''\n    Write a function to find the first verb ending with v in a given string.\n    '''\n    return re.findall(r'^v$', text)\ndef find_verbs_2(text):\n    '''\n    Write a function to find the first verb ending with v in a given string.\n    '''\n    return re.findall(r'^[aeiou]v$', text)\ndef find_adjectives(text):\n    '''\n    Write a function to find the first adjective ending with aa in a given string.\n    '''\n    return re.findall(r'^[a-zA-Z]+[a-zA-Z0-9]*[a-zA-Z0-9]*$', text)\ndef find_adjectives_2(text):\n    '''\n    Write a function to find the first adjective ending with aa in a given string.\n    '''\n    return re.findall(r'^[a-zA-Z]+[a-zA-Z0-9]*[a-zA-Z0-9]*[a-zA-Z0-9]*$', text)\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with n in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_nouns_2(text):\n    '''\n    Write a function to find the first noun ending with n in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_verbs_1(text):\n    '''\n    Write a function to find the first verb ending with v in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_verbs_2(text):\n    '''\n    Write a function to find the first verb ending with v in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_nouns_1(text):\n    '''\n    Write a function to find the first noun ending with n in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_nouns_2(text):\n    '''\n    Write a function to find the first noun ending with n in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_tokens(text):\n    '''\n    Write a function to find the first token ending with aa in a given string.\n    '''\n    return re.findall(r'^[a-zA-Z]+[a-zA-Z0-9]*[a-zA-Z0-9]*$', text)\ndef find_tokens_2(text):\n    '''\n    Write a function to find the first token ending with aa in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_cues(text):\n    '''\n    Write a function to find the first cue ending with c in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_cues_2(text):\n    '''\n    Write a function to find the first cue ending with c in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_verbs_1_2(text):\n    '''\n    Write a function to find the first verb ending with v in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_verbs_1_2_2(text):\n    '''\n    Write a function to find the first verb ending with v in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_nouns_1_2(text):\n    '''\n    Write a function to find the first noun ending with n in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_nouns_1_2_2(text):\n    '''\n    Write a function to find the first noun ending with n in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_cues_1_2(text):\n    '''\n    Write a function to find the first cue ending with c in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_cues_1_2_2(text):\n    '''\n    Write a function to find the first cue ending with c in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_verbs_1_2_2(text):\n    '''\n    Write a function to find the first verb ending with v in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_verbs_1_2_3(text):\n    '''\n    Write a function to find the first verb ending with v in a given string.\n    '''\n    return re.findall(r'^[^a-zA-Z]+[^a-zA-Z0-9]*[^a-zA-Z0-9]*$', text)\ndef find_nouns_1_2_3"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # regex for the re.findall\n    pattern = re.compile(r'ly$')\n    # regex for the re.finditer\n    iter = pattern.finditer(text)\n    # prints out the results from the finditer object\n    for match in iter:\n        print('the adverb ending with ly is'+ match.group())\n        print('position of the adverb ending with ly is'+ str(match.start()))\n        print('the position of the adverb ending with ly is'+ str(match.end()))\n    return None\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # TODO: Replace \"pass\" with appropriate code\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap,i[2])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #start with the first element as the minimum heap\n    heap = []\n    heapq.heapify(heap)\n    minheap = []\n    \n    #get the first element and add it to the heap\n    for i in items:\n        heapq.heappush(heap,i)\n    \n    #now take the top 10 elements of the heap\n    for i in range(len(heap)):\n        #we're going to keep checking if the element is already in the heap, \n        #if so we'll remove it from the heap.\n        while heap[0] in minheap:\n            heapq.heappop(heap)\n        #if it's not, it's a new item, so push it into the heap\n        heapq.heappush(heap,heap[0])\n        #pop the top item from the heap\n        heapq.heappop(heap)\n        #add the current item to the minheap, which is the smallest.\n        minheap.append(heapq.heappop(heap))\n    #sort the heap\n    minheap.sort()\n    #return it\n    return minheap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(n):\n        heapq.heappop(items)\n    return items\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    res = []\n    heapq.heapify(res)\n    for i in items:\n        heapq.heappush(res, -i[1])\n    \n    max_val = -1\n    max_idx = 0\n    for i in range(n):\n        if -res[0] <= max_val < -res[0]:\n            max_val = -res[0]\n            max_idx = i\n    return max_idx\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # implement your function here\n    heap = []\n    for i in range(0,n):\n        heapq.heappush(heap,items[i][1])\n    output = []\n    for i in range(0,n):\n        output.append(heapq.heappop(heap))\n    return output\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #get the heap of the dataset\n    heap = [x for x in items]\n    #first item is the first one as it will be the smallest\n    heapq.heapify(heap)\n    #next item will be the second smallest\n    while len(heap) > n:\n        #pop the smallest one\n        smallest = heapq.heappop(heap)\n        #get the second smallest\n        second = heapq.heappop(heap)\n        #append the smallest to the heap\n        heapq.heappush(heap,second+smallest)\n    #the n most expensive items are in the list\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [i for i in items if heap[0]<heap[1]]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n,items,key=lambda x: x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(n):\n        heapq.heappush(items,heapq.heappop(items) + heapq.heappop(items))\n    return items\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    c = list(l)\n    c.insert(n,c[0])\n    return c\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l_len = len(l)\n    n = n + 1\n    if l_len == n:\n        return l\n    elif l_len > n:\n        l = l[0:n]\n        l.extend(l[n:])\n        return l\n    else:\n        return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # First solution\n    # return [l[i:i+n] for i in range(0, len(l), n)]\n    # Second solution\n    return [l[i:i+n] for i in range(0, len(l), n)] + [l[i:i+n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n    \n    "
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[:n]\n    b = l[n:]\n    return a, b\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    res = []\n    for i in range(0, len(l), n):\n        res.append(l[i:i+n])\n    return res\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # your code goes here\n    return l[:n]+l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    res = []\n    for i in l:\n        res.append(i)\n        if len(res)==n:\n            res.append(res.pop(0))\n    return res\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx = list(listx)\n    tup = tuple(listx)\n    return tup\n    \ndef nth_of_index(list, index):\n    '''\n    Write a function to find the nth item of a given list.\n    '''\n    if len(list) == 1:\n        return list[0]\n    else:\n        return list[index]\n    \ndef main():\n    '''\n    Write a function that will play the game.\n    '''\n    choice = True\n    print('Welcome to the card game. Let\\'s play a game of Nim!')\n    print('You have two options: \"easy\" or \"hard\"')\n    print('The first option is easy. You have to guess the hidden card.')\n    print('The second option is hard. You have to guess your last card.')\n    print('The last option is to quit.')\n    print('Enter \"play\" to play the game or \"exit\" to quit.')\n    choice = input('Option: ').lower()\n    if choice == 'easy':\n        num_1 = 0\n        num_2 = 0\n        \n        print('In easy mode, you have to guess a card.')\n        print('You can\\'t guess a card that is already in the game.')\n        print('After 1 guess, you have to guess another card.')\n        print('After 2 guesses, you have to guess a new card.')\n        print('After 3 guesses, you have to guess the same card twice.')\n        print('You have to guess as many cards as you can.')\n        print('So, you will have to guess as many cards as you can.')\n        print('You can\\'t guess more than twice.')\n        print('You can\\'t guess a card that is already in the game.')\n        print('You can\\'t guess the hidden card.')\n        print('After 4 guesses, you have to guess a new card.')\n        print('After 5 guesses, you have to guess the same card twice.')\n        print('You can\\'t guess more than once.')\n        print('You can\\'t guess a card that is already in the game.')\n        print('You can\\'t guess the hidden card.')\n        \n        num_1 = int(input('How many card(s) do you have? '))\n        \n        for i in range(num_1):\n            print('Hint card'+ str(i + 1) + '. ')\n            print('Enter hidden card from the deck: ')\n            hidden_card = get_hidden_card()\n            print('What is your guess for card'+ str(i + 1) + '?')\n            print('Press \"e\" if you have already guessed this card.')\n            guess = input('Guess: ').lower()\n            if guess == 'e':\n                print('You guessed'+ str(hidden_card) + '.')\n            else:\n                if guess == hidden_card:\n                    print('You guessed'+ str(hidden_card) + '.')\n                else:\n                    print('Sorry. You did not guess this card.')\n            print('Do you want to play? [y/n]')\n            choice = input().lower()\n            if choice == 'y':\n                print('Your card is hidden.')\n                print('Your card is'+ str(hidden_card))\n            elif choice == 'n':\n                print('Good choice!')\n            else:\n                choice = True\n                print('Please type y or n.')\n    \n    elif choice == 'hard':\n        print('In hard mode, you have to guess a card.')\n        print('You can\\'t guess a card that is already in the game.')\n        print('After 1 guess, you have to guess another card.')\n        print('After 2 guesses, you have to guess a new card.')\n        print('After 3 guesses, you have to guess the same card twice.')\n        print('You have to guess as many cards as you can.')\n        print('So, you will have to guess as many cards as you can.')\n        print('You can\\'t guess more than twice.')\n        print('You can\\'t guess a card that is already in the game.')\n        print('You can\\'t guess the hidden card.')\n        print('After 4 guesses, you have to guess a new card.')\n        print('After 5 guesses, you have to guess the same card twice.')\n        print('You can\\'t guess more than once.')\n        print('You can\\'t guess a card that is already in the game.')\n        print('You can\\'t guess the hidden card.')\n        \n        num_1 = int(input('How many card(s) do you have? '))\n        \n        for i in range(num_1):\n            print('Hint card'+ str(i + 1) + '. ')\n            print('Enter hidden card from the deck: ')\n            hidden_card = get_hidden_card()\n            print('What is your guess for card'+ str(i + 1) + '?')\n            print('Press \"e\" if you have already guessed this card.')\n            guess = input('Guess: ').lower()\n            if guess == 'e':\n                print('You guessed'+ str(hidden_card) + '.')\n            else:\n                if guess == hidden_card:\n                    print('You guessed'+ str(hidden_card) + '.')\n                else:\n                    print('Sorry. You did not guess this card.')\n            print('Do you want to play? [y/n]')\n            choice = input().lower()\n            if choice == 'y':\n                print('Your card is hidden.')\n                print('Your card is'+ str(hidden_card))\n            elif choice == 'n':\n                print('Good choice!')\n            else:\n                choice = True\n                print('Please type y or n.')\n    \n    elif choice == 'exit':\n        print('Good choice!')\n        choice = True\n        print('Please type y or n.')\n    else:\n        print('Sorry. You did not type in \"easy\" or \"hard\".')\n        print('The game has ended.')\n    print('Would you like to play again? [y/n]')\n    choice = input().lower()\n    if choice == 'y':\n        choice = True\n        print('Please type y or n.')\n    elif choice == 'n':\n        choice = True\n        print('Good choice!')\n    else:\n        choice = True\n        print('Please type y or n.')\n    \n    "
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = ()\n    for i in listx:\n        t = t + (i,)\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #TODO: return the tuple\n    tup = ()\n    for i in listx:\n        tup += i,\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef is_prime(num):\n    '''\n    Return True if num is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n    \ndef is_palindrome(word):\n    '''\n    Return True if word is a palindrome.\n    '''\n    word = word.lower().replace(' ','')\n    palindrome = word[::-1]\n    if word==palindrome:\n        return True\n    return False\n    \ndef is_prime_number(num):\n    '''\n    Return True if num is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i==0:\n            return False\n    return True\n    \ndef to_camel_case(string):\n    '''\n    Convert first letter of a word to upper case and return it.\n    '''\n    string = string.replace(' ','')\n    return string[0].upper()+string[1:]\n    \ndef to_snake_case(string):\n    '''\n    Convert first letter of a word to upper and lower case.\n    '''\n    string = string.replace(' ','')\n    return string[0].upper()+string[1:].lower()\n    \ndef remove_extra_spaces(string):\n    '''\n    Remove extra spaces from beginning and end.\n    '''\n    if string:\n        string = string[0] + string[-1]\n    return string[1:-1]\n    \ndef common_letters(string1,string2):\n    '''\n    Return the characters that exist in string1 and string2.\n    '''\n    string1 = string1.lower().replace(' ','')\n    string2 = string2.lower().replace(' ','')\n    return list(set(string1+string2))\n    \ndef split_sentence(sentence):\n    '''\n    Return a list of words, each word should be a string.\n    '''\n    return sentence.split()\n    \ndef remove_punctuation(string):\n    '''\n    Remove punctuation from beginning and end.\n    '''\n    string = string[0] + string[-1]\n    return string[1:-1]\n    \ndef remove_digits(string):\n    '''\n    Remove numbers from beginning and end.\n    '''\n    string = string.replace(' ','')\n    return string[0:-1]\n    \ndef has_vowels(word):\n    '''\n    Return True if word contains at least one vowel.\n    '''\n    return any(char in VOWELS for char in word)\n    \ndef has_consonants(word):\n    '''\n    Return True if word contains at least one consonant.\n    '''\n    return any(char not in VOWELS for char in word)\n    \ndef is_valid_word(word):\n    '''\n    Return True if word is valid.\n    '''\n    return True if len(word) > 0 and not has_consonants(word) and not has_vowels(word) and len(word) <= 5 and not word.isdigit() and not word.isalpha() else False\n    \ndef is_valid_phrase(phrase):\n    '''\n    Return True if phrase is a valid phrase.\n    '''\n    return True if phrase.replace(' ','') in phrase_dict else False\n    \ndef count_letters(string):\n    '''\n    Return the number of unique characters in string.\n    '''\n    return len(set(string))\n    \ndef combine_str(string1,string2):\n    '''\n    Combine two strings into one.\n    '''\n    return string1 + string2\n    \ndef merge_dictionaries(dict1,dict2):\n    '''\n    Merge two dictionaries into one.\n    '''\n    for key in dict2.keys():\n        dict1[key] = dict2[key]\n    return dict1\n    \ndef reverse_dict(dict):\n    '''\n    Return a dictionary that has keys and values reversed.\n    '''\n    return dict.copy()\n    \ndef next_index(list,index):\n    '''\n    Return the index of the next value in list.\n    '''\n    return index+1\n    \ndef next_value(list,index):\n    '''\n    Return the next value in list.\n    '''\n    return list[index]\n    \ndef get_nearest_value(array,value):\n    '''\n    Return the index of the nearest value in array to the value.\n    '''\n    index = array.index(value)\n    return index\n    \ndef get_nearest_index(array,value):\n    '''\n    Return the index of the nearest value in array to the value.\n    '''\n    index = array.index(value)\n    return index\n    \ndef last_three(array):\n    '''\n    Return the value of the last three values of an array.\n    '''\n    return array[-3:]\n    \ndef set_index(array,index,value):\n    '''\n    Set the value at the index.\n    '''\n    array[index] = value\n    return array\n    \ndef last_three_index(array):\n    '''\n    Return the index of the last three values of an array.\n    '''\n    return array.index(-3)\n    \ndef set_index_value(array,index,value):\n    '''\n    Set the value at the index.\n    '''\n    array[index] = value\n    return array\n    \ndef find_index(array,value):\n    '''\n    Return the index of the value.\n    '''\n    return array.index(value)\n    \ndef remove_index(array,index):\n    '''\n    Remove the value at the index.\n    '''\n    array.pop(index)\n    return array\n    \ndef get_index(array,value):\n    '''\n    Return the index of the value.\n    '''\n    return array.index(value)\n    \ndef remove_all(array,value):\n    '''\n    Remove all values at the given index.\n    '''\n    array.pop(array.index(value))\n    return array\n    \ndef remove_all_at_index(array,index):\n    '''\n    Remove all values at the given index.\n    '''\n    array.pop(index)\n    return array\n    \ndef remove_first(array):\n    '''\n    Remove the first value in the array.\n    '''\n    return array.pop(0)\n    \ndef remove_last(array):\n    '''\n    Remove the last value in the array.\n    '''\n    return array.pop()\n    \ndef remove_by_value(array,value):\n    '''\n    Remove all values that are equal to the given value.\n    '''\n    index = array.index(value)\n    array.pop(index)\n    return array\n    \ndef remove_all_by_value(array,value):\n    '''\n    Remove all values that are equal to the given value.\n    '''\n    for i in range(array.index(value)):\n        array.pop()\n    return array\n    \ndef remove_all_at_index(array,index):\n    '''\n    Remove all values at the given index.\n    '''\n    array.pop(index)\n    return array\n    \ndef set_first(array):\n    '''\n    Set the first value in the array.\n    '''\n    array[0] = value\n    return array\n    \ndef set_last(array):\n    '''\n    Set the last value in the array.\n    '''\n    array.pop()\n    return array\n    \ndef set_index_value(array,index,value):\n    '''\n    Set the value at the index.\n    '''\n    array[index] = value\n    return array\n    \ndef set_value_at_index(array,index,value):\n    '''\n    Set the value at the index.\n    '''\n    array[index] = value\n    return array\n    \ndef find_index_value(array,value):\n    '''\n    Return the index of the value.\n    '''\n    return array.index(value)\n    \nde"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = ()\n    for x in listx:\n        t = t + (x,)\n    return t\n    \ndef copy(listx):\n    '''\n    Write a function to copy a list.\n    '''\n    copy = listx\n    return copy\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # loop through list\n    t = tuple(listx)\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max(max_val - min_val, 0)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n    return min_value - max_value\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    res = 0\n    for i in range(len(nums)):\n        res += abs(nums[i] - nums[i-1])\n    return res\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0] - nums[0]\n    diff = nums[0] - nums[-1]\n    for i in range(1, len(nums)):\n        diff = max(diff, nums[i] - nums[i-1])\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l = len(nums)\n    if l == 1:\n        return nums[0]\n    else:\n        m = nums[l//2]\n        d = 0\n        for i in range(l):\n            d += nums[i] - m\n        return m - d\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] > nums[i+1]:\n            return nums[i+1] - nums[i]\n        i += 1\n    return None\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0] - nums[0]\n    else:\n        small = min(nums[0], nums[1])\n        big = max(nums[0], nums[1])\n        for i in range(2, len(nums)):\n            big = max(big, nums[i] - small)\n            small = min(small, nums[i] - big)\n        return big\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #get list of elements\n    nums_elem=sorted(nums)\n    #check the difference between the number of elements in the list and the largest element in the list\n    return nums_elem[-1] - nums_elem[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return [min_num, max_num]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(2,b):\n        if b%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def isPerfectSquare(num):\n        return (num**0.5)*(num**0.5)\n    \n    def findPerfectSquare(num):\n        left = 0\n        right = num\n        while(left <= right):\n            mid = (left + right) // 2\n            if(isPerfectSquare(mid) == isPerfectSquare(num)):\n                return mid\n            elif(isPerfectSquare(mid) > isPerfectSquare(num)):\n                right = mid - 1\n            else:\n                left = mid + 1\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b==0:\n        return [0, 0, 0]\n    else:\n        return perfect_squares(b, b-1) + [a**2]\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def perfect_square(a, b):\n        if a * a == b * b:\n            return True\n        elif a * a + b * b == 0:\n            return False\n        else:\n            return perfect_square(a * a, b * b)\n    \n    if perfect_square(a, b):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfects = []\n    for i in range(1,b+1):\n        for j in range(1,i+1):\n            if i**2 + j**2 == a**2:\n                if (i,j) not in perfects:\n                    perfects.append((i,j))\n    return perfects\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def is_perfect_square(n):\n        return n == int(n**0.5) or n == int(n**0.5) + 1\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b < a:\n        return\n    if b == a:\n        return []\n    if b % 2 == 0:\n        return []\n    num_to_check = []\n    for i in range(b//2):\n        num_to_check.append(a + i)\n        num_to_check.append(a - i)\n        num_to_check.append(a - 2 * i)\n        num_to_check.append(a + 2 * i)\n    return num_to_check\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    \n    >>> perfect_squares(12, 2)\n    [1, 3, 5, 7]\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    '''\n    Compute perfect squares.\n    '''\n    #!/usr/bin/env python3\n    ''"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def perfect_squares(a, b):\n        '''\n        Function to check if a and b are perfect squares.\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if (b == 0):\n        return a\n    elif (b < 0):\n        return []\n    else:\n        for i in range(0, b + 1):\n            #x^3 + 2x^2 + 1x + 0\n            if (i == 0):\n                result = a ** 3 + b\n            #x^3 + 2x^2 - 1x + 0\n            elif (i == 1):\n                result = a ** 2 + b\n            else:\n                #x^3 + 2x^2 - 1x - 1\n                result = a ** 2 - b ** 2 + a ** 3 + b ** 3\n            if (result == b):\n                return a\n    return []\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = cmath.acos((-y**2-x**2)/(2*x))\n    r = cmath.sqrt(x**2-y**2)\n    phi = phi*cmath.pi/180\n    return (r*math.cos(phi), r*math.sin(phi))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    c = x/math.cos(y*math.pi/180)\n    s = y/math.sin(y*math.pi/180)\n    return (c,s)\ndef polar_rect_to_polar(c,s):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    x = (c*math.cos(s*math.pi/180)) - (math.cos(c*math.pi/180)*math.sin(s*math.pi/180))\n    y = (s*math.sin(c*math.pi/180)) + (math.sin(s*math.pi/180)*math.cos(c*math.pi/180))\n    return (x,y)\ndef polar_polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    c = y/math.sin(x*math.pi/180)\n    s = x/math.cos(y*math.pi/180)\n    return (c,s)\ndef polar_polar_to_polar(c,s):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    x = (c*math.cos(s*math.pi/180)) - (math.cos(c*math.pi/180)*math.sin(s*math.pi/180))\n    y = (s*math.sin(c*math.pi/180)) + (math.sin(c*math.pi/180)*math.cos(s*math.pi/180))\n    return (x,y)\ndef polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef rect_polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef rect_polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_rect(x,y):\n    '''\n    Write a function that converts polar coordinates to rectangular coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef polar_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_polar_to_polar(x,y)\ndef rect_to_polar(x,y):\n    '''\n    Write a function that converts polar coordinates to polar coordinates.\n    '''\n    return polar_rect_to_polar(x,y)\ndef polar_to_rect(x,"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # The polar coordinates are in radians\n    c_r = (x**2 + y**2)**0.5\n    return c_r, 2 * cmath.pi * c_r\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    polar = complex(x,y)\n    theta = polar.real**2 + polar.imag**2\n    radius = cmath.sqrt(theta)\n    return polar, radius\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x/cmath.sqrt(2)\n    theta=2*cmath.acos(y/r)\n    phi=cmath.phase(y)\n    return r,theta,phi\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar(x,y)\n    return theta\ndef polar_rect_rad(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_rads(x,y)\n    return theta\ndef polar_rect_conj(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_conj(x,y)\n    return theta\ndef polar_rect_exact(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact(x,y)\n    return theta\ndef polar_rect_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_bin(x,y)\n    return theta\ndef polar_rect_conj_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_conj_bin(x,y)\n    return theta\ndef polar_rect_bin_exact(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_bin_exact(x,y)\n    return theta\ndef polar_rect_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_exact(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact(x,y)\n    return theta\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_2(x,y)\n    return theta\ndef polar_rect_bin_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_bin_2(x,y)\n    return theta\ndef polar_rect_exact_bin_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_bin_2(x,y)\n    return theta\ndef polar_rect_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_2_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_2_bin(x,y)\n    return theta\ndef polar_rect_bin_exact_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_bin_exact_2(x,y)\n    return theta\ndef polar_rect_exact_bin_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_bin_2(x,y)\n    return theta\ndef polar_rect_exact_exact_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact_2(x,y)\n    return theta\ndef polar_rect_2_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_2_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_bin_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_bin_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_bin_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_bin_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_bin_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_bin_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_bin_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_bin_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_exact_bin_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact_bin_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact_bin_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_exact_bin_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact_bin_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_exact_bin_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact_bin_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_exact_bin_exact_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact_bin_exact_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_exact_bin_exact_exact_exact_bin(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.polar_exact_exact_bin_exact_exact_exact_exact_bin(x,y)\n    return theta\ndef polar_rect_exact_exact_exact_bin_exact_exact_exact_e"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = pow(x,2) + pow(y,2)\n    x_0 = cmath.sqrt(r)\n    y_0 = -cmath.sqrt(r)\n    r_0 = pow(x_0,2) + pow(y_0,2)\n    r_2 = x_0*x_0 + y_0*y_0\n    a = r_2 / r_0\n    delta = cmath.sqrt(r_2)\n    x = a * cmath.sin(x * cmath.pi / 180)\n    y = a * cmath.cos(x * cmath.pi / 180)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    p = cmath.rect(x,y)\n    r = p.real\n    i = p.imag\n    return r,i\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = cmath.exp(cmath.pi * x)\n    y = cmath.exp(cmath.pi * y)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # return (cmath.rect)  (x,y) in polar coordinates, and (cmath.rectangle) (x,y) in rectangular coordinates\n    return (x*cmath.pi/180), (y*cmath.pi/180)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList.pop(0)\n    last = newList.pop()\n    newList.insert(0,last)\n    newList.insert(len(newList),first)\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    tempList = []\n    for index in range(len(newList)): \n        tempList.append(newList[index]) \n        newList[index] = tempList[-1] \n        tempList.pop()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.pop(0)\n    newList.pop()\n    newList.append(0)\n    newList.append(0)\n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[1::2] + newList[::2]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your code goes here\n    # Find the index of the first element\n    index1 = list.index(newList[0])\n    # Find the index of the last element\n    index2 = list.index(newList[len(newList)-1])\n    # swap the first and last element\n    newList[0], newList[index1], newList[index2] = newList[index2], newList[0], newList[index1]\n    return newList\n    \n    # swap the index of the first and last element\n    # example:\n    #  [1,2,3,4,5] -> [1,2,4,5,3]\n    #  [4,5,1,2,3] -> [1,4,2,5,3]\n    #\n    # If the index is not the first element, return None\n    #\n    # Otherwise, return the list in the same format\n    \n    # Return the list in the same format\n    \n    # If the index is the first element, return None\n    # If the index is the last element, return the last element\n    \n    # Return None\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0: \n        return newList\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(0,len(newList)): \n        newList[i], newList[len(newList)-i-1] = newList[len(newList)-i-1], newList[i] \n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList.sort()\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    copy = []\n    for i in range(len(newList)):\n        copy.append(newList[i])\n        copy.append(newList[-i-1])\n    return copy\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)-1):\n        temp = newList[i]\n        newList[i] = newList[i+1]\n        newList[i+1] = temp\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    total_coeff = 0\n    for i in range(1,k+1):\n        total_coeff = total_coeff + (n * (n-1) * (n-2) // i)\n    return total_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 0\n    for n_i in range(1,n+1):\n        total += n_i * n_i\n        #print(total)\n    return total\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    '''\n    return int((n*(n+1))/2)\n    '''\n    def binomial_coeff(n,k):\n        return n*(n+1)**k\n    return binomial_Coeff(n,k)\ndef string_reverse(s):\n    '''\n    Given an input string s, reverse the string.\n    '''\n    return s[::-1]\ndef replace_space(s):\n    '''\n    Given a string s, replace all the spaces with underscores.\n    '''\n    return s.replace(\" \", \"_\")\ndef is_valid_key(key,d,key_list):\n    '''\n    Check whether key is a valid key.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    '''\n    if key in d.keys():\n        return False\n    else:\n        return True\ndef lookup_index(k,d,key_list):\n    '''\n    Find index in key_list for key k.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    '''\n    if key in d.keys():\n        if k==d[key]:\n            return False\n        else:\n            return True\ndef has_cycle(d,key_list):\n    '''\n    Find if the dictionary has cycle.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    '''\n    if key_list[key] in d.keys():\n        return True\n    else:\n        return False\ndef find_key_with_min(d,key_list,min_val):\n    '''\n    Find the minimum value in dictionary.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    '''\n    if key_list[key] in d.keys():\n        if d[key] < min_val:\n            return True\n        else:\n            return False\ndef find_key_with_max(d,key_list,max_val):\n    '''\n    Find the maximum value in dictionary.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    '''\n    if key_list[key] in d.keys():\n        if d[key] > max_val:\n            return True\n        else:\n            return False\ndef is_key_exists(d,key,key_list):\n    '''\n    Check whether key exists in dictionary.\n    '''\n    '''\n    if key in d.keys():\n        return True\n    else:\n        return False\ndef key_exists(d,key,key_list):\n    '''\n    Check whether the key exists in dictionary.\n    '''\n    '''\n    if key in d.keys():\n        return True\n    else:\n        return False\ndef min_max_value(d,key,key_list):\n    '''\n    Find min and max values for key.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    '''\n    if key in d.keys():\n        return (d[key],d[key])\n    else:\n        return False\ndef min_max_key(d,key,key_list):\n    '''\n    Find minimum value and maximum value for key.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    '''\n    if key in d.keys():\n        if d[key] < min_val:\n            return False\n        elif d[key] > max_val:\n            return True\n        else:\n            return False\ndef key_not_exists(d,key,key_list):\n    '''\n    Check whether key does not exist in dictionary.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return True\n    else:\n        return False\ndef min_max_key_exists(d,key,key_list):\n    '''\n    Check whether minimum and maximum values of key exists in dictionary.\n    '''\n    '''\n    if key in d.keys():\n        if key_list[key] == \"\":\n            return False\n        else:\n            return True\n    else:\n        return False\ndef is_all_keys_present(d,key,key_list):\n    '''\n    Check whether all the keys in the dictionary are present in the input.\n    '''\n    '''\n    if key in d.keys():\n        for item in d[key]:\n            if item not in key_list:\n                return False\n        return True\n    else:\n        return False\ndef is_all_keys_present_non_empty(d,key,key_list):\n    '''\n    Check whether all the keys in the dictionary are present in the input.\n    '''\n    '''\n    if key in d.keys():\n        for item in d[key]:\n            if item in key_list:\n                return True\n            else:\n                return False\n    else:\n        return False\ndef dict_lookup(d,key,key_list):\n    '''\n    Find the value for key.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    else:\n        return d[key]\n    '''\n    if key in d.keys():\n        return d[key]\n    else:\n        return False\ndef dict_lookup_index(d,key,index):\n    '''\n    Find the value for key.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    else:\n        return d[key][index]\n    '''\n    if key in d.keys():\n        return d[key][index]\n    else:\n        return False\ndef dict_lookup_value(d,key,value):\n    '''\n    Find the value for key.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    else:\n        return d[key][value]\n    '''\n    if key in d.keys():\n        return d[key][value]\n    else:\n        return False\ndef dict_lookup_all_values(d,key):\n    '''\n    Find all the values for key.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    else:\n        return d[key]\n    '''\n    if key in d.keys():\n        return d[key]\n    else:\n        return False\ndef dictionary_remove(d,key,value):\n    '''\n    Remove the value of a key.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    else:\n        d[key].remove(value)\n    '''\n    if key in d.keys():\n        d[key].remove(value)\n    else:\n        return False\ndef dictionary_append(d,key,value):\n    '''\n    Append value to the dictionary.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    else:\n        d[key].append(value)\n    '''\n    if key in d.keys():\n        d[key].append(value)\n    else:\n        return False\ndef dictionary_update(d,key,value):\n    '''\n    Update the value of a key.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    else:\n        d[key] = value\n    '''\n    if key in d.keys():\n        d[key] = value\n    else:\n        return False\ndef dictionary_is_empty(d):\n    '''\n    Check whether the dictionary is empty.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    else:\n        return True\ndef dictionary_is_full(d):\n    '''\n    Check whether the dictionary is full.\n    '''\n    '''\n    if key_list[key]==\"\":\n        return False\n    else:\n        return True\ndef dictionary_get_all_values(d):\n    ''"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 1\n    i = 1\n    while c <= k:\n        c = c + n*(i**n)\n        i = i + 1\n    return c\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += coef[i-1] * binomial_Coeff(n-i,k-1)\n    return total\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total=0\n    if k==0:\n        return 1\n    for i in range(1,k+1):\n        total+=binomial_Coeff(n-1,i)\n    return total\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)*(n-8)*(n-9)*(n-10)*(n-11)*(n-12)*(n-13)*(n-14)*(n-15)*(n-16)*(n-17)*(n-18)*(n-19)*(n-20)*(n-21)*(n-22)*(n-23)*(n-24)*(n-25)*(n-26)*(n-27)*(n-28)*(n-29)*(n-30)*(n-31)*(n-32)*(n-33)*(n-34)*(n-35)*(n-36)*(n-37)*(n-38)*(n-39)*(n-40)*(n-41)*(n-42)*(n-43)*(n-44)*(n-45)*(n-46)*(n-47)*(n-48)*(n-49)*(n-50)*(n-51)*(n-52)*(n-53)*(n-54)*(n-55)*(n-56)*(n-57)*(n-58)*(n-59)*(n-60)*(n-61)*(n-62)*(n-63)*(n-64)*(n-65)*(n-66)*(n-67)*(n-68)*(n-69)*(n-70)*(n-71)*(n-72)*(n-73)*(n-74)*(n-75)*(n-76)*(n-77)*(n-78)*(n-79)*(n-80)*(n-81)*(n-82)*(n-83)*(n-84)*(n-85)*(n-86)*(n-87)*(n-88)*(n-89)*(n-90)*(n-91)*(n-92)*(n-93)*(n-94)*(n-95)*(n-96)*(n-97)*(n-98)*(n-99)*(n-100)*(n-101)*(n-102)*(n-103)*(n-104)*(n-105)*(n-106)*(n-107)*(n-108)*(n-109)*(n-110)*(n-111)*(n-112)*(n-113)*(n-114)*(n-115)*(n-116)*(n-117)*(n-118)*(n-119)*(n-120)*(n-121)*(n-122)*(n-123)*(n-124)*(n-125)*(n-126)*(n-127)*(n-128)*(n-129)*(n-130)*(n-131)*(n-132)*(n-133)*(n-134)*(n-135)*(n-136)*(n-137)*(n-138)*(n-139)*(n-140)*(n-141)*(n-142)*(n-143)*(n-144)*(n-145)*(n-146)*(n-147)*(n-148)*(n-149)*(n-150)*(n-151)*(n-152)*(n-153)*(n-154)*(n-155)*(n-156)*(n-157)*(n-158)*(n-159)*(n-160)*(n-161)*(n-162)*(n-163)*(n-164)*(n-165)*(n-166)*(n-167)*(n-168)*(n-169)*(n-170)*(n-171)*(n-172)*(n-173)*(n-174)*(n-175)*(n-176)*(n-177)*(n-178)*(n-179)*(n-180)*(n-181)*(n-182)*(n-183)*(n-184)*(n-185)*(n-186)*(n-187)*(n-188)*(n-189)*(n-190)*(n-191)*(n-192)*(n-193)*(n-194)*(n-195)*(n-196)*(n-197)*(n-198)*(n-199)*(n-200)*(n-201)*(n-202)*(n-203)*(n-204)*(n-205)*(n-206)*(n-207)*(n-208)*(n-209)*(n-210)*(n-211)*(n-212)*(n-213)*(n-214)*(n-215)*(n-216)*(n-217)*(n-218)*(n-219)*(n-220)*(n-221)*(n-222)*(n-223)*(n-224)*(n-225)*(n-226)*(n-227)*(n-228)*(n-229)*(n-230)*(n-231)*(n-232)*(n-233)*(n-234)*(n-235)*(n-236)*(n-237)*(n-238)*(n-239)*(n-240)*(n-241)*(n-242)*(n-243)*(n-244)*(n-245)*(n-246)*(n-247)*(n-248)*(n-249)*(n-250)*(n-251)*(n-252)*(n-253)*(n-254)*(n-255)*(n-256)*(n-257)*(n-258)*(n-259)*(n-260)*(n-261)*(n-262)*(n-263)*(n-264)*(n-265)*(n-266)*(n-267)*(n-268)*(n-269)*(n-270)*(n-271)*(n-272)*(n-273)*(n-274)*(n-275)*(n-276)*(n-277)*(n-278)*(n-279)*(n-280)*(n-281)*(n-282)*(n-283)*(n-284)*(n-285)*(n-286)*(n-287)*(n-288)*(n-289)*(n-290)*(n-291)*(n-292)*(n-293)*(n-294)*(n-295)*(n-296)*(n-297)*(n-298)*(n-299)*(n-300)*(n-301)*(n-302)*(n-303)*(n-304)*(n-305)*(n-306)*(n-307)*(n-308)*(n-309)*(n-310)*(n-311)*(n-312)*(n-313)*(n-314)*(n-315)*(n-316)*(n-317)*(n-318)*(n-319)*(n-320)*(n-321)*(n-322)*(n-323)*(n-324)*(n-325)*(n-326)*(n-327)*(n-328)*(n-329)*(n-330)*(n-331)*(n-332)*(n-333)*(n-334)*(n-335)*(n-336)*(n-337)*(n-338)*(n-339)*(n-340)*(n-341)*(n-342)*(n-343)*(n-344)*(n-345)*(n-346)*(n-347)*(n-348)*(n-349)*(n-350)*(n-351)*(n-352)*(n-353)*(n-354)*(n-355)*(n-356)*(n-357)*(n-358)*(n-359)*(n-360)*(n-361)*(n-362)*(n-363)*(n-364)*(n-365)*(n-366)*(n-367)*(n-368)*(n-369)*(n-370)*(n-371)*(n-372)*(n-373)*(n-374)*(n-375)*(n-376)*(n-377)*(n-378)*(n-379)*(n-380)*(n-381)*(n-382)*(n-383)*(n-384)*(n-385)*(n-386)*(n-387)*(n-388)*(n-389)*(n-390)*(n-391)*(n-392)*(n-393)*(n-394)*(n-395)*(n-396)*(n-397)*(n-398)*(n-399)*(n-400)*"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #Find total of product\n    total=1\n    for i in range(1,k+1):\n        total=total*(n-i)\n    return total\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    ans = (1/n) * ((n*(n+1))/((n-1)*(n-k+1))) \n    return ans\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int(binomial_coeff_binary_sum(n,k))\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('(.)\\\\1', '\\\\1', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    # if the number of zeros is not zero, it is not an ip and we remove that ip\n    if ip[0]!= '0':\n        return ip\n    else:\n        newip = ''\n        # if the first char is a zeroes, it is not an ip and we remove it\n        if ip[1]!= '0':\n            newip = newip + ip[1:]\n        # if the second char is a zeroes, it is not an ip and we remove it\n        elif ip[2]!= '0':\n            newip = newip + ip[2:]\n        # if the third char is a zeroes, it is not an ip and we remove it\n        elif ip[3]!= '0':\n            newip = newip + ip[3:]\n        # if the fourth char is a zeroes, it is not an ip and we remove it\n        elif ip[4]!= '0':\n            newip = newip + ip[4:]\n        # if the fifth char is a zeroes, it is not an ip and we remove it\n        elif ip[5]!= '0':\n            newip = newip + ip[5:]\n        # if the sixth char is a zeroes, it is not an ip and we remove it\n        elif ip[6]!= '0':\n            newip = newip + ip[6:]\n        # if the seventh char is a zeroes, it is not an ip and we remove it\n        elif ip[7]!= '0':\n            newip = newip + ip[7:]\n        # if the eighth char is a zeroes, it is not an ip and we remove it\n        elif ip[8]!= '0':\n            newip = newip + ip[8:]\n        # if the ninth char is a zeroes, it is not an ip and we remove it\n        elif ip[9]!= '0':\n            newip = newip + ip[9:]\n        # if the tenth char is a zeroes, it is not an ip and we remove it\n        elif ip[10]!= '0':\n            newip = newip + ip[10:]\n        # if the eleventh char is a zeroes, it is not an ip and we remove it\n        elif ip[11]!= '0':\n            newip = newip + ip[11:]\n        # if the twelfth char is a zeroes, it is not an ip and we remove it\n        elif ip[12]!= '0':\n            newip = newip + ip[12:]\n        # if the thirteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[13]!= '0':\n            newip = newip + ip[13:]\n        # if the fourteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[14]!= '0':\n            newip = newip + ip[14:]\n        # if the fifthteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[15]!= '0':\n            newip = newip + ip[15:]\n        # if the sixteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[16]!= '0':\n            newip = newip + ip[16:]\n        # if the seventhteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[17]!= '0':\n            newip = newip + ip[17:]\n        # if the eighthteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[18]!= '0':\n            newip = newip + ip[18:]\n        # if the ninthteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[19]!= '0':\n            newip = newip + ip[19:]\n        # if the tenthteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[20]!= '0':\n            newip = newip + ip[20:]\n        # if the eleventh char is a zeroes, it is not an ip and we remove it\n        elif ip[21]!= '0':\n            newip = newip + ip[21:]\n        # if the twelfth char is a zeroes, it is not an ip and we remove it\n        elif ip[22]!= '0':\n            newip = newip + ip[22:]\n        # if the thirteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[23]!= '0':\n            newip = newip + ip[23:]\n        # if the fourteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[24]!= '0':\n            newip = newip + ip[24:]\n        # if the fifthteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[25]!= '0':\n            newip = newip + ip[25:]\n        # if the sixteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[26]!= '0':\n            newip = newip + ip[26:]\n        # if the seventhteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[27]!= '0':\n            newip = newip + ip[27:]\n        # if the eighthteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[28]!= '0':\n            newip = newip + ip[28:]\n        # if the ninethteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[29]!= '0':\n            newip = newip + ip[29:]\n        # if the thirteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[30]!= '0':\n            newip = newip + ip[30:]\n        # if the fourteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[31]!= '0':\n            newip = newip + ip[31:]\n        # if the fifthteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[32]!= '0':\n            newip = newip + ip[32:]\n        # if the sixteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[33]!= '0':\n            newip = newip + ip[33:]\n        # if the seventhteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[34]!= '0':\n            newip = newip + ip[34:]\n        # if the eightheenth char is a zeroes, it is not an ip and we remove it\n        elif ip[35]!= '0':\n            newip = newip + ip[35:]\n        # if the nineteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[36]!= '0':\n            newip = newip + ip[36:]\n        # if the tentheenth char is a zeroes, it is not an ip and we remove it\n        elif ip[37]!= '0':\n            newip = newip + ip[37:]\n        # if the eleventh char is a zeroes, it is not an ip and we remove it\n        elif ip[38]!= '0':\n            newip = newip + ip[38:]\n        # if the twelfth char is a zeroes, it is not an ip and we remove it\n        elif ip[39]!= '0':\n            newip = newip + ip[39:]\n        # if the thirteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[40]!= '0':\n            newip = newip + ip[40:]\n        # if the fourteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[41]!= '0':\n            newip = newip + ip[41:]\n        # if the fifthteenth char is a zeroes, it is not an ip and we remove it\n        elif ip[42]!= '0':\n            newip = newi"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # your code here\n    if ip == '':\n        return ''\n    else:\n        ip = str(ip)\n        count = 0\n        temp = ip[0]\n        while ip!= '':\n            if ip[0] == '0':\n                temp = temp + ip[1]\n            else:\n                break\n            ip = ip[1:]\n        return temp\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return ip[0] + '.' + '.'.join(str(x) for x in ip[1:])\ndef removeone_ip(ip):\n    '''\n    Write a function to remove one digit from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return ip[0] + '.' + '.'.join(str(x) for x in ip[1:])\ndef removetwo_ip(ip):\n    '''\n    Write a function to remove two digits from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return '.'.join(str(x) for x in ip[1:]) + '.' + '.'.join(str(x) for x in ip[2:])\ndef removethree_ip(ip):\n    '''\n    Write a function to remove three digits from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return '.'.join(str(x) for x in ip[1:]) + '.' + '.'.join(str(x) for x in ip[2:]) + '.' + '.'.join(str(x) for x in ip[3:])\ndef removefour_ip(ip):\n    '''\n    Write a function to remove four digits from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return '.'.join(str(x) for x in ip[1:]) + '.' + '.'.join(str(x) for x in ip[2:]) + '.' + '.'.join(str(x) for x in ip[3:]) + '.' + '.'.join(str(x) for x in ip[4:])\ndef removefive_ip(ip):\n    '''\n    Write a function to remove five digits from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return '.'.join(str(x) for x in ip[1:]) + '.' + '.'.join(str(x) for x in ip[2:]) + '.' + '.'.join(str(x) for x in ip[3:]) + '.' + '.'.join(str(x) for x in ip[4:])\ndef removesix_ip(ip):\n    '''\n    Write a function to remove six digits from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return '.'.join(str(x) for x in ip[1:]) + '.' + '.'.join(str(x) for x in ip[2:]) + '.' + '.'.join(str(x) for x in ip[3:]) + '.' + '.'.join(str(x) for x in ip[4:])\ndef removeseven_ip(ip):\n    '''\n    Write a function to remove seven digits from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return '.'.join(str(x) for x in ip[1:]) + '.' + '.'.join(str(x) for x in ip[2:]) + '.' + '.'.join(str(x) for x in ip[3:]) + '.' + '.'.join(str(x) for x in ip[4:])\ndef removeeight_ip(ip):\n    '''\n    Write a function to remove eight digits from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return '.'.join(str(x) for x in ip[1:]) + '.' + '.'.join(str(x) for x in ip[2:]) + '.' + '.'.join(str(x) for x in ip[3:]) + '.' + '.'.join(str(x) for x in ip[4:])\ndef removenine_ip(ip):\n    '''\n    Write a function to remove nine digits from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return '.'.join(str(x) for x in ip[1:]) + '.' + '.'.join(str(x) for x in ip[2:]) + '.' + '.'.join(str(x) for x in ip[3:]) + '.' + '.'.join(str(x) for x in ip[4:])\ndef removeeleven_ip(ip):\n    '''\n    Write a function to remove eleven digits from an ip address.\n    '''\n    if ip.startswith('0'):\n        return ip\n    else:\n        ip = ip.split('.')\n        ip = list(map(lambda x: int(x) if x.isdigit() else x, ip))\n        if ip[0] == 0:\n            return '.'.join(str(x) for x in ip[1:])\n        else:\n            return '.'.join(str(x) for x in ip[1:]) + '.' + '.'.join(str(x) for x in ip[2:]) + '."
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return (ip.lstrip(\"0\")).rstrip(\"0\")\n    \ndef is_valid_ip(ip):\n    '''\n    Write a function that validates the given ip.\n    '''\n    try:\n        ip.lstrip(\"0\")\n    except Exception:\n        return False\n    \n    return True\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    try:\n        while int(ip) == 0:\n            ip = ip[1:]\n    except:\n        pass\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'\\b((?:0?[0-9]|[1-9][0-9]|1[0-9]{2})\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2})\\b'\n    result = re.findall(ip_pattern, ip)\n    if len(result) > 0:\n        return''.join(list(result[0]))\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # if there are no leading zeros, just return the input\n    if re.search(r'^0+', ip):\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('(.*?)(0)(.*)', '\\\\1', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not re.match(r'^(?:(?:0(?:1[0-9]|[1-9]\\d)){1,2})|(?:(?:0(?:1[0-9]|[1-9]\\d)){1,2})(?:(?:0(?:1[0-9]|[1-9]\\d)){1,2}|(?:(?:0(?:1[0-9]|[1-9]\\d)){1,2}){2})|(?:(?:0(?:1[0-9]|[1-9]\\d)){1,2}){3}$',ip):\n        return ip\n    else:\n        return ''\ndef removewhitespace(s):\n    '''\n    Remove any leading whitespace from a string.\n    '''\n    return re.sub('\\s+','', s)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    lst=[]\n    for i in range(len(list1)):\n        if i%2==0:\n            lst.append(list1[i])\n        else:\n            lst.append(list1[i]+1)\n    return lst\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = list1[:]\n    list2.sort()\n    if len(list2)%2 == 0:\n        return list2[int(len(list2)/2)] - list2[int(len(list2)/2)-1]\n    else:\n        return list2[int(len(list2)/2)] - list2[int(len(list2)/2)-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            if i % 2!= 0:\n                list1[i] = list1[i] - 1\n            else:\n                list1[i] = list1[i] - 2\n        elif list1[i] % 2!= 0:\n            if i % 2 == 0:\n                list1[i] = list1[i] - 1\n            else:\n                list1[i] = list1[i] + 2\n    return list1\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if i%2==0:\n            count += list1[i]\n        else:\n            count -= list1[i]\n    return count\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    for x in list1:\n        if x % 2 == 0:\n            even_odd.append(x)\n        else:\n            continue\n    return even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for number in list1:\n        if(number%2==0):\n            even.append(number)\n        else:\n            odd.append(number)\n    return even,odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    odd_even = []\n    total = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            odd_even.append(i)\n    \n    print(even_odd)\n    print(odd_even)\n    \n    for i in even_odd:\n        total = total + i\n    \n    for i in odd_even:\n        total = total - i\n    \n    print(total)\n    \n    \n    return total\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    for i in range(len(list1) - 2):\n        if list1[i] % 2 == 0:\n            new_list.append(list1[i])\n    for i in range(len(list1) - 1):\n        if list1[i] % 2!= 0:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    new_list = []\n    odd = []\n    even = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            new_list.append(list1[i])\n        else:\n            even.append(list1[i])\n    for i in range(len(new_list)):\n        if new_list[i] % 2 == 0:\n            odd.append(new_list[i])\n        else:\n            even.append(new_list[i])\n    print(f'The first {len(new_list)} odd numbers are {odd} and the second {len(even)} even numbers are {even}')\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] % 2 == 0:\n            even_odd = even_odd + list1[i]\n        else:\n            even_odd = even_odd + list1[i]\n    return even_odd\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # starting with 2, we know that if we convert a string to a binary number, it will have 2 1s, but to convert one binary number to another, we will have 2 1s. \n    # We will keep adding 1s to the end of the string until we are in the correct state. \n    # To do that, we add 2s to the end of each string, and we will check to make sure we are not in the end.\n    count = 0\n    for i in range(1,len(str1)+1) :\n        if str1[-i] == str2[-i] :\n            count += 2\n            if str1[-i-1] == str2[-i-1] :\n                count += 2\n        else :\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    swaps = 0\n    if n!= m :\n        return -1\n    \n    for i in range(n-1) :\n        if str1[i]!= str2[i] :\n            swaps += 1\n    \n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #taking a input as string of a binary string\n    input_string=str(input(\"Enter binary string\"))\n    #setting the string to be converted to a list\n    input_list=list(input_string)\n    #setting the length of the list\n    l=len(input_list)\n    #empty list to store the operations required to convert a binary string to another string\n    swap_list=[[]for i in range(l)]\n    #loop through all the elements in the input list\n    for i in range(l):\n        #if the element in input_list is set to 0, then the element is not added to the list to keep the same position as it is in the output list\n        if input_list[i]=='0':\n            swap_list[i].append('0')\n            #set the binary string to be converted to a string\n            swap_string=input_string[:i]+'1'+input_string[i+1:]\n        #if the element is set to 1, then the element is added to the list to keep the same position as it is in the output list\n        else :\n            swap_list[i].append('1')\n            swap_string=input_string[:i]+'0'+input_string[i+1:]\n    #calculate the sum of all the binary numbers in the input string\n    sum_value=0\n    #loop through the string\n    for i in range(l) :\n        #if the element in input_list is set to 0, then the element is not added to the list to keep the same position as it is in the output list\n        if input_list[i]=='0':\n            sum_value+=int(swap_list[i][0])\n        #if the element is set to 1, then the element is added to the list to keep the same position as it is in the output list\n        else :\n            sum_value+=int(swap_list[i][1])\n    #return the sum of the binary numbers in the input string\n    return sum_value\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    \n    str1 = list(str1)\n    str2 = list(str2)\n    \n    for i in range(len(str1)) :\n        if str1[i] == str2[i] :\n            continue\n        if str1[i] > str2[i] :\n            count += 1\n            \n    return count\n    \nstr1 = \"11110000\"\nstr2 = \"110101011\"\nprint(min_Swaps(str1,str2)"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    lst = []\n    for i in range(0,len(str1)) : \n        temp = str1[i:i+2]\n        lst.append(temp)\n    a = lst[0]\n    for i in range(len(lst)) : \n        for j in range(len(lst)) : \n            if a[j]!= lst[i] : \n                break\n        else : \n            lst[i] = lst[i] + lst[i]\n            lst.pop(i)\n    return len(lst)\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    cnt = 0\n    for i in range(len(str1)-1):\n        if str1[i] == str2[i]:\n            cnt += 1\n        else:\n            break\n    return cnt\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    n1 = len(str1)\n    n2 = len(str2)\n    for i in range(n1):\n        for j in range(n2):\n            if str1[i] == str2[j] and i!=j:\n                count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    for i in range(len(str1)-1):\n        if str1[i]!= str1[i+1]:\n            swaps += 1\n            #print(str1[i],str1[i+1])\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    from collections import Counter\n    return Counter(list(str1) + list(str2))['0'] - Counter(list(str1) + list(str2))['1'] - Counter(list(str1) + list(str2))['2'] - Counter(list(str1) + list(str2))['3'] - Counter(list(str1) + list(str2))['4'] - Counter(list(str1) + list(str2))['5'] - Counter(list(str1) + list(str2))['6'] - Counter(list(str1) + list(str2))['7'] - Counter(list(str1) + list(str2))['8'] - Counter(list(str1) + list(str2))['9'] \n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_bytes = 0\n    for t in tuple_list:\n        total_bytes += len(t)\n    return total_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \ndef tuple_n_remove(tuple_list, to_remove):\n    '''\n    Write a function to remove a specific value from the given list.\n    '''\n    return tuple_list[tuple_list.index(to_remove)]\n    \ndef tuple_add(tuple_list, to_add):\n    '''\n    Write a function to add a value to the given list.\n    '''\n    return tuple_list + (to_add,)\n    \ndef tuple_concat(tuple_list, to_concat):\n    '''\n    Write a function to concatenate a tuple.\n    '''\n    return tuple_list + (to_concat,)\n    \ndef tuple_is_empty(tuple_list):\n    '''\n    Write a function to check if the given tuple is empty.\n    '''\n    return tuple_list == ()\n    \ndef tuple_contains(tuple_list, value):\n    '''\n    Write a function to check if the given value is in the given tuple.\n    '''\n    return tuple_list.count(value) > 0\n    \ndef tuple_remove(tuple_list, item):\n    '''\n    Write a function to remove a specific value from the given list.\n    '''\n    return tuple_list.remove(item)\n    \ndef tuple_remove_last(tuple_list):\n    '''\n    Write a function to remove the last element of the given list.\n    '''\n    return tuple_list.pop()\n    \ndef tuple_insert(tuple_list, item, position):\n    '''\n    Write a function to insert a new value at a specific index.\n    '''\n    return tuple_list.insert(position, item)\n    \ndef tuple_search(tuple_list, value):\n    '''\n    Write a function to search a tuple for a specific value.\n    '''\n    return tuple_list.index(value)\n    \ndef tuple_get_index(tuple_list, value):\n    '''\n    Write a function to get a specific element in a tuple.\n    '''\n    return tuple_list.index(value)\n    \ndef tuple_gets_count(tuple_list):\n    '''\n    Write a function to get the number of occurrences of a value in the tuple.\n    '''\n    return tuple_list.count(value)\n    \ndef tuple_to_n_empty(tuple_list):\n    '''\n    Write a function to convert a tuple to a new tuple with all empty elements.\n    '''\n    return tuple_list.copy()\n    \ndef tuple_to_n_concat(tuple_list):\n    '''\n    Write a function to convert a tuple to a new tuple with all concatenated elements.\n    '''\n    return tuple_list + tuple_list\n    \ndef tuple_to_n_remove(tuple_list):\n    '''\n    Write a function to remove a specific value from the tuple.\n    '''\n    return tuple_list[:-1]\n    \ndef tuple_to_n_remove_last(tuple_list):\n    '''\n    Write a function to remove the last element of the tuple.\n    '''\n    return tuple_list[:-1]\n    \ndef tuple_to_n_insert(tuple_list, position, item):\n    '''\n    Write a function to insert a new value at a specific index.\n    '''\n    tuple_list.insert(position, item)\n    \ndef tuple_to_string(tuple_list):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join(str(item) for item in tuple_list) + ')'\n    \ndef tuple_clear(tuple_list):\n    '''\n    Write a function to remove all the elements from the tuple.\n    '''\n    return tuple_list.clear()\n    \ndef tuple_get_random_index(tuple_list):\n    '''\n    Write a function to get a specific index in the tuple.\n    '''\n    return tuple_list.index(random.choice(tuple_list))\n    \ndef tuple_get_random_value(tuple_list):\n    '''\n    Write a function to get a specific value in the tuple.\n    '''\n    return random.choice(tuple_list)\n    \ndef tuple_get_random_index_or_value(tuple_list):\n    '''\n    Write a function to get a specific index or value in the tuple.\n    '''\n    return tuple_list[random.choice(range(len(tuple_list)))]\n    \ndef tuple_get_index_of_random(tuple_list):\n    '''\n    Write a function to get an index of a specific element in the tuple.\n    '''\n    return tuple_list[random.choice(range(len(tuple_list)))]\n    \ndef tuple_concat_n_list(tuple_list, values):\n    '''\n    Write a function to concatenate a list with a given list.\n    '''\n    return tuple_list + (values,)\n    \ndef tuple_remove_from_list(tuple_list, element):\n    '''\n    Write a function to remove a specific element from the tuple.\n    '''\n    return tuple_list.remove(element)\n    \ndef tuple_add_index(tuple_list, index):\n    '''\n    Write a function to add a new index in a tuple.\n    '''\n    return tuple_list + (index,)\n    \ndef tuple_add_to_list(tuple_list, index, new_value):\n    '''\n    Write a function to add a new value at a specific index.\n    '''\n    return tuple_list + (index, new_value)\n    \ndef tuple_add_index_to_list(tuple_list, index, new_value):\n    '''\n    Write a function to add a new value at a specific index.\n    '''\n    return tuple_list + (index, new_value)\n    \ndef tuple_get_value(tuple_list, index):\n    '''\n    Write a function to get a specific element from a tuple.\n    '''\n    return tuple_list[index]\n    \ndef tuple_get_index_of_value(tuple_list, value):\n    '''\n    Write a function to get a specific index of a value in the tuple.\n    '''\n    return tuple_list.index(value)\n    \ndef tuple_get_index_of_random(tuple_list):\n    '''\n    Write a function to get a specific index of a specific value in the tuple.\n    '''\n    return tuple_list[random.choice(range(len(tuple_list)))]\n    \ndef tuple_add_count(tuple_list, value):\n    '''\n    Write a function to add a value to the given count.\n    '''\n    return tuple_list + (value,)\n    \ndef tuple_concat_count_to_list(tuple_list, count):\n    '''\n    Write a function to concatenate a count to a tuple.\n    '''\n    return tuple_list + (count,)\n    \ndef tuple_remove_count(tuple_list, value):\n    '''\n    Write a function to remove a specific value from the given count.\n    '''\n    return tuple_list.remove(value)\n    \ndef tuple_remove_last(tuple_list):\n    '''\n    Write a function to remove the last element of the given tuple.\n    '''\n    return tuple_list.pop()\n    \ndef tuple_remove_index(tuple_list, index):\n    '''\n    Write a function to remove a specific index from the given tuple.\n    '''\n    return tuple_list.pop(index)\n    \ndef tuple_remove_index_to_list(tuple_list, index):\n    '''\n    Write a function to remove a specific index of a given value from the tuple.\n    '''\n    return tuple_list.pop(index)\n    \ndef tuple_remove_index_from_list(tuple_list, index):\n    '''\n    Write a function to remove a specific index of a given value from the given list.\n    '''\n    return tuple_list.pop(index)\n    \ndef tuple_add_"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    for i in tuple_list:\n        print(len(i))\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += item.size\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size = size + len(tuple_list[i])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = len(tuple_list)\n    return s * 4\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for element in tuple_list:\n        count += len(element)\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sum([len(x) for x in tuple_list])\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def compare(arr1, arr2, k):\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                return arr1[i]\n            if arr1[i] < arr2[i]:\n                return arr2[i]\n        return arr1[i]\n    \n    #Sorting the elements\n    arr1.sort()\n    arr2.sort()\n    \n    #Calculating kth element\n    i = 0\n    while i < len(arr1):\n        if i == k - 1:\n            if compare(arr2[i], arr1[i], k) < 0:\n                return arr1[i]\n            else:\n                return arr2[i]\n        elif arr1[i] < arr2[i+1]:\n            i = i + 1\n        else:\n            i = i + 1\n    \n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # code here\n    p = arr1[k-1]\n    q = arr2[k-1]\n    if q == p:\n        return p\n    if q < p:\n        return find_kth(arr1, arr2, k)\n    else:\n        return find_kth(arr1, arr2, k-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr1)-1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    while len(arr1)!= 0 and len(arr2)!= 0:\n        if arr1[0] < arr2[0]:\n            arr1.pop(0)\n        else:\n            arr2.pop(0)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    elif len(arr2) == 0:\n        return arr1[k - 1]\n    else:\n        return arr1[0]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left, right = 0, len(arr1)-1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr1)-1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left, right = 0, len(arr1) - 1\n    while left <= right:\n        middle = left + (right - left) // 2\n        if arr1[middle] <= arr2[middle]:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return arr1[left] if left < len(arr1) else arr2[left]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.sort()\n    arr2.sort()\n    l = len(arr1)\n    i = 0\n    j = 0\n    while i < l:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n            i += 1\n            j = j % l\n    return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Base case\n    if (arr1 is None and arr2 is None):\n        return None\n    # If not both arrays are none\n    if (arr1 is None or arr2 is None):\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = len(arr2)-1\n    while i <= j:\n        if arr1[i] > arr2[j]:\n            i+=1\n        elif arr1[i] < arr2[j]:\n            j-=1\n        else:\n            return arr2[j]\n    return arr1[i]\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def check(number):\n        digits = []\n        while number > 0:\n            digits.append(number % 10)\n            number //= 10\n        number = digits\n        for digit in number:\n            if digit!= 10:\n                return False\n        return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number))==len(str(number)[::-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number)) == 1:\n        return True\n    elif number % 10 == 0:\n        if str(number)[len(str(number))-1] == str(number)[len(str(number))-2]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = []\n    sum = 0\n    n = 0\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    #get current number\n    current_number = number\n    \n    #check for 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n    count = 0\n    \n    #compute the sum of digits\n    sum = 0\n    while current_number > 0:\n        digit = current_number % 10\n        sum += digit ** 3\n        current_number //= 10\n    \n    #compute the sum of non-digit digits\n    if sum == number:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_sum = 0\n    for digit in str(number):\n        digit_sum += int(digit)\n    if digit_sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    count = 0\n    for i in number:\n        count += 1\n    if len(number) == count:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # The value should be positive and should be less than 1 \n    # so that the function can be used with 2 arguments\n    if(number < 0):\n        raise ValueError('Must be positive')\n    # the binary representation of the given number is the sum of the \n    # digits in the number\n    result = 0\n    # create a list of digits\n    digits = []\n    while(number > 0):\n        # take the digit at index and add it to the list\n        digits.append(number%10)\n        # the number is divided by 10 and then added to the result\n        number = number // 10\n    # The last digit should always be the same\n    # the result is the sum of the digits \n    result = sum(digits)\n    # The result should be greater than 0\n    return result > 0\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Check if the given number is not negative\n    if number < 0:\n        return False\n    # Check if the given number is 1\n    if number == 1:\n        return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    flag = True\n    try:\n        sum_of_digits = 0\n        for i in str(number):\n            sum_of_digits += int(i)\n        if sum_of_digits == number:\n            flag = True\n        else:\n            flag = False\n    except ValueError:\n        flag = False\n    return flag\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total=0\n    count=0\n    for number in range(1,number+1):\n        total=total+number\n        count=count+1\n    average=total/count\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return sum(x for x in range(number) if x % 2 == 0), sum(x for x in range(number) if x % 2!= 0)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if len(number) == 0:\n        return None\n    elif len(number) == 1:\n        return number[0]\n    elif len(number) == 2:\n        return number[0] + number[1]\n    else:\n        sum = 0\n        for i in range(len(number) - 1):\n            sum += number[i]\n        return sum / len(number)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    first = 1\n    sum = 0\n    sum_avg = 0\n    while first <= number:\n        sum = sum + first\n        first = first + 1\n    \n    sum_avg = sum/number\n    \n    return sum_avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    for i in range(number):\n        num=int(input(\"Enter a number: \"))\n        sum=sum+num\n    return sum/number\n    \n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for n in range(1, number + 1):\n        total += n\n    average = total / number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum = sum + i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        if i % 2 == 0:\n            sum += i\n        else:\n            count += 1\n    average = sum / count\n    return average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    \n    for i in range(1, number+1):\n        sum += i\n        \n    average = sum / number\n    \n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number > 0:\n        sum = 0\n        for x in range(1,number+1):\n            sum+= x\n        average = sum/number\n        return average\n    else:\n        return \"Invalid number\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is not even\")\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    try:\n        return str1.index(str1[0])\n    except:\n        return -1\n    \n    \n    \n    "
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i-1]:\n            count = count+1\n    if count == 0:\n        return 'No Repeated character found'\n    else:\n        return str1[count-1]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1=='':\n        return str1\n    else:\n        index_1 = 0\n        index_2 = len(str1)-1\n        while index_1<=index_2:\n            if str1[index_1]==str1[index_2]:\n                index_1+=1\n                index_2-=1\n            else:\n                return str1[index_1]+str1[index_2]\n    return str1[index_1]+str1[index_2]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1.find(str1[0])\n    \nprint(first_repeated_char(\"gdfgdddg\"))"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count=0\n    for i in str1:\n        if i==str1[count]:\n            count+=1\n            continue\n        else:\n            count=0\n    return count\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1[0] in str1 and str1.count(str1[0]) == 1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code here\n    char_count = 0\n    if not str1:\n        return ''\n    if not str1.isspace():\n        for ch in str1:\n            if str1.find(ch)!= -1:\n                char_count += 1\n        return char_count\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    lst = list(str1)\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            return lst[i]\n    return''\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == '':\n        return None\n    else:\n        if len(str1) == 0:\n            return None\n        else:\n            return str1[0]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i <= 10:\n            ludic.append(i)\n        else:\n            ludic.append(i % 10)\n            i = i//10\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(range(1, n+1))\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def luc(n):\n        if n <= 2:\n            return [n]\n        if n % 3 == 0 and n % 5 == 0:\n            return luc(n // 3) + [n % 3]\n        elif n % 5 == 0:\n            return luc(n // 5) + [n % 5] + [n % 3]\n        elif n % 3 == 0:\n            return luc(n // 3) + [n % 3]\n        else:\n            return luc(n // 5) + luc(n % 5) + [n % 3]\n    luc(n)\n    return luc(n)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if i % 10 == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    while n > 0:\n        n = n // 10\n        if n % 10!= 0:\n            return 0\n    return n\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 0 or n == 1:\n        return []\n    elif n > 0:\n        return [n] + get_ludic(n-1)\n    else:\n        return [n] + get_ludic(n+1)\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,n+1):\n        if i%10==0:\n            luc_list.append(i)\n    return luc_list\ndef get_lucic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,n+1):\n        if i%100==0:\n            luc_list.append(i)\n    return luc_list\ndef get_lucs(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,n+1):\n        if i%1000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,n+1):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_c():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,1000):\n        if i%100==0:\n            luc_list.append(i)\n    return luc_list\ndef get_lucic_c():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%1000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_s():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_t():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_u():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_v():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_w():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_x():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_y():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_z():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_l():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_u_c():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_u_s():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_u_t():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_u_u():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_u_v():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_u_w():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_u_x():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_u_y():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_u_z():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append(i)\n    return luc_list\ndef get_luc_l_c():\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc_list = []\n    for i in range(1,10000):\n        if i%10000==0:\n            luc_list.append("
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic=[]\n    for i in range(1,n+1):\n        if i<=9:\n            ludic.append(i)\n        else:\n            break\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        if i % 2 == 1:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    all_lucids = []\n    for i in range(n):\n        if i % 2 == 0:\n            all_lucids.append(i)\n        else:\n            all_lucids.append(i*10)\n    return all_lucids\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(\" \")\n    for i in range(len(words)-1, -1, -1):\n        words[i] = words[i][::-1]\n    return \" \".join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    split_s = s.split()\n    \n    result = ''\n    for x in range(len(split_s) - 1, -1, -1):\n        result += split_s[x] +''\n    return result.strip()\n    \n    \nprint(reverse_words(\"The quick brown fox jumps over the lazy dog.\")"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s.split()[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_words(s):\n        return s.split()\n    s = reverse_words(s)\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if s == \"\":\n        return []\n    \n    if len(s) == 0:\n        return []\n    \n    result = []\n    \n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            result.append(s[i])\n        else:\n            if i!= 0:\n                result.append(s[i])\n                result.append(s[len(s) - 1])\n            \n    result.reverse()\n    return result\n    \n    \nprint(reverse_words(\"  Hello World  \"))\nprint(reverse_words(\"Hello World \"))\nprint(reverse_words(\"  Hello World  \"))\nprint(reverse_words(\"  Hello World   \"))\nprint(reverse_words(\"   Hello World   \"))\nprint(reverse_words(\"Hello World\"))\nprint(reverse_words(\"HeLlO WoRlDd\"))\nprint(reverse_words(\"   Hello World   \"))"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.replace(' ',' ')\n    s = s.split(' ')\n    return''.join(s[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(word.strip() for word in s.split(\" \"))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    return''.join(s[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==2 or num==3:\n        return True\n    elif num%2==0 or num%3==0:\n        return False\n    elif num==5 or num==7:\n        return True\n    else:\n        for i in range(6,num):\n            if num%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    elif num % 2 == 0:\n        return False\n    elif num % 3 == 0:\n        return False\n    else:\n        for i in range(5, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        if num == 2 or num == 3:\n            return True\n        else:\n            for i in range(2, num):\n                if num % i == 0:\n                    return False\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return 'No prime number.'\n    if num == 2:\n        return 'Prime.'\n    for i in range(2, num):\n        if num % i == 0:\n            return 'No prime number.'\n    else:\n        return 'Prime.'\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Recursive approach\n    # Base case\n    if num == 2 or num == 3:\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def check(num):\n        for i in range(2,num+1):\n            if num % i == 0:\n                return False\n        return True\n    if num > 1:\n        if not check(num+1):\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0:\n        return 0\n    return degree * (3.14159 / 180)\ndef degrees_to_radians(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree == 0:\n        return 0\n    return degree * (3.14159 / 180)\ndef cos(x):\n    '''\n    Write a function to compute the cosine of x.\n    '''\n    return math.cos(x)\ndef sin(x):\n    '''\n    Write a function to compute the sine of x.\n    '''\n    return math.sin(x)\ndef tan(x):\n    '''\n    Write a function to compute the tangent of x.\n    '''\n    return math.tan(x)\ndef arcsin(x):\n    '''\n    Write a function to compute the arc sine of x.\n    '''\n    return math.asin(x)\ndef arctan(x):\n    '''\n    Write a function to compute the arctangent of x.\n    '''\n    return math.atan(x)\ndef e(x):\n    '''\n    Write a function to compute the eccentricity of x.\n    '''\n    return math.e\ndef ln(x):\n    '''\n    Write a function to compute the logarithm of x.\n    '''\n    return math.log(x)\ndef log10(x):\n    '''\n    Write a function to compute the logarithm of x.\n    '''\n    return math.log10(x)\ndef log(x, base = 10):\n    '''\n    Write a function to compute the natural logarithm of x.\n    '''\n    return math.log(x, base)\ndef degrees(x):\n    '''\n    Write a function to compute the degrees of x.\n    '''\n    return degrees_to_radians(x)\ndef radians(x):\n    '''\n    Write a function to compute the radians of x.\n    '''\n    return radians_to_degrees(x)\ndef taylor(x):\n    '''\n    Write a function to compute the Taylor series approximation to the argument x.\n    '''\n    return math.tan(x) + 1\ndef power(x, y):\n    '''\n    Write a function to compute the power of x to y.\n    '''\n    if x == 0:\n        return 1\n    elif y == 0:\n        return 0\n    else:\n        return x * power(x, y - 1)\ndef log_2(x):\n    '''\n    Write a function to compute the log_2 of x.\n    '''\n    return math.log(x, 2)\ndef log_3(x):\n    '''\n    Write a function to compute the log_3 of x.\n    '''\n    return math.log(x, 3)\ndef square_root(x):\n    '''\n    Write a function to compute the square_root of x.\n    '''\n    return pow(x, 1 / 2)\ndef circle(x):\n    '''\n    Write a function to compute the circle of x.\n    '''\n    return 2 * math.pi * x\ndef apb(x):\n    '''\n    Write a function to compute the apb of x.\n    '''\n    return 1 + (x / 2)\ndef apb_2(x):\n    '''\n    Write a function to compute the apb of x.\n    '''\n    return 2 * math.pi * (1 + (x / 2))\ndef euler(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return math.sqrt(x)\ndef euler_2(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return math.sqrt(x) * math.sqrt(x)\ndef euler_3(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x)\ndef euler_4(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x)\ndef euler_5(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_6(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_7(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_8(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_9(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_10(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_11(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_12(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_13(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_14(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_15(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_16(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_17(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x) * math.sqrt(x)\ndef euler_18(x):\n    '''\n    Write a function to compute the euler of x.\n    '''\n    return x * math.sqrt(x) * mat"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\ndef normalize(a,b,c):\n    '''\n    Write a function that normalizes the values of all three points in the triangle.\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (180/math.pi)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # YOUR CODE HERE\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    \n    rad = degree * (math.pi / 180)\n    return rad\ndef degree_converter(degrees):\n    '''\n    Function to convert degrees to radians.\n    '''\n    \n    rad = degrees * (math.pi / 180)\n    return rad\ndef normalize(vector):\n    '''\n    Function to normalize a vector.\n    '''\n    \n    total = vector.sum()\n    if total == 0:\n        return vector\n    else:\n        return vector / total\ndef unit_vector(vector):\n    '''\n    Function to normalize a vector.\n    '''\n    \n    normalized_vector = [0] * 3\n    total = vector.length()\n    \n    # dot product\n    total = vector[0] * vector[0] + vector[1] * vector[1] + vector[2] * vector[2]\n    if total == 0:\n        normalized_vector[0] = 0\n        normalized_vector[1] = 0\n        normalized_vector[2] = 0\n    else:\n        normalized_vector[0] = vector[0] / total\n        normalized_vector[1] = vector[1] / total\n        normalized_vector[2] = vector[2] / total\n    return normalized_vector\ndef angle(vector1, vector2):\n    '''\n    Function to compute the angle.\n    '''\n    \n    vector1 = normalize(vector1)\n    vector2 = normalize(vector2)\n    \n    # dot product\n    #print(\"dot product\", vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2])\n    \n    # product\n    return vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2]\ndef magnitude(vector1, vector2):\n    '''\n    Function to compute the magnitude.\n    '''\n    \n    vector1 = normalize(vector1)\n    vector2 = normalize(vector2)\n    #print(\"magnitude\", vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2])\n    return vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2]\ndef distance(vector1, vector2):\n    '''\n    Function to compute the distance.\n    '''\n    \n    vector1 = normalize(vector1)\n    vector2 = normalize(vector2)\n    #print(\"distance\", vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2])\n    return vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2]\ndef angle_between(vector1, vector2):\n    '''\n    Function to compute the angle between two vectors.\n    '''\n    \n    vector1 = normalize(vector1)\n    vector2 = normalize(vector2)\n    #print(\"angle\", (vector2[0] * vector1[0] + vector2[1] * vector1[1] + vector2[2] * vector1[2]) / (vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2]))\n    return (vector2[0] * vector1[0] + vector2[1] * vector1[1] + vector2[2] * vector1[2]) / (vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2])\ndef vector_angle(vector1, vector2):\n    '''\n    Function to compute the angle between two vectors.\n    '''\n    \n    vector1 = normalize(vector1)\n    vector2 = normalize(vector2)\n    #print(\"angle\", vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2])\n    return (vector2[0] * vector1[0] + vector2[1] * vector1[1] + vector2[2] * vector1[2]) / (vector1[0] * vector2[0] + vector1[1] * vector2[1] + vector1[2] * vector2[2])\ndef centroid_calculation(data):\n    '''\n    Function to compute the centroid of a point.\n    '''\n    \n    # get the length of the data\n    #print(\"length\", len(data))\n    length = len(data)\n    \n    # find the mean\n    #print(\"mean\", sum(data) / length)\n    #print(\"center\", sum(data) / length)\n    return sum(data) / length\ndef centroid(data):\n    '''\n    Function to compute the centroid of a list of points.\n    '''\n    \n    # get the length of the data\n    #print(\"length\", len(data))\n    length = len(data)\n    \n    # find the mean\n    #print(\"mean\", sum(data) / length)\n    #print(\"center\", sum(data) / length)\n    return sum(data) / length\ndef connect_list_of_points(data, points):\n    '''\n    Function to connect a list of points.\n    '''\n    \n    # get the length of the data\n    #print(\"length\", len(data))\n    length = len(data)\n    \n    # create a new list\n    #print(\"new\", len(points))\n    new_data = []\n    for i in range(len(points)):\n        new_data.append(points[i])\n    #print(\"new\", new_data)\n    \n    # join the data list\n    #print(\"new\", new_data)\n    return new_data\ndef create_point_list(data, number_of_points):\n    '''\n    Function to create a list of points.\n    '''\n    \n    # get the length of the data\n    #print(\"length\", len(data))\n    length = len(data)\n    \n    # create the number of points to be created\n    #print(\"number of points\", number_of_points)\n    if length < number_of_points:\n        number_of_points = length\n    #print(\"number of points\", number_of_points)\n    \n    # create a new list\n    #print(\"new\", len(points))\n    points = []\n    for i in range(number_of_points):\n        points.append(data[i])\n    #print(\"new\", points)\n    return points\ndef create_vector_list(data, number_of_points):\n    '''\n    Function to create a list of vectors.\n    '''\n    \n    # get the length of the data\n    #print(\"length\", len(data))\n    length = len(data)\n    \n    # create the number of points to be created\n    #print(\"number of points\", number_of_points)\n    if length < number_of_points:\n        number_of_points = length\n    #print(\"number of points\", number_of_points)\n    \n    # create a new list\n    #print(\"new\", len(vectors))\n    vectors = []\n    for i in range(number_of_points):\n        vectors.append(data[i])\n    #print(\"new\", vectors)\n    return vectors\ndef create_quadratic_list(data, number_of_points):\n    '''\n    Function to create a list of quadratic functions.\n    '''\n    \n    # get the length of the data\n    #print(\"length\", len(data))\n    length = len(data)\n    \n    # create the number of points to be created\n    #print(\"number of points\", number_of_points)\n    if length < number_of_points:\n        number_of_points = length\n    #print(\"number of points\", number_of_points)\n    \n    # create a new list\n    #print(\"new\", len(quadratic_functions))\n    quadratic_functions = []\n    for i in range(number_of_points):"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(3.141592654)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(180/3.14)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #Regex syntax:\n    #\\\\w\n    #\\\\W\n    #\\\\d\n    #\\\\D\n    #\\\\d+\n    #\\\\D+\n    #\\\\D+\\d\n    #\\\\D+\\\\d+\n    #\\\\D+\\\\d+\\d\n    #\\\\D+\\\\d+\\d\\d\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    if match is None:\n        raise ValueError(\"Pattern not found.\")\n    start = match.start()\n    end = match.end()\n    return text[start:end], start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = 0\n    end_index = 0\n    sub_text = text[index:end_index]\n    if re.search(pattern, sub_text):\n        start_index = index\n        end_index = end_index + len(pattern)\n    else:\n        return None, None, None\n    return start_index, end_index, sub_text\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    index = -1\n    end_index = -1\n    start_index = -1\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m!= None:\n        return m.start(), m.end()\n    else:\n        return 0,0\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match_pattern = re.findall(pattern, text)\n    if match_pattern is None:\n        return None\n    else:\n        match_pattern = ''.join(match_pattern)\n        if len(match_pattern) < len(pattern):\n            return None, -1, -1\n        else:\n            return match_pattern[:len(pattern)], match_pattern[len(pattern):].index(pattern[len(pattern)-1])\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start_idx = -1\n    end_idx = -1\n    substr = \"\"\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Initialize variables.\n    index = 0\n    match = False\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    start = -1\n    end = -1\n    for i in range(len(text)):\n        match = re.search(pattern, text[i:])\n        if match:\n            start = i\n            end = match.end()\n    return start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n * bell_Number(n - 1)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = []\n    bell_numbers.append(1)\n    k = 0\n    while k < n:\n        bell_numbers.append(bell_numbers[k] + bell_numbers[k+1])\n        k += 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell(n):\n        # We will use a stack as a stack of distances \n        # and a predecessor table \n        # to keep track of minimum distance \n        stack = [0]\n        \n        # We will maintain a predecessor table \n        # and use it to find a minimum \n        # distance of n, hence it's time complexity is O(n) \n        pred = [0] * n \n    \n        # This section of code uses a stack to keep \n        # track of the minimum distance, so it \n        # can be updated later on as we go through \n        # the array. \n        for i in range(n): \n            # If the next node is greater than the current \n            # element, then we have not seen it before. \n            # Also, since we are storing our \n            # distance, we need to always make it the \n            # minimum distance. So, we will increase \n            # the current element with the minimum \n            # distance to the next element. \n            if i == 0 or stack[i - 1]!= i: \n                # If this is not the first element, \n                # we'll increase the minimum distance \n                # by the current element \n                pred[i] = stack[i - 1] + n \n            else: \n                # If the next element is greater, \n                # we'll update the minimum distance \n                # and decrease the next element by 1 \n                # as it will keep being the minimum \n                # distance. So, we update the next element \n                # and decrease it with the minimum distance \n                # by 1 to avoid over increasing the next element \n                # and decrease the current element by 1. \n                pred[i] = min(stack[i - 1] + n - pred[i], pred[i] + 1) \n        return pred[n] \n    return bell(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_list = [0,1,1,2,3,5,8,13,21,34,55,89,121,181,212,231,253,301,381,491,577,659,769,819,937,1071,1151,1259,1361,1471,1593,1679,1821,1937]\n    return bell_list[n % len(bell_list)]\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    for i in range(n,0,-1):\n        print(i)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + 1\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 10: \n        return n + 1\n    else: \n        return n - 1 + bell_Number(n - 1)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    b = 0\n    for i in range(1, n + 1):\n        b += i\n    return b\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    while (i*(i+1))/2 <= n: \n        i += 1\n    return i - 1\n \ndef find_Kth_smallest(a,n):\n    '''\n    Write a python function to find the Kth smallest number in an array.\n    '''\n    return sorted(a)[n-1]\n  \ndef find_Kth_greatest(a,n):\n    '''\n    Write a python function to find the Kth greatest number in an array.\n    '''\n    return sorted(a)[n-1]\n  \ndef find_Kth_largest(a,n):\n    '''\n    Write a python function to find the Kth smallest number in an array.\n    '''\n    return sorted(a)[n-1]\n  \ndef find_Kth_second_largest(a,n):\n    '''\n    Write a python function to find the Kth greatest number in an array.\n    '''\n    return sorted(a)[n-1]\n  \ndef main(): \n    '''\n    Implement the below given code \n    '''\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(find_Kth_smallest(a,n))\n  \nmain() "
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    answer = []\n    l1 = []\n    for x in list1:\n        l1.append(x)\n    index = L.index(l1[L.index(L[-1])])\n    answer.append(l1.pop(index))\n    return answer\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    assert (len(list1) > L) and (len(list1) <= L + 1), 'The input list is not valid'\n    return [list1[i] for i in range(L)]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    a = []\n    for i in range(len(list1)):\n        a.append(list1[i])\n    #print(a)\n    #print(a[i+L-1])\n    return a\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Declare a new empty list\n    new_list = []\n    # Iterate through the list and check the k'th element is in it\n    for i in range(L):\n        if list1[i]!= L:\n            new_list.append(list1[i])\n    # Return the new list\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Start writing your code here\n    pass\n    # End writing your code here\n    \n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Note: the function should be able to handle negative inputs as well as positive inputs\n    if L == 0:\n        return [list1[0]]\n    else:\n        n = len(list1)\n        return [list1[0]] + remove_kth_element(list1[1:], n - 1)\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    removed = []\n    \n    for i in range(len(list1)):\n        if i < L:\n            removed.append(list1[i])\n        else:\n            removed.append(list1[i-L])\n            \n    return removed\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # your code goes here\n    if L is None:\n        return []\n    elif len(L) <=1:\n        return L\n    elif L[-1] == L[-2]:\n        return remove_kth_element(L[1:-1], L[0])\n    else:\n        return remove_kth_element(L[1:], L[-1])\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list_new = []\n    for x in list1:\n        if x not in list_new:\n            list_new.append(x)\n    return list_new\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [list1[i] for i in range(len(list1)) if i <= L]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key=lambda row: row[N-1])\n    \ndef min_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n    '''\n    return min(test_list, key=lambda row: row[N-1])\n    \ndef square(x):\n    '''\n    Write a function which returns True if x is square else return False.\n    '''\n    return x**2\n    \ndef square_of_pascal(n):\n    '''\n    Write a function which returns True if a Pascal's triangle of n has the property\n    pascal(n) = 1. Note: 1 for the first row.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return True\n    else:\n        return square(n)\n        \ndef all_odd(test_list):\n    '''\n    Write a function which returns True if all the elements of a list are odd.\n    '''\n    return all(x%2 for x in test_list)\n    \ndef sum_of_squares(test_list):\n    '''\n    Write a function which returns the sum of all the squares of a list.\n    '''\n    return sum(square(x) for x in test_list)\n    \ndef sum_of_squares_of_pascal(n):\n    '''\n    Write a function which returns the sum of squares of a Pascal's triangle.\n    '''\n    if n<=0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        s=sum_of_squares(list(map(lambda x:square_of_pascal(x),range(1,n+1))))\n        return sum(list(map(lambda x:square_of_pascal(x),range(1,n+1))))\n    \ndef product_of_squares(test_list):\n    '''\n    Write a function which returns the product of all the squares of a list.\n    '''\n    return product(list(map(square_of_pascal,range(1,len(test_list)+1))))\n    \ndef product_of_squares_of_pascal(n):\n    '''\n    Write a function which returns the product of squares of a Pascal's triangle.\n    '''\n    if n<=0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return product_of_squares(list(map(lambda x:square_of_pascal(x),range(1,n+1))))\n    \ndef sum_of_squares_of_pascal_test(test_list):\n    '''\n    Write a function which returns the sum of squares of a Pascal's triangle, using a test list.\n    '''\n    if test_list==[1]:\n        return 1\n    elif test_list==[1,1]:\n        return 2\n    else:\n        return sum_of_squares(list(map(square_of_pascal_test,test_list)))\n    \ndef sum_of_squares_of_pascal_test_test(n):\n    '''\n    Write a function which returns the sum of squares of a Pascal's triangle, using a test list, using a test list.\n    '''\n    if test_list==[1]:\n        return 1\n    elif test_list==[1,1]:\n        return 2\n    else:\n        return sum_of_squares_of_pascal_test(list(map(square_of_pascal_test_test,test_list)))\n    \ndef sum_of_squares_of_pascal_test_test_test(n):\n    '''\n    Write a function which returns the sum of squares of a Pascal's triangle, using a test list, using a test list, using a test list.\n    '''\n    if test_list==[1]:\n        return 1\n    elif test_list==[1,1]:\n        return 2\n    else:\n        return sum_of_squares_of_pascal_test_test(list(map(square_of_pascal_test_test_test,test_list)))\n        \ndef sum_of_squares_of_pascal_test_test_test_test(n):\n    '''\n    Write a function which returns the sum of squares of a Pascal's triangle, using a test list, using a test list, using a test list.\n    '''\n    if test_list==[1]:\n        return 1\n    elif test_list==[1,1]:\n        return 2\n    else:\n        return sum_of_squares_of_pascal_test_test_test(list(map(square_of_pascal_test_test_test,test_list)))\n    \ndef sum_of_squares_of_pascal_test_test_test_test_test(n):\n    '''\n    Write a function which returns the sum of squares of a Pascal's triangle, using a test list, using a test list, using a test list.\n    '''\n    if test_list==[1]:\n        return 1\n    elif test_list==[1,1]:\n        return 2\n    else:\n        return sum_of_squares_of_pascal_test_test_test(list(map(square_of_pascal_test_test_test,test_list)))\n    \ndef sum_of_squares_of_pascal_test_test_test_test_test(n):\n    '''\n    Write a function which returns the sum of squares of a Pascal's triangle, using a test list, using a test list, using a test list.\n    '''\n    if test_list==[1]:\n        return 1\n    elif test_list==[1,1]:\n        return 2\n    else:\n        return sum_of_squares_of_pascal_test_test_test(list(map(square_of_pascal_test_test_test,test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    def get_max(matrix, n):\n        if n == 0:\n            return matrix[0][0]\n        else:\n            return max(matrix[n][0], matrix[n][1], matrix[n][2])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 0:\n        return 0\n    else:\n        return max(test_list[0][:N])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) <= 0:\n        return\n    max_val = test_list[0][N-1]\n    for i in range(N-1):\n        max_val = max(max_val, test_list[i][N-1])\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        max = test_list[i][N-1]\n        if(max > max_of_nth):\n            max_of_nth = max\n    return max_of_nth\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # your code goes here\n    n=len(test_list)\n    l=test_list\n    for i in range(N):\n        l[i].sort()\n    print l\n    return max(l[N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Note: Could have used recursion but it is too slow\n    return max([n[N-1] for n in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n = len(test_list)\n    if n <= 0:\n        raise ValueError(\"Matrix is empty\")\n    if N <= 0:\n        raise ValueError(\"N must be greater than 0\")\n    \n    max_value = test_list[0][N - 1]\n    for i in range(1, n):\n        if test_list[i][N - 1] > max_value:\n            max_value = test_list[i][N - 1]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N==1:\n        return test_list[0][0]\n    if N==2:\n        return test_list[0][0] + test_list[0][1]\n    if N%2==0:\n        return max(test_list[0][int(N/2)-1],test_list[0][int(N/2)])\n    else:\n        return max(test_list[0][int(N/2)],test_list[0][int(N/2)+1])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    # Your code here\n    return [lst[0], [lst[1][0], lst[1][1]]]\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # TODO: Complete this function\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    pass\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        first_list = lst[0]\n        second_list = lst[1]\n        return first_list + second_list\n    # pass\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_lists(a,b):\n        '''\n        Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n        '''\n        lst1=[]\n        lst2=[]\n        for i in a:\n            lst1.append(i[0])\n            lst2.append(i[1])\n        for i in b:\n            lst1.append(i[1])\n            lst2.append(i[0])\n        return lst1,lst2\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst == []:\n        return []\n    return merge_two_lists(lst[0], lst[1])\n    \ndef merge_two_lists(list1, list2):\n    '''\n    Write a python function which takes two lists, and return a new list containing the elements of the second list and the elements of the first list that are in the second list and in the first list.\n    '''\n    sorted_list = []\n    for element in list2:\n        if element not in list1:\n            sorted_list.append(element)\n    for element in list1:\n        if element not in list2:\n            sorted_list.append(element)\n    return sorted_list\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst)==0:\n        return []\n    elif len(lst)==1:\n        return [lst[0][0], lst[0][1]]\n    else:\n        first = lst[0][0]\n        second = lst[0][1]\n        for i in range(1, len(lst)):\n            if lst[i][0] > first:\n                first = lst[i][0]\n            if lst[i][1] > second:\n                second = lst[i][1]\n        return [first, second]\n        "
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge_lists(lst1, lst2):\n        output = []\n        # convert lists into tuples\n        for i in lst1:\n            output.append(tuple(i))\n        for j in lst2:\n            output.append(tuple(j))\n        # convert the output into a list\n        output = list(set(output))\n        # return output\n        return output\n    # if lst1 and lst2 are not lists, raise an error\n    if not lst1 or not lst2:\n        raise TypeError('lst1 and lst2 must be a non-empty list')\n    # if len(lst1) > len(lst2), return lst1 and lst2 as they are not lists\n    if len(lst1) < len(lst2):\n        return lst1 + lst2\n    # if len(lst2) > len(lst1), return lst2 and lst1 as they are not lists\n    if len(lst2) < len(lst1):\n        return lst2 + lst1\n    return merge_lists(lst1, lst2)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst)<=1:\n        return lst\n    else:\n        middle = len(lst)//2\n        left_list = lst[:middle]\n        right_list = lst[middle:]\n        return merge(left_list) + [right_list] + merge(right_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # List comprehension\n    new_tuple = tuple(test_list)\n    test_list_sum = []\n    for val in new_tuple:\n        test_list_sum.append(val)\n    \n    # Initialize the cumulative sum list\n    cummulative_sum = [0] * len(new_tuple)\n    \n    # For each tuple element\n    for index in range(len(new_tuple)):\n        # Check if there is a value in the tuple\n        if new_tuple[index]!= 0:\n            # Add it to the cumulative sum list\n            cummulative_sum[index] = cummulative_sum[index] + new_tuple[index]\n    \n    return cummulative_sum\n    "
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(tuple(map(sum, test_list)))\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    test_list.sort(reverse=True) # sorting in descending order\n    \n    cum_sum = 0\n    \n    for num in test_list:\n        cum_sum += num\n    \n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(map(sum,test_list))\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = []\n    for tup in test_list:\n        cummulative_sum.append(sum(tup))\n    return sum(cummulative_sum)\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    t = list(test_list)\n    s = 0\n    i = 0\n    while i < len(t):\n        s += t[i]\n        i += 1\n    return s\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_list = []\n    for i in test_list:\n        cum_list.append(sum(i))\n    return cum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = []\n    for i in range(len(nums)):\n        sum.append(sum(nums[i])/len(nums[i]))\n    return sum\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return sum(tuple(nums)) / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    def average(x):\n        return sum(x)/len(x)\n    return list(map(average,zip(*nums)))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: Write a function which takes a tuple and returns the average value for each tuple as a list\n    # (Note that the function has to return a list and not a tuple!)\n    # HINT: use the format method.\n    return [sum(n) / len(n) for n in nums]\n    "
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for num in nums:\n        total = 0\n        for item in num:\n            total += item\n        average.append(total/len(num))\n    return average\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # YOUR CODE HERE\n    return [round(sum(i)/len(i), 2) for i in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum=[]\n    for i in range(len(nums)):\n        sum.append(sum(nums[i]))\n    \n    return sum/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for i in nums:\n        total = 0\n        for item in i:\n            total += item\n        avg.append(total/len(i))\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in range(0, len(nums), 2):\n        total.append(nums[i] + nums[i+1])\n    return total/2\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    average_list = []\n    total_list = 0\n    \n    for count in range(0, len(nums)):\n        total_list = total_list + nums[count]\n    \n    return total_list / len(nums)\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #create two empty lists\n    #separate them\n    l1 = []\n    l2 = []\n    #get the first element in the tuples and append it to the empty lists\n    for element in test_tup1:\n        l1.append(element)\n    #get the second element in the tuples and append it to the empty lists\n    for element in test_tup2:\n        l2.append(element)\n    #calculate the modulo\n    res = l1[0] % l2[0]\n    #append the modulo to the output\n    l1[0] = res\n    #append the first element of the output to the output\n    l2[0] = res\n    #separate lists\n    l = l1 + l2\n    return l\n    "
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = []\n    for tup in test_tup1:\n        mod.append(tup%test_tup2)\n    return mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuple size mismatch'\n    else:\n        return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Your code here\n    # write your code here\n    if len(test_tup1)!= len(test_tup2):\n        print('The length of tup1 and tup2 must be the same.')\n        return\n    else:\n        for i in range(0, len(test_tup1)):\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n    \n    return test_tup1\n    "
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Write your code here\n    res = []\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            res.append(test_tup1[i])\n            continue\n        else:\n            res.append(test_tup2[i])\n            continue\n    return res\n    \n    \n    \ndef test_tuple_modulo():\n    print(\"Testing tuple_modulo\")\n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (7, 8, 9, 10, 11, 12)\n    print(tuple_modulo(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # Note that if you want to do the element wise modulo, you need to add parentheses around the tuples\n    # in the main function (remember we need to pass the tuples in the order they are given, NOT in the order they are used)\n    \n    # The main function returns a tuple (x_1, x_2, x_3, x_4) where x_1 is the element of x_2 and x_2 is the element of x_3 and x_3 is the element of x_4\n    # and x_4 is the element of the tuple that you're trying to multiply by 2.\n    # In the function definition, the tuples are given as (1, 2, 3, 4) and you need to return the result (3).\n    # The main function returns a tuple (x_1, x_2, x_3, x_4) where x_1 is the element of x_2 and x_2 is the element of x_3 and x_3 is the element of x_4 and x_4 is the element of the tuple that you're trying to multiply by 2.\n    # In the function definition, the tuples are given as (1, 2, 3, 4) and you need to return the result (3).\n    # The main function returns a tuple (x_1, x_2, x_3, x_4) where x_1 is the element of x_2 and x_2 is the element of x_3 and x_3 is the element of x_4 and x_4 is the element of the tuple that you're trying to multiply by 2.\n    \n    # Note that for tuples, the order of the tuples matters! In this example, order of the tuples matters as we mentioned in the function\n    # definition, so we need to add parentheses around the tuples in the main function.\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Test cases\n    if len(test_tup1) == len(test_tup2):\n        # Assert is true\n        for i in range(len(test_tup1)):\n            # Initialize the result\n            res = 0\n            # Iterate through the tuple\n            for j in range(len(test_tup2)):\n                # Find the result based on the modulo\n                if (test_tup2[j] % test_tup1[i]) == 0:\n                    # If the modulo is equal to 1 then the element is divided by the corresponding element\n                    res = res + test_tup1[i]\n            # Assert the result\n            assert res == test_tup2[i], 'The result of the modulo is not the correct'\n    else:\n        # Assert is false\n        assert False, 'The two tuples have different lengths'\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #TODO: Write your code here\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    '''\n    Given:\n        a tuple of the same length as the tests\n        b tuple of the same length as the tests\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    for i in range(len(test_tup1)):\n        test_tup1[i] = tuple(test_tup1[i])\n    for i in range(len(test_tup2)):\n        test_tup2[i] = tuple(test_tup2[i])\n    return test_tup1, test_tup2\n    \ndef convert_list_to_tuple(test_list):\n    '''\n    Write a function which takes a list of tuples and converts it to a tuple.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n    return test_list\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if d == 0 or d == steps:\n        return 0\n    \n    if d < 0:\n        d += steps\n    \n    total = d\n    jumps = 0\n    \n    for i in range(0, steps + 1):\n        total -= 1\n        if i == 0:\n            jumps += 1\n            if total == 0:\n                return jumps\n        else:\n            if d > 0:\n                total -= 1\n            if total == 0:\n                return jumps\n            \n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return False\n    \n    if d < 0: \n        return False\n    \n    if d == 0: \n        return True\n    \n    if steps == 1: \n        return True\n    \n    # A:\n    \n    # A1:\n    if d < steps: \n        if min_Jumps(steps - d, d - 1) == False: \n            return False\n    # A2:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            return False\n    # A3:\n    if d < steps: \n        if min_Jumps(steps - d, d - 1) == False: \n            if min_Jumps(steps - d, d + 1) == False: \n                return False\n    # A4:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            if min_Jumps(steps - d, d - 1) == False: \n                return False\n    # A5:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            if min_Jumps(steps - d, d - 1) == False: \n                return False\n    # A6:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            if min_Jumps(steps - d, d - 1) == False: \n                return False\n    # A7:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            if min_Jumps(steps - d, d - 1) == False: \n                return False\n    # A8:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            if min_Jumps(steps - d, d - 1) == False: \n                return False\n    \n    # B:\n    \n    # B1:\n    if d < steps: \n        if min_Jumps(steps - d, d - 1) == False: \n            return False\n    # B2:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            return False\n    # B3:\n    if d < steps: \n        if min_Jumps(steps - d, d - 1) == False: \n            if min_Jumps(steps - d, d + 1) == False: \n                return False\n    # B4:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            if min_Jumps(steps - d, d - 1) == False: \n                return False\n    # B5:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            if min_Jumps(steps - d, d - 1) == False: \n                return False\n    # B6:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            if min_Jumps(steps - d, d - 1) == False: \n                return False\n    # B7:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            if min_Jumps(steps - d, d - 1) == False: \n                return False\n    # B8:\n    if d < steps: \n        if min_Jumps(steps - d, d + 1) == False: \n            if min_Jumps(steps - d, d - 1) == False: \n                return False\n    \n    return False\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(steps):\n        if (d + i) > 0 and (d + i) < d:\n            jumps = jumps + 1\n            if i!= 0:\n                if i!= steps - 1:\n                    if (d + i) == steps - 1:\n                        return jumps\n                    elif (d + i) % 2 == 1:\n                        return jumps + 1\n                    else:\n                        return jumps\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #steps = int(input())\n    #print(steps)\n    #print(d)\n    #print(steps)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def getJumps(x, y, d): \n        '''\n        #This function finds the number of jumps that will be required based on the distance between the origin and the goal point.\n        '''\n        if x == d - 1 and y == 0:\n            return 0\n        elif d == 2:\n            if x == 0 and y == 0:\n                return 1\n            elif x == 0 and y == 1:\n                return -1\n            elif x == 1 and y == 0:\n                return -1\n            elif x == 1 and y == 1:\n                return -1\n            else:\n                return 1\n        else:\n            return getJumps(x, y, d - 1) + getJumps(x, y, d)\n    return getJumps(0, 0, d)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == d : return 1\n    elif steps == 0 : return 0\n    else : return 2\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def Jump(x,y, d):\n        '''\n        Check if the two points are actually on the same line,\n        in which case we can skip the point of form (d,0) to a line with length (d-x)/2\n        '''\n        if y == d:\n            return 0\n        return ((abs(x-y) % d)/d == 0)\n    \n    def JumpX(x, y, d):\n        '''\n        Check if the point of origin is on the same line as it is on the same line with (d-x)/2\n        '''\n        if x == y:\n            return 0\n        if (abs(x-y) % d) == d:\n            return Jump(x, y, d)\n        return JumpX(x, y, d)\n    \n    def JumpY(x, y, d):\n        '''\n        Check if the point of origin is on the same line as it is on the same line with (d-x)/2\n        '''\n        if x == y:\n            return 0\n        if (abs(y-x) % d) == d:\n            return Jump(x, y, d)\n        return JumpY(x, y, d)\n    \n    steps = steps + 1\n    \n    if d == 0:\n        return steps\n    if JumpX(d, 0, d) or JumpY(d, 0, d):\n        return steps\n    \n    for d in range(1,d):\n        if JumpX(d, d, d) or JumpY(d, d, d):\n            return steps\n    return 0\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #Write your code here.\n    #Set up some variables.\n    origin = [0,0]\n    x = 0\n    y = 0\n    jumps = 0\n    \n    #Loop through steps and find the point of origin.\n    for i in range(len(steps)):\n        if steps[i] == 'F':\n            continue\n        if steps[i] == 'J':\n            x += steps[i+2]\n            y += steps[i+3]\n            jumps += 1\n        if steps[i] == 'B':\n            x -= steps[i+2]\n            y -= steps[i+3]\n            jumps += 1\n        if steps[i] == 'L':\n            x += steps[i+2]\n            y -= steps[i+3]\n            jumps += 1\n        if steps[i] == 'R':\n            x -= steps[i+2]\n            y -= steps[i+3]\n            jumps += 1\n        #If there is a jump, that means that origin has been reached.\n        #If jump goes through origin, it means that this point has been reached.\n        #If there are two or more jumps, that means that this point has been reached.\n        if jumps == 1:\n            origin[0] = steps[i+2]\n            origin[1] = steps[i+3]\n            return jump_check(d,origin)\n        #If there are two or more jumps, that means that this point has been reached.\n        #If origin has been reached, return true.\n        #If origin has been reached, return false.\n        #If origin has been reached, return false.\n        #If origin has been reached, return false.\n    #If origin is not reachable, return false.\n    return False\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Write your code here\n    # @param steps number of steps\n    # @param d the number of grid points\n    # @return true if number of jumps is required\n    # @return false if there is no solution\n    def min_Jumps_1(steps, d):\n        # check if the jumps are too big \n        if steps > d*d: return False\n        # check if the origin is reached from (0,0)\n        if d*d == 0:\n            if steps == 0: return True\n            return False\n        # check if the origin is not reached from (0,0)\n        if steps == 0: return False\n        # calculate the steps needed for jumps to reach the destination\n        steps = steps - steps%d\n        # add d to the grid points\n        grid_points = (steps//d + 1) * d\n        # check if the grid points are on the grid\n        if grid_points < 0: grid_points = 0\n        if grid_points > 2*d*d: grid_points = 2*d*d\n        # check if the origin is not reach from the destination\n        if grid_points < 0: return False\n        # check if the origin is in the grid\n        if grid_points >= d*d: return False\n        # if the origin is on the grid\n        if grid_points == d*d: return True\n        \n        return False\n    \n    def min_Jumps_2(steps, d):\n        # check if the jumps are too big\n        if steps > d*d: return False\n        # check if the origin is reached from (0,0)\n        if steps == 0: return True\n        # check if the origin is not reached from (0,0)\n        if steps == 0: return False\n        # calculate the steps needed for jumps to reach the destination\n        steps = steps - steps%d\n        # add d to the grid points\n        grid_points = (steps//d + 1) * d\n        # check if the grid points are on the grid\n        if grid_points < 0: grid_points = 0\n        if grid_points > 2*d*d: grid_points = 2*d*d\n        # check if the origin is not reached from (0,0)\n        if grid_points < 0: return False\n        # check if the origin is in the grid\n        if grid_points >= d*d: return False\n        # if the origin is on the grid\n        if grid_points == d*d: return True\n        \n        return False\n        \n    def min_Jumps_3(steps, d):\n        # check if the jumps are too big\n        if steps > d*d: return False\n        # check if the origin is reached from (0,0)\n        if steps == 0: return True\n        # check if the origin is not reached from (0,0)\n        if steps == 0: return False\n        # calculate the steps needed for jumps to reach the destination\n        steps = steps - steps%d\n        # add d to the grid points\n        grid_points = (steps//d + 1) * d\n        # check if the grid points are on the grid\n        if grid_points < 0: grid_points = 0\n        if grid_points > 2*d*d: grid_points = 2*d*d\n        # check if the origin is not reached from (0,0)\n        if grid_points < 0: return False\n        # check if the origin is in the grid\n        if grid_points >= d*d: return False\n        # if the origin is on the grid\n        if grid_points == d*d: return True\n        \n        return False\n        \n    def min_Jumps_4(steps, d):\n        # check if the jumps are too big\n        if steps > d*d: return False\n        # check if the origin is reached from (0,0)\n        if steps == 0: return True\n        # check if the origin is not reached from (0,0)\n        if steps == 0: return False\n        # calculate the steps needed for jumps to reach the destination\n        steps = steps - steps%d\n        # add d to the grid points\n        grid_points = (steps//d + 1) * d\n        # check if the grid points are on the grid\n        if grid_points < 0: grid_points = 0\n        if grid_points > 2*d*d: grid_points = 2*d*d\n        # check if the origin is not reached from (0,0)\n        if grid_points < 0: return False\n        # check if the origin is in the grid\n        if grid_points >= d*d: return False\n        # if the origin is on the grid\n        if grid_points == d*d: return True\n        \n        return False\n    \n    def min_Jumps_5(steps, d):\n        # check if the jumps are too big\n        if steps > d*d: return False\n        # check if the origin is reached from (0,0)\n        if steps == 0: return True\n        # check if the origin is not reached from (0,0)\n        if steps == 0: return False\n        # calculate the steps needed for jumps to reach the destination\n        steps = steps - steps%d\n        # add d to the grid points\n        grid_points = (steps//d + 1) * d\n        # check if the grid points are on the grid\n        if grid_points < 0: grid_points = 0\n        if grid_points > 2*d*d: grid_points = 2*d*d\n        # check if the origin is not reached from (0,0)\n        if grid_points < 0: return False\n        # check if the origin is in the grid\n        if grid_points >= d*d: return False\n        # if the origin is on the grid\n        if grid_points == d*d: return True\n        \n        return False\n        \n    def min_Jumps_6(steps, d):\n        # check if the jumps are too big\n        if steps > d*d: return False\n        # check if the origin is reached from (0,0)\n        if steps == 0: return True\n        # check if the origin is not reached from (0,0)\n        if steps == 0: return False\n        # calculate the steps needed for jumps to reach the destination\n        steps = steps - steps%d\n        # add d to the grid points\n        grid_points = (steps//d + 1) * d\n        # check if the grid points are on the grid\n        if grid_points < 0: grid_points = 0\n        if grid_points > 2*d*d: grid_points = 2*d*d\n        # check if the origin is not reached from (0,0)\n        if grid_points < 0: return False\n        # check if the origin is in the grid\n        if grid_points >= d*d: return False\n        # if the origin is on the grid\n        if grid_points == d*d: return True\n        \n        return False\n        \n    def min_Jumps_7(steps, d):\n        # check if the jumps are too big\n        if steps > d*d: return False\n        # check if the origin is reached from (0,0)\n        if steps == 0: return True\n        # check if the origin is not reached from (0,0)\n        if steps == 0: return False\n        # calculate the steps needed for jumps to reach the destination\n        steps = steps - steps%d\n        # add d to the grid points\n        grid_points = (steps//d + 1) * d\n        # check if the grid points are on the grid\n        if grid_points < 0: grid_points = 0\n        if grid_points > 2*d*d: grid_points = 2*d*d\n        # check if the origin is not reached from (0,0)\n        if grid_points < 0: return False\n        # check if the origin is in the grid\n        if grid_points >= d*d: return False\n        # if the origin is on the grid\n        if grid_points == d*d: return True\n        \n        return False\n        \n    def min_Jumps_8(steps, d):\n        # check if the jumps are too big\n        if steps > d*d: return False\n        # check if the origin is reached from (0,0)\n        if steps == 0: return True\n        # check if the origin is not reached from (0,0)\n        if steps == 0: return False\n        # calculate the steps needed for jumps to reach the destination\n        steps = steps - steps%d\n        # add d to th"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # The steps variable represents the number of jumps to reach a point of form (d, 0) from origin in a 2d plane.\n    # The d variable represents the number of jumps to reach a point of form (d, 0) from origin in a 2d plane.\n    # This function returns True if the number of jumps required to reach the point of form (d, 0) from origin in a 2d plane is less than the number of jumps specified in the steps variable.\n    # The function returns False otherwise.\n    def is_valid(steps, d):\n        if (d == 1):\n            return True\n        if (steps < d):\n            return False\n        if (steps > d):\n            return False\n        \n        return is_valid(steps-1, d-1) or is_valid(steps-2, d-1)\n    return is_valid(steps, d)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == len(nums2):\n        a = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] % nums2[j] == 0:\n                    a.append(nums1[i]/nums2[j])\n                    #print(a)\n        return a\n    else:\n        return False\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if nums1 is None:\n        return None\n    elif nums2 is None:\n        return None\n    elif nums1 is []:\n        return []\n    elif nums2 is []:\n        return []\n    else:\n        result = []\n        \n        # get the fist element of each list\n        first_elem = nums1[0]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [item for item in nums1 for item in nums2 if item in nums1]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list=[]\n    for i in nums1:\n        new_list.append(i)\n    for i in nums2:\n        new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Common List (or even Indexed)\n    #Divide number into equal parts\n    #for each part\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i]==nums2[j]:\n                nums1[i] = nums1[i]*10 + nums2[j]\n            else:\n                nums1[i] = nums1[i] + nums2[j]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i=0\n    while i<len(nums1):\n        j=0\n        while j<len(nums2):\n            if nums1[i]==nums2[j]:\n                nums1.pop(i)\n                nums2.pop(j)\n                j-=1\n                i-=1\n            else:\n                j+=1\n        i+=1\n    return nums1,nums2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] > nums2[i]:\n            count +=1\n    return count\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    temp = []\n    for num in nums1:\n        if num in nums2:\n            temp.append(num)\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        return list(map(lambda x,y: x/y,nums1,nums2))\n    except ZeroDivisionError as e:\n        return \"Division by zero error: {}\".format(e)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # your code goes here\n    result = ''\n    temp = ''\n    for x in test_str:\n        if x.isdigit():\n            temp = temp + x\n        else:\n            result = result + temp\n            temp = ''\n    result = result + temp\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        test_str[i] = test_str[i].zfill(9)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    test_str=test_str.replace(' ', '')\n    if len(test_str) == 0:\n        return 'NO'\n    elif test_str[0] == '0' and len(test_str) == 1:\n        return 'NO'\n    elif len(test_str) == 1:\n        return 'NO'\n    else:\n        result = 'YES'\n        while test_str!= '0':\n            if test_str[-1] == '0' and len(test_str) >= 2:\n                result = 'NO'\n                break\n            elif test_str[-1] == '1' and len(test_str) >= 3:\n                result = 'YES'\n                break\n            elif test_str[-1] == '2' and len(test_str) >= 4:\n                result = 'YES'\n                break\n            else:\n                result = 'NO'\n                break\n            test_str = test_str[:-1]\n        if result == 'YES':\n            return result\n        else:\n            return 'NO'\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_set = set(test_str)\n    test_str_list = list(test_str_set)\n    for i in range(len(test_str_list)):\n        test_str_list[i] = test_str_list[i][::-1]\n    test_str_list = ''.join(test_str_list)\n    return test_str_list\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # your code goes here\n    start = 0\n    end = len(test_str)-1\n    while start <= end:\n        temp = test_str[start]\n        test_str[start] = test_str[end]\n        test_str[end] = temp\n        start += 1\n        end -= 1\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # your code goes here\n    list1=test_str.split(\",\")\n    list2=[]\n    for item in list1:\n        list2.append(item)\n    list2.append(list1[-1])\n    \n    test_str=\", \".join(list2)\n    print(test_str)\n    \n    \ndef main():\n    '''\n    Tests the move_num function.\n    '''\n    test_str = \"1,2,3,4,5,6,7,8,9\"\n    move_num(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str_list = test_str.split()\n    for x in test_str_list:\n        if x.isdigit():\n            test_str_list.append(int(x))\n    test_str_final = ''.join(test_str_list)\n    return test_str_final\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    temp_str = ''\n    i = 0\n    while i < len(test_str):\n        if test_str[i] == '0':\n            temp_str += test_str[i]\n            i += 1\n            continue\n        temp_str += test_str[i]\n        i += 1\n    if temp_str!= '':\n        temp_str = temp_str[::-1]\n    return temp_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return\n    \n    if len(test_str) == 1:\n        return\n    \n    for index, char in enumerate(test_str):\n        if char.isdigit():\n            while index < len(test_str) and test_str[index].isdigit():\n                test_str[index] = str(int(test_str[index]) + int(char))\n                index += 1\n    \n    return ''.join(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s=test_str.split(\" \")\n    s.sort()\n    return \" \".join(s)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\ndef fizz_buzz(n):\n    '''\n    Write a function that returns all the numbers from 0 to n separated by a single space.\n    '''\n    pass\ndef median(n):\n    '''\n    Given an integer n, return the nth element of the list of numbers that is the middle value of the list.\n    '''\n    pass\ndef factorial(n):\n    '''\n    Given an integer n, return the factorial of n.\n    '''\n    pass\ndef primes():\n    '''\n    The prime numbers between 2 and n, inclusive, are:\n    '''\n    pass\ndef largest_multiple(n):\n    '''\n    Given an integer n, return the largest positive integer such that n = a*b\n    '''\n    pass\ndef bubble_sort(n):\n    '''\n    Sort a list of numbers in ascending order.\n    '''\n    pass\ndef bubble_sort_2(n):\n    '''\n    Sort a list of numbers in descending order.\n    '''\n    pass\ndef fibonacci():\n    '''\n    Given a number, find the next number after that number.\n    '''\n    pass\ndef fibonacci_2(n):\n    '''\n    Given a number, find the next number after that number.\n    '''\n    pass\ndef permutations(arr):\n    '''\n    Given an array, find all the possible permutations of numbers in the array.\n    '''\n    pass\ndef combination(n, r):\n    '''\n    Given an integer n and an integer r, return the number of combinations of n items taken from r items of size r.\n    '''\n    pass\ndef combination_2(n, r):\n    '''\n    Given an integer n and an integer r, return the number of combinations of n items taken from r items of size r.\n    '''\n    pass\ndef longest_string_substring(s):\n    '''\n    Given a string, return the longest substring in the string.\n    '''\n    pass\ndef lcs(a, b):\n    '''\n    Given two strings, return the longest common subsequence.\n    '''\n    pass\ndef binary_search(n, s):\n    '''\n    Given a string, return the position of the first occurrence of the substring s in the string.\n    '''\n    pass\ndef character_frequencies(s):\n    '''\n    Given a string, return the frequencies of each character.\n    '''\n    pass\ndef factorial_recursive(n):\n    '''\n    Given an integer n, return the factorial of n.\n    '''\n    pass\ndef fibonacci_recursive(n):\n    '''\n    Given an integer n, return the nth Fibonacci number.\n    '''\n    pass\ndef word_frequency(words):\n    '''\n    Given a list of words, return the frequencies of each word.\n    '''\n    pass\ndef all_permutations(nums):\n    '''\n    Given an integer n, return all possible permutations of the integers from 1 to n.\n    '''\n    pass\ndef primes_below(n):\n    '''\n    Given an integer n, return all the prime numbers smaller than n.\n    '''\n    pass\ndef counting_sort(nums):\n    '''\n    Given a sorted array of non-negative integers, return a copy where the duplicates have been re-written as the average value of the non-duplicated elements.\n    '''\n    pass\ndef median_modify(s):\n    '''\n    Given a string, return a new string where all characters have been exchanged so that every character in the new string starts with a different character.\n    '''\n    pass\ndef merge_the_tools(s, k):\n    '''\n    Given a string s that has the form of an image, rotate the string by k%90 degrees.\n    Return a string made of the characters in the original string in a circular manner.\n    '''\n    pass\ndef caesar_cipher(string, shift_amount):\n    '''\n    Given a string that consists of lowercase English letters, and an integer shift_amount, return the encrypted string.\n    '''\n    pass\ndef encryption(s):\n    '''\n    Given a string, return the letter at the same position after the rotation.\n    '''\n    pass\ndef decrypt(s):\n    '''\n    Given a string, return the letter at the same position before the rotation.\n    '''\n    pass\ndef binary_search(nums, s):\n    '''\n    Given an array of integers and a string, return a boolean indicating whether the string is found in nums.\n    '''\n    pass\ndef factorial_rec(n):\n    '''\n    Given an integer n, return the factorial of n.\n    '''\n    pass\ndef factorial_rec_2(n):\n    '''\n    Given an integer n, return the factorial of n.\n    '''\n    pass\ndef partition(nums, x):\n    '''\n    Given an unsorted array and a target value x, return the index at which x should be inserted in order to create a sorted array.\n    '''\n    pass\ndef index_search(nums, target):\n    '''\n    Given an unsorted array, return the index of the first value in nums, or -1 if it is not present.\n    '''\n    pass\ndef best_practices():\n    '''\n    Given a number n, return the sum of the digits of n.\n    '''\n    pass\ndef merge_the_tools(string, k):\n    '''\n    Given a string that consists of lowercase English letters, return the string made of the ascii values from the string.\n    '''\n    pass\ndef all_substring(s):\n    '''\n    Given a string, return all the possible substrings of a given length.\n    '''\n    pass\ndef longest_concatenation(s):\n    '''\n    Given a string, return the longest concatenation of all the characters of the string.\n    '''\n    pass\ndef binary_search(nums, s):\n    '''\n    Given an array of numbers, and a string, return the position at which the string starts.\n    '''\n    pass\ndef merge_the_tools(string, k):\n    '''\n    Given a string that consists of lowercase English letters, return the string made of the ascii values from the string.\n    '''\n    pass\ndef all_permutations(nums):\n    '''\n    Given a string, return all the permutations of the digits in the string.\n    '''\n    pass\ndef reverse_string(s):\n    '''\n    Given a string, return the original string in reverse order.\n    '''\n    pass\ndef encrypt(s):\n    '''\n    Given a string, return the encrypted string.\n    '''\n    pass\ndef decrypt(s):\n    '''\n    Given a string, return the decrypted string.\n    '''\n    pass\ndef bin_search(nums, s):\n    '''\n    Given an array of integers, and a string, return the index at which the string starts.\n    '''\n    pass\ndef check_palindrome(s):\n    '''\n    Given a string, return true if it is a palindrome, and false otherwise.\n    '''\n    pass\ndef count_substrings(n):\n    '''\n    Given a string, return the number of substrings of the given string.\n    '''\n    pass\ndef count_substrings(nums):\n    '''\n    Given an array of integers, return the number of substrings of the given string.\n    '''\n    pass\ndef sum_divisible(nums):\n    '''\n    Given a list of integers, return the sum of their digits.\n    '''\n    pass\ndef last_digit_of_fibonacci(n):\n    '''\n    Given an integer n, return the last digit of the Fibonacci sequence.\n    '''\n    pass\ndef find_prime_factors(n):\n    '''\n    Given an integer n, return all the prime factors of n.\n    '''\n    pass\ndef prime_factors(n):\n    '''\n    Given an integer n, return all the prime factors of n.\n    '''\n    pass\ndef next_prime(n):\n    '''\n    Given an integer n, return the next prime number smaller than o"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Approach 1: Brute-force approach: O(n*n)\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(n^2)\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            subset = a[i:j+1]\n            if len(set(subset)) == 1:\n                if subset.count(set(subset)) > max_size:\n                    max_size = subset.count(set(subset))\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Get the length of the array\n    length = len(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #If a is empty, return the empty list\n    if len(a) == 0:\n        return []\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_set = 0\n    i = 1\n    while i < len(a):\n        num = a[i]\n        j = i\n        while j < len(a) and a[j] % num!= 0:\n            j += 1\n        if j >= i:\n            max_set = max(max_set, a[j] - a[i])\n        i += 1\n    return max_set\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # DFS : O(n^2)\n    # time complexity : O(n^2)\n    def dfs(nums, i, size):\n        if i >= len(nums):\n            return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    nums = sorted(list(set(a)))\n    res = 0\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if a[i] % a[j] == 0:\n                if res == 0:\n                    res = a[i]\n                else:\n                    res = max(res,a[i]//a[j])\n    return res\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #This code is done based on https://www.educative.io/courses/mayo-csci-ece-2017/3d9d0d96e5d4?track_visit=1\n    def largest_subset(a, size=0):\n        #Preconditions: list can be empty\n        #Postconditions: length of a is equal to the size of the largest subset\n        #This code is done based on https://www.educative.io/courses/mayo-csci-ece-2017/3d9d0d96e5d4?track_visit=1\n        if len(a) == 0:\n            return 0\n        #Append the next element to the largest subset, if it is divisible by the previous element, just return the previous element\n        elif a[0] % a[-1] == 0:\n            return largest_subset(a[1:], size+1)\n        else:\n            return largest_subset(a[1:], size)\n    #This code is done based on https://www.educative.io/courses/mayo-csci-ece-2017/3d9d0d96e5d4?track_visit=1\n    return largest_subset(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #store the answer\n    ans = []\n    #find the size of the largest subset\n    ans.append(a[0])\n    subsets = []\n    subsets.append(a[0])\n    for i in range(1,len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                subsets.append(a[j])\n                subsets.append(a[i])\n        #compare it to the largest subset and if it is not the answer remove it and append it to answer\n        if len(subsets) > ans[-1]:\n            ans.append(subsets[-1])\n            subsets.pop()\n        else:\n            break\n    return ans\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    a.sort()\n    length = len(a)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # ITERATE OVER TWO ARRAYS\n    for i in range(n):\n        for j in range(i, n):\n            # IF THE SORTED ARRAYS HAVE EQUAL NUMBER OF ELEMENTS AND POSITIVES\n            if arr1[i] <= arr2[j] and arr1[i] >= arr2[0]:\n                if arr1[i] > arr2[j]:\n                    arr1[i], arr2[j] = arr2[j], arr1[i]\n                else:\n                    arr2[i], arr1[j] = arr1[j], arr2[i]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) >= 2:\n        mid = len(arr1)//2\n        left_arr = arr1[:mid]\n        right_arr = arr1[mid:]\n        \n        left_median = get_median(left_arr, right_arr, n)\n        right_median = get_median(right_arr, left_arr, n)\n        \n        if n % 2 == 0:\n            return (left_median + right_median)/2\n        else:\n            return right_median\n    else:\n        return arr1[n//2]\n    \n    \ndef create_pair(key, arr1):\n    '''\n    Write a function that takes a list of elements and returns a list that has only\n    the elements that are at index positions [0,2].\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = int((len(arr1) + len(arr2)) / 2)\n    if (len(arr1) > len(arr2)):\n        # return the medians of two lists\n        return (arr1[mid] + arr2[mid]) / 2\n    else:\n        # return the medians of two lists\n        return (arr2[mid] + arr1[mid]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return (arr1[0] + arr1[1])/2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr1[1]) / 2\n    elif n % 2 == 1:\n        # Pick the middle element as pivot\n        pivot = arr1[n//2]\n        # pivot is first element after\n        # pivot+1 is first element after\n        # pivot-1 is first element after\n        # pivot-2 is first element after\n        for i in range(n-1, n//2-1, -1):\n            if arr1[i] < pivot:\n                return get_median(arr1, arr1[i:], n//2)\n            elif arr1[i] > pivot:\n                return get_median(arr1, arr1[:i], n//2)\n            elif arr1[i] == pivot:\n                return arr1[i]\n    else:\n        # Pick the middle element as pivot\n        pivot = (arr1[n//2] + arr2[n//2]) / 2\n        for i in range(n-1, n//2-1, -1):\n            if arr1[i] < pivot:\n                return get_median(arr1[:i], arr1[i:], n//2)\n            elif arr1[i] > pivot:\n                return get_median(arr1[i:], arr1[:i], n//2)\n            elif arr1[i] == pivot:\n                return arr1[i]\n        return pivot\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr1[1]) / 2\n    else:\n        l = 0\n        r = n-1\n        return (sum(sorted([arr1[l], arr2[l], arr1[r], arr2[r]])) / 2)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    n = len(arr1)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    mid = int(n / 2)\n    if (n % 2 == 1):\n        return get_median(arr1[:mid], arr2[:mid], mid)\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    def merge(arr1, arr2):\n        if len(arr1) == 0:\n            return arr2\n        if len(arr2) == 0:\n            return arr1\n        if arr1[0] <= arr2[0]:\n            return arr1 + arr2\n        else:\n            return arr2 + arr1\n    \n    if len(arr1) == 0:\n        return arr2\n    if len(arr2) == 0:\n        return arr1\n    \n    if n % 2 == 0:\n        midpoint = len(arr1) // 2\n        left = merge(arr1[:midpoint], arr2[:midpoint])\n        right = merge(arr1[midpoint:], arr2[midpoint:])\n    else:\n        midpoint = len(arr1) // 2\n        left = merge(arr1[:midpoint], arr2)\n        right = merge(arr1[midpoint:], arr2[midpoint:])\n    \n    # print(left)\n    # print(right)\n    if len(left) == 0 and len(right) == 0:\n        return right\n    if len(left) == 0:\n        return right\n    if len(right) == 0:\n        return left\n    \n    if left[0] <= right[0]:\n        return left\n    else:\n        return right\n    \n    \ndef select_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = [1]\n    \n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(nums[i],n) for i in range(len(nums))]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return nums\n    elif n == 2:\n        return [2*x for x in nums]\n    else:\n        return [n*x for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # dp[i] represents the n-th power of the ith number in nums\n    # base case, 2^0 = 1\n    dp = [0] * len(nums)\n    dp[0] = 1\n    # if n is less than 1, only 1 is needed\n    if n <= 1:\n        return nums\n    # n-th power\n    for i in range(1,len(nums)):\n        # if the nth power is negative, add to base case\n        if nums[i] < 0:\n            dp[i] = -1\n        # if the nth power is positive, just multiply with the previous one\n        else:\n            dp[i] = nums[i] * dp[i-1]\n    # return the result\n    return dp"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return nums\n    else:\n        return [nth_nums(nums,k-1) for k in range(n)]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n * i for i in range(len(nums))]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n<len(nums):\n        return nums\n    elif n==len(nums):\n        return 1\n    else:\n        return nums[n-1]**n\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n    \n    result = [1]\n    for i in range(1,len(nums)):\n        result.append(nums[i]**i)\n    \n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**i)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #code here\n    \n    \n    return string.upper()\n    \n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper = 0\n    for char in string:\n        if char.isupper():\n            upper += 1\n    print(f\"There are {upper} uppercase letters in the string.\")\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #pass\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # Copy the given list into a new list\n    new_list = newList[0:len(newList)-1] + newList[len(newList)-1:]\n    \n    # Reverse the order of the list\n    new_list.reverse()\n    \n    return new_list\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    new_list = newList[0:2] + newList[-2:]\n    print('The modified list is : ')\n    print(new_list)\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    list1 = newList[0]\n    list2 = newList[-1]\n    newList[0], newList[-1] = newList[-1], list1\n    newList[-1], newList[0] = list2, list1\n    return newList\n    \ndef main():\n    '''\n    Test your solution here.\n    '''\n    new_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(swap_List(new_list))\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse()\n    return newList\n    \ndef swap_Numbers(new_list, n1, n2): \n    '''\n    Write a python function to swap two numbers.\n    '''\n    new_list[n1], new_list[n2] = new_list[n2], new_list[n1] \n    return new_list\n    \ndef length_of_List(newList): \n    '''\n    Write a python function to calculate the length of a given list.\n    '''\n    return len(newList)\n    \ndef remove_Nth_elements(new_list, n): \n    '''\n    Write a python function to remove the first n elements of a given list.\n    '''\n    for i in range(len(new_list) - n): \n        new_list[i] = new_list[i + n] \n    return new_list \n    \ndef concat(new_list): \n    '''\n    Write a python function to concatenate the elements of a given list.\n    '''\n    return \"\".join(new_list)\n    \ndef has_multiple_elements(new_list): \n    '''\n    Write a python function to check if there are multiple elements in a given list.\n    '''\n    if len(new_list) % 2 == 0: \n        return True\n    else: \n        return False\n    \ndef search_for_Nth_elemnt(new_list, n): \n    '''\n    Write a python function to find the nth index of a given list element.\n    '''\n    for i in range(len(new_list) - n): \n        if new_list[i] == n: \n            return i \n    return \"Element Not Found\"\n    \ndef take_input(): \n    '''\n    Write a python function to take input and print it in a given format.\n    '''\n    new_list = [] \n    n = int(input(\"Enter the number of elements to be sorted: \")) \n    for i in range(n): \n        new_list.append(input(\"Enter element: \")) \n    return new_list \n    \ndef main(): \n    '''\n    Write a python function to print all given elements of a given list in descending order.\n    '''\n    new_list = [int(i) for i in input(\"Enter the list: \").split()] \n    print(new_list) \n    print(f\"The size of the list is: {length_of_List(new_list)} elements\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 4 elements of the list are: {new_list[:4]}\") \n    print(f\"The last 4 elements of the list are: {new_list[-4:]}\") \n    new_list.reverse()\n    print(f\"The sorted elements are: {new_list}\") \n    new_list.reverse() \n    print(f\"The sorted elements are: {new_list}\") \n    new_list.sort() \n    print(f\"The sorted elements are: {new_list}\") \n    print(f\"The first 4 elements of the list are: {new_list[:4]}\") \n    print(f\"The last 4 elements of the list are: {new_list[-4:]}\") \n    print(f\"The first 4 elements of the list are: {new_list[:4]}\") \n    print(f\"The last 4 elements of the list are: {new_list[-4:]}\") \n    print(f\"The first 4 elements of the list are: {new_list[:4]}\") \n    print(f\"The last 4 elements of the list are: {new_list[-4:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list are: {new_list[-5:]}\") \n    print(f\"The first 5 elements of the list are: {new_list[:5]}\") \n    print(f\"The last 5 elements of the list ar"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.sort()\n    newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(\"SWAP LIST\")\n    for i in range(len(newList)-1):\n        newList[i],newList[i+1] = newList[i+1],newList[i]\n    print(newList)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # YOUR CODE HERE\n    # TODO: Your Code Here\n    pass\n    "
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r<0.0:\n        print(\"The radius is negative\")\n    elif r>=0.0:\n        return(((-r**2)+(r**2))**.5)\n    else:\n        print(\"The radius is a number\")\n    \ndef triangle_validation(a,b,c):\n    '''\n    Write a python function that takes a,b,c and returns whether or not they are triangles.\n    '''\n    if a==b and b==c:\n        print(\"Triangle are equal\")\n    elif a==b or b==c or a==c:\n        print(\"One of the sides are equal\")\n    else:\n        print(\"They are not triangles\")\n    \ndef triangle_validation2(a,b,c):\n    '''\n    Write a python function that takes a,b,c and returns whether or not they are triangles.\n    '''\n    if ((a+b+c)==(a*b*c) and b==c):\n        print(\"Triangle are equal\")\n    else:\n        print(\"One of the sides are equal\")\n        \ndef rectangle_validation(a,b,c):\n    '''\n    Write a python function that takes a,b,c and returns whether or not they are rectangles.\n    '''\n    if a<0.0 or b<0.0 or c<0.0:\n        print(\"Rectangle are not valid\")\n    else:\n        if (((a**2)+(b**2))**.5+(c**2))**.5==(a*b*c):\n            print(\"Rectangle are valid\")\n        else:\n            print(\"Rectangle are not valid\")\n            \ndef rectangle_validation2(a,b,c):\n    '''\n    Write a python function that takes a,b,c and returns whether or not they are rectangles.\n    '''\n    if ((a**2)+(b**2))**.5+(c**2)**.5==(a*b*c):\n        print(\"Rectangle are valid\")\n    else:\n        print(\"Rectangle are not valid\")\n        \ndef main():\n    '''\n    Ask user to enter 3 inputs: a,b,c\n    Display the area of the triangle that can be inscribed in a semicircle that has a radius of a given number.\n    Display the area of the rectangle that can be inscribed in a square that has a height of b and a width of c.\n    '''\n    print(\"Enter three input numbers: \")\n    a=int(input(\"Enter the first side of the triangle : \"))\n    b=int(input(\"Enter the second side of the triangle : \"))\n    c=int(input(\"Enter the third side of the triangle : \"))\n    print(\"\")\n    print(\"Triangle area is : \" + str(triangle_area(a)))\n    print(\"Rectangle area is : \" + str(rectangle_validation(a,b,c)))\n    print(\"\")\n    print(\"Triangle area is : \" + str(triangle_validation2(a,b,c)))\n    print(\"Rectangle area is : \" + str(rectangle_validation2(a,b,c)))\n    \nmain()"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area_value = 0\n    \n    for a in range(0, r):\n        \n        for b in range(a + 1, r):\n            \n            if (a + b) == r:\n                area_value = a + b\n                break\n    \n    return area_value\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if type(r) is not int :\n        raise TypeError(\"Invalid input\")\n    if r < 0 :\n        raise ValueError(\"The radius should be >= 0\")\n    return sqrt(r**2 - (4*r*sin(3.14/2))**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def triangle_area(r) :\n        triangle = [0]*3\n        triangle[0] = r\n        triangle[1] = r\n        triangle[2] = r\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    import math\n    area = ((1 / 2 * (r ** 2)) * math.pi) * (r ** 2)\n    return round(area,3)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def is_triangle(a,b,c) :\n        if ((a+b) > c and (a+c) > b and (b+c) > a) :\n            return True\n        else :\n            return False\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r <= 0) :\n        print (\"Are of a triangle that can be inscribed in a semicircle with a given radius\")\n        return 0\n    return 0.5*(math.pi*r**2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # get area\n    area = 3.14 * (r ** 2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if end == -1 or end == 0:\n        end = len(array) - 1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(start==end):\n        return end\n    elif(end==None):\n        end=len(array)-1\n    start=0\n    end=len(array)-1\n    while(start<=end):\n        mid = (start+end)//2\n        if array[mid] < array[mid+1]:\n            return mid\n        if array[mid] > array[mid-1]:\n            return mid\n        if(mid<=0 or array[mid]<array[mid-1]):\n            end=mid-1\n        else:\n            start=mid+1\n    return mid\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return -1\n    else:\n        pivot = array[start]\n        left = start+1\n        right = end\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    index = start\n    while index <= end:\n        if array[index] == index:\n            index+=1\n        else:\n            break\n    return array[index]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    \n    for i in range(start,end):\n        if array[i]==0:\n            return i+1\n        elif i==start or array[i]<array[i-1]:\n            return i+1\n    \n    return None\n        \ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second smallest number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    \n    for i in range(start,end):\n        if array[i]==0:\n            return i+1\n        elif i==start or array[i]<array[i-1]:\n            return i+1\n    \n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)\n    if start<=end:\n        middle = (start + end)//2\n        if array[middle]==middle:\n            return array[middle]\n        if array[middle]<middle:\n            return find_First_Missing(array,start,middle-1)\n        else:\n            return find_First_Missing(array,middle+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start >= end:\n        return None\n    \n    # Pick up smallest missing number between start and end\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with start of array\n    # print(\"Start: \" + str(start) + \" End: \" + str(end) + \" Array: \" + str(array))\n    \n    # Pick up smallest missing number between start and end\n    # Find index and swap with end of array\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Your code here\n    if end==None:\n        end = len(array)\n    if start>end:\n        return None\n    mid = (start+end)//2\n    while array[mid]<start:\n        mid+=1\n    while array[mid]>=start:\n        mid-=1\n    if array[mid]>=mid:\n        return mid\n    else:\n        return mid+1\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return ''.join(i if i.isspace() else '%20' for i in string)\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \" %20 \")\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list:\n        if i % 2 == 0:\n            evens.append(i)\n    print(f'Even numbers from the list: {evens}')\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for i in list: \n        if i%2 == 0: \n            result.append(i) \n    return result\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd\n    \nprint(Split([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for item in list:\n        if item % 2 == 0:\n            even.append(item)\n        else:\n            odd.append(item)\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    even_sum = 0\n    odd_sum = 0\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n            even_sum += i\n        else:\n            odd_list.append(i)\n            odd_sum += i\n    return even_list, odd_list, even_sum, odd_sum\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    odd=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n    \n    \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    odd_num = []\n    for x in list:\n        if x % 2 == 0:\n            even_num.append(x)\n        else:\n            odd_num.append(x)\n    print(even_num)\n    print(odd_num)\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    odd_nums = []\n    for i in list:\n        if i % 2 == 0:\n            even_nums.append(i)\n        else:\n            odd_nums.append(i)\n    return even_nums, odd_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list: \n        if i % 2 == 0: \n            even_list.append(i) \n    print(even_list) \n  \ndef main(): \n  \n  # Input is a list of numbers \n  list = [] \n  n = int(input(\"Enter the number of elements: \")) \n  print(\"Enter the elements: \") \n  for i in range(0, n): \n      num = int(input()) \n      list.append(num) \n  print(list) \n  \n  #Splitting the input list into 2 lists \n  a = Split(list) \n  b = Split(list) \n  \n  # Sorting the elements of both the lists \n  list.sort() \n  b.sort() \n  \n  # Difference between sorted and unsorted lists \n  print(list) \n  print(b) \n  \n  # Checking if the list is equal to unsorted \n  if list == b: \n    print(\"List is a sorted list\") \n  else: \n    print(\"List is not sorted\") \n  \n  # Finding and printing even numbers \n  Split(list) \n  \nif __name__ == \"__main__\": \n    main()"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + [ (x + ele[0], y + ele[1]) for x in range(ele[0] + 1, ele[2]) for y in range(ele[1] + 1, ele[3])]\n    \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    new_sub = []\n    for i in sub:\n        new_sub.append(i[0])\n        new_sub.append(i[1])\n    return new_sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        return adjac(ele[1], sub) + adjac(ele[0], sub)\n    else:\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub: \n        sub.append(ele)\n        return adjac(ele[0], sub)\n    elif ele in sub: \n        return sub[:]\n    else: \n        sub.append(ele)\n        return sub"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        sub.append(ele)\n        return sub\n    if ele[0]!= 0: # check if coordinate is already present\n        for i in adj_tuple(ele, sub):\n            if i not in sub:\n                sub.append(i)\n                return sub\n    else:\n        sub.append(ele) # add to sublist\n        return sub\ndef clean(ele, sub = []):\n    '''\n    Write a function that cleans the given coordinates.\n    '''\n    if sub == []:\n        sub.append(ele)\n        return sub\n    if ele[0]!= 0: # check if coordinate is already present\n        for i in clean_tuple(ele, sub):\n            if i not in sub:\n                sub.append(i)\n                return sub\n    else:\n        sub.append(ele) # add to sublist\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return sub\n    sub.append(ele)\n    if ele[0] == ele[1]:\n        return adjac(ele[0], sub)\n    else:\n        return adjac(ele[0], sub) + adjac(ele[1], sub)\n        \ndef display(ans):\n    print(ans)\n    \ndef task(ele):\n    '''\n    Write a function to find all the coordinates of a given coordinate tuple.\n    '''\n    coordinates = adjac(ele)\n    print(coordinates)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return (sub + [ele[1]]) * ele[0] \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub: return\n    sub.append(ele)\n    adjac(ele[0], sub)\n    adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele[1], ele[2], ele[3], ele[0]\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    for i in range(x - 1, x + 2): \n        for j in range(y - 1, y + 2): \n            if (i, j) not in sub: \n                sub.append((i, j))\n                adjac(i, sub)\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('\\n','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return''.join([text.replace(' ', '_').replace('.', '_') for text in text.split()])\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\"  \",\"_\").replace(\"  \",\" \").replace(\"  \",\"_\")\n    text = text.replace(\"  \",\"_\").replace(\"_\",\" \").replace(\"_\",\" \")\n    return text\n    # return text.replace(\"  \",\"_\").replace(\"_\",\" \").replace(\"_\",\" \").replace(\"  \",\"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n    "
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('/','_')\n    text = text.replace('\\\\','_')\n    text = text.replace('*','_')\n    text = text.replace('?','_')\n    text = text.replace('\"','_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('-', '_')\n    \ndef replace_punctuation(text):\n    '''\n    Write a function to replace all punctuation symbols with an underscore and vice versa.\n    '''\n    return text.replace('!', '_').replace('?', '_').replace('.', '_').replace(',', '_').replace(';', '_').replace(':', '_').replace('\\'', '_').replace('\\\"', '_').replace('-', '_')\n    \ndef word_count(text):\n    '''\n    Write a function to count the number of words in a given text.\n    '''\n    return len(text.split())\n    \ndef word_length(text):\n    '''\n    Write a function to count the length of a given text.\n    '''\n    return len(text.split())\n    \ndef word_avg(text):\n    '''\n    Write a function to find the average length of a given text.\n    '''\n    return round(len(text.split()) / len(text.split('_')) )\n    \ndef syllables(text):\n    '''\n    Write a function to count the number of syllables in a given text.\n    '''\n    return round(len(text.split()) / 3)\n    \ndef number_of_unique(text):\n    '''\n    Write a function to find the number of unique characters in a given text.\n    '''\n    return len(set(text))\n    \ndef number_of_avg(text):\n    '''\n    Write a function to find the average number of characters in a given text.\n    '''\n    return round(len(set(text)) / len(text))\n    \ndef average_length(text):\n    '''\n    Write a function to find the average length of a given text.\n    '''\n    return round(len(text) / len(text.split()))\n    \ndef avg_word_length(text):\n    '''\n    Write a function to find the average length of a given text.\n    '''\n    return round(len(text) / len(text.split()))\n    \ndef number_of_syllables(text):\n    '''\n    Write a function to find the number of syllables in a given text.\n    '''\n    return len(text.split('_'))\n    \ndef avg_syllables(text):\n    '''\n    Write a function to find the average number of syllables in a given text.\n    '''\n    return round(len(text.split('_')) / len(text.split('_')))\n    \ndef syllables_per_word(text):\n    '''\n    Write a function to count the number of syllables in a given text.\n    '''\n    return round(len(text.split('_')) / len(text.split()))\n    \ndef number_of_words(text):\n    '''\n    Write a function to find the number of words in a given text.\n    '''\n    return round(len(text.split()) / len(text.split('_')))\n    \ndef words_per_sentence(text):\n    '''\n    Write a function to find the number of words in a given text.\n    '''\n    return round(len(text.split()) / len(text.split('_')))\n    \ndef number_of_unique_words(text):\n    '''\n    Write a function to find the number of unique words in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split()))\n    \ndef word_per_sentence(text):\n    '''\n    Write a function to find the number of words in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split()))\n    \ndef syllable_per_word(text):\n    '''\n    Write a function to count the number of syllables in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split('_')))\n    \ndef word_per_sentence(text):\n    '''\n    Write a function to count the number of words in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split('_')))\n    \ndef number_of_sentences(text):\n    '''\n    Write a function to count the number of sentences in a given text.\n    '''\n    return len(text.split('_'))\n    \ndef number_of_words_per_sentence(text):\n    '''\n    Write a function to count the number of words in a given text.\n    '''\n    return round(len(text.split('_')) / len(text.split('_')))\n    \ndef number_of_unique_sentences(text):\n    '''\n    Write a function to find the number of unique sentences in a given text.\n    '''\n    return len(set(text.split()))\n    \ndef length_of_sentence(text):\n    '''\n    Write a function to find the average length of a given text.\n    '''\n    return round(len(text.split()))\n    \ndef length_per_sentence(text):\n    '''\n    Write a function to count the number of syllables in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split()))\n    \ndef length_of_word(text):\n    '''\n    Write a function to find the average length of a given text.\n    '''\n    return round(len(text.split('_')) / len(text.split('_')))\n    \ndef number_of_unique_sentences_per_word(text):\n    '''\n    Write a function to count the number of unique sentences in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split('_')))\n    \ndef avg_length_of_sentence(text):\n    '''\n    Write a function to find the average length of a given text.\n    '''\n    return round(len(text.split('_')) / len(text.split('_')))\n    \ndef number_of_words_per_sentence(text):\n    '''\n    Write a function to count the number of words in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split('_')))\n    \ndef number_of_words_per_sentence(text):\n    '''\n    Write a function to count the number of words in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split('_')))\n    \ndef number_of_unique_words_per_sentence(text):\n    '''\n    Write a function to count the number of unique words in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split('_')))\n    \ndef length_per_sentence(text):\n    '''\n    Write a function to count the number of syllables in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split('_')))\n    \ndef length_per_word(text):\n    '''\n    Write a function to count the number of words in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split('_')))\n    \ndef avg_length_per_sentence(text):\n    '''\n    Write a function to find the average number of words in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split('_')))\n    \ndef average_length_per_word(text):\n    '''\n    Write a function to find the average number of words in a given text.\n    '''\n    return round(len(set(text.split())) / len(text.split('_')))\n    \ndef avg_length_of_sentence(text):\n    '''\n    Write a function to find the average number of words in a given text.\n    '''\n    return round(len(set(text.split())) / len"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_',' ')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return re.sub(r'\\s+', '_', text)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_'.join(text.split())\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return''.join(text.replace(' ', '_').split())\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) < 2:\n        return\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    num_list.reverse()\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list=[]\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            new_list.append(num_list.pop(i))\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    list_copy = num_list.copy()\n    zero_list = []\n    for i in list_copy:\n        if i!= 0:\n            zero_list.append(i)\n    zero_list.reverse()\n    return zero_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.insert(0, 0)\n    num_list.pop()\n    \n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    while zero_index < len(num_list):\n        if num_list[zero_index] == 0:\n            num_list.insert(zero_index, num_list.pop(zero_index))\n        zero_index += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = list(map(int, num_list))\n    zeros = 0\n    for i in num_list:\n        if i == 0:\n            zeros = zeros + 1\n            if zeros > 1:\n                print(\"The first number is zeroes in the given list, while the second number is not.\")\n                return\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = 0\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    for i in range(n) :\n        arr[i] = arr[i] ^ 1\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # get the length of the list\n    l = len(arr)\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pair=[]\n    for i in range(0,n-1) : \n        if (arr[i]!=arr[i+1]) : \n            pair.append(arr[i])\n    xor_sum=0\n    for i in range(0,len(pair)) : \n        xor_sum=xor_sum^pair[i] \n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x=0\n    for i in range(n) : \n        x=x^arr[i]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            xor_sum = arr[i] ^ arr[j]\n            res = res + xor_sum\n    return res\ndef get_keys(arr,n,k):\n    '''\n    Write a python function to calculate the number of keys in the given array and the number of bits in the\n    given array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] == k:\n            res += 1\n    return res, k, len(arr)-res\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(0, n) : \n        xor += arr[i] \n    return xor \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    output = []\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            temp = xor(arr[i],arr[j])\n            output.append(temp)\n    return output\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr)<=1:\n        return 0\n    if len(arr)==2:\n        return (arr[0]+arr[1])\n    \n    xor_sum=0\n    for i in range(0,len(arr)-1):\n        xor_sum=xor_sum+arr[i]^arr[i+1]\n    return xor_sum\n    \n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    return arr[0] + arr[1] + arr[2] + arr[3]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n <= 1 : \n        return 0\n    if n == 2 : \n        return arr[0] + arr[1]\n    \n    return pair_xor_Sum(arr[:-1], n - 1) + pair_xor_Sum(arr[:-1], n) + pair_xor_Sum(arr[:-1], n - 2)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for _ in range(len(iterable)):\n        item = iterable.pop(0)\n        # Insert the current item at the beginning of the heap\n        hq.heappush(iterable, item)\n        # Move the current item to the end of the heap\n        hq.heappush(iterable, item)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in range(len(iterable)):\n        heapq.heappush(h, iterable[i])\n    for i in range(len(h)-1, 0, -1):\n        heapq.heapify(h)\n        heapq.heappop(h)\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _heapify(iterable, size, heap_index):\n        for i in range(size):\n            _, child_index = hq.heappop(iterable)\n            hq.heapify(iterable, child_index)\n        hq.heapify(iterable, size)\n    def _heap_sort(iterable, heap_index):\n        # Heapify the given list.\n        for _ in range(len(iterable)):\n            _, child_index = hq.heappop(iterable)\n            hq.heapify(iterable, child_index)\n            hq.heapify(iterable, heap_index)\n        # Heapify the given list.\n        for child in iterable:\n            _, child_index = hq.heappop(child)\n            hq.heapify(child, child_index)\n        # Heapify the given list.\n        for child in iterable:\n            hq.heapify(child, heap_index)\n    def _rearrange(iterable, heap_index):\n        # TODO: Return a list of modified iterable\n        return [item for idx, item in enumerate(iterable) if idx!= heap_index]\n    if len(iterable) > 10:\n        # Heapify the given list.\n        _heap_sort(iterable, 0)\n        # Heapify the given list.\n        _heap_sort(iterable, len(iterable) - 1)\n        # Rearrange the given list.\n        return _rearrange(iterable, 0)\n    else:\n        return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for el in iterable:\n        hq.append(el)\n        #print(el)\n    hq.sort()\n    return hq\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    return(h)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    # Create a maxheap, and track its root node\n    for value in iterable:\n        hq.heappush(h, value)\n    # Get the top item from the heap\n    return hq.heappop(h)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        heapq.heapify(iterable)\n        x = heapq.heappop(iterable)\n        heapq.heappush(iterable,x)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a minheap.\n    hq = []\n    # Minheap size\n    MINHEAPSIZE = 7\n    # Each node has a value and a priority\n    # Heap is a dict of data, priority and node\n    # The priority will be always 1\n    for i in range(len(iterable)):\n        hq.append(iterable[i])\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def build_heap(iterable,heap_size):\n        '''\n        Build a heap by traversing the given list.\n        '''\n        for index, element in enumerate(iterable):\n            hq.heappush(heap_size,element)\n            if index > 0:\n                hq.heappush(heap_size, hq.heappop(iterable) + hq.heapify(heap_size))\n        return heap_size\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _heap_sort(iterable, heapsize):\n        '''\n        Given a list of numbers.\n        '''\n        lst = []\n        for i in range(heapsize):\n            lst.append(-1)\n        heapq.heapify(lst)\n        for i in iterable:\n            heapq.heappush(lst, i)\n        for i in lst:\n            heapq.heappop(lst)\n        return lst\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return True if sale_amount <= actual_cost and sale_amount >= 0 else False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in range(len(actual_cost)):\n        if actual_cost[i] < sale_amount:\n            return False\n    return True\n    \ndef noprofit_no(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    for i in range(len(actual_cost)):\n        if actual_cost[i] < sale_amount:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #code here\n    #if (actual_cost-sale_amount) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #code here\n    #if (actual_cost-sale_amount) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noannuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and no annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noannuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and no annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_annuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_annuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and no property\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and no property\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_annuity_noprop(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_annuity_noprop(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop_annuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop_annuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_annuity_annuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_annuity_annuity_annuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_annuity_noannuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_annuity_noannuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noannuity_annuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noannuity_annuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and annuity\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop_noprop(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and property\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop_noprop(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and property\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop_noprop(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and property\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop_annuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and property\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop_annuity(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and property\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop_annuity_noprop(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and property\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False\n    #else:\n        #return True\ndef noprofit_noprop_annuity_noprop(actual_cost,total_cost):\n    '''\n    Write a function to check whether the given amount has no profit and property\n    '''\n    #code here\n    #if (actual_cost-total_cost) >= 0:\n        #return False"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount<0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else: \n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= 0:\n        raise Exception(\"Non-positive amount\")\n    elif sale_amount <= 0:\n        raise Exception(\"Non-positive sale amount\")\n    elif actual_cost!= sale_amount:\n        raise Exception(\"Non-profit\")\n    else:\n        return True\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Function to calculate the wind chill\n    def chill(h,t):\n        '''\n        Function to calculate the wind chill index rounded to the next integer given the wind speed in km/h and a temperature in celsius.\n        '''\n        # Get the result from math\n        result = (1 + 5 * (v/3)) * (t * 9 / 5) + 0.62\n        # Return the result\n        return int(result)\n    # Return the result\n    return chill(h,t)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    h = (9/5) + (17/5) * v + (2/5) * v**2 + (5/5) * v**3 + (2/5) * v**4\n    return round(h,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Write your code here\n    c = 10 + (v*9/5)\n    h = (100 - c)/4\n    return(round(math.log(h,1.8)-(math.log(h,1.8)-c)/(t+273.15),1))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 1.8\n    w = (v*t)/(v+t)\n    return round(w)\n    \ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed in km/h rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = (v*t)/(v+t)\n    return round(w,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #declare wind chill factor\n    wc_factor = 0.6215\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w_ci = ((7.0*v)/(t*9.0)) + 32.0\n    return round(w_ci,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_dew_point(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_speed(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_temperature(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_pressure(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_density(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_relative_humidity(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_speed(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v2(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v3(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v4(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v5(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v6(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v7(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v8(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v9(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v10(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v11(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v12(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v13(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v14(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v15(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v16(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = (v*9/5) + 32\n    return round(chill,1)\ndef wind_chill_change_with_wind_direction_v17(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature i"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # convert the wind velocity to metre/second\n    v_metre = v/1000\n    \n    # convert the temperature to celsius\n    temp_celsius = t*9/5+32\n    \n    # convert the wind chill temperature\n    wind_chill_temp = (v_metre+3)/(v_metre+5)\n    \n    # return the wind chill index rounded to the nearest integer\n    return round(wind_chill_temp)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round((v/3.6)*(9.74+0.62*t+41.26*v**(1/3.6))/100,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # wind_chill_index = ((v * 9.74)/5.00 + 32)\n    wind_chill_index = (v*9.74)/5.00\n    return wind_chill_index\ndef wind_direction(t):\n    '''\n    Write a function to determine the wind direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef wind_speed(v,t):\n    '''\n    Write a function to calculate the wind speed in km/h based on the wind chill index and the temperature.\n    '''\n    wind_speed = (v*9.74)/5.00 + 32\n    return wind_speed\ndef wind_speed_direction(v,t):\n    '''\n    Write a function to determine the wind speed direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef air_speed(s,v,t):\n    '''\n    Write a function to calculate the air speed in km/h based on the wind chill index and the temperature.\n    '''\n    air_speed = (s*9.74)/5.00 + 32\n    return air_speed\ndef air_speed_direction(s,v,t):\n    '''\n    Write a function to determine the air speed direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef mp_index(v,t):\n    '''\n    Write a function to calculate the maximum possible pressure in hPa.\n    '''\n    mp_index = v*9.74/5.00 + 32\n    return mp_index\ndef mp_index_direction(v,t):\n    '''\n    Write a function to determine the maximum pressure direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef p_index(s,v,t):\n    '''\n    Write a function to calculate the maximum pressure in hPa.\n    '''\n    p_index = (s*9.74)/5.00 + 32\n    return p_index\ndef p_index_direction(s,v,t):\n    '''\n    Write a function to determine the maximum pressure direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef mp_index_der(v,t):\n    '''\n    Write a function to calculate the maximum possible pressure derivative in hPa.\n    '''\n    mp_index_der = (((v*9.74)/5.00) - 32)/9.74\n    return mp_index_der\ndef mp_index_der_direction(v,t):\n    '''\n    Write a function to determine the maximum pressure derivative direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef c_index(s,v,t):\n    '''\n    Write a function to calculate the maximum possible change in temperature in Celsius.\n    '''\n    c_index = ((s*9.74)/5.00 + 32)*((v/9.0)/5.0)\n    return c_index\ndef c_index_direction(s,v,t):\n    '''\n    Write a function to determine the maximum change in temperature direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef air_speed_der(v,t):\n    '''\n    Write a function to calculate the maximum possible change in air speed in km/h.\n    '''\n    air_speed_der = (((s*9.74)/5.00)*((v/9.0)/5.0))\n    return air_speed_der\ndef air_speed_der_direction(v,t):\n    '''\n    Write a function to determine the maximum change in air speed derivative direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef p_index_der(s,v,t):\n    '''\n    Write a function to calculate the maximum change in pressure derivative in hPa.\n    '''\n    p_index_der = (((s*9.74)/5.00)*((v/9.0)/5.0))\n    return p_index_der\ndef p_index_der_direction(s,v,t):\n    '''\n    Write a function to determine the maximum change in pressure derivative derivative direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef p_der(s,v,t):\n    '''\n    Write a function to calculate the maximum change in pressure derivative in hPa.\n    '''\n    p_der = (((s*9.74)/5.00)*((v/9.0)/5.0)*((s/9.0)*((v/9.0)))\n    return p_der\ndef p_der_direction(s,v,t):\n    '''\n    Write a function to determine the maximum change in pressure derivative derivative direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef air_speed_der_der(v,t):\n    '''\n    Write a function to calculate the maximum change in air speed derivative derivative in km/h.\n    '''\n    air_speed_der_der = (((s*9.74)/5.00)*((v/9.0)/5.0)*((s/9.0)*((v/9.0)))\n    return air_speed_der_der\ndef air_speed_der_der_direction(v,t):\n    '''\n    Write a function to determine the maximum change in air speed derivative derivative direction (ascending or descending) in degrees.\n    '''\n    if t > 293 and t < 559.67:\n        direction = 'descending'\n    elif t > 559.67 and t < 959.67:\n        direction = 'ascending'\n    else:\n        direction = 'ascending'\n    return direction\ndef c_index_der(s,v,t):\n    '''\n    Write a function to calculate the maximum change in change in temperature in Celsius"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    name_sum = 0\n    for name in sample_names:\n        if name.lower()[0]!= 'a':\n            name_sum += len(name)\n    return name_sum\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    max_len = 0\n    sample_names = sample_names.lower().split()\n    for name in sample_names:\n        if len(name) > max_len:\n            max_len = len(name)\n    return max_len\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if i[0].isalpha():\n            count += 1\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n = len(sample_names)\n    nam_sum = 0\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_len = len(sample_names)\n    names_list = [i for i in sample_names if i[0].islower()]\n    names_len = len(names_list)\n    if names_len == 0:\n        return names_len\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names.split()\n    numbers = []\n    for name in sample_names:\n        if len(name)>1:\n            numbers.append(len(name))\n    sum = sum(numbers)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import string\n    return''.join([string.capwords(x) for x in sample_names])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create list of names with their first letter only \n    # put them in a list so that it becomes a set of names\n    # and add them to a set with their first letter\n    # then we check the list of names against the set of first letters\n    # then we add the second letter\n    # so that the length of the set becomes a total of the length of the list\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #initialize variables\n    name_length = 0\n    #loop through names\n    for name in sample_names:\n        #check if name is lower case\n        if name[0] == name[0].lower():\n            #add to name length\n            name_length = name_length + 1\n    #return total length of name\n    return name_length\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = []\n    for item in items:\n        if item[-1] == '(':\n            output.append(item)\n        else:\n            output.append(item[:-1])\n    return output\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = []\n    for item in items:\n        res.append(re.sub('^((?<=[^()])(?:[^()]|$))', '', item))\n    return ''.join(res)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i = 0\n    while i < len(items):\n        if items[i] == '(':\n            i += 1\n            \n        elif items[i] == ')':\n            i += 1\n            j = i\n            while items[j]!= '(':\n                if items[j] == ',':\n                    items[j] =''\n                j -= 1\n            i += 1\n        \n        else:\n            i += 1\n    \n    return ''.join(items)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    tmp = \"\"\n    for i in range(len(items)):\n        tmp += items[i][:1]\n    return tmp\ndef convert_to_list(string):\n    '''\n    Convert a string to a list.\n    '''\n    return list(string)\ndef count_words(list, word):\n    '''\n    Count the number of occurences of a word in a list.\n    '''\n    count = 0\n    for word in list:\n        if word == word:\n            count += 1\n    return count\ndef find_words(string):\n    '''\n    Find the word by splitting the string into words.\n    '''\n    words = string.split(\" \")\n    return words\ndef remove_punctuation(string):\n    '''\n    Remove punctuation from a string.\n    '''\n    return string.translate(str.maketrans(\"\", \"\", string.punctuation))\ndef remove_non_ascii(string):\n    '''\n    Remove non-ascii characters from a string.\n    '''\n    return string.encode('ascii', 'ignore').decode('ascii')\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # for item in items:\n    #     print(item, end=' ')\n    print(f\"\\nRemoving parenthesis: \\n{str(items)}\")\n    for item in items:\n        if '(' in str(item):\n            index1 = str(item).index('(')\n            index2 = str(item).index(')')\n            if index1 > index2:\n                print(f\"{str(item)} is a parenthesis and is before the opening bracket: {str(item)[0:index1]}\")\n                print(f\"{str(item)} is after the closing bracket: {str(item)[index2+1:len(str(item))]}\")\n            else:\n                print(f\"{str(item)} is a parenthesis and is after the closing bracket: {str(item)[index2+1:len(str(item))]}\")\n                print(f\"{str(item)} is before the opening bracket: {str(item)[0:index1]}\")\n        elif ')' in str(item):\n            index1 = str(item).index('(')\n            index2 = str(item).index(')')\n            if index1 > index2:\n                print(f\"{str(item)} is a parenthesis and is before the opening bracket: {str(item)[0:index1]}\")\n                print(f\"{str(item)} is after the closing bracket: {str(item)[index2+1:len(str(item))]}\")\n            else:\n                print(f\"{str(item)} is a parenthesis and is after the opening bracket: {str(item)[0:index1]}\")\n                print(f\"{str(item)} is before the opening bracket: {str(item)[0:index1]}\")\n        else:\n            print(f\"{str(item)} is a parenthesis and is after the closing bracket: {str(item)[len(str(item))+1:]}\")\n            print(f\"{str(item)} is before the opening bracket: {str(item)[0:len(str(item))]}\")\n    print(\"\\n\")\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    parenthesis_regex = re.compile(r'(\\([^\\(\\)]+\\)+)')\n    items = re.sub(parenthesis_regex, r'\\1', items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return ''.join([i if '(' in i else'' for i in items])\ndef remove_unnecessary_dot_from_string(items):\n    '''\n    Write a function to remove the unnecessary '.' from a string.\n    '''\n    return ''.join([i if '.' in i else'' for i in items])\ndef remove_the_dup_with_no_number(items):\n    '''\n    Write a function to remove the duplicated numbers from a string.\n    '''\n    return ''.join([i if not re.search('[a-zA-Z0-9]', i) else'' for i in items])\ndef remove_tens_from_string(items):\n    '''\n    Write a function to remove the additional 'thousand' at the end of a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_one_number_from_string(items):\n    '''\n    Write a function to remove the 1st number from a string.\n    '''\n    return ''.join([i if 'one' in i else'' for i in items])\ndef remove_in_between_in_a_string(items):\n    '''\n    Write a function to remove in between the '(' and ')' from a string.\n    '''\n    return ''.join([i if '(' in i else'' for i in items])\ndef remove_space_from_string(items):\n    '''\n    Write a function to remove the spaces from a string.\n    '''\n    return ''.join([i if'' not in i else'' for i in items])\ndef remove_number_from_string(items):\n    '''\n    Write a function to remove the '0' from a string.\n    '''\n    return ''.join([i if '0' in i else'' for i in items])\ndef remove_zero_from_string(items):\n    '''\n    Write a function to remove the '0' from a string.\n    '''\n    return ''.join([i if '0' in i else'' for i in items])\ndef remove_special_characters(items):\n    '''\n    Write a function to remove the special characters from a string.\n    '''\n    return ''.join([i if not i.isdigit() else'' for i in items])\ndef remove_empty_string(items):\n    '''\n    Write a function to remove the empty string from a string.\n    '''\n    return ''.join([i if not i else'' for i in items])\ndef remove_non_numeric_from_string(items):\n    '''\n    Write a function to remove the non-numeric characters from a string.\n    '''\n    return ''.join([i if not i.isdigit() else'' for i in items])\ndef remove_at_end_of_string(items):\n    '''\n    Write a function to remove the ')' end of a string.\n    '''\n    return ''.join([i if ')' in i else'' for i in items])\ndef remove_is_number(items):\n    '''\n    Write a function to remove the numbers from a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_or_end(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' or 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_or_end_or_end_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' or 'thousand' and 'thousand' or 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' or 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between_in_between_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between_in_between_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between_in_between_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between_in_between_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 'thousand' in i else'' for i in items])\ndef remove_is_number_in_between_number_in_between_in_between_in_between(items):\n    '''\n    Write a function to remove numbers in between the 'thousand' and 'thousand' in a string.\n    '''\n    return ''.join([i if 't"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res = []\n    for i in range(len(items)):\n        if items[i] == '(':\n            res.append(items[i])\n        elif items[i] == ')':\n            if len(res) > 0:\n                res.pop()\n            else:\n                res.append(items[i])\n    return res\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def remove_parenthesis_helper(i):\n        try:\n            return ''.join(list(filter(lambda x: x.isalpha(), i[:i.index('(')]))) + list(filter(lambda x: x.isalpha(), i[i.index('(')+1:]))) + i[i.index(')')+1:])\n        except:\n            return None\n    def remove_parenthesis_iter(i):\n        try:\n            return ''.join(list(filter(lambda x: x.isalpha(), i[:i.index('(')]))) + list(filter(lambda x: x.isalpha(), i[i.index('(')+1:]))) + i[i.index(')')+1:])\n        except:\n            return None\n    for i in items:\n        if i.startswith('(') and i.endswith(')'):\n            i = remove_parenthesis_iter(i)\n            if i!= None:\n                i = remove_parenthesis_helper(i)\n                if i!= None:\n                    items.remove(i)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    re_exp = '(\\(\\s*[^()]+\\)|(\\(([^()]*)\\))'\n    items = re.sub(re_exp, '', items)\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n) \n    #check for a negative input \n    if n < 0: \n        print(\"Error: n must be a non-negative integer\") \n        return \n    #check for a non-integer input \n    if n <= 0: \n        print(\"Error: n must be a positive integer\") \n        return \n    #make all other cases valid \n    if (n%2)!= 0: \n        print(\"Error: n must be even to find the nth non-diagonal\") \n        return \n    \n    #initialize the result \n    result = 0 \n    \n    #iterate from n/2 to sqrt(n) \n    for x in range(int(n/2)): \n        #check if x is odd \n        if x % 2 == 1: \n            #check if x-1 is the nth diagonal \n            if (x == (n-1)%(n/2)): \n                result = (result + 1) \n            else: \n                result = result + 1\n                #then x-1 is the nth diagonal \n                if x == (n-1)%(n/2): \n                    result = result + 1\n    #check if n is odd \n        if n%2 == 1: \n            #then n is even \n            if x == n/2: \n                result = (result + 1) \n            else: \n                result = result + 1\n                #then n is odd \n                if x == (n-1)%(n/2): \n                    result = result + 1\n    return result \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Base Case\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    \n    # Get the first element\n    first = n // 2\n    \n    # If the number is odd, return the sum of\n    # the first and the second element\n    if (n % 2) == 1:\n        return first + is_nonagonal(first+1)\n    \n    # If the number is even, return the sum of\n    # the first element and the second element\n    else:\n        return first + is_nonagonal(first+1) + is_nonagonal(first+2)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0: \n        return n / 2\n    else:\n        return (n + 1) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n+1) % 2 == 1\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return(n % 2!= 0)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n <= 1): \n        return n \n    elif (n % 2 == 0): \n        return is_nonagonal(n-1) \n    else: \n        return is_nonagonal((n-1)//2) \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1,n): \n        if (n-i) == i: \n            return i \n    else: \n        return 'No nonagonal number found'\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for x in range(1, n + 1):\n        if n % x == 0:\n            return x\n    return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 15\n    elif n == 8:\n        return 17\n    elif n == 9:\n        return 19\n    elif n == 10:\n        return 21\n    elif n == 11:\n        return 25\n    elif n == 12:\n        return 27\n    elif n == 13:\n        return 31\n    elif n == 14:\n        return 35\n    elif n == 15:\n        return 37\n    elif n == 16:\n        return 41\n    elif n == 17:\n        return 45\n    elif n == 18:\n        return 47\n    elif n == 19:\n        return 51\n    elif n == 20:\n        return 55\n    elif n == 21:\n        return 57\n    elif n == 22:\n        return 61\n    elif n == 23:\n        return 65\n    elif n == 24:\n        return 67\n    elif n == 25:\n        return 71\n    elif n == 26:\n        return 75\n    elif n == 27:\n        return 77\n    elif n == 28:\n        return 81\n    elif n == 29:\n        return 85\n    elif n == 30:\n        return 87\n    elif n == 31:\n        return 91\n    elif n == 32:\n        return 95\n    elif n == 33:\n        return 97\n    elif n == 34:\n        return 101\n    elif n == 35:\n        return 105\n    elif n == 36:\n        return 107\n    elif n == 37:\n        return 111\n    elif n == 38:\n        return 115\n    elif n == 39:\n        return 117\n    elif n == 40:\n        return 121\n    elif n == 41:\n        return 125\n    elif n == 42:\n        return 127\n    elif n == 43:\n        return 131\n    elif n == 44:\n        return 135\n    elif n == 45:\n        return 137\n    elif n == 46:\n        return 141\n    elif n == 47:\n        return 145\n    elif n == 48:\n        return 147\n    elif n == 49:\n        return 151\n    elif n == 50:\n        return 155\n    elif n == 51:\n        return 157\n    elif n == 52:\n        return 161\n    elif n == 53:\n        return 165\n    elif n == 54:\n        return 167\n    elif n == 55:\n        return 171\n    elif n == 56:\n        return 175\n    elif n == 57:\n        return 179\n    elif n == 58:\n        return 181\n    elif n == 59:\n        return 185\n    elif n == 60:\n        return 187\n    elif n == 61:\n        return 191\n    elif n == 62:\n        return 195\n    elif n == 63:\n        return 197\n    elif n == 64:\n        return 201\n    elif n == 65:\n        return 205\n    elif n == 66:\n        return 207\n    elif n == 67:\n        return 211\n    elif n == 68:\n        return 215\n    elif n == 69:\n        return 217\n    elif n == 70:\n        return 221\n    elif n == 71:\n        return 225\n    elif n == 72:\n        return 227\n    elif n == 73:\n        return 231\n    elif n == 74:\n        return 235\n    elif n == 75:\n        return 237\n    elif n == 76:\n        return 241\n    elif n == 77:\n        return 245\n    elif n == 78:\n        return 247\n    elif n == 79:\n        return 251\n    elif n == 80:\n        return 255\n    elif n == 81:\n        return 257\n    elif n == 82:\n        return 261\n    elif n == 83:\n        return 265\n    elif n == 84:\n        return 267\n    elif n == 85:\n        return 271\n    elif n == 86:\n        return 275\n    elif n == 87:\n        return 277\n    elif n == 88:\n        return 281\n    elif n == 89:\n        return 285\n    elif n == 90:\n        return 293\n    elif n == 91:\n        return 305\n    elif n == 92:\n        return 307\n    elif n == 93:\n        return 311\n    elif n == 94:\n        return 315\n    elif n == 95:\n        return 317\n    elif n == 96:\n        return 331\n    elif n == 97:\n        return 335\n    elif n == 98:\n        return337\n    elif n == 99:\n        return341\n    elif n == 100:\n        return 345\n    elif n == 101:\n        return347\n    elif n == 102:\n        return351\n    elif n == 103:\n        return355\n    elif n == 104:\n        return357\n    elif n == 105:\n        return361\n    elif n == 106:\n        return365\n    elif n == 107:\n        return369\n    elif n == 108:\n        return371\n    elif n == 109:\n        return375\n    elif n == 110:\n        return377\n    elif n == 111:\n        return381\n    elif n == 112:\n        return385\n    elif n == 113:\n        return387\n    elif n == 114:\n        return391\n    elif n == 115:\n        return395\n    elif n == 116:\n        return397\n    elif n == 117:\n        return401\n    elif n == 118:\n        return405\n    elif n == 119:\n        return407\n    elif n == 120:\n        return411\n    elif n == 121:\n        return415\n    elif n == 122:\n        return417\n    elif n == 123:\n        return421\n    elif n == 124:\n        return425\n    elif n == 125:\n        return427\n    elif n == 126:\n        return431\n    elif n == 127:\n        return435\n    elif n == 128:\n        return439\n    elif n == 129:\n        return441\n    elif n == 130:\n        return445\n    elif n == 131:\n        return447\n    elif n == 132:\n        return451\n    elif n == 133:\n        return465\n    elif n == 134:\n        return467\n    elif n == 135:\n        return471\n    elif n == 136:\n        return475\n    elif n == 137:\n        return479\n    elif n == 138:\n        return481\n    elif n == 139:\n        return485\n    elif n == 140:\n        return487\n    elif n == 141:\n        return491\n    elif n == 142:\n        return495\n    elif n == 143:\n        return499\n    elif n == 144:\n        return501\n    elif n == 145:\n        return515\n    elif n == 146:\n        return517\n    elif n == 147:\n        return519\n    elif n == 148:\n        return523\n    elif n == 149:\n        return525\n    elif n == 150:\n        return527\n    elif n == 151:\n        return531\n    elif n == 152:\n        return535\n    elif n == 153:\n        return537\n    elif n == 154:\n        return551\n    elif n == 155:\n        return555\n    elif n == 156:\n        return557\n    elif n == 157:\n        return561\n    elif n == 158:\n        return565\n    elif n == 159:\n        return567\n    elif n == 160:\n        return581\n    elif n == 161:\n        return585\n    elif n == 162:\n        return597\n    elif n == 163:\n        return601\n    elif n == 164:\n        return605\n    elif n == 165:\n        return607\n    elif n == 166:\n        return611\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    while (n - i) % 2 == 0:\n        i += 1\n    return i\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # TODO: use regex to do this\n    # text = text.lower()\n    # for w in text.split():\n    #     if 'z' in w:\n    #         if w.count('z') == 1 and w.index('z') < len(w)-1:\n    #             return False\n    #         elif w.count('z') == 2 and w.index('z') < len(w)-2:\n    #             return False\n    # return True\n    if 'z' in text:\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the end of the word.\n    '''\n    return re.search('[Zz]+', text[::-1])\n    \ndef text_match_wordz_middle_reverse(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text[::-1])\n    \ndef text_match_wordz_end_reverse(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text[::-1])\n    \ndef text_match_wordz_middle_reverse_reverse(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text[::-1])\n    \ndef text_match_wordz_middle_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text[::-1])\n    \ndef text_match_wordz_end_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text[::-1])\n    \ndef text_match_wordz_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text[::-1])\n    \ndef text_match_wordz_middle_no_match(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_no_match(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_middle_not_found_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_not_found_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_middle_not_found_reverse(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_not_found_reverse(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_middle_not_found_reverse_reverse(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_not_found_reverse_reverse(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_middle_not_found_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_not_found_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_middle_not_found_reverse_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_not_found_reverse_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_middle_not_found_reverse_reverse_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_not_found_reverse_reverse_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_middle_not_found_reverse_not_found_reverse_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_not_found_reverse_not_found_reverse_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_middle_not_found_reverse_not_found_reverse_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_not_found_reverse_not_found_reverse_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_middle_not_found_reverse_not_found_reverse_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_not_found_reverse_not_found_reverse_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_middle_not_found_not_found_not_found(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search('[Zz]+', text)\n    \ndef text_match_wordz_end_not"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_words=text.split()\n    wordz_start = ''\n    wordz_end = ''\n    for word in text_words:\n        if len(word)<=2:\n            return False\n        if word[0]=='z':\n            wordz_start = word\n        if word[-1]=='z':\n            wordz_end = word\n    if wordz_start and wordz_end:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match_flag = False\n    wordz = re.search('\\w+z', text)\n    if not wordz:\n        match_flag = True\n    if not wordz:\n        match_flag = False\n    if match_flag == True:\n        return wordz\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace('z', '').lower()\n    start = text.find('z')\n    end = len(text) - 1\n    if start == -1 and end == -1:\n        return True\n    elif start == -1:\n        return False\n    else:\n        return True if text[start:end] == 'z' else False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile('z|Z|Z$') # specific to the particular word\n    text_list = text.split(' ')\n    result = False\n    if text_list[0] == 'z':\n        for index, word in enumerate(text_list):\n            if pattern.search(word):\n                result = True\n                break\n    if result == False:\n        for index, word in enumerate(text_list):\n            if word[0:2] == 'Z':\n                result = True\n                break\n    return result\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_as_list=text.split(' ')\n    text_list=list(text_as_list)\n    if(text_list[0][0]=='z'):\n        text_list.pop(0)\n        text_list.pop(0)\n    else:\n        text_list.insert(0,'')\n    for word in text_list:\n        if(word[0]=='z'):\n            return False\n    return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match=re.match('z',text)\n    if match==None:\n        return False\n    else:\n        return True\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match=re.match('z',text)\n    if match==None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    try:\n        text_lower = text.lower()\n        text_with_z = text_lower.replace('z', 'A')\n        #print(text_with_z)\n        words = re.findall(r'[A-z]+', text_with_z)\n        for word in words:\n            if word[0] == 'z':\n                return False\n        return True\n    except:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # form a regex to search for z\n    search_word = r\"[a-zA-Z]+\"\n    text = text.lower()\n    # start searching for z, except the first letter\n    z_middle = 0\n    for letter in text:\n        if letter not in search_word:\n            z_middle += 1\n    # end searching for z\n    if z_middle!= 0:\n        return False\n    # find the last letter\n    z_middle = text.rfind(\"z\")\n    return True\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    strArr = []\n    for i in input: \n        strArr.append(str(i))\n    j = 0\n    for i in range(len(strArr)):\n        strArr[i] = strArr[i][::-1]\n        j += 1\n    if len(strArr) < k:\n        return \"Invalid Input\"\n    else:\n        return \"\".join(strArr[:k])\n    \nprint(reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 3))\nprint(reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 4))\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k - 1, -1, -1):\n        input[i] = input[i+1]\n    return input[1:]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Write your code here\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Your code goes here\n    arr = input \n    i = 0\n    #print(arr)\n    while i < len(arr):\n        #print(i, arr[i])\n        if i == len(arr)-1:\n            break\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n        i+=1\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    output = input[:]\n    output[0], output[len(output) - k - 1] = output[len(output) - k - 1], output[0]\n    \n    return output\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = []\n    \n    for i in range(len(input)):\n        arr.append(input[i])\n    \n    for i in range(len(arr) -1, -1, -1):\n        arr[i] = arr[i+1]\n    \n    print(\"Given array is\", arr)\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0:\n        return None\n    if k == 0:\n        return input\n    else:\n        return reverse_Array_Upto_K(input, k - 1) + [input[-1]] + reverse_Array_Upto_K(input[:-k], k - 1)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        print(input[i])\n    for i in range(k, len(input)):\n        print(input[i])\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    out = input\n    i = len(out)-1\n    while i>=0: \n        out.append(out[i])\n        i-=1\n    return out\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + test_dict\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # add the dictionary to the tuple\n    test_tup = test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup += (key, test_dict[key])\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Your code here\n    result = tuple(test_tup)\n    result += tuple(test_dict.values())\n    return result\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    return test_tup + test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = (key, value) + test_tup\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict.values())\n    return test_tup + test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict.keys():\n        if key in test_tup:\n            test_tup[key] = test_dict[key]\n        else:\n            test_tup[key] = test_dict[key]\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict.keys():\n        test_tup.append((key, test_dict[key]))\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = tuple([test_tup[0], value, test_tup[1]])\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    M = len(cost[0])\n    dp = [[0 for i in range(M+1)] for j in range(N+1)]\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            if cost[i-1][j-1] == 0:\n                continue\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[N][M] / N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    cost = [0] + cost\n    cost = sorted(cost, key=lambda x: x[0], reverse=False)\n    path = [i+1 for i in range(n)]\n    pathLength = [0] * (n+1)\n    pathLength[0] = cost[0][1]\n    for i in range(1, n):\n        pathLength[i] = pathLength[i-1] + cost[i][1]\n    return max(pathLength) / n\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_path = []\n    visited = []\n    current = []\n    total_cost = 0\n    for r in range(len(cost)):\n        for c in range(len(cost[r])):\n            if cost[r][c]!= 0:\n                current.append((c,r))\n                total_cost += cost[r][c]\n        if len(current) > 0:\n            total_cost /= len(current)\n            visited.append((current[0],r,current[0][0]))\n            max_path.append(visited)\n            current = []\n        else:\n            visited.append((current[0],r,c))\n            current = []\n    return total_cost\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    \n    # Initializing average path as 0\n    averagePath = 0\n    \n    # For all the cell\n    for i in range(N):\n        # Initialize average path as 0\n        averagePath = 0\n        \n        # For all the cell\n        for j in range(N):\n            # Compute sum of the cost at the cell\n            averagePath += cost[i][j]\n            \n        # Average path will be 1 / (number of visited cells)\n        averagePath = averagePath/N\n        \n        # If average path is greater than 1/N\n        # then average path will be the maximum one\n        if averagePath > 1/N:\n            averagePath = 1/N\n        \n        # Add the new average path to the existing average\n        averagePath += cost[i][j]\n        \n        # Add the path to the matrix\n        cost[i][j] = averagePath\n    \n    # Return the path matrix\n    return cost\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Implement your code here\n    # TODO: Start writing your code here\n    import sys\n    N = len(cost)\n    current = 0\n    max_average = 0\n    for i in range(N):\n        for j in range(N):\n            current += cost[i][j]\n        current = current/N\n        if current > max_average:\n            max_average = current\n    return max_average/N\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Fill in the rest\n    if len(cost) == 0:\n        return 0.0\n    else:\n        if len(cost) <= 2:\n            return max(cost)\n        else:\n            return (sum(cost)/len(cost))/2\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    \n    path = [0 for i in range(len(cost))]\n    prev_path = [0 for i in range(len(cost))]\n    i = 0\n    j = 0\n    count = 0\n    \n    while len(cost[i]) > 0:\n        val = cost[i][j]\n        if prev_path[j]!= -1:\n            count += 1\n        \n        prev_path[j] = i\n        \n        if val > prev_path[j]:\n            prev_path[j] = -1\n            i += 1\n        \n        j += 1\n        \n    for i in range(len(cost)):\n        if i == 0:\n            path[i] = cost[i][0]\n        elif i == len(cost) - 1:\n            path[i] = cost[i][len(cost[i]) - 1]\n        else:\n            path[i] = cost[i][i - 1] + cost[i][i + 1]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    res = [0 for i in range(n)]\n    maxAverage = 0\n    row = 0\n    col = 0\n    while (row < n and col < n):\n        # if the next cell has been visited\n        if (row == n-1 or col == n-1):\n            res[row] = cost[row][col]\n        if (cost[row][col] > maxAverage):\n            maxAverage = cost[row][col]\n            row = row + 1\n            col = col + 1\n        # if the next cell is on the left of the cell that we visited\n        elif (row == 0 or col < n):\n            res[row] = cost[row][col]\n            row = row + 1\n            col = col + 1\n        # if the next cell is on the right of the cell that we visited\n        elif (row < n-1 and col == n-1):\n            res[row] = cost[row][col]\n            row = row + 1\n            col = col + 1\n        # if the next cell is on the bottom right of the cell that we visited\n        elif (row < n-1 and col == 0):\n            res[row] = cost[row][col]\n            row = row + 1\n            col = col + 1\n        else:\n            row = row + 1\n            col = col + 1\n    return res"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialise an array to store the elements of the path\n    path = []\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # We need to initialize the matrix\n    # with zeros, and with dp_table (used for dp) as follows.\n    # dp_table[i][j] is the sum of the costs of the i-th cell visited at step j.\n    dp_table = [[0 for i in range(len(cost))] for j in range(len(cost))]\n    dp_table[0][0] = cost[0][0]\n    \n    # We need to initialize the queue\n    # for the dp_table.\n    queue = []\n    \n    # We need to initialize the first cell visited as 1, and all other cells as 0.\n    # These points will be the sum of the costs of the \n    # cell to the top-left and the cell to the bottom right cell.\n    # These points are the total sum of the costs of the path.\n    # We will use the index [0][0] to make the max sum\n    # since the dp_table[0][0] will be the first cell.\n    dp_table[0][0] = 1\n    queue.append([0, 0])\n    \n    # This is how we can calculate the max sum\n    # we will use the index [0][0] to make the max sum as we know\n    # that this cell is the first cell and the rest of cells are 0.\n    max_sum = 0\n    while len(queue) > 0:\n        max_sum += dp_table[len(queue) - 1][len(queue) - 1]\n        \n        # Pop the first cell from the queue, and append it to our queue\n        max_sum += queue.pop(0)[0]\n        \n        # Create a new queue for the cell to visit\n        # with that max_sum\n        queue.append([max_sum, len(cost) - 1])\n        \n    # Finally, we return the value of the max_sum\n    return max_sum\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        student_height = student[1]\n        if (student_height > h) and (student_weight > w):\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h < h_min and w < w_min:\n        print(f\"{h_min} m and {w_min} m are below the minimum weight\")\n        return None\n    return students\ndef load_file(filename):\n    '''\n    The input is given as - a file name. The function returns a list with the content of the file as a string.\n    '''\n    return open(filename).read().splitlines()\ndef write_file(filename,students):\n    '''\n    The input is given as - a file name. The function writes the students to the file.\n    '''\n    with open(filename,'w') as f:\n        for student in students:\n            f.write(student)\ndef calc_score(student):\n    '''\n    The input is given as - a student. The function returns a list with two floats representing the score of the student.\n    '''\n    #is the student weight greater than or equal to the minimum weight of the students\n    #has the lowest weight\n    if student[2] >= w_min:\n        #is the student height greater than or equal to the minimum height of the students\n        if student[0] >= h_min:\n            #is the student weight greater than or equal to the minimum weight of the students\n            if student[2] >= w_min and student[0] >= h_min:\n                return [student[0],student[1]+100,student[2]]\ndef main():\n    '''\n    The main function prints the student list for the students in the file. The function filters the student list to only have the key (name, and integer score). The function writes the result to a file.\n    '''\n    student_list = load_file('students.txt')\n    filtered_list = filter_data(student_list,h_min,w_min)\n    if filtered_list!= None:\n        write_file('students.txt',filtered_list)\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h > 0 and w > 0 and w >= min(h,w):\n        return students\n    else:\n        return None\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h > w:\n        return None\n    else:\n        for name in students:\n            student_height = students[name][1]\n            if student_height > h:\n                students.pop(name)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_data = {\n        'student_name': [],\n        'student_height': [],\n        'student_weight': [],\n        }\n    for student in students:\n        if student['student_height'] >= h and student['student_weight'] >= w:\n            filter_data['student_name'].append(student['student_name'])\n            filter_data['student_height'].append(student['student_height'])\n            filter_data['student_weight'].append(student['student_weight'])\n    return filter_data\n    \n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    with open('data.txt','r') as f:\n        for l in f:\n            data = l.split(',')\n            if data[1] == h and data[3] == w:\n                print(data[0])\n    print(\"Success!\")\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = []\n    for student in students:\n        if student[1] > h and student[2] > w:\n            filtered_students.append(student)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if int(v[1])>h and int(v[2])>w}\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    lst = []\n    for name in students.values():\n        if float(name.student_height) > h and float(name.student_weight) > w:\n            lst.append(name)\n    return lst\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    temp_dict = {}\n    for i in range(len(nums1)):\n        if nums1[i] in temp_dict:\n            temp_dict[nums1[i]] += 1\n        else:\n            temp_dict[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in temp_dict:\n            temp_dict[nums2[i]] += 1\n        else:\n            temp_dict[nums2[i]] = 1\n    return temp_dict\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_nums = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                same_nums = same_nums + 1\n    return same_nums\n    \ndef is_palindrome(num):\n    if num < 10:\n        return True\n    else:\n        return num % 10 == 0 and is_palindrome(num // 10)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = len(nums1)\n    i = 0\n    j = 0\n    k = 0\n    m = 0\n    while i < n:\n        if nums1[i]!= nums2[i]:\n            m = m + 1\n            i = i + 1\n            while j < n and nums1[j]!= nums2[j]:\n                j = j + 1\n            j = j + 1\n    return m\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count_1 = 0\n    count_2 = 0\n    nums_1 = sorted(nums1)\n    nums_2 = sorted(nums2)\n    for i in range(len(nums_1)):\n        if nums_1[i] == nums_2[i]:\n            count_1 += 1\n        else:\n            return count_1\n    return count_1\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    total = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                total += 1\n    return total\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #solution:\n    #If you want to use the python function, the solution would be:\n    #for i in range(len(nums1)):\n        #for j in range(len(nums2)):\n            #if nums1[i] == nums2[j]:\n                #count = count + 1\n    #solution:\n    #For the full list of pairs:\n    #For the first list:\n    #For the second list:\n    #For the second list:\n    #for i in range(len(nums1)):\n        #for j in range(len(nums2)):\n            #if nums1[i] == nums2[j]:\n                #count = count + 1\n    count_count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count_count = count_count + 1\n    return count_count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    # count the pairs\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums1)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(map(lambda x,y:eq(x,y),nums1,nums2))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_pair = 0\n    temp = 0\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                temp = nums1[i]\n                temp2 = nums2[j]\n                if temp!= temp2:\n                    same_pair += 1\n    return same_pair\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base > 0:\n        sum += base % 10\n        base = int(base / 10)\n    return sum + power - sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base > 0:\n        sum += base % 10\n        base = int(base / 10)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while(base!=0):\n        sum += base%10\n        base = int(base/10)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 1 or base < 1:\n        return 0\n    else:\n        return base ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == '0' or power == 0:\n        return 0\n    elif power == 1 or power == 3:\n        return 1\n    elif power == 2 or power == 3:\n        return 1\n    else:\n        return base + power_base_sum(base, power - 3)\n        # pass\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(len(base)):\n        result = result + int(base[i]) ** power\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base > 0:\n        digit = base % 10\n        base = base // 10\n        sum += digit\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    def power_mod(base, power):\n        if power == 0:\n            return 1\n        if power == 1:\n            return base\n        return base % power_mod(base, power - 1)\n    return power_mod(base, power)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = int(power)\n    base = int(base)\n    sum = 0\n    while base > 0:\n        sum += base % 10\n        base = int(base/10)\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert(type(base) == str or type(base) == int), \"base must be a string or an integer\"\n    assert(type(power) == int), \"power must be an integer\"\n    base_sum = 0\n    while(power > 0):\n        base_sum += int(base[-1])\n        power -= 1\n    return base_sum\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = []\n    for i in text1:\n        if i =='':\n            result.append(i)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    values = re.findall('[\"\\']{1}(\\w+[^\"])', text1)\n    return values\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(\"\\\"(.*?)\\\"\",text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # all values will be a list\n    quotation_values = []\n    text2 = text1.lower().replace(' ', '')\n    # remove all whitespace\n    text2 = re.sub('\\s+','', text2)\n    # split the string into a list of words\n    words = text2.split(' ')\n    # loop through the words list\n    for word in words:\n        # loop through the words list\n        if word in quotation_values:\n            # add the word to the list\n            quotation_values.append(word)\n    return quotation_values\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    data = re.search('(?<=\\w)(\"|\\')(.+?)(?=\\w)', text1)\n    if data == None:\n        print('bad_input')\n    else:\n        data = data.group(0)\n        data = data.replace('\\t', '')\n        data = data.replace('\\\\', '')\n        data = data.replace('\"', '')\n        data = data.replace('\\n', '')\n        data = data.replace('(', '')\n        data = data.replace(')', '')\n        data = data.replace('.', '')\n        data = data.replace(',', '')\n        return data\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    matcher = re.compile(\"[\\\"\\']([^\\\"\\'])[\\\"\\'])\")\n    values = matcher.findall(text1)\n    values = [v[1:-1] for v in values]\n    return values\n    \ndef prepare_data(data):\n    '''\n    Write a function to prepare the data.\n    data is a dictionary that has key as \"id\" and value is a list of 2 elements (id, value) for each record.\n    '''\n    temp = {}\n    for i in data:\n        for j in range(len(data[i])):\n            temp[data[i][j][0]] = data[i][j][1]\n    return temp\n    \ndef create_time_list(start, end):\n    '''\n    Create a list of time from start to end.\n    '''\n    time_list = []\n    for i in range(int((end-start)*10)):\n        time_list.append(str(start+i))\n    return time_list\n    \ndef remove_list(list1, list2):\n    '''\n    Remove lists\n    list1 = []\n    list2 = []\n    '''\n    list1 = [s for s in list1 if s not in list2]\n    return list1, list2\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    n = 0\n    while n < len(text1):\n        if text1[n] == \" \":\n            print(text1[n])\n            n += 1\n        else:\n            break\n    return text1[n:]\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_list = re.findall(r'\"([^\"]*)\"', text1)\n    return quotation_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = re.compile(r'\"([^\"]+)\"')\n    return quotation_pattern.findall(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r\"[\\w\\s,.!\u201c\u201d]\", text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output = ()\n    for i in range(len(test_tup)):\n        output += (test_tup[i] * test_tup[i + 1])\n    return output\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)):\n        result = result + (test_tup[i] * test_tup[i+1])\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return test_tup[0] * test_tup[1]\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    s = 0\n    for i in range(len(test_tup)):\n        s += test_tup[i] * (i+1)\n    return s\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i * j for i, j in zip(test_tup[0], test_tup[1])])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_1 = test_tup[0]\n    t_2 = test_tup[1]\n    t_3 = test_tup[2]\n    t_4 = test_tup[3]\n    t_5 = test_tup[4]\n    t_6 = test_tup[5]\n    t_7 = test_tup[6]\n    t_8 = test_tup[7]\n    t_9 = test_tup[8]\n    t_10 = test_tup[9]\n    t_11 = test_tup[10]\n    t_12 = test_tup[11]\n    t_13 = test_tup[12]\n    t_14 = test_tup[13]\n    t_15 = test_tup[14]\n    t_16 = test_tup[15]\n    t_17 = test_tup[16]\n    t_18 = test_tup[17]\n    t_19 = test_tup[18]\n    t_20 = test_tup[19]\n    t_21 = test_tup[20]\n    t_22 = test_tup[21]\n    t_23 = test_tup[22]\n    t_24 = test_tup[23]\n    t_25 = test_tup[24]\n    t_26 = test_tup[25]\n    t_27 = test_tup[26]\n    t_28 = test_tup[27]\n    t_29 = test_tup[28]\n    t_30 = test_tup[29]\n    t_31 = test_tup[30]\n    t_32 = test_tup[31]\n    t_33 = test_tup[32]\n    t_34 = test_tup[33]\n    t_35 = test_tup[34]\n    t_36 = test_tup[35]\n    t_37 = test_tup[36]\n    t_38 = test_tup[37]\n    t_39 = test_tup[38]\n    t_40 = test_tup[39]\n    t_41 = test_tup[40]\n    t_42 = test_tup[41]\n    t_43 = test_tup[42]\n    t_44 = test_tup[43]\n    t_45 = test_tup[44]\n    t_46 = test_tup[45]\n    t_47 = test_tup[46]\n    t_48 = test_tup[47]\n    t_49 = test_tup[48]\n    t_50 = test_tup[49]\n    t_51 = test_tup[50]\n    t_52 = test_tup[51]\n    t_53 = test_tup[52]\n    t_54 = test_tup[53]\n    t_55 = test_tup[54]\n    t_56 = test_tup[55]\n    t_57 = test_tup[56]\n    t_58 = test_tup[57]\n    t_59 = test_tup[58]\n    t_60 = test_tup[59]\n    t_61 = test_tup[60]\n    t_62 = test_tup[61]\n    t_63 = test_tup[62]\n    t_64 = test_tup[63]\n    t_65 = test_tup[64]\n    t_66 = test_tup[65]\n    t_67 = test_tup[66]\n    t_68 = test_tup[67]\n    t_69 = test_tup[68]\n    t_70 = test_tup[69]\n    t_71 = test_tup[70]\n    t_72 = test_tup[71]\n    t_73 = test_tup[72]\n    t_74 = test_tup[73]\n    t_75 = test_tup[74]\n    t_76 = test_tup[75]\n    t_77 = test_tup[76]\n    t_78 = test_tup[77]\n    t_79 = test_tup[78]\n    t_80 = test_tup[79]\n    t_81 = test_tup[80]\n    t_82 = test_tup[81]\n    t_83 = test_tup[82]\n    t_84 = test_tup[83]\n    t_85 = test_tup[84]\n    t_86 = test_tup[85]\n    t_87 = test_tup[86]\n    t_88 = test_tup[87]\n    t_89 = test_tup[88]\n    t_90 = test_tup[89]\n    t_91 = test_tup[90]\n    t_92 = test_tup[91]\n    t_93 = test_tup[92]\n    t_94 = test_tup[93]\n    t_95 = test_tup[94]\n    t_96 = test_tup[95]\n    t_97 = test_tup[96]\n    t_98 = test_tup[97]\n    t_99 = test_tup[98]\n    t_100 = test_tup[99]\n    t_101 = test_tup[100]\n    t_102 = test_tup[101]\n    t_103 = test_tup[102]\n    t_104 = test_tup[103]\n    t_105 = test_tup[104]\n    t_106 = test_tup[105]\n    t_107 = test_tup[106]\n    t_108 = test_tup[107]\n    t_109 = test_tup[108]\n    t_110 = test_tup[109]\n    t_111 = test_tup[110]\n    t_112 = test_tup[111]\n    t_113 = test_tup[112]\n    t_114 = test_tup[113]\n    t_115 = test_tup[114]\n    t_116 = test_tup[115]\n    t_117 = test_tup[116]\n    t_118 = test_tup[117]\n    t_119 = test_tup[118]\n    t_120 = test_tup[119]\n    t_121 = test_tup[120]\n    t_122 = test_tup[121]\n    t_123 = test_tup[122]\n    t_124 = test_tup[123]\n    t_125 = test_tup[124]\n    t_126 = test_tup[125]\n    t_127 = test_tup[126]\n    t_128 = test_tup[127]\n    t_129 = test_tup[128]\n    t_130 = test_tup[129]\n    t_131 = test_tup[130]\n    t_132 = test_tup[131]\n    t_133 = test_tup[132]\n    t_134 = test_tup[133]\n    t_135 = test_tup[134]\n    t_136 = test_tup[135]\n    t_137 = test_tup[136]\n    t_138 = test_tup[137]\n    t_139 = test_tup[138]\n    t_140 = test_tup[139]\n    t_141 = test_tup[140]\n    t_142 = test_tup[141]\n    t_143 = test_tup[142]\n    t_144 = test_tup[143]\n    t_145 = test_tup[144]\n    t_146 = test_tup[145]\n    t_147 = test_tup[146]\n    t_148 = test_tup[147]\n    t_149 = test_tup[148]\n    t_150 = test_tup[149]\n    t_151 = test_tup[150]\n    t_152 = test_tup[15"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = []\n    for i in range(len(test_tup)):\n        res.append(test_tup[i] * test_tup[i+1])\n    return tuple(res)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)):\n        res = res + (test_tup[i] * test_tup[i+1])\n    return res\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [sum(lst1[i]+lst2[i]) for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    summ = 0\n    for i in range(len(lst1)):\n        summ += lst1[i]\n    for i in range(len(lst2)):\n        summ += lst2[i]\n    return summ\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    for i in lst1:\n        for j in lst2:\n            sum_lst.append(i+j)\n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst_sum = [0]*(len(lst1)+len(lst2))\n    for i in range(len(lst1)):\n        lst_sum[i+len(lst2)] = lst1[i] + lst2[i]\n    return lst_sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst2[i])\n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #write your code here\n    i = 0\n    sum = 0\n    while i<len(lst1):\n        sum = sum + lst1[i]\n        i = i + 1\n    i = 0\n    while i<len(lst2):\n        sum = sum + lst2[i]\n        i = i + 1\n    return sum\nlst1 = [1, 2, 3, 4, 5]\nlst2 = [5, 4, 3, 2, 1]\nprint(sum_list(lst1,lst2))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    l = len(nums)\n    if l <= 1:\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(nums)"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [ x for x in nums if seen_add(x) ]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    for idx, num in enumerate(nums):\n        if num in seen:\n            seen.remove(num)\n            nums[idx] = num\n        else:\n            seen.add(num)\n    return seen\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # TODO: Write the solution!\n    # Hint: You can also use a recursion solution\n    # https://www.geeksforgeeks.org/python-solution/\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    duplicate_list = []\n    for i, el in enumerate(nums):\n        if i!= 0 and el!= nums[i-1]:\n            duplicate_list.append(el)\n    return duplicate_list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a dictionary and for each element, if it's present, update the dictionary with the number.\n    # return list of dictionaries\n    # e.g. {3: 2, 1: 3, 0: 1}\n    # return {3: 2, 1: 3, 0: 1}\n    dict = {}\n    # iterate over the list.\n    for i in nums:\n        # if the element exists in the dictionary, remove it, and append to a new dictionary.\n        if i in dict:\n            dict[i] = dict[i] + 1\n        else:\n            dict[i] = 1\n    # return a list of dictionaries.\n    return [dict]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    count = 0\n    for i, v in enumerate(nums):\n        if v == v[-1]:\n            count += 1\n        else:\n            nums[i] = v\n            count -= 1\n    return count == 0\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #remove duplicates from the list\n    duplicates = []\n    for i in range(len(nums)):\n        if nums[i] not in duplicates:\n            duplicates.append(nums[i])\n    return duplicates\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #initialize a hash table to store all the duplicate numbers\n    hash_table = {}\n    #initialize an empty list to store all the duplicate numbers\n    duplicate_numbers = []\n    #iterate over the list in reverse order\n    for i in range(len(nums) - 1, -1, -1):\n        #if the current index of the list is greater than the last index in the hash table\n        if nums[i] in hash_table:\n            #iterate over the list in reverse order\n            for j in range(i + 1, len(nums)):\n                #if the current element is the same as the hash_table, add it to the duplicate_numbers list\n                if nums[j] == nums[i]:\n                    duplicate_numbers.append(nums[j])\n                    #remove the duplicate_number\n                    nums[j] = nums[i]\n        #add the current element to the hash table\n        hash_table[nums[i]] = True\n    return duplicate_numbers\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    m = 0.5*r*math.pi\n    phi = math.atan((h+r)/(1-m))\n    S = (math.pi*(r**2)*math.sin(phi)*math.sin(phi))**2\n    S+= (1/m)\n    return S\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r*r)**(-1/3)*(math.e)**(-1/3)*(h*h)/math.factorial(3)\ndef fur_cones(t,h):\n    '''\n    Write a function to find the volume of a furcone given the air density h.\n    '''\n    return math.pi*(1/4)*(t*h)**(-1/3)*(math.e)**(-1/3)*(math.factorial(3))\ndef simple_cones(h):\n    '''\n    Write a function that calculates the simple cone volume given the air density h.\n    '''\n    return math.pi*(1/4)*(h*h)**(-1/3)*(math.factorial(3))\ndef ellipsoid_cones(a,b,c,d):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c+d*d)**(-1/3)*(math.factorial(3))\ndef cylinder_cones(r,h):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses r and the height h.\n    '''\n    return math.pi*(r*r)**(-1/3)*(math.e)**(-1/3)*(h*h)/math.factorial(3)\ndef sphere_cones(r,h):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses r and the height h.\n    '''\n    return math.pi*(r*r)**(-1/3)*(math.e)**(-1/3)*(math.factorial(3))\ndef polygon_cones(a,b,c,d):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c+d*d)**(-1/3)*(math.factorial(3))\ndef quadrilateral_cones(a,b,c,d):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c+d*d)**(-1/3)*(math.factorial(3))\ndef rectangle_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a,b,c):\n    '''\n    Write a function to calculate the simple cone volume given the radiuses a, b and c.\n    '''\n    return math.pi*(a*a+b*b+c*c)**(-1/3)*(math.factorial(3))\ndef parallelogram_cones(a"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r*(1-math.cos(math.radians(90-h/2)))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surfarea = 0\n    if h == 0:\n        return 0\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Write your code here\n    return r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    r=round(r,0)\n    if (r%1)==0:\n        r=r/2\n    else:\n        r=r*2\n    if(h>0):\n        h=h*math.pi/180\n    else:\n        h=-h*math.pi/180\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #this formula is a lot, but you can use it, because it is more readable.\n    return (4*math.pi*r**3)*h*math.tan(h/2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = h*math.sqrt(math.pow(r,2)+math.pow(h,2))\n    return s\ndef surface_surface_area(r,h):\n    '''\n    Write a function to calculate the surface surface area.\n    '''\n    s = r*r*math.sqrt(math.pow(r,2)+math.pow(h,2))\n    return s\ndef type_of_fibre(p,f):\n    '''\n    Write a function to return a type of fibre.\n    '''\n    a = math.pow(f,2)/math.pow(p,2)\n    return a\ndef up_down_direction(s,r,h):\n    '''\n    Write a function to calculate the direction of the fibre surface.\n    '''\n    f = math.pow(s,2)/math.pow(r,2)\n    f = 1/f\n    m = math.sqrt(1+f)\n    b = math.sqrt(1-f)\n    theta = m*h\n    if f >= 0:\n        theta = m*(1-h)*math.acos(f)\n    if f < 0:\n        theta = m*(1+h)*math.acos(f)\n    up = theta*math.cos(theta)\n    down = theta*math.sin(theta)\n    return up,down\ndef type_of_fibre_cone(s,r,h):\n    '''\n    Write a function to return a type of fibre.\n    '''\n    f = math.pow(s,2)/math.pow(r,2)\n    f = 1/f\n    m = math.sqrt(1+f)\n    b = math.sqrt(1-f)\n    theta = m*h\n    if f >= 0:\n        theta = m*(1-h)*math.acos(f)\n    if f < 0:\n        theta = m*(1+h)*math.acos(f)\n    up = theta*math.cos(theta)\n    down = theta*math.sin(theta)\n    return up,down\ndef type_of_surface_cone(s,r,h):\n    '''\n    Write a function to return a type of fibre.\n    '''\n    f = math.pow(s,2)/math.pow(r,2)\n    f = 1/f\n    m = math.sqrt(1+f)\n    b = math.sqrt(1-f)\n    theta = m*h\n    if f >= 0:\n        theta = m*(1-h)*math.acos(f)\n    if f < 0:\n        theta = m*(1+h)*math.acos(f)\n    up = theta*math.sin(theta)\n    down = theta*math.cos(theta)\n    return up,down\ndef type_of_surface_cone_2(s,r,h):\n    '''\n    Write a function to return a type of fibre.\n    '''\n    f = math.pow(s,2)/math.pow(r,2)\n    f = 1/f\n    m = math.sqrt(1+f)\n    b = math.sqrt(1-f)\n    theta = m*h\n    if f >= 0:\n        theta = m*(1-h)*math.acos(f)\n    if f < 0:\n        theta = m*(1+h)*math.acos(f)\n    up = theta*math.sin(theta)\n    down = theta*math.cos(theta)\n    return up,down\ndef type_of_surface_cone_3(s,r,h):\n    '''\n    Write a function to return a type of fibre.\n    '''\n    f = math.pow(s,2)/math.pow(r,2)\n    f = 1/f\n    m = math.sqrt(1+f)\n    b = math.sqrt(1-f)\n    theta = m*h\n    if f >= 0:\n        theta = m*(1-h)*math.acos(f)\n    if f < 0:\n        theta = m*(1+h)*math.acos(f)\n    up = theta*math.sin(theta)\n    down = theta*math.cos(theta)\n    return up,down\ndef type_of_surface_cone_4(s,r,h):\n    '''\n    Write a function to return a type of fibre.\n    '''\n    f = math.pow(s,2)/math.pow(r,2)\n    f = 1/f\n    m = math.sqrt(1+f)\n    b = math.sqrt(1-f)\n    theta = m*h\n    if f >= 0:\n        theta = m*(1-h)*math.acos(f)\n    if f < 0:\n        theta = m*(1+h)*math.acos(f)\n    up = theta*math.sin(theta)\n    down = theta*math.cos(theta)\n    return up,down\ndef type_of_surface_cone_5(s,r,h):\n    '''\n    Write a function to return a type of fibre.\n    '''\n    f = math.pow(s,2)/math.pow(r,2)\n    f = 1/f\n    m = math.sqrt(1+f)\n    b = math.sqrt(1-f)\n    theta = m*h\n    if f >= 0:\n        theta = m*(1-h)*math.acos(f)\n    if f < 0:\n        theta = m*(1+h)*math.acos(f)\n    up = theta*math.sin(theta)\n    down = theta*math.cos(theta)\n    return up,down\ndef type_of_surface_cone_6(s,r,h):\n    '''\n    Write a function to return a type of fibre.\n    '''\n    f = math.pow(s,2)/math.pow(r,2)\n    f = 1/f\n    m = math.sqrt(1+f)\n    b = math.sqrt(1-f)\n    theta = m*h\n    if f >= 0:\n        theta = m*(1-h)*math.acos(f)\n    if f < 0:\n        theta = m*(1+h)*math.acos(f)\n    up = theta*math.sin(theta)\n    down = theta*math.cos(theta)\n    return up,down\ndef type_of_surface_cone_7(s,r,h):\n    '''\n    Write a function to return a type of fibre.\n    '''\n    f = math.pow(s,2)/math.pow(r,2)\n    f = 1/f\n    m = math.sqrt(1+f)\n    b = math.sqrt(1-f)\n    theta = m*h\n    if f >= 0:\n        theta = m*(1-h)*math.acos(f)\n    if f < 0:\n        theta = m*(1+h)*math.acos(f)\n    up = theta*math.sin(theta)\n    down = theta*math.cos(theta)\n    return up,down\ndef type_of_surface_cone_8(s,r,h):\n    '''\n    Write a function to return a type of fibre.\n    '''\n    f = math.pow(s,2)/math.pow(r,2)\n    f = 1/f\n    m = math.sqrt(1+f)\n    b = math.sqrt(1-f)\n    theta = m*h\n    if f >= 0:\n        theta = m*(1-h)*math.acos(f)\n    if f < 0:\n        theta = m*(1+h)*math.acos(f)\n    up = theta*math.si"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a= (math.pi*r*(h-r))\n    return a\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Using two variables (left and right) to calculate the midpoints of both the top and bottom surfaces\n    m1 = 0.5 * math.sqrt(r**2 + h**2)\n    m2 = 0.5 * math.sqrt(r**2 - h**2)\n    # Using the formula to calculate the area of the cone\n    s = (m1**2 + m2**2 + 2 * m1 * m2 * math.cos(math.radians(45)))**0.5\n    # Using the formula to calculate the parallel angle\n    p = math.degrees(math.atan(s / (m1 + m2)))\n    # Using the formula to calculate the base angle\n    b = math.degrees(math.atan(s / (m2 + m1)))\n    # Use the formula to calculate the rear angle\n    r = math.degrees(math.atan(s / (m1 - m2)))\n    return s,p,b,r\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('\\n',' ').replace('\\t',' ').replace('.',':').replace(',','::').replace(' ',':').replace('  ','::')\n    text = re.sub(r'\\s+',':',text)\n    text = re.sub(r'[^a-zA-Z\\s]',r':',text)\n    text = re.sub(r'[ ]{1}',':',text)\n    text = re.sub(r'[ ]{1,}',':',text)\n    text = re.sub(r'[ ]{1,}',':',text)\n    text = re.sub(r'[ ]{1,}',':',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace('-',':')\n    text = text.replace(',',';')\n    text = text.replace(';',';')\n    text = text.replace('&',':')\n    text = text.replace('&',':')\n    text = text.replace('!',';')\n    text = text.replace('!',';')\n    text = text.replace('%',';')\n    text = text.replace('%',';')\n    text = text.replace('(','(')\n    text = text.replace(')',')')\n    text = text.replace('{','{')\n    text = text.replace('}','}')\n    text = text.replace('[','[')\n    text = text.replace(']',']')\n    text = text.replace('<','<')\n    text = text.replace('<','<')\n    text = text.replace('>','>')\n    text = text.replace('>','>')\n    text = text.replace('.','.')\n    text = text.replace('!','!')\n    text = text.replace('!','!')\n    text = text.replace('\"','\"')\n    text = text.replace('\\'','\\'')\n    return text\ndef replace_punctuation(text):\n    '''\n    Write a function to replace all occurrences of punctuation with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s\\']',\":\",text)\n    text = re.sub(r'\\W+',\" \",text)\n    text = text.replace(\"\u201c\",\"'\")\n    text = text.replace(\"\u201d\",\"'\")\n    text = text.replace(\"'\",\"'\")\n    text = text.replace(\"`\",\"'\")\n    text = text.replace(\"{\",\"{\")\n    text = text.replace(\"}\",\"}\")\n    text = text.replace(\"[\",\"[\")\n    text = text.replace(\"]\",\"]\")\n    text = text.replace(\"<\",\"<\")\n    text = text.replace(\"<\",\"<\")\n    text = text.replace(\">\",\">\")\n    text = text.replace(\">\",\">\")\n    text = text.replace(\"-\",\":\")\n    text = text.replace(\"-\",\":\")\n    text = text.replace(\",\",\";\")\n    text = text.replace(\".','\")\n    text = text.replace(\".'\",\":\")\n    text = text.replace(\"'\",\";\")\n    text = text.replace('!',';')\n    text = text.replace('!',';')\n    text = text.replace('%',';')\n    text = text.replace('%',';')\n    text = text.replace('(','(')\n    text = text.replace(')',')')\n    text = text.replace('{','{')\n    text = text.replace('}','}')\n    text = text.replace('[','[')\n    text = text.replace(']',']')\n    text = text.replace('<','<')\n    text = text.replace('<','<')\n    text = text.replace('>','>')\n    text = text.replace('>','>')\n    text = text.replace('.','.')\n    text = text.replace('!','!')\n    text = text.replace('!','!')\n    text = text.replace('\"','\"')\n    text = text.replace('\\'','\\'')\n    return text\ndef remove_stopwords(text):\n    '''\n    Write a function to remove stopwords.\n    '''\n    text = text.lower()\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub(\"(?<=\\w)\\b\\w+\\b\",\" \",text)\n    text = re.sub("
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\n+', '\\n', text)\n    text = re.sub(r'\\w*:\\w*', ':', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.(\\w+)', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\.\\w*', '.', text)\n    text = re.sub(r'\\w*\\"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    regex = re.compile('[.|,|\\(|\\)|\\:|\\)|\\.|\\:\\)|\\(|\\)|\\:]')\n    text = regex.sub(':', text)\n    text = regex.sub('.', text)\n    text = regex.sub('\\n', '\\n')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = re.sub(' +', ':', text)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':', result)\n    result = re.sub(' +', ':'"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # initialize replacement dictionary\n    replacements = {\n        ' ': ':',\n        '\\n': ':',\n        '\\t': ':',\n        '\\r': ':',\n        '\\f': ':',\n        '.': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201e': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201e': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':',\n        '\u201e': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u201d': ':',\n        '\u201a': ':',\n        '\u201c': ':',\n        '\u2019': ':',\n        '\u2018': ':'"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub('[ ]', ':', text)\n    text = re.sub("
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':').replace(',',':').replace('.',':')\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[^A-Za-z0-9_.]',':',text)\n    text = re.sub('\\s+',' : ',text)\n    text = re.sub('\\d+',' : ',text)\n    text = re.sub('\\w+',' : ',text)\n    text = re.sub('\\n',' : ',text)\n    text = re.sub('\\n','\\n',text)\n    text = re.sub('\\.',' : ',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace('\\n','').replace('\\t','').replace('.', ':').replace(',', ':')\n    text = text.replace(';', ':')\n    text = text.replace('$', ':')\n    text = text.replace('!', ':')\n    text = text.replace('?', ':')\n    text = text.replace('*', ':')\n    text = text.replace('(', ':')\n    text = text.replace(')', ':')\n    text = text.replace('+', ':')\n    text = text.replace('<', ':')\n    text = text.replace('>', ':')\n    text = text.replace('=', ':')\n    text = text.replace('\"', ':')\n    text = text.replace(\"'\", \":\")\n    text = text.replace(\"\\\\n\", \":\")\n    text = text.replace(\"\\\\t\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\,\", \":\")\n    text = text.replace(\"\\\\,\", \":\")\n    text = text.replace(\"\\\\,\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\,\", \":\")\n    text = text.replace(\"\\\\,\", \":\")\n    text = text.replace(\"\\\\,\", \":\")\n    text = text.replace(\"\\\\,\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\")\n    text = text.replace(\"\\\\.\", \":\""
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A)-1\n    while left<=right:\n        mid = int((left+right)/2)\n        if A[mid]==x:\n            return mid\n        elif A[mid]<x:\n            left = mid+1\n        else:\n            right = mid-1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = -1\n    last = len(A) - 1\n    for i in range(len(A)):\n        if A[i] == x:\n            if i == 0:\n                first = i\n            else:\n                last = i - 1\n    return first\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    # check if element is a number\n    if A[0] == x:\n        return 0\n    \n    # get the length of the array\n    len_A = len(A)\n    \n    # find the index of x\n    idx = 0\n    for i in range(len_A):\n        if A[i] < x:\n            idx += 1\n        else:\n            break\n    \n    # find the idx\n    for i in range(idx, len_A):\n        if A[i] == x:\n            return i\n    \n    # return -1 if there is no matching number\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Let's use a linear search to find the first occurence\n    left = 0\n    right = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # This is the O(n) solution\n    # We create a hash table of elements to hash the value and the index of the element\n    # Then we search the hash table for the first occurrence of the value\n    # If the value is not present, then return -1.\n    # This function is O(log(n))\n    \n    # First fill the hash table of the elements\n    table = {}\n    for i,v in enumerate(A):\n        if v == x:\n            return i\n        \n        if v in table:\n            # We know the index of the first occurrence of the element\n            return table[v]\n        \n        # We search the hash table for the first occurrence of the value\n        j = i + 1\n        while j < len(A) and A[j] < v:\n            table[v] = j\n            j += 1\n    \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return None\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    if n == 0:\n        return -1\n    for i in range(n):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x in A:\n        return A.index(x)\n    else:\n        return None\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Write your code here.\n    first_index = 0\n    first_occurrence = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            first_index = i\n            first_occurrence = A[i]\n            break\n    return first_index, first_occurrence\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    if n == 0:\n        return -1\n    if A[n-1] == x:\n        return n-1\n    if A[0] == x:\n        return 0\n    mid = int(n/2)\n    if A[mid] == x:\n        return mid\n    if A[mid] > x:\n        return find_first_occurrence(A, x)\n    else:\n        return find_first_occurrence(A, x) + 1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    # Create an array to store the sum of all possible subarrays\n    sum_all_subarrays = []\n    # Traverse through all subarrays and store their sum\n    for i in range(len(arr)):\n        sum_all_subarrays.append(sum(arr[i:]))\n    # If all subarrays sums are equal, return sum of all possible subarrays\n    if sum(sum_all_subarrays) == sum(sum_all_subarrays):\n        total = sum(sum_all_subarrays)\n    # If sums are not equal, return None\n    else:\n        return None\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Base Case\n    if len(arr) == 1:\n        return arr[0]\n    # Recursive Cases\n    if arr[0]!= 0:\n        return arr[0]\n    return sum(arr[1:])\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum += arr[i]*arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == 0:\n                pass\n            else:\n                s += arr[i][j]\n    return s\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    return sum(sum(range(len(arr) + 1), i) * arr[i] for i in range(len(arr)))\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)-1):\n        #print(arr[i])\n        result += arr[i]*(i+1)\n    return result\n    \n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    def Sum_of_Subarrays(arr):\n        prod=1\n        for i in range(len(arr)):\n            prod=prod*arr[i]\n        return prod\n    res=0\n    for i in range(len(arr)):\n        if Sum_of_Subarrays(arr[:i])!=0:\n            res+=Sum_of_Subarrays(arr[:i])\n    return res\narr=[1,2,3]\nprint(sum_Of_Subarray_Prod(arr)"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    m=len(arr[0])\n    ret=0\n    for i in range(0,n):\n        for j in range(0,m):\n            ret=ret+arr[i][j]\n    return ret\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #print(arr)\n    if len(arr)==0:\n        return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    \n    #This takes into account that if you are given an array of size 1, the function will not return the sum.\n    #So, we'll use sum_1_operation here.\n    def sum_1_operation(arr):\n        \n        #This nested loop will take the input and return the sum of the subarrays\n        for i in range(0, len(arr)-1):\n            for j in range(i+1, len(arr)):\n                #Since we have to append 0 at the end of the array, we'll use append instead of extend, since the sum will change\n                res += arr[i] * arr[j]\n        \n        #We'll return the sum here as the main function will add it to the result array in the main function\n        return res\n    \n    #Now, for a given array, we'll look at all the possible subarrays of this array, and for each subarray, we'll add their products together.\n    #For this, we will use a recursive function named sum_of_Subarrays that has been defined above\n    def sum_of_Subarrays(arr):\n        if len(arr) == 1:\n            return arr[0]\n        \n        #We'll look at the subarrays, and add their products to the sum\n        res = sum_1_operation(arr)\n        \n        #Then, we'll look at all possible subarrays, and add their products to the sum,\n        #For this, we'll use a recursive function named sum_of_Subarrays_Of_Subarrays\n        for i in range(1, len(arr)):\n            #We're also going to use the sum_of_Subarrays_Of_Subarrays function, as it has the same functionality as above\n            res = res + sum_of_Subarrays_Of_Subarrays(arr[i])\n            #We're also going to add the products of all possible subarrays of this array to the sum,\n            #For this, we'll use a recursive function named sum_of_Subarrays_Of_Subarrays_Of_Subarrays\n            res += sum_of_Subarrays_Of_Subarrays(arr[i:])\n        \n        #We're also going to return the sum\n        return res\n    \n    #We're also going to return the sum of all subarrays of this array.\n    return sum_of_Subarrays(arr)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # code here\n    if (n < 0):\n        return(n-1)\n    if (n == 0):\n        return(0)\n    elif (n > 0):\n        return(n-1)\n    \n    if (n == -1):\n        return(3)\n    else:\n        return(0)\n    #raise NotImplementedError\n    \ndef bit_mask(number, mask):\n    '''\n    Create an 8-bit mask from the given number\n    '''\n    # code here\n    return(bin(number)\n        [2:].zfill(8)\n        [0:].zfill(8))\n    #raise NotImplementedError\n    \n    \ndef byte_mask(number, mask):\n    '''\n    Create an 8-bit mask from the given number\n    '''\n    # code here\n    return(bin(number)[2:].zfill(8)[::-1]\n        [0:].zfill(8))\n    #raise NotImplementedError\n    \n    \ndef bit_or(number1, number2):\n    '''\n    Create an 8-bit mask from the given number1 and number2\n    '''\n    # code here\n    return(bin(number1[::-1]\n        [2:].zfill(8)[::-1]\n        [0:].zfill(8))\n        + bin(number2)[2:].zfill(8)[::-1]\n        [0:].zfill(8))\n    #raise NotImplementedError\n    \n    \ndef bit_xor(number1, number2):\n    '''\n    Create an 8-bit mask from the given number1 and number2\n    '''\n    # code here\n    return(bin(number1[::-1]\n        [2:].zfill(8)[::-1]\n        [0:].zfill(8)\n        + bin(number2)[2:].zfill(8)[::-1]\n        [0:].zfill(8))\n        [0:].zfill(8)\n        [2:].zfill(8)[::-1]\n        [0:].zfill(8)\n        [0:].zfill(8))\n    #raise NotImplementedError\n    \n    \ndef bit_and(number1, number2):\n    '''\n    Create an 8-bit mask from the given number1 and number2\n    '''\n    # code here\n    return(bin(number1[::-1]\n        [2:].zfill(8)[::-1]\n        [0:].zfill(8)\n        + bin(number2)[2:].zfill(8)[::-1]\n        [0:].zfill(8)\n        [0:].zfill(8)\n        [2:].zfill(8)[::-1]\n        [0:].zfill(8)\n        [0:].zfill(8)\n    #raise NotImplementedError\n    \n    \ndef set_zeros(number):\n    '''\n    Apply the desired zero-padding to the given number\n    '''\n    # code here\n    if (number > 0):\n        return(number - 1)\n    else:\n        return(0)\n    #raise NotImplementedError\n    \n    \ndef append_zeros(number):\n    '''\n    Append the desired zero-padding to the given number\n    '''\n    # code here\n    if (number > 0):\n        return(number + 1)\n    else:\n        return(0)\n    #raise NotImplementedError\n    \n    \ndef count_zeros(number):\n    '''\n    Count the number of zeros\n    '''\n    # code here\n    num = len(str(number))\n    return(num)\n    #raise NotImplementedError\n    \n    \ndef number_of_bits(number):\n    '''\n    Count the number of bits\n    '''\n    # code here\n    num = len(bin(number)[2:])\n    return(num)\n    #raise NotImplementedError\n    \n    \ndef bit_sort(number):\n    '''\n    Sort the given number in ascending order\n    '''\n    # code here\n    return(str(number)[::-1])\n    #raise NotImplementedError\n    \n    \ndef bit_reverse(number):\n    '''\n    Reverse the order of the given number\n    '''\n    # code here\n    num = len(str(number)[::-1])\n    return(str(number)[::-1])\n    #raise NotImplementedError\n    \n    \ndef number_to_binary(number):\n    '''\n    Convert the given number to its binary representation\n    '''\n    # code here\n    return(bin(number)[2:].zfill(8)[::-1])\n    #raise NotImplementedError\n    \n    \ndef number_to_binary_recursive(number):\n    '''\n    Convert the given number to its binary representation recursively\n    '''\n    # code here\n    if number > 0:\n        return(bin(number)[2:].zfill(8)[::-1])\n    else:\n        return(str(number)[::-1])\n    #raise NotImplementedError\n    \n    \ndef bit_exponent(number):\n    '''\n    Apply the given number to a given exponent and return the resulting value\n    '''\n    # code here\n    if (number > 0):\n        return(number ** 3)\n    else:\n        return(0)\n    #raise NotImplementedError\n    \n    \ndef bit_exponent_recursive(number):\n    '''\n    Apply the given number to a given exponent and return the resulting value recursively\n    '''\n    # code here\n    if (number > 0):\n        return(number ** 3)\n    else:\n        return(0)\n    #raise NotImplementedError\n    \n    \ndef bit_xor_recursive(number1, number2):\n    '''\n    Apply the given number1 to the bitwise xor of number2 and return the resulting value\n    '''\n    # code here\n    if (number1 > 0):\n        return(number1 ^ number2)\n    else:\n        return(0)\n    #raise NotImplementedError\n    \n    \ndef bit_xor_recursive_part1(number1, number2):\n    '''\n    Apply the given number1 to the bitwise xor of number2 and return the resulting value recursively\n    '''\n    # code here\n    if (number1 > 0):\n        return(number1 ^ number2)\n    else:\n        return(0)\n    #raise NotImplementedError\n    \n    \ndef bit_xor_recursive_part2(number1, number2):\n    '''\n    Apply the given number1 to the bitwise xor of number2 and return the resulting value recursively\n    '''\n    # code here\n    if (number1 > 0):\n        return(number1 ^ number2)\n    else:\n        return(0)\n    #raise NotImplementedError\n    \n    \ndef bit_and_recursive(number1, number2):\n    '''\n    Apply the given number1 and number2 to a given bit and return the resulting value\n    '''\n    # code here\n    if (number1 > 0):\n        return(number1 & number2)\n    else:\n        return(0)\n    #raise NotImplementedError\n    \n    \ndef bit_and_recursive_part1(number1, number2):\n    '''\n    Apply the given number1 and number2 to a given bit and return the resulting value recursively\n    '''\n    # code here\n    if (number1 > 0):\n        return(number1 & number2)\n    else:\n        return(0)\n    #raise NotImplementedError\n    \n    \ndef bit_and_recursive_part2(number1, number2):\n    '''\n    Apply the given number1 and number2 to a given bit and return the resulting value recursively\n    '''\n    # code here\n    if (number1 > 0):\n        return(number1 & number2)\n    else:\n        return("
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    result = ''\n    for x in range(n):\n        if n % 2!= 0:\n            result += '0'\n        else:\n            result += '1'\n        n = int(n / 2)\n    return result\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Write your code here\n    n = n & ((1 << 32) - 1)\n    # print(n)\n    while n:\n        n = n & ((1 << 32) - 1)\n    # print(n)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n_bin = bin(n).split('b')[1]\n    # print(n_bin)\n    first_bit = int(n_bin[0])\n    last_bit = int(n_bin[1])\n    # print(first_bit, last_bit)\n    temp = n\n    n = n ^ (1 << last_bit)\n    # print(n)\n    n = n | (1 << first_bit)\n    # print(n)\n    # print(n_bin)\n    # print(bin(n))\n    n = int(n_bin, 2)\n    n = n ^ (1 << first_bit)\n    # print(n)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # bit_mask = 0b00000011\n    bit_mask = 0b1110011\n    mask = 1\n    for i in range(n):\n        n = n & mask\n        # if n < bit_mask:\n        #     n = n ^ bit_mask\n        # else:\n        #     n = n ^ bit_mask\n        mask <<= 1\n        # n = n ^ bit_mask\n        # if n < bit_mask:\n        #     n = n ^ bit_mask\n        # else:\n        #     n = n ^ bit_mask\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # define the bits\n    bits = (1 << n)-1\n    # set the first and last bit\n    bits = bits | (bits - 1)\n    # toggle the bit\n    bits = bits ^ bits\n    return bits\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    num = str(n)\n    n = n[1:] + n[0:len(n)-1]\n    n = n[0:len(n)-1]\n    if len(n) == 1:\n        n = '0' + n\n    if len(n) == 0:\n        n = '0'\n    if len(n) == 1:\n        n = '1'\n    num = str(int(num, 2) ^ int(n, 2))\n    return num\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # write your code here\n    num = format(n, 'b')\n    num_list = list(num)\n    for i in range(len(num_list)-1):\n        if num_list[i] == '1':\n            num_list[i] = '0'\n        else:\n            num_list[i] = '1'\n    num_str = ''.join(num_list)\n    return num_str\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    global num\n    # First bit is 0\n    # Last bit is 1\n    print('Test 1')\n    print('\\n')\n    for x in range(0, n):\n        num = num & (~1) ^ (1 << (n - 1 - x))\n        print(num)\n    print('\\n')\n    # First bit is 1\n    # Last bit is 0\n    print('Test 2')\n    print('\\n')\n    for x in range(0, n):\n        num = num | (1 << x)\n        print(num)\n    print('\\n')\n    print(num)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return bin(n)[2:] + bin(n)[:len(bin(n)[2:])-1]\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    key = a[0]\n    if key < x:\n        if len(a)!= 0:\n            left_loc = bisect.bisect_left(a, x, lo=0, hi=len(a))\n            if left_loc!= len(a):\n                return left_loc + 1\n        else:\n            return 0\n    else:\n        return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a, x)\n    if l == len(a):\n        return l\n    return l + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #'0' is a placeholder, it will be used in the for loop to iterate through a sorted list\n    #For example, index(a,0) will return 0, index(b,0) will return 0\n    for i in range(len(a)):\n        if x < a[i]:\n            return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Search index of x in the list\n    idx = bisect.bisect_left(a, x)\n    if idx == 0:\n        return len(a)\n    elif idx == len(a):\n        return 0\n    elif a[idx-1] > x:\n        return idx-1\n    else:\n        return idx\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    position = bisect.bisect(a,x)\n    if position == 0:\n        return position\n    else:\n        return position-1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low_index = 0\n    high_index = len(a)-1\n    while high_index>low_index:\n        mid = low_index + (high_index - low_index)//2\n        if a[mid]>x:\n            high_index = mid\n        else:\n            low_index = mid+1\n    return high_index\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    h = len(a) - 1\n    l = 0\n    while l < h:\n        mid = (l+h) // 2\n        if a[mid] < x:\n            l = mid + 1\n        else:\n            h = mid\n    if l >= 0:\n        return l\n    else:\n        return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    pivot = 0\n    while l <= r:\n        mid = (l+r)//2\n        if a[mid] < x:\n            if a[mid] > pivot:\n                pivot = mid\n            if a[mid] > pivot and a[mid] > x:\n                r = mid - 1\n            else:\n                l = mid + 1\n        else:\n            if a[mid] > pivot:\n                pivot = mid\n            if a[mid] > pivot and a[mid] < x:\n                l = mid + 1\n            else:\n                r = mid - 1\n    return pivot\n    \ndef insertion_sort(a):\n    '''\n    Write a function to do the insertion sort of a list.\n    '''\n    for i in range(1, len(a)):\n        j = i - 1\n        while j >= 0 and a[j] > a[j + 1]:\n            a[j + 1] = a[j]\n            j -= 1\n        a[j + 1] = a[j]\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x<a:\n        return None\n    i = bisect.bisect_left(a, x)\n    if i==0:\n        return i\n    else:\n        return i-1\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(vowels, string)\n    "
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    str_list = list(string)\n    if str_list[0] in vowels:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = r'^([aeiouAEIOU][A-Za-z0-9_]*)'\n    return (re.search(pattern,string))\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if re.search(regex,string):\n        if string[0] in vowels:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[AEIOUAEIOU][A-Za-z0-9_]*'\n    return string.upper() in list(map(lambda x: x.upper(), re.findall(regex, string)))\ndef clean_str(string):\n    '''\n    Write a function to clean a sentence by punctuation. \n    '''\n    return re.sub('[?.!:,;]','', string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    if(string.find(\"\")!= -1): \n        return False\n    else:\n        for word in string.split(): \n            if(word[0] in vowels):\n                return False\n    return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if len(string) > 0 and re.match(regex,string):\n        return True\n    else:\n        return False\n    \ndef check_str_nopunct(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if len(string) > 0 and re.match(regex,string):\n        return True\n    else:\n        return False\n    \ndef check_str_pos(string):\n    '''\n    Write a function to check whether the given string is a positive one using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # if the vowel is present in the string\n    if 'aeiouAEIOU' in string:\n        return True\n    \n    # if it's not a vowel then the rest of the string is a string containing a letter and it is not a vowel\n    if any(char not in 'aeiouAEIOU' for char in string):\n        return False\n    \n    # check the number of consonants and if it's less than or equal to the total letters in the string\n    if len(string) < len(string.lower()):\n        return False\n    \n    # check the length of the string\n    if len(string.lower()) >= len(string.lower()):\n        return False\n    \n    # check for consonants in the string\n    for c in string.lower():\n        if c not in 'aeiouAEIOU':\n            return False\n    \n    return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n    \nprint(geometric_sum(4))\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return (geometric_sum(n-1) + n)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1 or n == 0:\n        return n\n    else:\n        return n * geometric_sum(n-1)\n    \n    \n    "
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 24\n    elif n == 5:\n        return 120\n    else:\n        return geometric_sum(n-1) + geometric_sum(n-2) + geometric_sum(n-3) + geometric_sum(n-4)"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n    \n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    '''\n    math.floor(pow(q,k)) => q,k\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 3 == 0: \n        return 1+find_Index(n//3)\n    elif n % 3 == 1: \n        return 2+find_Index(n//3)\n    elif n % 3 == 2: \n        return 3+find_Index(n//3)\n    else: \n        return 4+find_Index(n//3)\ndef find_LMN(n):\n    '''\n    Write a python function to find the LCM of two numbers. https://www.geeksforgeeks.org/find-the-lcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n**2 + n)\n    elif n % 2 == 1:\n        return n**2\n    elif n % 2 == 2:\n        return math.floor(n**0.5)\n    else:\n        return (n**2 + n)\ndef find_LCM(n):\n    '''\n    Write a python function to find the LCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-lcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n**0.5\n    elif n % 2 == 1:\n        return n\n    elif n % 2 == 2:\n        return math.floor(n**0.5)\n    else:\n        return (n**0.5 + n)\ndef find_BLCM(n):\n    '''\n    Write a python function to find the BLCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-bcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n**2\n    elif n % 2 == 1:\n        return n**2 + (n+1)**2\n    else:\n        return n**2\ndef find_BLC(n):\n    '''\n    Write a python function to find the BLCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-bcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n**2\n    elif n % 2 == 1:\n        return n**2 + (n+1)**2\n    else:\n        return n**2 + (n+1)\ndef find_LCM(n):\n    '''\n    Write a python function to find the LCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-lcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return math.floor(n**0.5)\n    elif n % 2 == 1:\n        return (n**0.5 + n)**0.5\n    else:\n        return math.floor(n**0.5)\ndef find_LCM_rev(n):\n    '''\n    Write a python function to find the LCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-lcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n**2 + n)**0.5\n    elif n % 2 == 1:\n        return (n**2 + n)**0.5 + 1\n    else:\n        return (n**2 + n)**0.5 + (n+1)**0.5\ndef find_LCM(n):\n    '''\n    Write a python function to find the LCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-lcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n**0.5\n    elif n % 2 == 1:\n        return (n**0.5 + n)**0.5\n    else:\n        return n**0.5 + (n+1)**0.5\ndef find_LCM_rev(n):\n    '''\n    Write a python function to find the LCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-lcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n**0.5\n    elif n % 2 == 1:\n        return (n**0.5 + n)**0.5\n    else:\n        return n**0.5 + (n+1)**0.5\ndef find_LCM_rev(n):\n    '''\n    Write a python function to find the LCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-lcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n**2 + n)**0.5\n    elif n % 2 == 1:\n        return (n**2 + n)**0.5 + 1\n    else:\n        return (n**2 + n)**0.5 + (n+1)**0.5\ndef find_BLCM(n):\n    '''\n    Write a python function to find the BLCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-bcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return (n**2 + n)**0.5\n    elif n % 2 == 1:\n        return (n**2 + n)**0.5 + 1\n    else:\n        return (n**2 + n)**0.5 + (n+1)**0.5\ndef find_LCM_rev(n):\n    '''\n    Write a python function to find the LCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-lcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return math.floor(n**0.5)\n    elif n % 2 == 1:\n        return (n**0.5 + n)**0.5\n    else:\n        return math.floor(n**0.5)\ndef find_LCM(n):\n    '''\n    Write a python function to find the LCM of two numbers.\n    https://www.geeksforgeeks.org/find-the-lcm-of-two-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n**0.5\n    elif n % 2 == 1:\n        return (n**0.5 + n)**0.5\n    else:\n        return n**0.5 + (n+1)**0.5\ndef find_LCM_rev(n):\n    '''\n    Write a python function to find the LCM of two numbers."
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    m = n\n    if n == 0:\n        return 0\n    while (m >= 0):\n        if n % m == 0:\n            return m \n        m -= 1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n+1):\n        a = math.floor(math.sqrt(i))\n        if math.floor(math.sqrt(i))**2 == i:\n            return i\n    return n\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(n+1):\n        print(i,end=\" \")\n    print()\n    print()\n    for i in range(n):\n        print(i,end=\" \")\n    print()\n    print(n)\n    \ndef c3(n): \n    '''\n    This function does a series of math using math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c4(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c5(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c6(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c7(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c8(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c9(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c10(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c11(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c12(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c13(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c14(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c15(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c16(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c17(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c18(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c19(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c20(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c21(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c22(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c23(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c24(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c25(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c26(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c27(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c28(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c29(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c30(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c31(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c32(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c33(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c34(n): \n    '''\n    This function uses the math library. \n    ''' \n    x=1\n    for i in range(1,n): \n        x=x*(i+1)\n    return x\ndef c35(n): \n    '''\n    This function uses the math library. \n    ''' "
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return math.ceil((1 + math.sqrt(1 + 8*n - 1))/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, 10 ** (n - 1) + 1):\n        if (i ** 2 - 1) % n == 0:\n            return i\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        if n%i==0:\n            return i\n    return n+1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n<0 or n>10**(n-1):\n        print(\"Please enter a valid number greater than 0 and less than 10**(n-1)\")\n        return\n    \n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    \n    a = int(n**0.5)\n    if a%2==0:\n        a=int(a/2)\n        i=find_Index(a)\n        if i==0:\n            return i\n        else:\n            return i+2\n    if a%2==1:\n        i=find_Index(a+1)\n        if i==0:\n            return i\n        else:\n            return i+1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    counter = 0\n    while (n >= 10**counter):\n        if math.gcd(n,10**(counter+1)) == 1:\n            counter += 1\n            continue\n        else:\n            n /= 10**(counter+1)\n            counter += 1\n    return counter\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    num_1 = 1\n    num_2 = 1\n    if n <= 1:\n        return n\n    while num_2 <= num_1:\n        \n        if n % num_2 == 0:\n            return num_2\n        num_2 +=1\n    return num_2\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val = {}\n    for i in range(len(test_tup)):\n        key_val[test_tup[i][0]] = test_tup[i][1]\n    return key_val\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {\n        tuple(i for i in test_tup[0]):tuple(i for i in test_tup[1])\n        for tuple in test_tup\n    }\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(test_tup)"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for key, value in enumerate(test_tup):\n        if key == 0:\n            key = \"A\"\n        if key == 1:\n            key = \"B\"\n        dict[key] = value\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_tup = tuple()\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i][1])\n    new_tup.append(test_tup[len(test_tup)-1][1])\n    return new_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)):\n        dict[test_tup[i][0]] = test_tup[i][1]\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup)==0:\n        return {}\n    else:\n        return {tuple(test_tup[0]) : tuple_to_dict(test_tup[1:])}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    dict_['first'] = test_tup[0]\n    dict_['second'] = test_tup[1]\n    dict_['third'] = test_tup[2]\n    return dict_\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0,len(test_tup)):\n        d[test_tup[i][0]]=test_tup[i][1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    #Remove spaces and punctuations from the string\n    s = s.replace(' ', '').replace('.','')\n    s = s.replace('?','').replace('!','')\n    \n    #This sets the max length of the character list\n    max_len = len(s)\n    \n    #Takes the input string and stores it in a variable\n    string = s\n    \n    #Stores the character array\n    char_arr = []\n    \n    #Stores the character array\n    for i in range(len(string)) :\n        if len(char_arr)!= 0 :\n            char_arr = char_arr + string[i]\n        else :\n            char_arr = string[i]\n        \n    #Test whether all the characters are same\n    if len(char_arr) == max_len :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Create a count to count how many times each character appears in s\n    count = {}\n    for char in s:\n        if char not in count:\n            count[char] = 0\n        count[char] += 1\n    # Return true if count is a dictionary\n    return all(count.values())\n    \n    # Method to print the output\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('racecar'))\n    # print(all_Characters_Same('rac"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = set(s)\n    for c in char :\n        if c!= s[0] and s[0]!= c :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_list = s.split(' ')\n    for c in char_list:\n        if len(c)!= len(set(c)):\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for x in s :\n        if x in s :\n            pass\n        else :\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initialize lists to store each letter in s\n    list_char = []\n    list_char = s[0].upper() + s[1:]\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Create a dictionary of characters\n    character_dict = dict()\n    for character in s:\n        if character in character_dict.keys():\n            character_dict[character] += 1\n        else:\n            character_dict[character] = 1\n    # Check for each key value pair in dictionary and increment the value\n    for value in character_dict.values():\n        if value!= 1:\n            return False\n    return True\n    "
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)==0 :\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in s :\n        if s.count(i)!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    # check if each character in s is same\n    is_equal = True\n    for ch in s:\n        if ch not in (\" \"):\n            is_equal = False\n            break\n        \n    # if it is not same -> all characters are same\n    if is_equal:\n        return True\n    \n    return False\n    \nif __name__ == \"__main__\":\n    s = input()\n    print(all_Characters_Same(s)"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * (side ** 2) * math.pi\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    sides = [side[0],side[2],side[4],side[6]]\n    return sum(sides)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_a = side[0]\n    side_b = side[1]\n    side_c = side[2]\n    side_d = side[3]\n    side_e = side[4]\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # if side == 1:\n    #     return 0.25*side**2\n    # elif side == 2:\n    #     return 0.5*side**2\n    # elif side == 3:\n    #     return 1\n    return 0.25*side**2*side\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * (side - 1) / 6\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    p = 2 * side\n    area = 0.5 * ((a * (a + b)) / p)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 'I':\n        return ((4 * math.pi) / 3)\n    elif side == 'C':\n        return ((3 * math.pi) / 3)\n    else:\n        return 0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # return the third derivative of a 2D point\n    return side * (side - 1) / 6\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == '1':\n        return round(4 * (math.pi ** 2))\n    elif side == '2':\n        return round(4 * (math.pi ** 2) * (math.pi * 3) * (2 * math.pi * (2 + math.sqrt(5))))\n    elif side == '3':\n        return round(4 * (math.pi ** 2) * (math.pi * 3) * (2 * math.pi * (2 + math.sqrt(5))))\n    elif side == '4':\n        return round(4 * (math.pi ** 2) * (math.pi * 3) * (2 * math.pi * (2 + math.sqrt(5))))\n    else:\n        return -1\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    l, t, r = side\n    a = (math.pow(math.pow(l, 2) + math.pow(t, 2) + math.pow(r, 2), 1/3))\n    return a\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Top part\n    for i in range(m):\n        # End part\n        list[i+1:] = list[i: len(list)-1: -1]\n        # End part\n    # End of Top part\n    # Bottom part\n    for i in range(m-2, -1, -1):\n        # End part\n        list[i: len(list)-1: -1] = list[i+1: len(list)-1: -1]\n    # End of Bottom part\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    print(list)\n    i = 0\n    m = m\n    temp = 0\n    while i < len(list):\n        temp = list[i]\n        print(list)\n        list[i] = list[len(list) - 1]\n        list[len(list) - 1] = temp\n        i += 1\n    print(list)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # loop over a range of numbers and create a list with items of the correct length\n    for i in range(0, len(list), 1):\n        list[i] = list[len(list) - 1 - i]\n    # insert the last item in the list\n    list.append(list[len(list) - 1])\n    # delete the last item\n    list.pop(len(list) - 1)\n    # reverse the list\n    list.reverse()\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    c = len(list)\n    i = c//2\n    a = list[:i]\n    b = list[i:]\n    return a + b[::-1]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > 0:\n        list = list[m:]+list[:m]\n        return rotate_right(list, m-1)\n    else:\n        return list\n        \ndef main():\n    '''\n    Write a function that takes in a given list, prints out all the elements in the list in the right order, and prints out all the elements in the left order, in the same order.\n    '''\n    lst = [1, 2, 3, 4, 5]\n    \n    print(lst)\n    print(lst[::-1])\n    print(lst[::-2])\n    print(lst[::-3])\n    print(lst[::-4])\n    \n    \nif __name__ == '__main__':\n    main()\n    \n    \n    "
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #length of the list\n    n = len(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for i in range(m, 0, -1):\n        new_list.append(list[i-1])\n    for i in range(m+1, len(list)):\n        new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    result = []\n    count = 0\n    for item in list:\n        count += 1\n        result.insert(count, item)\n    print(result)\n    return result\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    i = len(list) - 1\n    j = 0\n    k = 0\n    while i > 0:\n        if list[i] > list[j]:\n            i = i - 1\n        else:\n            break\n        k = k + 1\n    for i in range(k):\n        list[i], list[j] = list[j], list[i]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0:\n        return list\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if not test_tup:\n        return True\n    for elem in test_tup:\n        if elem is not None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return not test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test = True\n    if test:\n        test = test_tup[0] == None\n    return test\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem!= None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0]!= None:\n        return test_tup\n    else:\n        return None\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup == () or test_tup == None\n    \n    \n    \ndef empty_tuple(tup):\n    '''\n    Write a function that returns a tuple with a single item if the given tuple has any none value or not.\n    '''\n    return tup\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    # Check for None\n    if not isinstance(test_tup, tuple):\n        raise TypeError('tuple is not a tuple')\n    if test_tup[0] is None:\n        raise TypeError('tuple does not contain an element with value None')\n    return test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return (test_tup[1] is not None) or (test_tup[0] is not None)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    L = []\n    for i in range(startnum, endnum+1):\n        L.append(i)\n    for k in range(1, 10):\n        while L[k] % k!= 0:\n            L[k] = L[k] + L[k-1]\n    return L\n    \n    \ndef prime_numbers(start, end):\n    '''\n    Write a function to see if a number is prime or not. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-11.php\n    '''\n    \n    pass\n    \n    \ndef fibonacci(start, end):\n    '''\n    Write a function to return the first two fibonacci numbers. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-17.php\n    '''\n    \n    pass\n    \n    \ndef prime_factors(n):\n    '''\n    Write a function to find the prime factors of a number. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-10.php\n    '''\n    \n    pass\n    \n    \ndef next_permutation(a):\n    '''\n    Write a function to find the next permutation of a. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-3.php\n    '''\n    \n    pass\n    \n    \ndef find_prime_factors(n):\n    '''\n    Write a function to find the prime factors of a number. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-17.php\n    '''\n    \n    pass\n    \n    \ndef mod_inv(a, n):\n    '''\n    Write a function to compute the modular inverse of a and n. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-13.php\n    '''\n    \n    pass\n    \n    \ndef gcd(a, b):\n    '''\n    Write a function to find the greatest common divisor of two positive integers. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-2.php\n    '''\n    \n    pass\n    \n    \ndef inverse(a, m):\n    '''\n    Write a function to find the multiplicative inverse of a mod m. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-2.php\n    '''\n    \n    pass\n    \n    \ndef modinv(a, m):\n    '''\n    Write a function to compute the modular inverse of a and m. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-13.php\n    '''\n    \n    pass\n    \n    \ndef pythag(n):\n    '''\n    Write a function to print the prime factors of a. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-2.php\n    '''\n    \n    pass\n    \n    \ndef coprime(a, b):\n    '''\n    Write a function to check if a and b are coprime. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-2.php\n    '''\n    \n    pass\n    \n    \ndef neg(a):\n    '''\n    Write a function to calculate the negative of a. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-9.php\n    '''\n    \n    pass\n    \n    \ndef eval_num(a, b):\n    '''\n    Write a function to evaluate an equation. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-3.php\n    '''\n    \n    pass\n    \n    \ndef gcd_list(lst):\n    '''\n    Write a function to find the greatest common divisor of a list. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-3.php\n    '''\n    \n    pass\n    \n    \ndef gcd_single(n):\n    '''\n    Write a function to find the greatest common divisor of a positive integer and n. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-13.php\n    '''\n    \n    pass\n    \n    \ndef gcd_list_positive(lst):\n    '''\n    Write a function to find the greatest common divisor of a list. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-3.php\n    '''\n    \n    pass\n    \n    \ndef gcd_list_negative(lst):\n    '''\n    Write a function to find the greatest common divisor of a list. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-3.php\n    '''\n    \n    pass\n    \n    \ndef gcd_factor(n):\n    '''\n    Write a function to find the greatest common divisor of a positive integer and n. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-3.php\n    '''\n    \n    pass\n    \n    \ndef gcd_list_factor(lst):\n    '''\n    Write a function to find the greatest common divisor of a list. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-3.php\n    '''\n    \n    pass\n    \n    \ndef gcd(a, b):\n    '''\n    Write a function to find the greatest common divisor of a and b. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic-exercises/python-basic-exercises-exercise-11.php\n    '''\n    \n    pass\n    \n    \ndef gcd_list_factor(lst):\n    '''\n    Write a function to find the greatest common divisor of a list. \n    '''\n    '''\n    https://www.w3resource.com/python-exercises/python-basic"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # TODO: Write your code here\n    start = startnum\n    end = endnum\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by(num):\n        return (num % 10 == 0) and (num % 100!= 0)\n    \n    nums = []\n    nums.append(startnum)\n    \n    while len(nums) < endnum:\n        if divisible_by(nums[-1]):\n            nums.append(nums[-1] + 1)\n        else:\n            nums.append(nums[-1])\n    \n    return nums\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Initialize the output string\n    output = ''\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    f = lambda x: x % 10\n    for i in range(startnum, endnum):\n        if f(i) == 0:\n            return i\n    return \"Error\"\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    range_nums = range(startnum, endnum + 1)\n    # Using a for loop to iterate through the range of numbers\n    for number in range_nums:\n        # Check if the number is divisible by every digit it contains\n        if number % 10 == 0:\n            # If it is then return True\n            return True\n    # If it is not divisible by every digit it contains then return False\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    range = range(10)\n    list_of_numbers = list(range)\n    list_of_numbers.remove(startnum)\n    list_of_numbers.remove(endnum)\n    list_of_numbers.append(startnum)\n    list_of_numbers.append(endnum)\n    \n    def number_divisible_by_digit(number):\n        sum_of_number = 0\n        for digit in str(number):\n            sum_of_number += int(digit)\n        return sum_of_number % 10\n        \n    def list_of_divisible_numbers(startnum, endnum):\n        list_of_numbers = list(range)\n        list_of_numbers.remove(startnum)\n        list_of_numbers.remove(endnum)\n        \n        for number in list_of_numbers:\n            if number_divisible_by_digit(number) == startnum:\n                print(number, \"is divisible by\", startnum)\n        \n        return \n        \n    list_of_divisible_numbers(startnum, endnum)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda x: filter(lambda y: int(y) % 10 == 0, list(map(str, x)))\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for x in range(startnum, endnum + 1):\n        if x % 10 == 0:\n            print(f\"{x}\")\n        if x % 2 == 0:\n            if x % 10 == 0:\n                print(f\"{x}\")\n        else:\n            print(f\"{x}\")\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(num):\n        # YOUR CODE HERE\n        return num % 10 == 0\n    \n    # Write your code here\n    for i in range(startnum, endnum + 1):\n        if is_divisible_by_digit(i):\n            print(i, end=' ')\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #assert r>=0 and r<=1000, 'Radius should be larger than 0 and less than 1000.'\n    #assert a>=0 and a<=360, 'Angle should be greater than 0 and less than 360.'\n    #assert a>=0 and a<=360, 'Angle should be greater than 0 and less than 360.'\n    sector = round((r**2/a)*math.cos(math.radians(a)))\n    print(sector)\n    return sector\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(r>=0 and a<=math.pi/2):\n        return(r*a*(math.pi**2)*0.5)\n    if(r<0 and a>0):\n        return(0)\n    if(r<0 and a<0):\n        return(0)\n    if(r>0 and a>math.pi):\n        return(0)\n    if(r<0 and a<0):\n        return(0)\n    if(r==0 and a==0):\n        return(0)\n    if(r==0):\n        return(0)\n    if(r<0):\n        return(0)\n    if(a==0):\n        return(0)\n    if(a==math.pi):\n        return(0)\n    return((r**2)*0.5*(a**2))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 0): r = r*math.pi/180\n    elif (r > 180): r = (r*math.pi/180) - 360\n    else:\n        pass\n    if (a < 0): a = a*math.pi/180\n    elif (a > 180): a = (a*math.pi/180) - 360\n    else:\n        pass\n    return a*math.sin(r)*math.sin(a)\ndef sector_area_old(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 0): r = r*math.pi/180\n    elif (r > 180): r = (r*math.pi/180) - 360\n    else:\n        pass\n    if (a < 0): a = a*math.pi/180\n    elif (a > 180): a = (a*math.pi/180) - 360\n    else:\n        pass\n    if (r < 0): return None\n    if (r < 90): return (math.pi*sector_area(r,0) + math.pi*sector_area(r,90))/math.pi\n    if (r < 180): return (math.pi*sector_area(r,90) + math.pi*sector_area(r,180))/math.pi\n    if (r < 270): return (math.pi*sector_area(r,180) + math.pi*sector_area(r,270))/math.pi\n    if (r < 360): return (math.pi*sector_area(r,270) + math.pi*sector_area(r,360))/math.pi\ndef sector_area_2(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 0): r = r*math.pi/180\n    elif (r > 180): r = (r*math.pi/180) - 360\n    else:\n        pass\n    if (a < 0): a = a*math.pi/180\n    elif (a > 180): a = (a*math.pi/180) - 360\n    else:\n        pass\n    if (r < 0): return None\n    if (r < 90): return (math.pi*sector_area(r,0) + math.pi*sector_area(r,90))/math.pi\n    if (r < 180): return (math.pi*sector_area(r,90) + math.pi*sector_area(r,180))/math.pi\n    if (r < 270): return (math.pi*sector_area(r,180) + math.pi*sector_area(r,270))/math.pi\n    if (r < 360): return (math.pi*sector_area(r,270) + math.pi*sector_area(r,360))/math.pi\ndef sector_area_2_old(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 0): r = r*math.pi/180\n    elif (r > 180): r = (r*math.pi/180) - 360\n    else:\n        pass\n    if (a < 0): a = a*math.pi/180\n    elif (a > 180): a = (a*math.pi/180) - 360\n    else:\n        pass\n    if (r < 0): return None\n    if (r < 90): return (math.pi*sector_area(r,0) + math.pi*sector_area(r,90))/math.pi\n    if (r < 180): return (math.pi*sector_area(r,90) + math.pi*sector_area(r,180))/math.pi\n    if (r < 270): return (math.pi*sector_area(r,180) + math.pi*sector_area(r,270))/math.pi\n    if (r < 360): return (math.pi*sector_area(r,270) + math.pi*sector_area(r,360))/math.pi\ndef sector_area_3(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 0): r = r*math.pi/180\n    elif (r > 180): r = (r*math.pi/180) - 360\n    else:\n        pass\n    if (a < 0): a = a*math.pi/180\n    elif (a > 180): a = (a*math.pi/180) - 360\n    else:\n        pass\n    if (r < 0): return None\n    if (r < 90): return (math.pi*sector_area(r,0) + math.pi*sector_area(r,90))/math.pi\n    if (r < 180): return (math.pi*sector_area(r,90) + math.pi*sector_area(r,180))/math.pi\n    if (r < 270): return (math.pi*sector_area(r,180) + math.pi*sector_area(r,270))/math.pi\n    if (r < 360): return (math.pi*sector_area(r,270) + math.pi*sector_area(r,360))/math.pi\ndef sector_area_3_old(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 0): r = r*math.pi/180\n    elif (r > 180): r = (r*math.pi/180) - 360\n    else:\n        pass\n    if (a < 0): a = a*math.pi/180\n    elif (a > 180): a = (a*math.pi/180) - 360\n    else:\n        pass\n    if (r < 0): return None\n    if (r < 90): return (math.pi*sector_area(r,0) + math.pi*sector_area(r,90))/math.pi\n    if (r < 180): return (math.pi*sector_area(r,90) + math.pi*sector_area(r,180))/math.pi\n    if (r < 270): return (math.pi*sector_area(r,180) + math.pi*sector_area(r,270))/math.pi\n    if (r < 360): return (math.pi*sector_area(r,270) + math.pi*sector_area(r,360))/math.pi\ndef sector_area_4(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 0): r = r*math.pi/180\n    elif (r > 180): r = (r*math.pi/180) - 360\n    else:\n        pass\n    if (a < 0): a = a*math.pi/180\n    elif (a > 180): a = (a*math.pi/180) - 360\n    else:\n        pass\n    if (r < 0): return None\n    if (r < 90): return (math.pi*sector_area(r,0) + math.pi*sector_area(r,90))/math.pi\n    if (r < 180): return (math.pi*sector_area(r,90) + math.pi*sector_area(r,180))/math.pi\n    if (r < 270): return (math.pi*sector_area(r,180) + math.pi*sector_area(r,270))/math.pi\n    if (r < 360): return (math.pi*sector_area(r,270) + math.pi*sector_area(r,360))/math.pi\nde"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # if the angle is larger than 360 degrees, then return None. Otherwise, return the sector's area.\n    if math.degrees(math.acos(a/r)) > math.pi:\n        return None\n    elif math.degrees(math.acos(a/r)) <= math.pi/2:\n        return r*r*(2*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/3:\n        return r*r*(3*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/4:\n        return r*r*(4*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/5:\n        return r*r*(5*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/6:\n        return r*r*(6*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/7:\n        return r*r*(7*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/8:\n        return r*r*(8*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/9:\n        return r*r*(9*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/10:\n        return r*r*(10*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/11:\n        return r*r*(11*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/12:\n        return r*r*(12*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/13:\n        return r*r*(13*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/14:\n        return r*r*(14*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/15:\n        return r*r*(15*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/16:\n        return r*r*(16*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/17:\n        return r*r*(17*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/18:\n        return r*r*(18*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/19:\n        return r*r*(19*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/20:\n        return r*r*(20*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/21:\n        return r*r*(21*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/22:\n        return r*r*(22*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/23:\n        return r*r*(23*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/24:\n        return r*r*(24*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/25:\n        return r*r*(25*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/26:\n        return r*r*(26*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/27:\n        return r*r*(27*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/28:\n        return r*r*(28*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/29:\n        return r*r*(29*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/30:\n        return r*r*(30*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/31:\n        return r*r*(31*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/32:\n        return r*r*(32*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/33:\n        return r*r*(33*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/34:\n        return r*r*(34*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/35:\n        return r*r*(35*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/36:\n        return r*r*(36*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/37:\n        return r*r*(37*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/38:\n        return r*r*(38*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/39:\n        return r*r*(39*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/40:\n        return r*r*(40*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/41:\n        return r*r*(41*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/42:\n        return r*r*(42*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/43:\n        return r*r*(43*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/44:\n        return r*r*(44*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/45:\n        return r*r*(45*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/46:\n        return r*r*(46*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/47:\n        return r*r*(47*math.pi)**a\n    elif math.degrees(math.acos(a/r)) <= math.pi/48:\n        return r*r*(48*math.pi)**a\n    elif math.degrees(math.acos(a"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a = math.radians(a)\n    area = (math.sin(math.radians(r*math.pi/180)))*(math.cos(math.radians(a)))\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return round(math.pi*r**2*a,2)\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > math.pi:\n        return None\n    if r < 0 or r > 100:\n        return None\n    if a < 0:\n        return None\n    \n    a = a/180*math.pi\n    #print(r,a)\n    h = math.tan(math.radians(a))\n    #print(h)\n    if r > h:\n        #print(\"tan(a) > h\")\n        return None\n    if r < h:\n        #print(\"tan(a) < h\")\n        return None\n    #print(r,h)\n    r = math.sqrt(r*r + h*h)\n    #print(r)\n    return r\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area = math.pi * r**2 * a # pi/180\n    return sector_area\ndef sector_area2(r,a):\n    '''\n    Function that finds area of a sector.\n    '''\n    a2 = a * a\n    sector_area = math.pi * r**2 * a2\n    return sector_area\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 0:\n        return None\n    else:\n        sectors = []\n        for x in range(0,360,a):\n            if x % a == 0:\n                sectors.append(r*math.sin(math.radians(x)))\n                sectors.append(r*math.cos(math.radians(x)))\n        return sum(sectors)\ndef mass_center(mass):\n    '''\n    Given mass of a particle, calculate the mass center of the particle.\n    '''\n    return (mass/len(mass))*3.1415926536\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a dictionary to store the common subsequence \n    d = {}\n    for i in range(0, len(X)):\n        for j in range(0, len(Y)):\n            if X[i] in d and Y[j] in d:\n                if d[X[i]] == d[Y[j]]:\n                    d[X[i]] += 1\n                else:\n                    d[X[i]] = 1\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #create a list for each element and store it as a char array\n    X = X+\" \"\n    Y = Y+\" \"\n    Z = Z+\" \"\n    X = X.split()\n    Y = Y.split()\n    Z = Z.split()\n    \n    #array to store the index of each element\n    l_X = []\n    l_Y = []\n    l_Z = []\n    \n    #first loop to process one character by one and create a unique array\n    for i in range(len(X)):\n        if i == 0:\n            l_X.append(X.index(X[i]))\n        elif X[i-1] == X[i]:\n            l_X.append(l_X.index(X[i-1])+1)\n        else:\n            l_X.append(l_X.index(X[i-1])+1)\n            l_Y.append(l_Y.index(X[i])+1)\n    \n    for i in range(len(Y)):\n        if i == 0:\n            l_Y.append(Y.index(Y[i]))\n        elif Y[i-1] == Y[i]:\n            l_Y.append(l_Y.index(Y[i-1])+1)\n        else:\n            l_Y.append(l_Y.index(Y[i-1])+1)\n            l_Z.append(l_Z.index(Y[i])+1)\n    \n    for i in range(len(Z)):\n        if i == 0:\n            l_Z.append(Z.index(Z[i]))\n        elif Z[i-1] == Z[i]:\n            l_Z.append(l_Z.index(Z[i-1])+1)\n        else:\n            l_Z.append(l_Z.index(Z[i-1])+1)\n            l_X.append(l_X.index(Z[i])+1)\n    \n    #Creating L, R, and U arrays\n    L = []\n    R = []\n    U = []\n    \n    #create a new array for each substring and store it as a char array\n    for i in range(len(l_X)):\n        L.append(l_X[i])\n        R.append(l_Y[i])\n        U.append(l_Z[i])\n    \n    #put in the unique array to the common subsequence\n    for i in range(len(L)):\n        l_X[i] = L[i]\n        l_Y[i] = R[i]\n        l_Z[i] = U[i]\n    \n    #Print result\n    print(l_X, l_Y, l_Z)\n    \n    #find the index of the first occurrence of the character X\n    x = l_X.index(X[0])\n    \n    #return the common subsequence\n    return(l_X[x:x+len(l_Y)])\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create two lists\n    A = [[0 for x in range(len(Z)+1)] for y in range(len(X)+1)]\n    B = [[0 for x in range(len(Z)+1)] for y in range(len(Y)+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_len = len(X)\n    Y_len = len(Y)\n    Z_len = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs = []\n    if len(X) < len(Y) or len(X) < len(Z):\n        return 0\n    if len(X) > len(Y) or len(X) > len(Z):\n        return 0\n    if X[0]!= Y[0] or Y[0]!= Z[0]:\n        return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    ans = [[0 for _ in range(len(X)+1)] for _ in range(len(Y)+1)]\n    for i in range(1,len(X)+1):\n        for j in range(1,len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                ans[i][j] = ans[i-1][j-1] + 1\n            else:\n                ans[i][j] = max(ans[i-1][j], ans[i][j-1])\n    return ans[len(X)][len(Y)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    LCS_length = 0\n    DP_table = [[0 for i in range(len(X)+1)] for i in range(len(Y)+1)]\n    \n    for i in range(len(X)):\n        for j in range(len(Y)):\n            if(X[i] == Y[j]):\n                DP_table[i+1][j+1] = DP_table[i][j] + 1\n            else:\n                DP_table[i+1][j+1] = max(DP_table[i+1][j],DP_table[i][j+1])\n    \n    for i in range(len(X)):\n        LCS_length = max(DP_table[i+1][len(Y)],LCS_length)\n    \n    return LCS_length\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0: \n        return 0\n    if X[-1] == Y[-1] == Z[-1]: \n        return lcs_of_three(X[:-1], Y[:-1], Z[:-1]) + 1\n    else: \n        return max(lcs_of_three(X, Y, Z[:-1]), lcs_of_three(X, Y, Z[:-1]))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a 2D array to store the lcs for the given strings\n    lcs = [[0 for j in range(len(Z) + 1)] for i in range(len(X) + 1)]\n    # For each of the 3 strings, store the LCS for each of them\n    for i in range(len(X)):\n        for j in range(len(Z)):\n            if X[i] == Z[j]:\n                lcs[i + 1][j + 1] = lcs[i][j] + 1\n            else:\n                lcs[i + 1][j + 1] = max(lcs[i + 1][j], lcs[i][j + 1])\n    # Return the LCS for the given 2D array\n    return lcs[-1][-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #X_length = len(X)\n    #Y_length = len(Y)\n    #Z_length = len(Z)\n    \n    X_length = len(X)\n    Y_length = len(Y)\n    Z_length = len(Z)\n    \n    #X_output = [0 for _ in range(X_length + 1)]\n    #Y_output = [0 for _ in range(Y_length + 1)]\n    #Z_output = [0 for _ in range(Z_length + 1)]\n    \n    #for i in range(X_length + 1):\n    #    X_output[i] = 0\n    #for j in range(Y_length + 1):\n    #    Y_output[j] = 0\n    #for k in range(Z_length + 1):\n    #    Z_output[k] = 0\n    \n    # Longest Common Subsequence\n    # {\n    #     // X_output stores the longest common subsequence\n    #     longest_length: int\n    #     // Y_output stores the longest common subsequence\n    #     longest_length: int\n    #     // Z_output stores the longest common subsequence\n    #     longest_length: int\n    # }\n    \n    # Longest Common Subsequence\n    # {\n    #     // 0 stores the start index of the first position of LCS\n    #     longest_length: int\n    #     // 1 stores the end index of the first position of LCS\n    #     longest_length: int\n    #     // 2 stores the start index of the second position of LCS\n    #     longest_length: int\n    # }\n    \n    # Longest Common Subsequence\n    # {\n    #     // 0 stores the start index of the first position of LCS\n    #     longest_length: int\n    #     // 1 stores the end index of the first position of LCS\n    #     longest_length: int\n    #     // 2 stores the start index of the second position of LCS\n    #     longest_length: int\n    # }\n    \n    #  X[i:j]\n    #  Y[i:k]\n    #  Z[i:j:k]\n    #  \n    #  Longest Common Subsequence\n    #  {\n    #     // 0 stores the start index of LCS[i:j]\n    #     longest_length: int\n    #     // 1 stores the end index of LCS[i:j]\n    #     longest_length: int\n    #     // 2 stores the start index of LCS[i:k]\n    #     longest_length: int\n    #     // 3 stores the end index of LCS[i:k]\n    #     longest_length: int\n    # }\n    \n    # max_length = 0\n    \n    # for i in range(X_length + 1):\n    #     for j in range(Y_length + 1):\n    #         for k in range(Z_length + 1):\n    #             if (i == 0 or j == 0 or k == 0 or i >= X_length or j >= Y_length or k >= Z_length):\n    #                 continue\n    #             \n    #             if X[i] == Y[j] and X[i] == Z[k]:\n    #                 if X[i] == Y[j] and X[i] == Z[k]:\n    #                     if X[i] == Y[j] and X[i] == Z[k]:\n    #                         longest_length = 1\n    #                         break\n    #                 else:\n    #                     longest_length = 2\n    #                     break\n    #             \n    #             if X[i] == Y[j]:\n    #                 if X[i] == Y[j]:\n    #                     longest_length = max(longest_length, 2)\n    #                 else:\n    #                     longest_length = 1\n    #                     break\n    #             \n    #             if X[i] == Z[j]:\n    #                 if X[i] == Z[j]:\n    #                     longest_length = max(longest_length, 2)\n    #                 else:\n    #                     longest_length = 1\n    #                     break\n    #             \n    #             if X[i] == X[j] and X[i] == X[k]:\n    #                 if X[i] == Y[j] and X[i] == X[k]:\n    #                     if X[i] == Y[j] and X[i] == X[k]:\n    #                         longest_length = max(longest_length, 2)\n    #                         break\n    #                     else:\n    #                         longest_length = 1\n    #                         break\n    #                 else:\n    #                     longest_length = 2\n    #                     break\n    #             \n    #             if X[i] == X[j] and X[i] == X[k]:\n    #                 if X[i] == X[j] and X[i] == X[k]:\n    #                     if X[i] == X[j] and X[i] == X[k]:\n    #                         longest_length = max(longest_length, 1)\n    #                         break\n    #                     else:\n    #                         longest_length = 2\n    #                         break\n    #                 else:\n    #                     longest_length = 2\n    #                     break\n    #             \n    #         if longest_length > max_length:\n    #             max_length = longest_length\n    # \n    # return max_length\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(?<=[A-Z][a-z])(?=[^A-Z])'\n    result = re.sub(pattern,'', str1)\n    return result.strip()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'([A-Z])(\\s*)([A-Z])')\n    result = pattern.sub(r' \\1 \\2 \\3', str1)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.strip()\n    str1 = str1.upper()\n    str1 = str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    new_string = re.sub('^[A-Z][^A-Z]*','', str1.lower())\n    new_string = re.sub('[A-Z][^A-Z]*$','', new_string)\n    return new_string.strip()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    words = [w.capitalize() for w in words]\n    return''.join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_str = ''\n    for word in str1.split():\n        if word[0].isupper():\n            new_str += word +''\n        else:\n            new_str += word.capitalize() +''\n    return new_str.strip()\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    text = ''\n    for i in str1.split():\n        if i[0] =='':\n            text = text +''\n            text = text + i\n        else:\n            text = text + i +''\n    return text\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    s = \"\"\n    for x in range(len(str1)):\n        if str1[x] =='' and str1[x - 1]!='':\n            s = s + \" \"\n        elif str1[x] =='' and str1[x - 1] =='':\n            s = s + \" \"\n        elif str1[x] =='':\n            s = s + str1[x]\n        else:\n            s = s + str1[x]\n    return s\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    a = str1.split()\n    for i in a:\n        for j in i:\n            if j[0].isupper():\n                i = i.replace(j, \" \")\n            else:\n                i = i.replace(j, \" \")\n    return i\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r\"[^\\w\\s]'][a-zA-Z]+\"\n    result = re.sub(pattern, r\" \\1 \", str1)\n    return result\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    return sorted(nums_str)\n    \n    # DO NOT TOUCH THE BELOW CODE\n    #It is used to get the sorted list.\n    \n    #Your code here\n    # pass\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    temp_str=[]\n    for i in nums_str:\n        temp_str.append(int(i))\n    \n    temp_str.sort()\n    \n    result=[]\n    for i in range(len(temp_str)):\n        result.append(temp_str[i])\n    return result\n    \n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: int(x))\n    nums_str.sort(key = lambda x: str(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if not nums_str:\n        return nums_str\n    if len(nums_str) == 1:\n        return nums_str[0]\n    if len(nums_str) == 2:\n        return nums_str[0] + nums_str[1]\n    if len(nums_str) == 3:\n        return nums_str[0] + nums_str[1] + nums_str[2]\n    if len(nums_str) == 4:\n        return nums_str[0] + nums_str[1] + nums_str[2] + nums_str[3]\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_list = nums_str\n    nums_str_list.sort()\n    return nums_str_list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # code here\n    new_nums_str = sorted(nums_str)\n    return new_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # sort and print first string in the list as it appears\n    nums_str.sort()\n    print(nums_str[0])\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_str = []\n    for string in nums_str:\n        if string.isdigit():\n            sorted_str.append(int(string))\n    sorted_str.sort()\n    return sorted_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)-1, -1, -1):\n        j = 0\n        for k in range(0, i):\n            if nums_str[k] > nums_str[j]:\n                j += 1\n        nums_str[i], nums_str[j] = nums_str[j], nums_str[i]\n    return nums_str\n    \nprint(sort_numeric_strings([5, 8, 3, 7, 4, 6, 9, 8, 1]))"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    print('ADDING', test_tup, 'TO', test_list)\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(tuple(test_tup))\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    try:\n        for i in range(len(test_list)):\n            test_list[i].append(test_tup[i])\n    except:\n        pass\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    j = 2 * i + 1\n    while j < len(arr):\n        if arr[i] >= arr[j]:\n            break\n        j = 2 * j + 1\n    if j == len(arr):\n        return True\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0: return True\n    if arr[i] < arr[i//2]:\n        return check_min_heap_helper(arr, (i//2) )\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    while i * 2 + 1 < len(arr):\n        if arr[i] >= arr[i * 2] and arr[i] >= arr[i * 2 + 1]:\n            return False\n        i = i * 2\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i<=0:\n        return True\n    else:\n        l,r = 0,len(arr)-1\n        \n        while l<r:\n            if arr[i]<arr[l] and arr[i]<arr[r]:\n                return False\n            elif arr[i]>arr[l]:\n                arr[i],arr[l] = arr[l],arr[i]\n                i+=1\n                l+=1\n            else:\n                r-=1\n                l+=1\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case:\n    if i == 0:\n        return True\n    \n    # if the value of heap at index i is greater than the root value, then we have to heapify the heap at index i\n    if arr[i] >= arr[i//2]:\n        return check_min_heap_helper(arr, i//2)\n    \n    # if the value of heap at index i is less than the root value, then we have to heapify the heap at index i\n    return check_min_heap_helper(arr, i)\n    \ndef find_min_heap(arr):\n    '''\n    write a function that can find the minimum element in a given array\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    # get the root of the heap\n    root = arr[0]\n    \n    # swap the root value with the left child value\n    arr[0] = arr[len(arr)-1]\n    arr[len(arr)-1] = root\n    \n    # call the function to check the minimum element\n    return find_min_heap(arr)\n    \ndef heapsort(arr):\n    '''\n    write a function that can sort a given array in descending order\n    '''\n    # if the length of the array is greater than 1, then we sort the array in ascending order\n    if len(arr) > 1:\n        # call the function to find the root\n        return find_min_heap(arr)\n    \n    # if the length of the array is 1, then return the root\n    return arr[0]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the value is already in the heap\n    if arr[i] == float('inf'):\n        return True\n    # If the value is not in the heap\n    if arr[2*i] > arr[2*i + 1] or arr[2*i] > arr[2*i + 2]:\n        return False\n    # If it is a minimum heap\n    if arr[2*i] < arr[2*i + 1]:\n        arr[2*i] = arr[2*i + 1]\n    if arr[2*i] < arr[2*i + 2]:\n        arr[2*i] = arr[2*i + 2]\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    while i*2+1 < len(arr):\n        if arr[i] < arr[i*2+1]:\n            return False\n        i = i * 2\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    check = True\n    \n    if len(arr) <= 1:\n        return check\n    \n    if i >= len(arr):\n        return check\n    \n    left = i * 2\n    right = i * 2 + 1\n    \n    if arr[i] < arr[left] and arr[i] < arr[right]:\n        arr[i] = arr[left]\n        arr[left] = arr[right]\n        arr[right] = arr[i]\n        return check\n    \n    else:\n        return check\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    return check_min_heap_helper(arr, 2 * i + 1) or check_min_heap_helper(arr, 2 * i + 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    if arr[i] < arr[i//2]:\n        return check_min_heap_helper(arr, i*2)\n    else:\n        return check_min_heap_helper(arr, i*2 + 1)\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    L = []\n    i = 1\n    while i <= n: \n        L.append(a[i-1]) \n        i = i + 1\n    L.append(1)\n    return L[n]\ndef jacobsthal_den(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    L = []\n    i = 1\n    while i <= n: \n        L.append(a[i-1]) \n        i = i + 1\n    L.append(1)\n    return L[n]\ndef jacobsthal_den_2(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    L = []\n    i = 1\n    while i <= n: \n        L.append(a[i-1]) \n        i = i + 1\n    L.append(1)\n    return L[n]\ndef jacobsthal_den_2_2(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    L = []\n    i = 1\n    while i <= n: \n        L.append(a[i-1]) \n        i = i + 1\n    L.append(1)\n    return L[n]\ndef jacobsthal_den_2_3(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n    L = []\n    i = 1\n    while i <= n: \n        L.append(a[i-1]) \n        i = i + 1\n    L.append(1)\n    return L[n]\ndef jacobsthal_den_2_3_2(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,7"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    while n%2==0: \n        n = n/2\n    while n%3==0: \n        n = n/3\n    while n%5==0: \n        n = n/5\n    while n%11==0: \n        n = n/11\n    return n \n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        print(\"Enter a positive integer.\")\n        return\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        return 152\n    if n == 154:\n        return 153\n    if n == 155:\n        return 154\n    if n == 156:\n        return 155\n    if n == 157:\n        return 156\n    if n == 158:\n        return 157\n    if n == 159:\n        return 158\n    if n == 160:\n        return 159\n    if n == 161:\n        return 160\n    if n == 162:\n        return 161\n    if n == 163:\n        return 162\n    if n == 164:\n        return 163\n    if n == 165:\n        return 164\n    if n == 166:\n        return 165\n    if n == 167:\n        return 166\n    if n == 168:\n        return 167\n    if n == 169:\n        return 168\n    if n == 170:\n        return 169\n    if n == 171:\n        return 170\n    if n == 172:\n        return 171\n    if n == 173:\n        return 172\n    if n == 174:\n        return 173\n    if n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==1: return 1\n    elif n==2: return 2\n    elif n==3: return 3\n    elif n==4: return 4\n    elif n==5: return 5\n    elif n==6: return 6\n    elif n==7: return 7\n    elif n==8: return 8\n    elif n==9: return 9\n    elif n==10: return 10\n    elif n==11: return 11\n    elif n==12: return 12\n    elif n==13: return 13\n    elif n==14: return 14\n    elif n==15: return 15\n    elif n==16: return 16\n    elif n==17: return 17\n    elif n==18: return 18\n    elif n==19: return 19\n    elif n==20: return 20\n    elif n==21: return 21\n    elif n==22: return 22\n    elif n==23: return 23\n    elif n==24: return 24\n    elif n==25: return 25\n    elif n==26: return 26\n    elif n==27: return 27\n    elif n==28: return 28\n    elif n==29: return 29\n    elif n==30: return 30\n    elif n==31: return 31\n    elif n==32: return 32\n    elif n==33: return 33\n    elif n==34: return 34\n    elif n==35: return 35\n    elif n==36: return 36\n    elif n==37: return 37\n    elif n==38: return 38\n    elif n==39: return 39\n    elif n==40: return 40\n    elif n==41: return 41\n    elif n==42: return 42\n    elif n==43: return 43\n    elif n==44: return 44\n    elif n==45: return 45\n    elif n==46: return 46\n    elif n==47: return 47\n    elif n==48: return 48\n    elif n==49: return 49\n    elif n==50: return 50\n    elif n==51: return 51\n    elif n==52: return 52\n    elif n==53: return 53\n    elif n==54: return 54\n    elif n==55: return 55\n    elif n==56: return 56\n    elif n==57: return 57\n    elif n==58: return 58\n    elif n==59: return 59\n    elif n==60: return 60\n    elif n==61: return 61\n    elif n==62: return 62\n    elif n==63: return 63\n    elif n==64: return 64\n    elif n==65: return 65\n    elif n==66: return 66\n    elif n==67: return 67\n    elif n==68: return 68\n    elif n==69: return 69\n    elif n==70: return 70\n    elif n==71: return 71\n    elif n==72: return 72\n    elif n==73: return 73\n    elif n==74: return 74\n    elif n==75: return 75\n    elif n==76: return 76\n    elif n==77: return 77\n    elif n==78: return 78\n    elif n==79: return 79\n    elif n==80: return 80\n    elif n==81: return 81\n    elif n==82: return 82\n    elif n==83: return 83\n    elif n==84: return 84\n    elif n==85: return 85\n    elif n==86: return 86\n    elif n==87: return 87\n    elif n==88: return 88\n    elif n==89: return 89\n    elif n==90: return 90\n    elif n==91: return 91\n    elif n==92: return 92\n    elif n==93: return 93\n    elif n==94: return 94\n    elif n==95: return 95\n    elif n==96: return 96\n    elif n==97: return 97\n    elif n==98: return 98\n    elif n==99: return 99\n    elif n==100: return 100\n    elif n==101: return 101\n    elif n==102: return 102\n    elif n==103: return 103\n    elif n==104: return 104\n    elif n==105: return 105\n    elif n==106: return 106\n    elif n==107: return 107\n    elif n==108: return 108\n    elif n==109: return 109\n    elif n==110: return 110\n    elif n==111: return 111\n    elif n==112: return 112\n    elif n==113: return 113\n    elif n==114: return 114\n    elif n==115: return 115\n    elif n==116: return 116\n    elif n==117: return 117\n    elif n==118: return 118\n    elif n==119: return 119\n    elif n==120: return 120\n    elif n==121: return 121\n    elif n==122: return 122\n    elif n==123: return 123\n    elif n==124: return 124\n    elif n==125: return 125\n    elif n==126: return 126\n    elif n==127: return 127\n    elif n==128: return 128\n    elif n==129: return 129\n    elif n==130: return 130\n    elif n==131: return 131\n    elif n==132: return 132\n    elif n==133: return 133\n    elif n==134: return 134\n    elif n==135: return 135\n    elif n==136: return 136\n    elif n==137: return 137\n    elif n==138: return 138\n    elif n==139: return 139\n    elif n==140: return 140\n    elif n==141: return 141\n    elif n==142: return 142\n    elif n==143: return 143\n    elif n==144: return 144\n    elif n==145: return 145\n    elif n==146: return 146\n    elif n==147: return 147\n    elif n==148: return 148\n    elif n==149: return 149\n    elif n==150: return 150\n    elif n==151: return 151\n    elif n==152: return 152\n    elif n==153: return 153\n    elif n==154: return 154\n    elif n==155: return 155\n    elif n==156: return 156\n    elif n==157: return 157\n    elif n==158: return 158\n    elif n==159: return 159\n    elif n==160: return 160\n    elif n==161: return 161\n    elif n==162: return 162\n    elif n==163: return 163\n    elif n==164: return 164\n    elif n==165: return 165\n    elif n==166: return 166\n    elif n==167: return 167\n    elif n==168: return 168\n    elif n==169: return 169\n    elif n==170: return 170\n    elif n==171: return 171\n    elif n==172: return 172\n    elif n==173: return 173\n    elif n==174: return 174\n    elif n==175: return 175\n    elif n==176: return 176\n    elif n==177: return 177\n    elif n==178: return 178\n    elif n==179: return 179\n    elif n==180: return 180\n    elif n==181: return 181\n    elif n==182: return 182\n    elif n==183: return 183\n    elif n==184: return 184\n    elif n==185: return 185\n    elif n==186: return 186\n    elif n==187: return 187\n    elif n==188: return 188\n    elif n==189: return 189\n    elif n==190: return 190\n    elif n==191: return 191\n    elif n==192: return 192\n    elif n==193: return 193\n    elif n==194: return 194\n    elif n==195: return 19"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    j = 0\n    while j <= n:\n        j += 1\n        if (n%j == 0):\n            return j\n    return -1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    lst = [0 for i in range(n+1)]\n    for i in range(1,n+1):\n        lst[i] = i\n    for i in range(n):\n        lst[i+1] = lst[i]**2\n    return lst[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    print(\"Start the Jacobsthal numbers\")\n    print(\"\")\n    print(\"The nth jacobsthal number is:\", end=\"\")\n    for i in range(n):\n        print(int(i), end=\"\")\n    print(\"\\n\")\n    print(\"Thank you for using JACOBI\")\n    print(\"\")\n    print(\"Go to main menu to find out what the number is\")\n    print(\"\")\n    menu()\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n = int(n)\n    if n < 2:\n        print('Jacobsthal:', n, 'not valid.')\n    else:\n        # Python code to calculate the number of jacobsthal numbers from 2 to n.\n        for i in range(1, n + 1):\n            j = (i * i) + 1\n            if j == i:\n                print(i)\n            elif (j % 2) == 0:\n                print(i, '*', j // 2, '=', i * j // 2)\n            else:\n                print(i, '*', j // 2, '=', i * j // 2, '+', i * (j // 2) + 1)\n    return\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    elif n==4:\n        return 4\n    elif n==5:\n        return 5\n    elif n==6:\n        return 6\n    elif n==7:\n        return 7\n    elif n==8:\n        return 8\n    elif n==9:\n        return 9\n    elif n==10:\n        return 10\n    elif n==11:\n        return 11\n    elif n==12:\n        return 12\n    elif n==13:\n        return 13\n    elif n==14:\n        return 14\n    elif n==15:\n        return 15\n    elif n==16:\n        return 16\n    elif n==17:\n        return 17\n    elif n==18:\n        return 18\n    elif n==19:\n        return 19\n    elif n==20:\n        return 20\n    elif n==21:\n        return 21\n    elif n==22:\n        return 22\n    elif n==23:\n        return 23\n    elif n==24:\n        return 24\n    elif n==25:\n        return 25\n    elif n==26:\n        return 26\n    elif n==27:\n        return 27\n    elif n==28:\n        return 28\n    elif n==29:\n        return 29\n    elif n==30:\n        return 30\n    elif n==31:\n        return 31\n    elif n==32:\n        return 32\n    elif n==33:\n        return 33\n    elif n==34:\n        return 34\n    elif n==35:\n        return 35\n    elif n==36:\n        return 36\n    elif n==37:\n        return 37\n    elif n==38:\n        return 38\n    elif n==39:\n        return 39\n    elif n==40:\n        return 40\n    elif n==41:\n        return 41\n    elif n==42:\n        return 42\n    elif n==43:\n        return 43\n    elif n==44:\n        return 44\n    elif n==45:\n        return 45\n    elif n==46:\n        return 46\n    elif n==47:\n        return 47\n    elif n==48:\n        return 48\n    elif n==49:\n        return 49\n    elif n==50:\n        return 50\n    elif n==51:\n        return 51\n    elif n==52:\n        return 52\n    elif n==53:\n        return 53\n    elif n==54:\n        return 54\n    elif n==55:\n        return 55\n    elif n==56:\n        return 56\n    elif n==57:\n        return 57\n    elif n==58:\n        return 58\n    elif n==59:\n        return 59\n    elif n==60:\n        return 60\n    elif n==61:\n        return 61\n    elif n==62:\n        return 62\n    elif n==63:\n        return 63\n    elif n==64:\n        return 64\n    elif n==65:\n        return 65\n    elif n==66:\n        return 66\n    elif n==67:\n        return 67\n    elif n==68:\n        return 68\n    elif n==69:\n        return 69\n    elif n==70:\n        return 70\n    elif n==71:\n        return 71\n    elif n==72:\n        return 72\n    elif n==73:\n        return 73\n    elif n==74:\n        return 74\n    elif n==75:\n        return 75\n    elif n==76:\n        return 76\n    elif n==77:\n        return 77\n    elif n==78:\n        return 78\n    elif n==79:\n        return 79\n    elif n==80:\n        return 80\n    elif n==81:\n        return 81\n    elif n==82:\n        return 82\n    elif n==83:\n        return 83\n    elif n==84:\n        return 84\n    elif n==85:\n        return 85\n    elif n==86:\n        return 86\n    elif n==87:\n        return 87\n    elif n==88:\n        return 88\n    elif n==89:\n        return 89\n    elif n==90:\n        return 90\n    elif n==91:\n        return 91\n    elif n==92:\n        return 92\n    elif n==93:\n        return 93\n    elif n==94:\n        return 94\n    elif n==95:\n        return 95\n    elif n==96:\n        return 96\n    elif n==97:\n        return 97\n    elif n==98:\n        return 98\n    elif n==99:\n        return 99\n    elif n==100:\n        return 100\n    elif n==101:\n        return 101\n    elif n==102:\n        return 102\n    elif n==103:\n        return 103\n    elif n==104:\n        return 104\n    elif n==105:\n        return 105\n    elif n==106:\n        return 106\n    elif n==107:\n        return 107\n    elif n==108:\n        return 108\n    elif n==109:\n        return 109\n    elif n==110:\n        return 110\n    elif n==111:\n        return 111\n    elif n==112:\n        return 112\n    elif n==113:\n        return 113\n    elif n==114:\n        return 114\n    elif n==115:\n        return 115\n    elif n==116:\n        return 116\n    elif n==117:\n        return 117\n    elif n==118:\n        return 118\n    elif n==119:\n        return 119\n    elif n==120:\n        return 120\n    elif n==121:\n        return 121\n    elif n==122:\n        return 122\n    elif n==123:\n        return 123\n    elif n==124:\n        return 124\n    elif n==125:\n        return 125\n    elif n==126:\n        return 126\n    elif n==127:\n        return 127\n    elif n==128:\n        return 128\n    elif n==129:\n        return 129\n    elif n==130:\n        return 130\n    elif n==131:\n        return 131\n    elif n==132:\n        return 132\n    elif n==133:\n        return 133\n    elif n==134:\n        return 134\n    elif n==135:\n        return 135\n    elif n==136:\n        return 136\n    elif n==137:\n        return 137\n    elif n==138:\n        return 138\n    elif n==139:\n        return 139\n    elif n==140:\n        return 140\n    elif n==141:\n        return 141\n    elif n==142:\n        return 142\n    elif n==143:\n        return 143\n    elif n==144:\n        return 144\n    elif n==145:\n        return 145\n    elif n==146:\n        return 146\n    elif n==147:\n        return 147\n    elif n==148:\n        return 148\n    elif n==149:\n        return 149\n    elif n==150:\n        return 150\n    elif n==151:\n        return 151\n    elif n==152:\n        return 152\n    elif n==153:\n        return 153\n    elif n==154:\n        return 154\n    elif n==155:\n        return 155\n    elif n==156:\n        return 156\n    elif n==157:\n        return 157\n    elif n==158:\n        return 158\n    elif n==159:\n        return 159\n    elif n==160:\n        return 160\n    elif n==161:\n        return 161\n    elif n="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        return -1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    else:\n        return jacobsthal_num(n-1)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return (0)\n    else:\n        minimum = min(test_list)\n        for index in range(len(test_list)):\n            if test_list[index] == minimum:\n                minimum = test_list[index]\n        return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        count = count + 1\n        if count % K == 0:\n            print(test_list[i])\n    return count\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    # find all elements with the smallest K value in it\n    min_k = []\n    for i in test_list:\n        if len(min_k) < K:\n            if i[0] < i[1]:\n                min_k.append(i)\n        else:\n            break\n    return min_k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key = lambda x:x[K])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    pass\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return -1\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #Test cases:\n    #test_list = [(1,2,3), (1,2,4), (1,2,5), (1,2,6), (1,2,7), (1,2,8), (1,2,9), (1,2,10), (1,2,11), (1,2,12), (1,2,13), (1,2,14), (1,2,15), (1,2,16), (1,2,17), (1,2,18), (1,2,19), (1,2,20), (1,2,21), (1,2,22), (1,2,23), (1,2,24), (1,2,25), (1,2,26), (1,2,27), (1,2,28), (1,2,29), (1,2,30), (1,2,31), (1,2,32), (1,2,33), (1,2,34), (1,2,35), (1,2,36), (1,2,37), (1,2,38), (1,2,39), (1,2,40), (1,2,41), (1,2,42), (1,2,43), (1,2,44), (1,2,45), (1,2,46), (1,2,47), (1,2,48), (1,2,49), (1,2,50), (1,2,51), (1,2,52), (1,2,53), (1,2,54), (1,2,55), (1,2,56), (1,2,57), (1,2,58), (1,2,59), (1,2,60), (1,2,61), (1,2,62), (1,2,63), (1,2,64), (1,2,65), (1,2,66), (1,2,67), (1,2,68), (1,2,69), (1,2,70), (1,2,71), (1,2,72), (1,2,73), (1,2,74), (1,2,75), (1,2,76), (1,2,77), (1,2,78), (1,2,79), (1,2,80), (1,2,81), (1,2,82), (1,2,83), (1,2,84), (1,2,85), (1,2,86), (1,2,87), (1,2,88), (1,2,89), (1,2,90), (1,2,91), (1,2,92), (1,2,93), (1,2,94), (1,2,95), (1,2,96), (1,2,97), (1,2,98), (1,2,99), (1,2,100), (1,2,101), (1,2,102), (1,2,103), (1,2,104), (1,2,105), (1,2,106), (1,2,107), (1,2,108), (1,2,109), (1,2,110), (1,2,111), (1,2,112), (1,2,113), (1,2,114), (1,2,115), (1,2,116), (1,2,117), (1,2,118), (1,2,119), (1,2,120), (1,2,121), (1,2,122), (1,2,123), (1,2,124), (1,2,125), (1,2,126), (1,2,127), (1,2,128), (1,2,129), (1,2,130), (1,2,131), (1,2,132), (1,2,133), (1,2,134), (1,2,135), (1,2,136), (1,2,137), (1,2,138), (1,2,139), (1,2,140), (1,2,141), (1,2,142), (1,2,143), (1,2,144), (1,2,145), (1,2,146), (1,2,147), (1,2,148), (1,2,149), (1,2,150), (1,2,151), (1,2,152), (1,2,153), (1,2,154), (1,2,155), (1,2,156), (1,2,157), (1,2,158), (1,2,159), (1,2,160), (1,2,161), (1,2,162), (1,2,163), (1,2,164), (1,2,165), (1,2,166), (1,2,167), (1,2,168), (1,2,169), (1,2,170), (1,2,171), (1,2,172), (1,2,173), (1,2,174), (1,2,175), (1,2,176), (1,2,177), (1,2,178), (1,2,179), (1,2,180), (1,2,181), (1,2,182), (1,2,183), (1,2,184), (1,2,185), (1,2,186), (1,2,187), (1,2,188), (1,2,189), (1,2,190), (1,2,191), (1,2,192), (1,2,193), (1,2,194), (1,2,195), (1,2,196), (1,2,197), (1,2,198), (1,2,199), (1,2,200), (1,2,201), (1,2,202), (1,2,203), (1,2,204), (1,2,205), (1,2,206), (1,2,207), (1,2,208), (1,2,209), (1,2,210), (1,2,211), (1,2,212), (1,2,213), (1,2,214), (1,2,215), (1,2,216), (1,2,217), (1,2,218), (1,2,219), (1,2,220), (1,2,221), (1,2,222), (1,2,223), (1,2,224), (1,2,225), (1,2,226), (1,2,227), (1,2,228), (1,2,229), (1,2,230), (1,2,231), (1,2,232), (1,2,233), (1,2,234), (1,2,235), (1,2,236), (1,2,237), (1,2,238), (1,2,239), (1,2,240), (1,2,241), (1,2,242), (1,2,243), (1,2,244), (1,2,245), (1,2,246), (1,2,247), (1,2,248), (1,2,249), (1,2,250), (1,2,251), (1,2,252), (1,2,253), (1,2,254), (1,2,255), (1,2,256), (1,2,257), (1,2,258), (1,2,259), (1,2,260), (1,2,261), (1,2,262), (1,2,263), (1,2,264), (1,2,265), (1,2,266), (1,2,267), (1,2,268), (1,2,269), (1,2,270), (1,2,271), (1,2,272), (1,2,273), (1,2,274), (1,2,275), (1,2,276), (1,2,277), (1,2,278), (1,2,279), (1,2,280), (1,2,281), (1,2,282), "
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return [i for i in range(len(test_list)) if test_list[i][0] < test_list[i][-1]]\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # The function returns tuple(tuple)\n    return tuple(test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    assert all(isinstance(t, tuple) for t in test_list), 'input should be a tuple'\n    assert len(test_list) >= 2, 'input list should not be empty'\n    assert isinstance(K, int), 'K should be a integer'\n    assert K > 0, 'K should be greater than zero'\n    assert isinstance(test_list[0], tuple), 'first element of list should be tuple'\n    assert all(isinstance(t, tuple) for t in test_list[1:]), 'last element of list should not be a tuple'\n    assert all(isinstance(t, int) for t in test_list[1:]), 'first element of list should be an integer'\n    if not isinstance(test_list[0], tuple):\n        raise TypeError('first element of list should be tuple')\n    if not isinstance(test_list[-1], tuple):\n        raise TypeError('last element of list should be tuple')\n    if not isinstance(test_list[-1][0], int):\n        raise TypeError('last element of list should be an integer')\n    if not isinstance(test_list[-1][1], int):\n        raise TypeError('last element of list should be an integer')\n    if test_list[-1][2] < 0:\n        raise ValueError('last element of list should be a nonnegative integer')\n    if test_list[-1][2] > test_list[-2][2]:\n        raise ValueError('last element of list should be a greater than current second element')\n    return test_list[-1][1]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l4 = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    l4.append(l1[i])\n    return l4\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1).intersection(l2, l3))\n    \ndef select_index(l, e):\n    '''\n    We say that an element e is common for all elements of the list l. What is the index of e in the list l? The function returns the index of e.\n    '''\n    i=l.index(e)\n    return i\n    \ndef bfs(l):\n    '''\n    We say that we want to perform BFS on the lists l1, l2, l3. Assume that all the elements of the lists are non-repeating.\n    We write a function called bfs that takes a list l and returns a list of indices of all elements that occur in that list. If there are no elements that occur in the list, the function should return an empty list.\n    '''\n    visited = list(range(len(l)))\n    visited_idx = []\n    for i in range(len(l)):\n        if i not in visited_idx:\n            bfs_list = []\n            bfs_list.append(i)\n            queue = deque()\n            queue.append(i)\n            visited[i] = True\n            while queue:\n                temp = queue.popleft()\n                for k in range(len(l)):\n                    if l[k] == temp:\n                        if k not in visited_idx:\n                            bfs_list.append(k)\n                            visited_idx.append(k)\n                        if k not in bfs_list:\n                            bfs_list.append(k)\n            if len(bfs_list) == 0:\n                continue\n            else:\n                return bfs_list\n    return []\n    \ndef max_index(l):\n    '''\n    We say that we want to find the index of the maximum element in the list l, if there are no elements in the list, return -1.\n    '''\n    temp_max = -1\n    for i in range(len(l)):\n        if l[i] > temp_max:\n            temp_max = l[i]\n    return temp_max\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for x in range(len(l1)):\n        for y in range(len(l2)):\n            for z in range(len(l3)):\n                if l1[x] == l2[y] == l3[z]:\n                    common.append(l1[x])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    i=0\n    common_list = []\n    while i<len(l1):\n        if l1[i] in l2 and l2[i] in l3:\n            common_list.append(l1[i])\n            i=i+1\n        elif l1[i] in l3 and l3[i] in l2:\n            common_list.append(l1[i])\n            i=i+1\n        elif l1[i] in l2 and l2[i] in l3:\n            common_list.append(l1[i])\n            i=i+1\n        elif l1[i] in l3 and l3[i] in l2:\n            common_list.append(l1[i])\n            i=i+1\n    return common_list\n    \ndef list_to_dict(l1,l2,l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a dictionary.\n    '''\n    common_dict = {}\n    i=0\n    while i<len(l1):\n        if l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l1[i] in l3 and l3[i] in l2:\n            common_dict[l1[i]] = l3[i]\n        elif l1[i] in l2 and l2[i] in l3:\n            common_dict[l1[i]] = l2[i]\n        elif l"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # [10, 4, 5, 6, 7, 8, 9, 1, 4, 4, 4, 4, 6, 6, 7, 7, 8, 9]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            index_list.append(l1[i])\n            index_list.append(l2[l2.index(l1[i])])\n            index_list.append(l3[l3.index(l1[i])])\n    return index_list\n    \ndef count_elem(l1, l2, l3):\n    '''\n    Write a function that returns the number of elements in a list that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            counter = counter + 1\n    return counter\n    \ndef get_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            index_list.append(l1[i])\n            index_list.append(l2[l2.index(l1[i])])\n            index_list.append(l3[l3.index(l1[i])])\n    return index_list\n    \ndef count_elem_sublist(l1, l2, l3, l4):\n    '''\n    Write a function that returns the number of elements in a sublist that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3 and l3[l3.index(l1[i])] in l4:\n            counter = counter + 1\n    return counter\n    \ndef get_index_list_sublist(l1, l2, l3, l4, l5):\n    '''\n    We say that an element is common for lists l1, l2, l3, l4, l5 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3 and l3[l3.index(l1[i])] in l4 and l4[l4.index(l1[i])] in l5:\n            index_list.append(l1[i])\n            index_list.append(l2[l2.index(l1[i])])\n            index_list.append(l3[l3.index(l1[i])])\n            index_list.append(l4[l4.index(l1[i])])\n            index_list.append(l5[l5.index(l1[i])])\n    return index_list\n    \ndef count_elem_sublist_sublist(l1, l2, l3, l4, l5):\n    '''\n    Write a function that returns the number of elements in a sublist that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3 and l3[l3.index(l1[i])] in l4 and l4[l4.index(l1[i])] in l5 and l5[l5.index(l1[i])] in l4:\n            counter = counter + 1\n    return counter\n    \ndef count_elem_inlist(l1, l2, l3):\n    '''\n    Write a function that returns the number of elements in a list that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            counter = counter + 1\n    return counter\n    \ndef count_elem_inlist_inlist(l1, l2, l3):\n    '''\n    Write a function that returns the number of elements in a list that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            counter = counter + 1\n    return counter\n    \ndef count_elem_common(l1, l2, l3):\n    '''\n    Write a function that returns the number of elements in a list that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            counter = counter + 1\n    return counter\n    \ndef count_elem_sublist_sublist(l1, l2, l3, l4, l5):\n    '''\n    Write a function that returns the number of elements in a sublist that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3 and l3[l3.index(l1[i])] in l4 and l4[l4.index(l1[i])] in l5 and l5[l5.index(l1[i])] in l4:\n            counter = counter + 1\n    return counter\n    \ndef count_elem_inlist_inlist(l1, l2, l3):\n    '''\n    Write a function that returns the number of elements in a list that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3 and l3[l3.index(l1[i])] in l4:\n            counter = counter + 1\n    return counter\n    \ndef count_elem_inlist_common(l1, l2, l3):\n    '''\n    Write a function that returns the number of elements in a list that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            counter = counter + 1\n    return counter\n    \ndef count_elem_common_sublist(l1, l2, l3):\n    '''\n    Write a function that returns the number of elements in a list that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            counter = counter + 1\n    return counter\n    \ndef count_elem_common_sublist_inlist(l1, l2, l3):\n    '''\n    Write a function that returns the number of elements in a list that are common to a given list.\n    '''\n    counter = 0\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[l1.index(l1[i])] in l3:\n            counter = counter + 1\n    return counter\n    \ndef count_elem_common_inlist(l1, "
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            index.append(l1[i])\n        if l2[i] in l3:\n            index.append(l2[i])\n    return index\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return []\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # use the min() method\n    return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # If list has one element, return it.\n    if len(numbers) < 2:\n        return numbers[0]\n    # Find the first element with the smallest value.\n    smallest = min(numbers)\n    # Find the second smallest element.\n    second = min(numbers)\n    # Assign smallest, second and return them as a tuple.\n    return smallest, second\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Check if the input is a list\n    if isinstance(numbers, list):\n        # 2nd smallest number is the smallest in the list\n        if len(numbers) > 1:\n            # Then index of the 2nd smallest number\n            index = 0\n            for item in numbers:\n                # If the current item is smaller than the smallest, then it's the 2nd smallest\n                if item < numbers[index]:\n                    # We want to keep the index for the 2nd smallest as the 1st smallest\n                    index = numbers.index(numbers[index])\n                index += 1\n            # The 2nd smallest is the second smallest in the list\n            return numbers[index]\n        # 2nd smallest is the smallest in the list\n        else:\n            # The 1st smallest is the 2nd smallest\n            return numbers[0]\n    # If it is not a list, it is not a number\n    else:\n        # Not an int, it's an invalid input\n        raise TypeError(\"'numbers' must be a list or a number.\")\n    \n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    numbers.sort()\n    second = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < second:\n            second = numbers[i]\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    second_smallest = numbers[1]\n    for i in range(len(numbers)):\n        if numbers[i] < numbers[0]:\n            second_smallest = numbers[i]\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    lowest = numbers[1]\n    count = 2\n    while lowest >= count:\n        if (lowest % count == 0):\n            lowest = lowest * 10 + count\n        else:\n            lowest = lowest * 10 + count\n        count += 1\n    return lowest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # TODO: Create a function that takes a list as input\n    # and return the second smallest number in it.\n    numbers_list = list(numbers)\n    numbers_list.sort()\n    return numbers_list[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # A quick sort implementation.\n    numbers.sort()\n    return numbers[-2]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = sorted(numbers)[1]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Determine the second smallest.\n    second_smallest = min(numbers)\n    # Find the index where the second smallest number occurs.\n    second_smallest_index = numbers.index(second_smallest)\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # empty string\n    if len(text) == 0:\n        return False\n    # one or more 'a'\n    if len(text)!= 0 and len(text.split(' ')) == 1:\n        return False\n    # not a string\n    if not type(text) == str:\n        return False\n    # one or more 'b'\n    if len(text.split(' '))!= 1:\n        return False\n    # return a string\n    return True\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    x = 0\n    for i in text:\n        if i.lower() == \"a\":\n            x += 1\n    if x == 0:\n        return True\n    else:\n        return False\ndef text_match_zero_one_contains_one(text):\n    '''\n    Write a function that matches a string that contains 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    x = 0\n    for i in text:\n        if re.match(r'(a)(b)',i):\n            x += 1\n    if x == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    m = re.search('a(\\w+)b',text)\n    if m:\n        return m.group(1)\n    else:\n        return False\n        \ndef text_match_zero_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    m = re.search('a(\\w+)',text)\n    if m:\n        return m.group(1)\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a[b]', text)\n    if result!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(bc)?b')\n    text_match = pattern.search(text)\n    if text_match:\n        return text_match.group()\n    else:\n        return text\ntext = 'aaaabbbcccddddddaaabbbbddddddbbbbbbcddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall('a+b', text)\n    if len(result) == 0:\n        return text\n    else:\n        return result[0]\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a(b|c)?'\n    return re.search(regex,text)\n    \ndef text_match_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a(b|c|d)'\n    return re.search(regex,text)\n    \ndef text_match_zero_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' followed by two or more 'e' or 'f' or 'g' or 'h'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a(b|c|d)e(f|g|h)'\n    return re.search(regex,text)\n    \ndef text_match_zero_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' followed by one or more 'e' or 'f' or 'g' or 'h' followed by two or more 'i' or 'j' or 'k' or 'l'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a(b|c|d|e|f|g|h|i|j|k|l)'\n    return re.search(regex,text)\n    \ndef text_match_zero_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' or 'c' or 'd' followed by one or more 'e' or 'f' or 'g' or 'h' followed by one or more 'i' or 'j' or 'k' or 'l' followed by one or more'm' or 'n' or 'o' or 'p'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p)'\n    return re.search(regex,text)\n    \ndef text_match_zero_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q)'\n    return re.search(regex,text)\n    \ndef text_match_zero_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q)'\n    return re.search(regex,text)\n    \ndef text_match_zero_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q)'\n    return re.search(regex,text)\n    \ndef text_match_zero_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q)'\n    return re.search(regex,text)\n    \ndef text_match_zero_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one or more 'l' followed by one or more'm' followed by one or more 'n' followed by one or more 'o' followed by one or more 'p' followed by one or more 'q'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a(b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q)'\n    return re.search(regex,text)\n    \ndef text_match_zero_eleven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b' followed by one or more 'c' followed by one or more 'd' followed by one or more 'e' followed by one or more 'f' followed by one or more 'g' followed by one or more 'h' followed by one or more 'i' followed by one or more 'j' followed by one or more 'k' followed by one o"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    a=re.findall(\"\\[\\[a.+?\\]\\]\",text)\n    b=re.findall(\"\\[\\[b.+?\\]\\]\",text)\n    final_a=[]\n    final_b=[]\n    for i in a:\n        final_a.append(i.replace(\"[\",\"\"))\n    for i in b:\n        final_b.append(i.replace(\"[\",\"\"))\n    if \"a\" not in final_a and \"b\" not in final_b:\n        return \"Nothing Matched\"\n    else:\n        return \"The text \" + str(text) + \" has 'a' followed by one or more 'b's\"\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # matches the string\n    matches = re.search(r'a\\b',text)\n    if matches == None:\n        return True\n    # return matches.group()\n    return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a+b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    num_pairs = 0\n    # Count reverse pairs\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # Get characters from list\n            first_char = test_list[i]\n            second_char = test_list[j]\n            # Check if the characters are equal\n            if first_char == second_char:\n                num_pairs += 1\n    print(num_pairs)\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] in reverse_dict:\n            reverse_dict[test_list[i]] += 1\n        else:\n            reverse_dict[test_list[i]] = 1\n    for key in reverse_dict:\n        count += reverse_dict[key]\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #count each of the items as a pair\n    #then use the return value as an array\n    #divid by 2 since the numbers are returned in reverse order\n    #and we want them to be in a list\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    dic = {}\n    # Iterate through the string and create the dic for each key and its value\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            temp = test_list[i] + test_list[j]\n            if temp in dic:\n                dic[temp] = dic[temp] + 1\n            else:\n                dic[temp] = 1\n    # Convert the dictionary into a list to get it as the answer\n    answer = []\n    for key in dic:\n        answer.append([key,dic[key]])\n    answer.sort()\n    return answer\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #Base Cases\n    if(len(test_list) == 1):\n        return 1\n    #Break the string into each letter\n    string_list = list(test_list)\n    i = 0\n    j = 0\n    string_list.reverse()\n    #Counts the number of pairs\n    count = 0\n    while(i < len(test_list) - 1 and j < len(string_list)):\n        #if the number is a pair\n        if(string_list[i] == string_list[j]):\n            count += 1\n            i += 1\n            j += 1\n        else:\n            #if it's not a pair\n            i += 1\n    #returns the number of pairs\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            count +=1\n        \n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #answer = 0\n    #for i in range(len(test_list)):\n        #for j in range(i+1, len(test_list)):\n            #if test_list[i] == test_list[j]:\n                #answer += 1\n    #return answer\n    \n    answer = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                answer += 1\n    return answer\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(len(test_list) - 1):\n            if test_list[i] == test_list[j] and i!= j:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # your code here\n    count_reverse_pairs = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i+1]:\n            count_reverse_pairs += 1\n        else:\n            pass\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        if list1[i] in count:\n            count[list1[i]] += 1\n        else:\n            count[list1[i]] = 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for element in list1:\n        if element not in unique_dict:\n            unique_dict[element] = 1\n        else:\n            unique_dict[element] = unique_dict[element] + 1\n    return unique_dict\n    \n    \ndef task1(list1):\n    '''\n    Given a list of integers, returns a dictionary where each key is a number that appears at least once in the list, and the value is the number of times the key appears.\n    '''\n    unique_dict = unique_sublists(list1)\n    return dict(unique_dict)\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sub_dict = {}\n    sub_list = []\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # your code here\n    # print(list1)\n    # print(type(list1))\n    count = dict()\n    for i in range(0,len(list1)):\n        # print(list1[i])\n        sublist = list1[i]\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sub_dict = {}\n    sub_list = []\n    for item in list1:\n        if item not in sub_dict:\n            sub_dict[item] = 1\n        else:\n            sub_dict[item] += 1\n    for item in sub_dict:\n        sub_list.append((item, sub_dict[item]))\n    return sub_list\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counter = {}\n    for i in range(0, len(list1)):\n        if list1[i] not in counter:\n            counter[list1[i]] = 1\n        else:\n            counter[list1[i]] += 1\n    return counter\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    my_dict = {}\n    for i in range(len(list1)):\n        my_dict[tuple(list1[i])] = my_dict.get(tuple(list1[i]), 0) + 1\n    return my_dict"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in list1:\n        if i not in dict.keys():\n            dict[i] = 1\n        else:\n            dict[i] += 1\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in list1:\n        count[i] = list1.count(i)\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for item in list1:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n    except ValueError:\n        return False\n    else:\n        return num.isdigit()\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if(num[0] == '-'):\n        num = num[1:]\n    num_list = []\n    for char in num:\n        if(char.isdigit()):\n            num_list.append(char)\n        else:\n            break\n    num_list = list(filter(None, num_list))\n    num_list = list(map(int, num_list))\n    for i in num_list:\n        if(i == 0):\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return is_float(num) and len(num) == 2\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) > 3 and num[-3:] == '00':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in str(num):\n        return False\n    if len(str(num)) == 1:\n        return True\n    if num < 0:\n        return False\n    for i in str(num):\n        if i.isalpha() or i.isdigit():\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = int(num)\n    except ValueError:\n        return False\n    else:\n        return (len(str(num)) == 1) and is_integer(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num.isnumeric():\n        return False\n    \n    if len(num) > 0:\n        if num[-1] == '.':\n            return False\n        elif num[-2:] == '0' or num[-2:] == '.' or num[-1] == '.':\n            return False\n    else:\n        return False\n    \n    \ndef main():\n    num = int(input())\n    \n    for i in range(num):\n        input_str = input()\n        if is_decimal(input_str):\n            print(\"{0:b}\".format(input_str))\n        else:\n            print(input_str)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    lenght = len(num)\n    if lenght == 1:\n        return True\n    elif lenght == 2:\n        if num[0] == '-':\n            return False\n        else:\n            return True\n    elif lenght == 3:\n        if num[0] == '-':\n            if num[1] == '0':\n                return False\n            elif num[1] == '1':\n                return True\n            else:\n                return False\n        else:\n            if num[1] == '0':\n                return False\n            elif num[1] == '1':\n                return True\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # if string is less than two, it is not a decimal number\n    if len(num) < 2:\n        return False\n    \n    # if string is not a decimal number, it is not a decimal number\n    if not num.isdecimal():\n        return False\n    \n    # get number\n    num = num[:len(num) - 1]\n    \n    # if string is part of a positive integer, it is not a decimal number\n    if num.isdecimal():\n        return False\n    \n    # get number\n    int_num = int(num)\n    \n    # if integer is too large, it is not a decimal number\n    if int_num > 2 ** (len(num) - 1):\n        return False\n    \n    # if integer is too small, it is not a decimal number\n    if int_num < 2:\n        return False\n    \n    # if integer is in the range of 2 and the string is not a decimal number, it is not a decimal number\n    if int_num in range(2, len(num) + 1):\n        return False\n    \n    # if integer is in the range of 2 and the string is a decimal number, it is not a decimal number\n    return int_num in range(2, len(num) + 1)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    from decimal import Decimal\n    try:\n        Decimal(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # TODO: Remove pass and write your logic here\n    for i in range(0,len(arr)):\n        if arr.count(arr[i])!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            count = count + 1\n    if count == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # To perform this task, I need to do a series of comparisons to find the unique elements in the list.\n    # I used a basic condition to make sure I only have one distinct element.\n    # in case a list contains more than one element, it will return False\n    # to find the unique element, I can use the built in function count.\n    # when we do this, I know the list contains only one element, so it's True.\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #create an empty dictionary\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # make a dict from number to its position\n    # in arr\n    # keep a count of elements in arr\n    # if count > 1, return True\n    # otherwise return False\n    # write a loop to iterate through arr\n    # if count > 0, then return True\n    # else, return False\n    \n    # initialize an empty string\n    str_arr = \"\"\n    \n    # iterate through arr\n    for i in range(0, len(arr)):\n        \n        # if count > 1, return True\n        if arr[i] not in str_arr:\n            \n            # if count > 0, then return True\n            if arr[i] not in str_arr:\n                \n                # if count > 0, return True\n                return True\n        \n        # add element to str_arr\n        str_arr += arr[i]\n    \n    # if count == 0, return True\n    if arr[i] in str_arr:\n        \n        # if count == 0, return False\n        return False\n    \n    # return False\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count_array = []\n    for element in arr:\n        count_array.append(arr.count(element))\n    if len(set(count_array))==1:\n        print(True)\n    else:\n        print(False)\n    # This code is contributed by user\n    # unique_element = sorted(list(set(arr)))\n    # print(unique_element)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    hashTable = {}\n    for el in arr:\n        if el not in hashTable:\n            hashTable[el] = 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    lst = []\n    for i in arr:\n        lst.append(i)\n    return len(set(lst)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for num in arr:\n        if num!= arr[0]:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    '''\n    Input : \n        arr : List[int]\n    Output :\n        True or False\n    '''\n    # Solution\n    if arr.count(arr[0]) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 <= 4:\n            return True\n        elif monthnum3 <= 7:\n            return True\n        elif monthnum3 <= 11:\n            return True\n        elif monthnum3 <= 12:\n            return True\n    else:\n        return False\n    \ndef check_number(n):\n    '''\n    Write a function to check whether the given number is a valid number or not.\n    '''\n    if n.isdigit():\n        if n.isalpha():\n            if n.isdigit():\n                if int(n) >= 1 and int(n) <= 9:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef print_formatted(number):\n    '''\n    Function that returns the formatted version of the number.\n    '''\n    # Step 1: Str-Components\n    number_decimal = int(number)\n    # Step 2: Find the full number.\n    str_number = str(number_decimal)\n    # Step 3: Check if there is 0.\n    if str_number.count('0') == 0:\n        # Step 4: Check the number is not negative or positive.\n        if not number_decimal < 0:\n            return 'number is negative'\n        else:\n            return 'number is positive'\n    else:\n        # Step 5: Remove the 0 and number of the zeros.\n        str_number = str_number.lstrip('0')\n        # Step 6: Remove the 0\n        str_number = str_number.rstrip('0')\n        # Step 7: Check if there are any more digits.\n        if not str_number.isdigit():\n            return 'number is not a number'\n        else:\n            return 'number is a number'\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return 'Invalid'\n    if monthnum3 == 1:\n        return True\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7:\n            return True\n        elif monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9:\n            return True\n        elif monthnum3 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    is_monthnum3 = 0\n    if len(monthnum3) == 3:\n        is_monthnum3 = True\n    else:\n        is_monthnum3 = False\n        monthnum3 = monthnum3[0]\n    return is_monthnum3\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # if a number is not a number in the correct format, you have to print \u201cplease enter the right value of the month\u201d\n    if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n        print(\"Please enter a valid value for the month\")\n    # if a number is a number, you have to print \u201ci have no error\u201d\n    else:\n        if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n            print(\"i have no error\")\n        # if a number is a number, you have to print \u201ci have a error\u201d\n        else:\n            if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                print(\"i have a error\")\n            # if a number is not a number, you have to print \u201ci have a problem\u201d\n            else:\n                if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                    print(\"i have a problem\")\n                # if a number is a number, you have to print \u201ci have a problem\u201d\n                else:\n                    if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                        print(\"i have a problem\")\n                    # if a number is not a number, you have to print \u201ci have a problem\u201d\n                    else:\n                        if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                            print(\"i have a problem\")\n                        # if a number is not a number, you have to print \u201ci have a problem\u201d\n                        else:\n                            if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                                print(\"i have a problem\")\n                            # if a number is not a number, you have to print \u201ci have a problem\u201d\n                            else:\n                                if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                                    print(\"i have a problem\")\n                                # if a number is not a number, you have to print \u201ci have a problem\u201d\n                                else:\n                                    if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                                        print(\"i have a problem\")\n                                    # if a number is not a number, you have to print \u201ci have a problem\u201d\n                                    else:\n                                        if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                                            print(\"i have a problem\")\n                                    # if a number is not a number, you have to print \u201ci have a problem\u201d\n                                    else:\n                                        if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                                            print(\"i have a problem\")\n                                        # if a number is not a number, you have to print \u201ci have a problem\u201d\n                                    else:\n                                        if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                                            print(\"i have a problem\")\n                                    # if a number is not a number, you have to print \u201ci have a problem\u201d\n                                    else:\n                                        if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                                            print(\"i have a problem\")\n                                        # if a number is not a number, you have to print \u201ci have a problem\u201d\n                                    else:\n                                        if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                                            print(\"i have a problem\")\n                                        # if a number is not a number, you have to print \u201ci have a problem\u201d\n                                    else:\n                                        if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum3!= '8' and monthnum3!= '9' and monthnum3!= '10' and monthnum3!= '11' and monthnum3!= '12':\n                                            print(\"i have a problem\")\n                                        # if a number is not a number, you have to print \u201ci have a problem\u201d\n                                    else:\n                                        if monthnum3!= '2' and monthnum3!= '3' and monthnum3!= '4' and monthnum3!= '5' and monthnum3!= '6' and monthnum3!= '7' and monthnum"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    def check_monthnumber_number_helper(monthnum3,monthnum4):\n        '''\n        Write a helper function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n        '''\n        if int(monthnum3) > 12:\n            return False\n        if int(monthnum3) < 1:\n            return False\n        if int(monthnum3) == 1:\n            if int(monthnum4) < 31:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 2:\n            if int(monthnum4) < 28:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 3:\n            if int(monthnum4) < 31:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 4:\n            if int(monthnum4) < 30:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 5:\n            if int(monthnum4) < 31:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 6:\n            if int(monthnum4) < 30:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 7:\n            if int(monthnum4) < 31:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 8:\n            if int(monthnum4) < 31:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 9:\n            if int(monthnum4) < 31:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 10:\n            if int(monthnum4) < 30:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 11:\n            if int(monthnum4) < 31:\n                return True\n            else:\n                return False\n        if int(monthnum3) == 12:\n            if int(monthnum4) < 31:\n                return True\n            else:\n                return False\n        return False\n    return check_monthnumber_number_helper(monthnum3,monthnum4)\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 == 1 or monthnum3 == 2:\n            if monthnum3 == 1:\n                monthnum3 = 3\n            else:\n                monthnum3 = 4\n            if monthnum3 == 4 or monthnum3 == 5:\n                monthnum3 = 6\n            else:\n                monthnum3 = 7\n            if monthnum3 == 7 or monthnum3 == 8:\n                monthnum3 = 9\n            else:\n                monthnum3 = 10\n            if monthnum3 == 9 or monthnum3 == 10:\n                monthnum3 = 11\n            else:\n                monthnum3 = 12\n            if monthnum3 == 12 or monthnum3 == 1:\n                monthnum3 = 1\n            else:\n                monthnum3 = monthnum3 + 1\n            return monthnum3\n    else:\n        print('Error: Enter a valid month number.')\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if not 0 < monthnum3 < 13:\n        raise ValueError(\"Input number is not between 0 and 12\")\n    if monthnum3 == 1:\n        if 1 <= monthnum3 <= 3:\n            return False\n        else:\n            return True\n    elif monthnum3 == 4 or monthnum3 == 5 or monthnum3 == 6 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 9 or monthnum3 == 10 or monthnum3 == 11:\n        if 1 <= monthnum3 <= 3:\n            return False\n        elif 4 <= monthnum3 <= 6:\n            return False\n        elif 7 <= monthnum3 <= 9:\n            return False\n        elif 10 <= monthnum3 <= 12:\n            return False\n    else:\n        if 1 <= monthnum3 <= 3:\n            return False\n        elif 4 <= monthnum3 <= 6:\n            return False\n        elif 7 <= monthnum3 <= 9:\n            return False\n        elif 10 <= monthnum3 <= 12:\n            return False\n        else:\n            raise ValueError(\"This month number is not between 1 and 12\")\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if type(monthnum3) == int:\n        if int(monthnum3) == monthnum3:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Approach 1: Using an array of size n, store all elements\n    #         within a given index in a new array, and return the minimum difference\n    #         as a single variable\n    # Time O(n*2)\n    # Space O(1)\n    # n = length of array\n    diff = [0]*n\n    for i in range(n):\n        diff[i] = arr[i] - arr[i-1]\n    # For each index i\n    # difference[i] = minimum difference between arr[i] and arr[i-1]\n    for i in range(n-1):\n        for j in range(i+1,n):\n            diff[j] = abs(arr[i] - arr[j])\n    min_diff = min(diff)\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    low = 0\n    hi = 0\n    for i in range(0,n-1):\n        # print(arr[i])\n        # print(arr[i+1])\n        temp = arr[i]\n        arr[i] = arr[i+1]\n        arr[i+1] = temp\n        # print(arr[i])\n        # print(arr[i+1])\n        # print(\"\")\n        if temp - arr[i] == arr[i+1] - arr[i]:\n            # print(\"intersect\")\n            min_diff = min(min_diff,abs(arr[i]-arr[i+1]))\n            hi = max(hi,abs(arr[i]-arr[i+1]))\n        else:\n            # print(\"diff\")\n            min_diff = min(min_diff,arr[i]-arr[i+1])\n        # print(\"\")\n        arr[i+1] = temp\n    # print(\"min\")\n    # print(min_diff)\n    arr[n-1] = arr[0]\n    # print(\"\")\n    # print(arr[n-1])\n    # print(\"\")\n    return min_diff,hi\n    \ndef print_solution(arr,n):\n    '''\n    Print the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    print(arr)\n    low = 0\n    hi = 0\n    for i in range(0,n-1):\n        # print(arr[i])\n        # print(arr[i+1])\n        temp = arr[i]\n        arr[i] = arr[i+1]\n        arr[i+1] = temp\n        # print(arr[i])\n        # print(arr[i+1])\n        # print(\"\")\n        if temp - arr[i] == arr[i+1] - arr[i]:\n            # print(\"intersect\")\n            low = min(low,abs(arr[i]-arr[i+1]))\n            hi = max(hi,abs(arr[i]-arr[i+1]))\n        else:\n            # print(\"diff\")\n            low = min(low,arr[i]-arr[i+1])\n        # print(\"\")\n        arr[i+1] = temp\n    # print(\"min\")\n    # print(low)\n    # print(\"\")\n    # print(arr[n-1])\n    # print(\"\")\n    return low\n    "
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    l=[]\n    for i in range(n):\n        l.append(arr[i])\n    min_diff = abs(l[0]-l[1])\n    for i in range(2,n):\n        if l[i]!= l[i-1]:\n            min_diff = min(min_diff,abs(l[i]-l[i-1]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # define minimum diff as 1 if the first element is less than the second element\n    minimum = 1\n    if (n % 2 == 0):\n        minimum = min(arr[0],arr[1])\n    else:\n        minimum = min(arr[1],arr[0])\n    \n    # loop through all the elements in the array until we reach the end of the array. \n    # at this point, the sum of the array will be less than the minimum\n    # so we'll add the difference to the minimum, which is then returned\n    for i in range(0,n-1):\n        if (arr[i] > minimum):\n            minimum = minimum + arr[i]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min = arr[0] - arr[1]\n    i = 1\n    j = 2\n    while (i < n and j < n):\n        if (arr[i] - arr[j] < min):\n            min = arr[i] - arr[j]\n        \n        if (arr[j] - arr[i] < min):\n            min = arr[j] - arr[i]\n        \n        if (arr[i] < arr[j]):\n            i += 1\n        else:\n            j += 1\n    return min\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = abs(arr[0] - arr[-1])\n    for i in range(1, n):\n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    # Return the minimum difference between any two elements.\n    min_diff = arr[0] - arr[1]\n    for i in range(2, n):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return arr[0] - arr[1]\n    else:\n        # Pick up the minimum\n        min = find_min_diff(arr,n-1)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    l=[]\n    for i in range(n):\n        l.append(arr[i])\n    diff=abs(l[0]-l[1])\n    for i in range(2,n):\n        diff=min(abs(l[i]-l[i-1]),diff)\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i=0\n    j=0\n    min_diff=sys.maxsize\n    while i<len(arr) and j<len(arr):\n        if arr[i]<arr[j]:\n            min_diff=arr[i]-arr[j]\n            i+=1\n        else:\n            j+=1\n    return min_diff\n    \n    \n    \n    \ndef min_diff_array(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff=find_min_diff(arr,n)\n    #min_diff=sys.maxsize\n    while n>0:\n        #min_diff=sys.maxsize\n        if arr[n]<min_diff:\n            min_diff=arr[n]\n        n-=1\n    return min_diff\n    \n    \n    \n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for s in str:\n        if s.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l = []\n    if str == \"\":\n        return 0\n    else:\n        for i in str:\n            if i.isdigit():\n                l.append(i)\n        return len(l)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    a = 0\n    for i in str:\n        a = a+1\n    print(a)\n    return a\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if not str:\n        return 0\n    else:\n        if str[0] in ['0','1']:\n            return 1 + number_ctr(str[1:])\n        else:\n            return 1 + number_ctr(str[1:]) - 1\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\ndef remove_space(str):\n    '''\n    Write a python function to remove all spaces from a given string.\n    '''\n    result = \"\"\n    for i in str:\n        if i!= \" \":\n            result += i\n    return result\ndef capitalize_first(str):\n    '''\n    Write a python function to capitalize all letters in a given string.\n    '''\n    result = \"\"\n    for i in str:\n        if i =='':\n            result += i.upper()\n        else:\n            result += i\n    return result\ndef remove_last(str):\n    '''\n    Write a python function to remove the last letter from a given string.\n    '''\n    result = \"\"\n    for i in str:\n        if i!= \" \":\n            result += i\n    return result\ndef remove_space_filler(str):\n    '''\n    Write a python function to remove spaces from the given string.\n    '''\n    result = \"\"\n    for i in str:\n        if i == \" \":\n            result += i\n        else:\n            result += i\n    return result\ndef remove_all_space(str):\n    '''\n    Write a python function to remove all spaces from a given string.\n    '''\n    result = \"\"\n    for i in str:\n        if i == \" \":\n            result += i\n        else:\n            result += i\n    return result\ndef replace_all_space(str):\n    '''\n    Write a python function to replace all spaces from a given string.\n    '''\n    result = \"\"\n    for i in str:\n        if i == \" \":\n            result += i\n        else:\n            result += \" \"\n    return result\ndef convert_to_string(str):\n    '''\n    Write a python function to convert a given string to a given format.\n    '''\n    result = \"\"\n    for i in str:\n        if i == \" \":\n            result += i\n        else:\n            result += i.upper()\n    return result\ndef find_index(str,val):\n    '''\n    Write a python function to find the position of the given value in a given string.\n    '''\n    result = -1\n    for i in range(len(str)):\n        if str[i] == val:\n            result = i\n    return result\ndef find_index_pos(str,val):\n    '''\n    Write a python function to find the position of the given value in a given string.\n    '''\n    result = -1\n    for i in range(len(str)):\n        if str[i] == val:\n            result = i\n    return result\ndef find_index_start(str,val):\n    '''\n    Write a python function to find the position of the given value in a given string.\n    '''\n    result = -1\n    for i in range(len(str)):\n        if str[i] == val:\n            result = i\n    return result\ndef find_index_end(str,val):\n    '''\n    Write a python function to find the position of the given value in a given string.\n    '''\n    result = -1\n    for i in range(len(str)):\n        if str[i] == val:\n            result = i\n    return result\ndef count_number(str,num):\n    '''\n    Write a python function to count the number of times a given string appears in a given string.\n    '''\n    result = 0\n    for i in str:\n        if i == num:\n            result += 1\n    return result\ndef main():\n    print(\"\\nWelcome to the Python String Counter Program\\n\")\n    print(\"What type of string would you like to test?\")\n    print(\"\\n[1] A series of numbers\\n[2] A series of characters\\n[3] A series of punctuations\\n[4] A series of words\\n[5] A series of simple words\\n[6] A series of string literals\\n[7] All the other strings\")\n    choice = input(\"Please choose a choice: \")\n    print(\"\\nPlease enter a valid number.\")\n    choice = int(choice)\n    if choice in range(1,8):\n        if choice == 1:\n            print(\"\\nA series of numbers\\n\")\n            str = str(input(\"Please enter a string: \"))\n            print(\"The sum of all the numbers in the string is: \")\n            total = 0\n            for i in str:\n                total += int(i)\n            print(total)\n        elif choice == 2:\n            print(\"\\nA series of characters\\n\")\n            str = str(input(\"Please enter a string: \"))\n            print(\"The number of times a given character occurs in a given string: \")\n            count = 0\n            for i in str:\n                count += 1\n            print(count)\n        elif choice == 3:\n            print(\"\\nA series of punctuations\\n\")\n            str = str(input(\"Please enter a string: \"))\n            print(\"The number of times a given character appears in a given string: \")\n            count = 0\n            for i in str:\n                if i == \" \":\n                    count += 1\n            print(count)\n        elif choice == 4:\n            print(\"\\nA series of words\\n\")\n            str = str(input(\"Please enter a string: \"))\n            print(\"The number of times a given word appears in a given string: \")\n            count = 0\n            for i in str:\n                if i == \" \":\n                    count += 1\n            print(count)\n        elif choice == 5:\n            print(\"\\nA series of simple words\\n\")\n            str = str(input(\"Please enter a string: \"))\n            print(\"The number of times a given word appears in a given string: \")\n            count = 0\n            for i in str:\n                if i == \" \":\n                    count += 1\n            print(count)\n        elif choice == 6:\n            print(\"\\nAll the other strings\\n\")\n            str = str(input(\"Please enter a string: \"))\n            print(\"The number of times a given word appears in a given string: \")\n            count = 0\n            for i in str:\n                if i == \" \":\n                    count += 1\n            print(count)\n        elif choice == 7:\n            print(\"\\nAll other strings\\n\")\n            str = str(input(\"Please enter a string: \"))\n            print(\"The number of times a given word appears in a given string: \")\n            count = 0\n            for i in str:\n                if i == \" \":\n                    count += 1\n            print(count)\n        else:\n            print(\"Invalid input\")\n    else:\n        print(\"Invalid input\")\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # Assuming number is 1 digit at a time.\n    ctr = 0\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] == '0' or str[i] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = len(str)\n    return sum(1 for x in str if x.isdigit())\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str.strip(' ').replace(' ',''))\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n == 0):\n        return 0\n    if (n < 0):\n        return 0\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 2\n    while n > i:\n        if n % i == 0:\n            return True\n        i += 2\n        if i == 3:\n            n -= 1\n    return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n == 0):\n        return n\n    if (n % 2) == 1:\n        return is_polite(n-1)\n    else:\n        return is_polite(n-1) + is_polite(n-2)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    divisor = math.factorial(n)\n    if (divisor == 1):\n        return False\n    return n % divisor == 0\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * is_polite(n - 1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    elif n == 2: return 2\n    elif n == 3: return 5\n    elif n == 4: return 8\n    elif n == 5: return 13\n    elif n == 6: return 21\n    elif n == 7: return 34\n    elif n == 8: return 56\n    elif n == 9: return 78\n    elif n == 10: return 103\n    elif n == 11: return 121\n    elif n == 12: return 132\n    elif n == 13: return 141\n    elif n == 14: return 142\n    elif n == 15: return 151\n    elif n == 16: return 164\n    elif n == 17: return 175\n    elif n == 18: return 178\n    elif n == 19: return 185\n    elif n == 20: return 196\n    elif n == 21: return 217\n    elif n == 22: return 222\n    elif n == 23: return 231\n    elif n == 24: return 242\n    elif n == 25: return 244\n    elif n == 26: return 245\n    elif n == 27: return 256\n    elif n == 28: return 257\n    elif n == 29: return 259\n    elif n == 30: return 262\n    elif n == 31: return 270\n    elif n == 32: return 272\n    elif n == 33: return 285\n    elif n == 34: return 290\n    elif n == 35: return 292\n    elif n == 36: return 297\n    elif n == 37: return 301\n    elif n == 38: return 314\n    elif n == 39: return 327\n    elif n == 40: return 341\n    elif n == 41: return 344\n    elif n == 42: return 343\n    elif n == 43: return 345\n    elif n == 44: return 348\n    elif n == 45: return 355\n    elif n == 46: return 357\n    elif n == 47: return 360\n    elif n == 48: return 361\n    elif n == 49: return 364\n    elif n == 50: return 363\n    elif n == 51: return 365\n    elif n == 52: return 366\n    elif n == 53: return 366\n    elif n == 54: return 366\n    elif n == 55: return 363\n    elif n == 56: return 364\n    elif n == 57: return 363\n    elif n == 58: return 365\n    elif n == 59: return 366\n    elif n == 60: return 366\n    elif n == 61: return 363\n    elif n == 62: return 364\n    elif n == 63: return 363\n    elif n == 64: return 364\n    elif n == 65: return 364\n    elif n == 66: return 363\n    elif n == 67: return 364\n    elif n == 68: return 365\n    elif n == 69: return 366\n    elif n == 70: return 367\n    elif n == 71: return 368\n    elif n == 72: return 369\n    elif n == 73: return 372\n    elif n == 74: return 375\n    elif n == 75: return 377\n    elif n == 76: return 379\n    elif n == 77: return 380\n    elif n == 78: return 381\n    elif n == 79: return 382\n    elif n == 80: return 383\n    elif n == 81: return 384\n    elif n == 82: return 386\n    elif n == 83: return 387\n    elif n == 84: return 388\n    elif n == 85: return 389\n    elif n == 86: return 390\n    elif n == 87: return 391\n    elif n == 88: return 392\n    elif n == 89: return 393\n    elif n == 90: return 395\n    elif n == 91: return 396\n    elif n == 92: return 397\n    elif n == 93: return 398\n    elif n == 94: return 399\n    elif n == 95: return 400\n    elif n == 96: return 401\n    elif n == 97: return 402\n    elif n == 98: return 404\n    elif n == 99: return 405\n    elif n == 100: return 406\n    elif n == 101: return 407\n    elif n == 102: return 408\n    elif n == 103: return 409\n    elif n == 104: return 410\n    elif n == 105: return 411\n    elif n == 106: return 412\n    elif n == 107: return 413\n    elif n == 108: return 414\n    elif n == 109: return 415\n    elif n == 110: return 416\n    elif n == 111: return 417\n    elif n == 112: return 418\n    elif n == 113: return 419\n    elif n == 114: return 420\n    elif n == 115: return 421\n    elif n == 116: return 422\n    elif n == 117: return 423\n    elif n == 118: return 425\n    elif n == 119: return 426\n    elif n == 120: return 427\n    elif n == 121: return 428\n    elif n == 122: return 429\n    elif n == 123: return 430\n    elif n == 124: return 431\n    elif n == 125: return 432\n    elif n == 126: return 433\n    elif n == 127: return 434\n    elif n == 128: return 435\n    elif n == 129: return 436\n    elif n == 130: return 437\n    elif n == 131: return 438\n    elif n == 132: return 439\n    elif n == 133: return 440\n    elif n == 134: return 441\n    elif n == 135: return 442\n    elif n == 136: return 443\n    elif n == 137: return 444\n    elif n == 138: return 445\n    elif n == 139: return 446\n    elif n == 140: return 447\n    elif n == 141: return 448\n    elif n == 142: return 449\n    elif n == 143: return 450\n    elif n == 144: return 451\n    elif n == 145: return 452\n    elif n == 146: return 453\n    elif n == 147: return 454\n    elif n == 148: return 453\n    elif n == 149: return 454\n    elif n == 150: return 455\n    elif n == 151: return 456\n    elif n == 152: return 457\n    elif n == 153: return 458\n    elif n == 154: return 459\n    elif n == 155: return 460\n    elif n == 156: return 461\n    elif n == 157: return 462\n    elif n == 158: return 463\n    elif n == 159: return 464\n    elif n == 160: return 465\n    elif n == 161: return 466\n    elif n == 162: return 467\n    elif n == 163: return 468\n    elif n == 164: return 469\n    elif n == 165: return 470\n    elif n == 166: return 471\n    elif n == 167: return 472\n    elif n == 168: return 473\n    elif n == 169: return 474\n    elif n == 170: return 475\n    elif n == 171: return 476\n    elif n == 172: return 477\n    elif n == 173: return 478\n    elif n == 174: return 479\n    elif n == 175: return 480\n    elif n == 176: return 481\n    elif n == 177: return 482\n    elif n == 178: return 483\n    elif n == 179: return 484\n    elif n == 180: return 485\n    elif n == 181: return 486\n    elif n == 182: return 487\n    elif n == 183: return 488\n    elif n == 184: return 489\n    elif n == 185: return 490\n    elif n == 186: return 491\n    elif n == 187: return 492\n    elif n == 188: return 493\n    elif n == 189: return 494\n    elif n == 190: return 495\n    elif n == 191: return 496\n    elif n == 192: return 497\n    elif n == 193: return 498\n    e"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n%10\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n % 2!= 0: \n        return False\n    if n == 1: \n        return True\n    if n == 2: \n        return True\n    if n == 3: \n        return True\n    if n == 4: \n        return True\n    if n == 5: \n        return True\n    if n == 6: \n        return True\n    if n == 7: \n        return True\n    if n == 8: \n        return True\n    if n == 9: \n        return True\n    if n == 10: \n        return True\n    if n == 11: \n        return True\n    if n == 12: \n        return True\n    if n == 13: \n        return True\n    if n == 14: \n        return True\n    if n == 15: \n        return True\n    if n == 16: \n        return True\n    if n == 17: \n        return True\n    if n == 18: \n        return True\n    if n == 19: \n        return True\n    if n == 20: \n        return True\n    if n == 21: \n        return True\n    if n == 22: \n        return True\n    if n == 23: \n        return True\n    if n == 24: \n        return True\n    if n == 25: \n        return True\n    if n == 26: \n        return True\n    if n == 27: \n        return True\n    if n == 28: \n        return True\n    if n == 29: \n        return True\n    if n == 30: \n        return True\n    if n == 31: \n        return True\n    if n == 32: \n        return True\n    if n == 33: \n        return True\n    if n == 34: \n        return True\n    if n == 35: \n        return True\n    if n == 36: \n        return True\n    if n == 37: \n        return True\n    if n == 38: \n        return True\n    if n == 39: \n        return True\n    if n == 40: \n        return True\n    if n == 41: \n        return True\n    if n == 42: \n        return True\n    if n == 43: \n        return True\n    if n == 44: \n        return True\n    if n == 45: \n        return True\n    if n == 46: \n        return True\n    if n == 47: \n        return True\n    if n == 48: \n        return True\n    if n == 49: \n        return True\n    if n == 50: \n        return True\n    if n == 51: \n        return True\n    if n == 52: \n        return True\n    if n == 53: \n        return True\n    if n == 54: \n        return True\n    if n == 55: \n        return True\n    if n == 56: \n        return True\n    if n == 57: \n        return True\n    if n == 58: \n        return True\n    if n == 59: \n        return True\n    if n == 60: \n        return True\n    if n == 61: \n        return True\n    if n == 62: \n        return True\n    if n == 63: \n        return True\n    if n == 64: \n        return True\n    if n == 65: \n        return True\n    if n == 66: \n        return True\n    if n == 67: \n        return True\n    if n == 68: \n        return True\n    if n == 69: \n        return True\n    if n == 70: \n        return True\n    if n == 71: \n        return True\n    if n == 72: \n        return True\n    if n == 73: \n        return True\n    if n == 74: \n        return True\n    if n == 75: \n        return True\n    if n == 76: \n        return True\n    if n == 77: \n        return True\n    if n == 78: \n        return True\n    if n == 79: \n        return True\n    if n == 80: \n        return True\n    if n == 81: \n        return True\n    if n == 82: \n        return True\n    if n == 83: \n        return True\n    if n == 84: \n        return True\n    if n == 85: \n        return True\n    if n == 86: \n        return True\n    if n == 87: \n        return True\n    if n == 88: \n        return True\n    if n == 89: \n        return True\n    if n == 90: \n        return True\n    if n == 91: \n        return True\n    if n == 92: \n        return True\n    if n == 93: \n        return True\n    if n == 94: \n        return True\n    if n == 95: \n        return True\n    if n == 96: \n        return True\n    if n == 97: \n        return True\n    if n == 98: \n        return True\n    if n == 99: \n        return True\n    if n == 100: \n        return True\n    if n == 101: \n        return True\n    if n == 102: \n        return True\n    if n == 103: \n        return True\n    if n == 104: \n        return True\n    if n == 105: \n        return True\n    if n == 106: \n        return True\n    if n == 107: \n        return True\n    if n == 108: \n        return True\n    if n == 109: \n        return True\n    if n == 110: \n        return True\n    if n == 111: \n        return True\n    if n == 112: \n        return True\n    if n == 113: \n        return True\n    if n == 114: \n        return True\n    if n == 115: \n        return True\n    if n == 116: \n        return True\n    if n == 117: \n        return True\n    if n == 118: \n        return True\n    if n == 119: \n        return True\n    if n == 120: \n        return True\n    if n == 121: \n        return True\n    if n == 122: \n        return True\n    if n == 123: \n        return True\n    if n == 124: \n        return True\n    if n == 125: \n        return True\n    if n == 126: \n        return True\n    if n == 127: \n        return True\n    if n == 128: \n        return True\n    if n == 129: \n        return True\n    if n == 130: \n        return True\n    if n == 131: \n        return True\n    if n == 132: \n        return True\n    if n == 133: \n        return True\n    if n == 134: \n        return True\n    if n == 135: \n        return True\n    if n == 136: \n        return True\n    if n == 137: \n        return True\n    if n == 138: \n        return True\n    if n == 139: \n        return True\n    if n == 140: \n        return True\n    if n == 141: \n        return True\n    if n == 142: \n        return True\n    if n == 143: \n        return True\n    if n == 144: \n        return True\n    if n == 145: \n        return True\n    if n == 146: \n        return True\n    if n == 147: \n        return True\n    if n == 148: \n        return True\n    if n == 149: \n        return True\n    if n == 150: \n        return True\n    if n == 151: \n        return True\n    if n == 152: \n        return True\n    if n == 153: \n        return True\n    if n == 154: \n        return True\n    if n == 155: \n        return True\n    if n == 156: \n        return True\n    if n == 157: \n        return True\n    if n == 158: \n        return True\n    if n == 159: \n        return True\n    if n == 160: \n        return True\n    if n == 161: \n        return True\n    if n == 162: \n        return True\n    if n == 163: \n        return True\n    if n == 164: \n        return True\n    if n == 165: \n        return True\n    if n ="
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return n \n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    else: \n        for i in range(3, n+1): \n            if n % i == 0: \n                return i \n    return n \n \ndef  is_prime(n): \n    '''\n    1. Write a function to find nth prime number. geeksforgeeks.org/nth-prime-number/\n    2. Write a function that returns nth prime number. geeksforgeeks.org/nth-prime-number/\n    '''\n    for i in range(3, n+1, 2): \n        if n % i == 0: \n            return False\n    return True \n \ndef is_divisible(n): \n    '''\n    1. Write a function to check if a number is divisible by any of the numbers 1, 3, 5, 7. geeksforgeeks.org/is-divisible-by-any-numbers-1-3-5-7/\n    '''\n    for i in range(2, math.sqrt(n)): \n        if n % i == 0: \n            return False \n    return True \n \ndef divisors(n): \n    '''\n    1. Write a function to find the divisors of a number. geeksforgeeks.org/divisors-of-a-number/\n    '''\n    divisors = [] \n    for i in range(1, math.floor(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.append(i) \n            divisors.append(n//i) \n    return divisors\n \ndef is_consecutive(n): \n    '''\n    1. Write a function to determine whether a number is a consecutive number. geeksforgeeks.org/is-consecutive-number/\n    '''\n    if n < 0: \n        return False \n    else: \n        count = 0 \n        for i in range(0, n-1): \n            if n % i == 0: \n                count += 1\n        return count == 1\n \ndef is_not_consecutive(n): \n    '''\n    1. Write a function to determine whether a number is not consecutive number. geeksforgeeks.org/is-not-consecutive-number/\n    '''\n    if n < 0: \n        return False \n    else: \n        count = 0 \n        for i in range(0, n-1): \n            if n % i == 0: \n                count += 1\n        if count == 1: \n            return False \n        else: \n            return True \n \ndef is_even(n): \n    '''\n    1. Write a function to determine whether an integer is even. geeksforgeeks.org/is-even-integer-n/\n    '''\n    if n < 0: \n        return False \n    else: \n        return n % 2 == 0\n \ndef is_odd(n): \n    '''\n    1. Write a function to determine whether an integer is odd. geeksforgeeks.org/is-odd-integer-n/\n    '''\n    if n < 0: \n        return False \n    else: \n        return n % 2!= 0\n \ndef perfect_square(n): \n    '''\n    1. Write a function to determine whether an integer is perfect square. geeksforgeeks.org/is-perfect-square-n/\n    '''\n    if n < 0: \n        return False \n    else: \n        square = int(math.sqrt(n)) \n        if square * square == n: \n            return True \n        else: \n            return False \n \ndef is_sathu(n): \n    '''\n    1. Write a function to determine whether a number is a sathu number. geeksforgeeks.org/is-sathu-number/\n    '''\n    if n < 0: \n        return False \n    else: \n        for i in range(3, n+1, 2): \n            if n % i == 0: \n                return False\n        return True \n \ndef is_palindrome(n): \n    '''\n    1. Write a function to check if a number is palindrome. geeksforgeeks.org/is-palindrome-number/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True \n    elif n == 1: \n        return False \n    elif n == 2: \n        return True \n    else: \n        for i in range(2, n): \n            if n % i == 0: \n                return False\n        return True \n \ndef is_prime_or_not(n): \n    '''\n    1. Write a function to check if a number is prime or not. geeksforgeeks.org/is-prime-or-not-number/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return False \n    elif n == 1: \n        return True \n    elif n == 2: \n        return True \n    elif is_divisible(n) or is_prime(n): \n        return True \n    elif is_divisible(n): \n        for i in range(3, n, 2): \n            if n % i == 0: \n                return False \n        return True \n \ndef is_prime_or_not_prime(n): \n    '''\n    1. Write a function to check if a number is prime or not. geeksforgeeks.org/is-prime-or-not-prime-number/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return False \n    elif n == 1: \n        return True \n    elif n == 2: \n        return True \n    elif is_divisible(n) or is_prime(n): \n        return True \n    elif is_divisible(n): \n        for i in range(3, n, 2): \n            if n % i == 0: \n                return False \n        return True \n \ndef is_in_fibonacci_sequence(n): \n    '''\n    1. Write a function to check if a number is in a fibonacci sequence. geeksforgeeks.org/is-in-fibonacci-sequence-number/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return True \n    elif n == 1: \n        return False \n    elif n == 2: \n        return True \n    else: \n        for i in range(3, n+1, 2): \n            if n % i == 0: \n                return False \n        return True \n \ndef prime_numbers(n): \n    '''\n    1. Write a function to check if a number is a prime number. geeksforgeeks.org/is-prime-number/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return False \n    elif n == 1: \n        return True \n    elif n == 2: \n        return True \n    elif is_divisible(n) or is_prime(n): \n        return True \n    elif is_divisible(n): \n        for i in range(3, n, 2): \n            if n % i == 0: \n                return False \n        return True \n \ndef is_pandigital(n): \n    '''\n    1. Write a function to check if a number is a pandigital number. geeksforgeeks.org/is-pandigital-number/\n    '''\n    if n < 0: \n        return False \n    elif n == 0: \n        return False \n    elif n == 1: \n        return True \n    elif n == 2: \n        return True "
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        if l1[i] == l1[i+1]:\n            l.append([l1[i],l1[i+1]])\n    return l\n    \ndef three_three_pairs(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-2):\n        if l1[i] == l1[i+1] == l1[i+2] == l1[i+3]:\n            l.append([l1[i],l1[i+1],l1[i+2]])\n    return l\n    \ndef pairs(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        if l1[i] == l1[i+1]:\n            l.append([l1[i],l1[i+1]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #for each item in a list, create a new list of pairs\n    pairs = []\n    #check to see if the list is empty\n    if len(l1) == 0:\n        return []\n    #if the first item is not the first element in the list,\n    #add the first item as the first element to the new list\n    else:\n        pairs.append(l1[0])\n    #loop through the other items in the list, incrementing by 1\n    for i in range(1, len(l1)):\n        #check to see if the next item is not the first element in the list\n        #and increment the index if so\n        if l1[i]!= l1[i-1]:\n            pairs.append((l1[i-1], l1[i]))\n            #increment the index by 1\n            i += 1\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,x+1) for x in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    def pair_iter(l1):\n        for i in range(len(l1)):\n            yield l1[i], l1[i+1]\n    return pair_iter\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        for j in range(i + 1, len(l1)):\n            pairs.append((l1[i], l1[j]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,x+1) for x in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            result.append((l1[i], l1[j]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # TODO: WRITE YOUR CODE HERE\n    def pair(i):\n        if i == 0:\n            return []\n        else:\n            return pair(i-1) + [i]\n    return pair(len(l1))\n    # Write your solution here\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    lst = []\n    n = len(l1)\n    for i in range(0,n):\n        for j in range(i+1,n):\n            lst.append([l1[i],l1[j]])\n    return lst\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==sum:\n                count=count+1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # 1st way\n    s_nums = sum\n    # 2nd way\n    # s_nums = 0\n    # for num in arr:\n    #     s_nums += num\n    # return s_nums\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    sum_elements = sum\n    if len(arr) < 2:\n        return 0\n    for i in range(1, len(arr)):\n        if arr[i-1] + arr[i] == sum_elements:\n            pairs += 1\n            sum_elements = arr[i]\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n=len(arr)\n    if(sum==0):\n        return 0\n    elif(sum==1):\n        return n\n    elif(sum==2):\n        return 3*n-1\n    else:\n        summ=0\n        for i in range(0,len(arr)):\n            summ+=arr[i]\n            if(summ==sum):\n                return n-i\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for x in range(len(arr) - 1):\n        if arr[x] == sum - arr[x]:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict1 = {}\n    for i in arr:\n        if i + sum in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return len(dict1)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = []\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs.append([arr[i], arr[j]])\n    return len(pairs)\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    dict_pairs_count = dict()\n    for i in range(len(arr)):\n        dict_pairs_count[arr[i]] = arr.count(arr[i])\n    return dict_pairs_count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)==len(li2):\n        for i in range(len(li1)):\n            if li1[i]!= li2[i]:\n                return li1[i]\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)==0 and len(li2)==0:\n        return None\n    if len(li1)==0 or len(li2)==0:\n        return None\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            li3.append(li1[i])\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    i=0\n    j=0\n    diff=[]\n    while(i<len(li1) and j<len(li2)):\n        if li1[i]==li2[j]:\n            i=i+1\n            j=j+1\n            diff.append(li1[i])\n        else:\n            i=i+1\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1.sort()\n    li2.sort()\n    s=0\n    for i in range(len(li1)-1):\n        if li1[i]!=li2[i]:\n            s+=1\n            li1[i+1]+=1\n    return s\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    i=0\n    j=0\n    k=0\n    print(\"The Difference between the two lists: \")\n    while i < len(li1) and j < len(li2):\n        if li1[i]!= li2[j]:\n            print(li1[i],end=\" \")\n            i = i + 1\n        else:\n            i = i + 1\n        if i < len(li1):\n            j = j + 1\n        else:\n            k = k + 1\n    print(\"\\n\")\n    return i,j,k\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = []\n    for i in range(len(li1)):\n        li.append(li1[i] - li2[i])\n    return li\n    \n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    dif1=0\n    dif2=0\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            dif1+=1\n    for i in range(len(li2)):\n        if li2[i]!=li1[i]:\n            dif2+=1\n    dif1=abs(dif1)\n    dif2=abs(dif2)\n    if dif1>dif2:\n        return dif1\n    else:\n        return dif2\n    \nprint(Diff([1,2,3,4],[5,6,7,8]))\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1 - li2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in range(len(li1)):\n        diff.append(li1[i] - li2[i])\n    return diff\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    if n <= 0 : \n        raise ValueError(\"n must be greater than zero\") \n    else : \n        result = 0\n        for i in range(1, n, 2) : \n            result += i ** 4 \n        return result \n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # return sum of fourth power of first n odd numbers\n    #     if n is even\n    #         return sum of fourth power of first 2 n odd numbers\n    #         if n is odd\n    #             return sum of fourth power of first 1 n odd numbers\n    #             if n is odd\n    #                 return sum of fourth power of first 2 n odd numbers\n    # return sum of fourth power of 1 to n\n    if n % 2!= 0:\n        return n**4\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    l = [4, 16, 16, 32, 256, 65536]\n    sum = 0\n    for i in l:\n        sum += i**4\n    print(sum)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        if i%2==0:\n            sum+=i**4\n        else:\n            pass\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    while n >= 0 :\n        sum = sum + n ** 4\n        n = n - 1\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Use a loop to get the values of first n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the second loop.\n    # Calculate the sum of the odd numbers.\n    # Print the sum of the odd numbers.\n    # Adjust the condition for the third loop.\n    \n    # Use a loop to get the values of n natural numbers.\n    # Check the exception for the secon"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    power_of_4_sum = 0\n    for i in range(n):\n        power_of_4_sum += (i**4)\n    return power_of_4_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1 : \n        return 0\n    if n == 1 : \n        return 1\n    return odd_num_sum(n-1) + 2*n * odd_num_sum(n-2)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    result = 0\n    for x in range(n,0,-2) : \n        result += x**3\n    return result\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num=0\n    for i in range(0,n+1) :\n        num=num+i**4\n    return num\nprint(\"The sum of fourth powers of first n odd natural numbers is :\",odd_num_sum(5))\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    s = \"\"\n    i = 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Convert the expression to a string\n    exp = str(exp)\n    # check if it is a string\n    if type(exp) == str:\n        return True\n    # check if it is a list\n    elif type(exp) == list:\n        return check_list(exp)\n    # check if it is a tuple\n    elif type(exp) == tuple:\n        return check_tuple(exp)\n    # check if it is an integer\n    elif type(exp) == int:\n        return check_int(exp)\n    # check if it is a float\n    elif type(exp) == float:\n        return check_float(exp)\n    # check if it is a boolean\n    elif type(exp) == bool:\n        return check_bool(exp)\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # return exp==\"(){}[]\"\n    # return exp==\"((()))\"\n    return exp.replace('()','').replace('[]','').replace('()()','').replace('[]()','').replace('(()())','').replace('((()())','').replace('(())(','').replace(')()())','').replace('((()())','')\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left_bracket = 0\n    right_bracket = 0\n    open_brackets = ['(', '{', '[']\n    close_brackets = [')', '}', ']']\n    for char in exp:\n        if char in open_brackets:\n            left_bracket += 1\n        elif char in close_brackets:\n            left_bracket -= 1\n        if left_bracket < 0:\n            return \"Error: No valid parenthese\"\n    if left_bracket == 0:\n        return \"Valid expression\"\n    return \"Error: Invalid expression\"\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if isinstance(exp,int):\n        return True\n    if isinstance(exp,str):\n        if len(exp)==0:\n            return False\n        if exp[0]=='(' and exp[-1]==')':\n            return check_expression(exp[1:-1])\n        if exp[0]=='[' and exp[-1]==']':\n            return check_expression(exp[1:-1])\n        if exp[0]=='{' and exp[-1]=='}':\n            return check_expression(exp[1:-1])\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #Initialize the stack\n    stack = deque()\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    exp = exp.strip()\n    # if exp.isdigit():\n    #     return True\n    # elif exp.isalpha():\n    #     return True\n    # else:\n    #     return False\n    if exp.count(\"(\")!= exp.count(\")\") and exp.count(\"{\")!= exp.count(\"}\") and exp.count(\"(\")!= exp.count(\")\") and exp.count(\"[\")!= exp.count(\"]\") and exp.count(\"{\")!= exp.count(\"}\") and exp.count(\"(\")!= exp.count(\")\") and exp.count(\"[\")!= exp.count(\"]\") and exp.count(\"{\")!= exp.count(\"}\") and exp.count(\"(\")!= exp.count(\")\") and exp.count(\"[\")!= exp.count(\"]\") and exp.count(\"{\")!= exp.count(\"}\") and exp.count(\"(\")!= exp.count(\")\"):\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in \"()\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            top_char = stack.pop()\n            if top_char == '(':\n                stack.append(top_char)\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    #Check if the expression is balanced\n    #Parentheses are balanced if they are pairwise\n    #Convert to characters\n    #Sort parentheses (Recursive call)\n    #Check the parentheses\n    #Expression is balanced if no of parentheses is mismatched \n    #Return the balanced expression\n    #If balanced return the expression \n    def check_balanced(string):\n        #print(\"String is \" + string)\n        n=len(string)\n        if n<=1:\n            return string\n        left, right=0, n-1\n        while left<=right:\n            if string[left]==string[right]:\n                left+=1\n                right-=1\n            else:\n                return \"False\"\n        return \"True\"\n    def reverse_string(string):\n        if len(string)==1:\n            return string\n        return string[::-1]\n    def check_balance(string):\n        #print(\"String is \" + string)\n        n=len(string)\n        if n<=1:\n            return string\n        left, right=0, n-1\n        while left<=right:\n            if string[left]==string[right]:\n                left+=1\n                right-=1\n            else:\n                return \"False\"\n        return \"True\"\n    string=exp\n    string=string.replace(\"()\",\"\")\n    string=string.replace(\"[\",\"(\")\n    string=string.replace(\"]\",\"\")\n    string=string.replace(\"{\",\"[\")\n    string=string.replace(\"}\",\"]\")\n    string=string.replace(\"(\",\"[\")\n    string=string.replace(\")\",\"(\")\n    #print(\"String is \" + string)\n    balanced=check_balanced(string)\n    #print(\"Balanced is \" + balanced)\n    balanced=reverse_string(balanced)\n    #print(\"Reverse is \" + balanced)\n    balanced=check_balance(balanced)\n    #print(\"Balance is \" + balanced)\n    return balanced\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    for ele in exp:\n        if ele == '(':\n            stack.append(ele)\n        elif ele == ')':\n            while(len(stack) > 0 and stack[-1]!= '(':\n                stack.pop()\n            if len(stack) == 0:\n                return False\n        elif ele == '*':\n            while(len(stack) > 0 and stack[-1]!= '*'):\n                stack.pop()\n            if len(stack) == 0:\n                return False\n        elif ele == '+':\n            while(len(stack) > 0 and stack[-1]!= '+'):\n                stack.pop()\n            if len(stack) == 0:\n                return False\n        elif ele == '-' :\n            while(len(stack) > 0 and stack[-1]!= '-'):\n                stack.pop()\n            if len(stack) == 0:\n                return False\n        elif ele == '.':\n            while(len(stack) > 0 and stack[-1]!= '.'):\n                stack.pop()\n            if len(stack) == 0:\n                return False\n    return True\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join([w for w in test_str.split() if len(w) == K])\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    i = 0\n    test_str = test_str.lower()\n    word_list = test_str.split(\" \")\n    while i < len(word_list):\n        if len(word_list[i]) == K:\n            word_list.pop(i)\n            i = len(word_list)\n            break\n        i += 1\n    return \" \".join(word_list)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    remove_str = \"\"\n    for word in test_str.split():\n        if len(word) == K:\n            remove_str += word\n    return remove_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = test_str.strip().split()\n    new_res = []\n    for word in res:\n        if len(word) == K:\n            new_res.append(word.strip())\n    return''.join(new_res)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    d = {}\n    for char in test_str:\n        if char not in d:\n            d[char] = 1\n        else:\n            d[char] += 1\n    for char in d:\n        if d[char] == 1:\n            del d[char]\n    result = \"\"\n    for char in d:\n        if len(result) + len(char) == K:\n            break\n        if d[char] == 1:\n            result += char\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = \"\"\n    for i in test_str:\n        if len(i) == K:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    test_str = test_str.lower()\n    string = test_str.split(' ')\n    for i in string:\n        if len(i)==K:\n            i = i.strip()\n            string.remove(i)\n    print(string)\n    return''.join(string)\n        \n    \n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    l = len(test_str)\n    new_str = test_str.replace(' ', '')\n    if len(new_str) > l:\n        return new_str[:l]\n    else:\n        return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Step 1: Split the test string into a list of words\n    list_words = test_str.split()\n    # Step 2: Take the list of words and remove all the word with length K\n    for word in list_words:\n        if len(word) == K:\n            list_words.remove(word)\n    # Step 3: Return the new string after removing all the words with length K\n    return''.join(list_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # store all words in an array\n    tokens = test_str.split()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.findall(pattern,text)\n    \n    if len(m)==0:\n        return None\n    else:\n        return m[0]\n    \n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not pattern:\n        return None\n    \n    # Pattern is a set of unique characters.\n    # e.g. {'A','B','C'},{'a','b','c'}\n    # e.g. {'A','B','C'},{'a','b','C'},{'A','B','C'},{'a','B','C'},{'A','B','C'},{'a','b','c'}\n    # Pattern is a set of characters\n    # e.g. {'a','b'},{'A'},{'a','b'},{'a','b'},{'A'},{'a','b'},{'a','b'},{'a','b'},{'a','b'},{'a','b'},{'A'},{'A'},{'a','b'},{'a','b'},{'a','b'},{'A'},{'A'},{'a','b'},{'a','b'}\n    # Pattern is a set of symbols\n    # e.g. {'+','-'}\n    # e.g. {'-', '+', '+'}\n    # Pattern is a set of characters\n    # e.g. {'a','b'},{'A'},{'a','b'},{'a','b'},{'A'},{'a','b'},{'A'},{'a','b'},{'a','b'},{'A'},{'A'},{'a','b'},{'a','b'},{'A'},{'A'},{'a','b'},{'a','b'},{'A'},{'A'},{'a','b'},{'a','b'}\n    # Pattern is a set of symbols\n    # e.g. {'+','-'}\n    # e.g. {'-', '+', '+'}\n    # Pattern is a set of characters\n    # e.g. {'a','b'},{'A'},{'a','b'},{'A'},{'a','b'},{'A'},{'a','b'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'}\n    # Pattern is a set of symbols\n    # e.g. {'+','-'}\n    # e.g. {'-', '+', '+'}\n    # Pattern is a set of characters\n    # e.g. {'+','-'}\n    # e.g. {'-', '+', '+'}\n    # Pattern is a set of symbols\n    # e.g. {'a','b'},{'A'},{'a','b'},{'A'},{'a','b'},{'A'},{'a','b'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'},{'A'},{'a','b'},{'A'}\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not isinstance(pattern,str):\n        return None\n    if not isinstance(text,str):\n        return None\n    pattern=pattern.lower()\n    pattern=pattern.replace(' ','')\n    p=''\n    for i in pattern:\n        if i not in ['0','1','2','3','4','5','6','7','8','9']:\n            return None\n        p+=i\n    index = 0\n    for i in range(len(text)):\n        if text[i:i+len(p)]==p:\n            index = i\n            break\n    return index\n    \ndef remove_number(text):\n    '''\n    Remove non-numeric characters from the string input and return a new string.\n    '''\n    if not isinstance(text,str):\n        return None\n    text=text.lower()\n    text=text.replace(' ','')\n    number=''\n    for i in text:\n        if i not in ['0','1','2','3','4','5','6','7','8','9']:\n            number+=i\n    return number\n    \ndef remove_non_digit(text):\n    '''\n    Remove non-digit characters from the string input and return a new string.\n    '''\n    if not isinstance(text,str):\n        return None\n    text=text.lower()\n    text=text.replace(' ','')\n    digit=''\n    for i in text:\n        if i not in ['0','1','2','3','4','5','6','7','8','9']:\n            digit+=i\n    return digit\n    \ndef remove_non_alphanum(text):\n    '''\n    Remove non-alphanum characters from the string input and return a new string.\n    '''\n    if not isinstance(text,str):\n        return None\n    text=text.lower()\n    text=text.replace(' ','')\n    alphanum=''\n    for i in text:\n        if i not in ['0','1','2','3','4','5','6','7','8','9']:\n            alphanum+=i\n    return alphanum\n    \ndef remove_non_alpha(text):\n    '''\n    Remove non-alpha characters from the string input and return a new string.\n    '''\n    if not isinstance(text,str):\n        return None\n    text=text.lower()\n    text=text.replace(' ','')\n    alpha=''\n    for i in text:\n        if i not in ['0','1','2','3','4','5','6','7','8','9']:\n            alpha+=i\n    return alpha\n    \ndef remove_non_space(text):\n    '''\n    Remove non-space characters from the string input and return a new string.\n    '''\n    if not isinstance(text,str):\n        return None\n    text=text.lower()\n    text=text.replace(' ','')\n    space=''\n    for i in text:\n        if i not in ['0','1','2','3','4','5','6','7','8','9']:\n            space+=i\n    return space\n    \ndef is_alpha(text):\n    '''\n    Check whether a string is alphanumeric or not.\n    '''\n    if not isinstance(text,str):\n        return False\n    text=text.lower()\n    if'' in text:\n        return False\n    if '.' in text:\n        return False\n    if ',' in text:\n        return False\n    return True\n    \ndef is_digit(text):\n    '''\n    Check whether a string is digit or not.\n    '''\n    if not isinstance(text,str):\n        return False\n    text=text.lower()\n    if'' in text:\n        return False\n    if ',' in text:\n        return False\n    if '.' in text:\n        return False\n    if'' in text:\n        return False\n    return True\n    \ndef is_non_digit(text):\n    '''\n    Check whether a string is non digit or not.\n    '''\n    if not isinstance(text,str):\n        return False\n    text=text.lower()\n    if'' in text:\n        return False\n    if ',' in text:\n        return False\n    if '.' in text:\n        return False\n    if'' in text:\n        return False\n    return True\n    \ndef is_non_alphanum(text):\n    '''\n    Check whether a string is non alphanum or not.\n    '''\n    if not isinstance(text,str):\n        return False\n    text=text.lower()\n    if'' in text:\n        return False\n    if ',' in text:\n        return False\n    if '.' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    return True\n    \ndef is_non_alpha(text):\n    '''\n    Check whether a string is non alpha or not.\n    '''\n    if not isinstance(text,str):\n        return False\n    text=text.lower()\n    if'' in text:\n        return False\n    if ',' in text:\n        return False\n    if '.' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    return True\n    \ndef is_non_space(text):\n    '''\n    Check whether a string is non space or not.\n    '''\n    if not isinstance(text,str):\n        return False\n    text=text.lower()\n    if'' in text:\n        return False\n    if ',' in text:\n        return False\n    if '.' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    return True\n    \ndef is_non_alpha_non_digit(text):\n    '''\n    Check whether a string is non alpha, non alphanum and non digit or not.\n    '''\n    if not isinstance(text,str):\n        return False\n    text=text.lower()\n    if'' in text:\n        return False\n    if ',' in text:\n        return False\n    if '.' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    return True\n    \ndef is_non_alpha_non_digit_non_alphanum(text):\n    '''\n    Check whether a string is non alpha, non alphanum and non digit and non alphanum and non digit or not.\n    '''\n    if not isinstance(text,str):\n        return False\n    text=text.lower()\n    if'' in text:\n        return False\n    if ',' in text:\n        return False\n    if '.' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text:\n        return False\n    if'' in text"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(pattern)==1:\n        return text.find(pattern[0])\n    else:\n        for i in range(len(text)):\n            if text[i:i+len(pattern)] == pattern:\n                return i\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #Split the text into a list of strings\n    sentence = text.split(pattern)\n    #Iterate through the list\n    for i in range(len(sentence)):\n        #Get the substrings of the text\n        substrings = [j for j in sentence[i] if j]\n        #Check if the substrings are present in the pattern\n        if substrings:\n            #Get the first character of the substrings\n            start = substrings[0][0]\n            #Get the last character of the substrings\n            end = substrings[-1][-1]\n            #Find the positions of the substring in the text\n            indexes = [i for i,j in enumerate(sentence[i]) if j==start]\n            #Check if there is a match in the indexes\n            if indexes:\n                #Get the positions of the first character\n                position_first = indexes[0]\n                #Get the last character of the substring\n                position_last = indexes[-1]\n                #If there is a match\n                if position_first <= position_last:\n                    #Replace the substring by the first char of the match\n                    text = text.replace(substrings[0][0],start)\n    return text\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pass\ndef tag_matcher(text):\n    '''\n    Write a function to find the tags within the text and return the tags.\n    '''\n    pass\ndef tag_count(text):\n    '''\n    Write a function to find the number of tags within the text and return the number.\n    '''\n    pass\ndef text_extraction(text,patterns):\n    '''\n    Write a function to extract the text by applying the tags and the occurrences in a pattern string.\n    '''\n    pass\ndef text_tokenization(text,patterns):\n    '''\n    Write a function to tokenize the text by applying the tags, occurrences in a pattern string.\n    '''\n    pass\ndef split_text(text):\n    '''\n    Write a function to split the text into a list.\n    '''\n    pass\ndef split_pattern(text):\n    '''\n    Write a function to split the text into a list of patterns.\n    '''\n    pass\ndef split_tag(text):\n    '''\n    Write a function to split the text into a list of tags.\n    '''\n    pass\ndef middle_text(text):\n    '''\n    Write a function to extract the middle text from the text.\n    '''\n    pass\ndef middle_pattern(text):\n    '''\n    Write a function to extract the middle text from the text.\n    '''\n    pass\ndef calculate_score(text):\n    '''\n    Write a function to calculate the score of the text.\n    '''\n    pass\ndef lexical_analysis(text):\n    '''\n    Write a function to lexical analysis.\n    '''\n    pass\ndef lemmatization(text):\n    '''\n    Write a function to lemmatize the text.\n    '''\n    pass\ndef frequency_analysis(text):\n    '''\n    Write a function to calculate the frequency of the words in the text.\n    '''\n    pass\ndef replace_patterns(text,patterns):\n    '''\n    Write a function to replace the patterns in a text using the list of patterns.\n    '''\n    pass\ndef replace_tags(text,patterns):\n    '''\n    Write a function to replace the tags in a text using the list of tags.\n    '''\n    pass\ndef remove_non_ascii(text):\n    '''\n    Write a function to remove non-ASCII characters from a text.\n    '''\n    pass\ndef pre_processing(text):\n    '''\n    Write a function to pre-process the text.\n    '''\n    pass\ndef edit_distance(text,pattern):\n    '''\n    Write a function to calculate the edit distance between a text and a pattern string.\n    '''\n    pass\ndef frequency_counter(text):\n    '''\n    Write a function to calculate the frequency of each word in a text.\n    '''\n    pass\ndef frequency_stats(text):\n    '''\n    Write a function to calculate the frequency of each word in a text.\n    '''\n    pass\ndef lexical_analysis(text):\n    '''\n    Write a function to lexical analysis.\n    '''\n    pass\ndef start_end(text):\n    '''\n    Write a function to calculate the start and end indexes of a text.\n    '''\n    pass\ndef word_count(text):\n    '''\n    Write a function to count the number of words in a text.\n    '''\n    pass\ndef is_repeated_word(text,word):\n    '''\n    Write a function to check whether a word is repeated or not.\n    '''\n    pass\ndef extract_pattern(text):\n    '''\n    Write a function to extract the text using the patterns.\n    '''\n    pass\ndef pattern_count(text):\n    '''\n    Write a function to extract the pattern string count.\n    '''\n    pass\ndef word_freq(text):\n    '''\n    Write a function to calculate the frequency of the words in a text.\n    '''\n    pass\ndef word_length(text):\n    '''\n    Write a function to calculate the length of the words in a text.\n    '''\n    pass\ndef word_pattern(text):\n    '''\n    Write a function to extract the text using the patterns.\n    '''\n    pass\ndef word_pattern_count(text):\n    '''\n    Write a function to extract the text using the patterns.\n    '''\n    pass\ndef stop_word_count(text):\n    '''\n    Write a function to count the number of stop words.\n    '''\n    pass\ndef stop_word_frequency(text):\n    '''\n    Write a function to calculate the frequency of the stop words.\n    '''\n    pass\ndef word_frequency(text):\n    '''\n    Write a function to calculate the frequency of the words.\n    '''\n    pass\ndef word_length_frequency(text):\n    '''\n    Write a function to calculate the length of the words.\n    '''\n    pass\ndef word_frequency_count(text):\n    '''\n    Write a function to calculate the frequency of the words.\n    '''\n    pass\ndef word_stem(text):\n    '''\n    Write a function to stem the text.\n    '''\n    pass\ndef words_from_text(text):\n    '''\n    Write a function to extract the words from a text.\n    '''\n    pass\ndef word_count_from_text(text):\n    '''\n    Write a function to extract the words from a text.\n    '''\n    pass\ndef unique_words(text):\n    '''\n    Write a function to extract the words from a text and count how many occurrencies.\n    '''\n    pass\ndef word_length_frequency_from_text(text):\n    '''\n    Write a function to extract the length of the words from a text.\n    '''\n    pass\ndef add_word(text,word):\n    '''\n    Write a function to add a word to a text.\n    '''\n    pass\ndef get_text(text):\n    '''\n    Write a function to extract the text and return the text.\n    '''\n    pass\ndef remove_duplicate_words(text):\n    '''\n    Write a function to remove duplicate words from a text.\n    '''\n    pass\ndef remove_words_starting_with_numbers(text):\n    '''\n    Write a function to remove words starting with numbers from a text.\n    '''\n    pass\ndef remove_words_containing_one_letter(text):\n    '''\n    Write a function to remove words containing one letter from a text.\n    '''\n    pass\ndef remove_words_containing_multiple_letters(text):\n    '''\n    Write a function to remove words containing multiple letters from a text.\n    '''\n    pass\ndef remove_words_containing_word_length(text):\n    '''\n    Write a function to remove words containing word length from a text.\n    '''\n    pass\ndef remove_words_containing_multiple_words(text):\n    '''\n    Write a function to remove words containing multiple words from a text.\n    '''\n    pass\ndef remove_words_containing_stop_words(text):\n    '''\n    Write a function to remove words containing stop words from a text.\n    '''\n    pass\ndef remove_words_containing_numbers(text):\n    '''\n    Write a function to remove words containing numbers from a text.\n    '''\n    pass\ndef remove_words_containing_one_letter(text):\n    '''\n    Write a function to remove words containing one letter from a text.\n    '''\n    pass\ndef remove_words_containing_multiple_letters(text):\n    '''\n    Write a function to remove words containing multiple letters from a text.\n    '''\n    pass\ndef remove_words_containing_multiple_words(text):\n    '''\n    Write a function to remove words containing multiple words from a text.\n    '''\n    pass\ndef remove_words_containing_stop_words(text):\n    '''\n    Write a function to remove words containing stop words from a text.\n    '''\n    pass\ndef remove_words_containing_numbers(text):\n    '''\n    Write a function to remove words containing numbers from a text.\n    '''\n    pass\ndef remove_words_containing_one_letter"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for i in range(len(text)):\n        if re.search(pattern,text[i:],re.MULTILINE):\n            return text[i:i+len(pattern)]\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    pattern = pattern.replace(' ','')\n    pattern = pattern.split(' ')\n    pattern_list = []\n    pattern_list = pattern\n    pattern_list = pattern_list[1:]\n    \n    for string in text:\n        count = 0\n        for p in pattern_list:\n            if string.find(p)!= -1:\n                count +=1\n        if count == len(pattern_list):\n            return string\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    # initialize variables\n    found_substring=0\n    found_string=0\n    \n    # loop through all the characters of the text\n    for i in range(len(text)):\n        \n        # if it is a substring\n        if text[i:i+len(pattern)]==pattern:\n            \n            # increment found_substring by one\n            found_substring+=1\n        \n            # if a match\n            if text[i:i+len(pattern)]==pattern:\n                found_string+=1\n                \n    if found_substring>0:\n        \n        # if the match was found\n        if found_string>0:\n            \n            # return the max substrings\n            return max(found_substring,found_string)\n        \n        # if no match\n        else:\n            \n            # return 0\n            return 0\n    \n    # if no match\n    else:\n        \n        # return None\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.findall(pattern,text)\n    for i,word in enumerate(m):\n        if (text.find(word)!= -1):\n            return text.find(word),i\n    return None\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if nums[i] % 2!= 0:\n            return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = True\n    for i in nums:\n        if i%2!= 0:\n            odd = False\n    return odd\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    odd.extend(list(map(lambda x: x%2, nums)))\n    i = 0\n    while i < len(nums):\n        if nums[i]%2 == 0:\n            odd.append(nums[i])\n        i += 1\n    odd.sort()\n    if odd:\n        return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if nums[0] % 2 == 1:\n        return False\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # your code goes here\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = True\n    if not nums:\n        return False\n    for i in range(1, len(nums)):\n        if nums[i] % 2 == 1:\n            odd = False\n    if odd:\n        return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_num = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd_num += 1\n    return odd_num == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    for letter in test_str:\n        if letter.lower() in \"aeiou\":\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    vowel_count = 0\n    for vowel in vowels:\n        if test_str.count(vowel) > 0:\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i in ['a','e','i','o','u','A','E','I','O','U']:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    \n    for char in test_str:\n        if char in vowels:\n            count += 1\n        \n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count_vowels = 0\n    for char in test_str:\n        if char in vowels:\n            count_vowels = count_vowels + 1\n    return count_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1,len(test_str)):\n            if test_str[i].lower() in 'aeiou':\n                if test_str[j].lower() in 'aeiou':\n                    if test_str[i].lower() == test_str[j].lower():\n                        count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    d = {}\n    vowels = 'aeiouAEIOU'\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            d[test_str[i]] = d.get(test_str[i], 0) + 1\n    return len(d)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    num_vowels = 0\n    for char in test_str:\n        if char in vowels:\n            num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for letter in test_str:\n        if letter in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    count = 0\n    for char in test_str:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            vowels_count += 1\n        if char.lower() == 'y':\n            count += 1\n    return vowels_count, count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in sum:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Your code here\n    s = sum(set(arr))\n    return s\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # using set \n    set_arr = set(arr)\n    sum = 0\n    # iterating over the set\n    for num in set_arr:\n        # checking if element is equal to num\n        if arr.count(num)>0:\n            # adding the element to the sum \n            sum += num\n    return sum \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)): \n        if (arr[i]!= i): \n            sum += arr[i] \n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for ele in arr:\n        if ele not in sum:\n            sum+=ele\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for x in arr:\n        if x!= total and x!= 0:\n            total += x\n    return total \narr = [1,2,1,2,3]\nprint(find_sum(arr))"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    if len(arr) == 0: \n        return 0\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    #A naive approach which will give us a set of elements with all odd numbers in it and all even numbers in it. \n    #For example, if the list is [3, 1, 2, 4, 2], then the sum of odd numbers is 3 + 1 + 2 + 4 = 8, and even numbers are 2 + 4 = 5. \n    #The idea is to do this to find all the elements which have odd numbers, and then sum them.\n    #This solution works for all numbers in the list, but for odd numbers, we have to only look at odd numbers. \n    #The idea is to go through the list, once we find a number, we check if the number has all odd numbers.\n    #We then have to sum them, and if the value is odd, we count it as odd, else we sum the values which are odd.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9, 9], if we are looking at the numbers 3, 1, 2, then we can skip the odd numbers.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], if we are looking at the numbers 3, 1, 2, 4, 2, then we can skip the odd numbers because 4 is also odd.\n    #So we have two lists: odd and even, with all odd numbers as their indices. \n    #And for the odd numbers, we have to check for all odd numbers in the even list, so we will have 4 in even list.\n    #Similarly, for even numbers, we have to check for all even numbers in the odd list, so we will have 9 in odd list. \n    #The way we have this, we can check for all odd numbers in the even list, and all even numbers in the odd list.\n    #If the odd numbers sum to 2, we can count it as odd, so we will count it as 3.\n    #If the even numbers sum to 4, we can count it as even, so we will count it as 8. \n    #If the odd numbers sum to 6, we can count it as even, so we will count it as 7.\n    #If the odd numbers sum to 8, we can count it as even, so we will count it as 9. \n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], so we have to check if 3 is even, so we can skip the odd numbers.\n    #If the even numbers sum to 2, then we can count it as even.\n    #So we have a list of all odd numbers.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], so we have to check if 3 is even, so we have to skip the even numbers.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], so we have to check if 3 is odd, so we have to skip the even numbers.\n    #The idea is to find the sum of odd numbers in the list and add these numbers to a set and use that set to calculate the sum. \n    #Then we need to find the sum of even numbers in the list, and then add these numbers to a set and use that set to calculate the sum. \n    #The idea is to do this to find the sum of even numbers in the list and then add these numbers to a set and use that set to calculate the sum. \n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], we have to calculate the sum of odd numbers, since they are odd numbers, so we have to skip the even numbers.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], we have to calculate the sum of even numbers, since they are even numbers, so we have to skip the odd numbers.\n    #So we have three sets of even and odd numbers: 3+1+2+4 = 8, 5+6+7 = 9, 7+8+9 = 11. \n    #We have to go through the odd numbers, add these numbers to the even ones and add these numbers to the odd ones, and then return the sum of these new sets. \n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], we have to calculate the sum of odd numbers, since they are odd numbers, so we have to skip the even numbers.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], we have to calculate the sum of even numbers, since they are even numbers, so we have to skip the odd numbers.\n    #So we have two sets of even and odd numbers: 3+1+2+4 = 8, 5+6+7 = 9, 7+8+9 = 11.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], we have to calculate the sum of odd numbers, since they are odd numbers, so we have to skip the even numbers.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], we have to calculate the sum of even numbers, since they are even numbers, so we have to skip the odd numbers.\n    #So we have two sets of even and odd numbers: 3+1+2+4 = 8, 5+6+7 = 9, 7+8+9 = 11.\n    #Finally we have to return the sum of these two sets.\n    #What we get is a set of even numbers and a set of odd numbers, that we have to add together. \n    #Note, the easiest way to do this is to use a set of odd numbers in the list, and then find the sum of all the even numbers in that set.\n    #We then need to find the sum of all the odd numbers in the set, and then add those numbers to the set and return the sum.\n    #It is not very efficient to make a set of even numbers, but it does reduce the number of comparisons, so this can be done.\n    #This is a bit slow, as it does take a while. \n    #The idea is to find the sum of all the even numbers in the set.\n    #Then we just add the even numbers to the set and add the odd numbers to the set, and then we return the sum.\n    #The idea is to find the sum of all the odd numbers in the set, and then add those numbers to the set, and return the sum.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], so we have to calculate the sum of odd numbers, since they are odd numbers, so we have to skip the even numbers.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], so we have to calculate the sum of even numbers, since they are even numbers, so we have to skip the odd numbers.\n    #So we have two sets of even and odd numbers: 3+1+2+4 = 8, 5+6+7 = 9, 7+8+9 = 11.\n    #We have to find the sum of odd numbers in the set, and then add these numbers to the set and return the sum.\n    #Then we just add the even numbers to the set and add the odd numbers to the set, and return the sum.\n    #The idea is to find the sum of even numbers in the set, and then add those numbers to the set, and return the sum.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], so we have to calculate the sum of odd numbers, since they are odd numbers, so we have to skip the even numbers.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], so we have to calculate the sum of even numbers, since they are even numbers, so we have to skip the odd numbers.\n    #So we have two sets of even and odd numbers: 3+1+2+4 = 8, 5+6+7 = 9, 7+8+9 = 11.\n    #We have to calculate the sum of odd numbers in the set, and then add those numbers to the set and return the sum.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], so we have to calculate the sum of even numbers, since they are odd numbers, so we have to skip the odd numbers.\n    #For example, [3, 1, 2, 4, 2, 6, 7, 8, 9], so we have to calculate the sum of odd numbers, since they are even numbers, so we have to skip the odd numbers.\n    #So we have two sets of even and odd numbers: 3+1+2+4 = 8, 5+6"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[e1, e2] for e1, e2 in groupby(sorted(list1))]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    length = len(list1)\n    if length == 0:\n        return []\n    if length == 1:\n        return [list1]\n    if length == 2:\n        return [list1[0:1] + list1[1:2]]\n    if length == 3:\n        return [list1[0:1] + list1[0:2] + list1[2:3]]\n    if length == 4:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[2:4]]\n    if length == 5:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[2:5]]\n    if length == 6:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[2:6]]\n    if length == 7:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[2:7]]\n    if length == 8:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[2:8]]\n    if length == 9:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[2:9]]\n    if length == 10:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[2:10]]\n    if length == 11:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[2:11]]\n    if length == 12:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[0:11] + list1[2:12]]\n    if length == 13:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[0:11] + list1[0:12] + list1[2:13]]\n    if length == 14:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[0:11] + list1[0:12] + list1[0:13] + list1[2:14]]\n    if length == 15:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[0:11] + list1[0:12] + list1[0:13] + list1[0:14] + list1[2:15]]\n    if length == 16:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[0:11] + list1[0:12] + list1[0:13] + list1[0:14] + list1[0:15] + list1[2:16]]\n    if length == 17:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[0:11] + list1[0:12] + list1[0:13] + list1[0:14] + list1[0:15] + list1[0:16] + list1[2:17]]\n    if length == 18:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[0:11] + list1[0:12] + list1[0:13] + list1[0:14] + list1[0:15] + list1[0:16] + list1[0:17] + list1[2:18]]\n    if length == 19:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[0:11] + list1[0:12] + list1[0:13] + list1[0:14] + list1[0:15] + list1[0:16] + list1[0:17] + list1[0:18] + list1[2:19]]\n    if length == 20:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[0:11] + list1[0:12] + list1[0:13] + list1[0:14] + list1[0:15] + list1[0:16] + list1[0:17] + list1[0:18] + list1[0:19] + list1[2:20]]\n    if length == 21:\n        return [list1[0:1] + list1[0:2] + list1[0:3] + list1[0:4] + list1[0:5] + list1[0:6] + list1[0:7] + list1[0:8] + list1[0:9] + list1[0:10] + list1[0:11] + list1["
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for i in range(1, len(list1)):\n        for j in range(i, -1, -1):\n            if list1[j] == list1[j + 1]:\n                list1[j], list1[j + 1] = list1[j + 1], list1[j]\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    for n in range(len(list1) - 1):\n        if list1[n]!= list1[n + 1] and not n in res:\n            res.append(n)\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    sublists = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    for i in range(len(list2)-1):\n        list1[i+1] = list1[i]\n        list2[i+1] = list2[i]\n    list1[0] = list1[-1]\n    list2[0] = list2[-1]\n    for i in list1:\n        if i not in sublists:\n            sublists.append(i)\n    for i in range(len(sublists)-1):\n        sublists[i+1] = sublists[i]\n    return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # write your code here\n    if len(list1) <= 1:\n        return list1\n    n = len(list1)\n    a = list1[1:-1]\n    b = []\n    for i in range(n):\n        if a[i] in b:\n            continue\n        else:\n            b.append(a[i])\n    return b\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    count = 1\n    for i in list1:\n        if count % 2 == 0:\n            yield [i] * count\n        else:\n            yield list(reversed(i)) * count\n        count += 1\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_of_lists = []\n    for i in list1:\n        for j in list1:\n            if i == j:\n                list_of_lists.append([i, j])\n    return list_of_lists\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    p1 = []\n    p2 = []\n    for i in list1:\n        if i not in p1:\n            p1.append(i)\n        if i not in p2:\n            p2.append(i)\n    return p1, p2\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result_list = []\n    # get the length of the list and store it in a variable\n    length = len(list1)\n    for i in range(0, length - 1):\n        # get current element in the list\n        current_element = list1[i]\n        # if it's the first element, current_element becomes the first element and append it to the result list\n        if i == 0:\n            result_list.append([current_element])\n            continue\n        # if it's not the first element\n        if i == length - 1:\n            # if current_element isn't already in the result list, append it to the result list\n            if current_element not in result_list:\n                result_list.append([current_element])\n            else:\n                # get the element that is already in the list\n                element = current_element\n                # add the element as the last element of the sublist\n                result_list.append([element])\n                # get the element that is not already in the list\n                result_list.pop(result_list.index(current_element))\n            continue\n        # if it's not the last element, we need to find the sub-list that contains the element as the current element\n        sub_list = result_list[i + 1:]\n        if current_element not in sub_list:\n            # if current_element isn't already in the sub-list, append it to the sub-list\n            result_list.append([current_element])\n            # add the element that is already in the sub-list as the last element of the sub-list\n            result_list.extend(sub_list)\n            # get the element that isn't already in the sub-list\n            result_list.pop(i + 1)\n        # if it is the last element, we need to find the sub-list that contains the element as the current element\n        elif current_element in sub_list:\n            # get the element that is already in the sub-list\n            element = current_element\n            # append the element as the last element of the sub-list\n            result_list.append([element])\n            # add the element that is not already in the sub-list as the current element\n            result_list.extend(sub_list)\n            # get the element that isn't already in the sub-list\n            result_list.pop(i + 1)\n    return result_list\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for x in list1:\n        if type(x)!= tuple:\n            dict1[tuple(x)] = 1\n        else:\n            dict1[tuple(x)] = dict1.get(tuple(x), 0) + 1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        sublist = list1[i:]\n        d[tuple(sublist)] = d.get(tuple(sublist), 0) + 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {k: len(list(v)) for k, v in itertools.groupby(list1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def unique(list1,list2):\n        dict1 = {}\n        for item in list1:\n            if item in dict1:\n                dict1[item] += 1\n            else:\n                dict1[item] = 1\n        for item in list2:\n            if item in dict1:\n                dict1[item] += 1\n            else:\n                dict1[item] = 1\n        return dict1\n    dict1 = {}\n    for item in list1:\n        if item in dict1:\n            dict1[item] += 1\n        else:\n            dict1[item] = 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        tuple = ()\n        for j in i:\n            tuple = tuple + (j,)\n        d[tuple] = d.get(tuple, 0) + 1\n    return d\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    def count_lists(list1):\n        # Initialize empty dictionary to store the count of each unique list.\n        counts = {}\n        # Loop through the list\n        for i in range(0, len(list1)):\n            # Check if the tuple has already been accounted for.\n            if list1[i] in counts:\n                # Increase the count of the tuple\n                counts[list1[i]] += 1\n            else:\n                # If it hasn't, add it\n                counts[list1[i]] = 1\n        # Return the dictionary\n        return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for index in range(len(list1)):\n        if list1[index] not in count:\n            count[list1[index]] = 1\n        else:\n            count[list1[index]] += 1\n    return count\n    \ndef list_counter(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for index in range(len(list1)):\n        count[list1[index]] = list1[index]\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    #start with creating a dictionary\n    \n    res_dict = {}\n    \n    for item in list1:\n        if item in res_dict:\n            res_dict[item] += 1\n        else:\n            res_dict[item] = 1\n    \n    return res_dict"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # define a dictionary for the number of lists\n    dictionary = {}\n    # iterate through the list\n    for lst in list1:\n        # get the first element of the list\n        element = lst[0]\n        # count the number of the elements in the list\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(itertools.combinations(test_list, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #import sys\n    #sys.setrecursionlimit(10**6)\n    \n    # if not test_list:\n    #     return []\n    \n    # #create a dict with combi and their corresponding tuples as keys\n    # #use the combination to merge all tuples into a single list\n    # if test_list:\n    #     combinations_dict = {}\n    #     for tup in test_list:\n    #         #append the tuple to the dictionary\n    #         if tup not in combinations_dict:\n    #             combinations_dict[tup] = 1\n    #         else:\n    #             combinations_dict[tup] += 1\n    #     return list(combinations(combinations_dict.keys(), 2))\n    \n    #return list(combinations(test_list,2))\n    #function with custom list of tuples, add elements to a tuple\n    def new_combinations_add_elements_to_tuple(test_list,test_list_2,combinations_dict):\n        #if len(test_list) == len(test_list_2):\n        #    combinations_dict[tuple(test_list)] = 1\n        #    return list(combinations(test_list,2))\n        #elif len(test_list) > len(test_list_2):\n        #    #create a dict with combi and their corresponding tuples as keys\n        #    #use the combination to merge all tuples into a single list\n        #    combinations_dict = {}\n        #    for tup in test_list:\n        #        #append the tuple to the dictionary\n        #        if tup not in combinations_dict:\n        #            combinations_dict[tup] = 1\n        #        else:\n        #            combinations_dict[tup] += 1\n        #    return list(combinations(combinations_dict.keys(), 2))\n        #    #function with custom list of tuples, add elements to a tuple\n        #    def new_combinations_add_elements_to_tuple(test_list,test_list_2,combinations_dict):\n        #        #if len(test_list) == len(test_list_2):\n        #        #    combinations_dict[tuple(test_list)] = 1\n        #        #    return list(combinations(test_list,2))\n        #        #elif len(test_list) > len(test_list_2):\n        #        #    #create a dict with combi and their corresponding tuples as keys\n        #        #    #use the combination to merge all tuples into a single list\n        #        #    combinations_dict = {}\n        #        #    for tup in test_list:\n        #        #        #append the tuple to the dictionary\n        #        #        if tup not in combinations_dict:\n        #        #            combinations_dict[tup] = 1\n        #        #        else:\n        #        #            combinations_dict[tup] += 1\n        #        #    return list(combinations(combinations_dict.keys(), 2))\n        #        #    #function with custom list of tuples, add elements to a tuple\n        #        #    def new_combinations_add_elements_to_tuple(test_list,test_list_2,combinations_dict):\n        #        #        #if len(test_list) == len(test_list_2):\n        #        #        #    combinations_dict[tuple(test_list)] = 1\n        #        #        #    return list(combinations(test_list,2))\n        #        #        #elif len(test_list) > len(test_list_2):\n        #        #            #create a dict with combi and their corresponding tuples as keys\n        #        #            #use the combination to merge all tuples into a single list\n        #        #            #combinations_dict = {}\n        #        #            #for tup in test_list:\n        #        #            #    #append the tuple to the dictionary\n        #        #            #    if tup not in combinations_dict:\n        #        #            #        combinations_dict[tup] = 1\n        #        #            #    else:\n        #        #            #        combinations_dict[tup] += 1\n        #        #    return list(combinations(combinations_dict.keys(), 2))\n        #        #    #function with custom list of tuples, add elements to a tuple\n        #        #    def new_combinations_add_elements_to_tuple(test_list,test_list_2,combinations_dict):\n        #        #        #if len(test_list) == len(test_list_2):\n        #        #        #    combinations_dict[tuple(test_list)] = 1\n        #        #        #    return list(combinations(test_list,2))\n        #        #        #elif len(test_list) > len(test_list_2):\n        #        #            #create a dict with combi and their corresponding tuples as keys\n        #        #            #use the combination to merge all tuples into a single list\n        #        #            #combinations_dict = {}\n        #        #            #for tup in test_list:\n        #        #            #    #append the tuple to the dictionary\n        #        #            #    if tup not in combinations_dict:\n        #        #            #        combinations_dict[tup] = 1\n        #        #            #    else:\n        #        #            #        combinations_dict[tup] += 1\n        #        #    return list(combinations(combinations_dict.keys(), 2))\n        #        #    #function with custom list of tuples, add elements to a tuple\n        #        #    def new_combinations_add_elements_to_tuple(test_list,test_list_2,combinations_dict):\n        #        #        #if len(test_list) == len(test_list_2):\n        #        #        #    combinations_dict[tuple(test_list)] = 1\n        #        #        #    return list(combinations(test_list,2))\n        #        #        #elif len(test_list) > len(test_list_2):\n        #        #            #create a dict with combi and their corresponding tuples as keys\n        #        #            #use the combination to merge all tuples into a single list\n        #        #            #combinations_dict = {}\n        #        #            #for tup in test_list:\n        #        #            #    #append the tuple to the dictionary\n        #        #            #    if tup not in combinations_dict:\n        #        #            #        combinations_dict[tup] = 1\n        #        #            #    else:\n        #        #            #        combinations_dict[tup] += 1\n        #        #    return list(combinations(combinations_dict.keys(), 2))\n        #        #    #function with custom list of tuples, add elements to a tuple\n        #        #    def new_combinations_add_elements_to_tuple(test_list,test_list_2,combinations_dict):\n        #        #        #if len(test_list) == len(test_list_2):\n        #        #        #    combinations_dict[tuple(test_list)] = 1\n        #        #        #    return list(combinations(test_list,2))\n        #        #        #elif len(test_list) > len(test_list_2):\n        #        #            #create a dict with combi and their corresponding tuples as keys\n        #        #            #use the combination to merge all tuples into a single list\n        #        #            #combinations_dict = {}\n        #        #            #for tup in test_list:\n        #        #            #    #append the tuple to the dictionary\n        #        #            #    if tup not in combinations_dict:\n        #        #            #        combinations_dict[tup] = 1\n        #        #            #    else:\n        #        #            #        combinations_dict"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    def get_sum_from_tuple(n,tup):\n        '''\n        Check if the given tuple is already in the list and returns its sum\n        '''\n        if n in tup:\n            return tup[n]\n        else:\n            return tup[n] + get_sum_from_tuple(n+1,tup)\n    \n    def test_sum(n,tup):\n        '''\n        Check if the given list of tuples are the sum of any given number of tuples in the tuple list\n        '''\n        if tup == []:\n            return True\n        elif get_sum_from_tuple(n,tup) in tup:\n            return True\n        return False\n    \n    def get_result(n,tup):\n        '''\n        Check if the given list of tuples are the sum of any given number of tuples in the tuple list\n        '''\n        if test_sum(n,tup):\n            return True\n        else:\n            return False\n    \n    sum_list = []\n    for i in test_list:\n        for j in combinations(i,2):\n            if get_result(i,j):\n                sum_list.append(j)\n                \n    return sum_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        return [(test_list[0],)]\n    else:\n        answer = []\n        for i in range(len(test_list[0])):\n            for combo in combinations(test_list,i+1):\n                new_list = [list(tup) for tup in combo]\n                new_list.sort()\n                #print(new_list)\n                #print(answer)\n                if new_list not in answer:\n                    answer.append(new_list)\n        #print(answer)\n        return answer\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Your code here\n    combinations = []\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combinations.append(tuple(test_list[i:j+1]))\n    return combinations\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # print(test_list)\n    n = len(test_list)\n    # tuple_list = list(tuple(item) for item in test_list)\n    # print(tuple_list)\n    answer = []\n    for i in range(2,n+1):\n        for j in combinations(test_list,i):\n            answer.append(j)\n    return answer\n    "
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in test_list:\n        result.extend(list(combinations(i,2)))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for i in test_list:\n        for j in test_list:\n            if i + j in test_list:\n                combs.append((i,j))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 1:\n        print(test_list[0])\n        return test_list[0]\n    elif len(test_list) == 0:\n        print(\"No pairs\")\n        return None\n    else:\n        pairs_list = []\n        pair = []\n        for i in range(len(test_list)):\n            for j in range(i,len(test_list)):\n                pairs_list.append([test_list[i],test_list[j]])\n        print(pairs_list)\n        if len(pairs_list) == 1:\n            print(\"Great\")\n            pair = pairs_list[0]\n        else:\n            combination_list = list(combinations(pairs_list, 2))\n            for i in range(len(combination_list)):\n                print(combination_list[i])\n                test_pair = combination_list[i]\n                for j in range(len(test_pair)):\n                    if test_pair[j] not in test_list:\n                        test_pair.remove(test_pair[j])\n            print(test_pair)\n        return test_pair\n    \n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def combinations_rec(i, j, value_list, total_list):\n        if i==j:\n            total_list.append(value_list[i])\n        else:\n            value_list[i] = value_list[i] + combinations(value_list[j:j+1], i)[j]\n            combinations_rec(i+1, j, value_list, total_list)\n            value_list[i] = value_list[i] - combinations(value_list[j:j+1], i)[j]\n    total_list = []\n    value_list = []\n    for i in range(len(test_list)):\n        value_list.append(test_list[i])\n    total_list = total_list + value_list\n    combinations_rec(0, 0, value_list, total_list)\n    return total_list\n    \n    \ndef test():\n    tests = [\n        ([(1,2), (1,3)], [(1,2), (1,3), (2,3)]),\n        ([(1,2), (1,3)], [(1,2), (1,3), (2,3)]),\n        ([(1,2,3), (1,2,3)], [(1,2), (1,2,3), (1,2,3)])\n    ]\n    for i, (a,b) in enumerate(tests):\n        assert find_combinations(a) == b\n        assert find_combinations(b) == a\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    for i in range(1,int(math.sqrt(n)+1)) :\n        if n%i==0 : return False\n    return True\n    \ndef count_divisors_recursive(n) : \n    '''\n    A recursive function for counting the number of divisors. \n    '''\n    if n == 1 : return 1\n    if count_divisors(n) :\n        return 2 + count_divisors(n-1)\n    return count_divisors_recursive(n-1)\n    \ndef find_divisors(n) :\n    '''\n    A recursive function to find the divisors of a given integer.\n    '''\n    if count_divisors(n) == 1 : return 1\n    return count_divisors(n)\n    \ndef is_prime(n) :\n    '''\n    A recursive function to check whether a given integer is prime or not. \n    '''\n    if n == 1 or n == 0 : return False\n    if n <= 1 : return False\n    if n%2 == 0 : return False\n    if n%3 == 0 : return False\n    if n%5 == 0 : return False\n    if n%9 == 0 : return False\n    for i in range(4, int(math.sqrt(n)+1), 2) :\n        if n%i==0 : return False\n    return True\n    \ndef lcm(a, b) :\n    '''\n    A recursive function to find the LCM of two numbers.\n    '''\n    return (a*b)//math.gcd(a,b)\n    \ndef prime(n) :\n    '''\n    A recursive function to check whether a given integer is prime or not. \n    '''\n    if n == 1 or n == 0 : return False\n    if n == 2 : return True\n    if n == 3 : return True\n    if n%2 == 0 or n%3 == 0 : return False\n    if n%5 == 0 : return False\n    if n%7 == 0 : return False\n    if n%9 == 0 : return False\n    for i in range(4,int(math.sqrt(n)+1),2) :\n        if n%i==0 : return False\n    return True\n    \ndef gcd(a, b) :\n    '''\n    A recursive function to find the GCD of two numbers. \n    '''\n    if a==b : return a\n    if a<b : return gcd(b,a%b)\n    else : return gcd(a%b, b)\n    \ndef prime_factor(n) :\n    '''\n    A recursive function to check if a given integer is prime factor or not. \n    '''\n    if n == 1 : return False\n    if prime(n) : return True\n    for i in range(2, n//2 + 1) :\n        if n % i == 0 : return False\n    return True\n    \ndef lcm_inverse(a, b) :\n    '''\n    A recursive function to find the LCM of two numbers. \n    '''\n    return lcm(a, (b//a))\n    \ndef modinv(a, m) :\n    '''\n    A recursive function to find the modulo inverse of a number. \n    '''\n    if a==0: return 0\n    if a%m == 0: return m\n    else:\n        m = modinv(m, a%m)\n        return m\n    \ndef inverse(x) :\n    '''\n    A recursive function to find the inverse of a number. \n    '''\n    if x == 0: return 0\n    if x == 1: return 1\n    m = modinv(x, x)\n    if m == 0: return 0\n    elif m == 1: return 1\n    return inverse(m)\n    \ndef lcm(a, b) :\n    '''\n    A recursive function to find the LCM of two numbers. \n    '''\n    return a*b//math.gcd(a,b)\n    \ndef is_power_of_two(n) :\n    '''\n    A recursive function to check whether a given number is a power of two or not. \n    '''\n    if n == 1 : return True\n    if n == 0 : return False\n    if n%2 == 0 : return False\n    if n%3 == 0 : return False\n    if n%5 == 0 : return False\n    if n%7 == 0 : return False\n    for i in range(4, int(math.sqrt(n)+1), 2) :\n        if n%i==0 : return False\n    return True\n    \ndef is_prime_factor(n) :\n    '''\n    A recursive function to check if a given number is prime factor or not. \n    '''\n    if n == 1 : return False\n    if prime(n) : return True\n    for i in range(2, n//2 + 1) :\n        if n%i == 0 : return False\n    return True\n    \ndef modinv(n, p) :\n    '''\n    A recursive function to find the modulo inverse of a number. \n    '''\n    if p==1 : return n\n    if n == 1 or p == n : return 1\n    if n%p == 0 : return modinv(n//p, p)\n    else : return modinv(n%p, p)\n    \ndef is_prime_number(n) :\n    '''\n    A recursive function to check whether a given number is prime or not. \n    '''\n    if n == 1 : return False\n    if n == 2 : return True\n    if n == 3 : return True\n    if n%2 == 0 : return False\n    if n%3 == 0 : return False\n    if n%5 == 0 : return False\n    if n%7 == 0 : return False\n    for i in range(4, int(math.sqrt(n)+1), 2) :\n        if n%i==0 : return False\n    return True\n    \ndef find_prime_factors(n) :\n    '''\n    A recursive function to find the prime factors of a given number. \n    '''\n    if n == 1 : return 1\n    if n == 2 : return 2\n    if n == 3 : return 3\n    if n%2 == 0 : return 2\n    if n%3 == 0 : return 3\n    if n%5 == 0 : return 5\n    if n%7 == 0 : return 7\n    for i in range(4, int(math.sqrt(n)+1), 2) :\n        if n%i==0 : return 2\n    return 3\n    \ndef sum_of_digit(n) :\n    '''\n    A recursive function to find the sum of digits of a given number. \n    '''\n    if n == 0: return 0\n    if n == 1: return 1\n    return sum_of_digit(n-1)\n    \ndef sum_of_factor(n) :\n    '''\n    A recursive function to find the sum of factors of a given number. \n    '''\n    if n == 0 : return 0\n    if n == 1: return 1\n    return sum_of_factor(n-1) + n\n    \ndef pow(n, d) :\n    '''\n    A recursive function to find the product of the square of a given number. \n    '''\n    if n==0 : return 1\n    if n==1 : return n\n    if n%2 == 0 : return n\n    if n%3 == 0 : return n*n\n    if n%5 == 0 : return n*(n-1)\n    if n%7 == 0 : return n*(n-2)\n    for i in range(4, int(math.sqrt(n)+1), 2) :\n        if n%i==0 : return n\n    return pow(n, d)\n    \ndef check(n) :\n    '''\n    A recursive function to check whether a given number is a prime or not. \n    '''\n    if n == 1 : return False\n    if n == 2 : return True\n    if n == 3 : return True\n    if n%2 == 0 : return False\n    if n%3 == 0 : return False\n    if n%5 == 0 : return False\n    if n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n%2 == 0: \n        return True\n    else: \n        return False\ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n==0 or n==1 or n==2 : \n        return False\n    if n==3 or n==5 or n==7 or n==9 : \n        return True\n    if n%2 == 0 : \n        return False\n    for i in range(3,int(math.sqrt(n))+1,2) : \n        if n%i == 0: \n            return False\n    return True\ndef is_prime_factor(n, k) : \n    '''\n    Write a python function to check whether the number is prime factor or not. \n    '''\n    if n==1 or n==k or n==k+1 : \n        return False\n    if n==2 or n==3 or n==4 or n==6 or n==8 or n==9 : \n        return True\n    for i in range(3,int(math.sqrt(n))+1,2) : \n        if n%i == 0: \n            return False\n    return True\ndef is_prime_factor_v2(n, k) : \n    '''\n    Write a python function to check whether the number is prime factor or not.\n    '''\n    if n==1 or n==k or n==k+1 : \n        return False\n    if n==2 or n==3 or n==4 or n==6 or n==8 or n==9 : \n        return True\n    if n==3 and k<3 : \n        return False\n    for i in range(3,int(math.sqrt(n))+1,2) : \n        if n%i == 0 : \n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    while i * i <= n: \n        if n % i == 0: \n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n==1 or n==2 or n==3:\n        return True\n    if n<2:\n        return False\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    #Your code goes here\n    divisors=[]\n    for i in range(1,n+1) :\n        if (n%i==0):\n            divisors.append(i)\n    if(len(divisors)==0) :\n        return(0)\n    else :\n        return(len(divisors))"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        divisors = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                divisors += 1\n    if divisors == 2:\n        return \"The number is prime\"\n    elif divisors == 3:\n        return \"The number is composite\"\n    else:\n        return \"The number is not prime\"\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n == 2) : \n        return False \n    elif (n == 0) : \n        return True \n    else : \n        i = 3 \n        while i * i <= n : \n            if (n % i == 0) : \n                return False\n            i += 2\n        return True \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n % 2 == 0): \n        return False\n    for i in range(3, math.floor(math.sqrt(n))+1, 2): \n        if (n % i == 0): \n            return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    divisors = 0\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            divisors += 1\n    if divisors == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    \n    if arr == [] or len(arr) == 1:\n        return arr[0]\n    if len(arr) % 2 == 0:\n        even_sum = odd_sum = arr[0]\n        even_sum += odd_sum\n        return odd_sum\n    else:\n        odd_sum = arr[0]\n        even_sum = arr[0]\n        for i in range(1, len(arr)):\n            if i % 2 == 0:\n                even_sum += arr[i]\n            else:\n                odd_sum += arr[i]\n        return odd_sum - even_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) <= 1:\n        return sum(arr)\n    else:\n        return odd_length_sum(arr[1:]) + odd_length_sum(arr[:-1])\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = 0\n    odd_sum = 0\n    for i in range(0, len(arr)):\n        # print(f'i = {i}')\n        # print(arr[i])\n        if arr[i] % 2 == 1:\n            odd_length += 1\n            odd_sum += arr[i]\n    print(f'odd length sum = {odd_length}')\n    print(f'odd sum = {odd_sum}')\n    "
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n        if (i + 1) % 2 == 0:\n            s -= arr[i + 1]\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)<2:\n        return 0\n    elif len(arr)==2:\n        return arr[0] + arr[1]\n    else:\n        sum = 0\n        odd_length = len(arr)%2\n        for i in range(0, len(arr)):\n            if odd_length == 0:\n                break\n            elif odd_length == 1:\n                break\n            else:\n                if arr[i] % 2!= 0:\n                    sum += arr[i]\n                else:\n                    sum += arr[i]\n                    odd_length -= 1\n                if odd_length == 0:\n                    break\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    i = 0\n    while i < len(arr):\n        s += arr[i]\n        if i % 2!= 0:\n            i += 1\n        else:\n            i += 1\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd = [0]\n    odd_sum = 0\n    for i in range(1, len(arr)):\n        odd.append(odd[i-1] + arr[i])\n    for i in range(len(odd) - 1, -1, -1):\n        odd_sum = odd[i] + odd_sum\n    return odd_sum\n    \n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maxc = max(r, g, b)\n    if maxc == r:\n        h = 0\n    elif maxc == g:\n        h = 30\n    elif maxc == b:\n        h = 60\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # TODO: define r, g, b functions as it was before\n    # TODO: write code\n    # TODO: return the hsv color\n    pass"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if not isinstance(r, (int, float)):\n        raise TypeError(\"r should be numeric.\")\n    if not isinstance(g, (int, float)):\n        raise TypeError(\"g should be numeric.\")\n    if not isinstance(b, (int, float)):\n        raise TypeError(\"b should be numeric.\")\n    if not isinstance(r, (int, float, bool)):\n        raise TypeError(\"r should be numeric.\")\n    if not isinstance(g, (int, float, bool)):\n        raise TypeError(\"g should be numeric.\")\n    if not isinstance(b, (int, float, bool)):\n        raise TypeError(\"b should be numeric.\")\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def conv(r, g, b):\n        return int(r*(255/255)), int(g*(255/255)), int(b*(255/255))\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # creating a new variable\n    max_red = 255\n    max_green = 255\n    max_blue = 255\n    # get the maximum\n    max_red = max(r, max_red)\n    max_green = max(g, max_green)\n    max_blue = max(b, max_blue)\n    # get the minimum\n    min_red = min(r, max_red)\n    min_green = min(g, max_green)\n    min_blue = min(b, max_blue)\n    # convert to hsv\n    max_red = max_red * 6.0\n    min_green = min_green * 6.0\n    max_blue = max_blue * 6.0\n    rgb_range = max_red - min_red\n    # create an empty array\n    h = 0.0\n    s = 0.0\n    v = 0.0\n    # calc hsv\n    if rgb_range!= 0:\n        # normalize the input\n        r = (r - min_red) / rgb_range\n        g = (g - min_green) / rgb_range\n        b = (b - min_blue) / rgb_range\n        # add the output\n        h = max(0.0, 0.5 * (1.0 + math.atan2(math.fabs(r), math.fabs(g)) - 3.0))\n        s = max(0.0, 0.5 * (1.0 + math.atan2(math.fabs(g), math.fabs(b)) - 3.0))\n        v = max(0.0, 0.5 * (1.0 + math.atan2(math.fabs(b), math.fabs(r)) - 3.0))\n    else:\n        # error cases\n        s = 0.0\n        v = 0.0\n    if h!= 0.0 and s!= 0.0 and v!= 0.0:\n        # get hue saturation value\n        hue_delta = hue * 360.0\n        sat = 1.0 - math.fabs(hue_delta)\n        val = math.sinh(hue_delta * math.pi)\n        # create an array with data\n        hsv = np.array([hue_delta, sat, val])\n        # hsv to rgb array\n        hsv = np.array([hue_delta, sat, val], dtype=np.float64)\n        hsv = np.array(hsv, dtype=np.float64)\n        # get rid of tzinfo\n        hsv[1] = hsv[1] % 1.0\n        hsv = hsv.astype(np.uint8)\n        # return the array\n        return hsv\n    else:\n        # hsv to rgb array\n        hsv = np.array([hue, saturation, value])\n        # convert rgb to rgb array\n        hsv = hsv.astype(np.float64)\n        hsv = np.array(hsv, dtype=np.float64)\n        # return the array\n        return hsv\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r*255\n    g = g*255\n    b = b*255\n    \n    h, s, v = 0.0, 0.0, 0.0\n    \n    if r <= 0.0:\n        h = 0\n        s = 0\n        v = (0.0, g*0.0, b*0.0)\n    elif g <= 0.0:\n        h = 60\n        s = (60*g)/(255.0)\n        v = (b*0.0, 0.0, 0.0)\n    elif b <= 0.0:\n        h = 120\n        s = (60*(r-g)/(255.0))\n        v = (0.0, 0.0, 0.0)\n    else:\n        h = 60\n        s = 60\n        v = (b*0.0, g*0.0, 0.0)\n    \n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r >= 0 and g >= 0 and b >= 0:\n        rgb = [r, g, b]\n        hue = 0.706\n        saturation = 0.769\n        value = [0, 0, 0]\n    elif r >= 0 and g >= 0 and b < 0:\n        rgb = [r, g, b]\n        hue = 0.46\n        saturation = 0.5\n        value = [0, 0, 0]\n    elif r >= 0 and g < 0 and b >= 0:\n        rgb = [r, g, b]\n        hue = 0.314\n        saturation = 0.591\n        value = [0, 0, 0]\n    elif r < 0 and g >= 0 and b >= 0:\n        rgb = [r, g, b]\n        hue = 0.721\n        saturation = 0.792\n        value = [0, 0, 0]\n    elif r < 0 and g < 0 and b < 0:\n        rgb = [r, g, b]\n        hue = 0.73\n        saturation = 0.652\n        value = [0, 0, 0]\n    elif r < 0 and g < 0 and b >= 0:\n        rgb = [r, g, b]\n        hue = 0.46\n        saturation = 0.5\n        value = [0, 0, 0]\n    elif r < 0 and g < 0 and b < 0:\n        rgb = [r, g, b]\n        hue = 0.314\n        saturation = 0.591\n        value = [0, 0, 0]\n    else:\n        rgb = [r, g, b]\n        hue = 0.721\n        saturation = 0.792\n        value = [0, 0, 0]\n    \n    print(rgb)\n    \n    print(hue, saturation, value)\n    return [hue, saturation, value]\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert to float\n    r = float(r)\n    g = float(g)\n    b = float(b)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # make an array of the h,s,v values\n    r_arr = [float(r) for r in r.split(',')]\n    g_arr = [float(g) for g in g.split(',')]\n    b_arr = [float(b) for b in b.split(',')]\n    \n    # determine the h,s,v from the array\n    h = max(r_arr)\n    s = min(r_arr)\n    v = max(g_arr)\n    \n    # determine saturation and value\n    saturation = h/255.0\n    value = v/255.0\n    \n    # create an array of the h,s,v values sorted in reverse order\n    s_arr = sorted([(v, i) for i, v in enumerate(sorted(g_arr))], reverse=True)\n    \n    # use the max h,s,v to determine the appropriate h,s,v values\n    h, s, v = s_arr[0]\n    \n    # create a new h,s,v array of 0.0\n    h_arr = [0.0 for i in range(3)]\n    \n    # fill the h,s,v array using the h,s,v values\n    for i in range(3):\n        h_arr[i] = (h_arr[i] + h) / 2.0\n        s_arr[i][1] = s_arr[i][1] * (saturation / 100.0)\n        s_arr[i][2] = s_arr[i][2] * (saturation / 100.0)\n    \n    # create the final h,s,v array\n    final_arr = [0.0 for i in range(3)]\n    \n    # fill the h,s,v array using the h,s,v values\n    for i in range(3):\n        final_arr[i] = (final_arr[i] + value) * (value / 100.0)\n    \n    # construct the final h,s,v values\n    final_arr[0] = h_arr[0]\n    final_arr[1] = h_arr[1]\n    final_arr[2] = h_arr[2]\n    \n    # convert the final values to a list\n    r_arr = sorted(final_arr[0:2], reverse=True)\n    g_arr = sorted(final_arr[0:2], reverse=True)\n    b_arr = sorted(final_arr[0:2], reverse=True)\n    \n    # convert to rgb\n    r_arr = [int(i * 255) for i in r_arr]\n    g_arr = [int(i * 255) for i in g_arr]\n    b_arr = [int(i * 255) for i in b_arr]\n    \n    # return the rgb values as a string\n    return \",\".join(str(i) for i in r_arr + g_arr + b_arr)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert to numpy array\n    r = r/255\n    g = g/255\n    b = b/255\n    \n    # create 4 x 1 x 3 array to store h, s, v\n    # since h, s and v will be 1/255, just multiply by 1/3\n    h = np.array([r,g,b]) * 0.3333\n    s = np.array([0,0,0])\n    v = np.array([0,0,0])\n    \n    # compute the colorshade\n    for i in range(3):\n        s[i] = cv2.addWeighted(h[i], 0.5, s[i], 0.5, 0)\n        v[i] = cv2.addWeighted(h[i], 0.5, v[i], 0.5, 0)\n    \n    # output\n    return np.array([h, s, v])\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    if len(list1)%2==0:\n        print(\"Even number\")\n        \n        for i in range(len(list1)//2):\n            for j in range(i, len(list1)-i):\n                if list1[j]%2==0:\n                    print(list1[i], list1[j])\n                    list1[i] = list1[j]\n                    list1[j] = 0\n        print(list1)\n        \n        \n        \n    else:\n        print(\"Odd number\")\n        \n        for i in range(len(list1)//2):\n            for j in range(i, len(list1)-i):\n                if list1[j]%2==1:\n                    print(list1[i], list1[j])\n                    list1[i] = list1[j]\n                    list1[j] = 0\n        print(list1)\n        \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        even_odd = []\n        even_odd.append(list1[0])\n        even_odd.append(list1[len(list1) // 2])\n        for i in range(1, len(list1) // 2):\n            even_odd.append(list1[i] * 2)\n        return (even_odd)\n    else:\n        even_odd = []\n        even_odd.append(list1[0])\n        even_odd.append(list1[len(list1) // 2])\n        for i in range(1, len(list1) // 2):\n            even_odd.append(list1[i] * 2)\n        return (even_odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_odd.append(list1[i])\n        else:\n            pass\n    return(sum(even_odd))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if list1 == []:\n        print(\"No input\")\n        return\n    if len(list1) == 1:\n        return list1[0] * list1[0]\n    if len(list1) == 2:\n        return list1[0] * list1[1]\n    if list1[1] % 2 == 0:\n        list1[1] = list1[1] + list1[0]\n    else:\n        list1[1] = list1[1] - list1[0]\n    return mul_even_odd(list1[0:2]) * mul_even_odd(list1[2:])\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    list1.sort()\n    \n    #If the number of elements are odd then we need to remove all elements which are odd\n    if len(list1)%2 == 1:\n        list1 = list1[:-1]\n    \n    #If the number of elements are even then we need to remove all elements which are even\n    else:\n        list1 = list1[:-1]\n        \n    product = 1\n    for i in list1:\n        product = product * i\n        \n    return product\n    \n    \n    \n    "
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Loop through list and find the sum\n    # Write your code here\n    sum = 0\n    for element in list1:\n        if element % 2 == 0:\n            sum += element\n        else:\n            continue\n    return sum\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = list1[0::2]\n    odd = list1[1::2]\n    p = 1\n    for i in range(0, len(even)):\n        p = p * even[i]\n    p = p * odd[len(even) - 1]\n    return p\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    p = 1\n    for i in range(len(list1)):\n        p = p * list1[i]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) <= 1:\n        return list1\n    elif len(list1) % 2 == 0:\n        return (list1[:int(len(list1)/2)]*2) + list1[int(len(list1)/2):]\n    else:\n        return list1[:int(len(list1)/2)] + list1[int(len(list1)/2):]\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    n = len(list1)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return list1[0]\n    else:\n        for i in range(n):\n            if i % 2 == 0:\n                list1[i] = list1[i] * list1[i]\n            else:\n                list1[i] = list1[i] * list1[i + 1]\n        return list1[0]\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_str_int = tuple(map(int, test_str))\n        return test_str_int\n    except ValueError:\n        return print('Invalid tuple')\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str_list = []\n    for item in test_str:\n        test_str_list.append(int(item))\n    return test_str_list\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int,test_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tup = ()\n    for i in range(len(test_str)):\n        tup += (i+1,)\n    return tup"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_str = ''\n    for i in test_str:\n        int_str += str(i)\n    return int_str\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for i in test_str:\n        int_tuple += (int(i),)\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # TODO: modify the code here\n    return tuple(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return (int(x) for x in test_str.split(\",\"))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return (int(t) for t in test_str.split(','))\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    j = bisect.bisect_right(a, x)\n    if j == len(a) or a[j+1] > x:\n        return j+1\n    else:\n        return j\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return len(a)\n    else:\n        return left\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # check if the value is already present\n    for i in range(len(a) - 1):\n        if a[i] == x:\n            return i\n    # if the value is not present, we add it to the list\n    # at the end of the list, we insert it at the last index\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i - 1] < x:\n        return i - 1\n    else:\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    if x < a[0]:\n        return 0\n    if x > a[-1]:\n        return len(a)-1\n    if x == a[0]:\n        return 0\n    i = bisect.bisect_right(a, x)\n    if i < len(a):\n        return i\n    else:\n        return len(a)-1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i >= len(a):\n        return len(a)\n    else:\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a,x, lo=-1, hi=len(a))\n    if left == len(a):\n        return left\n    return left - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[x] < a[-1]: # when the current element is smaller than the rightmost element in the list\n        #we do a linear search, not a binary search\n        i = bisect.bisect_left(a, x)\n        while a[i-1] < x:\n            i -= 1\n        if i == 0:\n            a[i] = x\n        else:\n            a[i] = a[i-1]\n            a[i-1] = x\n    else: # when the current element is greater than the rightmost element in the list\n        # we do a binary search\n        i = bisect.bisect_left(a, x)\n        if i!= 0:\n            while a[i-1] < x:\n                i -= 1\n            if i == 0:\n                a[i] = x\n            else:\n                a[i] = a[i-1]\n                a[i-1] = x\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a, x, lo=-1, hi=0)\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    # get the mid index of the sorted array\n    mid = (low + high) // 2\n    # If the middle value of the array is lesser than the x, then we can assign x to the middle element of array\n    # If the middle value of the array is greater than the x, then we can assign x to the rightmost element of array\n    # Otherwise, we sort the array and reassign the value of the middle element\n    if mid < 0 or a[mid] <= x:\n        # If the element of the middle element is less than the x, then we can assign the value of the middle element to x\n        # else, we assign the middle element to a[mid+1]\n        if a[mid] < x:\n            a[mid+1] = x\n        # If the x is greater than the middle element, then we can assign the x to the rightmost element of array\n        else:\n            a[mid] = x\n    # else, we assign the middle element to x\n    else:\n        # we create a new array and insert the element after the middle element\n        a[mid] = x\n    # get the index after the last element of sorted array\n    mid_index = (mid + 1) % len(a)\n    # if the last element of sorted array is lesser than the x, then we can assign x to the rightmost element of array\n    # otherwise, we assign the x to the last element of sorted array\n    # Else, we sort the array and reassign the value of the last element\n    if mid_index < len(a) - 1 and a[mid_index] > x:\n        a[mid_index + 1] = x\n    else:\n        a[mid_index] = x\n    return a\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('(.)([bcdfghjklmnpqrstvwxyz]){3,}')\n    return pattern.match(text)\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'h'.\n    '''\n    pattern = re.compile('(.)([abcdefghijklmnopqrstuvwxyz]){4,}')\n    return pattern.match(text)\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'l'.\n    '''\n    pattern = re.compile('(.)([a-zA-Z]){5,}')\n    return pattern.match(text)\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'o'.\n    '''\n    pattern = re.compile('(.)([A-Z]){6,}')\n    return pattern.match(text)\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'p'.\n    '''\n    pattern = re.compile('(.)([A-Z]){7,}')\n    return pattern.match(text)\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'q'.\n    '''\n    pattern = re.compile('(.)([A-Z]){8,}')\n    return pattern.match(text)\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'r'.\n    '''\n    pattern = re.compile('(.)([A-Z]){9,}')\n    return pattern.match(text)\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten's'.\n    '''\n    pattern = re.compile('(.)([A-Z]){10,}')\n    return pattern.match(text)\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 't'.\n    '''\n    pattern = re.compile('(.)([A-Z]){11,}')\n    return pattern.match(text)\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'u'.\n    '''\n    pattern = re.compile('(.)([A-Z]){12,}')\n    return pattern.match(text)\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'v'.\n    '''\n    pattern = re.compile('(.)([A-Z]){13,}')\n    return pattern.match(text)\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'w'.\n    '''\n    pattern = re.compile('(.)([A-Z]){14,}')\n    return pattern.match(text)\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'x'.\n    '''\n    pattern = re.compile('(.)([A-Z]){15,}')\n    return pattern.match(text)\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen 'y'.\n    '''\n    pattern = re.compile('(.)([A-Z]){16,}')\n    return pattern.match(text)\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen 'z'.\n    '''\n    pattern = re.compile('(.)([A-Z]){17,}')\n    return pattern.match(text)\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen 'a'.\n    '''\n    pattern = re.compile('(.)([A-Z]){18,}')\n    return pattern.match(text)\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen 'n'.\n    '''\n    pattern = re.compile('(.)([A-Z]){19,}')\n    return pattern.match(text)\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty 'x'.\n    '''\n    pattern = re.compile('(.)([A-Z]){20,}')\n    return pattern.match(text)\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty 'y'.\n    '''\n    pattern = re.compile('(.)([A-Z]){30,}')\n    return pattern.match(text)\ndef text_match_forty(text):\n    '''\n    Write a function that matches a string that has an a followed by forty 'z'.\n    '''\n    pattern = re.compile('(.)([A-Z]){31,}')\n    return pattern.match(text)\ndef text_match_seventy(text):\n    '''\n    Write a function that matches a string that has an a followed by seventy 'x'.\n    '''\n    pattern = re.compile('(.)([A-Z]){32,}')\n    return pattern.match(text)\ndef text_match_sixty(text):\n    '''\n    Write a function that matches a string that has an a followed by sixty 'z'.\n    '''\n    pattern = re.compile('(.)([A-Z]){33,}')\n    return pattern.match(text)\ndef text_match_seventy_one(text):\n    '''\n    Write a function that matches a string that has an a followed by seventy-one 'y'.\n    '''\n    pattern = re.compile('(.)([A-Z]){34,}')\n    return pattern.match(text)\ndef text_match_six_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'l'.\n    '''\n    pattern = re.compile('(.)([A-Z]){35,}')\n    return pattern.match(text)\ndef text_match_hundred(text):\n    '''\n    Write a function that matches a string that has an a followed by hundred 'h'.\n    '''\n    pattern = re.compile('(.)([A-Z]){36,}')\n    return pattern.match(text)\ndef text_match_eleven_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven-twelve 't'.\n    '''\n    pattern = re.compile('(.)([A-Z]){37,}')\n    return pattern.match(text)\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty-three 'u'.\n    '''\n    pattern = re.compile('(.)([A-Z]){38,}')\n    return pattern.match(text)\ndef text_match_thirty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by thirty-four 'v'.\n    '''\n    pattern = re.compile('(.)([A-Z]){39,}')\n    return pattern.match(text)\ndef text_match_forty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by forty-five 'w'.\n    '''\n    pattern = re.compile('(.)([A-Z]){40,}')\n    return pattern.match(text)\ndef text_match_fifteen_six(text):\n    '''\n    Write a function that matches a string that has an a followe"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'(a|b)*[b][0-9]*',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # TODO: complete this function\n    for i in range(len(text)):\n        if text[i] == \"a\":\n            if (text[i + 1] == \"b\" and text[i + 2] == \"b\") or (text[i + 1] == \"b\" and text[i + 2] == \"b\"):\n                return True\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    s = text.lower()\n    text = re.sub('\\s+',' ', s)\n    text = text.split(' ')\n    for i in range(0,len(text),3):\n        try:\n            if len(text[i+2].lower()) == 2:\n                return text[i+1].lower()+' '+text[i+2].lower()+' '+text[i+3]\n        except:\n            return 'No Match'\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.lower()\n    words = text.split()\n    \n    for word in words:\n        if(re.search(r'a(b|b|b)',word)):\n            print(word)\n    return \"No match\"\ntext_match_three(\"The quick brown fox jumped over the lazy dog\""
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('(?<=\\w)\\'b[^b]*'+text, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    m = re.search(r'a\\b', text)\n    if m:\n        return m.group(0)\n    else:\n        return 'no match'\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # find all brackets\n    brackets = re.findall(\"[([{}]+)\", text)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '(?<=\\w).*(?=\\w)'\n    matches = re.search(pattern,text)\n    if matches:\n        return True\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b'.\n    '''\n    pattern = '(?<=\\w).*(?=\\w)'\n    matches = re.search(pattern,text)\n    if matches:\n        return True\n    else:\n        return False\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'a'.\n    '''\n    pattern = '(?<=\\w).*(?=\\w)'\n    matches = re.search(pattern,text)\n    if matches:\n        return True\n    else:\n        return False\ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'a'.\n    '''\n    pattern = '(?<=\\w).*(?=\\w)'\n    matches = re.search(pattern,text)\n    if matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #Assume 'b' is used for a pattern\n    #'b' = 'abb'\n    text = re.sub(r'\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b\\b', 'bb', text)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    for x in range(len(test_list)):\n        test_str = test_str.replace('%s' % test_list[x], test_list[x])\n    return eval(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(map(eval, test_list.split(',')))\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = []\n    for i in range(len(test_list)):\n        new_tuple.append(test_str[i])\n    return tuple(new_tuple)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #tuple_ = (test_str, test_list)\n    tuple_ = tuple(test_list)\n    #return tuple_\n    return tuple_\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    list_index = 0\n    for each_element in test_str:\n        new_tuple += (list_index, each_element)\n        list_index += 1\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = test_list + [' ']*(len(test_list)-len(test_list))\n    return tuple_list\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = test_str.split(test_list[0])\n    new_tuple.remove(test_list[0])\n    for index, word in enumerate(new_tuple):\n        new_tuple[index] = word[:len(word)-1]\n    return tuple(new_tuple)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (nums[i] % 2 == 0):\n            if (i % 2 == 0):\n                print('The index of even number is:'+ str(i))\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if nums[index]%2==0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums_even = []\n    for i in nums:\n        if i % 2 == 0:\n            nums_even.append(i)\n    if len(nums_even) == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            continue\n        for j in range(i, len(nums), 2):\n            if nums[j] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            print(i)\n            break\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    evens = []\n    for n in nums:\n        if n % 2 == 0:\n            evens.append(n)\n    return evens\n        \n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for num in nums:\n        if num % 2 == 0:\n            print(num)\n        else:\n            print('x')\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] % 2 == 0:\n            print(i)\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if nums[index] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n    \n    "
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    '''\n    You are given a tuple as follows:\n    - first element of the tuple should be a list\n    - second element of the tuple should be a dictionary\n    '''\n    #first element\n    first = test_tup[0]\n    #second element\n    second = test_tup[1]\n    #if first element is a tuple\n    if isinstance(first, tuple):\n        #if second element is a dictionary\n        if isinstance(second, dict):\n            #remove first element\n            #print(test_tup)\n            #print(first[0])\n            #print(second[first[0]])\n            #print(first[1])\n            #print(second[first[0]][first[1]])\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #remove first element\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #remove first element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #remove second element\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #remove first element\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #remove first element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #remove second element\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #remove first element\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #remove first element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #remove first element\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #remove first element\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #remove first element\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #remove second element\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #remove first element\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #print(first.pop(0))\n            #remove first element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #remove second element\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #remove first element\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #print(first.pop(1))\n            #remove second element\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #print(second.pop(first[0]))\n            #remove second element\n            #print(second.pop(first[1]))\n            #print(second.pop(first[1]))\n            #print(second.pop(first"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0:1]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    #print(test_tup)\n    while True:\n        try:\n            tup_name = input('Enter name of the tuple: ')\n            tup_name = tup_name.strip()\n            tup = (tup_name,)\n            test_tup.remove(tup)\n        except:\n            print('Invalid name')\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tuple_list = test_tup[:]\n    for item in tuple_list:\n        if type(item) is tuple:\n            remove_nested(item)\n        else:\n            test_tup.remove(item)\n    return tuple_list\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    try:\n        test_tup.remove(())\n    except ValueError:\n        return None\n    else:\n        return None\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Replace None with the new tuple value.\n    test_tup = (test_tup[0], test_tup[1], None)\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0], test_tup[1], test_tup[2]\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # write your code here\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while len(test_tup) > 0:\n        test_tup.pop()\n    return None\n    \ntest_tuple = (1, 2, 3, 4, 5)\ntest_tuple = remove_nested(test_tuple)\nprint(test_tuple)"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0, len(input_list)):\n        for j in range(0, len(input_list)):\n            if type(input_list[i][j])!= type([]):\n                count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    def count_list_helper(num_of_lists, list_of_lists):\n        if num_of_lists > len(list_of_lists):\n            raise Exception(\"List has more than the number of lists\")\n        return len(list_of_lists[num_of_lists:])\n        \n    count = count_list_helper(len(input_list), input_list)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for el in input_list:\n        if el == []:\n            counter = counter + 1\n        else:\n            counter = counter + 1\n    return counter\n    \ndef count_list_recursive(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if len(input_list) == 0:\n        return 0\n    else:\n        return count_list_recursive(input_list[1:]) + 1\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        count += len(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    counter = 0\n    for i in range(0,len(input_list)):\n        for j in range(0,len(input_list)):\n            if j == i:\n                counter = counter + 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in range(len(input_list)):\n        counter += len(input_list[i])\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    output = 0\n    for i in input_list:\n        output += 1\n    return output\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    # count list\n    count_list_count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count_list_count += len(i)\n    return count_list_count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pos = len(arr) - 1\n    while arr[pos] <= x:\n        pos -= 1\n    return pos\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    last = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < last:\n            last = arr[i]\n    return last\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr)-1\n    while i > 0 and arr[i] < x:\n        i -= 1\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if(len(arr)==0):\n        return None\n    if(len(arr)==1):\n        if(arr[0]<x):\n            return 0\n        return len(arr)-1\n    l=0\n    r=len(arr)-1\n    while(l<=r):\n        mid = (l + r)//2\n        if(arr[mid] == x):\n            return mid\n        elif(arr[mid]>x):\n            r=mid-1\n        else:\n            l=mid+1\n    return None\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return -1\n    if len(arr) == 1:\n        return 0\n    if x < arr[len(arr)-1]:\n        return len(arr)-1\n    else:\n        return len(arr)-1\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start=0\n    end=len(arr)-1\n    \n    while(start<=end):\n        mid=(start+end)//2\n        if(arr[mid]==x):\n            return mid\n        elif(arr[mid]>x):\n            end=mid-1\n        else:\n            start=mid+1\n    return None\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    else:\n        return arr.index(x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[x]<arr[n-1]:\n        return n-1\n    else:\n        return n-1-arr[x]\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)\n    if arr[0]==x:\n        return 0\n    if l==0:\n        return l\n    if l==1:\n        return l-1\n    mid = l/2\n    if arr[mid]==x:\n        return mid\n    elif arr[mid]<x:\n        return last(arr[mid+1:],x)\n    else:\n        return last(arr[:mid],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a[a-z]{2,}\\b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = re.compile(\"a\")\n    res = re.findall(pat, text)\n    return res\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # \n    # Write your code here\n    \n    # pattern = re.compile('(a|b)')\n    # text = pattern.search(text)\n    \n    # if text is None:\n    #     return 'invalid'\n    #     \n    # else:\n    #     return text.group()\n    #\n    # for i in text:\n    #     if i not in 'ab':\n    #         return 'invalid'\n    #     \n    # return 'valid'\n    \n    return re.search('(a|b)', text).group()\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.replace('-','')\n    text = re.sub(r'[^a-zA-Z0-9\\-]', '', text)\n    text = re.sub(r'[^A-Z0-9\\-]', '', text)\n    text = re.sub(r'\\s','', text)\n    text = re.sub('\\t','', text)\n    text = text.lower()\n    text = re.sub('[A-Z][a-z]{2,}', '', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\n','', text)\n    text = re.sub('\\r','', text)\n    text = re.sub('\\t','', text)\n    text = re.sub('\\+','', text)\n    text = re.sub('-','', text)\n    text = re.sub('\\&','', text)\n    text = re.sub('\\:','', text)\n    text = re.sub('\\;','', text)\n    text = re.sub('\\=','', text)\n    text = re.sub('\\!','', text)\n    text = re.sub('\\?','', text)\n    text = re.sub('\\&','', text)\n    text = re.sub('\\;','', text)\n    text = re.sub('\\(','', text)\n    text = re.sub('\\)','', text)\n    text = re.sub('\\;','', text)\n    text = re.sub('\\@','', text)\n    text = re.sub('\\$','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s','', text)\n    text = re.sub('\\s', "
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall('[a-zA-Z]', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start_indicies = re.findall(r'[^\\w\\s]',text)\n    start_indicies_final = re.findall(r'[^\\w\\s]',text)\n    end_indicies = re.findall(r'[^\\w\\s]',text)\n    end_indicies_final = re.findall(r'[^\\w\\s]',text)\n    return start_indicies_final, end_indicies_final\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = 'a[^a]+b'\n    matched = re.findall(regex, text)\n    return matched\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    c = re.compile(r'(a)(\\w+)(b)')\n    try:\n        text_matches = re.search(c, text)\n        return text_matches\n    except Exception as e:\n        print(e)\n        return \"\"\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    matches = re.findall(r\"\\w+'\\w+'\\w+\", text)\n    for match in matches:\n        print(match)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    try:\n        a = re.findall('(?<=[a-z])\\s*', text)\n        b = re.findall('(?<=[a-z])\\s*', text)\n        return (a[0] == b[0] and text.endswith('b')) or (a[0] == text[-1])\n    except:\n        return False\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not dict:\n        return 0\n    return dict.values()[0]\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total = total + i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum = sum + value\n    print(sum)\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s=0\n    for i in dict.values():\n        s+=i\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    s=0\n    for i in dict:\n        s+=dict[i]\n    return s\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n, 0, -1):\n        if i % 2!= 0:\n            s += i\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n * (n+1)/2\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 0:\n        print('Invalid input')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return sum_odd(n-1) + sum_odd(n-2) + sum_odd(n-3)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd = 0\n    if n < 0:\n        return \"Error: Negative numbers not supported!\"\n    for i in range(n, 0, -2):\n        if i % 2!= 0:\n            odd += i\n    return odd\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + sum_odd(n -1)\n    else:\n        return sum_odd(n-1)\n    \n    \n    \n    \n    \nif __name__==\"__main__\":\n    print(sum_odd(10))\n    print(sum_odd(20))\n    print(sum_odd(50))\n    print(sum_odd(50))\n    print(sum_odd(101))\n    print(sum_odd(1001))\n    print(sum_odd(10001))\n    print(sum_odd(10000)"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for x in range(l, r+1):\n        if x % 2!= 0:\n            sum += x\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Your code here\n    # l = int(input())\n    # r = int(input())\n    l = 0\n    r = n\n    s = 0\n    while r - l > 0:\n        s += r - l\n        r = r + 1\n    print(s)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n + 1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n <= 0):\n        raise ValueError('Needs a positive number.')\n    else:\n        sum = 0\n        for i in range(n, -1, -2):\n            if (i % 2 == 1):\n                sum += i\n            else:\n                pass\n        return sum\n        "
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    n = len(arr)\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem\n    return sum_\n    \ndef _square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _squared_sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _product(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 1\n    for elem in arr:\n        sum_ *= elem\n    return sum_\n    \ndef _product_of_all(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod = 1\n    for elem in arr:\n        prod *= elem\n    return prod\n    \ndef _division(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem\n    return sum_\n    \ndef _sum_of_squares(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _square_product(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _product_of_all_squares(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem**2\n    return prod_\n    \ndef _product_of_all_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem\n    return prod_\n    \ndef _product_of_squares_of_squares(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _product_of_squares_of_squares_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem**2\n    return prod_\n    \ndef _product_of_all_square_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _product_of_all_square_square_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem**2\n    return prod_\n    \ndef _sum_of_prod_squares(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _product_of_all_prod(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem\n    return prod_\n    \ndef _product_of_all_prod_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem\n    return prod_\n    \ndef _product_of_all_prod_square_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem\n    return prod_\n    \ndef _sum_of_prod_squares_prod_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _product_of_all_prod_prod(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem\n    return prod_\n    \ndef _product_of_all_prod_prod_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem\n    return prod_\n    \ndef _sum_of_prod_square_prod_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _sum_of_prod_prod_square_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _sum_of_prod_prod_square_square_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _sum_of_prod_square_prod_square_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem\n    return prod_\n    \ndef _product_of_all_square_prod_square_prod_square_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum_ = 0\n    for elem in arr:\n        sum_ += elem**2\n    return sum_\n    \ndef _sum_of_prod_prod_square_prod_square_square_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem\n    return prod_\n    \ndef _product_of_all_square_prod_prod_square_prod_square_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem\n    return prod_\n    \ndef _product_of_all_prod_prod_square_prod_square_square_square(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    prod_ = 1\n    for elem in arr:\n        prod_ *= elem\n    return prod_\n    \ndef _sum_of_prod_prod_square_prod_prod_prod_prod_pro"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #raise NotImplementedError\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n    \n    \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in arr:\n        sum=sum+i\n    return sum\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # your code here\n    n = n & 255\n    if n < 8:\n        return n << d\n    else:\n        return ((n >> d) | (n << (8 - d))) & 255\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #we need to convert the number into a bit string\n    \n    return ((1L << d) | n)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    print(n)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = len(n)\n    c = l//32\n    if(c==0):\n        return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    s=n\n    if d==0:\n        s=s+1\n        return s\n    if d==1:\n        s=s+1\n        return s-1\n    if d==2:\n        s=s-1\n        return s+1\n    if d==3:\n        s=s-1\n        return s+1\n    if d==4:\n        s=s-1\n        return s+1\n    if d==5:\n        s=s-1\n        return s+1\n    if d==6:\n        s=s-1\n        return s+1\n    if d==7:\n        s=s-1\n        return s+1\n    if d==8:\n        s=s-1\n        return s+1\n    if d==9:\n        s=s-1\n        return s+1\n    if d==10:\n        s=s-1\n        return s+1\n    if d==11:\n        s=s-1\n        return s+1\n    if d==12:\n        s=s-1\n        return s+1\n    if d==13:\n        s=s-1\n        return s+1\n    if d==14:\n        s=s-1\n        return s+1\n    if d==15:\n        s=s-1\n        return s+1\n    if d==16:\n        s=s-1\n        return s+1\n    if d==17:\n        s=s-1\n        return s+1\n    if d==18:\n        s=s-1\n        return s+1\n    if d==19:\n        s=s-1\n        return s+1\n    if d==20:\n        s=s-1\n        return s+1\n    if d==21:\n        s=s-1\n        return s+1\n    if d==22:\n        s=s-1\n        return s+1\n    if d==23:\n        s=s-1\n        return s+1\n    if d==24:\n        s=s-1\n        return s+1\n    if d==25:\n        s=s-1\n        return s+1\n    if d==26:\n        s=s-1\n        return s+1\n    if d==27:\n        s=s-1\n        return s+1\n    if d==28:\n        s=s-1\n        return s+1\n    if d==29:\n        s=s-1\n        return s+1\n    if d==30:\n        s=s-1\n        return s+1\n    if d==31:\n        s=s-1\n        return s+1\n    if d==32:\n        s=s-1\n        return s+1\n    if d==33:\n        s=s-1\n        return s+1\n    if d==34:\n        s=s-1\n        return s+1\n    if d==35:\n        s=s-1\n        return s+1\n    if d==36:\n        s=s-1\n        return s+1\n    if d==37:\n        s=s-1\n        return s+1\n    if d==38:\n        s=s-1\n        return s+1\n    if d==39:\n        s=s-1\n        return s+1\n    if d==40:\n        s=s-1\n        return s+1\n    if d==41:\n        s=s-1\n        return s+1\n    if d==42:\n        s=s-1\n        return s+1\n    if d==43:\n        s=s-1\n        return s+1\n    if d==44:\n        s=s-1\n        return s+1\n    if d==45:\n        s=s-1\n        return s+1\n    if d==46:\n        s=s-1\n        return s+1\n    if d==47:\n        s=s-1\n        return s+1\n    if d==48:\n        s=s-1\n        return s+1\n    if d==49:\n        s=s-1\n        return s+1\n    if d==50:\n        s=s-1\n        return s+1\n    if d==51:\n        s=s-1\n        return s+1\n    if d==52:\n        s=s-1\n        return s+1\n    if d==53:\n        s=s-1\n        return s+1\n    if d==54:\n        s=s-1\n        return s+1\n    if d==55:\n        s=s-1\n        return s+1\n    if d==56:\n        s=s-1\n        return s+1\n    if d==57:\n        s=s-1\n        return s+1\n    if d==58:\n        s=s-1\n        return s+1\n    if d==59:\n        s=s-1\n        return s+1\n    if d==60:\n        s=s-1\n        return s+1\n    if d==61:\n        s=s-1\n        return s+1\n    if d==62:\n        s=s-1\n        return s+1\n    if d==63:\n        s=s-1\n        return s+1\n    if d==64:\n        s=s-1\n        return s+1\n    if d==65:\n        s=s-1\n        return s+1\n    if d==66:\n        s=s-1\n        return s+1\n    if d==67:\n        s=s-1\n        return s+1\n    if d==68:\n        s=s-1\n        return s+1\n    if d==69:\n        s=s-1\n        return s+1\n    if d==70:\n        s=s-1\n        return s+1\n    if d==71:\n        s=s-1\n        return s+1\n    if d==72:\n        s=s-1\n        return s+1\n    if d==73:\n        s=s-1\n        return s+1\n    if d==74:\n        s=s-1\n        return s+1\n    if d==75:\n        s=s-1\n        return s+1\n    if d==76:\n        s=s-1\n        return s+1\n    if d==77:\n        s=s-1\n        return s+1\n    if d==78:\n        s=s-1\n        return s+1\n    if d==79:\n        s=s-1\n        return s+1\n    if d==80:\n        s=s-1\n        return s+1\n    if d==81:\n        s=s-1\n        return s+1\n    if d==82:\n        s=s-1\n        return s+1\n    if d==83:\n        s=s-1\n        return s+1\n    if d==84:\n        s=s-1\n        return s+1\n    if d==85:\n        s=s-1\n        return s+1\n    if d==86:\n        s=s-1\n        return s+1\n    if d==87:\n        s=s-1\n        return s+1\n    if d==88:\n        s=s-1\n        return s+1\n    if d==89:\n        s=s-1\n        return s+1\n    if d==90:\n        s=s-1\n        return s+1\n    if d==91:\n        s=s-1\n        return s+1\n    if d==92:\n        s=s-1\n        return s+1\n    if d==93:\n        s=s-1\n        return s+1\n    if d==94:\n        s=s-1\n        return s+1\n    if d==95:\n        s=s-1\n        return s+1\n    if d==96:\n        s=s-1\n        return s+1\n    if d==97:\n        s=s-1\n        return s+1\n    if d==98:\n        s=s-1\n        return s+1\n    if d==99:\n        s=s-1\n        return s+"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return 0\n    if d == 1:\n        return 1\n    if n & 0xF!= 0:\n        n = n + 1\n    if n & 0x10!= 0:\n        n = n ^ (n & 0x10)\n    return (n << d) | (n >> (32 - d))\n    \ndef left_rotate_2(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if n == 0:\n        return 0\n    if n & 0xF!= 0:\n        n = n + 1\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if(n<=0):\n        return(0)\n    x=n%32\n    if(d==1):\n        return(n)\n    d=d-1\n    if(d<0):\n        d=d+32\n    y=n>>d\n    return(y+x)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d\n    \n    \n    \ndef binary_to_decimal(n):\n    '''\n    Returns the binary value of n.\n    '''\n    result = 0\n    n_binary = bin(n)\n    n_length = len(n_binary)\n    if n_length == 1:\n        result = int(n_binary, 2)\n    elif n_length == 2:\n        result = int(n_binary, 2) + int(n_binary, 2)\n    elif n_length == 3:\n        result = int(n_binary, 2) + int(n_binary, 2) + int(n_binary, 2)\n    else:\n        print(\"Error: should never get here\")\n    return result\n    \n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #Create a bitmask for the number to be rotated.\n    mask = 1 << d\n    #Create a copy of the number.\n    ncopy = n & mask\n    #Create a mask that is set to zero for the number.\n    zero_mask = (1 << d) - 1\n    #Create a mask that is set to one for the number.\n    one_mask = (1 << d)\n    #Create a mask that is set to the number.\n    nand_mask = ncopy & zero_mask\n    #Create a mask that is set to the number.\n    nor_mask = ncopy & one_mask\n    #Create a mask that is set to the number.\n    xor_mask = ncopy ^ nor_mask ^ one_mask\n    #Create a new number.\n    nand_mask = ncopy & zero_mask\n    nor_mask = ncopy & one_mask\n    xor_mask = ncopy ^ one_mask\n    #Create the final number.\n    nand_xor = nand_mask & xor_mask\n    nor_xor = nor_mask & xor_mask\n    xor_xor = xor_mask & xor_mask\n    #Create a bitmask that is set to 1 to indicate that the number is a positive.\n    bit_mask = 1 << (d-1)\n    #Create a mask that is set to zero for the number.\n    zero_mask_bit = (1 << d - 1)\n    #Create a bitmask that is set to one for the number.\n    one_mask_bit = (1 << d)\n    #Create a mask that is set to the number.\n    nand_mask_bit = (1 << d) - 1\n    #Create a mask that is set to the number.\n    nor_mask_bit = (1 << d)\n    #Create a mask that is set to the number.\n    xor_mask_bit = (1 << d) - 1\n    #Create a bitmask that is set to 1.\n    bit_mask = bit_mask | bit_mask_bit\n    #Create a mask that is set to zero for the number.\n    zero_mask_bit_bit = (1 << (d-1))\n    #Create a mask that is set to one for the number.\n    one_mask_bit_bit = (1 << (d-1))\n    #Create a mask that is set to the number.\n    nand_mask_bit_bit = (1 << (d-1))\n    #Create a mask that is set to the number.\n    nor_mask_bit_bit = (1 << (d-1))\n    #Create a mask that is set to the number.\n    xor_mask_bit_bit = (1 << (d-1))\n    #Create a bitmask that is set to 1 to indicate that the number is a negative.\n    negative_bit_mask = (1 << (d-1))\n    #Create a bitmask that is set to zero for the number.\n    zero_mask_bit_negative = (1 << (d-1))\n    #Create a bitmask that is set to one for the number.\n    one_mask_bit_negative = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nand_mask_bit_negative = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nor_mask_bit_negative = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    xor_mask_bit_negative = (1 << (d-1))\n    #Create a bitmask that is set to zero.\n    zero_mask_bit_zero = (1 << (d-1))\n    #Create a bitmask that is set to one.\n    one_mask_bit_zero = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nand_mask_bit_zero = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nor_mask_bit_zero = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    xor_mask_bit_zero = (1 << (d-1))\n    #Create a bitmask that is set to zero.\n    zero_mask_bit_one = (1 << (d-1))\n    #Create a bitmask that is set to one.\n    one_mask_bit_one = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nand_mask_bit_one = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nor_mask_bit_one = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    xor_mask_bit_one = (1 << (d-1))\n    #Create a bitmask that is set to zero.\n    zero_mask_bit_two = (1 << (d-1))\n    #Create a bitmask that is set to one.\n    one_mask_bit_two = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nand_mask_bit_two = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nor_mask_bit_two = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    xor_mask_bit_two = (1 << (d-1))\n    #Create a bitmask that is set to zero.\n    zero_mask_bit_three = (1 << (d-1))\n    #Create a bitmask that is set to one.\n    one_mask_bit_three = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nand_mask_bit_three = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nor_mask_bit_three = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    xor_mask_bit_three = (1 << (d-1))\n    #Create a bitmask that is set to zero.\n    zero_mask_bit_four = (1 << (d-1))\n    #Create a bitmask that is set to one.\n    one_mask_bit_four = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nand_mask_bit_four = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nor_mask_bit_four = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    xor_mask_bit_four = (1 << (d-1))\n    #Create a bitmask that is set to zero.\n    zero_mask_bit_five = (1 << (d-1))\n    #Create a bitmask that is set to one.\n    one_mask_bit_five = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nand_mask_bit_five = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nor_mask_bit_five = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    xor_mask_bit_five = (1 << (d-1))\n    #Create a bitmask that is set to zero.\n    zero_mask_bit_six = (1 << (d-1))\n    #Create a bitmask that is set to one.\n    one_mask_bit_six = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nand_mask_bit_six = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    nor_mask_bit_six = (1 << (d-1))\n    #Create a bitmask that is set to the number.\n    xor_mask_bit_six = (1 << (d-1))\n    #Create a bitmask that is set to zero.\n    zero_mask_bit_seven = (1 << (d-1))\n    #Create a bi"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=n&0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" +\", \" \", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" +\", \" \", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    regex = re.compile(r'^[ ]+')\n    text_without_spaces = regex.sub('', text)\n    return text_without_spaces\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Empty lines and blank lines should be removed\n    if text.isspace():\n        return \"\"\n    \n    # Remove new lines\n    text = re.sub('\\n+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    regex = r'\\s+'\n    return re.sub(regex, '', text)\ndef remove_all_symbols(text):\n    '''\n    Write a function to remove all symbols from a string.\n    '''\n    regex = r'[\\W_]+'\n    return re.sub(regex, '', text)\ndef remove_single_punctuation(text):\n    '''\n    Write a function to remove single punctuation from a string.\n    '''\n    regex = r\"[^A-Za-z0-9\\']+\"\n    return re.sub(regex, '', text)\ndef remove_digits(text):\n    '''\n    Write a function to remove all digits from a string.\n    '''\n    regex = r'\\d+'\n    return re.sub(regex, '', text)\ndef remove_punctuations(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    regex = r'[^a-zA-Z0-9\\']+'\n    return re.sub(regex, '', text)\ndef remove_punctuations_num(text):\n    '''\n    Write a function to remove punctuation from a string.\n    '''\n    regex = r'[^a-zA-Z0-9\\']+'\n    return re.sub(regex, '', text)\ndef remove_spaces(text):\n    '''\n    Write a function to remove spaces from a string.\n    '''\n    regex = r'\\s+'\n    return re.sub(regex,'', text)\ndef remove_single_lower(text):\n    '''\n    Write a function to remove single lowercase letters from a string.\n    '''\n    regex = r'[a-zA-Z]'\n    return re.sub(regex, '', text)\ndef remove_single_upper(text):\n    '''\n    Write a function to remove single uppercase letters from a string.\n    '''\n    regex = r'[A-Z]'\n    return re.sub(regex, '', text)\ndef remove_single_capital(text):\n    '''\n    Write a function to remove single capital letters from a string.\n    '''\n    regex = r'[A-Z]'\n    return re.sub(regex, '', text)\ndef remove_digits_without_spaces(text):\n    '''\n    Write a function to remove digits from a string without spaces.\n    '''\n    regex = r'[0-9]+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_spaces_num(text):\n    '''\n    Write a function to remove digits from a string without spaces.\n    '''\n    regex = r'[0-9]+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_spaces_num_punct(text):\n    '''\n    Write a function to remove digits from a string without spaces.\n    '''\n    regex = r'[0-9]+'\n    return re.sub(regex, '', text)\ndef remove_stopwords(text):\n    '''\n    Write a function to remove stopwords from a string.\n    '''\n    regex = r'\\w+'\n    return re.sub(regex, '', text)\ndef remove_stopwords_num(text):\n    '''\n    Write a function to remove stopwords from a string.\n    '''\n    regex = r'\\w+'\n    return re.sub(regex, '', text)\ndef remove_stopwords_punct(text):\n    '''\n    Write a function to remove stopwords from a string.\n    '''\n    regex = r'\\w+'\n    return re.sub(regex, '', text)\ndef remove_stopwords_num_punct(text):\n    '''\n    Write a function to remove stopwords from a string.\n    '''\n    regex = r'\\w+'\n    return re.sub(regex, '', text)\ndef remove_digits_with_punctuation(text):\n    '''\n    Write a function to remove digits with punctuation from a string.\n    '''\n    regex = r'[\\W_]+'\n    return re.sub(regex, '', text)\ndef remove_digits_with_punctuation_num(text):\n    '''\n    Write a function to remove digits with punctuation from a string.\n    '''\n    regex = r'[\\W_]+'\n    return re.sub(regex, '', text)\ndef remove_digits_with_punctuation_num_punct(text):\n    '''\n    Write a function to remove digits with punctuation from a string.\n    '''\n    regex = r'[\\W_]+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation(text):\n    '''\n    Write a function to remove digits from a string without punctuation.\n    '''\n    regex = r'\\d+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation_num(text):\n    '''\n    Write a function to remove digits from a string without punctuation.\n    '''\n    regex = r'\\d+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation_num_punct(text):\n    '''\n    Write a function to remove digits from a string without punctuation.\n    '''\n    regex = r'\\d+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation_with_spaces(text):\n    '''\n    Write a function to remove digits from a string without punctuation.\n    '''\n    regex = r'[^a-zA-Z0-9\\']+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation_with_spaces_num(text):\n    '''\n    Write a function to remove digits from a string without punctuation.\n    '''\n    regex = r'[^a-zA-Z0-9\\']+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation_with_spaces_num_punct(text):\n    '''\n    Write a function to remove digits from a string without punctuation.\n    '''\n    regex = r'[^a-zA-Z0-9\\']+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation_with_spaces_with_digits(text):\n    '''\n    Write a function to remove digits from a string without punctuation.\n    '''\n    regex = r'[^a-zA-Z0-9\\']+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation_with_spaces_with_digits_num(text):\n    '''\n    Write a function to remove digits from a string without punctuation.\n    '''\n    regex = r'[^a-zA-Z0-9\\']+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation_with_spaces_with_digits_num_punct(text):\n    '''\n    Write a function to remove digits from a string without punctuation.\n    '''\n    regex = r'[^a-zA-Z0-9\\']+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation_with_spaces_with_digits_num_punct_spaces(text):\n    '''\n    Write a function to remove digits from a string without punctuation.\n    '''\n    regex = r'[^a-zA-Z0-9\\']+'\n    return re.sub(regex, '', text)\ndef remove_digits_without_punctuation_with"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # count the equal numbers\n    count = 0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            if x[i] == y[j] == z[i]:\n                count += 1\n    return count\n    "
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x)\n    print(y)\n    print(z)\n    print(\"the answer is\",x+y+z)\n    \n    \n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(x)==len(y)==len(z)\n    count=0\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                if x[i]==y[j] and y[j]==z[k] and z[k]==x[i]:\n                    count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = str(x)\n    y = str(y)\n    z = str(z)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z == 1:\n        count = 1\n    elif x == y!= z!= 1:\n        count = 2\n    else:\n        count = 0\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x,y,z)\n    x=x.lower()\n    y=y.lower()\n    z=z.lower()\n    cnt=0\n    for i in range(3):\n        if x[i]==y[i] and z[i]==y[i]:\n            cnt+=1\n    print(x,y,z,\"\\n\",cnt)\n    return cnt\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert isinstance(x,int) and isinstance(y,int) and isinstance(z,int), \"Type error\"\n    assert x>=0 and y>=0 and z>=0,\"Type error\"\n    assert x==y==z==1,\"Type error\"\n    assert x!=0 and y!=0 and z!=0,\"Type error\"\n    assert x>=1 and y>=1 and z>=1,\"Type error\"\n    assert x<=10 and y<=10 and z<=10,\"Type error\"\n    cnt=0\n    for i in range(1,x):\n        if x%i==0 and y%i==0 and z%i==0:\n            cnt=cnt+1\n    assert cnt==(x*y*z), \"Value error\"\n    assert cnt<=10, \"Value error\"\n    return cnt"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    num = 0\n    if (x>y and x>z) or (y>x and y>z) or (z>x and z>y):\n        num = 2\n    elif (x==y and x==z) or (x==y and y==z) or (y==x and y==z) or (y==x and z==x):\n        num = 1\n    else:\n        num = 0\n    return num\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    return (x==y and x==z and y==z and x==y)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x,y,z)\n    equal_count = 0\n    for i in range(3):\n        if x[i]==y[i] and x[i]==z[i] :\n            equal_count+=1\n    print(equal_count)\n    return equal_count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if not arr:\n        return 0\n    rotation = 0\n    i = 0\n    while i < len(arr):\n        rotation += 1\n        arr[i], arr[i + rotation] = arr[i + rotation], arr[i]\n        i += 1\n    return rotation\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr)<=1:\n        return 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]<arr[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0 \n    n = len(arr) \n    for i in range(n): \n        rotations += (n - 1 - i) \n        for j in range(0, n - i - 1): \n            if arr[j] > arr[j + 1]: \n                arr[j], arr[j + 1] = arr[j + 1], arr[j] \n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    left = 0\n    right = len(arr) - 1\n    while(left < right):\n        if arr[left] < arr[right]:\n            if arr[left] < arr[right]:\n                count += (right - left)\n                left += 1\n                right -= 1\n            else:\n                count += right - left - 1\n                left += 1\n                right -= 1\n        else:\n            if arr[left] > arr[right]:\n                count += (right - left)\n                left += 1\n                right -= 1\n            else:\n                count += left - right - 1\n                left += 1\n                right -= 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    #initialize counter\n    count=0\n    #loop through array\n    for i in range(n-1):\n        #if element is in left sub-array\n        if arr[i]<arr[i+1]:\n            count+=1\n        #if element is in right sub-array\n        if arr[i]>arr[i+1]:\n            count+=1\n    #if all elements in right sub-array are in left sub-array\n    if arr[n-1]==arr[n-2]:\n        count+=1\n    #if all elements in left sub-array are in right sub-array\n    if arr[0]==arr[n-1]:\n        count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    res = 0\n    \n    for i in range(n):\n        \n        index = n-1-i\n        \n        if arr[index] > arr[index+1]:\n            \n            res += 1\n    \n    print(res)\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    sorted_arr = sorted(arr)\n    i = 0\n    while i < len(arr):\n        j = len(arr) - 1\n        while j > i:\n            if sorted_arr[j] < sorted_arr[j-1]:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n                j -= 1\n            j -= 1\n        i += 1\n    return arr"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr = sorted(arr)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n**.5)\n    if n == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Code here\n    if (n == 0) :\n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n%2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1 :\n        return True\n    if n == 2 :\n        return True\n    if n%2 == 0 :\n        return False\n    if n%4 == 0 :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sq = int(n ** 0.5)\n    return sq == n or (n % 2 == 0 and is_perfect_square(sq + 1) and is_perfect_square(sq - 1))\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 0\n    while n > 1 :\n        if n % i == 0 :\n            return False\n        i += 1\n        n /= i\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = str(n)\n    for i in range(len(s) - 1) :\n        if s[i] == s[i + 1] :\n            pass\n        else :\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 0\n    k = n\n    while (k > 0):\n        a = n // k\n        if a == a:\n            return True\n        i += 1\n        k = a\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0 or n == 1:\n        return n == 0\n    if n % 2 == 0:\n        return False\n    \n    num = n // 2\n    for i in range(1, num + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) or (n % 1)!= 0 :\n        return False\n    s = 1\n    for i in range(2, int(n**0.5) + 1) :\n        if (n % i == 0) :\n            return False\n        s += 1\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 2:\n        if arr[0] * arr[0] == arr[1] * arr[1]:\n            return True\n        else:\n            return False\n    else:\n        for x in range(0, len(arr), 2):\n            if arr[x] * arr[x] == arr[x + 1] * arr[x + 1]:\n                return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even_list = []\n    for i in range(0, len(arr)): \n        if arr[i] % 2 == 0: \n            even_list.append(arr[i]) \n    if len(even_list) % 2 == 0: \n        return True\n    else: \n        return False\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for item in arr:\n        if item%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(1,len(arr)):\n        if arr[i]%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    flag = 0\n    n = len(arr)\n    for i in range(n):\n        flag += (arr[i]*(n-i-1))\n    if flag == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Write your code here\n    product=1\n    for i in arr:\n        product=product*i\n    if product%2==0:\n        return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all(num % 2 == 0 for num in arr)\n    #otherwise it return false\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count = 0\n    for n in arr:\n        if n % 2 == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] * is_product_even(arr[1:])\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n    \ndef max_sum_of_even_numbers(nums):\n    '''\n    Write a function that takes a list and returns the sum of all the even elements.\n    '''\n    pass\n    \ndef list_to_string(list):\n    '''\n    Write a function that takes a list and returns a string.\n    '''\n    pass\n    \ndef string_to_list(string):\n    '''\n    Write a function that takes a string and returns a list.\n    '''\n    pass\n    \ndef palindrome_index(string):\n    '''\n    Write a function that takes a string and returns the index of the first appearance of \"a\".\n    '''\n    pass\n    \ndef palindrome_index_v2(string):\n    '''\n    Write a function that takes a string and returns the index of the first appearance of \"a\".\n    '''\n    pass\n    \ndef roman_to_int(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v2(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v3(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v4(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v5(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v6(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v7(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v8(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v9(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v10(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v11(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v12(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v13(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v14(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v15(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v16(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v17(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v18(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v19(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v20(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v21(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v22(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v23(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v24(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v25(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v26(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v27(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v28(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v29(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v30(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v31(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v32(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v33(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v34(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v35(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v36(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v37(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v38(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v39(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v40(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v41(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v42(string):\n    '''\n    Write a function that takes a string and returns its integer equivalent.\n    '''\n    pass\n    \ndef roman_to_int_v43(string):\n    '''\n    Write a function that takes a string and returns it"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    if not lists:\n        return None\n    for i in lists:\n        if not max_sum:\n            max_sum = i\n        elif i[0] > max_sum[0]:\n            max_sum = i\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result_list = []\n    for i in lists:\n        result_list.append(max(i))\n    return result_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = [0]*len(lists)\n    for i in range(len(lists)):\n        for j in range(i):\n            if lists[i][j] > lists[i][j] + highest[j]:\n                highest[i] = lists[i][j] + highest[j]\n    return highest\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum_list = []\n    \n    for i in lists:\n        for j in lists:\n            sum_ = i + j\n            if sum_ > max_sum_list[0]:\n                max_sum_list = [i, j]\n    \n    return max_sum_list\n    \n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = []\n    for i in lists:\n        for j in i:\n            if j > max[0]:\n                max[0] = j\n                max[1] = i\n    return max\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest = []\n    for i in lists:\n        if len(i) > 0:\n            highest.append(max(i))\n        else:\n            highest.append(0)\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    sum = []\n    for i in lists:\n        sum.append(sum(i))\n    \n    for i in sums:\n        for j in range(0,len(lists)):\n            if sums[j] == i:\n                max_sum.append(lists[j])\n    return max_sum\n    \n    \n    \n    \n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #if not lists:\n        #return []\n    #elif not lists[0]:\n        #return []\n    #else:\n        #return [max(list)]\n    \n    if not lists or not lists[0]:\n        return []\n    \n    highest = list()\n    for element in lists:\n        if element not in highest:\n            highest.append(element)\n    \n    return [max(highest)]\n    #print(max(list))\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    max_run_uppercase = 0\n    \n    for i in test_str:\n        if (i.isupper()):\n            if(len(i) > max_run):\n                max_run = len(i)\n            elif(len(i) == max_run and i.islower()):\n                if(i.isupper()):\n                    max_run_uppercase = len(i)\n                \n    return max_run, max_run_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # define dictionary with upper case as the keys and lowercase as the keys\n    upper_dict = {}\n    for key in test_str:\n        if key.isupper():\n            upper_dict[key] = upper_dict.get(key, 0) + 1\n    # loop through the dictionary to find the max value\n    for key, val in upper_dict.items():\n        if val == max(upper_dict.values()):\n            # if the max value is present in upper case dictionary, we have to return the character itself\n            return key\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    counter = 0\n    for i in test_str:\n        if i.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            max_run = max_run + 1\n        else:\n            max_run = max_run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    test_str_length = len(test_str)\n    for i in range(test_str_length):\n        #print(i)\n        if i == 0 or test_str[i] == test_str[i - 1]:\n            continue\n        else:\n            if test_str[i] == \"A\":\n                continue\n            else:\n                if test_str[i] == \"a\" or test_str[i] == \"e\" or test_str[i] == \"i\" or test_str[i] == \"o\" or test_str[i] == \"u\" or test_str[i] == \"A\":\n                    continue\n                else:\n                    max_run = max(max_run, test_str_length - i)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    for run in range(len(test_str)):\n        # find index of the first letter in the given string\n        first_letter_index = test_str.find(test_str[run])\n        \n        # remove all the uppercase letters\n        test_str = test_str[:first_letter_index] + test_str[first_letter_index+1:]\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max([char if char.isupper() else char for char in test_str])\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run += 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_list = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    max_num = 0\n    for char in test_str:\n        if char.isupper():\n            num = ord(char) - ord('A') + 1\n            if num > max_num:\n                max_num = num\n    return max_num\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            return nums[i]\n    return 0\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    res = None\n    for num in nums:\n        if num % 2 == 1:\n            if res is None:\n                res = num\n            else:\n                if num < res:\n                    res = num\n    return res\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            count += 1\n    if count % 2 == 1:\n        return nums[0]\n    else:\n        return nums[count // 2 + 1]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if len(nums) % 2 == 1 else nums[len(nums) // 2]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    pass\ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    pass\ndef third_odd(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    pass\ndef fourth_odd(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    pass\ndef fifth_odd(nums):\n    '''\n    Write a python function to find the fifth odd number in a given list of numbers.\n    '''\n    pass\ndef sixth_odd(nums):\n    '''\n    Write a python function to find the sixth odd number in a given list of numbers.\n    '''\n    pass\ndef seventh_odd(nums):\n    '''\n    Write a python function to find the seventh odd number in a given list of numbers.\n    '''\n    pass\ndef eighth_odd(nums):\n    '''\n    Write a python function to find the eighth odd number in a given list of numbers.\n    '''\n    pass\ndef nineth_odd(nums):\n    '''\n    Write a python function to find the nineth odd number in a given list of numbers.\n    '''\n    pass\ndef tenth_odd(nums):\n    '''\n    Write a python function to find the tenth odd number in a given list of numbers.\n    '''\n    pass\ndef eleventh_odd(nums):\n    '''\n    Write a python function to find the eleventh odd number in a given list of numbers.\n    '''\n    pass\ndef twelfth_odd(nums):\n    '''\n    Write a python function to find the twelfth odd number in a given list of numbers.\n    '''\n    pass\ndef thirteenth_odd(nums):\n    '''\n    Write a python function to find the thirteenth odd number in a given list of numbers.\n    '''\n    pass\ndef fourteenth_odd(nums):\n    '''\n    Write a python function to find the fourteenth odd number in a given list of numbers.\n    '''\n    pass\ndef fifteenth_odd(nums):\n    '''\n    Write a python function to find the fifteenth odd number in a given list of numbers.\n    '''\n    pass\ndef joint_odd(nums):\n    '''\n    Write a python function to find the joint odd number in a given list of numbers.\n    '''\n    pass\ndef fourteenth_even(nums):\n    '''\n    Write a python function to find the fourteenth even number in a given list of numbers.\n    '''\n    pass\ndef second_even(nums):\n    '''\n    Write a python function to find the second even number in a given list of numbers.\n    '''\n    pass\ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    pass\ndef seventh_even(nums):\n    '''\n    Write a python function to find the seventh even number in a given list of numbers.\n    '''\n    pass\ndef sixth_even(nums):\n    '''\n    Write a python function to find the sixth even number in a given list of numbers.\n    '''\n    pass\ndef eighth_even(nums):\n    '''\n    Write a python function to find the eighth even number in a given list of numbers.\n    '''\n    pass\ndef nineth_even(nums):\n    '''\n    Write a python function to find the nineth even number in a given list of numbers.\n    '''\n    pass\ndef tenth_even(nums):\n    '''\n    Write a python function to find the tenth even number in a given list of numbers.\n    '''\n    pass\ndef eleven_even(nums):\n    '''\n    Write a python function to find the eleven even number in a given list of numbers.\n    '''\n    pass\ndef twelfth_even(nums):\n    '''\n    Write a python function to find the twelfth even number in a given list of numbers.\n    '''\n    pas"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #declare a return value\n    if nums == []:\n        return None\n    #declare a counter\n    counter = 0\n    #if any values are odd\n    for num in nums:\n        if num % 2!= 0:\n            counter += 1\n    #return the counter value\n    return counter\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) < 2:\n        return 0\n    else:\n        if nums[0] % 2 == 0:\n            return nums[0]\n        else:\n            return nums[1]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # assume that the list is ordered, numbers are less than or equal to 1\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] % 2!= 0:\n            i += 1\n        else:\n            return nums[i]\n    \n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if len(nums) % 2 == 1 else nums[1]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    odds = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if nums[i] % 2!= 0:\n            break\n        else:\n            odds += 1\n    return odds\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # if K == 2:\n    #     # if the first element is a tuple then we're good\n    #     if type(test_tup[0]) == tuple:\n    #         for x in test_tup[1:]:\n    #             if x not in test_tup[0]:\n    #                 print(\"wrong\")\n    #                 return False\n    #         return True\n    #     # if the second element is a tuple then we're good\n    #     if type(test_tup[1]) == tuple:\n    #         for x in test_tup[0]:\n    #             if x not in test_tup[1]:\n    #                 print(\"wrong\")\n    #                 return False\n    #         return True\n    #     # if the third element is a tuple then we're good\n    #     if type(test_tup[2]) == tuple:\n    #         for x in test_tup[1:3]:\n    #             if x not in test_tup[2]:\n    #                 print(\"wrong\")\n    #                 return False\n    #         return True\n    #     # if the fourth element is a tuple then we're good\n    #     if type(test_tup[3]) == tuple:\n    #         for x in test_tup[2:4]:\n    #             if x not in test_tup[3]:\n    #                 print(\"wrong\")\n    #                 return False\n    #         return True\n    #     # if all the elements are in the tuple, then we're good\n    #     if all(x in test_tup for x in test_tup):\n    #         return True\n    #     # if all the elements are not in the tuple, then we're good\n    #     if all(x not in test_tup for x in test_tup):\n    #         return True\n    # else:\n    #     return False\n    #     \n    if type(test_tup[0]) == tuple:\n        for x in test_tup[1:]:\n            if x not in test_tup[0]:\n                print(\"wrong\")\n                return False\n        return True\n    if type(test_tup[1]) == tuple:\n        for x in test_tup[0]:\n            if x not in test_tup[1]:\n                print(\"wrong\")\n                return False\n        return True\n    if type(test_tup[2]) == tuple:\n        for x in test_tup[1:3]:\n            if x not in test_tup[2]:\n                print(\"wrong\")\n                return False\n        return True\n    if type(test_tup[3]) == tuple:\n        for x in test_tup[2:4]:\n            if x not in test_tup[3]:\n                print(\"wrong\")\n                return False\n        return True\n    if type(test_tup[4]) == tuple:\n        for x in test_tup[3:5]:\n            if x not in test_tup[4]:\n                print(\"wrong\")\n                return False\n        return True\n    if all(x in test_tup for x in test_tup):\n        return True\n    if all(x not in test_tup for x in test_tup):\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        print(\"Less than {}\".format(K))\n        return False\n    if len(set(test_tup)) > 1:\n        print(\"Not equal\")\n        return False\n    return True\n    \ndef check_M(test_tup, M):\n    '''\n    Write a function to check if the given tuples contain the m or not.\n    '''\n    if len(test_tup) < M:\n        print(\"Less than {}\".format(M))\n        return False\n    if len(set(test_tup)) > 1:\n        print(\"Not equal\")\n        return False\n    return True\n    \ndef check_Q(test_tup, Q):\n    '''\n    Write a function to check if the given tuples contain the q or not.\n    '''\n    if len(test_tup) < Q:\n        print(\"Less than {}\".format(Q))\n        return False\n    if len(set(test_tup)) > 1:\n        print(\"Not equal\")\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test = []\n    for i in range(len(test_tup)):\n        if K == test_tup[i]:\n            test.append(i)\n    if len(test) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #Check if first element in list is tuple\n    if type(test_tup[0]) is tuple:\n        #Check if second element in list is tuple\n        if type(test_tup[1]) is tuple:\n            #Check if third element in list is tuple\n            if type(test_tup[2]) is tuple:\n                #If they are tuples, return false\n                if type(K) is tuple:\n                    return False\n                #Check if they are all of the same type\n                if type(test_tup[0][0])!= type(K[0][0]):\n                    return False\n                #Check if they have same size\n                if len(test_tup) == len(K):\n                    for i in range(len(test_tup)):\n                        #Check if all elements of the tuple are equal\n                        if type(test_tup[i][0])!= type(K[i][0]):\n                            return False\n                        if type(test_tup[i][1])!= type(K[i][1]):\n                            return False\n                        #Check if all elements of the tuple are equal\n                        if type(test_tup[i][2])!= type(K[i][2]):\n                            return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if type(test_tup)!= list:\n        raise TypeError('the tuple must be a list')\n    for each_element in test_tup:\n        if type(each_element)!= tuple:\n            raise TypeError('the tuple must be a list')\n    if type(K)!= int:\n        raise TypeError('the K must be an int')\n    if len(test_tup)!= K:\n        raise IndexError('the given tuples have to contain the same amount of elements')\n    if sum([len(each_element) for each_element in test_tup])!= len(test_tup):\n        raise IndexError('the tuples must not contain repeated elements')\n    if len(set(each_element[i] for each_element in test_tup))!= len(test_tup):\n        raise IndexError('the tuples must not contain duplicated elements')\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i][0] > K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    elif not test_tup:\n        return True\n    else:\n        first = test_tup[0]\n        if first in test_tup[1:K]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(len(test_tup) - K):\n        if test_tup[i]!= test_tup[i+K]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for k in K:\n        if test_tup[k] == K[k]:\n            pass\n        else:\n            return 0\n    return 1\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0]\n    \ndef check_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is equal to its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] == test_tup2[0]\n    \ndef check_greater_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is greater than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] > test_tup2[0]\n    \ndef check_greater(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is greater than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] > test_tup2[0]\n    \n    \ndef main():\n    '''\n    Check if tuple is sorted, if not return False\n    '''\n    test_tup1 = (1, 1)\n    test_tup2 = (1, 2)\n    test_tup3 = (1, 3)\n    test_tup4 = (1, 4)\n    test_tup5 = (1, 5)\n    test_tup6 = (1, 6)\n    test_tup7 = (1, 7)\n    test_tup8 = (1, 8)\n    \n    if check_smaller(test_tup1, test_tup2) or check_smaller(test_tup2, test_tup3) or check_smaller(test_tup4, test_tup5) or check_smaller(test_tup6, test_tup7) or check_smaller(test_tup7, test_tup8):\n        print(\"Test is True\")\n    else:\n        print(\"Test is False\")\n        \n    if check_equal(test_tup1, test_tup2):\n        print(\"Test is True\")\n    else:\n        print(\"Test is False\")\n        \n    if check_greater_equal(test_tup1, test_tup2):\n        print(\"Test is True\")\n    else:\n        print(\"Test is False\")\n        \n    if check_greater(test_tup1, test_tup2):\n        print(\"Test is True\")\n    else:\n        print(\"Test is False\")\n        \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in test_tup1:\n        if test_tup1.index(i) >= test_tup2.index(i):\n            return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in test_tup2:\n        if test_tup1[1] < i:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Elements in the tuple don't match\")\n        return\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for x in range(len(test_tup2)):\n        if test_tup2[x] > test_tup1[x]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_tup = test_tup1\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup2[i]:\n            print('Invalid Input: ', test_tup[i], test_tup2[i])\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    def compare(x, y):\n        if x[0] < y[0]:\n            return -1\n        elif x[0] > y[0]:\n            return 1\n        elif x[1] < y[1]:\n            return -1\n        elif x[1] > y[1]:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    x = test_tup1\n    y = test_tup2\n    if x[1] < y[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup2[0] < test_tup1[0]\n"
    }
]