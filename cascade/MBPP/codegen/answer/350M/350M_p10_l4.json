[
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            test_elements.append(test_tup1[i])\n    return test_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # first a simple set\n    a = set(test_tup1)\n    b = set(test_tup2)\n    # 2nd set\n    a.update(b)\n    return a\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = []\n    list2 = []\n    # removing duplicate values\n    if type(test_tup1) == type(test_tup2):\n        test_tup1 = list(set(test_tup1))\n        test_tup2 = list(set(test_tup2))\n    # adding duplicate values\n    for value in test_tup1:\n        if value in test_tup2:\n            list1.append(value)\n        else:\n            list2.append(value)\n    # creating a new list with unique values from both lists\n    list3 = list(set(list1)) + list(set(list2))\n    return list3\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    res = set(tup1).intersection(tup2)\n    return list(res)\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    for i in set1:\n        if i in set2:\n            set2.remove(i)\n    return set2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #Create a list of lists\n    list1=[]\n    list2=[]\n    \n    #Check the lists are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return ('ERROR: Different lengths of lists')\n    \n    #Loop through list\n    for i in range(len(test_tup1)):\n        list1.append(test_tup1[i])\n        list2.append(test_tup2[i])\n        \n    #Find the shared elements\n    list1_shared_elements = set(list1)\n    list2_shared_elements = set(list2)\n    \n    #Return the shared elements in the lists\n    return list1_shared_elements.intersection(list2_shared_elements)\n    "
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # list of elements to be compared\n    elements_to_compare = test_tup1 + test_tup2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    if type(test_tup1)!= tuple:\n        return shared_elements\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            return test_tup1[i], test_tup2[i]\n    return test_tup2[i], test_tup1[i]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return test_tup1.intersection(test_tup2)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n%2 == 0 and n>0):\n        return False\n    if(n%2 == 0 and n==1):\n        return False\n    if(n%2 == 1 and n>1):\n        return False\n    if(n%5 == 0 and n>0):\n        return False\n    if(n%5 == 0 and n==1):\n        return False\n    if(n%5 == 1 and n>1):\n        return False\n    if(n%7 == 0 and n>0):\n        return False\n    if(n%7 == 0 and n==1):\n        return False\n    if(n%7 == 1 and n>1):\n        return False\n    if(n%11 == 0 and n>0):\n        return False\n    if(n%11 == 0 and n==1):\n        return False\n    if(n%11 == 1 and n>1):\n        return False\n    if(n%61 == 0 and n>0):\n        return False\n    if(n%61 == 0 and n==1):\n        return False\n    if(n%61 == 1 and n>1):\n        return False\n    if(n%91 == 0 and n>0):\n        return False\n    if(n%91 == 0 and n==1):\n        return False\n    if(n%91 == 1 and n>1):\n        return False\n    if(n%143 == 0 and n>0):\n        return False\n    if(n%143 == 0 and n==1):\n        return False\n    if(n%143 == 1 and n>1):\n        return False\n    if(n%541 == 0 and n>0):\n        return False\n    if(n%541 == 0 and n==1):\n        return False\n    if(n%541 == 1 and n>1):\n        return False\n    if(n%741 == 0 and n>0):\n        return False\n    if(n%741 == 0 and n==1):\n        return False\n    if(n%741 == 1 and n>1):\n        return False\n    if(n%941 == 0 and n>0):\n        return False\n    if(n%941 == 0 and n==1):\n        return False\n    if(n%941 == 1 and n>1):\n        return False\n    if(n%1141 == 0 and n>0):\n        return False\n    if(n%1141 == 0 and n==1):\n        return False\n    if(n%1141 == 1 and n>1):\n        return False\n    if(n%6141 == 0 and n>0):\n        return False\n    if(n%6141 == 0 and n==1):\n        return False\n    if(n%6141 == 1 and n>1):\n        return False\n    if(n%9141 == 0 and n>0):\n        return False\n    if(n%9141 == 0 and n==1):\n        return False\n    if(n%9141 == 1 and n>1):\n        return False\n    if(n%14341 == 0 and n>0):\n        return False\n    if(n%14341 == 0 and n==1):\n        return False\n    if(n%14341 == 1 and n>1):\n        return False\n    if(n%54141 == 0 and n>0):\n        return False\n    if(n%54141 == 0 and n==1):\n        return False\n    if(n%54141 == 1 and n>1):\n        return False\n    if(n%74141 == 0 and n>0):\n        return False\n    if(n%74141 == 0 and n==1):\n        return False\n    if(n%74141 == 1 and n>1):\n        return False\n    if(n%94141 == 0 and n>0):\n        return False\n    if(n%94141 == 0 and n==1):\n        return False\n    if(n%94141 == 1 and n>1):\n        return False\n    if(n%114141 == 0 and n>0):\n        return False\n    if(n%114141 == 0 and n==1):\n        return False\n    if(n%114141 == 1 and n>1):\n        return False\n    if(n%614141 == 0 and n>0):\n        return False\n    if(n%614141 == 0 and n==1):\n        return False\n    if(n%614141 == 1 and n>1):\n        return False\n    if(n%914141 == 0 and n>0):\n        return False\n    if(n%914141 == 0 and n==1):\n        return False\n    if(n%914141 == 1 and n>1):\n        return False\n    if(n%1434141 == 0 and n>0):\n        return False\n    if(n%1434141 == 0 and n==1):\n        return False\n    if(n%1434141 == 1 and n>1):\n        return False\n    if(n%5414141 == 0 and n>0):\n        return False\n    if(n%5414141 == 0 and n==1):\n        return False\n    if(n%5414141 == 1 and n>1):\n        return False\n    if(n%7414141 == 0 and n>0):\n        return False\n    if(n%7414141 == 0 and n==1):\n        return False\n    if(n%7414141 == 1 and n>1):\n        return False\n    if(n%914141 == 0 and n>0):\n        return False\n    if(n%914141 == 0 and n==1):\n        return False\n    if(n%914141 == 1 and n>1):\n        return False\n    if(n%1434141 == 0 and n>0):\n        return False\n    if(n%1434141 == 0 and n==1):\n        return False\n    if(n%1434141 == 1 and n>1):\n        return False\n    if(n%5414141 == 0 and n>0):\n        return False\n    if(n%5414141 == 0 and n==1):\n        return False\n    if(n%5414141 == 1 and n>1):\n        return False\n    if(n%7414141 == 0 and n>0):\n        return False\n    if(n%7414141 == 0 and n==1):\n        return False\n    if(n%7414141 == 1 and n>1):\n        return False\n    if(n%9414141 == 0 and n>0):\n        return False\n    if(n%9414141 == 0 and n==1):\n        return False\n    if(n%9414141 == 1 and n>1):\n        return False\n    if(n%11414141 == 0 and n>0):\n        return False\n    if(n%11414141 == 0 and n==1):\n        return False\n    if(n%11414141 == 1 and n>1):\n        return False\n    if(n%61414141 == 0 and n>0):\n        return False\n    if(n%61414141 == 0 and n==1):\n        return False\n    if(n%61414141 == 1 and n>1):\n        return False\n    if(n%91414141 == 0 and n>0):\n        return False\n    if(n%91414141 == 0 and n==1):\n        return False\n    if(n%91414141 == 1 and n>1):\n        return False\n    if(n%143414141 == 0 and n>0):\n        return False\n    if(n%143414141 == 0 and n==1):\n        return False\n    if(n%143414141 == 1 and n>1):\n        return False\n    if(n%541414141 == 0 and n>0):\n        return False\n    if(n%541414141 == 0 and n==1):\n        return False\n    if(n%541414141 == 1 and n>1):\n        return False\n    if(n%741414141 == 0 and n>0):\n        return False\n    if(n%741414141 == 0 and n==1):\n        return False\n    if(n%741414141 == 1 and n>1):\n        retur"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n < 2):\n        return(n)\n    elif (n % 2 == 0):\n        return(n)\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if (n % i == 0):\n                return(n)\n            else:\n                pass\n    return(False)\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 0:\n        for k in range(2, int(math.sqrt(n))+1):\n            if n % k == 0:\n                return True\n        return False\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_fib(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n<=2 or is_prime(n)==False:\n        return False\n    else:\n        if is_prime(n)==True:\n            if n==2:\n                return True\n            else:\n                return is_prime(n-1) and is_prime(n-2)\n        else:\n            return False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    #To do: calculate sqrt of the number\n    x = int(math.sqrt(n))\n    \n    if x % 2 == 0:\n        return False\n    if n < x:\n        return False\n    if n == x:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if a number is a prime.\n    '''\n    if n == 0 or n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n    \ndef prime_factor(n):\n    '''\n    Return all possible factors of a given number.\n    '''\n    ans = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            ans.append(i)\n            if n // i == 1:\n                ans.append(1)\n    return ans\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1 or n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\ndef main():\n    '''\n    main function\n    '''\n    a = int(input(\"Enter a value for a: \"))\n    b = int(input(\"Enter a value for b: \"))\n    c = int(input(\"Enter a value for c: \"))\n    d = int(input(\"Enter a value for d: \"))\n    if is_not_prime(a):\n        print(f\"{a} is not a prime number.\")\n    elif is_not_prime(b):\n        print(f\"{b} is not a prime number.\")\n    elif is_not_prime(c):\n        print(f\"{c} is not a prime number.\")\n    elif is_not_prime(d):\n        print(f\"{d} is not a prime number.\")\n    else:\n        print(f\"{a} and {b} are both prime numbers.\")\n        print(f\"{a} + {b} = {a+b}\")\n        print(f\"{a} - {b} = {a-b}\")\n        print(f\"{a} * {c} = {a*c}\")\n        print(f\"{a} / {c} = {a/c}\")\n        print(f\"{a} // {c} = {a//c}\")\n        print(f\"{a} // {c} = {a//c}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{a} ** {d} = {a**d}\")\n        print(f\"{"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(len(nums)):\n        heapq.heappush(heap,nums[i])\n    l = len(heap)\n    for i in range(l-1,0,-1):\n        heapq.heappop(heap)\n    return [nums[i] for i in range(l)]\n    \ndef heap_queue_largest_2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, sorted in ascending order, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    heapq.heapify(heap)\n    l = len(heap)\n    for i in range(l-1,0,-1):\n        heapq.heappop(heap)\n    return [nums[i] for i in range(l)]\ndef heap_queue_largest_3(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, sorted in ascending order, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    heapq.heapify(heap)\n    l = len(heap)\n    for i in range(l-1,0,-1):\n        heapq.heappop(heap)\n    return [nums[i] for i in range(l)]\ndef heap_queue_largest_4(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, sorted in ascending order, sorted in decending order, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    heapq.heapify(heap)\n    l = len(heap)\n    for i in range(l-1,0,-1):\n        heapq.heappop(heap)\n    return [nums[i] for i in range(l)]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    l=[]\n    for i in nums:\n        l.append(i)\n    heapq.heapify(l)\n    return l[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    q=[]\n    for i in range(n):\n        q.append(i)\n    hq.heapify(q)\n    for i in range(n):\n        if q[0]==nums[i]:\n            return q[0]\n        hq.heapreplace(q,nums[i])\n    return -1\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # This is only for our purposes\n    # Part 2\n    nums_sort = sorted(nums)\n    q = []\n    heapq.heapify(q)\n    for item in nums_sort:\n        heapq.heappush(q,item)\n    return q[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Make a heap and keep the largest element\n    heap = []\n    for i in nums:\n        heapq.heappush(heap,i)\n    nums.sort(reverse=True)\n    # Get the last element\n    last = heapq.heappop(heap)\n    # Add the rest\n    for i in range(n-1):\n        heapq.heappush(heap,last)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    # Create a heap with the largest numbers first\n    heap = []\n    for i in nums:\n        hq.heappush(heap,[i,n])\n        \n    # Loop while the heap is not empty\n    while(heap):\n        # Get the element which is the maximum in the heap\n        item = hq.heappop(heap)\n        # Get the index of the item\n        index = hq.heappop(heap)[1]\n        \n        # If item is the maximum number\n        if index == n:\n            # Return it as the minimum number\n            return item\n            \n        # Else, keep moving till the heap is empty and add it to the heap\n        else:\n            # Add the element to the heap\n            hq.heappush(heap,[item[0]+index,index])\n            \n    # If the heap is empty, then the number is the minimum number\n    return -1\n    \nprint(heap_queue_largest([1,2,3,4,5,6,7,8,9,10],9)) # 3\nprint(heap_queue_largest([1,2,3,4,5,6,7,8,9,10],8)) # 5\nprint(heap_queue_largest([1,2,3,4,5,6,7,8,9,10],8)) # 10\nprint(heap_queue_largest([1,2,3,4,5,6,7,8,9,10],9)) # 8\nprint(heap_queue_largest([1,2,3,4,5,6,7,8,9,10],6)) # 7\nprint(heap_queue_largest([1,2,3,4,5,6,7,8,9,10],5)) # 6\nprint(heap_queue_largest([1,2,3,4,5,6,7,8,9,10],4)) # 4\nprint(heap_queue_largest([1,2,3,4,5,6,7,8,9,10],3)) # 2"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    \n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    \n    for j in range(n):\n        nums[j] = heapq.heappop(heap)\n    return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def insert_heap_to_queue(nums,n,i):\n        while i<=n and nums[hq.nlargest(n,nums)[i]]<nums[i]:\n            hq.heappush(q,hq.heappop(nums)[i])\n            i+=1\n        return i\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Heap is a list of tuples (heapq.heappop,heapq.heapify,heapq.heappush)\n    #heap = [(value, index) for index,value in enumerate(nums)]\n    # heapq.heapify(heap)\n    # return heap\n    \n    heap = []\n    for i,num in enumerate(nums):\n        heapq.heappush(heap,(num,i))\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Sort the list in ascending order\n    nums.sort(reverse=True)\n    return nums[0:n]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return True\n    elif x==1:\n        return False\n    else:\n        result=True\n        for i in range(1, x):\n            result=result and (x%i==0)\n        return result\ndef main():\n    print(is_Power_Of_Two(2))\n    print(is_Power_Of_Two(3))\n    print(is_Power_Of_Two(4))\n    print(is_Power_Of_Two(5))\nmain()"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>= 2**32 and x <= 2**32 - 2**32:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x % 2!= 0 \n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x>0):\n        if(x%2==1):\n            print('Not Equal')\n        elif((x%2)==0):\n            print('Equal')\n    else:\n        if(x%2==1):\n            print('Equal')\n        elif((x%2)==0):\n            print('Not Equal')\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 10**9:\n        return True\n    elif x == 0:\n        return False\n    elif x > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    power=1\n    for i in str(x):\n        power+=int(i)\n    if (power==x):\n        return True\n    else:\n        return False\ndef is_Prime(x):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    for i in range(2,x):\n        if x%i==0:\n            return False\n    return True\ndef prime_checker(n):\n    '''\n    Write a python function that returns whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    for i in range(3,n,2):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2:\n        return False\n    elif x == 1:\n        return True\n    else:\n        return is_Power_Of_Two(x * 2)\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x < 0): \n        return False\n    else:\n        while x:\n            x, r = divmod(x, 2)\n            if r: \n                return False\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Your code here\n    return (x>0)\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    chars = text.lower()\n    print(\"\\n\")\n    print(\"Find all words which are at least 4 characters long in the text.\")\n    print(\"\")\n    print(f\"{chars}: \", end=\"\")\n    for char in chars:\n        if len(char) >= 4:\n            print(char, end=\"\")\n    print()\n    return [i for i in range(len(chars)) if len(chars) - i >= 4]\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    chars = text.lower()\n    print(\"\\n\")\n    print(\"Find all words which are at least 4 characters short in the text.\")\n    print(\"\")\n    print(f\"{chars}: \", end=\"\")\n    for char in chars:\n        if len(char) <= 4:\n            print(char, end=\"\")\n    print()\n    return [i for i in range(len(chars)) if len(chars) - i <= 4]\ndef find_char_long_numeric(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    chars = text.lower()\n    print(\"\\n\")\n    print(\"Find all words which are at least 4 characters long in the text.\")\n    print(\"\")\n    print(f\"{chars}: \", end=\"\")\n    for char in chars:\n        if char.isnumeric():\n            print(char, end=\"\")\n    print()\n    return [i for i in range(len(chars)) if char.isnumeric()]\ndef find_char_short_numeric(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    chars = text.lower()\n    print(\"\\n\")\n    print(\"Find all words which are at least 4 characters short in the text.\")\n    print(\"\")\n    print(f\"{chars}: \", end=\"\")\n    for char in chars:\n        if char.isnumeric():\n            print(char, end=\"\")\n    print()\n    return [i for i in range(len(chars)) if char.isnumeric()]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Store the entire string in a variable\n    string = text\n    # Split the entire string into a list using a regular expression\n    list = re.split(r'\\W+', string)\n    # Initialize an empty list to iterate through\n    # and print the word and its length\n    long_words = []\n    for word in list:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile('[a-zA-Z]+')\n    matched = pattern.findall(text)\n    for m in matched:\n        if len(m) >= 4:\n            return m\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regx = re.compile(r'([a-z])([A-Z][a-z]+)([0-9])([a-z])')\n    words = []\n    for word in regx.findall(text):\n        if len(word) >= 4:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    longs = []\n    text_words = text.split()\n    for word in text_words:\n        if len(word) >= 4:\n            longs.append(word)\n    return longs\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a = re.findall('\\w', text)\n    for i in a:\n        if len(i) >= 4:\n            print(i)\ndef find_short_words(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    a = re.findall('\\w', text)\n    for i in a:\n        if len(i) <= 3:\n            print(i)\ndef remove_unwanted(text):\n    '''\n    Write a function to remove unwanted words from a string.\n    '''\n    text = text.replace('\\n','')\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('  ','')\n    text = text.replace('\\f','')\n    text = text.replace('\\t','')\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace('\\t','')\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    return text\ndef remove_spaces(text):\n    '''\n    Remove spaces from a string.\n    '''\n    text = text.replace(' ','')\n    return text\ndef remove_multiple(text):\n    '''\n    Remove multiple spaces from a string.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace('\\n','')\n    text = text.replace(' ','')\n    return text\ndef remove_brackets(text):\n    '''\n    Remove brackets from a string.\n    '''\n    text = text.replace('[','')\n    text = text.replace(']','')\n    text = text.replace('\\'','')\n    text = text.replace(']','')\n    text = text.replace('\\'','')\n    text = text.replace('{','')\n    text = text.replace('}','')\n    return text\ndef remove_repeated_spaces(text):\n    '''\n    Remove repeated spaces from a string.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace('\\t','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace(' ','')\n    return text\ndef remove_spaces_from_ends(text):\n    '''\n    Remove spaces from the end of a string.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace('\\t','')\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    return text\ndef remove_repeated_spaces_ends(text):\n    '''\n    Remove repeated spaces from the end of a string.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace('\\t','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace(' ','')\n    return text\ndef remove_spaces_and_repeated_spaces(text):\n    '''\n    Remove spaces and repeated spaces from a string.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace('\\t','')\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace('\\t','')\n    text = text.replace(' ','')\n    return text\ndef remove_repeated_spaces_and_repeated_spaces(text):\n    '''\n    Remove repeated spaces and repeated spaces from a string.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace('\\t','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace(' ','')\n    return text\ndef remove_repeated_spaces_ends(text):\n    '''\n    Remove repeated spaces from the end of a string.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace('\\t','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace(' ','')\n    return text\ndef remove_repeated_spaces_ends_ends(text):\n    '''\n    Remove repeated spaces and repeated spaces from the end of a string.\n    '''\n    text = text.replace(' ','')\n    text = text.replace('\\n','')\n    text = text.replace('\\t','')\n    text = text.replace('\\r','')\n    text = text.replace('\\f','')\n    text = text.replace('\\t','')\n    text = text.replace('  ','')\n    text = text.replace('\\r','')\n    text = text.replace('\\"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_long = re.findall('[a-zA-Z]{3,}', text)\n    print(char_long)\n    return char_long\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    p = re.compile(r'[^A-Za-z0-9_\\s]')\n    res = p.findall(text)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result=[]\n    for i in range(len(text)):\n        substring=text[i]\n        if(len(substring)>=4):\n            result.append(substring)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Initialize variables\n    idx = 0\n    char_count = 0\n    words = ''\n    longest = ''\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num**2\n        squares.append(square)\n    return squares\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square_list.append(num**2)\n    return square_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for item in nums:\n        squares.append(item*item)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    if type(nums)!= list:\n        raise TypeError(\"'nums' must be a list\")\n    square_list = []\n    for num in nums:\n        square_list.append(num**2)\n    return square_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in range(len(nums)):\n        squares.append(nums[i]**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for num in nums:\n        squared_list.append(num*num)\n    return squared_list\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i*i)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    from itertools import product\n    return [x ** 2 for x in product(nums)]\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n    \nsquare_nums([1,2,3,4,5])\nsquare_nums([2,2,2,8,4,4,4,8,8,8])\nsquare_nums([])"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums if x%2==0]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if the string is in the list\n    if str in list(map(str.__ne__, list(map(str.__ne__, list(set(str)))))): \n        return 0\n    else: \n        return 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def rotate(s):\n        # If odd then return the odd part of the string\n        if len(s) % 2 == 1:\n            return s[::-1]\n        # If even then return the even part of the string\n        return s[-1::-1]\n        \n    def check(s, n):\n        # Store the correct string in a list\n        l = []\n        # Loop through each character\n        for i in range(n):\n            # If the string is a substring of the string, append the string to the list\n            if rotate(s) == rotate(s[i:]):\n                l.append(s[i])\n        # If the string is a substring of the string, return the string \n        return rotate(s) == rotate(s[::-1])\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count=0\n    i=0\n    while(i<len(str)):\n        if(str[i]>str[i-1]):\n            count+=1\n            i+=1\n        else:\n            i+=1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s = str.lower()\n    l = len(s)\n    m = 1\n    max_num = 0\n    for i in range(l):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' or s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n            m = m * 2\n        else:\n            m = m * 3\n        if m > max_num:\n            max_num = m\n    return max_num\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    m = min(n, n//2)\n    l = n - m\n    rotations = 0\n    for i in range(m):\n        if find_Rotations(str, i, m, l, i) == 1:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(0, len(str)-1):\n        left_most_index = 0\n        right_most_index = 0\n        for j in range(0, len(str)-i-1):\n            if str[j]!= str[j+i]:\n                break\n            left_most_index = j\n            right_most_index = j+i+1\n        if (right_most_index - left_most_index) > rotations:\n            rotations = right_most_index - left_most_index\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # you need to store the string in a variable\n    string = str\n    \n    # you need to store the minimum number of rotations\n    min_rotations = 0\n    \n    # you need to iterate through the string\n    for i in range(len(string)):\n        # you need to check the current characters\n        current = string[i]\n        # if it is a letter\n        if current.isalpha():\n            # if its a uppercase letter\n            if current.isupper():\n                # check if its a two letter combination\n                if len(current) == 2:\n                    # check if it's in the string\n                    if current.upper() in string:\n                        # if it's a valid combination\n                        # update the minimum number of rotations\n                        min_rotations += 1\n                # if it's a lowercase letter\n                else:\n                    if current.islower():\n                        # check if its a two letter combination\n                        if len(current) == 2:\n                            # if it's a valid combination\n                            # update the minimum number of rotations\n                            min_rotations += 1\n                        # if it's not\n                        else:\n                            # if its a uppercase letter\n                            if current.isupper():\n                                # if it's in the string\n                                if current.upper() in string:\n                                    # if it's a valid combination\n                                    # update the minimum number of rotations\n                                    min_rotations += 1\n                            # if it's a lowercase letter\n                            else:\n                                if current.islower():\n                                    # if it's in the string\n                                    if current.islower() in string:\n                                        # if it's a valid combination\n                                        # update the minimum number of rotations\n                                        min_rotations += 1\n            # if it's a number\n            else:\n                # if it's a number\n                if current.isdigit():\n                    # check if it's in the string\n                    if current.isdigit():\n                        # if it's a valid combination\n                        # update the minimum number of rotations\n                        min_rotations += 1\n                # if it's not\n                else:\n                    # if it's a uppercase letter\n                    if current.isupper():\n                        # if it's in the string\n                        if current.upper() in string:\n                            # if it's a valid combination\n                            # update the minimum number of rotations\n                            min_rotations += 1\n                    # if it's a lowercase letter\n                    else:\n                        if current.islower():\n                            # if it's in the string\n                            if current.islower() in string:\n                                # if it's a valid combination\n                                # update the minimum number of rotations\n                                min_rotations += 1\n        # if it's not a letter\n        else:\n            # if it's a uppercase letter\n            if current.isupper():\n                # check if it's a two letter combination\n                if len(current) == 2:\n                    # if it's a valid combination\n                    # update the minimum number of rotations\n                    min_rotations += 1\n            # if it's a lowercase letter\n            else:\n                if current.islower():\n                    # check if it's a two letter combination\n                    if len(current) == 2:\n                        # if it's a valid combination\n                        # update the minimum number of rotations\n                        min_rotations += 1\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Step 1: Pick any pattern and solve for it. \n    # Step 2: Count the number of rotations.\n    # Step 3: Use the O(N) solver.\n    \n    # Get the number of rotations needed\n    n = len(str)\n    rotations = 0\n    \n    # Pick the pattern\n    for i in range(1, n):\n        rotations += 1 if str[i-1] == str[i] else 0\n        \n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    total_letters_count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i] == str[j]:\n                total_letters_count += 1\n            else:\n                total_letters_count += 1\n    return total_letters_count\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) < len(str[::-1]): \n        return 0\n    elif len(str) == len(str[::-1]): \n        return 1\n    elif str[::-1] == str[::-1][::-1]: \n        return 2\n    else: \n        return find_Rotations(str[1:]) + find_Rotations(str[::-1][1:])\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = 0\n    for c in s:\n        if c == ch:\n            occ = occ + 1\n        else:\n            occ = 0\n            if occ == 1:\n                return s[:0] + s[1:].strip()\n            elif occ == 2:\n                return s[:-1] + s[2:].strip()\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    s = list(s)\n    index = s.index(ch)\n    s[index] = ''\n    s = \"\".join(s)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # your code goes here\n    if s == '':\n        return ''\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=len(s)\n    if l==0:\n        return \"\"\n    if ch==' ':\n        return s[0:1]+s[l-1:]\n    else:\n        return s[0:1]+s[l-1:l-1]+s[l-1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return ''\n    if s[0] == ch:\n        return s[1:]\n    else:\n        return s[:-1]\n    # return s[0] + remove_Occ(s,ch) + s[-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 1 or ch == s[0]:\n        return s\n    elif s[0] == ch:\n        return s[1:]\n    else:\n        return s[0:1] + remove_Occ(s[1:],ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)==0: \n        print(\"no character found\") \n        return \n    elif s[0]==ch: \n        s.pop(0) \n    elif s[-1]==ch: \n        s.pop(-1) \n    else: \n        print(\"character not present\") \n        return \n    print(s) \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch)==0:\n        return s\n    else:\n        for i in range(len(s)-1):\n            if s[i]==ch:\n                s=s[:i]+s[i+1:]\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    s=s[:-1]\n    s=s[:-1]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # use set function to remove duplicate values\n    return ''.join(sorted(s,key = lambda x: x in set(ch)))\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_row = 0\n    for i in range(len(M)):\n        sum_row += M[i][i]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #count = 0\n    for row in M:\n        row.sort(reverse=True)\n        #count += 1\n        #print(count)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    i = 0\n    n = len(M)\n    while i < n:\n        j = i\n        while j < n:\n            if M[j][i] < 0:\n                break\n            j += 1\n        if j < n:\n            for k in range(j, n):\n                M[i][k] -= M[j][k]\n            M[i][n - 1] += M[j][n - 1]\n            for k in range(n - 1, i, -1):\n                M[k][i] += M[k - 1][i]\n            for k in range(i, n):\n                M[i][k] += M[i - 1][k]\n            i += 1\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    S = []\n    for k in range(len(M[0])):\n        S.append(sum(M[k]))\n    return sorted(S)\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    temp_matrix = [[0 for col in range(len(M[0]))] for row in range(len(M))]\n    for row in range(len(M)):\n        for col in range(len(M[0])):\n            temp_matrix[row][col] = M[row][col]\n    temp_matrix = sorted(temp_matrix, key = lambda x: x[0])\n    for row in range(len(M)):\n        for col in range(len(M[0])):\n            M[row][col] = temp_matrix[row][col][1]\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def row_sum(row):\n        return row[0]\n    def column_sum(column):\n        return column[1]\n    def diagonal_sum(diagonal):\n        return diagonal[0] + diagonal[1]\n    sorted_matrix = []\n    row = []\n    column = []\n    diagonal = []\n    for i in range(len(M)):\n        row.append(M[i][0])\n        column.append(M[i][1])\n        diagonal.append(M[i][2])\n    print(\"ROW SORTED MATRIX\\n\")\n    print(row)\n    print(\"\\n\")\n    print(\"COLUMN SORTED MATRIX\\n\")\n    print(column)\n    print(\"\\n\")\n    print(\"DIAGONAL SUM\\n\")\n    print(diagonal)\n    print(\"\\n\")\n    for i in range(len(row)):\n        sorted_matrix.append(row_sum(row))\n        sorted_matrix.append(column_sum(column))\n        sorted_matrix.append(diagonal_sum(diagonal))\n    print(\"\\n\")\n    print(sorted_matrix)\n    print(\"\\n\")\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M.sort()\n    for i in range(n):\n        M[i] = M[i][0]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = list(map(sum, zip(*M)))\n    l.sort()\n    return l\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sum_R = 0\n    for i in range(n):\n        sum_R += M[i][i]\n    sum_R = sum_R\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            M[i][j] = M[j][i]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            M[i][j] = abs(M[i][j]-sum_R)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_rows = [0]*len(M)\n    for x in range(len(M)):\n        for y in range(x+1, len(M)):\n            sum_rows[x] += M[y][x]\n    for i in range(len(M)-1):\n        for j in range(len(M)-1-i):\n            if sum_rows[j] < sum_rows[j+1]:\n                M[j], M[j+1] = M[j+1], M[j]\n    M.sort()\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 4*h*b*l**2\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    return h**3/2"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 4 * b * h**2\n    print(f\"The volume of {l} x {b} x {h} is {volume}\")\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    for i in range(1,l+1) :\n        for j in range(1,l+1) :\n            if i==j : \n                for k in range(1,l+1) :\n                    if j==k : \n                        for l in range(1,l+1) :\n                            if l==k : \n                                return (3.1416)*(i*i+j*j+k*k)*h*(l-j)*(l-j)*(l-j)-b\n    return \"Volume of a Triangle is not defined.\"\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0\n    for i in range (l-b,l+h) :\n        for j in range (b,h+b) :\n            if (i-l) * (j-b) <= 0 :\n                pass\n            else :\n                volume = volume + (i-l)*(j-b)\n                \n    return volume\n    "
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(\"Volume of this triangle is : \")\n    if (b*h*h)>((l*l)/2) : \n        print(\"Error! It is not triangular\")\n    elif (b*h*h)==((l*l)/2):\n        print(\"volume is : \", ((l*l)/2))\n    else : \n        print(\"volume is : \", ((l*l)/2)*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 4*(l**2+b**2-h**2)\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (l*h)/2\n    return vol\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (4/3)*math.pi*l*h\n    print (\"The volume of the trame is: \" + str(volume))\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Check if input string contains a single lowercase letter.\n    pattern = re.compile(r'([a-z][A-Z]?)')\n    if pattern.search(text):\n        return False\n    \n    # Check if input string contains an underscore.\n    pattern = re.compile(r'_')\n    if pattern.search(text):\n        return False\n    \n    # Check if input string contains all the letters of the alphabet.\n    pattern = re.compile(r'[a-zA-Z]')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lowercase_underscore_match = re.findall(r'[a-z]', text)\n    if len(text_lowercase_underscore_match) == 0:\n        return False\n    if len(text_lowercase_underscore_match) == 1:\n        return text_lowercase_underscore_match[0].lower() in text\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[^A-Za-z0-9\\-_]*'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    text = text.lower()\n    regex = re.compile(r'[a-z]')\n    \n    if regex.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #If string contains a sequence of lowercase letters.\n    #For example:\n    #>>>text_lowercase_underscore('aaaa')\n    #True\n    #>>>text_lowercase_underscore('aBb')\n    #False\n    #>>>text_lowercase_underscore('AAaBb')\n    #True\n    text = text.lower()\n    return any(i in text for i in re.findall(r'[A-Z][a-z]*', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # first make a regex\n    regex = re.compile(r\"[a-zA-Z0-9_]+\")\n    # split into separate strings\n    text_split = text.split()\n    # compare each string to the regex\n    for string in text_split:\n        if regex.match(string):\n            # remove the underscore characters\n            underscore = string[1:]\n            # if string doesn't contain both underscores and double letters\n            if not (underscore and underscore.isalpha()):\n                return False\n    # if all strings are correctly split, return True\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if all(c.islower() for c in text) and (not any(c.isdigit() for c in text)) and text.isalpha() else False\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[^a-z]', text.lower()):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    for char in text:\n        if char.islower() == False:\n            return False\n        else:\n            \n            if char == \"_\" and text.count(char) > 0:\n                return False\n            elif char == \" \" and text.count(char) > 0:\n                return False\n            elif char == \"-\":\n                if text.count(char) > 0:\n                    return False\n                else:\n                    return True\n            else:\n                return True\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if len(re.findall('[a-zA-Z0-9]', text.lower())) == 0:\n        return False\n    else:\n        pattern = re.compile(r\"[a-zA-Z0-9]\")\n        return pattern.search(text.lower())!= None\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    for i in range(0, a):\n        perimeter = perimeter + (i * i)\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    sq = a**2\n    return sq\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    result = 0\n    for i in range(a):\n        result += a\n        for j in range(a):\n            if a - 1 >= i and a - 1 >= j:\n                result += a - 1 - j\n    return result\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a < 0:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a <= 0:\n        return 0\n    else:\n        return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (2 * len(a))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #create a list of chars \n    list = []\n    for c in string:\n        if c in list:\n            continue\n        list.append(c)\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_list = []\n    for i in range(len(string)):\n        if string[i] in string[1:]:\n            remove_list.append(string[i])\n    return remove_list\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #Convert string to list\n    res = []\n    for char in string:\n        if char in res:\n            continue\n        res.append(char)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string == ''.join(string) or string == ''.join(string.split(' ')):\n        return string\n    else:\n        return [char for char in string.split(' ') if char in string.split(' ')]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    list_str = []\n    list_str.append(string)\n    for i in range(0, len(string)):\n        for j in range(i + 1, len(string)):\n            if string[i] == string[j]:\n                list_str[i] = list_str[i] + string[i]\n            else:\n                list_str[i] = list_str[i] + string[j]\n    \n    return list_str\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst=[]\n    for i in string:\n        if i in lst:\n            lst.remove(i)\n        else:\n            lst.append(i)\n    return lst\n    \ndef remove_null_from_list(lst):\n    '''\n    Write a function to remove duplicate from list.\n    '''\n    lst2=[]\n    for i in lst:\n        if i not in lst2:\n            lst2.append(i)\n    return lst2\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if string == '': \n        return string\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return []\n    index = 0\n    no_of_characters = len(string)\n    for char in string:\n        if index == no_of_characters:\n            break\n        if char.isalpha():\n            index += 1\n    return list(string[index:])\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Your code here\n    arr_dup = []\n    # Write your code here\n    for i in arraynums:\n        if i in arr_dup:\n            return True\n        else:\n            arr_dup.append(i)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    assert len(arraynums) == 100, 'The array size should be 100'\n    for num in arraynums:\n        if (num in arraynums):\n            print('There is an element with value:', num)\n        else:\n            print('There is no element with value:', num)\n    print('---------------------------------------------')\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for x in arraynums:\n        if x in arraynums:\n            duplicate = duplicate or x!= x\n            \n    return duplicate\n    \n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Write your code here.\n    index = []\n    for i in range(len(arraynums)):\n        if arraynums[i] not in index:\n            index.append(arraynums[i])\n    return index"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Test 1:\n    duplicates = []\n    for num in arraynums:\n        if num in duplicates:\n            return True\n        else:\n            duplicates.append(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array = arraynums\n    # convert list to set\n    array = list(set(array))\n    # check duplicates\n    assert len(array)==len(set(array))\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # First, test if we can match each element with its position in the array\n    # There should be no duplicates\n    for x in arraynums:\n        for i in range(len(arraynums)):\n            if x == arraynums[i]:\n                return True\n    # If we get here, the array is not matched.\n    return False\n    \ndef main():\n    '''\n    Run the tests on all the provided test cases and print results to the terminal.\n    '''\n    # Test 1\n    test1 = [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    # Should return True\n    print test1 == [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    print test1 == [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    # Test 2\n    test2 = [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    # Should return False\n    print test2 == [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    print test2 == [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    # Test 3\n    test3 = [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    # Should return False\n    print test3 == [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    print test3 == [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    # Test 4\n    test4 = [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    # Should return False\n    print test4 == [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    print test4 == [1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6]\n    # Test 5\n    test5 = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    # Should return False\n    print test5 == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    print test5 == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    # Test 6\n    test6 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n    # Should return False\n    print test6 == [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n    print test6 == [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n    # Test 7\n    test7 = [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    # Should return False\n    print test7 == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    print test7 == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n    # Test 8\n    test8 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    # Should return False\n    print test8 == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    # Should return True\n    print test8 == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    # Should return False\n    print test8 == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if num in arraynums:\n            print(num)\n        else:\n            print(\"Not in array\")\n            return\n    print(\"Not in array\")\n    return\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n    # repeat = True\n    # for x in arraynums:\n    #     if x in arraynums:\n    #         repeat = repeat or True\n    #         arraynums.remove(x)\n    #     else:\n    #         pass\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x % 2 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x >= 1 and x % 4 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 2:\n        return False\n    elif x > 3:\n        return True\n    elif x % 2 == 0:\n        return True\n    elif x % 3 == 0:\n        return False\n    elif x % 4 == 0:\n        return True\n    elif x % 5 == 0:\n        return False\n    elif x % 6 == 0:\n        return True\n    elif x % 7 == 0:\n        return False\n    elif x % 8 == 0:\n        return True\n    elif x % 9 == 0:\n        return False\n    elif x % 10 == 0:\n        return True\n    elif x % 11 == 0:\n        return False\n    elif x % 12 == 0:\n        return True\n    elif x % 13 == 0:\n        return False\n    elif x % 14 == 0:\n        return True\n    elif x % 15 == 0:\n        return False\n    elif x % 16 == 0:\n        return True\n    elif x % 17 == 0:\n        return False\n    elif x % 18 == 0:\n        return True\n    elif x % 19 == 0:\n        return False\n    elif x % 20 == 0:\n        return True\n    elif x % 21 == 0:\n        return False\n    elif x % 22 == 0:\n        return True\n    elif x % 23 == 0:\n        return False\n    elif x % 24 == 0:\n        return True\n    elif x % 25 == 0:\n        return False\n    elif x % 26 == 0:\n        return True\n    elif x % 27 == 0:\n        return False\n    elif x % 28 == 0:\n        return True\n    elif x % 29 == 0:\n        return False\n    elif x % 30 == 0:\n        return True\n    elif x % 31 == 0:\n        return False\n    elif x % 32 == 0:\n        return True\n    elif x % 33 == 0:\n        return False\n    elif x % 34 == 0:\n        return True\n    elif x % 35 == 0:\n        return False\n    elif x % 36 == 0:\n        return True\n    elif x % 37 == 0:\n        return False\n    elif x % 38 == 0:\n        return True\n    elif x % 39 == 0:\n        return False\n    elif x % 40 == 0:\n        return True\n    elif x % 41 == 0:\n        return False\n    elif x % 42 == 0:\n        return True\n    elif x % 43 == 0:\n        return False\n    elif x % 44 == 0:\n        return True\n    elif x % 45 == 0:\n        return False\n    elif x % 46 == 0:\n        return True\n    elif x % 47 == 0:\n        return False\n    elif x % 48 == 0:\n        return True\n    elif x % 49 == 0:\n        return False\n    elif x % 50 == 0:\n        return True\n    elif x % 51 == 0:\n        return False\n    elif x % 52 == 0:\n        return True\n    elif x % 53 == 0:\n        return False\n    elif x % 54 == 0:\n        return True\n    elif x % 55 == 0:\n        return False\n    elif x % 56 == 0:\n        return True\n    elif x % 57 == 0:\n        return False\n    elif x % 58 == 0:\n        return True\n    elif x % 59 == 0:\n        return False\n    elif x % 60 == 0:\n        return True\n    elif x % 61 == 0:\n        return False\n    elif x % 62 == 0:\n        return True\n    elif x % 63 == 0:\n        return False\n    elif x % 64 == 0:\n        return True\n    elif x % 65 == 0:\n        return False\n    elif x % 66 == 0:\n        return True\n    elif x % 67 == 0:\n        return False\n    elif x % 68 == 0:\n        return True\n    elif x % 69 == 0:\n        return False\n    elif x % 70 == 0:\n        return True\n    elif x % 71 == 0:\n        return False\n    elif x % 72 == 0:\n        return True\n    elif x % 73 == 0:\n        return False\n    elif x % 74 == 0:\n        return True\n    elif x % 75 == 0:\n        return False\n    elif x % 76 == 0:\n        return True\n    elif x % 77 == 0:\n        return False\n    elif x % 78 == 0:\n        return True\n    elif x % 79 == 0:\n        return False\n    elif x % 80 == 0:\n        return True\n    elif x % 81 == 0:\n        return False\n    elif x % 82 == 0:\n        return True\n    elif x % 83 == 0:\n        return False\n    elif x % 84 == 0:\n        return True\n    elif x % 85 == 0:\n        return False\n    elif x % 86 == 0:\n        return True\n    elif x % 87 == 0:\n        return False\n    elif x % 88 == 0:\n        return True\n    elif x % 89 == 0:\n        return False\n    elif x % 90 == 0:\n        return True\n    elif x % 91 == 0:\n        return False\n    elif x % 92 == 0:\n        return True\n    elif x % 93 == 0:\n        return False\n    elif x % 94 == 0:\n        return True\n    elif x % 95 == 0:\n        return False\n    elif x % 96 == 0:\n        return True\n    elif x % 97 == 0:\n        return False\n    elif x % 98 == 0:\n        return True\n    elif x % 99 == 0:\n        return False\n    elif x % 100 == 0:\n        return True\n    elif x % 101 == 0:\n        return False\n    elif x % 102 == 0:\n        return True\n    elif x % 103 == 0:\n        return False\n    elif x % 104 == 0:\n        return True\n    elif x % 105 == 0:\n        return False\n    elif x % 106 == 0:\n        return True\n    elif x % 107 == 0:\n        return False\n    elif x % 108 == 0:\n        return True\n    elif x % 109 == 0:\n        return False\n    elif x % 110 == 0:\n        return True\n    elif x % 111 == 0:\n        return False\n    elif x % 112 == 0:\n        return True\n    elif x % 113 == 0:\n        return False\n    elif x % 114 == 0:\n        return True\n    elif x % 115 == 0:\n        return False\n    elif x % 116 == 0:\n        return True\n    elif x % 117 == 0:\n        return False\n    elif x % 118 == 0:\n        return True\n    elif x % 119 == 0:\n        return False\n    elif x % 120 == 0:\n        return True\n    elif x % 121 == 0:\n        return False\n    elif x % 122 == 0:\n        return True\n    elif x % 123 == 0:\n        return False\n    elif x % 124 == 0:\n        return True\n    elif x % 125 == 0:\n        return False\n    elif x % 126 == 0:\n        return True\n    elif x % 127 == 0:\n        return False\n    elif x % 128 == 0:\n        return True\n    elif x % 129 == 0:\n        return False\n    elif x % 130 == 0:\n        return True\n    elif x % 131 == 0:\n        return False\n    elif x % 132 == 0:\n        return True\n    elif x % 133 == 0:\n        return False\n    elif x % 134 == 0:\n        return True\n    elif x % 135 == 0:\n        return False\n    elif x % 136 == 0:\n        return True\n    elif x % 137 == 0:\n        return False\n    elif x % 138 == 0:\n        return True\n    elif x % 139 == 0:\n        return False\n    elif x % 140 == 0:\n        return True\n    elif x % 141 == 0:\n        return False\n    elif x % 142 == 0:\n        return True\n    elif x % 143 == 0:\n        return False\n    e"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in [0,1]\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x<=1):\n        return \"woodball\"\n    elif(x<=4):\n        return \"copper\"\n    elif(x<=7):\n        return \"gold\"\n    else:\n        return \"noball\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x <= 21\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==1:\n        return True\n    elif x==2:\n        return False\n    elif x==3:\n        return True\n    elif x==4:\n        return False\n    elif x==5:\n        return True\n    elif x==6:\n        return False\n    elif x==7:\n        return True\n    elif x==8:\n        return False\n    elif x==9:\n        return True\n    elif x==10:\n        return False\n    elif x==11:\n        return True\n    elif x==12:\n        return False\n    elif x==13:\n        return True\n    elif x==14:\n        return False\n    elif x==15:\n        return True\n    elif x==16:\n        return False\n    elif x==17:\n        return True\n    elif x==18:\n        return False\n    elif x==19:\n        return True\n    elif x==20:\n        return False\n    elif x==21:\n        return True\n    elif x==22:\n        return False\n    elif x==23:\n        return True\n    elif x==24:\n        return False\n    elif x==25:\n        return True\n    elif x==26:\n        return False\n    elif x==27:\n        return True\n    elif x==28:\n        return False\n    elif x==29:\n        return True\n    elif x==30:\n        return False\n    elif x==31:\n        return True\n    elif x==32:\n        return False\n    elif x==33:\n        return True\n    elif x==34:\n        return False\n    elif x==35:\n        return True\n    elif x==36:\n        return False\n    elif x==37:\n        return True\n    elif x==38:\n        return False\n    elif x==39:\n        return True\n    elif x==40:\n        return False\n    elif x==41:\n        return True\n    elif x==42:\n        return False\n    elif x==43:\n        return True\n    elif x==44:\n        return False\n    elif x==45:\n        return True\n    elif x==46:\n        return False\n    elif x==47:\n        return True\n    elif x==48:\n        return False\n    elif x==49:\n        return True\n    elif x==50:\n        return False\n    elif x==51:\n        return True\n    elif x==52:\n        return False\n    elif x==53:\n        return True\n    elif x==54:\n        return False\n    elif x==55:\n        return True\n    elif x==56:\n        return False\n    elif x==57:\n        return True\n    elif x==58:\n        return False\n    elif x==59:\n        return True\n    elif x==60:\n        return False\n    elif x==61:\n        return True\n    elif x==62:\n        return False\n    elif x==63:\n        return True\n    elif x==64:\n        return False\n    elif x==65:\n        return True\n    elif x==66:\n        return False\n    elif x==67:\n        return True\n    elif x==68:\n        return False\n    elif x==69:\n        return True\n    elif x==70:\n        return False\n    elif x==71:\n        return True\n    elif x==72:\n        return False\n    elif x==73:\n        return True\n    elif x==74:\n        return False\n    elif x==75:\n        return True\n    elif x==76:\n        return False\n    elif x==77:\n        return True\n    elif x==78:\n        return False\n    elif x==79:\n        return True\n    elif x==80:\n        return False\n    elif x==81:\n        return True\n    elif x==82:\n        return False\n    elif x==83:\n        return True\n    elif x==84:\n        return False\n    elif x==85:\n        return True\n    elif x==86:\n        return False\n    elif x==87:\n        return True\n    elif x==88:\n        return False\n    elif x==89:\n        return True\n    elif x==90:\n        return False\n    elif x==91:\n        return True\n    elif x==92:\n        return False\n    elif x==93:\n        return True\n    elif x==94:\n        return False\n    elif x==95:\n        return True\n    elif x==96:\n        return False\n    elif x==97:\n        return True\n    elif x==98:\n        return False\n    elif x==99:\n        return True\n    elif x==100:\n        return False\n    elif x==101:\n        return True\n    elif x==102:\n        return False\n    elif x==103:\n        return True\n    elif x==104:\n        return False\n    elif x==105:\n        return True\n    elif x==106:\n        return False\n    elif x==107:\n        return True\n    elif x==108:\n        return False\n    elif x==109:\n        return True\n    elif x==110:\n        return False\n    elif x==111:\n        return True\n    elif x==112:\n        return False\n    elif x==113:\n        return True\n    elif x==114:\n        return False\n    elif x==115:\n        return True\n    elif x==116:\n        return False\n    elif x==117:\n        return True\n    elif x==118:\n        return False\n    elif x==119:\n        return True\n    elif x==120:\n        return False\n    elif x==121:\n        return True\n    elif x==122:\n        return False\n    elif x==123:\n        return True\n    elif x==124:\n        return False\n    elif x==125:\n        return True\n    elif x==126:\n        return False\n    elif x==127:\n        return True\n    elif x==128:\n        return False\n    elif x==129:\n        return True\n    elif x==130:\n        return False\n    elif x==131:\n        return True\n    elif x==132:\n        return False\n    elif x==133:\n        return True\n    elif x==134:\n        return False\n    elif x==135:\n        return True\n    elif x==136:\n        return False\n    elif x==137:\n        return True\n    elif x==138:\n        return False\n    elif x==139:\n        return True\n    elif x==140:\n        return False\n    elif x==141:\n        return True\n    elif x==142:\n        return False\n    elif x==143:\n        return True\n    elif x==144:\n        return False\n    elif x==145:\n        return True\n    elif x==146:\n        return False\n    elif x==147:\n        return True\n    elif x==148:\n        return False\n    elif x==149:\n        return True\n    elif x==150:\n        return False\n    elif x==151:\n        return True\n    elif x==152:\n        return False\n    elif x==153:\n        return True\n    elif x==154:\n        return False\n    elif x==155:\n        return True\n    elif x==156:\n        return False\n    elif x==157:\n        return True\n    elif x==158:\n        return False\n    elif x==159:\n        return True\n    elif x==160:\n        return False\n    elif x==161:\n        return True\n    elif x==162:\n        return False\n    elif x==163:\n        return True\n    elif x==164:\n        return False\n    elif x==165:\n        return True\n    elif x==166:\n        return False\n    elif x==167:\n        return True\n    elif x==168:\n        retur"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 0 <= x < 31\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 10000:\n        return True\n    elif x >= 1000:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Find the remainder of the division\n    remainder = num % 2\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = \"\"\n    if num < 0:\n        num = abs(num)\n    else:\n        pass\n    for i in str(num):\n        rev_num += i\n    if len(rev_num) % 2 == 0:\n        rev_num = rev_num[::-1]\n        if int(rev_num) == num:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    rev = num * 2\n    if rev < num:\n        return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #global count\n    count = 0\n    rev = 0\n    num1 = num\n    while num1!= 0:\n        rev = rev * 10 + num1 % 10\n        num = num // 10\n        if num1 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        digit = num % 10\n        rev_num = rev_num * 10 + digit\n        num //= 10\n    return rev_num == 0\n    \ndef main():\n    num = int(input('Enter a number: '))\n    if rev(num):\n        print('Number is'+ str(num) +'the reverse is'+ str(num) +'its number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'its number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) +'the number is'+ str(num) + "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    i = 0\n    rev_num = 0\n    while(i < num):\n        rev_num = rev_num*10 + (num%10)\n        num = num//10\n        i = i + 1\n    if rev_num == num:\n        print(\"the given number is one less than twice its reverse\")\n    else:\n        print(\"the given number is not one less than twice its reverse\")\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Write your code here\n    rev = 0\n    for i in range(int(num)):\n        rev = rev * 2 + 1\n    return rev\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if(int(num) < 2):\n        print(\"Invalid Number\")\n    else:\n        rev_num = int(num) * 2\n        print(rev_num)\n        \n        if rev_num == int(num):\n            print(\"Valid number\")\n        else:\n            print(\"Invalid number\")\n    \n            \n    \n        \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev = int(num[::-1])\n    rev = int(str(rev)[::-1])\n    if int(num) == rev:\n        print(\"It's a number.\")\n    else:\n        print(\"It's not a number.\")\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(1, len(arr)+1) : \n        for j in range(1, len(arr)+1) : \n            if arr[i-1] == arr[j-1] : \n                print('[', arr[i-1], ', ', arr[j-1], ', ', arr[i-1]+arr[j-1]+arr[i-1]+arr[j-1])\n                if max_num < arr[i-1]+arr[j-1]+arr[i-1]+arr[j-1] : \n                    max_num = arr[i-1]+arr[j-1]+arr[i-1]+arr[j-1]\n    return max_num \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l=[]\n    for i in range(len(arr)) :\n        for j in range(len(arr)) :\n            l.append(int(arr[i])*int(arr[j]))\n    return max(l)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = 0\n    curr = 0\n    for i in range(1, len(arr)) :\n        curr = i\n        while curr > 0 :\n            if arr[curr - 1] > arr[curr] :\n                arr[curr], arr[curr - 1] = arr[curr - 1], arr[curr]\n                curr -= 1\n                if curr == 0 : break\n            curr -= 1\n    return arr\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l = len(arr)\n    i = 0\n    max = arr[0]\n    if len(arr) == 1 :\n        return arr\n    for j in range(1, l):\n        if arr[j] > max:\n            max = arr[j]\n            i = j\n    return max, i\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr : \n        if (i < 0) : \n            break\n        if i > max_num : \n            max_num = i \n    return max_num\n    \n    \n    \n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # writing a recursive function\n    def recur(arr,i,s) : \n        if arr[i] == s : \n            return [arr[i],i]\n        if arr[i] > s : \n            return [arr[i],i]\n        else :\n            return None\n    # solving the given problem\n    res = recur(arr,i,s)\n    if res == None : \n        return None\n    return [res[0],res[1]]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    numbers = []\n    for i in range(1,len(arr)+1):\n        if len(str(i)) == len(arr):\n            numbers.append(i)\n    \n    #print(numbers)\n    numbers.sort()\n    numbers.pop(0)\n    #print(numbers)\n    if numbers == []:\n        return 0\n    else:\n        return numbers[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    largest = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n    return largest\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    num_set = set(arr)\n    ans = -1\n    for num in arr :\n        if num in num_set :\n            num_set.remove(num)\n    for num in num_set :\n        ans = max(ans, num)\n    return ans\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        print(\"positive sign\")\n    elif y > x:\n        print(\"positive sign\")\n    elif x == y:\n        print(\"zero sign\")\n    else:\n        print(\"negative sign\")\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > y):\n        return 1\n    elif(x < y):\n        return -1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    l=[]\n    for i in range(len(x)):\n        if x[i]>y[i] or y[i]>x[i]:\n            l.append(x[i])\n    return l\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    a=x\n    b=y\n    if a<0 and b<0:\n        return True\n    elif a>0 and b>0:\n        return False\n    else:\n        if a>0:\n            a=a-1\n            b=b-1\n        elif a<0:\n            a=a+1\n            b=b+1\n        else:\n            b=b-1\n        if a<b:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return False\n    elif x > 0 and y < 0:\n        return False\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return not (x > y)\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    elif x < y:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False\ndef main():\n    print(opposite_Signs(3,4))\n    print(opposite_Signs(1,2))\n    print(opposite_Signs(5,4))\n    print(opposite_Signs(0,1))\n    print(opposite_Signs(0,0))\n    print(opposite_Signs(10,20))\n    print(opposite_Signs(1,0))\nmain()\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0) and (y>0):\n        return False\n    if (x>0) and (y<0):\n        return False\n    if (x<0) and (y<0):\n        return True\n    if (x>0) and (y>0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x>0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x>0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x>0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x>0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x>0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x>0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y>0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y<0):\n        return True\n    if (x<0) and (y"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x==y):\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    while count <= n:\n        if n % count == 0:\n            return n//count\n        count += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<=1:\n        print(n)\n        return\n    elif n>=1:\n        # find the nth digit from 1 to 10\n        digit = 0\n        while n >= digit*10:\n            digit += 1\n        print(digit)\n        # find the nth digit from 1 to digit*10\n        n -= digit*10\n        print(n)\n        # find the nth digit from digit*10 to 10\n        n -= digit\n        print(n)\n        # find the nth digit from digit*10 to 1\n        n -= digit*10\n        print(n)\n        # return the nth nth digit\n        return n\nprint(is_octagonal(123))\nprint(is_octagonal(2))\nprint(is_octagonal(101))"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = int(n)\n    dnum = int(num / 2)\n    while dnum!= 1:\n        if num % dnum == 0:\n            return False\n        num = num / dnum\n        dnum = int(num / 2)\n    return True\n    \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    # calculate the number of squares, starting at 1\n    squares = 1\n    while i < n + 1:\n        # calculate the current value of the nth square\n        current_square = i ** 2\n        # if the square is 1, then no subsequent square is valid\n        if current_square == 1:\n            return None\n        # if the square is not 1, then there are at least two squares\n        if current_square < 1:\n            return None\n        # increase the current square by the previous one\n        i += 1\n    # return the nth square\n    return i ** 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n % 10) * (n // 10) == n\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (n + 1) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    fib_list = [1, 1]\n    for i in range(2, n + 1):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    return fib_list[n]\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = int(n)\n    if (n < 1): \n        return False\n    if (n == 1): \n        return True\n    if (n == 2): \n        return False\n    \n    for i in range(3, (n//2) + 1): \n        if (n % i == 0): \n            return False\n    return True\n        \n    \nprint(is_octagonal(n)) \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if (n <= 3):\n        return n\n    \n    if (n % 2 == 0):\n        return is_octagonal(3*n+1)\n    else:\n        return is_octagonal(3*n-1)\n    \n    \n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]]+=1\n        \n    return d[s[-1]]\n    \n    \n    # Space: O(n^2)\n    # Time: O(n^2)\n    # Runtime: O(n^2)\n    # Space: O(n)\n    # Time: O(n)\n    # Runtime: O(n)\n    \ndef count_Substrings2(s):\n    '''\n    Given a string, return the number of valid substrings with the sum of digits equal to the length of the string.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            d[s[i:j]]+=1\n    return d[s[-1]]\n    \n    \n    # Space: O(n^2)\n    # Time: O(n^2)\n    # Runtime: O(n^2)\n    # Space: O(n)\n    # Time: O(n)\n    # Runtime: O(n)\n    \ndef count_Substrings3(s):\n    '''\n    Given a string, return the number of valid substrings with the sum of digits equal to the length of the string.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            for k in range(j+1,len(s)+1):\n                d[s[i:j]+(s[k:j+1])]+=1\n                d[s[i:j]+(s[k:j+1])]+=1\n                d[s[i:k]+(s[k:j])]+=1\n                d[s[i:k]+(s[k:j])]+=1\n    return d[s[-1]]\n    \n    \n    # Space: O(n^2)\n    # Time: O(n^2)\n    # Runtime: O(n^2)\n    # Space: O(n)\n    # Time: O(n)\n    # Runtime: O(n)\n    \ndef count_Substrings4(s):\n    '''\n    Given a string, return the number of valid substrings with the sum of digits equal to the length of the string.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            for k in range(j+1,len(s)+1):\n                d[s[i:j]+(s[k:j+1])]+=1\n                d[s[i:k]+(s[k:j])]+=1\n    return d[s[-1]]\n    \n    \n    # Space: O(n^2)\n    # Time: O(n^2)\n    # Runtime: O(n^2)\n    # Space: O(n)\n    # Time: O(n)\n    # Runtime: O(n)\n    \ndef count_Substrings5(s):\n    '''\n    Given a string, return the number of valid substrings with the sum of digits equal to the length of the string.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            for k in range(j+1,len(s)+1):\n                if s[i:j]+(s[k:j+1]) in d:\n                    d[s[i:j]+(s[k:j+1])]+=1\n                else:\n                    d[s[i:j]+(s[k:j+1])]=1\n    return d[s[-1]]\n    \n    \n    # Space: O(n^2)\n    # Time: O(n^2)\n    # Runtime: O(n^2)\n    # Space: O(n)\n    # Time: O(n)\n    # Runtime: O(n)\n    \ndef count_Substrings6(s):\n    '''\n    Given a string, return the number of valid substrings with the sum of digits equal to the length of the string.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            for k in range(j+1,len(s)+1):\n                if s[i:j]+(s[k:j+1]) in d:\n                    d[s[i:j]+(s[k:j+1])]+=1\n                else:\n                    d[s[i:j]+(s[k:j+1])]=1\n    return d[s[-1]]\n    \n    \n    # Space: O(n^2)\n    # Time: O(n^2)\n    # Runtime: O(n^2)\n    # Space: O(n)\n    # Time: O(n)\n    # Runtime: O(n)\n    \ndef count_Substrings7(s):\n    '''\n    Given a string, return the number of valid substrings with the sum of digits equal to the length of the string.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            for k in range(j+1,len(s)+1):\n                if s[i:j]+(s[k:j+1]) in d:\n                    d[s[i:j]+(s[k:j+1])]+=1\n                else:\n                    d[s[i:j]+(s[k:j+1])]=1\n    return d[s[-1]]\n    \n    \n    # Space: O(n^2)\n    # Time: O(n^2)\n    # Runtime: O(n^2)\n    # Space: O(n)\n    # Time: O(n)\n    # Runtime: O(n)\n    \ndef count_Substrings8(s):\n    '''\n    Given a string, return the number of valid substrings with the sum of digits equal to the length of the string.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            for k in range(j+1,len(s)+1):\n                if s[i:j]+(s[k:j+1]) in d:\n                    d[s[i:j]+(s[k:j+1])]+=1\n                else:\n                    d[s[i:j]+(s[k:j+1])]=1\n    return d[s[-1]]\n    \n    \n    # Space: O(n^2)\n    # Time: O(n^2)\n    # Runtime: O(n^2)\n    # Space: O(n)\n    # Time: O(n)\n    # Runtime: O(n)\n    \ndef count_Substrings9(s):\n    '''\n    Given a string, return the number of valid substrings with the sum of digits equal to the length of the string.\n    '''\n    d=defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            for k in range(j+1,len(s)+1):\n                if s[i:j]+(s[k:j+1]) in d:\n                    d[s[i:j]+(s[k:j+1])]+=1\n                else:\n                    d[s[i:j]+(s[k:j+1])]=1\n    return d[s[-1]]\n    \n    \n    # Space: O(n^2)\n    # Time: O(n^2)\n    # Runtime: O(n^2)\n    # Space: O(n)\n    # Time: O(n)\n    # Runtime: O(n)\n    \ndef count_Substrings10(s):\n    '''\n    Given a string, return the number of valid substrings with the sum of digits equa"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a empty dictionary\n    sub_dict = defaultdict(int)\n    sub_str = \"\"\n    # loop through the string s\n    for i in range(len(s)):\n        # get the substring and add it to the dictionary\n        sub_str += s[i]\n        # check if the dictionary contains the substring\n        if sub_str in sub_dict:\n            # increment the counter\n            sub_dict[sub_str] += 1\n    return sub_dict\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def substring(s):\n        substring = 0\n        # p = 0\n        for i in range(len(s)):\n            for j in range(i+1, len(s)+1):\n                if int(s[i:j]) == int(s[i:j][::-1]):\n                    # p += 1\n                    substring += 1\n        return substring\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create an empty dictionary to store the substring length and its count\n    substring_dictionary = {}\n    # generate all substrings that have the same length with the given sum\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            # if the string is not empty then add the length of the substring to the dictionary\n            if s[i:j]!= \"\":\n                if s[i:j] in substring_dictionary.keys():\n                    # increment the count of the number of substrings with the given length\n                    substring_dictionary[s[i:j]] = substring_dictionary[s[i:j]] + 1\n                else:\n                    # store the new substring\n                    substring_dictionary[s[i:j]] = 1\n    # return the number of substrings with the given sum\n    return len(substring_dictionary)\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    d = {}\n    n = len(s)\n    for i in range(n):\n        curr_dig = 0\n        for j in range(i, n):\n            if s[j] == '0':\n                break\n            curr_dig += 1\n        if curr_dig == n - i:\n            d[s[i:i+n]] = d.get(s[i:i+n], 0) + 1\n    res = []\n    for k,v in d.items():\n        if v == 1:\n            res.append(k)\n    return len(res)"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    \n    dic = defaultdict(int)\n    for i in range(1, len(s) + 1):\n        dic[s[i - 1]] += i\n    \n    return dic[s[0]]"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if int(s[i:j+1].replace('-',''))<=int(s[j:j+1].replace('-','')):\n                count=count+1\n    return count\ndef word_frequency(text):\n    '''\n    Write a python function to count the number of unique words in a text.\n    '''\n    freq={}\n    for char in text:\n        if char not in freq:\n            freq[char]=0\n        freq[char]+=1\n    return len(freq.keys())\n    \ndef word_count(text):\n    '''\n    Write a python function to count the number of unique words in a text.\n    '''\n    count=0\n    for char in text:\n        if char not in count:\n            count+=1\n    return count\n    \ndef unique_words(text):\n    '''\n    Write a python function to count the number of unique words in a text.\n    '''\n    words=set(text)\n    return len(words)\n    \ndef min_word_count(text):\n    '''\n    Write a python function to find the minimum word count.\n    '''\n    text_dict={}\n    for char in text:\n        if char not in text_dict:\n            text_dict[char]=0\n        text_dict[char]=text_dict[char]+1\n    min_word_count=float('inf')\n    for char in text_dict:\n        min_word_count=min(min_word_count,text_dict[char])\n    return min_word_count\n    \ndef remove_punctuation(text):\n    '''\n    Remove punctuation from a text\n    '''\n    return re.sub('[^a-zA-Z0-9]', '', text)\n    \ndef remove_numbers(text):\n    '''\n    Remove numbers from a text\n    '''\n    return re.sub('\\d+', '', text)\n    \ndef remove_multiple_numbers(text):\n    '''\n    Remove numbers from a text\n    '''\n    return re.sub('\\d{2,}', '', text)\n    \ndef replace_numbers(text):\n    '''\n    Replace numbers with '#'\n    '''\n    return re.sub('\\d+', '#', text)\n    \ndef word_frequency(text):\n    '''\n    Calculate the frequency of words\n    '''\n    freq={}\n    for char in text:\n        if char not in freq:\n            freq[char]=0\n        freq[char]+=1\n    return len(freq.keys())\n    \ndef min_word_count(text):\n    '''\n    Calculate the minimum word count\n    '''\n    words=set(text)\n    count=0\n    for char in words:\n        if char not in count:\n            count+=1\n    return count\n    \ndef find_longest_word(text,p):\n    '''\n    Find the longest word in the text\n    '''\n    longest=0\n    for char in text:\n        if char in p:\n            if longest<len(char):\n                longest=len(char)\n            else:\n                longest+=1\n    return longest\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #Your code here\n    return sum(digit_sum(s) for digit_sum in range(int(len(s)/2),0,-1))\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        num = n * (n - 1) // 2\n        cnt = 0\n        for i in range(num):\n            cnt += len(s[i:i+n])\n        return cnt\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    '''\n    First, let us create a dictionary, whose keys are letters and values are numbers of the substring. \n    Then, we can count the number of substrings with each letter, while the last letter's value is always 1. \n    We can take each character of the string, and try to add it with each letter, and if it has a number, \n    then we increment the number of times it has it with its letter.\n    '''\n    d = defaultdict(lambda : 0)\n    def substring(i,k):\n        if (i+k) > len(s):\n            return\n        if len(k) == 1 and len(k)!= 0:\n            d[k[0]] += 1\n        else:\n            for j in range(i, i+k):\n                substring(j, k[1:])\n    for i in range(len(s)):\n        substring(i, s[i])\n    print(d)\n    #print(len(d))\n    return sum(d.values())\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Solution 1:\n    # Smallest = min(xs)\n    # Smallest_idx = xs.index(Smallest)\n    # return Smallest\n    # Solution 2:\n    # Smallest_idx = min(xs, key=xs.get)\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = xs[0]\n    smallest_number_index = 0\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print(xs[0])\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for num in xs:\n        if num < min:\n            min = num\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = 9999999999999999999\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    xs = sorted(xs)\n    ans = xs[0]\n    return ans\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return xs.pop() if len(xs) > 0 else None\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in xs:\n        if i < smallest:\n            smallest = i\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    elif len(test_list) == 2:\n        return test_list[0] - test_list[1]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # my_list = []\n    # for i in range(len(test_list)-2):\n    #     for j in range(i+1, len(test_list)-1):\n    #         my_list.append(test_list[j] - test_list[i])\n    # print(max(my_list))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sorting the list\n    test_list.sort()\n    # Getting the number of elements in the list\n    n = len(test_list)\n    # Initializing the variable\n    sum_of_differences = 0\n    # Getting the maximum difference\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Calculating the difference\n            sum_of_differences += abs(test_list[i] - test_list[j])\n    return sum_of_differences\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] - test_list[j] > 0:\n                return test_list[i] - test_list[j]\n    return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for pair in test_list:\n        pair_sum = 0\n        for item in pair:\n            pair_sum += item\n        if pair_sum > max_difference:\n            max_difference = pair_sum\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return sum(abs(a-b) for a,b in zip(test_list,test_list[1:]))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            \n            if test_list[i] - test_list[j] > max_diff:\n                max_diff = test_list[i] - test_list[j]\n    return max_diff\n    \ntest_list = [3,2,1]\ntest_list2 = [5,6,7]\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    #print(test_list)\n    test_list_copy = test_list[:]\n    #print(test_list_copy)\n    \n    #go through each element of the tuple\n    for i in range(len(test_list)):\n        #print(test_list[i])\n        \n        #check the previous element in tuple is not in the tuple\n        if test_list[i][0] < test_list[i][1]:\n            #print(\"not in the tuple\")\n            #print(test_list[i])\n            \n            #find the maximum of two values in the tuple\n            if test_list_copy[i][0] < test_list_copy[i][1]:\n                #print(\"i is in tuple\")\n                test_list_copy[i][0] = max(test_list[i][0], test_list_copy[i][1])\n                #print(test_list_copy)\n                \n                if test_list_copy[i][1] > test_list_copy[i][0]:\n                    #print(\"too large\")\n                    test_list_copy[i][1] = max(test_list[i][1], test_list_copy[i][0])\n                    #print(test_list_copy)\n                    \n                #else:\n                    #print(\"too small\")\n                    #print(test_list_copy)\n                    #print(i)\n            else:\n                #print(\"too small\")\n                test_list_copy[i][1] = max(test_list[i][1], test_list_copy[i][0])\n                #print(test_list_copy)\n                \n            #print(test_list[i])\n            #print(test_list_copy[i])\n    \n    #print(test_list_copy)\n    \n    return max(test_list_copy)\n    \n    \n    \ndef main():\n    '''\n    Sample tests\n    '''\n    test_list = []\n    print(\"test_list:\")\n    for i in range(3):\n        element = list(map(int, input().split()))\n        test_list.append(element)\n        #print(element)\n    \n    print(\"max difference between two lists:\")\n    print(max_difference(test_list))\n        \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    # Get the first and the last element as position.\n    # i.e. test_list[0] is the first element of the list and test_list[-1] is the last element.\n    pos1 = 0\n    pos2 = 0\n    while pos1 < len(test_list) and pos2 < len(test_list):\n        # Check if the position of the element at index 1 is the same as the index of the position at index 2.\n        if test_list[pos1] == test_list[pos2]:\n            pos2 += 1\n        else:\n            # If the elements at index 1 and index 2 are not equal,\n            # this element is the maximum difference.\n            max_diff = max(pos1 - pos2, max_diff)\n            pos1 += 1\n            pos2 += 1\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    counter = 0\n    for i in range(0,len(test_list)):\n        for j in range(i,len(test_list)):\n            if test_list[i][0] > test_list[j][0]:\n                counter += 1\n    if counter == 0:\n        return 0\n    else:\n        return counter\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sorter(x):\n        return (x[1])\n    return sorted(subjectmarks, key=sorter)\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda subjectmarks : subjectmarks[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if len(subjectmarks)>=2:\n        subjectmarks.sort(key=lambda x: x[1])\n        subjectmarks.sort(key=lambda x: x[0])\n        subjectmarks.sort(key=lambda x: x[1])\n        return subjectmarks\n    else:\n        print('Invalid input.')\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key = lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if subjectmarks[0][1] == subjectmarks[1][1]:\n        subjectmarks.sort(key=lambda x:x[1],reverse=True)\n    else:\n        subjectmarks.sort(key=lambda x:x[1],reverse=False)\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Step 1. Create an empty list called `subjects`.\n    subjects = []\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    new_list = sorted(subjectmarks,key=lambda x: x[1],reverse=True)\n    \n    return new_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Your code here\n    if data_list == []:\n        return 0\n    elif len(data_list) > 1:\n        return (recursive_list_sum(data_list[1:])+data_list[0])\n    else:\n        return data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    try:\n        l = len(data_list[0])\n    except TypeError:\n        l = 0\n    flattened_list = []\n    for i in range(0, len(data_list)):\n        for j in range(0, len(data_list[i])):\n            flattened_list.append(data_list[i][j])\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    if len(data_list) == 0:\n        return result\n    for data in data_list:\n        result += data\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def sum_data(data):\n        '''\n        Recursively sum values.\n        '''\n        if type(data) is list:\n            return sum(data)\n        else:\n            return data\n    return sum_data(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(l):\n        result = []\n        for item in l:\n            if type(item) is list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) <= 0:\n        return data_list\n    \n    return flatten_list(data_list, recursive=True) + data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return data_list\n    if len(data_list) == 1:\n        return data_list\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    if list == []:\n        return 0\n    else:\n        count = 0\n        for i in list:\n            if i > 0:\n                count = count + 1\n        return count\n    \nprint(pos_count([1,2,3,4,5]))\nprint(pos_count([0,1,2,3,4]))\nprint(pos_count([0,1,3,5]))\nprint(pos_count([0,1,3,5,7]))"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for element in list:\n        if element > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len(list)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    result = 0\n    for i in list:\n        if i > 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for i in list:\n        if i > 0:\n            pos_count = pos_count + 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    num_list = []\n    for i in list:\n        if i > 0:\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(map(lambda x: 1 if x >= 0 else 0, list))\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # your code goes here\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    print(f'The number of positive numbers in {list} is: {count}')\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for x in list:\n        if x>0:\n            pos += 1\n    return pos\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1 or n==0:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return 1\n    elif n%2==0:\n        return bell_number(n//2)\n    else:\n        return bell_number((n+1)/2) + bell_number(n//2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return 1\n    return bell_number(n - 1) + bell_number(n - 2)\n    \nprint(bell_number(7)"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Your code here\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n    \ndef main():\n    # Test your function\n    print(bell_number(3))\n    print(bell_number(4))\n    print(bell_number(5))\n    print(bell_number(6))\n    print(bell_number(7))\n    print(bell_number(8))\n    print(bell_number(9))\n    print(bell_number(10))\n    print(bell_number(20))\n    print(bell_number(50))\n    print(bell_number(100))\n    print(bell_number(200))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base Case\n    if n <= 2:\n        return n\n    \n    # get the midpoint\n    midpoint = n // 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    \n    # if n is not odd, there are no ways to partition\n    if n % 2 == 1:\n        return 0\n    \n    # if n is even, there are no ways to partition\n    return bell_number(n-1) + bell_number(n-2)\n    \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-2) + bell_number(n-1)\n        \nprint(bell_number(6))\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # checking by sum\n    if len(A)>1:\n        sum=0\n        for i in A:\n            sum=sum+i\n        return sum==sum(A)\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Traverse through the array\n    for i in range(len(A)-1):\n        # If the next item is less than the previous one, the\n        # current item is a violated condition.\n        if A[i+1] < A[i]:\n            return False\n    # Otherwise, both conditions are satisfied.\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is monotonic\n    if(len(A) >= 2):\n        for i in range(0, len(A) - 1):\n            if(A[i + 1] > A[i]):\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    m = len(A)\n    k = 0\n    for i in range(m-1):\n        if A[i] > A[i+1]:\n            return False\n        else:\n            k += 1\n    if k == m-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A.sort()\n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)): \n        if A[i] < A[i - 1]: \n            return False \n    return True \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A.sort()\n    n = len(A)\n    # if there is any 1 element, then return false\n    if A[0] == A[1]:\n        return False\n    for i in range(1, n):\n        if A[i] == A[i-1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    n = len(A)\n    if n == 1: \n        is_monotonic = True\n    else: \n        # print(\"n is\",n)\n        for i in range(n-1): \n            if A[i] > A[i+1]: \n                is_monotonic = False\n    return is_monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return(all(A[i] >= A[i+1] for i in range(len(A)-1)))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)<=1:\n        return True\n    elif l[0] in s:\n        if len(s)==1:\n            return True\n        else:\n            return is_sublist(l[1:], s[1:])\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(l[i] == s[i] for i in range(len(l)))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    if len(s) < 1:\n        return True\n    if s in l:\n        return True\n    return is_sublist(l[1:],s[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return True\n    if l[0] == s[0]:\n        if is_sublist(l[1:], s):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return len(set(l)&set(s)) == len(s)\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # length is the total number of items in the list\n    # s is the given sublist\n    # O(n) in time and O(n) in space\n    #\n    # keep in mind that s can be of any length\n    if len(l) == 0:\n        return True\n    elif len(l) == 1:\n        return s == l[0]\n    elif s in l:\n        return l.count(s) > 0\n    else:\n        # if the current item is in the sublist, it can be included in the subsublist,\n        # hence the two conditions are checked\n        # that the sublist is not empty\n        # and the current item is not present in the sublist\n        for i in range(len(l)):\n            if s in l[i]:\n                return is_sublist(l[:i], s) or is_sublist(l[i+1:], s)\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return list(filter(lambda x: x in l, s))\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return False\n    if isinstance(l[0], list):\n        if is_sublist(l[0], s):\n            return True\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(set(Input[i]) & set(Input[j])) == len(set(Input[i])):\n                print(Input[i])\n                print(Input[j])\n                break\n                \n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) < 2:\n        return True\n    for i in range(0,len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_length = 0\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if Input[i] == Input[j]:\n                equal_length += 1\n    if equal_length == len(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(set(Input[i])):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    if len(Input) == 1:\n        return Input[0] == Input[0]\n    if len(Input) == 2:\n        return Input[0] == Input[1]\n    for i in range(2,len(Input),2):\n        if Input[i] == Input[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    res = []\n    count = 0\n    for i in range(0, len(Input)):\n        for j in range(0, i+1):\n            if Input[i] == Input[j]:\n                count += 1\n            if count == len(Input)-1:\n                res.append(Input[i])\n                count = 0\n        if count == len(Input)-1:\n            break\n    return res\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_tuple=[]\n    for i in Input:\n        if len(i)!=len(i[0]):\n            return False\n        for j in range(len(i)):\n            if i[j]!=i[j][0]:\n                return False\n        equal_tuple.append(i)\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    equal_length_list = []\n    length = len(Input[0])\n    for i in range(0, length):\n        for j in range(i+1, length):\n            if Input[0][i] == Input[0][j]:\n                equal_length_list.append((i,j))\n            else:\n                pass\n    return equal_length_list\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    equal_length = 0\n    \n    for i in Input:\n        if len(i) == len(Input[0]):\n            equal_length += 1\n            \n    if equal_length == len(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length - 1):\n        for j in range(length - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    print(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(0, n - 1):\n        for j in range(0, n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    for i in range(length-1):\n        for j in range(length-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    print(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # your code here\n    \n    for i in range(len(nums)):\n        for j in range(len(nums)-1-i):\n            if nums[j]>nums[j+1]:\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    return nums\n    \ndef bubble_sort(nums):\n    '''\n    Write a function that sorts a list of numbers using the bubble sort algorithm.\n    '''\n    # your code here\n    \n    for i in range(len(nums)):\n        for j in range(len(nums)-1-i):\n            if nums[j]>nums[j+1]:\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    return nums\n    \n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Fill in this method\n    # (TODO)\n    #\n    # Method-2:\n    # sort by sequence number\n    # put all unsorted items in a list and compare the sequence number of each item\n    # for each item put a position in the list, remove the item, insert a new item, and repeat\n    # until the list is sorted, or there are no items in the list\n    #\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n            else:\n                pass\n        pass\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # for i in range(len(nums) - 1):\n    #     for j in range(len(nums) - i - 1):\n    #         if nums[j] > nums[j + 1]:\n    #             temp = nums[j]\n    #             nums[j] = nums[j + 1]\n    #             nums[j + 1] = temp\n    #     return nums\n    # return nums\n    \n    # since we want to sort the list in ascending order and also keep track of the smallest number, we need to sort it in descending order\n    # so the highest number is the smallest\n    # so to calculate the rest of the numbers we need to use the fact that all numbers are greater than the smallest number\n    # so the greatest number is at the end, so we need to calculate it before the smallest number\n    # so the lowest number is at the start, so we need to calculate it before the highest number\n    # so each number is sorted on its own, and we can calculate the rest of numbers at the same time\n    # this way, we have to sort the list in descending order of the numbers\n    # so the highest number is at the end of the list, so we need to calculate it before the lowest number\n    # so the lowest number is at the start, so we need to calculate it before the highest number\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n_Square = n**2\n    n_Square_Floor = floor(n_Square)\n    if n_Square_Floor % 2 == 0: \n        if n_Square_Floor == 3 or n_Square_Floor == 5: \n            return \"Not Valid\"\n        else:\n            return \"Valid\"\n    else:\n        return \"Not Valid\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n\n    b = n\n    if(n%2==0): \n        return 'Not square'\n    elif(n==1): \n        return True\n    for i in range(1, int(math.sqrt(n))):\n        if(n%i==0):\n            return 'Not square'\n    return True\nprint(dif_Square(123))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # assume the input number is a number in base 10\n    # to the power of 2, we want a number in base 10\n    # the square of each digit is the square of the number\n    # in base 10, we want to check each digit separately\n    # using the - operator, we know that the base 10 number represents\n    # an integer, but we need to multiply the result with the base 10 number\n    # to get the decimal representation of the number in base 10\n    # so we'll want to use the ^ operator\n    # the result will be an integer, we'll convert it to a float\n    # before we check with the ^ operator\n    \n    # we will create a list of the number in base 10\n    num_as_int = [int(i) for i in str(n)]\n    \n    # loop through each digit of the number\n    for digit in num_as_int:\n        \n        # add 1 to all the squared numbers to get the number of squares\n        # the difference will be the square of the next digit\n        squares_diff = int(digit)**2\n        # add the difference to the square of the next digit\n        # in order to get the number of squares\n        squares_diff = squares_diff * digit\n        # add the square of the next digit to the result\n        # to get the number of squares\n        squares_diff = squares_diff * digit\n        # check whether the result is an integer, if it is not\n        # then return the result, so the number will be an int\n        if not isinstance(squares_diff, int):\n            return \"Invalid Square\"\n        \n    # return the result\n    return num_as_int\n    \nprint(dif_Square(0))\nprint(dif_Square(1))\nprint(dif_Square(9))\nprint(dif_Square(99))\nprint(dif_Square(100))\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0: \n        return 'Error - n cannot be equal to 0'\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    j = 0\n    k = 0\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n%2 == 1:\n        return False\n    \n    result = dif_Square(n//2)\n    return result and result + dif_Square(n//2)\n    \n    \n    \n    "
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n**2\n    square_difference = abs(square - square*square)\n    square_difference_list = [square_difference, square_difference, square_difference]\n    square_difference_list.sort()\n    return square_difference_list\n    \ndef sq_diff_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n**2\n    square_difference = sq_diff_Square_List(n)\n    square_difference_list = [square_difference, square_difference, square_difference]\n    square_difference_list.sort()\n    return square_difference_list\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0: \n        return \"Invalid\"\n    if n == 1: \n        return True\n    if n % 2 == 0: \n        return False\n    for i in range(n, 0, -1): \n        if n % i == 0: \n            return False\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return (n % 10)**2\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return \"0 is not square\"\n    if n == 1:\n        return \"1 is square\"\n    elif n%2!= 0:\n        return \"not square\"\n    else:\n        return f\"{n} is square\"\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if is_samepatterns(colors, pattern):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    while i < len(colors):\n        i += 1\n        if colors[i]!= patterns[i-1]:\n            return False\n    return True\n    \ndef get_all_patterns(patterns):\n    '''\n    Return a list of all the possible patterns in the given pattern array.\n    '''\n    all_patterns = []\n    for pattern in patterns:\n        if not is_samepatterns(pattern, patterns):\n            all_patterns.append(pattern)\n    return all_patterns\n    \ndef get_patterns(filename):\n    '''\n    Write a function that reads a given pattern file and returns all the patterns in the file.\n    '''\n    f = open(filename, 'r')\n    pattern_array = []\n    for line in f:\n        pattern_array.append(line[:-1])\n    f.close()\n    return pattern_array\n        \ndef get_patterns_only_one_color(patterns, colors):\n    '''\n    Write a function that gets all the patterns that have the same color in the given pattern array.\n    '''\n    patterns_with_color = []\n    for pattern in patterns:\n        if pattern[0] in colors:\n            patterns_with_color.append(pattern)\n    return patterns_with_color\n        \ndef main():\n    print(\"Hello, this program reads a given pattern file and returns all the patterns in it\")\n    print(\"a) How many patterns do you want to read?\")\n    pattern_count = input()\n    patterns = get_patterns(pattern_count)\n    colors = ['red', 'green', 'blue', 'purple']\n    patterns_with_colors = get_patterns_only_one_color(patterns, colors)\n    print(\"b) A pattern you want to see from the file is:\")\n    print(patterns_with_colors)\n    \n    print(\"c) What is the pattern that is present in the file?\")\n    print(\"a) If the pattern is present in the file it will be printed\")\n    print(\"a) If the pattern does not exist it will not be printed\")\n    pattern = input()\n    if pattern in patterns:\n        print(\"c) What color do you want to see the pattern in?\")\n        color = input()\n        print(\"c) The pattern will be printed in this color\")\n        print(\"c) The color does not exist\")\n        if color in colors:\n            print(\"c) Here is the pattern\")\n            print(patterns[patterns.index(pattern)])\n    else:\n        print(\"c) Please select a color and the pattern you want to see will be printed\")\n        color = input()\n        print(\"c) The pattern does not exist\")\n        print(\"c) Here is the pattern\")\n        print(patterns[patterns.index(pattern)])\n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # code goes here\n    \n    # code goes here\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    n = len(colors)\n    m = len(patterns)\n    \n    for i in range(0, m):\n        \n        # Find the position of the pattern\n        pattern_index = patterns[i] - 1\n        \n        # Check if the pattern is same as the pattern of color\n        if patterns[pattern_index] == colors[i]:\n            # print(\"Same\")\n            return True\n        else:\n            # print(\"Not Same\")\n            return False\n    \n    # print(\"Not Matching\")\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(colors)):\n        if patterns[i][0] == colors[i]:\n            if patterns[i][1]!= patterns[i][2]:\n                return False\n    return True\n    \ndef rotate(image, pattern):\n    '''\n    write a function to rotate a pattern in an image.\n    '''\n    rotated_image = [[0 for i in range(len(image[0]))] for j in range(len(image))]\n    for i in range(len(image)):\n        for j in range(len(image[0])):\n            rotated_image[i][j] = image[i][j]\n    for i in range(len(pattern)):\n        pattern[i][0] = image[i][j]\n        pattern[i][2] = image[i][j]\n        pattern[i][1] = image[i][j]\n        pattern[i][3] = image[i][j]\n    return rotated_image\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    size = len(patterns)\n    colors_set = set(colors)\n    for i in range(size):\n        c_set = set(patterns[i][0])\n        if c_set.issubset(colors_set):\n            if colors.index(colors[i])!= patterns[i][1]:\n                return False\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (colors is None):\n        print (\"Valid input : None\")\n        return False\n    elif (len(colors) == 0):\n        print (\"Valid input : None\")\n        return False\n    elif (len(colors) == 1):\n        print (\"Valid input : None\")\n        return False\n    elif (colors.count(colors[0]) == len(colors)):\n        print (\"Valid input : None\")\n        return False\n    elif (patterns.count(patterns[0]) == len(patterns)):\n        print (\"Valid input : None\")\n        return False\n    elif (colors.index(colors[0]) > patterns.index(patterns[0])):\n        print (\"Valid input : False\")\n        return False\n    else:\n        print (\"Valid input : True\")\n        return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if(pattern[0]!=colors[0]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #create variables\n    pattern_dic = {}\n    for i in range(len(patterns)):\n        pattern_dic[patterns[i]] = i\n    #calculate the pattern matching\n    for color in colors:\n        if color in pattern_dic:\n            if pattern_dic[color] == patterns[0]:\n                return False\n            else:\n                pattern_dic[color] -= 1\n                patterns.remove(patterns[pattern_dic[color]])\n        else:\n            pattern_dic[color] = patterns[0]\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # create a new list of the size of the patterns\n    new_list = [patterns[j][0] for j in range(len(patterns))]\n    # create a new list of the size of the colors\n    new_colors = [patterns[j][1] for j in range(len(patterns))]\n    # compare the new list and colors\n    return new_list == colors and new_colors == new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    i = 0\n    while i < len(test_list):\n        num_list = []\n        for element in test_list[i]:\n            if element % K == 0:\n                num_list.append(element)\n        if len(num_list) == K:\n            return num_list\n        i += 1\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if len(test_list) == 0:\n        return 0\n    n = len(test_list)\n    for i in range(n):\n        if test_list[i][0] % K!= 0:\n            continue\n        for j in range(i+1, n):\n            if test_list[j][0] % K == 0:\n                return test_list[i][1], test_list[j][1]\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_tuples = []\n    for tuple_ in test_list:\n        result_tuples += [tuple_ for tuple_ in tuple_ if tuple_ % K == 0]\n    return result_tuples\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # First check if we have duplicate tuples\n    if len(test_list) < K:\n        return []\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    # create a set of tuples to return\n    tuples = set()\n    \n    # iterate through all tuples and count elements\n    for i in test_list:\n        if all(i[j] % K == 0 for j in range(0,len(i))):\n            tuples.add(tuple(i))\n            \n    return tuples\n    \ndef test():\n    test_list = [1,3,4,5,7,8,6,4,5]\n    \n    # Find tuples with all elements divisible by 7 from the given list of tuples\n    tuples = find_tuples(test_list, 7)\n    \n    # print tuples\n    print(tuples)\n    \n    # Find tuples with all elements divisible by 7 from the given list of tuples\n    tuples = find_tuples(test_list, 7)\n    \n    # print tuples\n    print(tuples)\n    \n    \nif __name__ == '__main__':\n    test("
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Write your code here\n    i = 0\n    found = []\n    while i < len(test_list):\n        for j in range(len(test_list[i])):\n            if test_list[i][j]%K==0:\n                found.append(test_list[i])\n        i+=1\n    return found\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    print(\"\\nfind_tuples()\")\n    # create a list of tuples\n    tuple_list = []\n    for tuple in test_list:\n        # set new tuple to list\n        new_tuple = tuple\n        # remove the new tuple from list\n        new_tuple = tuple[0:-1]\n        # check if tuple is divisible by k\n        if tuple[-1] % K == 0:\n            # add new tuple to list\n            new_tuple = tuple[0:-1] + (tuple[-1] // K,)\n            # remove the new tuple from list\n            new_tuple = tuple[0:-1] + tuple[-1:]\n            # add tuple to list\n            tuple_list.append(tuple)\n    # return list of tuples\n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    counter = 0\n    result = []\n    \n    for tuple in test_list:\n        if tuple[1]%K == 0:\n            counter = counter + 1\n            result.append(tuple)\n    return result\n    \ndef find_num_different(test_list, K):\n    '''\n    Write a function that finds the number of different elements in a given list of tuples.\n    '''\n    \n    different = 0\n    result = []\n    \n    for tuple in test_list:\n        if tuple[1]%K!= 0:\n            different = different + 1\n            result.append(tuple)\n    return different\n    \ndef check_all_tests():\n    '''\n    Write a function that checks whether the list of tuples passed to it contains all of the tests required.\n    '''\n    \n    tests = [\n        ([1,2,3],),\n        ([3,1,2],),\n        ([2,3,4],),\n        ([4,2,3,1],),\n        ([3,1,1,3,2,2,2,3,1,1,2,2,3],),\n        ([1,3,2,3],),\n        ([3,2,3,4,2,1,2],),\n    ]\n    \n    for tuple in tests:\n        print(tuple[0])\n        print(find_tuples(tuple[0], K = 3))\n        print(find_tuples(tuple[1], K = 3))\n        print(find_num_different(tuple[0], K = 3))\n        print(find_num_different(tuple[1], K = 3))\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if len(test_list) == 0:\n        return []\n    else:\n        # Tuple = (x,y)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z,w,x,y,z)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z,w,x,y,z)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w,x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z)\n        # Tuple = (x,y,z,w)\n        # Tuple = (x,y,z,w,x,y,z,w)\n        # Tuple = (x,y,z,w)\n        # Tuple = "
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    print(\"\\nFind tuples which have all elements divisible by\", K)\n    counter = 0\n    result = []\n    for tuple in test_list:\n        if tuple[0] % K == 0:\n            result.append(tuple)\n            counter += 1\n            if counter == K:\n                break\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    def is_divisible(n):\n        if n % 11 == 0:\n            return True\n        else:\n            return False\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef check_Div_11(n):\n    '''\n    Check whether a number is divisible by 11.\n    '''\n    if is_Divisible(n):\n        print(f'{n} is divisible by 11.')\n    else:\n        print(f'{n} is not divisible by 11.')\n    \n    "
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        print('Yes, it is divisible by 11')\n    else:\n        print('No, it is not divisible by 11')\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print(\"{} is divisible by 11\".format(n))\n    else: \n        print(\"{} is not divisible by 11\".format(n))\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    is_11 = True\n    is_divisible = False\n    for i in range(2,n):\n        if n % i == 0:\n            is_divisible = False\n            break\n        elif n % i == 1:\n            is_divisible = True\n            break\n        else:\n            is_divisible = False\n    return is_divisible\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 1:\n        return True\n    elif n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 10 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Your code here\n    if n == 0 or n == 1:\n        return True\n    elif n%11 == 0:\n        return False\n    else:\n        return False\n    \ndef is_Perfect(n): \n    '''\n    Write a python function to check whether the number is a perfect number.\n    '''\n    # Your code here\n    if n%10 == 0:\n        return True\n    elif n % 10 == 1:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n % 11 == 0: \n        return True \n    else: \n        return False \n        \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s=s.replace(\" \",\"\")\n    s=s.replace(\"\\n\",\"\")\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n    \ndef last_word(s): \n    '''\n    Write a python function to print the last word of the string.\n    '''\n    s=s.replace(\" \",\"\")\n    s=s.replace(\"\\n\",\"\")\n    if s[-1]=='e' or s[-1]=='E':\n        return s[-1]\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Your code here\n    \n    return len(s) % 2 == 0\n    \ndef word_index(s):\n    '''\n    Write a python function to return the index of the word in the list of words.\n    '''\n    # Your code here\n    \n    return s.index('W')\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len_list=[]\n    for char in s:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            len_list.append(len(char))\n    if len(s)%2==0:\n        return(len(s)//2)\n    else:\n        return('Lenght not odd.')\n    \nprint(word_len('hello'))\nprint(word_len('guru')"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #Variables\n    word = ''\n    for letter in s:\n        if letter!= \" \":\n            word += letter\n        else:\n            word = word.lower()\n            \n    #check if the length of the word is odd or even\n    if (len(word) % 2 == 1):\n        return 'Odd'\n    else:\n        return 'Even'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = []\n    if type(s) == str:\n        # if string, check whether the length is odd\n        # if not, print an error message\n        if len(s) % 2 == 1:\n            return \"Error: the length of the word should be an odd number\"\n        # get the word, clean it and make it a list\n        for i in range(len(s)):\n            word_list.append(s[i].upper())\n        # check the len of the list\n        # if the length is odd, print an error message\n        if len(word_list) % 2 == 1:\n            return \"Error: the length of the word should be an odd number\"\n        # return the len of the list\n        return len(word_list)\n    else:\n        # if not, print an error message\n        return \"Error: the input format is wrong\"\n    \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1: \n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 3:\n        return n\n    else:\n        if n == 3:\n            return 5\n        else:\n            if n % 3 == 0:\n                return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n            elif n % 3 == 1:\n                return tetrahedral_number(n-1) + tetrahedral_number(n-2)\n            elif n % 3 == 2:\n                return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n_list = []\n    if n % 2 == 0:\n        n_list.append(n // 2)\n        n_list.append(n // 4)\n        n_list.append(n // 8)\n        n_list.append(n // 16)\n    else:\n        n_list.append(n // 4)\n        n_list.append(n // 2)\n        n_list.append(n // 8)\n        n_list.append(n // 16)\n        n_list.append(n // 32)\n    for n_list in n_list:\n        if tetrahedral_number(n_list) == n:\n            return n_list\n    return -1\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n == 46:\n        return 45\n    if n == 47:\n        return 46\n    if n == 48:\n        return 47\n    if n == 49:\n        return 48\n    if n == 50:\n        return 49\n    if n == 51:\n        return 50\n    if n == 52:\n        return 51\n    if n == 53:\n        return 52\n    if n == 54:\n        return 53\n    if n == 55:\n        return 54\n    if n == 56:\n        return 55\n    if n == 57:\n        return 56\n    if n == 58:\n        return 57\n    if n == 59:\n        return 58\n    if n == 60:\n        return 59\n    if n == 61:\n        return 60\n    if n == 62:\n        return 61\n    if n == 63:\n        return 62\n    if n == 64:\n        return 63\n    if n == 65:\n        return 64\n    if n == 66:\n        return 65\n    if n == 67:\n        return 66\n    if n == 68:\n        return 67\n    if n == 69:\n        return 68\n    if n == 70:\n        return 69\n    if n == 71:\n        return 70\n    if n == 72:\n        return 71\n    if n == 73:\n        return 72\n    if n == 74:\n        return 73\n    if n == 75:\n        return 74\n    if n == 76:\n        return 75\n    if n == 77:\n        return 76\n    if n == 78:\n        return 77\n    if n == 79:\n        return 78\n    if n == 80:\n        return 79\n    if n == 81:\n        return 80\n    if n == 82:\n        return 81\n    if n == 83:\n        return 82\n    if n == 84:\n        return 83\n    if n == 85:\n        return 84\n    if n == 86:\n        return 85\n    if n == 87:\n        return 86\n    if n == 88:\n        return 87\n    if n == 89:\n        return 88\n    if n == 90:\n        return 89\n    if n == 91:\n        return 90\n    if n == 92:\n        return 91\n    if n == 93:\n        return 92\n    if n == 94:\n        return 93\n    if n == 95:\n        return 94\n    if n == 96:\n        return 95\n    if n == 97:\n        return 96\n    if n == 98:\n        return 97\n    if n == 99:\n        return 98\n    if n == 100:\n        return 99\n    if n == 101:\n        return 100\n    if n == 102:\n        return 101\n    if n == 103:\n        return 102\n    if n == 104:\n        return 103\n    if n == 105:\n        return 104\n    if n == 106:\n        return 105\n    if n == 107:\n        return 106\n    if n == 108:\n        return 107\n    if n == 109:\n        return 108\n    if n == 110:\n        return 109\n    if n == 111:\n        return 110\n    if n == 112:\n        return 111\n    if n == 113:\n        return 112\n    if n == 114:\n        return 113\n    if n == 115:\n        return 114\n    if n == 116:\n        return 115\n    if n == 117:\n        return 116\n    if n == 118:\n        return 117\n    if n == 119:\n        return 118\n    if n == 120:\n        return 119\n    if n == 121:\n        return 120\n    if n == 122:\n        return 121\n    if n == 123:\n        return 122\n    if n == 124:\n        return 123\n    if n == 125:\n        return 124\n    if n == 126:\n        return 125\n    if n == 127:\n        return 126\n    if n == 128:\n        return 127\n    if n == 129:\n        return 128\n    if n == 130:\n        return 129\n    if n == 131:\n        return 130\n    if n == 132:\n        return 131\n    if n == 133:\n        return 132\n    if n == 134:\n        return 133\n    if n == 135:\n        return 134\n    if n == 136:\n        return 135\n    if n == 137:\n        return 136\n    if n == 138:\n        return 137\n    if n == 139:\n        return 138\n    if n == 140:\n        return 139\n    if n == 141:\n        return 140\n    if n == 142:\n        return 141\n    if n == 143:\n        return 142\n    if n == 144:\n        return 143\n    if n == 145:\n        return 144\n    if n == 146:\n        return 145\n    if n == 147:\n        return 146\n    if n == 148:\n        return 147\n    if n == 149:\n        return 148\n    if n == 150:\n        return 149\n    if n == 151:\n        return 150\n    if n == 152:\n        return 151\n    if n == 153:\n        return 152\n    if n == 154:\n        return 153\n    if n == 155:\n        return 154\n    if n == 156:\n        return 155\n    if n == 157:\n        return 156\n    if n == 158:\n        return 157\n    if n == 159:\n        return 158\n    if n == 160:\n        return 159\n    if n == 161:\n        return 160\n    if n == 162:\n        return 161\n    if n == 163:\n        return 162\n    if n == 164:\n        return 163\n    if n == 165:\n        return 164\n    if n == 166:\n        return 165\n    if n == 167:\n        return 166\n    if n == 168:\n        return 167\n    if n == 169:\n        return 168\n    if n == 170:\n        return 169\n    if n == 171:\n        return 170\n    if n == 172:\n        return 171\n    if n == 173:\n        return 172\n    if n == 174:\n        return 173\n    if n == 175:\n        return 174\n    if n == 176:\n        return 175\n    if n == 177:\n        return 176\n    if n == 178:\n        return 177\n    if n == 179:\n        return 178\n    if n == 180:\n        return 179\n    if n == 181:\n        return 180\n    if n == 182:\n        return 181\n    if n == 183:\n        return 182\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    elif n == 4: \n        return 1\n    elif n == 5: \n        return 1\n    elif n == 6: \n        return 1\n    elif n == 7: \n        return 1\n    elif n == 8: \n        return 1\n    elif n == 9: \n        return 1\n    elif n == 10: \n        return 1\n    elif n == 11: \n        return 1\n    elif n == 12: \n        return 1\n    elif n == 13: \n        return 1\n    elif n == 14: \n        return 1\n    elif n == 15: \n        return 1\n    elif n == 16: \n        return 1\n    elif n == 17: \n        return 1\n    elif n == 18: \n        return 1\n    elif n == 19: \n        return 1\n    elif n == 20: \n        return 1\n    elif n == 21: \n        return 1\n    elif n == 22: \n        return 1\n    elif n == 23: \n        return 1\n    elif n == 24: \n        return 1\n    elif n == 25: \n        return 1\n    elif n == 26: \n        return 1\n    elif n == 27: \n        return 1\n    elif n == 28: \n        return 1\n    elif n == 29: \n        return 1\n    elif n == 30: \n        return 1\n    elif n == 31: \n        return 1\n    elif n == 32: \n        return 1\n    elif n == 33: \n        return 1\n    elif n == 34: \n        return 1\n    elif n == 35: \n        return 1\n    elif n == 36: \n        return 1\n    elif n == 37: \n        return 1\n    elif n == 38: \n        return 1\n    elif n == 39: \n        return 1\n    elif n == 40: \n        return 1\n    elif n == 41: \n        return 1\n    elif n == 42: \n        return 1\n    elif n == 43: \n        return 1\n    elif n == 44: \n        return 1\n    elif n == 45: \n        return 1\n    elif n == 46: \n        return 1\n    elif n == 47: \n        return 1\n    elif n == 48: \n        return 1\n    elif n == 49: \n        return 1\n    elif n == 50: \n        return 1\n    elif n == 51: \n        return 1\n    elif n == 52: \n        return 1\n    elif n == 53: \n        return 1\n    elif n == 54: \n        return 1\n    elif n == 55: \n        return 1\n    elif n == 56: \n        return 1\n    elif n == 57: \n        return 1\n    elif n == 58: \n        return 1\n    elif n == 59: \n        return 1\n    elif n == 60: \n        return 1\n    elif n == 61: \n        return 1\n    elif n == 62: \n        return 1\n    elif n == 63: \n        return 1\n    elif n == 64: \n        return 1\n    elif n == 65: \n        return 1\n    elif n == 66: \n        return 1\n    elif n == 67: \n        return 1\n    elif n == 68: \n        return 1\n    elif n == 69: \n        return 1\n    elif n == 70: \n        return 1\n    elif n == 71: \n        return 1\n    elif n == 72: \n        return 1\n    elif n == 73: \n        return 1\n    elif n == 74: \n        return 1\n    elif n == 75: \n        return 1\n    elif n == 76: \n        return 1\n    elif n == 77: \n        return 1\n    elif n == 78: \n        return 1\n    elif n == 79: \n        return 1\n    elif n == 80: \n        return 1\n    elif n == 81: \n        return 1\n    elif n == 82: \n        return 1\n    elif n == 83: \n        return 1\n    elif n == 84: \n        return 1\n    elif n == 85: \n        return 1\n    elif n == 86: \n        return 1\n    elif n == 87: \n        return 1\n    elif n == 88: \n        return 1\n    elif n == 89: \n        return 1\n    elif n == 90: \n        return 1\n    elif n == 91: \n        return 1\n    elif n == 92: \n        return 1\n    elif n == 93: \n        return 1\n    elif n == 94: \n        return 1\n    elif n == 95: \n        return 1\n    elif n == 96: \n        return 1\n    elif n == 97: \n        return 1\n    elif n == 98: \n        return 1\n    elif n == 99: \n        return 1\n    elif n == 100: \n        return 1\n    elif n == 101: \n        return 1\n    elif n == 102: \n        return 1\n    elif n == 103: \n        return 1\n    elif n == 104: \n        return 1\n    elif n == 105: \n        return 1\n    elif n == 106: \n        return 1\n    elif n == 107: \n        return 1\n    elif n == 108: \n        return 1\n    elif n == 109: \n        return 1\n    elif n == 110: \n        return 1\n    elif n == 111: \n        return 1\n    elif n == 112: \n        return 1\n    elif n == 113: \n        return 1\n    elif n == 114: \n        return 1\n    elif n == 115: \n        return 1\n    elif n == 116: \n        return 1\n    elif n == 117: \n        return 1\n    elif n == 118: \n        return 1\n    elif n == 119: \n        return 1\n    elif n == 120: \n        return 1\n    elif n == 121: \n        return 1\n    elif n == 122: \n        return 1\n    elif n == 123: \n        return 1\n    elif n == 124: \n        return 1\n    elif n == 125: \n        return 1\n    elif n == 126: \n        return 1\n    elif n == 127: \n        return 1\n    elif n == 128: \n        return 1\n    elif n == 129: \n        return 1\n    elif n == 130: \n        return 1\n    elif n == 131: \n        return 1\n    elif n == 132: \n        return 1\n    elif n == 133: \n        return 1\n    elif n == 134: \n        return 1\n    elif n == 135: \n        return 1\n    elif n == 136: \n        return 1\n    elif n == 137: \n        return 1\n    elif n == 138: \n        return 1\n    elif n == 139: \n        return 1\n    elif n == 140: \n        return 1\n    elif n == 141: \n        return 1\n    elif n == 142: \n        return 1\n    elif n == 143: \n        return 1\n    elif n == 144: \n        return 1\n    elif n == 145: \n        return 1\n    elif n == 146: \n        return 1\n    elif n == 147: \n        return 1\n    elif n == 148: \n        return 1\n    elif n == 149: \n        return 1\n    elif n == 150: \n        return 1\n    elif n == 151: \n        return 1\n    elif n == 152: \n        return 1\n    elif n == 153: \n        return 1\n    elif n == 154: \n        return 1"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1 or n == 2: return 1\n    if n % 2 == 0: return tetrahedral_number(n-1)\n    else: return 2*(tetrahedral_number(n-1)/2)\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 1\n    while (n > 0):\n        num *= 4\n        n -= 1\n    return num\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # your code goes here\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        for i in range(1, n):\n            if (i + 1) % n == 0:\n                continue\n            elif (i + 2) % n == 0:\n                continue\n            else:\n                return i\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    lst = list(range(1, n + 1))\n    for i in range(n - 1):\n        lst[i] = (lst[i] - 1) + lst[i + 1]\n    return lst[n - 1]\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n in range(1, 11):\n        return n \n    elif n in range(11, 20):\n        return n + tetrahedral_number(n-1)\n    elif n in range(21, 30):\n        return n + tetrahedral_number(n-2)\n    elif n in range(31, 40):\n        return n + tetrahedral_number(n-3)\n    elif n in range(41, 50):\n        return n + tetrahedral_number(n-4)\n    elif n in range(51, 60):\n        return n + tetrahedral_number(n-5)\n    elif n in range(61, 70):\n        return n + tetrahedral_number(n-6)\n    elif n in range(71, 80):\n        return n + tetrahedral_number(n-7)\n    elif n in range(81, 90):\n        return n + tetrahedral_number(n-8)\n    elif n in range(91, 100):\n        return n + tetrahedral_number(n-9)\n    else:\n        print(\"error\")\n        \n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # TODO: Create your volume calculation function here\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the area of the sphere\n    area = (4/3) * (r*r)*math.pi\n    return area\ndef volume_cylinder(r,h):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    # Calculate the area of the cylinder\n    area = (r*r)*math.pi\n    volume = (4/3)*(h*h)/3\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function that finds the volume of a cone.\n    '''\n    # Calculate the area of the cone\n    area = (4*math.pi*(r**2))/3\n    volume = (2*h*(3*math.pi)/3)\n    return volume\ndef volume_cube(r):\n    '''\n    Write a function that finds the volume of a cube.\n    '''\n    # Calculate the area of the cube\n    area = (4/3)*(r**3)\n    volume = (4*math.pi)*(r*r)*math.sqrt(3)\n    return volume\ndef volume_cylinder_2d(r,h):\n    '''\n    Write a function that calculates the volume of a cylinder in 2D.\n    '''\n    # Calculate the area of the cylinder\n    area = (r*r)*math.pi\n    volume = (4/3)*(h*h)/3\n    return volume\ndef volume_cone_2d(r,h):\n    '''\n    Write a function that calculates the volume of a cone in 2D.\n    '''\n    # Calculate the area of the cone\n    area = (4*math.pi*(r**2))/3\n    volume = (2*h*(3*math.pi)/3)\n    return volume\ndef volume_cube_2d(r):\n    '''\n    Write a function that calculates the volume of a cube in 2D.\n    '''\n    # Calculate the area of the cube\n    area = (r**3)\n    volume = (4*math.pi*(r*r)*math.sqrt(3))\n    return volume\ndef volume_cylinder_3d(r,h):\n    '''\n    Write a function that calculates the volume of a cylinder in 3D.\n    '''\n    # Calculate the area of the cylinder\n    area = (r*r)*math.pi\n    volume = (4/3)*(h*h)/3\n    return volume\ndef volume_cone_3d(r,h):\n    '''\n    Write a function that calculates the volume of a cone in 3D.\n    '''\n    # Calculate the area of the cone\n    area = (4*math.pi*(r**2))/3\n    volume = (2*h*(3*math.pi)/3)\n    return volume\ndef volume_cube_3d(r):\n    '''\n    Write a function that calculates the volume of a cube in 3D.\n    '''\n    # Calculate the area of the cube\n    area = (r**3)\n    volume = (4*math.pi*(r*r)*math.sqrt(3))\n    return volume\ndef volume_cylinder_cylinder(r,h,p):\n    '''\n    Write a function that calculates the volume of a cylinder and a cylinder.\n    '''\n    # Calculate the area of the cylinder\n    area = (4/3)*(r*r)*math.pi\n    volume = (4/3)*(h*h)/3\n    # Calculate the area of the sphere\n    area_sphere = (r*r)/(4/3)\n    # Calculate the area of the cylinder\n    area_cylinder = (4/3)*(h*h)/3\n    # Calculate the area of the cone\n    area_cone = (4/3)*(r*r)/3\n    # Calculate the area of the cube\n    area_cube = (r*r)*math.sqrt(3)\n    # Calculate the volume of the cylinder\n    volume_cylinder = ((area_cylinder/area)*(area_cylinder/area)*(area_cylinder/area))**(1/3)\n    # Calculate the volume of the cone\n    volume_cone = ((area_cone/area)*(area_cone/area)*(area_cone/area))**(1/3)\n    # Calculate the volume of the sphere\n    volume_sphere = ((area_sphere/area)*(area_sphere/area)*(area_sphere/area))**(1/3)\n    # Calculate the volume of the cubo\n    volume_cube = (area_cube/area)*(area_cube/area)*(area_cube/area)**(1/3)\n    # Calculate the volume of the cube and cylinder\n    volume_cylinder_3d = volume_cylinder + volume_cylinder_2d(r,h) + volume_cylinder_2d(r,h) + volume_cylinder_2d(r,h)\n    volume_cone_3d = volume_cone + volume_cone_2d(r,h) + volume_cone_2d(r,h) + volume_cone_2d(r,h) + volume_cone_2d(r,h)\n    # Calculate the volume of the sphere and cylinder\n    volume_sphere_3d = volume_sphere + volume_sphere_2d(r,h) + volume_sphere_2d(r,h) + volume_sphere_2d(r,h)\n    # Calculate the volume of the sphere and cone\n    volume_sphere_cone_3d = volume_sphere_3d + volume_sphere_cone_2d(r,h) + volume_sphere_cone_2d(r,h) + volume_sphere_cone_2d(r,h)\n    volume_cube_3d = volume_cube + volume_cube_2d(r) + volume_cube_2d(r) + volume_cube_2d(r) + volume_cube_2d(r)\n    # Calculate the volume of the cylinder and cone\n    volume_cylinder_cylinder_3d = volume_cylinder_cylinder + volume_cylinder_cylinder_2d(r,h) + volume_cylinder_cylinder_2d(r,h) + volume_cylinder_cylinder_2d(r,h)\n    # Calculate the volume of the cylinder and sphere\n    volume_cylinder_cylinder_sphere_3d = volume_cylinder_cylinder_sphere + volume_cylinder_cylinder_sphere_2d(r,h) + volume_cylinder_cylinder_sphere_2d(r,h) + volume_cylinder_cylinder_sphere_2d(r,h)\n    # Calculate the volume of the cone and sphere\n    volume_cone_cone_sphere_3d = volume_cone_cone_sphere + volume_cone_cone_sphere_2d(r,h) + volume_cone_cone_sphere_2d(r,h) + volume_cone_cone_sphere_2d(r,h)\n    # Calculate the volume of the cone and cylinder\n    volume_cone_cone_cylinder_3d = volume_cone_cone_cylinder + volume_cone_cone_cylinder_2d(r,h) + volume_cone_cone_cylinder_2d(r,h) + volume_cone_cone_cylinder_2d(r,h)\n    # Calculate the volume of the sphere and cylinder\n    volume_sphere_cylinder_sphere_3d = volume_sphere_cylinder_sphere + volume_sphere_cylinder_sphere_2d(r,h) + volume_sphere_cylinder_sphere_2d(r,h) + volume_sphere_cylinder_sphere_2d(r,h)\n    # Calculate the volume of the sphere and cone\n    volume_sphere_cone_sphere_3d = volume_sphere_cone_sphere + volume_sphere_cone_sphere_2d(r,h) + volume_sphere_cone_sphere_2d(r,h) + volume_sphere_cone_sphere_2d(r,h)\n    # Calculate the volume of the cube and cylinder\n    volume_cube_cylinder_3d = volume_cube_cylinder + volume_cube"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    s = math.pi * (r**2)\n    print(\"Volume of sphere is \", s)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 3.14 * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (math.pi*(r**3))\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    print('volume of sphere with radius ',r,'is ', volume)\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # volume = 4*pi*r**3\n    volume = 4*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(math.pow(r,3))\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    m=1\n    for i in range(1,r+1):\n        m=m*(1-(r**2))\n        print('volume of sphere of r = '+str(i)+' is '+str(m))\n    return m\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # TODO: Write your code here.\n    print(r*3.14159*(r**3))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.upper()\n    strr = strr.replace(\" \", \"\")\n    strr = strr.replace(\"\\n\", \"\")\n    strr = strr.replace(\"\\t\", \"\")\n    count = 0\n    for i in range(len(strr)):\n        if(ord(strr[i])>=97 and ord(strr[i])<=122):\n            count = count + 1\n    print(count)\n    return count\ndef get_Arith(strr):\n    '''\n    Write a python function to find the average of the character in the given string.\n    '''\n    return round(float(sum(strr)/len(strr)))\ndef get_Dict(strr):\n    '''\n    Write a python function to find the characters that occur more than the given number of times.\n    '''\n    res = []\n    for i in strr:\n        if(i in res):\n            continue\n        else:\n            res.append(i)\n    return res\ndef get_Hash(strr):\n    '''\n    Write a python function to find the highest frequency characters of a given string.\n    '''\n    res = []\n    for i in strr:\n        res.append(get_Char(i))\n    return res\ndef get_Min(strr):\n    '''\n    Write a python function to find the smallest frequency characters of a given string.\n    '''\n    res = []\n    for i in strr:\n        res.append(get_Char(i))\n    return min(res)\ndef get_Max(strr):\n    '''\n    Write a python function to find the largest frequency characters of a given string.\n    '''\n    res = []\n    for i in strr:\n        res.append(get_Char(i))\n    return max(res)\ndef get_R(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return sum(strr)\ndef get_S(strr):\n    '''\n    Write a python function to find the average of characters in a given string.\n    '''\n    return round(float(get_Arith(strr)/get_R(strr)), 2)\ndef get_S_Dict(strr):\n    '''\n    Write a python function to find the average of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_S(strr)), 2)\ndef get_S_Hash(strr):\n    '''\n    Write a python function to find the average of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_S(strr)), 2)\ndef get_S_Min(strr):\n    '''\n    Write a python function to find the smallest frequency characters of a given string.\n    '''\n    return round(float(get_Min(strr)), 2)\ndef get_S_Max(strr):\n    '''\n    Write a python function to find the largest frequency characters of a given string.\n    '''\n    return round(float(get_Max(strr)), 2)\ndef get_S_R(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_R(strr)), 2)\ndef get_S_R_Dict(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_R(strr)), 2)\ndef get_S_R_Hash(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_S(strr)), 2)\ndef get_S_S(strr):\n    '''\n    Write a python function to find the average of characters in a given string.\n    '''\n    return round(float(get_S(strr)/get_S(strr)), 2)\ndef get_S_Dict_Hash(strr):\n    '''\n    Write a python function to find the average of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_S(strr)), 2)\ndef get_S_Hash_Hash(strr):\n    '''\n    Write a python function to find the average of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_S_Hash_Hash_R(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_R(strr)), 2)\ndef get_S_Hash_Hash_Dict(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_S_Hash_Hash_Dict_Hash(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_S_Hash_Hash_R_Dict(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_S(strr)), 2)\ndef get_S_Hash_Hash_Dict_Hash_R(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_S_Hash_Hash_R_Dict_Hash(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_S_Hash_Hash_Dict_Hash_R_Dict(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_Hash_Hash(strr):\n    '''\n    Write a python function to find the average of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_Hash_Hash_Hash(strr):\n    '''\n    Write a python function to find the average of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_Hash_Hash_Hash_R(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_Hash_Hash_Hash_R_Dict(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_Hash_Hash_Hash_Dict(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_Hash_Hash_Hash_R_Dict_Hash(strr):\n    '''\n    Write a python function to find the sum of characters in a given string.\n    '''\n    return round(float(get_Hash(strr)/get_Hash(strr)), 2)\ndef get_Hash_Hash_Hash_Dict_Hash_R_Dict(strr):\n    '''\n    Write a python function to find th"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = []\n    for char in strr:\n        char_list.append(ord(char))\n    return char_list[char_list % 26]\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = strr.lower()\n    res = []\n    for c in strr:\n        res.append(ord(c) % 26)\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(int(strr, 2) % 26 + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_set = set(strr)\n    \n    sum = 0\n    \n    for i in char_set:\n        sum += ord(i) % 26\n        \n    return sum % 26\n    \ndef get_sum(strr):\n    '''\n    Write a python function to find the sum of the characters in a given string.\n    '''\n    sum = 0\n    \n    for i in strr:\n        sum += get_Char(i)\n    \n    return sum % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = ''\n    for i in strr:\n        res = res + chr(ord(i) % 26 + ord('A'))\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    cnt = 0\n    for c in range(len(strr)):\n        cnt += ord(strr[c]) % 26\n    return cnt % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(int(strr, base=65))\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # code goes here\n    return\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ch_list = list(strr)\n    for i in range(0, len(ch_list)):\n        if ch_list[i].isdigit() == True:\n            ch_list[i] = chr(ord(ch_list[i]) + int(ch_list[i]))\n    return ''.join(ch_list)"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    \n    return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # n: start from 0 and go till the number of the newman sequence\n    for i in range(0, n+1): \n        print(i)\n    \nsequence(6) \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 0\n    while n > i:\n        yield n\n        i += 1\n    # num = yield \n    # x = yield\n    # return num\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    m = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n    nums = []\n    for i in range(n):\n        nums.append(m[i])\n    return nums\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    numbers = [1,3,5,7,9]\n    count = 0\n    idx = 0\n    for i in numbers:\n        count += idx\n        idx += 1\n        if count == n:\n            return i\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Write your code here.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    else:\n        return sequence(n - 1) + sequence(n - 2) + sequence(n - 3) + sequence(n - 4) + sequence(n - 5)"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Write your code here.\n    n = str(n)\n    result = []\n    index = 0\n    while index < len(n) - 1:\n        if int(n[index]) + int(n[index + 1]) - int(n[index + 2]) == 0:\n            index += 2\n        else:\n            result.append(n[index] + n[index + 1] + n[index + 2])\n            index += 1\n    result.append(n[-1])\n    return result"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n = n + 1\n    digits = [int(i) for i in str(n)]\n    for i in range(len(digits)):\n        if i == len(digits) - 1: \n            digits[i] = 0\n        else:\n            digits[i] = digits[i + 1]\n    return digits[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i, n = 0, 1\n    while n < n: \n        i, n = i + 1, n + 1\n    return n - i\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # n = int(n)\n    \n    # numbers = []\n    # for i in range(0, n+1):\n    #     numbers.append(i)\n    # return numbers\n    \n    # If n is not a number, raise an exception\n    # if not isinstance(n, int) or n < 0:\n    #     raise TypeError(\"Only integers and 0 are valid inputs.\")\n    \n    # If n is 0, just return 0.\n    # if n == 0:\n    #     return 0\n    \n    # This is the conversion to decimal.\n    # The decimal value is the number of digits after the decimal point.\n    decimal = int(n % 10)\n    \n    # The decimal value is the number of digits after the point.\n    # The decimal value is multiplied by 10.\n    n = int(n / 10)\n    \n    # The decimal value is the number of digits before the point.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n.\n    # The decimal value is multiplied by 10.\n    # The decimal value is multiplied by 10.\n    # The decimal value is added by n+1.\n    "
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    x = (2*r-1)\n    return (4/3)*math.pi*x**3\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    x = (3*r-1)/2\n    return (8/5)*math.pi*x**3\ndef surfacearea_cuboid(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    x = (3*r1+3*r2+r3)/6\n    return (8/5)*math.pi*x**3\ndef surfacearea_cathedral(A,B,C,D):\n    '''\n    Write a function to find the surface area of a cathedral.\n    '''\n    return ((A*B*D)/(4*math.pi))\ndef surfacearea_tetrahedron(A,B,C,D):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return ((A*B*C*D)/(6*math.pi))\ndef area_tetrahedron(A,B,C,D):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return ((A*B*C)/(2*math.pi))\ndef surfacearea_hexagon(A,B,C,D):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return ((A*B*C*D)/(4*math.pi))\ndef area_hexagon(A,B,C,D):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return ((A*B*C*D)/(6*math.pi))\ndef surfacearea_octagon(A,B,C,D):\n    '''\n    Write a function to find the surface area of a octagon.\n    '''\n    return ((A*B*C*D)/(8*math.pi))\ndef area_octagon(A,B,C,D):\n    '''\n    Write a function to find the surface area of a octagon.\n    '''\n    return ((A*B*C*D)/(12*math.pi))\ndef area_square_face(A,B,C):\n    '''\n    Write a function to find the surface area of a square face.\n    '''\n    return ((A*B)/(2*math.pi))\ndef area_square_face(A,B,C):\n    '''\n    Write a function to find the surface area of a square face.\n    '''\n    return ((A*B)/(4*math.pi))\ndef surfacearea_triangle(A,B,C):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return ((A*B)/(3*math.pi))\ndef area_triangle(A,B,C):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return ((A*B)/(5*math.pi))\ndef surfacearea_hexa_triangle(A,B,C):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return ((A*B)/(3.5*math.pi))\ndef surfacearea_parallelogram(A,B,C):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return ((A*B)/(4*math.pi))\ndef area_parallelogram(A,B,C):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return ((A*B)/(2*math.pi))\ndef area_hexa_parallelogram(A,B,C):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return ((A*B)/(3.5*math.pi))\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi)*(r**3)\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (3*r**3-1)\ndef area_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return (3*r**3-1)*(4/5)\ndef surfacearea_cuboid(r1, r2, r3):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    return (3*r1+3*r2+r3)/6\ndef surfacearea_cathedral(A,B,C,D):\n    '''\n    Write a function to find the surface area of a cathedral.\n    '''\n    return ((A*B*D)/(4*math.pi))\ndef area_tetrahedron(A,B,C,D):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    return ((A*B*C*D)/(6*math.pi))\ndef surfacearea_hexagon(A,B,C,D):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return ((A*B*C*D)/(8*math.pi))\ndef area_hexagon(A,B,C,D):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return ((A*B*C*D)/(12*math.pi))\ndef surfacearea_octagon(A,B,C,D):\n    '''\n    Write a function to find the surface area of a octagon.\n    '''\n    return ((A*B*C*D)/(8*math.pi))\ndef surfacearea_octagon(A,B,C,D):\n    '''\n    Write a function to find the surface area of a octagon.\n    '''\n    return ((A*B*C*D)/(12*math.pi))\ndef surfacearea_square_face(A,B,C):\n    '''\n    Write a function to find the surface area of a square face.\n    '''\n    return ((A*B)/(2*math.pi))\ndef surfacearea_square_face(A,B,C):\n    '''\n    Write a function to find the surface area of a square face.\n    '''\n    return ((A*B)/(4*math.pi))\ndef surfacearea_triangle(A,B,C):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return ((A*B)/(3*math.pi))\ndef surfacearea_triangle(A,B,C):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return ((A*B)/(5*math.pi))\ndef surfacearea_hexa_triangle(A,B,C):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return ((A*B)/(3.5*math.pi))\ndef surfacearea_parallelogram(A,B,C):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return ((A*B)/(4*math.pi))\ndef area_parallelogram(A,B,C):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return ((A*B)/(2*math.pi))\ndef area_parallelogram(A,B,C):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return ((A*B)/(3.5*math.pi))\ndef surfac"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (math.pi * (r**3))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4 * math.pi * r**3)\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (h * math.pi * r**3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #return (4*r*math.pi)**2\n    return 4*r*math.pi*r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    area = pi * (1.0 - 2.0 * r * r) / 6.0\n    return area\ndef surfacearea_cube(r):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    pi = math.pi\n    area = pi * (1.0 - (r * r)) / 2.0\n    return area\ndef surfacearea_cylinder(radius, height):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = math.pi\n    area = pi * (1.0 - (radius * radius * (math.cos(radius * pi / 2))))\n    return area\ndef surfacearea_cone(length, height):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi = math.pi\n    area = pi * (1.0 - (length * length * (math.cos(length * pi / 2))))\n    return area\ndef surfacearea_sweep(theta, phi, delta_angle):\n    '''\n    Write a function to find the surface area of a sweep.\n    '''\n    area = pi * (1.0 - (theta * theta * (math.sin(theta * pi / 2))) * (math.cos(delta_angle * pi / 2)))\n    return area\ndef surfacearea_triangle(a, b, c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    area = a * b * c\n    return area\ndef surfacearea_square(a, b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    area = a * b\n    return area\ndef surfacearea_rhombus(a, b, c):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    area = a * b * c\n    return area\ndef surfacearea_rectangle(a, b, c):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = a * b\n    return area\ndef surfacearea_triangle_rectangle(a, b, c):\n    '''\n    Write a function to find the surface area of a triangle and rectangle.\n    '''\n    area = a * b * c\n    return area\ndef surfacearea_circle(radius):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area = radius * radius\n    return area\ndef surfacearea_dodecahedron(a, b, c, d):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    area = 4 * a * b * c * d\n    return area\ndef surfacearea_octahedron(a, b, c, d):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    area = 8 * a * b * c * d\n    return area\ndef surfacearea_sphere_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere with a sphere radius r.\n    '''\n    area = r * r * r * r * r * 4 * pi\n    return area\ndef surfacearea_sphere_cylinder(r):\n    '''\n    Write a function to find the surface area of a sphere with a cylinder radius r.\n    '''\n    area = r * r * r * 2 * pi\n    return area\ndef surfacearea_sphere_cone(r):\n    '''\n    Write a function to find the surface area of a sphere with a cone radius r.\n    '''\n    area = r * r * 2 * pi\n    return area\ndef surfacearea_sphere_sweep(theta, phi, delta_angle):\n    '''\n    Write a function to find the surface area of a sweep.\n    '''\n    area = theta * phi * (delta_angle * delta_angle) * pi\n    return area\ndef surfacearea_sphere_triangle(a, b, c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    area = a * b * c\n    return area\ndef surfacearea_square_square(a, b, c):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = a * b * c\n    return area\ndef surfacearea_square_rectangle(a, b, c):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = a * b * c\n    return area\ndef surfacearea_circle_circle(radius):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    area = 4 * pi * radius * radius\n    return area\ndef surfacearea_dodecahedron_dodecahedron(a, b, c, d, e):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    area = 4 * a * b * c * d * e\n    return area\ndef surfacearea_octahedron_octahedron(a, b, c, d, e):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    area = 8 * a * b * c * d * e\n    return area\ndef surfacearea_tetrahedron(a, b, c, d):\n    '''\n    Write a function to find the surface area of a tetrahedron.\n    '''\n    area = (a * b * c * d) / 6\n    return area\ndef surfacearea_hexahedron(a, b, c, d):\n    '''\n    Write a function to find the surface area of a hexahedron.\n    '''\n    area = (a * b * c * d) / 3\n    return area\ndef surfacearea_heptahedron(a, b, c, d):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    area = (a * b * c * d) / 12\n    return area\ndef surfacearea_heptahedron_heptahedron(a, b, c, d):\n    '''\n    Write a function to find the surface area of a heptahedron with a heptahedron radius a.\n    '''\n    area = (a * b * c * d) / 6\n    return area\ndef surfacearea_octahedron_octahedron(a, b, c, d, e):\n    '''\n    Write a function to find the surface area of a octahedron.\n    '''\n    area = (a * b * c * d * e) / 4\n    return area\ndef surfacearea_rectangle_rectangle(a, b, c):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    area = a * b * c\n    return area\ndef surfacearea_dodecahedron_dodecahedron(a, b, c, d, e):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    area = a * b * c * d * e\n    return area\ndef surfacearea_cone_cone(r1, r2):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = 2 * r1 * r2\n    return area\ndef surfacearea_dodecahedron_dodecahedron(a, b, c, d, e, f):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    area = 4 * a * b * c * d * e * f\n    return area\ndef surfacearea_heptahedron_heptahedron(a, b, c, d, e):\n    '''\n    Write a function to find the surface area of a heptahedron.\n    '''\n    area = 4 * a * b * c * d * e\n    return area\ndef surfacearea_octahedron_octahedron(a, b, c, d, e):\n    '''\n    Write a function to find the surface area of a octahedro"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3 * math.pi * r ** 3)\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14159265\n    return(4*pi*r**2)\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return(h*3.14159265*(r**2))\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    a = 2.0 * (r * pi)\n    return a\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4/3 * math.pi * r **3\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 2 * math.pi * r * r\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0 or n > 36:\n        raise ValueError(\"n must be between 0 and 36 inclusive\")\n    return ((((3 * n ** 2) + 1) // 2) + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def get_nth_center(n):\n        \"\"\"\n        Returns the nth center of a hexagonal number.\n        \"\"\"\n        return 2 * (n // 3) + 1 if n % 6 == 1 else n // 3\n    \n    def get_number(n):\n        \"\"\"\n        Returns a number using nth center.\n        \"\"\"\n        return n * get_nth_center(n)\n    \n    def center_number(n):\n        \"\"\"\n        Returns the nth center of a hexagonal number.\n        \"\"\"\n        return n * get_nth_center(n)\n    \n    return get_number(n) if 0 < n < 100 else 0\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n+=1\n    print(n)\n    print('\\n')\n    for i in range(0,n):\n        if(i==0 or i==1 or i==n-1):\n            print(i, end='')\n        else:\n            print(i, end=' ')\n    print('\\n')\n    for i in range(0,n-2):\n        print(i, end='')\n        print(i, end=' ')\n    print('\\n')\n    for i in range(n-3,0,-1):\n        print(i, end='')\n        print(i, end=' ')\n    print('\\n')\n    for i in range(n-2,0,-2):\n        print(i, end='')\n        print(i, end=' ')\n    print('\\n')\n    print(n, end='\\n')\n    return n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n<2:\n        return n\n    else:\n        return n-1+(n-1)%6\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # n is integer (i.e., an integer that can be represented by 0, 1, 2, 3, 4, 5, 6, 7)\n    # n should not be larger than 100, if so, return 0\n    n = int(n)\n    # if n is 1 or bigger, return 0\n    if n == 1:\n        return 0\n    # create a list of all the numbers from 1 to n,\n    # but without the sum of the numbers\n    # from 2 to n\n    ans = [i for i in range(1, n+1)]\n    # remove from list all the numbers\n    # from 2 to n\n    ans.pop(0)\n    for i in range(0, n-2, 3):\n        # if i+1 is even, add 1\n        if i%2==0:\n            ans.append(ans[i]+ans[i+1]+ans[i+2])\n        # if i+1 is odd, add 1\n        elif i%2==1:\n            ans.append(ans[i]+ans[i+1]+ans[i+2])\n    # return the first element in list\n    return ans[0]\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def is_even(n):\n        if n%2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n<=0:\n        print('Invalid Input')\n        return\n    if n==0:\n        return 0\n    if n%4==0:\n        return n\n    elif n%4==1:\n        return n+1\n    elif n%4==2:\n        return n+3\n    elif n%4==3:\n        return n+5\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n**(1/3))\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*n + n\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d1 = dict1.copy()\n    d2 = dict2.copy()\n    d3 = dict3.copy()\n    for key in d1:\n        for key1 in d2:\n            if key1 in d2:\n                if key not in d3:\n                    d3[key1] = d1[key]\n                else:\n                    d3[key1] += d1[key]\n            else:\n                d3[key] = d1[key]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {k:v for (k,v) in dict1.items() if k in dict2 and v in dict2[k]}\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #Create a key_value pair list\n    key_value = []\n    for k,v in dict1.items():\n        key_value.append((k, v))\n    for k, v in dict2.items():\n        key_value.append((k, v))\n    for k, v in dict3.items():\n        key_value.append((k, v))\n    #Create a new dictionary\n    dic = {}\n    for i in range(len(key_value)):\n        dic[key_value[i][0]] = key_value[i][1]\n    return dic\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {}\n    for k,v in dict1.items():\n        res.update({k:v})\n    for k,v in dict2.items():\n        res.update({k:v})\n    for k,v in dict3.items():\n        res.update({k:v})\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #Initialise variables\n    dict1 = dict1.copy()\n    dict2 = dict2.copy()\n    dict3 = dict3.copy()\n    #print(dict1,dict2,dict3)\n    #Loop through each key\n    for key in dict1.keys():\n        #Check if this key exists in dict2\n        if key in dict2.keys():\n            #Get the value from dict1\n            val = dict1[key]\n            #Insert the value from dict2 into dict1\n            dict1[key] = dict2[key]\n            #Set the new value to be the updated value from dict2\n            dict2[key] = val\n        #Check if this key exists in dict3\n        elif key in dict3.keys():\n            #Get the value from dict1\n            val = dict1[key]\n            #Insert the value from dict2 into dict1\n            dict1[key] = dict3[key]\n            #Set the new value to be the updated value from dict2\n            dict3[key] = val\n        else:\n            #Check if this key exists in dict1\n            if key in dict1.keys():\n                #Set this key to the new value from dict1\n                dict1[key] = dict1[key]\n                #Set this key to the new value from dict2\n                dict2[key] = dict2[key]\n                #Set this key to the new value from dict3\n                dict3[key] = dict3[key]\n            #Check if this key exists in dict2\n            else:\n                #Set this key to the new value from dict1\n                dict1[key] = dict1[key]\n                #Set this key to the new value from dict2\n                dict2[key] = dict2[key]\n                #Set this key to the new value from dict3\n                dict3[key] = dict3[key]\n    #print(dict1,dict2,dict3)\n    #Merge dicts\n    dict1 = merge_dictionaries(dict1,dict2,dict3)\n    #print(dict1)\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3 = dict3.copy()\n    for k in dict1:\n        dict3[k] = dict1[k]\n    for k in dict2:\n        dict3[k] = dict2[k]\n    for k in dict3:\n        dict3[k] = dict3[k]\n    return dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1_copy = dict1.copy()\n    dict2_copy = dict2.copy()\n    dict3_copy = dict3.copy()\n    for key in dict2_copy:\n        dict2_copy[key] = dict2_copy[key].copy()\n    for key in dict1_copy:\n        dict1_copy[key] = dict1_copy[key].copy()\n    dict1_copy = {**dict1_copy, **dict2_copy, **dict3_copy}\n    return dict1_copy\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new empty dictionary\n    merged_dict = {}\n    # Add keys from the first dictionary\n    if dict1:\n        merged_dict.update(dict1)\n    # Add keys from the second dictionary\n    if dict2:\n        merged_dict.update(dict2)\n    # Add keys from the third dictionary\n    if dict3:\n        merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1_merged = dict1.copy()\n    dict2_merged = dict2.copy()\n    dict3_merged = dict3.copy()\n    for key in dict1_merged:\n        dict1_merged[key] = merge_dictionaries(dict1_merged[key],dict2[key],dict3[key])\n    for key in dict2_merged:\n        dict2_merged[key] = merge_dictionaries(dict2_merged[key],dict3[key],dict1[key])\n    for key in dict3_merged:\n        dict3_merged[key] = merge_dictionaries(dict3_merged[key],dict1[key],dict2[key])\n    return dict1_merged, dict2_merged, dict3_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    l = []\n    for i in dict1:\n        d = dict1[i]\n        for j in dict2:\n            if d[j] < d[i]:\n                d[j] = dict1[i]\n            l.append(d)\n    for j in dict2:\n        l.append(dict2[j])\n    return l\ndef merge_dictionaries_tuple(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for i in dict1:\n        d[i] = dict1[i]\n    for j in dict2:\n        d[j] = dict2[j]\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1=dict()\n    dict1=dict(Counter(list1))\n    return dict1\ndef first(list1):\n    '''\n    Write a function to get the first item in a list, returned as a string.\n    '''\n    list1=list(str(list1))\n    list1.remove('0')\n    list1.remove('1')\n    list1.remove('2')\n    list1.remove('3')\n    list1.remove('4')\n    list1.remove('5')\n    return list1[0]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if len(list1) == 0:\n        return {}\n    else:\n        return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = dict()\n    for word in list1:\n        if word in my_dict:\n            my_dict[word] += 1\n        else:\n            my_dict[word] = 1\n    return my_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = collections.Counter(list1)\n    return my_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    for x in d:\n        d[x] = d[x] + 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counter = collections.Counter(list1)\n    return counter\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = dict()\n    for element in list1:\n        if element in dictionary:\n            dictionary[element] += 1\n        else:\n            dictionary[element] = 1\n    return dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # use collections.Counter to count the frequency of each element\n    freq = collections.Counter(list1)\n    # return the dictionary\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # define a dictionary to store frequency\n    freq = collections.Counter(list1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the closest number in the given list\n    number = min(closest_list)\n    # return the number\n    return number\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 1\n    elif N % 2 == 0:\n        return closest_num(N/2)\n    elif N % 2 == 1:\n        return closest_num((3*N)+1)\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    minimum = N\n    for n in range(1, N+1):\n        if n < minimum:\n            minimum = n\n    return minimum\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = 0\n    num = N\n    for i in range(1, N + 1):\n        if i < num:\n            if num <= closest:\n                closest = num\n            num = i\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    closest = None\n    closest_idx = None\n    \n    for i in range(N):\n        if i == 0:\n            closest = i\n        if i == 1:\n            closest_idx = i\n        \n        if i < closest:\n            closest = i\n            closest_idx = i\n    \n    return closest, closest_idx\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min([x for x in range(N)])\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N\ndef get_closest_num(N, num):\n    '''\n    Write a function that takes the number and returns the smallest number.\n    '''\n    return num\ndef is_prime(num):\n    '''\n    Write a function that returns True if num is a prime number and False otherwise.\n    '''\n    return num % 2 == 0\ndef is_prime_iter(num):\n    '''\n    Write a function that returns True if num is a prime number and False otherwise.\n    '''\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 2, 2):\n        if num % i == 0:\n            return False\n    return True\ndef is_prime_iter(num):\n    '''\n    Write a function that returns True if num is a prime number and False otherwise.\n    '''\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 2, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Base case\n    if N == 1:\n        return N\n    \n    # Find the closest number smaller than n\n    closest = N\n    for i in range(N, N+1):\n        if closest > i:\n            closest = i\n    return closest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    def len_max(str):\n        '''\n        Write a python function to find the length of the longest word.\n        '''\n        words = str.split()\n        for i in range(len(words)):\n            words[i] = len(words[i])\n        words.sort(key=len, reverse=True)\n        return words\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest=0\n    for i in list1:\n        if len(i)>longest:\n            longest=len(i)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) > len(list1[i+1]):\n            return list1[i]\n    return '0'\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    if len(list1)==0:\n        return 0\n    elif len(list1)==1:\n        return 1\n    elif len(list1)==2:\n        return 2\n    elif len(list1)>2:\n        return max(len_log(list1[:2]),len_log(list1[2:]))\n    else:\n        return 1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    dict1={}\n    for i in list1:\n        if i in dict1.keys():\n            dict1[i]=dict1[i]+1\n        else:\n            dict1[i]=1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # input: list of strings\n    # output: int\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i].split()\n        for j in range(len(list1[i])):\n            list1[i][j] = list1[i][j].strip(',.')\n            list1[i][j] = list1[i][j].lower()\n            list1[i][j] = list1[i][j].split()\n            list1[i][j] = list1[i][j][0]\n            list1[i][j] = list1[i][j][0].replace('[', '')\n            list1[i][j] = list1[i][j][0].replace(']', '')\n            list1[i][j] = list1[i][j][0].replace('-', '')\n            list1[i][j] = list1[i][j][0].replace('.', '')\n            list1[i][j] = list1[i][j].split(',')\n            if len(list1[i][j]) > len(list1[i][j][0]):\n                list1[i][j] = list1[i][j][0]\n    return list1[i][j]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxlen = 0\n    if len(list1) > 1:\n        for i in range(len(list1)):\n            if len(list1[i]) > maxlen:\n                maxlen = len(list1[i])\n    return maxlen\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #pass\n    maxi=0\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if len(list1[i])>len(list1[j]):\n                maxi=max(len(list1[i]),len(list1[j]))\n    return maxi\nprint(len_log([\n    \"this\",\"is\",\n    \"a\",\"for\",\"apple\",\".\",\n    \"is\",\"a\",\"pound\",\"of\",\"one\",\n    \"pound\",\"in\",\"pound\",\"pound\",\".\"\n]))"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    list_sub = []\n    for x in str1:\n        list_sub.append(x)\n    for y in sub_str:\n        if y in list_sub:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    temp_str = list(str1)\n    i = 0\n    j = 0\n    index = 0\n    while i < len(str1):\n        if str1[i] == sub_str[index]:\n            temp_str[i] = '*'\n            i += 1\n        else:\n            index += 1\n            if index >= len(sub_str):\n                temp_str[i] = '.'\n                break\n        i += 1\n    return \"\".join(temp_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1_index = 0\n    str2_index = 0\n    str1_length = len(str1)\n    str2_length = len(sub_str)\n    str1_set = set(str1)\n    str2_set = set(sub_str)\n    while(str1_index < str1_length and str2_index < str2_length):\n        str1_char = str1[str1_index]\n        str2_char = sub_str[str2_index]\n        if(str1_char == str2_char):\n            str1_index += 1\n            str2_index += 1\n        else:\n            str1_index += 1\n    return str1_index < str1_length and str2_index < str2_length\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1.find(sub_str)!= -1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str = list(sub_str)\n    sub_str.sort()\n    for i in range(len(str1) - len(sub_str)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str == \"\":\n        return False\n    if len(sub_str) == 0:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return False\n    else:\n        for i in range(len(str1)):\n            if str1[i:i+len(sub_str)] == sub_str:\n                return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str = sub_str.lower()\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not len(sub_str):\n        return None\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = list(sub_str)\n    \n    # Check if the list of string values contains the substring\n    for i in range(0, len(str1)):\n        if sub_str_list[i] in str1:\n            # Check if the substring is in the list of string values\n            return i\n    \n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return True if (n % 2) == 0 else False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating(n): \n        if n < 0: \n            print(\"Number should be positive\") \n        elif n == 0: \n            print(\"Zero\") \n        else: \n            print(\"Number is not undulating\") \n    return is_undulating \n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10 :\n        return False\n    else :\n        return True\n    "
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2!= 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 10: return True\n    if n <= 100: return False\n    if n <= 1000: return True\n    if n <= 100000: return False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0:\n        print(n, 'is even number.')\n    else:\n        print(n, 'is odd number.')\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n > 0 and n % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return True\n    else:\n        flag = 1\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                flag = 0\n                break\n        return flag\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n in {1, 2, 3, 4, 5, 6, 7, 8, 9}:\n        return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        a = int(a)\n        b = int(b)\n        if b < 0:\n            raise Exception('Please enter a positive number')\n        return pow(a,b)\n    except Exception as e:\n        print(e)\n        return 'Please enter a number!'\n    \ndef fibonacci(n):\n    '''\n    Function to return the value of fibonacci sequence up to 'n' numbers.\n    '''\n    if type(n)!= int:\n        print('Please enter a positive number')\n    elif n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b < 0:\n        return a ** b \n    else:\n        return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    def power_of(x, y):\n        if y == 1:\n            return x\n        else:\n            return power_of(x, y - 1)\n    return power_of(a, b)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[i][2]:\n            min_list.append(test_list[i][0])\n    return min_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0][0]\n    second_min = minimum\n    for x in test_list:\n        if x[0] < minimum:\n            minimum = x[0]\n            second_min = x[1]\n    return second_min\n    \ndef index_second_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the second smallest value of the tuple with the first value.\n    '''\n    second_min = test_list[0][1]\n    for x in test_list:\n        if x[1] < second_min:\n            second_min = x[1]\n    return second_min\n    \ndef index_largest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the largest value of the tuple with the first value.\n    '''\n    largest = test_list[0][0]\n    for x in test_list:\n        if x[0] > largest:\n            largest = x[0]\n    return largest\n    \ndef index_largest_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the largest smallest value of the tuple with the first value.\n    '''\n    largest = test_list[0][0]\n    second_min = test_list[0][1]\n    for x in test_list:\n        if x[0] > largest:\n            largest = x[0]\n            second_min = x[1]\n    return second_min\n    \ndef index_smallest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the smallest value of the tuple with the first value.\n    '''\n    smallest = test_list[0][0]\n    for x in test_list:\n        if x[0] < smallest:\n            smallest = x[0]\n    return smallest\n    \ndef index_smallest_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the smallest smallest value of the tuple with the first value.\n    '''\n    smallest = test_list[0][0]\n    second_min = test_list[0][1]\n    for x in test_list:\n        if x[0] < smallest:\n            smallest = x[0]\n            second_min = x[1]\n    return second_min\n    \ndef index_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average value of the tuple with the first value.\n    '''\n    average = sum(test_list[0])/len(test_list[0])\n    return average\n    \ndef index_average_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average smallest value of the tuple with the first value.\n    '''\n    average = sum(test_list[0])/len(test_list[0])\n    second_min = test_list[0][1]\n    for x in test_list:\n        if x[1] < second_min:\n            second_min = x[1]\n    return second_min\n    \ndef index_highest(test_list):\n    '''\n    Given a list of tuples, write a function that returns the highest value of the tuple with the first value.\n    '''\n    highest = test_list[0][0]\n    for x in test_list:\n        if x[0] > highest:\n            highest = x[0]\n    return highest\n    \ndef index_highest_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the highest smallest value of the tuple with the first value.\n    '''\n    highest = test_list[0][0]\n    second_min = test_list[0][1]\n    for x in test_list:\n        if x[0] > highest:\n            highest = x[0]\n            second_min = x[1]\n    return second_min\n    \ndef index_sum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum of all values of the tuple with the first value.\n    '''\n    total = 0\n    for x in test_list:\n        total = total + x[0]\n    return total\n    \ndef index_sum_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the sum smallest value of the tuple with the first value.\n    '''\n    total = test_list[0][0]\n    second_min = test_list[0][1]\n    for x in test_list:\n        if x[0] < total:\n            total = x[0]\n            second_min = x[1]\n    return second_min\n    \ndef index_percentage(test_list):\n    '''\n    Given a list of tuples, write a function that returns the percentage of values of the tuple with the first value.\n    '''\n    total = index_sum(test_list)/len(test_list)\n    return total\n    \ndef index_percentage_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the percentage smallest value of the tuple with the first value.\n    '''\n    total = index_sum_min(test_list)/len(test_list)\n    second_min = test_list[0][1]\n    for x in test_list:\n        if x[1] < second_min:\n            second_min = x[1]\n    return second_min\n    \ndef index_average_per(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average percentage of values of the tuple with the first value.\n    '''\n    average = sum(test_list[0])/len(test_list[0])\n    return average\n    \ndef index_average_per_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average smallest percentage of values of the tuple with the first value.\n    '''\n    average = sum(test_list[0])/len(test_list[0])\n    second_min = test_list[0][1]\n    for x in test_list:\n        if x[1] < second_min:\n            second_min = x[1]\n    return second_min\n    \ndef index_max_per(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average percentage of values of the tuple with the first value.\n    '''\n    average = sum(test_list[0])/len(test_list[0])\n    second_max = test_list[0][0]\n    for x in test_list:\n        if x[0] > second_max:\n            second_max = x[0]\n    return second_max\n    \ndef index_max_per_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average smallest percentage of values of the tuple with the first value.\n    '''\n    average = sum(test_list[0])/len(test_list[0])\n    second_max = test_list[0][1]\n    for x in test_list:\n        if x[1] < second_max:\n            second_max = x[1]\n    return second_max\n    \ndef index_median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median value of the tuple with the first value.\n    '''\n    if len(test_list) == 0:\n        return None\n    else:\n        median = test_list[0][0]\n        for x in test_list:\n            if x[0] < median:\n                median = x[0]\n        return median\n    \ndef index_median_min(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median smallest value of the tuple with the first value.\n    '''\n    if len(test_list) == 0:\n        return None\n    else:\n        median = index_sum_min(test_list)\n        for x in tes"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum=test_list[0]\n    for i in range(0, len(test_list)):\n        if test_list[i][1] < minimum[1]:\n            minimum=test_list[i]\n    return minimum[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    dict_of_numbers = {}\n    for el in test_list:\n        dict_of_numbers[el[0]] = el[1]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list)\n    return min_value\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the biggest second value.\n    '''\n    max_value = max(test_list)\n    return max_value\ndef index_mean(test_list):\n    '''\n    Given a list of tuples, write a function that returns the mean of all of the values in the list.\n    '''\n    sum = 0\n    for item in test_list:\n        sum = sum + item[1]\n    return sum / len(test_list)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code here\n    return sorted(test_list, key = itemgetter(0))[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key = lambda x : x[1])\n    return sorted_list[0][0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    sorted_list = sorted(test_list, key = lambda x : x[1])\n    return sorted_list[-1][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if not test_list:\n        return None\n    return min(test_list, key=itemgetter(1))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Loop through every tuple in the list and calculate the smallest\n    # Second value of every tuple\n    # Make sure to return the smallest value\n    def smallest(x, y):\n        if(x < y):\n            return x\n        else:\n            return y\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    second_value = test_list[1]\n    minimum = min(test_list[0])\n    for tuple in test_list[0]:\n        if tuple[1] < minimum:\n            minimum = tuple[1]\n            second_value = tuple[0]\n    return second_value\n    \ndef get_keys(user_input):\n    '''\n    Given a dictionary, write a function that returns the key associated with the value of the inputted tuple.\n    '''\n    user_input_dict = {}\n    for tuple in user_input:\n        user_input_dict[tuple[0]] = tuple[1]\n    return user_input_dict\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = sys.maxsize  \n    for i in range(0, len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i][1] < lst[j][1]:\n                tmp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = tmp\n                if lst[i][1] < min_len:\n                    min_len = lst[i][1]\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #if len(lst) == 0:\n    #    return 'The smallest list is empty!'\n    #else:\n    #    min = lst[0]\n    #    length = 0\n    #    for item in lst:\n    #        if item < min:\n    #            min = item\n    #            length = 0\n    #        elif item > min:\n    #            length += 1\n    #            min = item\n    #    return length\n    return 1\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0]\n    for item in lst:\n        if len(item) < len(min_len):\n            min_len = item\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) > 1:\n        min_lst = []\n        for x in lst:\n            if len(min_lst) > 0:\n                if x < min_lst[-1]:\n                    min_lst.append(x)\n            else:\n                min_lst = [x]\n        return len(min_lst)\n    else:\n        return len(lst[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Create a for loop.\n    for item in lst:\n        # Using len() to find the length of the list.\n        length = len(item)\n        # Print the length of the list.\n        print('Length of the item is :',length)\n    return(length)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst=[]\n    min=[]\n    # lst = ['d', 'c', 'a', 'e', 'b', 'a']\n    lst1 = [['d', 'c', 'a', 'e', 'b', 'a']]\n    lst2 = [['a', 'e', 'b'], ['d', 'c', 'a', 'e', 'b', 'a']]\n    lst3 = [['d', 'c', 'a'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst4 = [['a', 'b', 'a', 'b', 'a', 'b'], ['d', 'c', 'a']]\n    lst5 = [['a', 'b'], ['d', 'c']]\n    lst6 = [['d', 'c']]\n    lst7 = [['d', 'c'], ['d', 'c', 'a', 'b', 'a', 'b']]\n    lst8 = [['d', 'c'], ['d', 'c', 'a']]\n    lst9 = [['d', 'c']]\n    lst10 = [['a', 'b']]\n    lst11 = [['d', 'c', 'a']]\n    lst12 = [['d', 'c', 'a'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst13 = [['a', 'b'], ['d', 'c']]\n    lst14 = [['a', 'b']]\n    lst15 = [['a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst16 = [['a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst17 = [['a', 'b'], ['d', 'c']]\n    lst18 = [['a', 'b']]\n    lst19 = [['a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst20 = [['a', 'b']]\n    lst21 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b', 'a']]\n    lst22 = [['d', 'c']]\n    lst23 = [['a', 'b', 'a', 'b', 'a', 'b'], ['d', 'c']]\n    lst24 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst25 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst26 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst27 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst28 = [['a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst29 = [['a', 'b']]\n    lst30 = [['a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst31 = [['a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst32 = [['a', 'b']]\n    lst33 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst34 = [['a', 'b'], ['d', 'c']]\n    lst35 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst36 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst37 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst38 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst39 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst40 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst41 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst42 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst43 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst44 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst45 = [['a', 'b', 'a', 'b', 'a', 'b'], ['d', 'c'], ['d', 'c']]\n    lst46 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst47 = [['a', 'b', 'a', 'b', 'a', 'b'], ['d', 'c']]\n    lst48 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst49 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst50 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst51 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst52 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst53 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst54 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst55 = [['a', 'b', 'a', 'b', 'a', 'b'], ['d', 'c'], ['d', 'c']]\n    lst56 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst57 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst58 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst59 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst60 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst61 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst62 = [['a', 'b', 'a', 'b', 'a', 'b']]\n    lst63 = [['a', 'b', 'a', 'b', 'a', 'b'], ['a', 'b', 'a', 'b', 'a', 'b']]\n    lst64 = [['a', 'b', 'a', '"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minimum = lst[0][0]\n    for element in lst:\n        if element[0] < minimum:\n            minimum = element[0]\n    return minimum\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length_list = []\n    l = len(lst)\n    for i in range(0, l):\n        length_list.append(lst[i].count('1'))\n    length = min(length_list)\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    #Time complexity: O(N)\n    #Space Complexity: O(N)\n    min_len = len(lst)\n    for item in lst:\n        if len(item) < min_len:\n            min_len = len(item)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    m = lst[0]\n    n = lst[1]\n    for i in lst:\n        if len(i) < len(m):\n            m = i\n        elif len(i) > len(n):\n            n = i\n    return m, n\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # if number is positive, the result should be 1\n    if n >= 0:\n        # number is divisible by 2\n        if n % 2 == 0:\n            return 1\n        # number is divisible by 3\n        elif n % 3 == 0:\n            return 2\n        # number is divisible by 5\n        elif n % 5 == 0:\n            return 3\n        # number is divisible by 7\n        elif n % 7 == 0:\n            return 4\n        # number is divisible by 11\n        elif n % 11 == 0:\n            return 5\n        # number is divisible by 13\n        elif n % 13 == 0:\n            return 6\n        else:\n            return 0\n    else:\n        return 0\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    n_divisors = 0\n    for i in range(1, int(n**0.5)+1):\n        if n%i==0:\n            n_divisors+=1\n            if n//i==i:\n                n_divisors+=1\n    return n_divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    num = n\n    divisors = 0\n    while num > 1:\n        if num % 2 == 0:\n            divisors = divisors + 1\n        num = num // 2\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    #print(\"divisor(n)\")\n    if n==1:\n        return 1\n    else:\n        return int(n)/divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    num = n\n    divs = 0\n    i = 1\n    while i <= num:\n        if num%i == 0:\n            divs += 1\n        i += 1\n    return divs\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<0:\n        print(\"Please enter a positive number\")\n        return -1\n    else:\n        divisors=0\n        for i in range(1,n+1):\n            if n%i==0:\n                divisors=divisors+1\n        return divisors\n        \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n<=0:\n        raise ValueError(\"number must be positive\")\n    i=1\n    while i*i<n:\n        if n%i==0:\n            if n//i==i:\n                return i\n            else:\n                return i\n        i+=1\n    return i\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divs = 0\n    for i in range(1,n):\n        if n%i == 0:\n            divs += 1\n    return divs\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    d=2\n    while d<=n/2:\n        if n%d==0:\n            d+=2\n        else:\n            break\n    return d\ndef calc_fib(n):\n    '''\n    Write a python function to calculate the sum of the first n fibonacci numbers.\n    '''\n    if n<0:\n        return 0\n    elif n<=1:\n        return 1\n    else:\n        a=1\n        b=1\n        for i in range(1,n):\n            a,b=b,a+b\n        return a\ndef fib_gen(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        fib=fib+1\n        yield fib\ndef fib_gen2(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        fib+=1\n        yield fib\ndef fib_gen3(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        a,b=i,0\n        while a!=b:\n            yield b\n            a,b=a+b,b+1\ndef fib_gen4(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib+=1\ndef fib_gen5(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\ndef fib_gen6(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        fib+=1\n        if fib==n:\n            break\n    yield fib\ndef fib_gen7(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        fib=fib+1\n        yield fib\n        if fib==n:\n            break\ndef fib_gen8(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen9(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen10(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen11(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen12(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen13(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen14(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen15(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen16(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen17(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen18(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen19(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen20(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen21(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen22(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen23(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib\n        fib=fib+1\n        if fib==n:\n            break\n    return fib\ndef fib_gen24(n):\n    '''\n    Write a python function that generates and returns the first n fibonacci numbers.\n    '''\n    fib=0\n    for i in range(1,n):\n        yield fib"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Map the list of lists to a dictionary.\n    # Output the values, sorted in ascending order, by the frequency.\n    # So, in the above example, the frequency is 50, the values are [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].\n    frequency = {}\n    for i in list1:\n        frequency[i[0]] = frequency.get(i[0], 0) + 1\n    # Sort the dictionary by value.\n    sorted_frequency = sorted(frequency.items(), key=lambda kv: kv[1])\n    print(sorted_frequency)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = [l for l in list1 if not isinstance(l, str)]\n    dict1 = {}\n    for i in range(0,len(list1)):\n        list1[i] = list1[i].split(' ')\n        for j in range(0,len(list1[i])):\n            if(list1[i][j] in dict1):\n                dict1[list1[i][j]] += 1\n            else:\n                dict1[list1[i][j]] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dictionary = {}\n    for el in list1:\n        dictionary[el] = list1.count(el)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i not in freq:\n            freq[i] = 0\n        else:\n            freq[i] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in freq_dict:\n                freq_dict[list1[i][j]] = 1\n            else:\n                freq_dict[list1[i][j]] += 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    from collections import Counter\n    frequency_list = {}\n    for ele in list1:\n        for element in ele:\n            if element not in frequency_list:\n                frequency_list[element] = 1\n            else:\n                frequency_list[element] += 1\n    return frequency_list\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # nested looping and checking. if nested loop, this will be called same as for lists\n    d = {}\n    for l in list1:\n        for element in l:\n            if element in d.keys():\n                d[element] += 1\n            else:\n                d[element] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq={}\n    for i in range(len(list1)):\n        for j in list1[i]:\n            if(j in freq):\n                freq[j]+=1\n            else:\n                freq[j]=1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in frequency_dict:\n                frequency_dict[list1[i][j]] = 1\n            else:\n                frequency_dict[list1[i][j]] += 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    print(\"\\nConverting to a dictionary\")\n    count = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            count.setdefault(list1[i][j], 0)\n            count[list1[i][j]] += 1\n    return count\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = []\n    \n    for i in range(0, len(numbers)):\n        result.append(numbers[i] * len(numbers))\n    \n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    print(\"total = \", total)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num_list = [int(n) for n in numbers]\n    mult_list = [int(n) for n in list(str(int.__mul__(num_list, int(numbers[-1])))[1:-1])]\n    return(mult_list)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    new_list = []\n    for i in numbers:\n        new_list.append(i*len(numbers))\n    return new_list\n    \ndef divide_numbers(numbers):\n    '''\n    Write a function that takes a list of numbers and multiplies each number with 5 and returns the final product.\n    '''\n    return multiply_num(numbers)\n    \ndef string_to_int(lst):\n    '''\n    Write a function that takes a list of strings and converts each string to an integer.\n    '''\n    return [int(i) for i in lst]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    i = 0\n    while i < len(numbers):\n        numbers[i] *= numbers[i]\n        i += 1\n    return numbers\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult = 1\n    for i in numbers:\n        mult = mult * i\n    return mult\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # your code goes here\n    return [x * n for x, n in zip(*numbers)]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = 1\n    for num in numbers:\n        res = res * num\n    return res\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 0\n    for i in range(len(numbers)):\n        total = total + numbers[i] * (i+1)\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not numbers:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    return numbers[0] * multiply_num(numbers[1:])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_num = bin(n) \n    return bin_num[2:] \n    \ndef binary_to_decimal(s): \n    '''\n    Write a function to convert a binary string to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    num = 0\n    for i in range(len(s)): \n        num += int(s[i]) * 2 ** (len(s) - 1 - i)\n    return num\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        print('Cannot convert negative numbers to binary')\n        exit()\n    binary_n = format(n, 'b')\n    if len(binary_n) < 4:\n        print('Invalid binary number')\n        exit()\n    return binary_n\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # YOUR CODE HERE\n    return '0b' + str(bin(n)[2:])\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        return str(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Declare output\n    output = ''\n    # Convert the given number\n    n = int(n)\n    while n > 0:\n        # Divide by 2\n        divisor = n % 2\n        # Add the remainder\n        n = n // 2\n        output += str(divisor)\n    return output\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    ans = ''\n    while n:\n        ans += str(n % 2)\n        n //= 2\n    return ans\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = bin(n)\n    return binary[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Variables\n    rem = n % 2\n    binary = ''\n    if rem == 0:\n        binary = '0'\n    else:\n        binary = '1'\n        \n    # Return\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # assume the number is less than 0\n    if n <= 0: \n        return '0'\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return \"\"\n    n=bin(n)\n    print(n)\n    return n[2:]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest = -1\n    j = num\n    l = 1\n    #Create a copy of number\n    while(num!= 0):\n        #If the number is already in the original list\n        if j % 10 == num % 10:\n            #If number is smaller than the original number\n            if j < smallest:\n                smallest = j\n            #If number is larger than the original number\n            if smallest > j:\n                j = smallest\n            #Increase the number\n            num = num // 10\n            l += 1\n        else:\n            j = j // 10\n            l += 1\n    \n    #Return number\n    return j\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = len(str(num))\n    new_num = 0\n    for i in range(n):\n        new_num += int(str(num)[i]) * int(str(num)[i+1])\n    return new_num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        Check if the number is palindrome, if it is, return its digits, otherwise, return None\n        '''\n        while num > 0:\n            rem = num % 10\n            num = num // 10\n            if rem == 0:\n                return 0\n            else:\n                return rem\n    \n    def get_next_palindrome(num):\n        '''\n        Return the next palindrome as the palindrome with the next smallest digits\n        '''\n        while num >= 1:\n            pal = get_next_palindrome(num)\n            if is_palindrome(pal) == 0:\n                return pal\n            else:\n                num = pal // 10\n        return None\n    return get_next_palindrome(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(number):\n        \"\"\"\n        Determine if a number is palindrome.\n        \"\"\"\n        number = str(number)\n        return number == number[::-1]\n        \n    def next_palindrome(number):\n        \"\"\"\n        Find next palindrome of a number,\n        and return the new number.\n        \"\"\"\n        number = str(number)\n        return str(int(number) + 1)\n        \n    def next_palindrome_rec(number, palindrome_number):\n        \"\"\"\n        Find next palindrome of a number,\n        and return the new number.\n        \"\"\"\n        if palindrome_number == str(number):\n            return str(number)\n        if is_palindrome(number):\n            return next_palindrome(palindrome_number)\n        return next_palindrome_rec(number, next_palindrome(palindrome_number + 1))\n    \n    # Find next palindrome\n    palindrome = next_palindrome_rec(num, '')\n    # Find next palindrome recursively\n    return next_palindrome(palindrome)\n    \nif __name__ == \"__main__\":\n    '''\n    Run the main function.\n    '''\n    input_number = -1\n    try:\n        input_number = int(sys.stdin.readline())\n    except ValueError:\n        pass\n    \n    print(next_smallest_palindrome(input_number))"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    i = -1\n    j = len(s) - 1\n    while j >= i:\n        mid = (j + i) // 2\n        if s[mid] == s[mid + 1]:\n            return s[mid]\n        elif s[mid] < s[mid + 1]:\n            i = mid + 1\n        else:\n            j = mid\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    num = num.strip('0')\n    num = num.strip('.')\n    num = num.strip('-')\n    num = num.strip('+')\n    num = int(num)\n    temp = num\n    if len(str(num)) == 1:\n        return num\n    while (int(num%10)!= 0 and int(num%10)!= int(str(num))):\n        num = str(num)\n        num = num.strip('0')\n        num = num.strip('.')\n        num = num.strip('-')\n        num = num.strip('+')\n        num = int(num)\n        if num >= 10**(len(str(num)) - 1):\n            return num\n    return int(str(num))\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    if len(s) == 1:\n        return num\n    for i in range(len(s)):\n        if s[i] == s[i + 1]:\n            continue\n        elif len(s) == 2:\n            return int(s[:i] + s[i + 2:])\n        else:\n            return int(s[:i] + s[i + 2:i + 2] + s[i + 3:])\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = 1\n    while (n <= num):\n        m = n\n        for i in range(n):\n            if (m % n == 0) and (i!= n - m / n):\n                m = m - 1\n                break\n            else:\n                m = m + 1\n        n = n + 1\n    return m\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num < 10:\n        return num\n    else:\n        prev = 10**(len(str(num))-1)\n        p = num\n        for i in range(len(str(num))-1,-1,-1):\n            next_num = p*prev\n            if next_num == num:\n                break\n            else:\n                prev = next_num\n                p = next_num\n        return p\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n=len(num)\n    if n==1:\n        return num\n    if num==num[::-1]:\n        return num\n    count=0\n    for i in range(n):\n        if num[i]==num[i-1]:\n            count+=1\n        else:\n            if count==1:\n                break\n            else:\n                count=0\n                continue\n    temp=num\n    start=0\n    for i in range(n-count):\n        if num[i]==num[i+count]:\n            start+=1\n        else:\n            break\n    end=start+n-count-1\n    for i in range(start,end):\n        temp[i]=num[i]\n    temp[end]=num[n-1]\n    for i in range(n):\n        if num[i]!=num[n-1]:\n            temp[i]=num[i]\n    temp=temp[::-1]\n    return next_smallest_palindrome(temp)\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n    else:\n        return arr[len(arr) - 1 - k"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check base case\n    if len(arr) == 0:\n        return -1\n    \n    # If the index is out of range, then return -1\n    if k > len(arr):\n        return -1\n    \n    # Return the index\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == []:\n        return None\n    mid = len(arr) // 2\n    if mid == k - 1:\n        return arr[mid]\n    elif k == 1:\n        return arr[mid]\n    elif k > 1:\n        return kth_element(arr[:mid], k)\n    else:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    k = max(arr) + 1 - k\n    return arr[int(k)]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[int(len(arr)/2) + k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if (arr == []):\n        return -1\n    else:\n        return arr[len(arr)-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in word:\n        if i.isalnum():\n            camel_case += i.lower()\n        elif i in ('_', '-', '+', '.', ','):\n            camel_case += i\n        elif i =='':\n            camel_case += '_'\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # get the first letter\n    if word[0].isupper():\n        return word[0].lower() + word[1:]\n    else:\n        return word[0].lower() + word[1].upper()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter = word[0]\n    \n    if first_letter in 'AEIOU':\n        return word.upper()\n    else:\n        return word.lower()\n    \ndef validate_input(arg):\n    '''\n    Check that the user enters a valid argument.\n    '''\n    if not arg.isalnum():\n        raise argparse.ArgumentTypeError('Must be all alphanumeric.')\n    \ndef create_parser(subparsers, parent_parser):\n    '''\n    Create subparsers and make them look nice and readable.\n    '''\n    parser = subparsers.add_parser('<command>', help='<command> is the name of the command.')\n    parser.add_argument('-v', '--verbose', action='store_true', dest='verbose', help='Print detailed output.')\n    parser.add_argument('-l', '--log', action='store_true', dest='log', help='Print details of input, output, and error log.')\n    parser.add_argument('-x', '--args', action='append', help='Arguments given to <command>. Use multiple times to specify more arguments.')\n    parser.set_defaults(verbose=False, log=False, args=())\n    \n    return parser\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    res = ''\n    for char in word:\n        if char == '_':\n            res += '_'\n        else:\n            res += char.upper()\n    return res\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.replace('-','_').replace('.','_').replace('_','-').lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef snake_to_cap(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef capitalize(word):\n    '''\n    Write a function to capitalize the first character of a string.\n    '''\n    return word[0].upper() + word[1:]\n    \ndef camel_to_snake_case(word):\n    '''\n    Write a function to convert camel case string to snake case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef snake_to_camel_case(word):\n    '''\n    Write a function to convert snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n    \ndef snake_to_cap_case(word):\n    '''\n    Write a function to convert snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n    \ndef snake_to_cap_case_2(word):\n    '''\n    Write a function to convert snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef snake_to_cap_case_3(word):\n    '''\n    Write a function to convert snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_snake(word):\n    '''\n    Write a function to convert camel case string to snake case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_2(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_3(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n    \ndef cap_to_cap_case_4(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_5(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_6(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_7(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_8(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_9(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_10(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_11(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_12(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_13(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_14(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_15(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_16(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_17(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_18(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_19(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_20(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_21(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to_cap_case_22(word):\n    '''\n    Write a function to convert camel case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n        \ndef cap_to"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    import re\n    import string\n    upper_camel = string.capwords(word, \"\")\n    lower_camel = string.capwords(word, \"\").lower()\n    return lower_camel + upper_camel\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper()+word[1:].lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for char in word:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.isupper():\n        return word.lower()\n    else:\n        return word.title()\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Set the base case\n    if m == 1:\n        return n\n    elif n == 1:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # if n=1, then the element is 1\n    if n == 1: \n        return 1\n    \n    # if m=1, then the element is 1\n    if m == 1: \n        return 1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0: \n        return 0\n    elif n == 0: \n        return -1\n    elif n == 1: \n        return 1\n    else: \n        return eulerian_num(n-1, m) + m\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m > n:\n        print (\"Too many edges\")\n        exit()\n    edges = []\n    for i in range(n):\n        edges.append([i,i+1])\n    for i in range(n-m+1):\n        edges.append([i,i+m])\n    edges.sort(key=lambda x:x[1]-x[0])\n    edges.sort(key=lambda x:x[1]-x[0])\n    euler_num = 0\n    for edge in edges:\n        if edge[0]!= edge[1]:\n            euler_num = max(euler_num,edge[1]-edge[0])\n    return euler_num\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # init number of vertices\n    nVertices = 0\n    # init an adjacency list to store the edges\n    adjacencyList = [[] for i in range(n)]\n    # loop over the adjacency list\n    for v in range(nVertices):\n        # print out the vertices\n        print(v)\n        # find the vertex with the lowest index\n        currentVertex = v\n        minDistance = 100\n        for u in range(nVertices):\n            # print out the edge\n            print(\"\", end=\" \")\n            print(v, u)\n            # find the distance from the current vertex\n            dist = abs(v-u)\n            # if the distance is less than minDistance\n            if dist < minDistance:\n                # update the minimum distance\n                minDistance = dist\n                # update the current vertex\n                currentVertex = u\n        # add the edge to the adjacency list\n        adjacencyList[currentVertex].append(v)\n    # print the vertices and the edges\n    for vertex in range(nVertices):\n        print(vertex, end=\" \")\n        print(vertex in adjacencyList[vertex])\n    print()\n    # build the graph\n    graph = Graph()\n    # for each edge in the adjacency list\n    for e in adjacencyList:\n        # for each vertex\n        for v in e:\n            # add an edge to the graph\n            graph.addEdge(v, e)\n    # print the graph\n    graph.display()\n    # count the number of Eulerians\n    count = 0\n    # for each edge in the graph\n    for e in graph.getEdges():\n        # for each vertex\n        for v in e:\n            # if it's an eulerian edge\n            if graph.isEulerian(v):\n                # increment the count\n                count += 1\n    # print the answer\n    print(\"Eulerian number: \" + str(count))\n    return count\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    else:\n        return eulerian_num(n, m-1) + eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    from collections import defaultdict\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n==m: \n        return n\n    if n<m: \n        return eulerian_num(n, m-1) \n    return eulerian_num(n-1, m) + m \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def check_check(n, m):\n        def check_prime(n, m):\n            for i in range(n, m+1):\n                if i == 0 or i == 1:\n                    continue\n                if i % 2 == 0:\n                    continue\n                if i == 3 or i == 2:\n                    continue\n                if i == n:\n                    return False\n                if i == n-1:\n                    return True\n                if i == n-2:\n                    return False\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # read data\n    A = [int(i) for i in input().split()]\n    B = [int(i) for i in input().split()]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    length = len(input_list)\n    for i in range(length):\n        for j in range(length - i - 1):\n            if input_list[j][1] < input_list[j + 1][1]:\n                input_list[j], input_list[j + 1] = input_list[j + 1], input_list[j]\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # This method is to perform an in-place sort on the given input list of lists.\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        temp = input_list[i]\n        j = 0\n        for j in range(len(temp)):\n            if temp[j] =='':\n                input_list[i] = temp[:j] + temp[j+1:]\n            else:\n                input_list[i].insert(j, temp[j])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for element in input_list:\n        for i in element:\n            new_list.append(i)\n    new_list.sort()\n    new_list.reverse()\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list) == 0:\n        return\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = []\n    if len(input_list) < 1:\n        return output\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for sublist in input_list:\n        sublists.append([])\n        for item in sublist:\n            sublists[-1].append(item)\n    sorted_list = []\n    for sublist in sublists:\n        sorted_list.append([])\n        for item in sublist:\n            sorted_list[-1].append(item)\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for item in input_list:\n        sub_list = []\n        for i in range(0, len(item)):\n            sub_list.append(item[i])\n        output_list.append(sub_list)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # convert the list to a list of tuples\n    sub_lists = [[s.split() for s in l] for l in input_list]\n    \n    for i, l in enumerate(sub_lists):\n        for j, s in enumerate(l):\n            sub_lists[i][j] = (s, i)\n    \n    sub_lists = [sorted(x, key = lambda x: len(x[0]), reverse = True) for x in sub_lists]\n    \n    return sub_lists\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst = []\n    for i in lst:\n        if i == True:\n            lst.append(True)\n        else:\n            lst.append(False)\n    return len(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([elem for elem in lst if elem])\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst_count = []\n    for element in lst:\n        if element == True:\n            lst_count.append(1)\n        else:\n            lst_count.append(0)\n    return lst_count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #Remove all the duplicate elements from the lst\n    unique = []\n    for i in lst:\n        if i not in unique:\n            unique.append(i)\n    #If the element in the lst is in the unique list\n    if len(unique) == 1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    if lst == []:\n        return 0\n    else:\n        n = len(lst)\n        if lst[0] == True:\n            return n\n        else:\n            return count(lst[1:])\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_of_true = 0\n    for i in lst:\n        if i:\n            count_of_true += 1\n    return count_of_true\n    \n    # num = int(input(\"enter a number:\"))\n    # print(count(num))\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i == True:\n            count += 1\n        \n    print(count)\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    # your code goes here\n    \n    # loop through lst\n    for i in lst:\n        if(i == 't'):\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst_count = 0\n    for num in lst:\n        if num == True:\n            lst_count += 1\n    return lst_count\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_list = []\n    temp_tup = []\n    for item in test_list:\n        temp_list.append(item)\n    for item in test_tup:\n        temp_tup.append(item)\n    return temp_list, temp_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if test_list == []:\n        test_list.append(tup)\n    elif len(test_tup) == 1:\n        test_list.append(test_tup[0])\n    else:\n        test_tup.append(tup)\n    return test_list, test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + test_tup\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list += test_tup\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #write your code here\n    \n    # print(test_list)\n    # print(test_tup)\n    return test_list, test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    \n    return test_tup\n    \ndef add_lists_2(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    \n    return test_tup\n    \ndef add_tuples(test_tup):\n    '''\n    Write a function to append the given tuple to the given list.\n    '''\n    test_list += test_tup\n    \n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list) < len(test_tup):\n        for x in range(len(test_tup)-len(test_list)):\n            test_tup.append(())\n    test_tup.append(test_list)\n    \n    \n    "
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list+[tup for tup in test_tup]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(tup)\n    return test_list\n    \ndef remove_lists(test_list, test_tup):\n    '''\n    Write a function to remove the given list from the given tuple.\n    '''\n    for item in test_list:\n        if item not in test_tup:\n            test_tup.append(item)\n    return test_tup\n    \ndef first_item(test_list):\n    '''\n    Write a function that returns the first item in the given list.\n    '''\n    return test_list[0]\n    \ndef second_item(test_list):\n    '''\n    Write a function that returns the second item in the given list.\n    '''\n    return test_list[1]\n    \ndef third_item(test_list):\n    '''\n    Write a function that returns the third item in the given list.\n    '''\n    return test_list[2]\n    \ndef length(test_list):\n    '''\n    Write a function that returns the length of the given list.\n    '''\n    return len(test_list)\n    \ndef index(test_list, item):\n    '''\n    Write a function that returns the index of the given item in the given list.\n    '''\n    return test_list.index(item)\n    \ndef remove_first(test_list):\n    '''\n    Write a function that removes the item in the given list at index 1.\n    '''\n    return remove_lists(test_list, (first_item(test_list)))\n    \ndef remove_second(test_list):\n    '''\n    Write a function that removes the item in the given list at index 2.\n    '''\n    return remove_lists(test_list, (second_item(test_list)))\n    \ndef remove_third(test_list):\n    '''\n    Write a function that removes the item in the given list at index 3.\n    '''\n    return remove_lists(test_list, (third_item(test_list)))\n    \ndef search(test_list, item):\n    '''\n    Write a function that returns the index of the item in the given list.\n    '''\n    return index(test_list, item)\n    \ndef count_items(test_list):\n    '''\n    Write a function that returns the number of items in the given list.\n    '''\n    return len(test_list)\n    \ndef index_of_first(test_list):\n    '''\n    Write a function that returns the index of the first item in the given list.\n    '''\n    return test_list.index(first_item(test_list))\n    \ndef index_of_second(test_list):\n    '''\n    Write a function that returns the index of the second item in the given list.\n    '''\n    return test_list.index(second_item(test_list))\n    \ndef index_of_third(test_list):\n    '''\n    Write a function that returns the index of the third item in the given list.\n    '''\n    return test_list.index(third_item(test_list))\n    \ndef index_of_last(test_list):\n    '''\n    Write a function that returns the index of the last item in the given list.\n    '''\n    return test_list.index(last_item(test_list))\n    \ndef reverse_list(test_list):\n    '''\n    Write a function that reverses the given list.\n    '''\n    test_list[:] = test_list[::-1]\n    return test_list\n    \ndef sort_list(test_list):\n    '''\n    Write a function that sorts the given list in ascending order.\n    '''\n    test_list.sort()\n    return test_list\n    \ndef merge_lists(test_list):\n    '''\n    Write a function that merges the given lists.\n    '''\n    new_list = []\n    \n    for index in range(0, len(test_list)):\n        value = test_list[index]\n        new_list.append(value)\n    \n    return new_list\n    \ndef sort_list_recursive(test_list, test_tup):\n    '''\n    Write a function that sorts the given list in ascending order.\n    '''\n    if test_list[0] == test_tup[0]:\n        return\n    \n    if len(test_list) == 1:\n        test_list.append(test_tup[0])\n        return\n        \n    index = index_of_first(test_list)\n    first_tup = test_list[index]\n    test_list.pop(index)\n    test_list.insert(index, test_tup[0])\n    sort_list_recursive(test_list, test_tup)\n    \ndef merge_lists_recursive(test_list):\n    '''\n    Write a function that merges the given lists.\n    '''\n    if len(test_list) == 1:\n        return\n    \n    index = index_of_first(test_list)\n    first_tup = test_list[index]\n    test_list.pop(index)\n    test_list.insert(index, first_tup)\n    merge_lists_recursive(test_list)\n    \ndef remove_empty_lists(test_list):\n    '''\n    Write a function that removes all elements from the given list whose value is 0.\n    '''\n    test_list = remove_first(test_list)\n    test_list = remove_second(test_list)\n    test_list = remove_third(test_list)\n    test_list = remove_first(test_list)\n    test_list = remove_second(test_list)\n    test_list = remove_third(test_list)\n    test_list = remove_last(test_list)\n    \ndef remove_first_and_last(test_list):\n    '''\n    Write a function that removes the first item in the given list, and then the last item in the given list.\n    '''\n    test_list = remove_first(test_list)\n    test_list = remove_last(test_list)\n    \ndef reverse_list_recursive(test_list):\n    '''\n    Write a function that reverses the given list in ascending order.\n    '''\n    if len(test_list) == 1:\n        return\n    \n    index = index_of_first(test_list)\n    first_tup = test_list[index]\n    test_list.pop(index)\n    test_list.insert(index, first_tup)\n    reverse_list_recursive(test_list)\n    \ndef merge_lists_recursive(test_list):\n    '''\n    Write a function that merges the given lists.\n    '''\n    if len(test_list) == 1:\n        return\n    \n    index = index_of_first(test_list)\n    first_tup = test_list[index]\n    test_list.pop(index)\n    test_list.insert(index, first_tup)\n    merge_lists_recursive(test_list)\n    \ndef reverse_list_recursive(test_list):\n    '''\n    Write a function that reverses the given list in ascending order.\n    '''\n    if len(test_list) == 1:\n        return\n    \n    index = index_of_first(test_list)\n    first_tup = test_list[index]\n    test_list.pop(index)\n    test_list.insert(index, first_tup)\n    reverse_list_recursive(test_list)\n    \ndef find_first_and_last(test_list):\n    '''\n    Write a function that finds the first item in the given list, and then the last item in the given list.\n    '''\n    index = index_of_first(test_list)\n    first_tup = test_list[index]\n    test_list.pop(index)\n    test_list.insert(index, first_tup)\n    index_of_last = index_of_last(test_list)\n    last_item = test_list[index_of_last]\n    test_list.pop(index_of_last)\n    test_list"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted([num1,num2,num3])\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for i in range(len(num1)):\n        merged_list.append(num1[i] + num2[i] + num3[i])\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    temp=[]\n    for i in num1:\n        for j in num2:\n            if i<j:\n                temp.append(i)\n            else:\n                temp.append(j)\n    return temp\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = 0\n    while i < len(num1):\n        j = 0\n        while j < len(num2):\n            if num1[i] < num2[j]:\n                result.append(num1[i])\n                i += 1\n            else:\n                result.append(num2[j])\n                j += 1\n        result.append(num1[i:i + len(num2)])\n        i += len(num2)\n    result.extend(num3)\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    a = 0\n    b = 0\n    c = 0\n    while a < len(num1) and b < len(num2) and c < len(num3):\n        if num1[a] < num2[b] < num3[c]:\n            result.append(num1[a])\n            a += 1\n            b += 1\n            c += 1\n        elif num1[a] > num2[b] > num3[c]:\n            result.append(num2[b])\n            b += 1\n        elif num1[a] > num2[b] < num3[c]:\n            result.append(num3[c])\n            c += 1\n        elif num1[a] < num2[b] > num3[c]:\n            result.append(num1[a])\n            a += 1\n            b += 1\n            c += 1\n    while a < len(num1):\n        result.append(num1[a])\n        a += 1\n    while b < len(num2):\n        result.append(num2[b])\n        b += 1\n    while c < len(num3):\n        result.append(num3[c])\n        c += 1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    i = 0\n    j = 0\n    k = 0\n    n1 = num1[i]\n    n2 = num2[j]\n    n3 = num3[k]\n    while (i < len(num1) and j < len(num2) and k < len(num3)):\n        if (num1[i] > n1 and num2[j] > n2 and num3[k] > n3):\n            heapq.heappush(heap, (num1[i] + num2[j] + num3[k]))\n            i += 1\n            j += 1\n            k += 1\n        elif (num1[i] > n1 and num2[j] < n2 and num3[k] < n3):\n            heapq.heappush(heap, (num1[i] + num2[j] + num3[k]))\n            i += 1\n            j += 1\n            k += 1\n        elif (num1[i] > n1 and num2[j] < n2 and num3[k] > n3):\n            heapq.heappush(heap, (num1[i] + num2[j] + num3[k]))\n            i += 1\n            j += 1\n            k += 1\n        else:\n            j += 1\n    while len(heap) > 0:\n        print(\"heap: \",heap)\n        heapq.heappop(heap)\n    return(heap)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    if num1 == None and num2 == None and num3 == None:\n        return None\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    if num1 == None:\n        return None\n    elif num2 == None:\n        return None\n    elif num3 == None:\n        return None\n    elif num1 < num2:\n        list1.extend(num1)\n        list1.extend(num3)\n    else:\n        list2.extend(num2)\n        list2.extend(num3)\n    if len(list1) == len(list2):\n        return list1\n    elif len(list1) == len(list3):\n        return list3\n    elif len(list1) > len(list2):\n        for i in range(len(list1)-len(list3)):\n            heapq.heappush(list1,heapq.heappop(list2))\n    elif len(list2) > len(list3):\n        for i in range(len(list3)-len(list2)):\n            heapq.heappush(list2,heapq.heappop(list3))\n    return list1\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heappush(num1,num2)\n    heapq.heappush(num2,num3)\n    heapq.heappush(num3,num1)\n    # return num1,num2,num3\n    \n    \ndef merge_lists(num1,num2,num3):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    res = []\n    while(len(num1)>0 and len(num2)>0 and len(num3)>0):\n        if num1[0]<=num2[0] and num2[0]<=num3[0]:\n            res.append(num1[0])\n            heapq.heappop(num1)\n            heapq.heappop(num2)\n            heapq.heappop(num3)\n        elif num1[0]<num2[0] and num1[0]<=num3[0]:\n            res.append(num2[0])\n            heapq.heappop(num1)\n            heapq.heappop(num2)\n        else:\n            res.append(num3[0])\n            heapq.heappop(num3)\n            heapq.heappop(num1)\n    \n    if len(num1)==0:\n        while len(num2)>0:\n            res.append(num2[0])\n            heapq.heappop(num2)\n    if len(num2)==0:\n        while len(num3)>0:\n            res.append(num3[0])\n            heapq.heappop(num3)\n    return res\n    \n    \ndef merge_lists2(num1,num2,num3):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    if len(num1)==0:\n        res = []\n        while len(num2)>0:\n            res.append(num2[0])\n            heapq.heappop(num2)\n    elif len(num2)==0:\n        res = []\n        while len(num1)>0:\n            res.append(num1[0])\n            heapq.heappop(num1)\n    elif num1[0]<num2[0] and num1[0]<num3[0]:\n        res.append(num1[0])\n        heapq.heappop(num1)\n        heapq.heappop(num2)\n    else:\n        res.append(num3[0])\n        heapq.heappop(num3)\n        heapq.heappop(num1)\n    return res\n    \n    \n    \ndef merge_lists3(num1,num2,num3):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    if len(num1)==0:\n        res = []\n        while len(num2)>0:\n            res.append(num2[0])\n            heapq.heappop(num2)\n    elif len(num2)==0:\n        res = []\n        while len(num1)>0:\n            res.append(num1[0])\n            heapq.heappop(num1)\n    else:\n        res = []\n        while num1[0]<num2[0] and num1[0]<num3[0]:\n            res.append(num1[0])\n            heapq.heappop(num1)\n            heapq.heappop(num2)\n    return res\n        \n    \n    \ndef merge_lists4(num1,num2,num3):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    if len(num1)==0:\n        res = []\n        while len(num2)>0:\n            res.append(num2[0])\n            heapq.heappop(num2)\n    elif len(num2)==0:\n        res = []\n        while len(num1)>0:\n            res.append(num1[0])\n            heapq.heappop(num1)\n    else:\n        res = []\n        while num1[0]<num2[0] and num1[0]<num3[0]:\n            res.append(num1[0])\n            heapq.heappop(num1)\n            heapq.heappop(num2)\n    return res\n    \n    \ndef merge_lists5(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    if len(num1)==0:\n        res = []\n        while len(num2)>0:\n            res.append(num2[0])\n            heapq.heappop(num2)\n    elif len(num2)==0:\n        res = []\n        while len(num1)>0:\n            res.append(num1[0])\n            heapq.heappop(num1)\n    else:\n        res = []\n        while num1[0]<num2[0] and num1[0]<num3[0]:\n            res.append(num1[0])\n            heapq.heappop(num1)\n            heapq.heappop(num2)\n    return res\n    \n    \ndef merge_lists6(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    if len(num1)==0:\n        res = []\n        while len(num2)>0:\n            res.append(num2[0])\n            heapq.heappop(num2)\n    elif len(num2)==0:\n        res = []\n        while len(num1)>0:\n            res.append(num1[0])\n            heapq.heappop(num1)\n    else:\n        res = []\n        while num1[0]<num2[0] and num1[0]<num3[0]:\n            res.append(num1[0])\n            heapq.heappop(num1)\n            heapq.heappop(num2)\n    return res\n    \n    \n    \ndef merge_lists7(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    if len(num1)==0:\n        res = []\n        while len(num2)>0:\n            res.append(num2[0])\n            heapq.heappop(num2)\n    elif len(num2)==0:\n        res = []\n        while len(num1)>0:\n            res.append(num1[0])\n            heapq.heappop(num1)\n    else:\n        res = []\n        while num1[0]<num2[0] and num1[0]<num3[0]:\n            res.append(num1[0])\n            heapq.heappop(num1)\n            heapq.heappop(num2)\n    return res\n    \n    \ndef merge_lists8(num1,num2):\n    '''\n    Write a function to merge two sorted lists into a single sorted list.\n    '''\n    if len(num1)==0:\n        res = []\n        while len(num2)>0:\n            res.append(num2[0])\n            heapq.heappop(num2)\n    elif len(num2)==0:\n        res = []\n        while len(num1)>0:\n            res.append(num1[0])\n            heapq.heappop(num1)\n    else:\n        res = []\n        while num1[0]<num2[0] and num1[0]<num3"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Your code here\n    l = []\n    for i in range(n):\n        for j in range(2):\n            l.append(s[i] + s[i+j])\n    return len(l)\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res=0\n    for i in range(n):\n        res+=s[i]\n        if (res%2)!=0:\n            res-=1\n    return res\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2 == 0 and s[1] % 2 == 0: \n        return odd_Equivalent(lst,n-1) \n    else: \n        return odd_Equivalent(lst,n) \n \ndef odd_Exponent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2 == 0: \n        return odd_Exponent(lst,n-1) \n    else: \n        return odd_Exponent(lst,n) \n \ndef even_Exponent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2 == 0 and s[1] % 2!= 0: \n        return even_Exponent(lst,n-1) \n    else: \n        return even_Exponent(lst,n) \n \ndef odd_Number(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2!= 0 and s[1] % 2 == 0: \n        return odd_Number(lst,n-1) \n    else: \n        return odd_Number(lst,n) \n \ndef even_Number(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2 == 0 and s[1] % 2!= 0: \n        return even_Number(lst,n-1) \n    else: \n        return even_Number(lst,n) \n \ndef full_Power(s,n): \n    '''\n    Write a python function to find the number of full-power numbers when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2 == 0 and s[1] % 2 == 0: \n        return full_Power(lst,n-1) \n    else: \n        return full_Power(lst,n) \n \ndef odd_Power(s,n): \n    '''\n    Write a python function to find the number of odd-power numbers when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2!= 0 and s[1] % 2 == 0: \n        return odd_Power(lst,n-1) \n    else: \n        return odd_Power(lst,n) \n \ndef even_Power(s,n): \n    '''\n    Write a python function to find the number of even-power numbers when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2 == 0 and s[1] % 2!= 0: \n        return even_Power(lst,n-1) \n    else: \n        return even_Power(lst,n) \n \ndef power_Odd(s,n): \n    '''\n    Write a python function to find the number of even-power numbers when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2 == 0 and s[1] % 2 == 0: \n        return power_Odd(lst,n-1) \n    else: \n        return power_Odd(lst,n) \n \ndef power_Even(s,n): \n    '''\n    Write a python function to find the number of full-power numbers when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2!= 0 and s[1] % 2 == 0: \n        return power_Even(lst,n-1) \n    else: \n        return power_Even(lst,n) \n \ndef odd_powers(s,n): \n    '''\n    Write a python function to find the number of odd-power numbers when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2!= 0 and s[1] % 2 == 0: \n        return odd_powers(lst,n-1) \n    else: \n        return odd_powers(lst,n) \n \ndef even_powers(s,n): \n    '''\n    Write a python function to find the number of even-power numbers when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 1\n    \n    lst = [] \n    lst.append(s[0]) \n    for i in range(1, len(s), 2): \n        lst.append(s[i] + s[i+1]) \n    \n    if s[0] % 2 ="
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    print(n)\n    i=0\n    for i in range(0,n): \n        print(\"Value after rotation is \" + str(s[i]))\n        s[i] = s[i] * 2 % n\n        print(\"Value after rotation is \" + str(s[i]))\n    print(n)\n    print(s)\n    return s\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    cnt=0\n    for i in range(len(s)):\n        if s[i] % 2 == 1:\n            cnt += 1\n    return cnt \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    res=0\n    for i in range(n):\n        res+=int(s[i])\n    if res%2==0:\n        return n\n    else:\n        return n-1\ns=input(\"Enter the string :\")\nn=input(\"Enter the number of times you want the number to be rotated :\")\nprint(odd_Equivalent(s,int(n))"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    numbers=[]\n    for i in range(0,n):\n        numbers.append(i%2)\n    # print(numbers)\n    \n    for i in range(n,len(s)):\n        if (s[i]%2)==1:\n            # print(s[i])\n            numbers.remove(s[i%len(s)])\n            \n    print(numbers)\n    return numbers\n    \n    \nif __name__ == \"__main__\":\n    n=int(input(\"enter the number\"))\n    s=str(input(\"enter the string\"))\n    print(odd_Equivalent(s,n))\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables\n    count = 0\n    counter = 0\n    for i in range(len(s)):\n        if(i % 2 == 0):\n            count += 1\n            counter += 1\n    \n    return count,counter\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    odd = 0\n    for i in range(n):\n        if s[i] == '1':\n            odd += 1\n    return odd\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Base Case\n    if n==0:\n        return 1\n    # If it is even\n    if (s[0]=='1'):\n        return odd_Equivalent(s,n-1)\n    else:\n        return odd_Equivalent(s,n-1) + odd_Equivalent(s,n-2)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = sorted(nestedlist)\n    common_elements = []\n    for list in nestedlist:\n        if len(list) > 1:\n            common_elements.append(list[0])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # traverse through all nested list\n    for lst in nestedlist:\n        # if list is 1d\n        if type(lst)!= list:\n            # return\n            pass\n        elif len(lst)!= 1:\n            # traverse through all elements in list\n            for element in lst:\n                # if element is 1d\n                if type(element)!= list:\n                    # return\n                    pass\n                elif len(element)!= 1:\n                    # return\n                    pass\n                # check if list elements are equal and return the common element\n                else:\n                    common_list = element[0]\n                    return common_list\n        # if list is 1d\n        else:\n            # for each element\n            for element in lst:\n                # if element is 1d\n                if type(element)!= list:\n                    # return\n                    pass\n                elif len(element)!= 1:\n                    # return\n                    pass\n                # check if list elements are equal and return the common element\n                else:\n                    common_list = element[0]\n                    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for element in nestedlist:\n        if not isinstance(element, list):\n            common_list.append(element)\n            continue\n        elif not isinstance(element[0], list):\n            common_list.append(element[0])\n            continue\n        elif len(element) == 1:\n            common_list.append(element[0])\n        else:\n            common_list = common_list + common_in_nested_lists(element[1:])\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    output_list = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] == None:\n                output_list.append(None)\n            else:\n                output_list.append(nestedlist[i][j])\n    return output_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_list = []\n    for value in nestedlist:\n        if value in nested_list:\n            nested_list.remove(value)\n        else:\n            nested_list.append(value)\n    return nested_list\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    output = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            output.extend(common_in_nested_lists(i))\n        else:\n            output.append(i)\n    return output\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Find all element of the given list\n    common_elements = []\n    for element in nestedlist:\n        if type(element) is list:\n            common_elements.extend(common_in_nested_lists(element))\n        else:\n            common_elements.append(element)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    else:\n        return list(set.intersection(*map(set, nestedlist)))"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    "
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n    "
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if not dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if len(dict1) == 0:\n            return True\n        else:\n            return False\n    \n    \ndef num_list(list1):\n    '''\n    Write a function that takes a list as a parameter and returns a new list with only the values that are odd in the list.\n    '''\n    #Add your code here\n    odd_list = []\n    for value in list1:\n        if value % 2 == 0:\n            odd_list.append(value)\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # empty_dict = []\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        list1[i]['name'] = input('Please enter your name: ')\n        list1[i]['place'] = input('Please enter your current position in the world: ')\n        list1[i]['email'] = input('Please enter your email: ')\n        list1[i]['location'] = input('Please enter your current location in the world: ')\n    return list1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if list1[i] == {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for list1 in list1:\n        for list2 in list1:\n            if list2 == {}:\n                list2.clear()\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if type(x) is dict:\n            empty_dit(x.values())\n    \n    return len(list1) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    def int_to_tuple(nums):\n        '''\n        Write a function to convert a given tuple of integers into a tuple.\n        '''\n        def tuplize(nums):\n            '''\n            Write a function that turns a given tuple of integers into a tuple of just integers.\n            '''\n            def tuple_list(nums):\n                '''\n                Write a function that turns a given tuple of integers into a tuple of just integers.\n                '''\n                def tuplize(nums):\n                    '''\n                    Write a function that turns a given tuple of integers into a tuple of just integers.\n                    '''\n                    def int_to_tuple(nums):\n                        '''\n                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                        '''\n                        def tuplize(nums):\n                            '''\n                            Write a function that turns a given tuple of integers into a tuple of just integers.\n                            '''\n                            def int_to_tuple(nums):\n                                '''\n                                Write a function that turns a given tuple of integers into a tuple of just integers.\n                                '''\n                                def int_to_tuple(nums):\n                                    '''\n                                    Write a function that turns a given tuple of integers into a tuple of just integers.\n                                    '''\n                                    def num_tuple(nums):\n                                        '''\n                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                        '''\n                                        def num_list(nums):\n                                            '''\n                                            Write a function that turns a given tuple of integers into a tuple of just integers.\n                                            '''\n                                            def num_list(nums):\n                                                '''\n                                                Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                '''\n                                                def num_list(nums):\n                                                    '''\n                                                    Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                    '''\n                                                    def int_to_tuple(nums):\n                                                        '''\n                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                        '''\n                                                        def num_list(nums):\n                                                            '''\n                                                            Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                            '''\n                                                            def num_list(nums):\n                                                                '''\n                                                                Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                '''\n                                                                def num_list(nums):\n                                                                    '''\n                                                                    Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                    def num_list(nums):\n                                                                        '''\n                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                        def num_list(nums):\n                                                                            '''\n                                                                            Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                        '''\n                                                                            def num_list(nums):\n                                                                                    '''\n                                                                                Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                        '''\n                                                                                def num_list(nums):\n                                                                                        '''\n                                                                                    Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                        '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                        '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                        '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                        '''\n                                                                                def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                    def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                def num_list(nums):\n                                                                                        '''\n                                                                                        Write a function that turns a given tuple of integers into a tuple of just integers.\n                                                                    '''\n                                                                                def num_list(nums):\n                                                                                        ''"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for item in nums:\n        result = result * 10 + item\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    for num in nums:\n        i = i * 10 + num\n    return i\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    s = sum(nums)\n    return s\n    \n    \n    \ndef string_to_int(num):\n    '''\n    Write a function to convert a given string into a single integer.\n    '''\n    if num == \"\":\n        return 0\n    return int(num)\n    \n    \ndef reverse(string):\n    '''\n    Write a function that reverses a given string.\n    '''\n    return string[::-1]\n    \n    \ndef remove_useless_characters(string):\n    '''\n    Write a function that removes useless characters from a given string.\n    '''\n    return string.replace(\"'\", \"\").replace('\"', \"\").replace('(', \"\").replace(\")\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(',', \"\").replace(\".\", \"\")\n    \n    \ndef remove_digits(string):\n    '''\n    Write a function that replaces all the digits with spaces.\n    '''\n    return string.replace(\"123\", \" \").replace(\"456\", \" \").replace(\"562\", \" \").replace(\"69\", \" \").replace(\"7\", \" \").replace(\"5\", \" \").replace(\"28\", \" \").replace(\"7\", \" \").replace(\"8\", \" \").replace(\"12\", \" \").replace(\"4\", \" \").replace(\"5\", \" \").replace(\"6\", \" \").replace(\"7\", \" \").replace(\"5\", \" \").replace(\"5\", \" \").replace(\"8\", \" \").replace(\"4\", \" \").replace(\"8\", \" \").replace(\"6\", \" \").replace(\"5\", \" \").replace(\"7\", \" \").replace(\"2\", \" \").replace(\"6\", \" \").replace(\"4\", \" \").replace(\"4\", \" \").replace(\"7\", \" \").replace(\"6\", \" \").replace(\"7\", \" \").replace(\"9\", \" \").replace(\"8\", \" \")\n    \n    \ndef get_interval(start, end):\n    '''\n    Write a function that returns a list of all the integers from start to end.\n    '''\n    return list(range(start, end+1))\n    \n    \ndef get_interval_in_range(start, end, step):\n    '''\n    Write a function that returns a list of all the integers from start to end in a given range by step.\n    '''\n    return list(range(start, end+step, step))\n    \n    \ndef get_interval_in_range_out(start, end, step):\n    '''\n    Write a function that returns a list of all the integers from start to end in a given range by step.\n    '''\n    return list(range(start, end+step))\n    \n    \ndef get_all_intervals_from_range(start, end, step):\n    '''\n    Write a function that returns a list of all the integers from start to end in a given range by step.\n    '''\n    return [x for x in get_interval(start, end) if x % step == 0]\n    \n    \ndef get_interval_of_numbers(nums):\n    '''\n    Write a function that returns a list of the prime numbers in the given range.\n    '''\n    return [x for x in range(2, len(nums)+1) if all(nums[i] % x == 0 for i in range(len(nums)-1))]\n    \n    \ndef range_to_string(nums):\n    '''\n    Write a function that converts a list of integers to a string.\n    '''\n    return \"\".join(str(x) for x in nums)\n    \n    \ndef list_to_string(nums):\n    '''\n    Write a function that converts a list of integers to a string.\n    '''\n    return \" \".join(str(x) for x in nums)\n    \n    \ndef list_to_string_out(nums):\n    '''\n    Write a function that converts a list of integers to a string.\n    '''\n    return \" \".join(str(x) for x in nums)\n    \n    \ndef list_to_string_in(nums):\n    '''\n    Write a function that converts a list of integers to a string.\n    '''\n    return \" \".join(str(x) for x in nums)\n    \n    \ndef to_string(nums):\n    '''\n    Write a function that converts a list of integers to a string.\n    '''\n    return \"\".join(str(x) for x in nums)\n    \n    \ndef to_string_out(nums):\n    '''\n    Write a function that converts a list of integers to a string.\n    '''\n    return \" \".join(str(x) for x in nums)\n    \n    \ndef to_string_in(nums):\n    '''\n    Write a function that converts a list of integers to a string.\n    '''\n    return \" \".join(str(x) for x in nums)\n    \n    \ndef lcm_of_two_integers(x, y):\n    '''\n    Write a function that computes the lcm of two integers.\n    '''\n    return (x*y)/math.gcd(x,y)\n    \n    \ndef is_prime(x):\n    '''\n    Write a function that returns True if x is prime.\n    '''\n    if x == 2:\n        return True\n    if x == 3:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(x))+1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_out(x):\n    '''\n    Write a function that returns True if x is prime.\n    '''\n    if x == 2:\n        return True\n    if x == 3:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(x))+1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_in(x):\n    '''\n    Write a function that returns True if x is prime.\n    '''\n    if x == 2:\n        return True\n    if x == 3:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(x))+1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_in_out(x):\n    '''\n    Write a function that returns True if x is prime.\n    '''\n    if x == 2:\n        return True\n    if x == 3:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(x))+1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \n    \ndef count_primes(x):\n    '''\n    Write a function that returns the number of primes in the given range.\n    '''\n    if x == 2:\n        return 1\n    if x == 3:\n        return 2\n    if x % 2 == 0:\n        return 0\n    for i in range(3, int(math.sqrt(x))+1, 2):\n        if x % i == 0:\n            return 0\n    return 2 + count_primes(x//2)\n    \n    \ndef is_prime_in_range(x, range):\n    '''\n    Write a function that returns True if x is prime.\n    '''\n    if x == 2:\n        return True\n    if x == 3:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(x))+1, 2):\n        if x % i == 0:\n            return False\n    return True\n    \n    \ndef is_prime_in_range_out(x, range):\n    '''\n    Write a function that returns True if x is prime.\n    '''\n    if x == 2:\n        return True\n    if x == 3:\n        return True\n    if x % 2 == 0:\n    "
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    for i in range(0, len(nums), 1):\n        nums[i] = nums[i] + nums[i+1]\n    return nums[0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_nums = 0\n    for i in nums:\n        int_nums = int_nums * 10 + i\n    return int_nums\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # your code here\n    \n    return nums[0] + nums[1]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # TODO: use a for loop to do this\n    return [list(map(float,elem)) for elem in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    output = []\n    for item in test_list:\n        output.append(float(item))\n    return output\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for el in item:\n            try:\n                float(el)\n            except ValueError:\n                continue\n            else:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # this will allow me to use your equation to create floats\n    # list of lists contains all elements of the list\n    list_of_lists = []\n    # test the list of strings\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #convert the list to a float array\n    test_list_float = []\n    for row in test_list:\n        for element in row:\n            element = element.replace(',','.')\n            element = element.replace('.','.0')\n            element = element.replace(' ','')\n            test_list_float.append(float(element))\n    return test_list_float\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = list(map(float,test_list))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_to_float = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(len(test_list[i][j])):\n                list_to_float.append(float(test_list[i][j][k]))\n    return list_to_float\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    #print(\"list_to_float: test_list:\",test_list)\n    list_float = []\n    for sub_list in test_list:\n        list_float = list_float + sub_list\n    return list_float\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for row in test_list:\n        temp_list = []\n        for element in row:\n            if isinstance(element, str):\n                temp_list.append(float(element))\n            elif isinstance(element, list):\n                for subelement in element:\n                    if isinstance(subelement, str):\n                        temp_list.append(float(subelement))\n                    elif isinstance(subelement, list):\n                        for subelement_element in subelement:\n                            if isinstance(subelement_element, str):\n                                temp_list.append(float(subelement_element))\n                            elif isinstance(subelement_element, list):\n                                for subelement_element_element in subelement_element:\n                                    if isinstance(subelement_element_element, str):\n                                        temp_list.append(float(subelement_element_element))\n                                    elif isinstance(subelement_element_element, list):\n                                        for subelement_element_element_element_element in subelement_element_element:\n                                            if isinstance(subelement_element_element_element_element, str):\n                                                temp_list.append(float(subelement_element_element_element_element))\n                                            elif isinstance(subelement_element_element_element, list):\n                                                for subelement_element_element_element_element_element_element_element in subelement_element_element_element_element:\n                                                    if isinstance(subelement_element_element_element_element_element_element, str):\n                                                        temp_list.append(float(subelement_element_element_element_element_element))\n                                                    elif isinstance(subelement_element_element_element_element, list):\n                                                        for subelement_element_element_element_element_element_element_element_element in subelement_element_element_element_element_element:\n                                                            if isinstance(subelement_element_element_element_element_element_element, str):\n                                                                temp_list.append(float(subelement_element_element_element_element_element))\n                                                            elif isinstance(subelement_element_element_element_element, list):\n                                                                for subelement_element_element_element_element_element_element_element in subelement_element_element_element_element:\n                                                                    if isinstance(subelement_element_element_element_element_element, str):\n                                                                        temp_list.append(float(subelement_element_element_element_element))\n                                                                elif isinstance(subelement_element_element_element, list):\n                                                                        for subelement_element_element_element_element_element_element_element in subelement_element_element_element_element:\n                                                                            if isinstance(subelement_element_element_element_element, str):\n                                                                                temp_list.append(float(subelement_element_element_element))\n                                                                            elif isinstance(subelement_element_element_element, list):\n                                                                                for subelement_element_element_element_element_element_element_element in subelement_element_element_element:\n                                                                                    if isinstance(subelement_element_element_element_element, str):\n                                                                                        temp_list.append(float(subelement_element_element_element))\n                                                                                    elif isinstance(subelement_element_element_element, list):\n                                                                                        for subelement_element_element_element_element_element_element_element in subelement_element_element_element:\n                                                                                            if isinstance(subelement_element_element_element, str):\n                                                                                            temp_list.append(float(subelement_element_element_element))\n                                                                                        elif isinstance(subelement_element_element_element, list):\n                                                                                            for subelement_element_element_element_element_element_element_element in subelement_element_element_element:\n                                                                                                if isinstance(subelement_element_element_element, str):\n                                                                                                    temp_list.append(float(subelement_element_element_element))\n                                                                                        elif isinstance(subelement_element_element, list):\n                                                                                            for subelement_element_element_element_element_element_element_element in subelement_element_element_element:\n                                                                                                if isinstance(subelement_element_element_element, str):\n                                                                                                    temp_list.append(float(subelement_element_element_element))\n                                                                                        elif isinstance(subelement_element_element, list):\n                                                                                            for subelement_element_element_element_element_element_element in subelement_element_element_element:\n                                                                                                if isinstance(subelement_element_element, str):\n                                                                                                    temp_list.append(float(subelement_element_element))\n                                                                                        else:\n                                                                                                for subelement_element_element_element_element in subelement_element_element_element:\n                                                                                                    if isinstance(subelement_element_element, str):\n                                                                                                        temp_list.append(float(subelement_element_element))\n                                                                                        else:\n                                                                                                        for subelement_element_element_element_element in subelement_element_element:\n                                                                                                        if isinstance(subelement_element_element, str):\n                                                                                                            temp_list.append(float(subelement_element_element))\n                                                                                            else:\n                                                                                                            for subelement_element_element_element in subelement_element_element:\n                                                                                                            if isinstance(subelement_element_element, str):\n                                                                                                                    temp_list.append(float(subelement_element_element))\n                                                                                            else:\n                                                                                                                for subelement_element_element_element in subelement_element_element:\n                                                                                                                if isinstance(subelement_element_element, str):\n                                                                                                                        temp_list.append(float(subelement_element_element))\n                                                                                            else:\n                                                                                                                for subelement_element_element_element in subelement_element_element:\n                                                                                                                if isinstance(subelement_element_element, str):\n                                                                                                                            temp_list.append(float(subelement_element_element))\n                                                                                                    else:\n                                                                                                                for subelement_element_element_element in subelement_element_element:\n                                                                                                                if isinstance(subelement_element_element, str):\n                                                                                                                                temp_list.append(float(subelement_element_element))\n                                                                                                    else:\n                                                                                                                for subelement_element_element_element in subelement_element_element:\n                                                                                                                if isinstance(subelement_element_element, str):\n                                                                                                                                            temp_list.append(float(subelement_element_element))\n                                                                                                    else:\n                                                                                                                for subelement_element_element_element in subelement_element_element:\n                                                                                                                if isinstance(subelement_element_element, str):\n                                                                                                                                            temp_list.append(float(subelement_element_element))\n                                                                                                        else:\n                                                                                                                for subelement_element_element_element in subelement_element_element:\n                                                                                                                if isinstance(subelement_element_element, str):\n                                                                                                                                                temp_list.append(float(subelement_element_element))\n                                                                                                "
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [i for i in string.split(\" \") if i!= \"\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [ word.strip() for word in string.split(' ') ]\n    \ndef list_to_string(list): \n    '''\n    Write a function that takes a list and makes a string out of it.\n    '''\n    return''.join(list)\n    \ndef remove_punct(string):\n    '''\n    Write a function that removes punctuation from a string.\n    '''\n    return string.translate(str.maketrans(string.maketrans('', '', string.punctuation))).lower()\n    \ndef stem_words(string): \n    '''\n    Write a function that stems a word.\n    '''\n    return''.join([ word.capitalize() for word in string.split(' ') ])\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list1 = string.split(\" \")\n    return list1\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [w.strip() for w in string.split(' ')]\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split()\n    return string_list\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # T = O(n)\n    # S = O(1)\n    # count = 0\n    # count2 = 0\n    # for i in range(len(arr)):\n    #     count = count + 1\n    #     if arr[i]!= arr[i-1]:\n    #         count2 += 1\n    #         if count > count2:\n    #             count = count2\n    #             count2 = 0\n    #     else:\n    #         count2 = 0\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    from collections import Counter\n    counts = Counter(arr)\n    return counts[min(counts)]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    counter = dict()\n    # get the start index\n    start = 0\n    for i in range(len(arr)):\n        # if the current element is in the dictionary\n        if arr[i] in counter.keys():\n            # increment the counter\n            counter[arr[i]] += 1\n        else:\n            # add the current element to the counter\n            counter[arr[i]] = 1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    assert isinstance(arr,list), 'arr must be an array'\n    assert len(arr)>=1, 'arr must contain at least 1 element'\n    for i in range(len(arr)):\n        arr[i] = arr[i].lower()\n    lst = sorted(arr)\n    if len(lst) <= 1:\n        return lst[0]\n    for i in range(len(lst)-2):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    if not arr or len(arr) == 0:\n        return None\n    \n    min = arr[0]\n    \n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] == min:\n            return i\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l = len(arr)\n    for i in range(0,l):\n        j = i+1\n        while j<l:\n            if arr[j]!= arr[i]:\n                if arr[i] < arr[j]:\n                    arr[i],arr[j] = arr[j],arr[i]\n                j+=1\n            else:\n                j+=1\n        if i==0:\n            arr[i] = arr[j]\n        else:\n            if arr[i]!= arr[j]:\n                arr[i],arr[j] = arr[j],arr[i]\n    return arr"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #sorting\n    arr.sort()\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Write your code here. Make sure the elements in the array are in sorted order.\n    count=0\n    for i in range(len(arr)):\n        if arr[i]!=arr[count]:\n            count+=1\n            arr[count]=arr[i]\n    print(count)\n    return count\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return -1\n    \n    key = arr[0]\n    n = len(arr)\n    \n    for i in range(1, n):\n        if arr[i] == key:\n            return i\n    \n    return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    pairs = [(list1[i],list1[i+1]) for i in range(len(list1)-1)]\n    for i in range(len(pairs)):\n        if pairs[i][0] < pairs[i+1][1]:\n            max = pairs[i][0] * pairs[i][1]\n        elif pairs[i][1] < pairs[i+1][0]:\n            max = pairs[i][1] * pairs[i][0]\n        else:\n            print('Invalid input')\n            exit()\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError(\"Please provide at least two tuples as input\")\n    elif len(list1) == 2:\n        return list1[0][0] * list1[1][0] + list1[0][1] * list1[1][1]\n    else:\n        greater_product = list1[0][0] * list1[1][1]\n        less_product = list1[0][1] * list1[1][0]\n        for i in range(2, len(list1)):\n            greater_product = greater_product * list1[i][0]\n            less_product = less_product * list1[i][1]\n        return greater_product if less_product > greater_product else lesser_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    if len(list1) == 0:\n        return 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1)):\n            if list1[i][1] < list1[j][1]:\n                max_prod = max(list1[j][0] * list1[i][0], max_prod)\n            else:\n                max_prod = max(list1[i][0] * list1[j][1], max_prod)\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            k = list1[i][0]*list1[j][0]\n            if k > max:\n                max = k\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        raise ValueError(\"Invalid list\")\n    elif len(list1) == 1:\n        return list1[0][0]*list1[0][1]\n    else:\n        max1 = list1[0][0]*list1[0][1]\n        max2 = list1[1][0]*list1[1][1]\n        for i in range(2,len(list1)):\n            max1 = max(max1,list1[i][0]*list1[i][1])\n            max2 = max(max2,list1[i][1]*list1[i][0])\n        return max(max1,max2)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            if (list1[i][0] + list1[j][0]) > (list1[i][1] + list1[j][1]):\n                if (list1[i][0] * list1[j][1]) > max:\n                    max = (list1[i][0] * list1[j][1])\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    l = list1\n    max_p = 0\n    max_p_index = 0\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            p = l[i][1] * l[j][1]\n            if p > max_p:\n                max_p = p\n                max_p_index = i\n    return max_p,max_p_index\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    t = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i][0] < list1[j][0] and list1[i][1] < list1[j][1]:\n                t.append([list1[i][0],list1[j][0],list1[i][1],list1[j][1]])\n    return max(t)\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    if len(list1) < 1:\n        return 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            current_product = list1[i] * list1[j]\n            if current_product > max_product:\n                max_product = current_product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = -1\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product > max_prod:\n                max_prod = product\n    return max_prod\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if sum(list(filter(lambda x: x%i==0, range(i))))==i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        temp_nums = []\n        for i in range(1,num):\n            for j in range(1,i):\n                if (i%j)==0 and (i+j)%num==0:\n                    temp_nums.append(i)\n                    break\n        return len(temp_nums)==0\n    sum = 0\n    for i in range(1,limit):\n        if is_amicable(i)==True:\n            sum += i\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    \n    for num in range(1, limit + 1):\n        is_amicable = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_amicable = False\n                break\n        if is_amicable:\n            sum += num\n            \n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers_num = []\n    sum_of_amicable_numbers = 0\n    \n    for i in range(1,limit+1):\n        num = i\n        sum_of_amicable_numbers = 0\n        \n        while num!= 1:\n            if num % 10 == 0:\n                sum_of_amicable_numbers += num\n                break\n            else:\n                sum_of_amicable_numbers += num\n                num //= 10\n        \n        if sum_of_amicable_numbers not in amicable_numbers:\n            amicable_numbers.append(sum_of_amicable_numbers)\n            amicable_numbers_num.append(num)\n            \n    return amicable_numbers, amicable_numbers_num\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = {}\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    def is_amicable(n):\n        divisors = 0\n        # Find divisors, from 2 to n,\n        # for example, 2 = 1, 3 = 1, 4 = 2, 6 = 3, 8 = 4\n        for d in range(2, n + 1):\n            # Check if the divisors of d are divisible by d\n            # If it is, then the divisors are not amicable, so it is not a divisor\n            if not (d % d):\n                continue\n            else:\n                divisors += d\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    # sum all numbers up to the sum of the squares of numbers\n    # that are divisible by both 1 and 2\n    for i in range(0, limit):\n        a = i + 1\n        for j in range(0, i):\n            if (a%2 == 0 and a%3 == 0) or (a%2 == 0 and a%3 == 1):\n                a = a/2\n            else:\n                a = a/3\n        if a not in amicable_numbers:\n            amicable_numbers.append(a)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = set()\n    for i in range(1, limit + 1):\n        if i == int(i):\n            pass\n        else:\n            for j in range(1, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    break\n            else:\n                amicable.add(int(i))\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i == 1:\n            continue\n        for j in range(i + 1, limit + 1):\n            if i + j == j:\n                continue\n            if i + j == j and i!= j:\n                amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_list = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_list.append(i)\n    return sum(amicable_list)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        # Get the real part\n        a_real = a.real\n        b_real = b.real\n        # Get the imaginary part\n        a_imag = a.imag\n        b_imag = b.imag\n        if a_imag == b_imag:\n            a_complex = a_imag\n            b_complex = b_imag\n            angle = 0\n        else:\n            a_complex = -b_imag\n            b_complex = b_imag\n            angle = cmath.acos(a_complex / a_complex)\n    except:\n        print('Complex number not found!')\n        angle = -1\n        return angle\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = math.acos( (cmath.sqrt(b.real**2 + b.imag**2)) / (cmath.sqrt(a.real**2 + a.imag**2)) )\n    angle = round(angle,6)\n    return angle\ndef angle_real(a,b):\n    '''\n    Write a function to get the real part of a complex number.\n    '''\n    angle = math.acos( (cmath.sqrt(b.real**2 + b.imag**2)) / (cmath.sqrt(a.real**2 + a.imag**2)) )\n    angle = round(angle,6)\n    return angle\ndef angle_imag(a,b):\n    '''\n    Write a function to get the imaginary part of a complex number.\n    '''\n    angle = math.acos( (cmath.sqrt(b.real**2 + b.imag**2)) / (cmath.sqrt(a.real**2 + a.imag**2)) )\n    angle = round(angle,6)\n    return angle\ndef angle_complex_print(a,b):\n    '''\n    Write a function to print the angle of a complex number.\n    '''\n    print(angle_complex(a,b))\ndef angle_real_print(a,b):\n    '''\n    Write a function to print the real part of a complex number.\n    '''\n    print(angle_real(a,b))\ndef angle_imag_print(a,b):\n    '''\n    Write a function to print the imaginary part of a complex number.\n    '''\n    print(angle_imag(a,b))\ndef angle_complex_graph(a,b):\n    '''\n    Write a function to graph the angle of a complex number.\n    '''\n    angle = []\n    while a.real!= b.real:\n        if b.real == 0:\n            angle.append(angle_complex(a,b))\n        else:\n            angle.append(angle_real(a,b))\n        a = b\n        b = -b\n    angle.append(angle_imag(a,b))\n    return angle\ndef angle_real_graph(a,b):\n    '''\n    Write a function to graph the real part of a complex number.\n    '''\n    angle = []\n    while a.real!= 0:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = -b.imag\n    angle.append(angle_imag(a,b))\n    return angle\ndef angle_imag_graph(a,b):\n    '''\n    Write a function to graph the imaginary part of a complex number.\n    '''\n    angle = []\n    while a.real!= b.real:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = -b.real\n    angle.append(angle_imag(a,b))\n    return angle\ndef angle_complex_graph_print(a,b):\n    '''\n    Write a function to print the angle of a complex number.\n    '''\n    print(angle_complex(a,b))\ndef angle_real_graph_print(a,b):\n    '''\n    Write a function to print the real part of a complex number.\n    '''\n    print(angle_real(a,b))\ndef angle_imag_graph_print(a,b):\n    '''\n    Write a function to print the imaginary part of a complex number.\n    '''\n    print(angle_imag(a,b))\ndef angle_complex_graph_print_equal(a,b):\n    '''\n    Write a function to print the angle of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= b.real:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = b.real\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle_real_graph_print_equal(a,b):\n    '''\n    Write a function to print the real part of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= 0:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = -b.imag\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle_imag_graph_print_equal(a,b):\n    '''\n    Write a function to print the imaginary part of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= b.real:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = b.real\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle_complex_graph_print_equal(a,b):\n    '''\n    Write a function to print the angle of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= b.real:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = b.real\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle_complex_graph_print_equal(a,b):\n    '''\n    Write a function to print the angle of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= b.real:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = b.real\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle_complex_graph_print_equal_real(a,b):\n    '''\n    Write a function to print the angle of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= b.real:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = b.real\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle_complex_graph_print_equal_imag(a,b):\n    '''\n    Write a function to print the angle of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= b.imag:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = b.imag\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle_complex_graph_print_equal_real_imag(a,b):\n    '''\n    Write a function to print the angle of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= b.real:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = b.real\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle_complex_graph_print_equal_real_imag(a,b):\n    '''\n    Write a function to print the angle of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= b.real:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = b.real\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle_complex_graph_print_equal_imag_real(a,b):\n    '''\n    Write a function to print the angle of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= b.imag:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = b.imag\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle_complex_graph_print_equal_imag_real(a,b):\n    '''\n    Write a function to print the angle of a complex number with equal parts.\n    '''\n    angle = []\n    while a.real!= b.real:\n        angle.append(angle_complex(a,b))\n        a = a.real\n        b = b.real\n    angle.append(angle_complex(a,b))\n    return angle\ndef angle"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(a) - cmath.phase(b)) % (2*cmath.pi)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    return (c.imag**2 + c.real**2)**0.5\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = b.conjugate()\n    a_ang = cmath.phase(a.real*cmath.exp(1j*2*a.imag*b.real)-a.imag*cmath.exp(1j*2*a.imag*b.real),b.real)\n    return a_ang\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang1 = b.real\n    ang2 = b.imag\n    ang1_c = cmath.exp(ang1)\n    ang2_c = cmath.exp(ang2)\n    #convert real and imaginary parts\n    ang1_c = ang1_c.real\n    ang2_c = ang2_c.real\n    #convert to complex\n    ang1_c = cmath.complex(ang1_c)\n    ang2_c = cmath.complex(ang2_c)\n    #find angle between real and complex numbers\n    if (ang1_c.real < 0.0):\n        ang1_c = -1.0*ang1_c\n    if (ang2_c.real < 0.0):\n        ang2_c = -1.0*ang2_c\n    #convert to absolute value\n    ang1_c = cmath.abs(ang1_c)\n    ang2_c = cmath.abs(ang2_c)\n    #find the angle\n    ang1_c = float(ang1_c)/float(ang1_c.real)\n    ang2_c = float(ang2_c)/float(ang2_c.real)\n    #return the result\n    return (ang1_c,ang2_c)"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return a.real+b.imag*1j\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta = cmath.acos(a.real)\n    phi = cmath.acos(b.real)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        import numpy as np\n        print(\"Please enter a complex number: \")\n        a = float(input())\n        print(\"Please enter a complex number: \")\n        b = float(input())\n        c = np.arccos((a**2 + b**2 - 1) / (2*a*b))\n        print(\"The angle is:\", c)\n        return c\n    except:\n        print(\"Enter a complex number.\")\n        angle_complex(a,b)\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = complex(a,b)\n    x = cmath.angle(c)\n    return x\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    differences = 0\n    for char in string:\n        if char == 0:\n            differences += 1\n    return differences\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    difference = 0\n    for i in range(len(string)-1):\n        if string[i] == string[i+1] and string[i] == '0':\n            difference += 1\n        elif string[i] == string[i+1] and string[i] == '1':\n            difference -= 1\n        else:\n            pass\n    return difference\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    start_char = 0\n    end_char = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            start_char += 1\n        if string[i] == '1':\n            end_char += 1\n        \n        if start_char == end_char:\n            max_diff = max(max_diff, end_char - start_char)\n            start_char = 0\n            end_char = 0\n    \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) < 1:\n        raise Exception('Bad input')\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    res = 0 \n    a = 0\n    if (len(string) % 2) == 1: \n        a = int(len(string)/2)\n    else:\n        a = int(len(string)/2) + 1\n    for i in range(0,len(string), a): \n        b = int(string[i:i+a])\n        res = max(res, b - a)\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # TODO: Write your code here\n    \n    #if string == \"\":\n    #    return 0\n    \n    str = \"\"\n    for char in string:\n        if char == \"0\":\n            str += \"1\"\n        else:\n            str += \"0\"\n    l = len(str)\n    res = l\n    #print(res)\n    \n    for i in range(1, l):\n        if str[i-1] == \"1\" and str[i] == \"1\":\n            res -= 1\n        else:\n            res += 1\n    \n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    sub_string_list = []\n    for s in string: \n        sub_string_list.append(s)\n    \n    sub_string_list.sort()\n    \n    # print(sub_string_list)\n    # print(sub_string_list.count('0'))\n    # print(sub_string_list.count('1'))\n    \n    print(len(sub_string_list))\n    \n    return len(sub_string_list)-sub_string_list[0].count('0') - sub_string_list[-1].count('1')\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    c = 0\n    n = len(string)\n    for i in range(n):\n        if string[i] == '0':\n            c += 1\n        else:\n            c = 0\n        if c == n - 1:\n            return i\n    return -1\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    sum = 0\n    for i in range(length):\n        if string[i] == \"0\":\n            sum += 1\n        else:\n            sum -= 1\n    return su"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    l = len(string)\n    i = 0\n    while i < l:\n        if string[i] == \"0\":\n            count += 1\n        else:\n            count -= 1\n        i += 1\n    return count\n    \nstring
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a<b:\n        a,b = b,a\n    s = 0\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            s+=i\n    return s\nprint(sum(7,13))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    from itertools import combinations\n    def sum_of_divisors(x):\n        divisors = [x]\n        while x % 2 == 0:\n            divisors.append(x // 2)\n            x = x // 2\n        if x == 1:\n            divisors.append(1)\n        else:\n            divisors.append(x)\n        return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if a==0: \n        return 0\n    elif b==0: \n        return 1\n    elif a==b: \n        return 1\n    elif a<b: \n        return sum(a,b-a)\n    else: \n        return sum(b,a-b)\n    \ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==0: \n        return 1\n    else: \n        return n*factorial(n-1)\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s = 0\n    if a==0:\n        s+=b\n    else:\n        for i in range(1,a+1):\n            if(a%i==0):\n                s+=i\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=0\n    for i in range(a,b):\n        if a%i==0 and b%i==0:\n            c+=i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    lst = []\n    for i in range(1,a):\n        if a%i==0:\n            lst.append(i)\n    if b==0:\n        return 0\n    elif b in lst:\n        return b\n    else:\n        return a+sum(b,lst)\ndef main():\n    print(sum(5,8))\nif __name__=='__main__':\n    main("
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if (b == 0):\n        return a\n    elif (a % b == 0):\n        return a//b\n    else:\n        return a+b"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0: \n        return b \n    elif b == 0: \n        return a \n    else: \n        if a % b == 0: \n            return b \n        else: \n            return a % b \n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    if a==0:\n        return b\n    elif b==0:\n        return a\n    else:\n        return sum(a,b//math.gcd(a,b))\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int or type(b)!= int: \n        return \n    l = []\n    for i in range(a,b): \n        if i % 2 == 0: \n            l.append(i/2) \n        else: \n            l.append(i) \n    return sum(l)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef add_ints(x, y):\n    '''\n    Write a function to add two integers.\n    '''\n    return x + y\n    \ndef subtract_ints(x, y):\n    '''\n    Write a function to subtract two integers.\n    '''\n    return x - y\n    \ndef divide_ints(x, y):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x / y\n    \ndef square_ints(x):\n    '''\n    Write a function to square two integers.\n    '''\n    return x * x\n    \ndef square_decimal(x):\n    '''\n    Write a function to square two integers.\n    '''\n    return x * x\n    \ndef subtract_decimal(x):\n    '''\n    Write a function to subtract two integers.\n    '''\n    return x - x\n    \ndef divide_decimal(x):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x / x\n    \ndef subtract_decimal_from_int(x):\n    '''\n    Write a function to subtract two integers.\n    '''\n    return x - x\n    \ndef add_decimal_from_int(x):\n    '''\n    Write a function to add two integers.\n    '''\n    return x + x\n    \ndef multiply_decimal_from_int(x):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * x\n    \ndef divide_decimal_from_int(x):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x / x\n    \ndef square_decimal_from_int(x):\n    '''\n    Write a function to square two integers.\n    '''\n    return x * x\n    \ndef square_decimal_from_str(x):\n    '''\n    Write a function to square two integers.\n    '''\n    return x * x\n    \ndef square_decimal_from_string(x):\n    '''\n    Write a function to square two integers.\n    '''\n    return x * x\n    \ndef exponent(x, y):\n    '''\n    Write a function to do an exponent\n    '''\n    return x ** y\n    \ndef multiply_decimal_from_str(x):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * x\n    \ndef multiply_decimal_from_string(x):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * x\n    \ndef add_decimal_from_string(x):\n    '''\n    Write a function to add two integers.\n    '''\n    return x + x\n    \ndef divide_decimal_from_string(x):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x / x\n    \ndef divide_decimal_from_str(x):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x / x\n    \ndef square_decimal_from_str(x):\n    '''\n    Write a function to square two integers.\n    '''\n    return x * x\n    \ndef divide_decimal_from_str(x):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x / x\n    \ndef square_decimal_from_string(x):\n    '''\n    Write a function to square two integers.\n    '''\n    return x * x\n    \ndef subtract_decimal_from_string(x):\n    '''\n    Write a function to subtract two integers.\n    '''\n    return x - x\n    \ndef divide_decimal_from_string(x):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x / x\n    \ndef subtract_decimal_from_int(x):\n    '''\n    Write a function to subtract two integers.\n    '''\n    return x - x\n    \ndef divide_decimal_from_int(x):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x / x\n    \ndef subtract_decimal_from_string(x):\n    '''\n    Write a function to subtract two integers.\n    '''\n    return x - x\n    \ndef calculate_sum_ints(numbers):\n    '''\n    Write a function that calculates the sum of two integers.\n    '''\n    return sum(numbers)\n    \ndef add_ints_decimal(numbers):\n    '''\n    Write a function that adds two integers using decimal functions.\n    '''\n    return float(add_decimal(numbers))\n    \ndef subtract_ints_decimal(numbers):\n    '''\n    Write a function that subtracts two integers using decimal functions.\n    '''\n    return float(subtract_decimal(numbers))\n    \ndef multiply_ints_decimal(numbers):\n    '''\n    Write a function that multiplies two integers using decimal functions.\n    '''\n    return float(multiply_decimal(numbers))\n    \ndef divide_ints_decimal(numbers):\n    '''\n    Write a function that divides two integers using decimal functions.\n    '''\n    return float(divide_decimal(numbers))\n    \ndef square_ints_decimal(numbers):\n    '''\n    Write a function that squares two integers using decimal functions.\n    '''\n    return float(square_decimal(numbers))\n    \ndef square_ints_string(numbers):\n    '''\n    Write a function that squares two integers using string functions.\n    '''\n    return float(square_strings(numbers))\n    \ndef square_decimal_strings(numbers):\n    '''\n    Write a function that squares two integers using decimal functions.\n    '''\n    return float(square_strings(numbers))\n    \ndef square_decimal_strings_int(numbers):\n    '''\n    Write a function that squares two integers using decimal functions.\n    '''\n    return float(square_strings(numbers))\n    \ndef square_decimal_strings_int_int(numbers):\n    '''\n    Write a function that squares two integers using decimal functions.\n    '''\n    return float(square_strings(numbers))\n    \ndef square_decimal_strings_int_string(numbers):\n    '''\n    Write a function that squares two integers using decimal functions.\n    '''\n    return float(square_strings(numbers))\n    \ndef divide_decimal_strings_int_string(numbers):\n    '''\n    Write a function that divides two integers using decimal functions.\n    '''\n    return float(divide_decimal_strings(numbers))\n    \ndef divide_decimal_strings_int_string_int(numbers):\n    '''\n    Write a function that divides two integers using decimal functions.\n    '''\n    return float(divide_decimal_strings(numbers))\n    \ndef multiply_decimal_strings_string_int(numbers):\n    '''\n    Write a function that multiplies two integers using decimal functions.\n    '''\n    return float(multiply_decimal_strings(numbers))\n    \ndef multiply_decimal_strings_string_int(numbers):\n    '''\n    Write a function that multiplies two integers using decimal functions.\n    '''\n    return float(multiply_decimal_strings(numbers))\n    \ndef add_decimal_strings_string_int(numbers):\n    '''\n    Write a function that adds two integers using decimal functions.\n    '''\n    return float(add_decimal_strings(numbers))\n    \ndef divide_decimal_strings_string_int(numbers):\n    '''\n    Write a function that divides two integers using decimal functions.\n    '''\n    return float(divide_decimal_strings(numbers))\n    \ndef divide_decimal_strings_string_int_int(numbers):\n    '''\n    Write a function that divides two integers using decimal functions.\n    '''\n    return float(divide_decimal_strings(numbers))\n    \ndef multiply_strings_string_int(numbers):\n    '''\n    Write a function that multiplies two integers usin"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    x = int(x)\n    y = int(y)\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # hint: you can do the math modulus(integer division) operation\n    print(x, \"/\", y, \"=\", x*y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if type(x)!= int and type(y)!= int:\n        raise TypeError('x and y must be of int type.')\n    x = int(x)\n    y = int(y)\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # YOUR CODE HERE\n    x = x * y\n    return x\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    x = str(x)\n    y = str(y)\n    if len(x) > len(y):\n        return int(x) * int(y)\n    elif len(y) > len(x):\n        return int(y) * int(x)\n    else:\n        return int(x) * int(y)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Shorten the list of words\n    # (using a set in a dict)\n    # Your return list is a set\n    str = set(str.lower().split())\n    # list of words\n    long_words = []\n    # for each word\n    for word in str:\n        # if len(word) >= n:\n        #     # add the word to the set of words\n        #     long_words.append(word)\n        if len(word) > n:\n            # add the word to the set of words\n            long_words.append(word)\n    # return the set of words\n    return set(long_words)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = [word for word in str if len(word) > n]\n    return long\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split(\" \"):\n        if len(word) > n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = list(str.lowercase)\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return \" \".join(long_words)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # if len(str) > n:\n    #     return \n    # else:\n    #     return [i for i in str if len(i) > n]\n    \n    words = [s for s in str.split() if len(s) > n]\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    # Get a copy of the string\n    str = str.split()\n    \n    # Returns a list of words\n    return [word for word in str if len(word) > n]\n    \n    \ndef remove_punctuation(str):\n    '''\n    Removes all punctuation marks in a string and returns it.\n    '''\n    \n    # Create a new variable, l\n    l = list(str)\n    \n    # Remove all punctuation marks from l\n    for i in range(len(l)):\n        if l[i] == \" \":\n            l[i] = \"\"\n    \n    # Return string with punctuation removed\n    return \"\".join(l)\n    \n    \ndef remove_stop_words(lst):\n    '''\n    Removes all stop words in a list of words and returns it.\n    '''\n    \n    # Get a copy of the list\n    l = lst.copy()\n    \n    # Filter out stop words from the list\n    l = list(filter(lambda x: x!= \"\", l))\n    \n    # Return list of stop words\n    return l\n    \n    \ndef read_text(text_path):\n    '''\n    Read the contents of the given text file and return it as a string.\n    '''\n    \n    # Open the file\n    file = open(text_path, \"r\")\n    \n    # Read the file line by line\n    return file.read()\n    \n    \ndef read_numbers(n):\n    '''\n    Read a list of n integers and return it as a list.\n    '''\n    \n    # Create an empty list\n    nums = []\n    \n    # Read the integers from file\n    for i in range(n):\n        nums.append(int(input()))\n    \n    # Return the list\n    return nums\n    \n    \ndef get_longest_word(str, n):\n    '''\n    Returns the longest word in a list of words from a given string and an integer.\n    '''\n    \n    # Create an empty list\n    max_length = []\n    \n    # Convert the input string to a list\n    l = list(str.split())\n    \n    # Get the length of the longest word\n    for i in range(len(l)):\n        if len(l[i]) > max(max_length):\n            max_length = l[i]\n    \n    # Return the word in the list\n    return max_length\n    \n    \ndef main():\n    '''\n    Main function.\n    '''\n    \n    print(\"Enter the name of the file\")\n    file_name = input()\n    \n    print(\"Enter the word list in the file\")\n    file_list = input()\n    \n    n = int(input(\"How many words do you want to output? \"))\n    \n    print(f\"The word list is: \\n{file_list}\\n\")\n    \n    print(f\"\\n\\nThe longest word in the list is: \\n{get_longest_word(file_list, n)}\")\n    \n    print(f\"\\n\\nThe words in the file are: \\n{read_text(file_name)}\")\n    \n    print(f\"\\n\\nThe list of words is: \\n{remove_punctuation(read_text(file_name))}\\n\")\n    \n    print(f\"\\n\\nThe numbers in the file are: \\n{read_numbers(n)}\")\n    \n    print(\"\\n\\nThis is the output:\\n\")\n    \n    print(remove_stop_words(read_text(file_name)))\n    \n    print(\"\\n\\nThis is the output:\\n\")\n    \n    print(remove_punctuation(read_text(file_name)))\n    \n    print(\"\\n\\nThis is the output:\\n\")\n    \n    print(remove_stop_words(read_text(file_name)))\n    \n    \n    \nif __name__ == \"__main__\":\n    main()\n    \n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for word in str.split():\n        if len(word) > n:\n            yield word\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Create a dictionary to store the word counts\n    d = {}\n    # Iterate through string and count the word's length\n    for word in str:\n        d[word] = d.get(word, 0) + 1\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # your code here\n    return\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for i in range(n):\n        result.append(str.split())\n    return result\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    i = 0\n    j = size - 1\n    while i < size and j >= 0:\n        if my_matrix[i][j]!= 1:\n            break\n        if i == 0:\n            j = j - 1\n        elif j == size - 1:\n            i = i + 1\n        else:\n            i = i - 1\n            j = j + 1\n    return i == 0 or j == size - 1\n    \ndef is_magic_square(my_matrix):\n    '''\n    Write a function to check whether a matrix is a magic square.\n    '''\n    i = size - 1\n    j = size - 1\n    while i >= 0 and j >= 0:\n        if my_matrix[i][j]!= 1:\n            return False\n        if i == 0:\n            j = j - 1\n        elif j == size - 1:\n            i = i + 1\n        else:\n            i = i - 1\n            j = j + 1\n    return True\n    "
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #Your code goes here\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]) == 0:\n        return True\n    \n    for row in my_matrix:\n        for cell in row:\n            if cell == 0:\n                return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # You can assume that a matrix is a square of the same size\n    # Each row should be a square of same size\n    # Each column should be a square of the same size\n    # so rows should be even and columns should be odd\n    # Time complexity: O(n^2)\n    # Space Complexity: O(n^2)\n    # hanning = square of sqrt(n)\n    #\n    # Return True if the matrix is a magic square, and False otherwise\n    #\n    # You will be given an array of N x N square matrices.\n    # Here, N = rows, columns.\n    # For each row, calculate the sum of the row sum.\n    # For each column, calculate the sum of the row sum.\n    #\n    # You will not be given a matrix of the same size as the test matrix.\n    #\n    # If you can calculate the square of each row/column, it is a magic square.\n    #\n    # If not, it is not a magic square.\n    #\n    # You may assume all the values in the matrix are between 1 and 9.\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Note that this can work with any matrix\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[0])):\n            # Check if each cell is a square\n            if my_matrix[i][j] == 'x':\n                if i == j:\n                    # If both cells are the same\n                    # check if either is greater\n                    if my_matrix[i][j - 1] > my_matrix[i][j + 1] or my_matrix[i][j - 1] > my_matrix[i][j + 1]:\n                        # return True\n                        return True\n    # Check if cell has all the elements\n    if all(my_matrix[i][j] == 'x' for i in range(0, len(my_matrix)) for j in range(0, len(my_matrix[0]))):\n        # Return False\n        return False\n    # Check for a zero cell\n    if sum(i for i in my_matrix[i] if i!= 'x')!= 0:\n        # Return False\n        return False\n    # Check for a zero diagonal cells\n    if sum(i for i in my_matrix[i][i] if i!= 'x')!= 0:\n        # Return False\n        return False\n    # Check for a zero diagonal cells\n    if sum(i for i in my_matrix[j][j] if i!= 'x')!= 0:\n        # Return False\n        return False\n    # Check for a zero diagonal cells\n    if sum(i for i in my_matrix[j][len(my_matrix[0]) - i - 1] if i!= 'x')!= 0:\n        # Return False\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    count = 0\n    row = len(my_matrix)\n    col = len(my_matrix[0])\n    for row in range(0,row):\n        for col in range(0,col):\n            if(row == row and col == col):\n                count = count + 1\n    if(count == row*col):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = my_matrix.shape[0]\n    columns = my_matrix.shape[1]\n    #rows_vars = len(set(row for row in my_matrix.T))\n    #columns_vars = len(set(col for col in my_matrix))\n    rows_vars = rows\n    columns_vars = columns\n    square_matrix = [[my_matrix[0][0]*my_matrix[1][1]*my_matrix[2][2]*my_matrix[3][3],\n                    my_matrix[0][1]*my_matrix[1][2]*my_matrix[2][3],\n                    my_matrix[0][2]*my_matrix[1][3]*my_matrix[2][0],\n                    my_matrix[0][3]*my_matrix[1][0]*my_matrix[2][1],\n                    my_matrix[0][2]*my_matrix[1][1]*my_matrix[2][0],\n                    my_matrix[0][3]*my_matrix[1][2]*my_matrix[2][1],\n                    my_matrix[0][2]*my_matrix[1][3]*my_matrix[2][0],\n                    my_matrix[0][3]*my_matrix[1][0]*my_matrix[2][1],\n                    my_matrix[0][0]*my_matrix[1][1]*my_matrix[2][2],\n                    my_matrix[0][1]*my_matrix[1][2]*my_matrix[2][3],\n                    my_matrix[0][2]*my_matrix[1][3]*my_matrix[2][0]]]\n    if len(square_matrix) == rows_vars and len(square_matrix[0]) == columns_vars:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Your code here\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (my_matrix[0][0] == my_matrix[1][1] == my_matrix[2][2]):\n        print(my_matrix[0][0], my_matrix[1][1], my_matrix[2][2])\n        return True\n    elif (my_matrix[0][2] == my_matrix[1][1] == my_matrix[2][0]):\n        print(my_matrix[0][2], my_matrix[1][1], my_matrix[2][0])\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = defaultdict(int)\n    freq_list = []\n    for i in range(len(nums)):\n        max_freq[nums[i]] += 1\n        freq_list.append(nums[i])\n    freq_list.sort()\n    freq_item = freq_list[-1]\n    for i in freq_list:\n        if max_freq[i] == 0:\n            freq_list.remove(i)\n    return freq_item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    \n    for num in counts:\n        if counts[num] == max(counts.values()):\n            return num\n    \n    return None\ndef min_occurrences(nums):\n    '''\n    Write a function to find the item with minimum frequency in a given list.\n    '''\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    \n    for num in counts:\n        if counts[num] == min(counts.values()):\n            return num\n    \n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = defaultdict(int)\n    for num in nums:\n        max_freq[num] += 1\n    max_freq_item = max(max_freq, key=max_freq.get)\n    return max_freq_item\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    def get_frequency(num):\n        counter = 0\n        for n in num:\n            counter += n.count\n        return counter\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    return max(sorted(nums))\n    \ndef find_max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    return max(sorted(nums, key=lambda num: nums.count(num)))\n    \ndef min_occurrences(nums):\n    '''\n    Write a function to find the item with minimum frequency in a given list.\n    '''\n    return min(sorted(nums))\n    \ndef find_min_occurrences(nums):\n    '''\n    Write a function to find the item with minimum frequency in a given list.\n    '''\n    return min(sorted(nums, key=lambda num: nums.count(num)))\n    \ndef group_occurrences(nums):\n    '''\n    Write a function to find the group of the item with maximum frequency in a given list.\n    '''\n    return group_by_max(nums, lambda x: x, lambda x: 1)\n    \ndef group_by_max(nums, max_fn, min_fn):\n    '''\n    Write a function to find the group of the item with maximum frequency in a given list.\n    '''\n    return group_by(nums, max_fn, min_fn)\n    \ndef group_by(nums, max_fn, min_fn):\n    '''\n    Write a function to find the group of the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    for k, v in d.items():\n        if v == 1:\n            yield k\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(int)\n    for num in nums:\n        occurrences[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    # Sort the items in descending order.\n    nums.sort(key=lambda x: x[1], reverse=True)\n    for num in nums:\n        d[num[0]] = d[num[0]]+1\n    print(d)\n    for key, value in d.items():\n        if value == 1:\n            return key\n    return None\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_freq = max(frequency.values())\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = dict()\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"AEIOU\"\n    return vowels[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    return str1.translate(str.maketrans(vowels, vowels[::-1]))\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    list1=[]\n    for i in str1:\n        if i in 'aeiouAEIOU':\n            list1.append(i)\n        else:\n            list1.append(' ')\n    list2=[]\n    for i in range(len(list1)-1,-1,-1):\n        list2.append(list1[i])\n    return ''.join(list2)\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = 'aeiou'\n    for char in str1:\n        if char in vowels:\n            str1 = str1.replace(char, '', 1)\n    return str1\n    \nprint(reverse_vowels('the quick brown fox jumps over the lazy dog')"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    final_str = ''\n    for i in str1:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            final_str += i\n    return final_str\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    import re\n    from string import ascii_lowercase as lower_c\n    lower_c = lower_c.lower()\n    vowels = lower_c.replace('y', '')\n    vowels = vowels.replace('e', 'i')\n    vowels = vowels.replace('o', 'u')\n    vowels = vowels.replace('a', 'A')\n    vowels = vowels.replace('u', 'a')\n    vowels = vowels.replace('i', 'A')\n    vowels = vowels.replace('A', 'A')\n    vowels = vowels.replace('e', 'I')\n    vowels = vowels.replace('o', 'U')\n    vowels = vowels.replace('u', 'i')\n    vowels = vowels.replace('a', 'a')\n    vowels = vowels.replace('A', 'A')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('A', 'A')\n    vowels = vowels.replace('e', 'I')\n    vowels = vowels.replace('o', 'U')\n    vowels = vowels.replace('u', 'i')\n    vowels = vowels.replace('a', 'A')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('y', 'I')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('y', 'I')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('Y', 'Y')\n    vowels = vowels.replace('y', 'I')\n    vowels = vowels.replace('Y', 'I')\n    vowels = vowels.replace('Y', 'U')\n    vowels = vowels.replace('Y', 'A')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('a', 'A')\n    vowels = vowels.replace('A', 'A')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('U', 'a')\n    vowels = vowels.replace('U', 'A')\n    vowels = vowels.replace('a', 'A')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'A')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('U', 'I')\n    vowels = vowels.replace('a', 'A')\n    vowels = vowels.replace('A', 'A')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'A')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('a', 'I')\n    vowels = vowels.replace('A', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('U', 'A')\n    vowels = vowels.replace('a', 'I')\n    vowels = vowels.replace('A', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('U', 'A')\n    vowels = vowels.replace('a', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('a', 'I')\n    vowels = vowels.replace('A', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('U', 'U')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vowels.replace('I', 'I')\n    vowels = vo"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # get vowels\n    vowels = \"aeiouAEIOU\"\n    vowels_reversed = \"\"\n    \n    # convert string to lowercase\n    str1 = str1.lower()\n    \n    # iterate through string\n    for char in str1:\n        if char not in vowels:\n            vowels_reversed += char\n    \n    # return reversed string\n    return vowels_reversed\n    \ndef reverse_vowels_in_string(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # get vowels\n    vowels = \"aeiouAEIOU\"\n    vowels_reversed = \"\"\n    \n    # convert string to lowercase\n    str1 = str1.lower()\n    \n    # iterate through string\n    for char in str1:\n        if char not in vowels:\n            vowels_reversed += char\n    \n    # return reversed string\n    return vowels_reversed\n    \ndef remove_vowels(str1):\n    '''\n    Write a python function to remove only the vowels of a given string (where y is not a vowel).\n    '''\n    # get vowels\n    vowels = \"aeiouAEIOU\"\n    vowels_reversed = \"\"\n    \n    # convert string to lowercase\n    str1 = str1.lower()\n    \n    # iterate through string\n    for char in str1:\n        if char in vowels:\n            vowels_reversed += char\n    \n    # return reversed string\n    return vowels_reversed\n    "
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.replace('y', '')\n    str1 = str1.replace('y', '').lower()\n    vowels = 'aeiou'\n    str1 = str1.lower()\n    result = ''\n    for letter in str1:\n        if letter in vowels:\n            result += letter\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    vowel_string = \"\"\n    for letter in str1:\n        if letter in vowels:\n            vowel_string += letter\n        else:\n            vowel_string += \" \"\n    return vowel_string\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    reversed_str = ''\n    index = 0\n    for i in str1:\n        if (i.lower() in VOWELS):\n            vowel = VOWELS[index]\n            reversed_str += vowel\n        index += 1\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str,tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + str(tuple(tup1)) + \")\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for x in range(len(tup1)):\n        string = string + str(tup1[x]) + \",\"\n    return string[:-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ('('+', '.join(map(str, tup1)) + ')')\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = '('\n    for el in tup1:\n        s += str(el)\n        s += ','\n    s = s[:-1]\n    s += ')'\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = ''\n    for i in tup1:\n        result += i\n    return result\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = \"\"\n    for index in tup1:\n        result += index + \",\"\n    return result[:-1]\n    \ndef load_csv_file(filename):\n    '''\n    Read in a csv file and return a list of rows as a list.\n    '''\n    file = open(filename)\n    data = csv.reader(file)\n    return data\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = '('\n    for i in tup1:\n        str1 = str1 + str(i) + \",\"\n    str1 = str1[:-1] + ')'\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1[0]) + \" and \" + str(tup1[1]) + \" \" + str(tup1[2])\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=''\n    for el in tup1:\n        s+=str(el)\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sumnum = 0\n    for num in nums:\n        if num < 0:\n            sumnum += num\n    return sumnum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum -= num\n        else:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    summ = 0\n    for num in nums:\n        if num < 0:\n            summ += num\n    return summ\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 0 if nums[0] < 0 else nums[0]\n    if len(nums) == 2:\n        if nums[0] < 0 and nums[1] < 0:\n            return nums[0] + nums[1]\n        elif nums[0] < 0 and nums[1] > 0:\n            return nums[0] + nums[1]\n        elif nums[0] < 0 and nums[1] < 0:\n            return nums[0] - nums[1]\n        else:\n            return nums[0] - nums[1]\n    if len(nums) == 3:\n        if nums[0] < 0 and nums[1] < 0 and nums[2] < 0:\n            return nums[0] + nums[1] + nums[2]\n        elif nums[0] < 0 and nums[1] > 0 and nums[2] < 0:\n            return nums[0] + nums[1] + nums[2]\n        elif nums[0] < 0 and nums[1] < 0 and nums[2] > 0:\n            return nums[0] + nums[1] + nums[2]\n        else:\n            return nums[0] - nums[1] - nums[2]\n    if len(nums) == 4:\n        if nums[0] < 0 and nums[1] < 0 and nums[2] < 0 and nums[3] < 0:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        elif nums[0] < 0 and nums[1] > 0 and nums[2] < 0 and nums[3] < 0:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        elif nums[0] < 0 and nums[1] < 0 and nums[2] > 0 and nums[3] < 0:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        elif nums[0] < 0 and nums[1] > 0 and nums[2] > 0 and nums[3] > 0:\n            return nums[0] + nums[1] + nums[2] + nums[3]\n        else:\n            return nums[0] - nums[1] - nums[2] - nums[3]\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    neg_num = 0\n    for num in nums:\n        if num < 0:\n            neg_num += num\n    return neg_num\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg = 0\n    for num in nums:\n        if num < 0:\n            neg = neg + num\n    return neg\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    res = 0\n    for i in nums:\n        if i < 0:\n            res -= i\n    return res\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 0\n    if n == 0:\n        return result\n    elif n == 1:\n        return 1\n    else:\n        result = (3 * n + 1) * hexagonal_num(n-1)\n        return result\nprint(hexagonal_num(6))"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n > 0: \n        return (n * (n+1) // 2) + (n * (n-1) // 2) + 1\n    elif n == 0: \n        return 1\n    else: \n        return 0"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    h = 0\n    \n    while (n/3) < 16:\n        \n        h += 1\n        n += 1\n    \n    return h\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    \n    h = n // 16\n    if h % 2 == 0:\n        return n\n    \n    return n + ((h + 1) * h // 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = []\n    for i in range(n):\n        x = hex_num.append(i)\n        for j in range(i, n, i):\n            hex_num.append(j)\n    return hex_num[n//2]\n    \ndef find_min_and_max(l):\n    '''\n    Write a function to find the min and max of the list.\n    '''\n    return max(l), min(l)\n    \ndef find_even_sum(l):\n    '''\n    Write a function to find the sum of even numbers in the list.\n    '''\n    return sum(list(filter(lambda x: x%2==0, l)))\n    \ndef find_prime_factors(n):\n    '''\n    Write a function that returns the prime factors of a given integer.\n    '''\n    factors = []\n    div = 2\n    while div<=n:\n        if n%div==0:\n            factors.append(div)\n            n//=div\n        else:\n            div+=1\n    return sorted(factors)\n    \ndef find_palindromic_subsequence(l, k):\n    '''\n    Write a function that returns the kth palindromic subsequence.\n    '''\n    res = []\n    for i in range(len(l)):\n        if i+k-1>=0 and l[i:i+k]==l[i:i+k][::-1]:\n            res.append(l[i:i+k])\n    return res\n    \ndef find_substring(l, k):\n    '''\n    Write a function that returns the substring of a given length as a string.\n    '''\n    res = []\n    for i in range(len(l)):\n        if i+k-1>=0 and l[i:i+k]==l[i:i+k][::-1]:\n            res.append(l[i:i+k])\n    return res\n    \ndef find_substrings(l, k):\n    '''\n    Write a function that returns the kth palindromic subsequence of a given string.\n    '''\n    res = []\n    for i in range(len(l)):\n        if i+k-1>=0 and l==l[i:i+k][::-1]:\n            res.append(l[i:i+k])\n    return res\n    \ndef check_palindromic(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic2(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic3(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic4(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic5(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic6(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic7(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic8(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic9(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic10(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic11(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic12(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic13(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic14(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic15(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic16(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic17(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic18(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic19(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic20(l):\n    '''\n    Write a function that checks whether a given string is a palindromic string or not.\n    '''\n    return len(l)==len(sorted(l)) and l==sorted(l)[::-1]\n    \ndef check_palindromic21(l):\n    '''\n    Write a function that checks whether a given string is a palindromi"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # base case\n    if n == 0:\n        return 1\n    # if n is odd\n    if n % 2 == 1:\n        # find first 3 squares\n        # use it as the base for the list\n        n = (n - 1) // 6\n        return hexagonal_num(n) + hexagonal_num(n + 1) + hexagonal_num(n + 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return 1\n    elif n%2 == 0: \n        return hexagonal_num(n-1) + hexagonal_num(n-2) \n    else: \n        return hexagonal_num(n-1) + hexagonal_num(n-2) + hexagonal_num(n-3) \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0 or n >= 18: \n        return None\n    if n == 0: \n        return 1\n    if n == 1: \n        return 9\n    if n == 2: \n        return 27\n    return hexagonal_num(n - 1) + hexagonal_num(n - 3)\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # horizontal\n    if n==0: return n\n    return hexagonal_num(n-1)+16*n\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    for i in range(n):\n        for j in range(i, n, 2):\n            if i == j:\n                print('(%d, %d)' % (i, j), end=\" \")\n            else:\n                print('(%d, %d), (%d, %d)' % (i, j, i + 1, j + 1), end=\" \")\n        print()\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    \n    return count/len(nums)\n    \n    \ndef count_ones(nums):\n    '''\n    Return the number of 1s in a list of numbers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 1:\n            count += 1\n    \n    return count\n    \n    \ndef non_zeroes(nums):\n    '''\n    Return the number of non-zeroes in a list of numbers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    \n    return count\n    \n    \ndef sum_divisible(nums):\n    '''\n    Return the sum of the divisors of a list of integers.\n    '''\n    total = 0\n    for i in nums:\n        if i % 2 == 0:\n            total += i\n    \n    return total\n    \n    \ndef sum_up_divisors(nums):\n    '''\n    Return the sum of the upper divisors of a list of integers.\n    '''\n    total = 0\n    for i in nums:\n        if i >= 1:\n            total += i\n    \n    return total\n    \n    \ndef print_list(nums):\n    '''\n    Print a list of integers.\n    '''\n    for i in nums:\n        print(i, end ='')\n    print()\n    \n    \ndef max_num(nums):\n    '''\n    Return the largest number in a list of integers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return nums[0]\n    \n    \ndef min_num(nums):\n    '''\n    Return the smallest number in a list of integers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return nums[0]\n    \n    \ndef sub_list(nums):\n    '''\n    Return the sublist of a list of integers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return nums[0]\n    \n    \ndef get_largest_num(nums):\n    '''\n    Return the largest number in a list of integers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return nums[0]\n    \n    \ndef get_smallest_num(nums):\n    '''\n    Return the smallest number in a list of integers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return nums[0]\n    \n    \ndef get_sum_divisible(nums):\n    '''\n    Return the sum of the divisors of a list of integers.\n    '''\n    total = 0\n    for i in nums:\n        if i % 2 == 0:\n            total += i\n    \n    return total\n    \n    \ndef get_sum_up_divisors(nums):\n    '''\n    Return the sum of the upper divisors of a list of integers.\n    '''\n    total = 0\n    for i in nums:\n        if i >= 1:\n            total += i\n    \n    return total\n    \n    \ndef reverse_list(nums):\n    '''\n    Return a list of the elements in a list of integers in reverse order.\n    '''\n    if nums == []:\n        return []\n    else:\n        for i in range(len(nums)//2, -1, -1):\n            for j in range(i+1, len(nums)):\n                nums[i], nums[j] = nums[j], nums[i]\n        \n    return nums\n    \n    \ndef is_all_zero(nums):\n    '''\n    Return True if all elements in a list of integers are zero.\n    '''\n    for i in nums:\n        if i == 0:\n            return False\n    \n    return True\n    \n    \ndef is_all_positive(nums):\n    '''\n    Return True if all elements in a list of integers are positive.\n    '''\n    if nums == []:\n        return False\n    else:\n        for i in nums:\n            if i > 0:\n                return False\n    \n    return True\n    \n    \ndef is_perfect_square(nums):\n    '''\n    Return True if the sum of any element in a list of integers is a perfect square.\n    '''\n    if nums == []:\n        return False\n    else:\n        for i in nums:\n            if i > 1 and i % 2 == 0:\n                if nums.count(i/2) == len(nums):\n                    return False\n        \n    return True\n    \n    \ndef is_n(n):\n    '''\n    Return True if the number n is a non-negative integer.\n    '''\n    if nums == []:\n        return False\n    else:\n        for i in nums:\n            if i == 0:\n                return False\n            if i < 0:\n                return False\n        \n    return True\n    \n    \ndef is_odd(n):\n    '''\n    Return True if the number n is odd.\n    '''\n    if nums == []:\n        return False\n    else:\n        for i in nums:\n            if i % 2 == 1:\n                return False\n        \n    return True\n    \n    \ndef is_even(n):\n    '''\n    Return True if the number n is even.\n    '''\n    if nums == []:\n        return False\n    else:\n        for i in nums:\n            if i % 2 == 0:\n                return False\n        \n    return True\n    \n    \ndef main():\n    # print('test is_all_zero')\n    # print(is_all_zero([0, 2, 4, 4, 4, 3, 6]))\n    # print('test is_all_positive')\n    # print(is_all_positive([1, 3, 4, 3]))\n    # print('test is_perfect_square')\n    # print(is_perfect_square([1, 2, 3, 4, 5]))\n    # print('test is_n')\n    # print(is_n(10))\n    # print('test is_odd')\n    # print(is_odd(3))\n    # print('test is_even')\n    # print(is_even(9))\n    \n    print('test get_sum_divisible')\n    print(get_sum_divisible([1, 2, 3, 4, 5]))\n    print('test get_sum_up_divisors')\n    print(get_sum_up_divisors([1, 2, 3, 4, 5]))\n    print('test get_largest_num')\n    print(get_largest_num([1, 2, 3, 4, 5]))\n    print('test get_smallest_num')\n    print(get_smallest_num([1, 2, 3, 4, 5]))\n    print('test get_sum_divisible')\n    print(get_sum_divisible([1, 2, 3, 4, 5]))\n    print('test reverse_list')\n    print(reverse_list([1, 2, 3, 4, 5]))\n    \n    print('test max_num')\n    print(max_num([1, 2, 3, 4, 5]))\n    print('test min_num')\n    print(min_num([1, 2, 3, 4, 5]))\n    print('test sub_list')\n    print(sub_list([1, 2, 3, 4, 5]))\n    print('test get_largest_num')\n    print(get_largest_num([1, 2, 3, 4, 5]))\n    print('test get_smallest_num')\n    print(get_smallest_num([1, 2, 3, 4, 5]))\n    print('test get_sum_divisible')\n    print(get_sum_divisible([1, 2, 3, 4, 5]))\n    print('test get_sum_up_divisors')\n    print(get_sum"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return round(sum(map(lambda x: x==0, nums))/len(nums), 2)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zeroes = 0\n    ones = 0\n    for i in range(n):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            ones += 1\n    return zeroes / ones\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    zero_count_array = []\n    for num in nums:\n        if num == 0:\n            zero_count_array.append(0)\n        else:\n            zero_count_array.append(1)\n    return len(zero_count_array) / (len(nums) - len(zero_count_array))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(0,len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n    #return (count/len(nums))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = [num for num in nums if num!= 0]\n    zeros_count = len(zeros)\n    # print(zeros_count)\n    zeros_count_float = zeros_count * 1.0 / len(zeros)\n    # print(zeros_count_float)\n    return zeros_count_float\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    n=int(n)\n    if (n==0):\n        return(False)\n    if (n==1):\n        return(True)\n    for i in range(2,n):\n        if (n%i==0):\n            return(False)\n    return(True)"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # 2. start with all the numbers of power 1 to n\n    # add one more than each number to get the sum\n    sum = 1\n    for i in range(2, n+1):\n        sum += 1\n        # add the number to the sum if it is a power of 2\n        if is_power_of_two(i):\n            sum += 1\n    return sum == n\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n    \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_Pair_Sum(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of two non-zero powers of 2 or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_Power_Sum(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of two non-zero powers of 2 or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_Fibonacci(n): \n    '''\n    Write a python function to check whether the given number can be represented as a sum of two non-zero powers of 2 or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 4 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 6 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    return True\ndef get_GCD(x,y): \n    '''\n    Write a python function to calculate the greatest common divisor of two integers.\n    '''\n    while y!= 0:\n        x, y = y, x % y\n    return x\ndef get_LCM(x,y): \n    '''\n    Write a python function to calculate the least common multiple of two integers.\n    '''\n    while y!= 0:\n        x, y = y, x % y\n    return x\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    num_list = [1] # 1st element will be considered as a power of 2\n    for num in range(2, n):\n        if num_list[num-1] == 0: # if the previous element is 0, it's not a power of 2\n            return False # there's no sum of these power\n        num_list.append(num_list[num-1]**2) # appending all elements of a list to the next\n    return True # the sum of those elements is a power of 2\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    else:\n        n=abs(n)\n        i=2\n        k=0\n        while i<=n:\n            if n%i==0:\n                k+=1\n            i+=1\n        if k==0:\n            return True\n        else:\n            return False\n        \n    \ndef Sum_Of_Powers_Of_Three(n):\n    '''\n    Write a python function to find the sum of power of three.\n    '''\n    i=0\n    sum=0\n    while i<=n:\n        if is_Sum_Of_Powers_Of_Two(i):\n            sum+=i\n            i+=1\n        else:\n            i+=1\n    return sum\n    \n        \nn=int(input(\"Enter the number :\"))\nprint(\"The sum of power of three is :\",Sum_Of_Powers_Of_Three(n)"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n > 0:\n        if n <= 2:\n            print(f'{n} is not a valid number')\n        else:\n            \n            num = []\n            sums = 0\n            while num!= []:\n                num = [i for i in str(num[0])]\n                for i in range(0, len(num)):\n                    if i == len(num) - 1:\n                        sums = num[i] + sums\n                        if sums!= 0:\n                            if sums == 2 or sums == 3:\n                                return False\n                            else:\n                                break\n                    else:\n                        if num[i] == '1':\n                            if num[i + 1] == '1':\n                                if sums == 0:\n                                    return False\n                                else:\n                                    break\n                        else:\n                            if num[i + 1] == '1':\n                                if sums == 0:\n                                    return False\n                                else:\n                                    break\n                    \n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 1\n    while i < n:\n        if n % i == 0:\n            print(\"Not a sum of powers of two\")\n            return False\n        i += 1\n    print(\"A sum of powers of two is a sum of non-zero powers of 2\")\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n == sum([1 if 2**(i-1) == n else 0 for i in range(1, n+1)])\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 1):\n        return True\n    elif n < 1:\n        return False\n    else:\n        for i in range(2, n + 1):\n            if (n % i == 0):\n                return False\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c=2*math.pi*r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return math.pi * 2 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * r * math.pi\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * (3.14 * r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*(2*r*r + 2*r*r*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    \n    a = math.pi * (r ** 2)\n    return a\n    \ndef triangle_area(a, b, c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    import math\n    return math.sqrt(a**2 + b**2 + c**2)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return (2*math.pi*r)\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r\n    print(c)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #TODO\n    return\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Your code here\n    # Your code here\n    if test_list == []:\n        return []\n    else:\n        return list(map(lambda x: list(map(int, x)), test_list))\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    set_of_numbers = []\n    for i in range(len(test_list)):\n        set_of_numbers += test_list[i]\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for number in item:\n            flattened_list.append(number)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for el in test_list:\n        if type(el) is list:\n            output.extend(extract_singly(el))\n        else:\n            output.append(el)\n    return output\n    \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list_without_dups = list(set(test_list))\n    new_test_list = []\n    for num in test_list_without_dups:\n        for i in test_list_without_dups:\n            new_test_list.append(num)\n            break\n    return new_test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    temp_list = []\n    temp = []\n    for item in test_list:\n        if type(item) == list:\n            for element in item:\n                temp.append(element)\n        elif type(item) == set:\n            for element in item:\n                temp.append(element)\n    return temp\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result = result.union(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    # output = []\n    \n    # for i in test_list:\n    #     output.append(i[0])\n    \n    # return output\n    \n    output = []\n    for i in test_list:\n        output.append(i[0])\n        output.extend(i[1:])\n    \n    return output\n    \n    # # TEST EXERCISE\n    \n    # input = [[1,2,3],[4,5,6]]\n    # #output = [[1,2,3,4,5,6]]\n    # output = [[1,2,3,4,5],[6]]\n    \n    # assert extract_singly(input) == output\n    \n    # return extract_singly(input)\n    \n    # TEST CODE\n    \n    # assert extract_singly(test_list) == output\n    \n    # return extract_singly(test_list)"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = []\n    \n    for element in test_list:\n        if isinstance(element, list):\n            flatten.extend(element)\n        else:\n            flatten.append(element)\n    \n    return flatten\n    "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        index = nums[i]\n        j = len(nums) - 1 - i\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    p = len(nums)\n    # Base Case\n    if p == 1:\n        return nums\n    # Not Equal:\n    # Note: We only want to sort the last element, because we don't need to go through the last element.\n    #  First, we sort the first element and go through the remaining element.\n    #  Second, the remaining element must be at the beginning of the list, because we already sorted it.\n    #  Third, we sort it and go through the remaining element.\n    #  Fourth, the remaining element must be at the beginning of the list, because we already sorted it.\n    #  Then, we sort it and go through the remaining element.\n    #  Fifth, the remaining element must be at the beginning of the list, because we already sorted it.\n    #  Lastly, we sort it and go through the remaining element.\n    #  Finally, we sort it and go through the remaining element.\n    #  If the remaining element is not at the beginning of the list, we can't sort it, so we return the remaining element.\n    #  Else:\n    #     First, we sort the first element, then go through all the remaining elements and try to sort them.\n    #     Second, we can't sort them because the remaining element is at the beginning of the list.\n    #     Third, we sort them and go through all the remaining elements.\n    #     Fourth, we can't sort them because the remaining element is at the beginning of the list.\n    #     Fifth, we sort them and go through all the remaining elements.\n    #     Finally, we sort them and go through all the remaining elements.\n    #     Finally, we sort them and go through all the remaining elements.\n    #     Finally, we sort them and go through all the remaining elements.\n    #     Finally, we sort them and go through all the remaining elements.\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swap = False\n    swapped = True\n    n = len(nums)\n    for i in range(n-1):\n        if nums[i] > nums[i+1]:\n            swap = True\n            swapped = False\n        if not swapped:\n            break\n        nums[i], nums[n-1] = nums[n-1], nums[i]\n    \n    if not swap:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n    \ndef merge_sort(nums):\n    '''\n    Write a function that takes a sorted array as an argument and returns a new array with all the sorted elements in sorted order.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    mid = len(nums) // 2\n    left = nums[:mid]\n    right = nums[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n    \ndef merge(left, right):\n    '''\n    Sort the array, and return a sorted array.\n    '''\n    result = []\n    i, j = 0, 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    while i < len(left):\n        result.append(left[i])\n        i += 1\n        \n    while j < len(right):\n        result.append(right[j])\n        j += 1\n        \n    return result\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return sorted(nums, reverse=True)\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        if nums[i]!= nums[i+1]:\n            return i+1\n    return len(nums"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums)==0 or len(nums)<=1:\n        return nums\n    \n    index=len(nums)-1\n    for i in range(index,-1,-1):\n        temp=nums[i]\n        j=i\n        for j in range(i,-1,-1):\n            if nums[j]>temp:\n                nums[j],temp=temp,nums[j]\n        nums[i]=temp\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort(a, left, right):\n        if left >= right:\n            return\n        mid = (left+right)//2\n        sort(a, left, mid)\n        sort(a, mid, right)\n        temp = a[left]\n        a[left] = a[mid]\n        a[mid] = temp\n    sort(nums, 0, len(nums)-1)\n    return nums\n    "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    left = 0\n    right = len(nums)-1\n    while left < right:\n        right_element = nums[right]\n        left_element = nums[left]\n        if right_element > left_element:\n            temp = nums[right]\n            nums[right] = nums[left]\n            nums[left] = temp\n            right -= 1\n        else:\n            left += 1\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_same_pair = 0\n    for item in list1:\n        if item in list3:\n            count_same_pair += 1\n    for item in list2:\n        if item in list3:\n            count_same_pair += 1\n    for item in list3:\n        if item in list2:\n            count_same_pair += 1\n    return count_same_pair\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    result = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and i==j:\n                result+=1\n    return result\n    # TO DO: verify this works\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #counts the number of different items that are identical in the same position of three given lists.\n    #the number of different items is the product of the number of items that are identical in the same position of three given lists.\n    count=1\n    for item1 in list1:\n        if item1==list2[0] and item1==list3[0]:\n            count=count+1\n    count=1\n    for item2 in list2:\n        if item2==list1[0] and item2==list3[0]:\n            count=count+1\n    count=1\n    for item3 in list3:\n        if item3==list1[0] and item3==list2[0]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] == list2[j] or list2[i] == list3[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list3[i] == list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if (list1[i] == list2[i] and list2[i] == list3[i]):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # if either list is empty or if the third list is an empty list \n    if list1==[] or list2==[] or list3==[]:\n        return 0\n    # if list1 is sorted return the number of items that are identical in the same position of list1 \n    if count_samepair_sorted(list1)==1:\n        return 1\n    # if list2 is sorted return the number of items that are identical in the same position of list2 \n    if count_samepair_sorted(list2)==1:\n        return 1\n    # if list3 is sorted return the number of items that are identical in the same position of list3 \n    if count_samepair_sorted(list3)==1:\n        return 1\n    # if list1 and list2 are in descending order of their respective lengths return the number of items that are identical in the same position of list2 \n    if count_samepair_sorted(list3,descending=True)==1:\n        return 1\n    # if list2 and list3 are in descending order of their respective lengths return the number of items that are identical in the same position of list3 \n    if count_samepair_sorted(list3,descending=True)==1:\n        return 1\n    # else return 0 as a count of no items that are identical in the same position of both lists are not equal\n    else:\n        return 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            samepair=samepair+1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    same_pairs=0\n    if (len(list1) == len(list2) and len(list1) == len(list3)):\n        return same_pairs\n    for index in range(len(list1)):\n        for j in range(len(list2)):\n            if (list1[index] == list2[j] and index!= j):\n                same_pairs+=1\n    return same_pairs\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for item in list1:\n        if item in list2:\n            count=count+1\n    for item in list2:\n        if item in list3:\n            count=count+1\n    for item in list3:\n        if item in list2:\n            count=count+1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0 \n    for i in Input:\n        lists += 1\n    return lists \n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    new_tuple = Input[:5]\n    list_pos = 0\n    for i in new_tuple:\n        if i == ',':\n            list_pos += 1\n    return list_pos\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # check if given list is empty\n    if not Input:\n        return 0\n    # if not all items in list are unique\n    elif all(map(lambda x: x in Input, Input)):\n        return 1\n    else:\n        # if not all items in list are unique\n        return 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_present = []\n    for i in Input: \n        for j in Input: \n            if i == j: \n                list_present.append(i)\n    return len(list_present)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #variable_name = Input[0]\n    #numbers = Input[1]\n    #list_length = []\n    #for i in range(len(numbers)):\n    #    list_length.append(numbers[i])\n    #return len(list_length)\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    for i in Input:\n        lst.append(i[1])\n    return lst\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not isinstance(Input, tuple):\n        raise TypeError('Input must be a tuple')\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == tuple:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    myTup = tuple(Input)\n    count = 0\n    for i in myTup:\n        if type(i) is list:\n            count = count + 1\n    print(count)\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    return 0\n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -------------------------------------------------\n    # write your code here\n    # -------------------------------------------------\n    \n    \n    # -----------------------------------------------"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Number of lists present\n    \n    # initialize list\n    # if list is already present\n    # return 1\n    # else: return 0\n    \n    # Iterate through Input\n    # for item in Input\n    \n    # if list is not present\n    # return 0\n    # else: return 1\n    \n    # Iterate through Input\n    # for item in Input\n    \n    # if list is present\n    # return 1\n    # else: return 0\n    \n    # Iterate through Input\n    # for item in Input\n    \n    # if list is present\n    # return 1\n    # else: return 0\n    \n    # Iterate through Input\n    # for item in Input\n    \n    # if list is present\n    # return 1\n    # else: return 0\n    \n    \n    # Iterate through Input\n    # for item in Input\n    \n    # if list is present\n    # return 1\n    # else: return 0\n    \n    # Iterate through Input\n    # for item in Input\n    \n    # if list is present\n    # return 1\n    # else: return 0\n    \n    # Iterate through Input\n    # for item in Input\n    \n    # if list is present\n    # return 1\n    # else: return 0\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    lst = list(map(abs, arr))\n    return lst.index(max(lst))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    length = len(arr)\n    for i in range(0, length):\n        for j in range(0, length-i-1):\n            if (abs(arr[j]) > abs(arr[j+1])):\n                max_abs_diff = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = max_abs_diff\n    return arr\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = arr[0] - arr[1]\n    for i in range(1, len(arr)):\n        max_abs_diff = max(abs(arr[i] - arr[i-1]), max_abs_diff)\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] - arr[j] > max_abs_diff:\n                max_abs_diff = arr[i] - arr[j]\n    return max_abs_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Input : arr[] = {1, 2, 3, 4, 5, 6, 7, 8}\n    # Output : 3\n    if len(arr) == 0 : \n        return 0\n    elif len(arr) == 1 : \n        return arr[0] - arr[0]\n    elif len(arr) == 2 : \n        return max(arr[0] - arr[1], arr[1] - arr[0])\n    elif len(arr) == 3 : \n        return max(arr[0] - arr[1], arr[1] - arr[2], arr[2] - arr[0])\n    else : \n        return max(arr[0] - arr[1], arr[1] - arr[2], arr[2] - arr[0])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # initialize the maximum difference \n    m = max(arr) \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max = arr[0] - arr[1]\n    for i in range(1, len(arr)-1):\n        temp = arr[i] - arr[i-1]\n        if temp > max:\n            max = temp\n    return max\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    pass \n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i] - arr[i-1]) for i in range(1, len(arr)))\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(diff, max_diff)\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = None\n    for i in range(n+1):\n        for j in range(i):\n            x = x + a[i] * x\n            y = y + b[i] * y\n    return (x, y) if x!= None and y!= None else None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    if n == 1:\n        x = a\n        y = b\n    else:\n        x = a\n        y = b\n        for i in range(1, n+1):\n            x, y = x + i, y + i\n            if x < n:\n                x, y = y, x\n            if y < n:\n                y, x = x, y\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = [0] * n, [0] * n\n    i = 0\n    while i < n:\n        x[i] = a[i] + b[i]\n        y[i] = b[i]\n        i += 1\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a = int(a)\n    b = int(b)\n    x = []\n    y = []\n    for i in range(n):\n        if (a + b)%i == 0:\n            x.append(i)\n            y.append(a + b)\n    return x,y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n <= 0: return None\n    x, y = a, b\n    if n % 2:\n        x, y = b, a\n    \n    for i in range(0, n//2):\n        x = (x*x) + a\n        y = (y*y) + b\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    from itertools import permutations\n    # if there is a permutation of the integers in the list\n    if a in permutations(range(10)) and b in permutations(range(10)):\n        # check if they are valid integers\n        if a < n and b < n:\n            if a >= 0 and b >= 0:\n                # if they are positive integers, compare them\n                if a % n == 0 and b % n == 0:\n                    return (a // n, b // n)\n                else:\n                    return None\n            else:\n                return None\n        else:\n            return None\n    # if there is no permutation of the integers in the list\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a*b == n:\n        return a, b\n    if a * b <= n:\n        return None\n    \n    x = None\n    y = None\n    x, y = find_solution(a, b / a, n)\n    if x == None:\n        x = find_solution(a / b, n, b)\n    if y == None:\n        y = find_solution(a, b * x, n)\n    if x == None:\n        x = y\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a * b == n:\n        print(\"x: %i, y: %i\" % (a, b))\n        return (a, b)\n    if n == 1:\n        return (a, b)\n    if a == 0:\n        return (0, b)\n    if b == 0:\n        return (a, 0)\n    if a > b:\n        print(a, b)\n        x, y = find_solution(a, b, n // 2)\n        print(\"x: %i, y: %i\" % (x, y))\n        return (x, y)\n    x, y = find_solution(a, b, n // 2)\n    print(\"x: %i, y: %i\" % (x, y))\n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == b:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n    new_list = []\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            list1.remove(list2[i])\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list1, list2\n    \ndef list_manipulation(list1, command, location):\n    '''\n    Write a function to manipulate a list.\n    '''\n    return list1\n    \ndef factorial(num):\n    '''\n    Write a function that returns the factorial of any number, given as a parameter.\n    '''\n    return num\n    \ndef is_palindrome(word):\n    '''\n    Write a function that checks if a word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef first_last_word(text):\n    '''\n    Write a function that returns the first and last word in a text.\n    '''\n    return text.split()[0] + text.split()[-1]\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that returns a new list where duplicate items have been removed.\n    '''\n    return list\n    \ndef main():\n    print(\"Functions in this file are:\")\n    print(\"1. all_elems - returns all the elements of a list as a list\")\n    print(\"2. remove_elements - returns all the elements of a list without any duplicates\")\n    print(\"3. list_manipulation - returns the list with the elements of a given list\")\n    print(\"4. factorial - returns the factorial of a given number\")\n    print(\"5. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"6. first_last_word - returns the first and last word in a given text\")\n    print(\"7. remove_duplicates - returns the list without any duplicate items\")\n    print(\"8. first_last_word - returns the first and last word in a given text\")\n    print(\"9. remove_elements - returns the elements of a given list without any duplicates\")\n    print(\"10. first_last_word - returns the first and last word in a given text\")\n    print(\"11. remove_duplicates - returns the list without any duplicate items\")\n    print(\"12. factorial - returns the factorial of a given number\")\n    print(\"13. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"14. first_last_word - returns the first and last word in a given text\")\n    print(\"15. remove_duplicates - returns the list without any duplicate items\")\n    print(\"16. first_last_word - returns the first and last word in a given text\")\n    print(\"17. remove_elements - returns the elements of a given list without any duplicates\")\n    print(\"18. first_last_word - returns the first and last word in a given text\")\n    print(\"19. remove_duplicates - returns the list without any duplicate items\")\n    print(\"20. factorial - returns the factorial of a given number\")\n    print(\"21. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"22. first_last_word - returns the first and last word in a given text\")\n    print(\"23. remove_duplicates - returns the list without any duplicate items\")\n    print(\"24. first_last_word - returns the first and last word in a given text\")\n    print(\"25. remove_elements - returns the elements of a given list without any duplicates\")\n    print(\"26. first_last_word - returns the first and last word in a given text\")\n    print(\"27. remove_duplicates - returns the list without any duplicate items\")\n    print(\"28. factorial - returns the factorial of a given number\")\n    print(\"29. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"30. first_last_word - returns the first and last word in a given text\")\n    print(\"31. remove_duplicates - returns the list without any duplicate items\")\n    print(\"32. first_last_word - returns the first and last word in a given text\")\n    print(\"33. remove_elements - returns the elements of a given list without any duplicates\")\n    print(\"34. first_last_word - returns the first and last word in a given text\")\n    print(\"35. remove_duplicates - returns the list without any duplicate items\")\n    print(\"36. factorial - returns the factorial of a given number\")\n    print(\"37. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"38. first_last_word - returns the first and last word in a given text\")\n    print(\"39. remove_duplicates - returns the list without any duplicate items\")\n    print(\"40. first_last_word - returns the first and last word in a given text\")\n    print(\"41. remove_elements - returns the elements of a given list without any duplicates\")\n    print(\"42. first_last_word - returns the first and last word in a given text\")\n    print(\"43. remove_duplicates - returns the list without any duplicate items\")\n    print(\"44. factorial - returns the factorial of a given number\")\n    print(\"45. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"46. first_last_word - returns the first and last word in a given text\")\n    print(\"47. remove_duplicates - returns the list without any duplicate items\")\n    print(\"48. first_last_word - returns the first and last word in a given text\")\n    print(\"49. remove_elements - returns the elements of a given list without any duplicates\")\n    print(\"50. first_last_word - returns the first and last word in a given text\")\n    print(\"51. remove_duplicates - returns the list without any duplicate items\")\n    print(\"52. factorial - returns the factorial of a given number\")\n    print(\"53. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"54. first_last_word - returns the first and last word in a given text\")\n    print(\"55. remove_duplicates - returns the list without any duplicate items\")\n    print(\"56. first_last_word - returns the first and last word in a given text\")\n    print(\"57. remove_elements - returns the elements of a given list without any duplicates\")\n    print(\"58. first_last_word - returns the first and last word in a given text\")\n    print(\"59. remove_duplicates - returns the list without any duplicate items\")\n    print(\"60. factorial - returns the factorial of a given number\")\n    print(\"61. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"62. first_last_word - returns the first and last word in a given text\")\n    print(\"63. remove_duplicates - returns the list without any duplicate items\")\n    print(\"64. factorial - returns the factorial of a given number\")\n    print(\"65. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"66. first_last_word - returns the first and last word in a given text\")\n    print(\"67. remove_elements - returns the elements of a given list without any duplicates\")\n    print(\"68. first_last_word - returns the first and last word in a given text\")\n    print(\"69. remove_duplicates - returns the list without any duplicate items\")\n    print(\"70. factorial - returns the factorial of a given number\")\n    print(\"71. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"72. first_last_word - returns the first and last word in a given text\")\n    print(\"73. remove_duplicates - returns the list without any duplicate items\")\n    print(\"74. first_last_word - returns the first and last word in a given text\")\n    print(\"75. remove_elements - returns the elements of a given list without any duplicates\")\n    print(\"76. first_last_word - returns the first and last word in a given text\")\n    print(\"77. remove_duplicates - returns the list without any duplicate items\")\n    print(\"78. factorial - returns the factorial of a given number\")\n    print(\"79. is_palindrome - returns if a given word is a palindrome or not\")\n    print(\"80. first_last_word - returns the first and last word in a given text\")\n    print(\"81. remov"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list1.remove(list1[i])\n                break\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # check if a list1 and list2 is present in the list\n    if list1 == [] and list2 == []:\n        return []\n    \n    if list1 == [] or list2 == []:\n        return []\n    \n    if len(list2) == 1:\n        return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return list(list1) + list(list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n    list3 = []\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    list3 = list(set(list3))\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pas"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    a = 0\n    for i in range(1, n // 2 + 1):\n        a += i\n    return a\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (n*sum_series(n-1)) + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i\n        i += 2\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    a = n // 2 + 1\n    b = n // 2\n    return (a+b)*(a+b)//2\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # sum = 0\n    # for i in range(n // 2):\n    #     sum += i + 2\n    # return sum\n    return sum(range(n + 1, n * n + 1)"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n, 0, -2):\n        total = total + (i-1)\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Your code here\n    sum = 0\n    for i in range(1, n, 2):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(n,0,-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    print(n - 2*n)\n    print(n - 2*n)\n    if n % 2 == 0:\n        print('n=', n)\n    else:\n        print('n=', n, 'not an integer')\n    return n - 2*n\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    n = len(s)\n    for i in range(n):\n        area += (s[i] + s[i+1] - 2*l[i])/2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * pi * s * (l[1] - l[0])\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l==1:\n        return 0\n    else:\n        return (s**2)*tan(pi/l)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1,len(s)):\n        area += s[i]*tan(pi/l[i]/2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    c = 0\n    for i in range(l):\n        c += s * i\n    return c / (4 * l)\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * (l/2) * tan(pi/l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5*pi*s*l\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    x = 0\n    s = float(s)\n    l = float(l)\n    while (x < s):\n        x = x + l\n    return x**2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = s // 2\n    area = 0\n    for i in range(0,l):\n        area += (s*s)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(s)!= len(l):\n        print('Incorrect number of sides')\n        return None\n    elif l[0] == 0 or l[-1] == 0:\n        print('Incorrect sides')\n        return None\n    else:\n        s_area = 0\n        for i in range(len(s)):\n            s_area += l[i] * (s[i] * pi)\n        return s_area\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    elif n % 2 == 0:\n        return 0\n    elif n % 2!= 0:\n        return 0\n    else:\n        a = n//2\n        return div_sum(a) + div_sum(n-a)\ndef is_prime(n):\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        for i in range(5, math.ceil(math.sqrt(n))+1, 6):\n            if n % i == 0:\n                return False\n        return True\ndef is_simple(n):\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef power(n):\n    p = 1\n    while n > 0:\n        n = n // math.pow(10,p)\n        p += 1\n    return p\ndef generate_prime():\n    \"\"\"\n    Returns a prime number between 2 and 10**9\n    \"\"\"\n    p = 0\n    for p in range(0,9):\n        if is_prime(p):\n            print(p, end=\" \")\n    print()\n    p = int(input(\"P: \"))\n    for p in range(p+1,10**9+1):\n        if is_prime(p):\n            print(p, end=\" \")\n            return p\ndef generate_random_prime(n):\n    \"\"\"\n    Returns a prime number between 2 and n\n    \"\"\"\n    for p in range(n+1,n):\n        if is_prime(p) and (div_sum(p) > 0):\n            return p\n    p = random.randint(n+1, n**2+1)\n    for p in range(n, n**2):\n        if is_prime(p) and (div_sum(p) > 0):\n            return p\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = n\n    # Add 1 to the end because n will always be negative\n    for i in range(1, int(math.sqrt(n))+1):\n        # Find the divisors of the number, start at i and increment by 1\n        for j in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                sum += i\n            # If the divisors are not equal, it is not a sum\n            if n % j == 0:\n                return False\n    # If the sum is equal to the number, then it is a sum\n    return True\n    "
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # get the sum of the divisors of two numbers\n    div = 0\n    for i in range(1, n + 1): \n        div = div + i\n    return div == n\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n            if count == 2:\n                return i \n    return 0\ndef nth_prime(n):\n    '''\n    Return the nth prime number in the progression.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        for i in range(4,n+1,2):\n            if n%i==0:\n                return i\n        "
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = int(n // 1)\n    b = int(n % 1)\n    c = int(math.sqrt(n))\n    return a == b and b == c\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<0: return False\n    i=1\n    while(i<n):\n        if n%i==0:\n            return False\n        i=i+1\n    return True\ndef a_to_b(a,b): \n    '''\n    Write a function to convert an integer (a,b) to binary (a'b).\n    '''\n    if b==0: \n        return a\n    if b>0: \n        return a + b_to_a(a,b-1) \n    return a + a_to_b(a,b+1) \ndef b_to_a(a,b): \n    '''\n    Write a function to convert binary (a'b) to an integer (a,b).\n    '''\n    if b==0: \n        return a \n    if b>0: \n        return b_to_a(a,b-1) + a \n    return a \ndef a_to_a(a,b): \n    '''\n    Write a function to convert an integer (a,b) to binary (a'b).\n    '''\n    if b==0: \n        return a \n    if b>0: \n        return a + b_to_a(a,b-1) \n    return a + a_to_a(a,b+1) \ndef b_to_a(a,b): \n    '''\n    Write a function to convert binary (a'b) to an integer (a,b).\n    '''\n    if b==0: \n        return a \n    if b>0: \n        return b_to_a(a,b-1) + a \n    return a \ndef a_to_i(a): \n    '''\n    Write a function to convert an integer to i.\n    '''\n    return a%10\ndef i_to_a(i): \n    '''\n    Write a function to convert i to binary (a'b).\n    '''\n    return i//10 \ndef a_to_i(a): \n    '''\n    Write a function to convert binary (a'b) to an integer.\n    '''\n    return i_to_a(a_to_a(a)) \ndef i_to_b(i): \n    '''\n    Write a function to convert binary (a'b) to integer (a,b).\n    '''\n    return i_to_a(i_to_a(i)) \ndef b_to_i(b): \n    '''\n    Write a function to convert binary (a'b) to integer (a,b).\n    '''\n    return i_to_a(b_to_a(b)) \ndef dfs(a,n):\n    global ans\n    if n==2:\n        ans=1\n        return\n    dfs(a*10+a_to_a(a),n+1)\n    if div_sum(a):\n        ans=1\n        return\n    dfs(a+b_to_a(a,b),n+1)\ndef dfs2(a,n):\n    if n==2:\n        ans=1\n        return\n    if dfs2(a*10+a_to_a(a),n+1):\n        return\n    if div_sum(a):\n        ans=1\n        return\n    dfs2(a+b_to_a(a,b),n+1)\ndef dfs3(a,n):\n    if n==2:\n        ans=1\n        return\n    if dfs3(a+b_to_a(a,b),n+1):\n        return\n    if div_sum(a):\n        ans=1\n        return\n    dfs3(a+b_to_a(a,b),n+1)\ndef find_factors(n): \n    ans=[]\n    i=2\n    while(i*i<=n): \n        if n%i==0: \n            ans.append(i) \n            while(n%i==0): \n                n//=i \n        i+=1\n    if n!=1: \n        ans.append(n) \n    return ans \ndef isprime(n): \n    if n==1: \n        return False\n    if n==2 or n==3: \n        return True\n    if n%2==0 or n%3==0: \n        return False\n    for i in range(5, int(math.sqrt(n))+1, 6): \n        if n%i==0: \n            return False\n    return True \ndef lcm(a,b): \n    return (a*b)/math.gcd(a,b)\ndef gcd(a,b): \n    while(b!=0): \n        a,b=b,a%b \n    return a\ndef dfs_euler(a,n):\n    global ans\n    if n==2:\n        ans=1\n        return\n    dfs_euler(a*10+a_to_a(a),n+1)\n    if div_sum(a):\n        ans=1\n        return\n    dfs_euler(a+b_to_a(a,b),n+1)\ndef dfs_euler2(a,n):\n    if n==2:\n        ans=1\n        return\n    if dfs_euler2(a*10+a_to_a(a),n+1):\n        return\n    if div_sum(a):\n        ans=1\n        return\n    dfs_euler2(a+b_to_a(a,b),n+1)\ndef dfs_euler3(a,n):\n    if n==2:\n        ans=1\n        return\n    if dfs_euler3(a+b_to_a(a,b),n+1):\n        return\n    if div_sum(a):\n        ans=1\n        return\n    dfs_euler3(a+b_to_a(a,b),n+1)\ndef isprime_euler(a):\n    if isprime(a):\n        ans=1\n        return\n    for i in range(5, int(math.sqrt(a))+1, 6):\n        if a%i==0:\n            ans=0\n    return ans\ndef isprime_euler2(a):\n    if isprime(a):\n        ans=1\n        return\n    for i in range(5, int(math.sqrt(a))+1, 6):\n        if a%i==0:\n            ans=0\n    if ans==0:\n        ans=1\n    return ans\ndef isprime_euler3(a):\n    if isprime(a):\n        ans=1\n        return\n    for i in range(5, int(math.sqrt(a))+1, 6):\n        if a%i==0:\n            ans=0\n    if ans==0:\n        ans=1\n    return ans\ndef isprime_euler4(a):\n    if isprime(a):\n        ans=1\n        return\n    for i in range(5, int(math.sqrt(a))+1, 6):\n        if a%i==0:\n            ans=0\n    if ans==0:\n        ans=1\n    return ans\ndef f(n):\n    if isprime(n):\n        ans=0\n        return ans\n    if n==2:\n        ans=1\n        return ans\n    if n==3:\n        ans=0\n        return ans\n    ans=f(n-2)+f(n-1)\n    return ans\ndef fact(n):\n    if isprime(n):\n        ans=1\n        return ans\n    if n==2:\n        ans=1\n        return ans\n    if n==3:\n        ans=0\n        return ans\n    ans=fact(n-2)+fact(n-1)\n    return ans\ndef main(): \n    n=int(input())\n    print(fact(n))\nif __name__==\"__main__\":\n    main("
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #first check sum of divisors is even\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    l = []\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            l.append(i)\n    if len(l)==0:\n        return True\n    else:\n        return False\ndef pow(n):\n    '''\n    Write a function that returns the square root of a number n.\n    '''\n    if div_sum(n)==True:\n        return math.sqrt(n)\n    else:\n        return \"Math Error\"\ndef main():\n    '''\n    Write a function that computes the volume of a sphere with radius 2.\n    '''\n    r = 2\n    v = 4/3*math.pi*r**3\n    print(\"Volume of the sphere with radius {0} is {1}\".format(r,v))\n    print(\"The volume of the sphere is {0}\".format(pow(v)))\nmain("
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # create a dictionary for the alphabet\n    alphabet_dict = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0, '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0}\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # TODO: complete this function\n    count = 0\n    for i in str1:\n        if i in alphabet:\n            count += 1\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pos_dict = {}\n    for char in str1:\n        if char not in pos_dict:\n            pos_dict[char] = 0\n        pos_dict[char] += 1\n    return len(pos_dict)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1:\n        if i.lower() in alphabet:\n            count += 1\n        else:\n            count = 0\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Step 1:\n    # Set up a dictionary with each letter as a key and its count as the value\n    char_dict = {\n        'a': 1,\n        'b': 2,\n        'c': 3,\n        'd': 4,\n        'e': 5,\n        'f': 6,\n        'g': 7,\n        'h': 8,\n        'i': 9,\n        'j': 10,\n        'k': 11,\n        'l': 12,\n        'm': 13,\n        'n': 14,\n        'o': 15,\n        'p': 16,\n        'q': 17,\n        'r': 18,\n        's': 19,\n        't': 20,\n        'u': 21,\n        'v': 22,\n        'w': 23,\n        'x': 24,\n        'y': 25,\n        'z': 26\n        }\n    # Step 2:\n    # Count the occurrence of each character in the string\n    char_count = {}\n    for ch in str1:\n        if ch in char_dict:\n            char_count[ch] = char_dict[ch]\n    # Step 3:\n    # Create a new dictionary where the keys are the characters and the values are their count\n    char_count_order = sorted(char_count, key=char_count.get, reverse=True)\n    # Step 4:\n    # Print the characters that appear in the order in which they appear in the string\n    print(char_count_order[:10])\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count_char = 0\n    for i in str1:\n        if i.lower() in alphabet:\n            count_char += 1\n    return count_char\n    \ndef main():\n    str1 = input(\"Please enter the string: \")\n    print(count_char_position(str1))\n    \nmain()\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = dict(zip(string.ascii_lowercase, range(0,26)))\n    return sum(char_dict[c] == index for c,index in zip(str1, char_dict.keys()))\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count = 0\n    for i in str1:\n        if i.isalpha():\n            count = count + 1\n    print(\"Number of characters in string is :\", count)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = 0\n    for index in range(len(str1)): \n        if str1[index].lower() in alphabet: \n            char_count += 1\n    return char_count\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import re\n    x = 0\n    for i in str1:\n        if re.findall(r'[a-zA-Z]', i):\n            x += 1\n    return x\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Your code here\n    evens = 0\n    \n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] & A[j] == 0:\n                evens += 1\n    \n    return evens\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i]^A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 1:\n        return len(set(A))\n    \n    count = 0\n    \n    for i in range(1,len(A)):\n        if A[i] == A[i-1] and A[i-1] % 2 == 0:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_nums = 0\n    even_nums = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!=j:\n                if A[i]==A[j]:\n                    count = count+1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    n = len(A)\n    if(n%2 == 0):\n        return 0\n    else:\n        xor = 0\n        for i in range(n):\n            if (A[i] ^ A[i + 1] == 0):\n                xor += 1\n        return xor\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    odd = 0\n    for i in A:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for index1 in range(len(A)):\n        for index2 in range(index1+1,len(A)):\n            if A[index1] & A[index2] == 0:\n                even_pair += 1\n    return even_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # check if the list is empty or contains none\n    if not A:\n        return 0\n    even_count = 0\n    for i in range(len(A)):\n        if A[i] & 1 == 1:\n            even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pair = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] == A[j]:\n                pair += 1\n    return pair\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return 0\n    \n    if n == 2:\n        return 1\n    \n    if n % 2 == 0:\n        return 2\n    \n    if n % 2 == 1:\n        return next_power_of_2(n // 2)\n    \n    return next_power_of_2(n // 2) + 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # define the base case\n    if n <= 1:\n        return 1\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 1:\n        return n\n    return n * next_power_of_2(n-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 1:\n        return n\n    else:\n        return n * next_power_of_2(n // 2)\ndef next_power_of_3(n): \n    '''\n    Write a python function to find the smallest power of 3 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 3 == 0:\n        return n\n    else:\n        return n * next_power_of_3(n // 3)\ndef next_power_of_4(n): \n    '''\n    Write a python function to find the smallest power of 4 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 4 == 0:\n        return n\n    else:\n        return n * next_power_of_4(n // 4)\ndef next_power_of_5(n): \n    '''\n    Write a python function to find the smallest power of 5 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 5 == 0:\n        return n\n    else:\n        return n * next_power_of_5(n // 5)\ndef next_power_of_6(n): \n    '''\n    Write a python function to find the smallest power of 6 greater than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 6 == 0:\n        return n\n    else:\n        return n * next_power_of_6(n // 6)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 2: \n        return 1\n    else: \n        return n % 2 + next_power_of_2(n//2)\n    \ndef next_power_of_3(n):\n    '''\n    Write a python function to find the smallest power of 3 greater than or equal to n.\n    '''\n    if n <= 3:\n        return 3\n    else: \n        return n % 3 + next_power_of_3(n//3)\n    \ndef next_power_of_5(n):\n    '''\n    Write a python function to find the smallest power of 5 greater than or equal to n.\n    '''\n    if n <= 5:\n        return 5\n    else: \n        return n % 5 + next_power_of_5(n//5)\n    \ndef next_power_of_7(n):\n    '''\n    Write a python function to find the smallest power of 7 greater than or equal to n.\n    '''\n    if n <= 7:\n        return 7\n    else: \n        return n % 7 + next_power_of_7(n//7)\n        \ndef next_power_of_10(n):\n    '''\n    Write a python function to find the smallest power of 10 greater than or equal to n.\n    '''\n    if n <= 10:\n        return 10\n    else: \n        return n % 10 + next_power_of_10(n//10)\n        \ndef next_power_of_11(n):\n    '''\n    Write a python function to find the smallest power of 11 greater than or equal to n.\n    '''\n    if n <= 11:\n        return 11\n    else: \n        return n % 11 + next_power_of_11(n//11)\n        \ndef next_power_of_15(n):\n    '''\n    Write a python function to find the smallest power of 15 greater than or equal to n.\n    '''\n    if n <= 15:\n        return 15\n    else: \n        return n % 15 + next_power_of_15(n//15)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    start = 2\n    end = n\n    power = 0\n    while start <= end:\n        if start**2 > end**2:\n            end -= 1\n            power += 1\n        else:\n            start += 1\n            power += 1\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return next_power_of_2(n-1) + next_power_of_2(n-2)\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n == 1):\n        return 1\n    \n    return n & (n-1)\n        "
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i=2\n    count=1\n    while i<=n:\n        if (n%i)==0:\n            count+=1\n        i+=1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n%2 == 0:\n        return n//2\n    else:\n        return n*next_power_of_2(n//2)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    l = len(a)\n    count = 0\n    for i in range(l):\n        if a[i]==x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n    '''\n    \n    # Write your code here\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    #pass\n    count = 0\n    for i in a:\n        if x == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return(a.count(x))\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pas"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    d={}\n    for i in a:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return len(d)\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    #Initialize count\n    count = 0\n    \n    #Iterate through the given list \n    for i in range(len(a)):\n        \n        #If the element of the given index is the same as the number, add 1\n        if a[i] == x:\n            count = count + 1\n    \n    #Return the count\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    return [a.count(i) for i in x]\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    summ = 0\n    \n    if m == 0:\n        return sum_range_list(list1, m, n)\n    else:\n        for i in range(len(list1)-m):\n            summ = summ + list1[i+m]\n            \n    return summ\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m <= 0 or n <= 0:\n        return 0\n    if m > len(list1):\n        return sum_range_list(list1, m-1, n)\n    if n > len(list1):\n        return sum_range_list(list1, m, n-1)\n    if list1[m] <= list1[n]:\n        return sum_range_list(list1, m+1, n)\n    else:\n        return sum_range_list(list1, m, n-1)\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0                                                                                                                                                                                                \n    for i in range(m,n):                                                                                                                                                                                            \n        sum = sum + list1[i]                                                                                                                                                                                                \n    return sum                                                                                                                                                                                                                                                                    \n    \ndef test_sum_range_list():                                                                                                                                                                                                                                \n    '''\n    Example 1:\n    Input: list1 = [4,9,16], m = 3, n = 7\n    Output: 25\n    Explanation: In the given list, it is possible to sum all the numbers from 0 to 4, with a total of 4 + 9 + 16 = 25.\n    Example 2:\n    Input: list1 = [1,9,3,10,16], m = 2, n = 7\n    Output: 22\n    Explanation: In the given list, it is possible to sum all the numbers from 1 to 9, with a total of 9 + 3 + 10 + 16 = 22.\n    '''\n    list1 = [4,9,16]\n    m = 3\n    n = 7\n    print('The sum of all numbers from 1 to 9, with a total of 4 + 9 + 16 = 25 is:'+ str(sum_range_list(list1, m, n)))\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    s = 0\n    for i in range(m, n):\n        s += list1[i]\n    return s\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for index in range(m, n):\n        sum += list1[index]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0: m = 0\n    if n < 0: n = 0\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if n == 1:\n        sum = list1[m-1]\n    else:\n        for i in range(m, n):\n            sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5 + 4 * 4\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = math.sqrt(2*a*3.141592/4)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = float(a)\n    perimeter = 0.0\n    if (a == 0):\n        perimeter = 0.0\n    elif (a == 1):\n        perimeter = math.sqrt(3)\n    elif (a == 2):\n        perimeter = 4*math.sqrt(3)\n    elif (a == 3):\n        perimeter = 5*math.sqrt(3)\n    elif (a == 4):\n        perimeter = 8*math.sqrt(3)\n    elif (a == 5):\n        perimeter = 9*math.sqrt(3)\n    elif (a == 6):\n        perimeter = 12*math.sqrt(3)\n    elif (a == 7):\n        perimeter = 15*math.sqrt(3)\n    elif (a == 8):\n        perimeter = 17*math.sqrt(3)\n    elif (a == 9):\n        perimeter = 20*math.sqrt(3)\n    elif (a == 10):\n        perimeter = 23*math.sqrt(3)\n    elif (a == 11):\n        perimeter = 25*math.sqrt(3)\n    elif (a == 12):\n        perimeter = 27*math.sqrt(3)\n    elif (a == 13):\n        perimeter = 30*math.sqrt(3)\n    elif (a == 14):\n        perimeter = 33*math.sqrt(3)\n    elif (a == 15):\n        perimeter = 35*math.sqrt(3)\n    elif (a == 16):\n        perimeter = 38*math.sqrt(3)\n    elif (a == 17):\n        perimeter = 41*math.sqrt(3)\n    elif (a == 18):\n        perimeter = 44*math.sqrt(3)\n    elif (a == 19):\n        perimeter = 47*math.sqrt(3)\n    elif (a == 20):\n        perimeter = 50*math.sqrt(3)\n    elif (a == 21):\n        perimeter = 53*math.sqrt(3)\n    elif (a == 22):\n        perimeter = 55*math.sqrt(3)\n    elif (a == 23):\n        perimeter = 58*math.sqrt(3)\n    elif (a == 24):\n        perimeter = 61*math.sqrt(3)\n    elif (a == 25):\n        perimeter = 64*math.sqrt(3)\n    elif (a == 26):\n        perimeter = 67*math.sqrt(3)\n    elif (a == 27):\n        perimeter = 70*math.sqrt(3)\n    elif (a == 28):\n        perimeter = 73*math.sqrt(3)\n    elif (a == 29):\n        perimeter = 75*math.sqrt(3)\n    elif (a == 30):\n        perimeter = 78*math.sqrt(3)\n    elif (a == 31):\n        perimeter = 81*math.sqrt(3)\n    elif (a == 32):\n        perimeter = 84*math.sqrt(3)\n    elif (a == 33):\n        perimeter = 87*math.sqrt(3)\n    elif (a == 34):\n        perimeter = 90*math.sqrt(3)\n    elif (a == 35):\n        perimeter = 93*math.sqrt(3)\n    elif (a == 36):\n        perimeter = 95*math.sqrt(3)\n    elif (a == 37):\n        perimeter = 98*math.sqrt(3)\n    elif (a == 38):\n        perimeter = 101*math.sqrt(3)\n    elif (a == 39):\n        perimeter = 104*math.sqrt(3)\n    elif (a == 40):\n        perimeter = 107*math.sqrt(3)\n    elif (a == 41):\n        perimeter = 110*math.sqrt(3)\n    elif (a == 42):\n        perimeter = 113*math.sqrt(3)\n    elif (a == 43):\n        perimeter = 115*math.sqrt(3)\n    elif (a == 44):\n        perimeter = 118*math.sqrt(3)\n    elif (a == 45):\n        perimeter = 121*math.sqrt(3)\n    elif (a == 46):\n        perimeter = 124*math.sqrt(3)\n    elif (a == 47):\n        perimeter = 127*math.sqrt(3)\n    elif (a == 48):\n        perimeter = 120*math.sqrt(3)\n    elif (a == 49):\n        perimeter = 123*math.sqrt(3)\n    elif (a == 50):\n        perimeter = 125*math.sqrt(3)\n    elif (a == 51):\n        perimeter = 128*math.sqrt(3)\n    elif (a == 52):\n        perimeter = 121*math.sqrt(3)\n    elif (a == 53):\n        perimeter = 124*math.sqrt(3)\n    elif (a == 54):\n        perimeter = 127*math.sqrt(3)\n    elif (a == 55):\n        perimeter = 120*math.sqrt(3)\n    elif (a == 56):\n        perimeter = 123*math.sqrt(3)\n    elif (a == 57):\n        perimeter = 125*math.sqrt(3)\n    elif (a == 58):\n        perimeter = 128*math.sqrt(3)\n    elif (a == 59):\n        perimeter = 121*math.sqrt(3)\n    elif (a == 60):\n        perimeter = 124*math.sqrt(3)\n    elif (a == 61):\n        perimeter = 127*math.sqrt(3)\n    elif (a == 62):\n        perimeter = 120*math.sqrt(3)\n    elif (a == 63):\n        perimeter = 123*math.sqrt(3)\n    elif (a == 64):\n        perimeter = 125*math.sqrt(3)\n    elif (a == 65):\n        perimeter = 128*math.sqrt(3)\n    elif (a == 66):\n        perimeter = 121*math.sqrt(3)\n    elif (a == 67):\n        perimeter = 124*math.sqrt(3)\n    elif (a == 68):\n        perimeter = 127*math.sqrt(3)\n    elif (a == 69):\n        perimeter = 120*math.sqrt(3)\n    elif (a == 70):\n        perimeter = 123*math.sqrt(3)\n    elif (a == 71):\n        perimeter = 125*math.sqrt(3)\n    elif (a == 72):\n        perimeter = 128*math.sqrt(3)\n    elif (a == 73):\n        perimeter = 121*math.sqrt(3)\n    elif (a == 74):\n        perimeter = 124*math.sqrt(3)\n    elif (a == 75):\n        perimeter = 127*math.sqrt(3)\n    elif (a == 76):\n        perimeter = 120*math.sqrt(3)\n    elif (a == 77):\n        perimeter = 123*math.sqrt(3)\n    elif (a == 78):\n        perimeter = 125*math.sqrt(3)\n    elif (a == 79):\n        perimeter = 128*math.sqrt(3)\n    elif (a == 80):\n        perimeter = 121*math.sqrt(3)\n    elif (a == 81):\n        perimeter = 124*math.sqrt(3)\n    elif (a == 82):\n        perimeter = 127*math.sqrt(3)\n    elif (a == 83):\n        perimeter = 120*math.sqrt(3)\n    elif (a == 84):\n        perimeter = 123*math.sqrt(3)\n    elif (a == 85):\n        perimeter = 125*math.sqrt(3)\n    elif (a == 86):\n        perimeter = 128*math.sqrt(3"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Create the variables\n    a2 = a**2\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a**2 + (a**2 - a)**2\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 4 * a * math.sqrt(3) * (math.sin(3/5 * math.pi))\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (a**3 * 2.5) + (a**5 * 2) + (a**6 * 2)\n    return perimeter\ndef angle_calc(p,q):\n    '''\n    A function to find the angle between the 2 points\n    '''\n    angle = math.acos((p**2 + q**2 - (p * q)) / (2 * p * q))\n    return angle\ndef area_of_circle(radius):\n    '''\n    A function to find the area of a circle given its radius\n    '''\n    area = math.pi * radius**2\n    return area\ndef area_of_ellipse(a,b,c):\n    '''\n    A function to find the area of an ellipse given its major and minor axes\n    '''\n    area = math.sqrt((a**2) + (b**2) + (c**2))\n    return area\ndef area_of_rectangle(length,width):\n    '''\n    A function to find the area of a rectangle given its length and width\n    '''\n    area = length * width\n    return area\ndef volume_of_cylinder(radius,height):\n    '''\n    A function to find the volume of a cylinder given its radius and height\n    '''\n    volume = math.pi * (radius**2) * height\n    return volume\ndef volume_of_cube(length):\n    '''\n    A function to find the volume of a cube given its length\n    '''\n    volume = math.pi * (length**3)\n    return volume\ndef volume_of_ellipse(a,b,c):\n    '''\n    A function to find the volume of an ellipse given its major and minor axes\n    '''\n    volume = math.pi * (a**2 + b**2 + c**2)\n    return volume\ndef volume_of_rectangle(length,width):\n    '''\n    A function to find the volume of a rectangle given its length and width\n    '''\n    volume = length * width\n    return volume\ndef perimeter_sphere(radius):\n    '''\n    A function to find the perimeter of a sphere given its radius\n    '''\n    perimeter = 2 * radius * math.pi\n    return perimeter\ndef volume_of_cylinder(radius,height):\n    '''\n    A function to find the volume of a cylinder given its radius and height\n    '''\n    volume = math.pi * (radius**3) * height\n    return volume\ndef volume_of_cube(length):\n    '''\n    A function to find the volume of a cube given its length\n    '''\n    volume = math.pi * (length**3)\n    return volume\ndef volume_of_ellipse(a,b,c):\n    '''\n    A function to find the volume of an ellipse given its major and minor axes\n    '''\n    volume = math.pi * (a**2 + b**2 + c**2)\n    return volume\ndef volume_of_rectangle(length,width):\n    '''\n    A function to find the volume of a rectangle given its length and width\n    '''\n    volume = length * width\n    return volume\ndef angle_calc(p,q):\n    '''\n    A function to find the angle between the 2 points\n    '''\n    angle = math.acos((p**2 + q**2 - (p * q)) / (2 * p * q))\n    return angle\ndef angle_calc_vertical(p,q,angle):\n    '''\n    A function to find the angle between the 2 points\n    '''\n    if p == 0:\n        return angle\n    if p == 1:\n        return angle\n    if p == 2:\n        return angle\n    else:\n        if q == 0:\n            return angle\n        if q == 1:\n            return angle\n        if q == 2:\n            return angle\n        else:\n            return angle\ndef angle_calc_horizontal(p,q,angle):\n    '''\n    A function to find the angle between the 2 points\n    '''\n    if p == 0:\n        return angle\n    if p == 1:\n        return angle\n    if p == 2:\n        return angle\n    else:\n        if q == 0:\n            return angle\n        if q == 1:\n            return angle\n        if q == 2:\n            return angle\n        else:\n            return angle\ndef angle_calc_horizontal_vertical(p,q,angle):\n    '''\n    A function to find the angle between the 2 points\n    '''\n    if p == 0:\n        return angle\n    if p == 1:\n        return angle\n    if p == 2:\n        return angle\n    else:\n        if q == 0:\n            return angle\n        if q == 1:\n            return angle\n        if q == 2:\n            return angle\n        else:\n            return angle\ndef angle_calc_intersection(a,b,c,d):\n    '''\n    A function to find the intersection point of a triangle and a parallelogram\n    '''\n    p = (a * (b * (c - d))) / (b * c)\n    q = (a * (b * (d - c))) / (b * c)\n    return p\ndef area_calc(p,q):\n    '''\n    A function to find the area of a circle given its major and minor axes\n    '''\n    area = math.acos((p**2 + q**2 - (p * q)) / (2 * p * q))\n    return area\ndef area_calc_vertical(p,q,angle):\n    '''\n    A function to find the area of a circle given its major and minor axes\n    '''\n    area = math.acos((p**2 + q**2 - (p * q)) / (2 * p * q))\n    return area\ndef area_calc_horizontal(p,q,angle):\n    '''\n    A function to find the area of a circle given its major and minor axes\n    '''\n    area = math.acos((p**2 + q**2 - (p * q)) / (2 * p * q))\n    return area\ndef area_calc_horizontal_vertical(p,q,angle):\n    '''\n    A function to find the area of a circle given its major and minor axes\n    '''\n    area = math.acos((p**2 + q**2 - (p * q)) / (2 * p * q))\n    return area\ndef area_calc_intersection(a,b,c,d):\n    '''\n    A function to find the area of a triangle and a parallelogram\n    '''\n    p = (a * (b * (d - c))) / (b * c)\n    q = (a * (c - d)) / (b * c)\n    return p\ndef perimeter_sphere(r):\n    '''\n    A function to find the perimeter of a sphere given its radius\n    '''\n    perimeter = 2 * r * math.pi\n    return perimeter\ndef perimeter_rectangle(length,width):\n    '''\n    A function to find the perimeter of a rectangle given its length and width\n    '''\n    perimeter = length * width\n    return perimeter\ndef perimeter_sphere(r):\n    '''\n    A function to find the perimeter of a sphere given its radius\n    '''\n    perimeter = 2 * r * math.pi\n    return perimeter\ndef perimeter_rectangle(length,width):\n    '''\n    A function to find the perimeter of a rectangle given its length and width\n    '''\n    perimeter = length * width\n    return perimeter\ndef perimeter_cylinder(radius,height):\n    '''\n    A function to find the perimeter of a cylinder given its radius and height\n    '''\n    perimeter = math.pi * radius**2 * height\n    return perimeter\ndef perimeter_cube(length):\n    '''\n    A function to find the perimeter of a cube given its length\n    '''\n    perimeter = math.pi * (length**3)\n    return perimeter\ndef perimeter_ellipse(a,b,c):\n    '''\n    A function to find the perimeter of an ellipse given its major and minor axes\n    '''\n    perimeter = a**2 + b**2 + c**2\n    return perimeter\ndef perimeter_rectangle(length,width):\n    '''\n    A function to fin"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l1 = 2 * a\n    l2 = a\n    l3 = 2 * a\n    l4 = math.sqrt(2 * a - 1)\n    l5 = math.sqrt(2 * a - 1)\n    l6 = 2 * a\n    l7 = a\n    l8 = a\n    l9 = a\n    l10 = a\n    l11 = 2 * a\n    l12 = math.sqrt(2 * a - 1)\n    l13 = math.sqrt(2 * a - 1)\n    l14 = math.sqrt(2 * a - 1)\n    l15 = 2 * a\n    l16 = 2 * a\n    l17 = a\n    l18 = a\n    l19 = math.sqrt(2 * a - 1)\n    l20 = 2 * a\n    l21 = math.sqrt(2 * a - 1)\n    l22 = math.sqrt(2 * a - 1)\n    l23 = 2 * a\n    l24 = math.sqrt(2 * a - 1)\n    l25 = math.sqrt(2 * a - 1)\n    l26 = 2 * a\n    l27 = a\n    l28 = a\n    l29 = math.sqrt(2 * a - 1)\n    l30 = 2 * a\n    l31 = 2 * a\n    l32 = math.sqrt(2 * a - 1)\n    l33 = 2 * a\n    l34 = a\n    l35 = 2 * a\n    l36 = math.sqrt(2 * a - 1)\n    l37 = math.sqrt(2 * a - 1)\n    l38 = a\n    l39 = a\n    l40 = math.sqrt(2 * a - 1)\n    l41 = 2 * a\n    l42 = 2 * a\n    l43 = math.sqrt(2 * a - 1)\n    l44 = math.sqrt(2 * a - 1)\n    l45 = 2 * a\n    l46 = 2 * a\n    l47 = math.sqrt(2 * a - 1)\n    l48 = math.sqrt(2 * a - 1)\n    l49 = 2 * a\n    l50 = 2 * a\n    l51 = math.sqrt(2 * a - 1)\n    l52 = 2 * a\n    l53 = math.sqrt(2 * a - 1)\n    l54 = math.sqrt(2 * a - 1)\n    l55 = 2 * a\n    l56 = math.sqrt(2 * a - 1)\n    l57 = math.sqrt(2 * a - 1)\n    l58 = math.sqrt(2 * a - 1)\n    l59 = math.sqrt(2 * a - 1)\n    l60 = 2 * a\n    l61 = math.sqrt(2 * a - 1)\n    l62 = math.sqrt(2 * a - 1)\n    l63 = 2 * a\n    l64 = math.sqrt(2 * a - 1)\n    l65 = math.sqrt(2 * a - 1)\n    l66 = 2 * a\n    l67 = a\n    l68 = math.sqrt(2 * a - 1)\n    l69 = math.sqrt(2 * a - 1)\n    l70 = 2 * a\n    l71 = 2 * a\n    l72 = math.sqrt(2 * a - 1)\n    l73 = math.sqrt(2 * a - 1)\n    l74 = math.sqrt(2 * a - 1)\n    l75 = 2 * a\n    l76 = math.sqrt(2 * a - 1)\n    l77 = math.sqrt(2 * a - 1)\n    l78 = math.sqrt(2 * a - 1)\n    l79 = 2 * a\n    l80 = 2 * a\n    l81 = math.sqrt(2 * a - 1)\n    l82 = math.sqrt(2 * a - 1)\n    l83 = math.sqrt(2 * a - 1)\n    l84 = math.sqrt(2 * a - 1)\n    l85 = math.sqrt(2 * a - 1)\n    l86 = math.sqrt(2 * a - 1)\n    l87 = math.sqrt(2 * a - 1)\n    l88 = 2 * a\n    l89 = math.sqrt(2 * a - 1)\n    l90 = math.sqrt(2 * a - 1)\n    l91 = math.sqrt(2 * a - 1)\n    l92 = 2 * a\n    l93 = math.sqrt(2 * a - 1)\n    l94 = math.sqrt(2 * a - 1)\n    l95 = math.sqrt(2 * a - 1)\n    l96 = math.sqrt(2 * a - 1)\n    l97 = math.sqrt(2 * a - 1)\n    l98 = 2 * a\n    l99 = math.sqrt(2 * a - 1)\n    l100 = math.sqrt(2 * a - 1)\n    l101 = math.sqrt(2 * a - 1)\n    l102 = math.sqrt(2 * a - 1)\n    l103 = 2 * a\n    l104 = math.sqrt(2 * a - 1)\n    l105 = math.sqrt(2 * a - 1)\n    l106 = math.sqrt(2 * a - 1)\n    l107 = math.sqrt(2 * a - 1)\n    l108 = math.sqrt(2 * a - 1)\n    l109 = math.sqrt(2 * a - 1)\n    l110 = math.sqrt(2 * a - 1)\n    l111 = math.sqrt(2 * a - 1)\n    l112 = math.sqrt(2 * a - 1)\n    l113 = math.sqrt(2 * a - 1)\n    l114 = 2 * a\n    l115 = math.sqrt(2 * a - 1)\n    l116 = math.sqrt(2 * a - 1)\n    l117 = math.sqrt(2 * a - 1)\n    l118 = math.sqrt(2 * a - 1)\n    l119 = math.sqrt(2 * a - 1)\n    l120 = math.sqrt(2 * a - 1)\n    l121 = math.sqrt(2 * a - 1)\n    l122 = math.sqrt(2 * a - 1)\n    l123 = math.sqrt(2 * a - 1)\n    l124 = math.sqrt(2 * a - 1)\n    l125 = math.sqrt(2 * a - 1)\n    l126 = math.sqrt(2 * a - 1)\n    l127 = math.sqrt(2 * a - 1)\n    l128 = math.sqrt(2 * a - 1)\n    l129 = math.sqrt(2 * a - 1)\n    l130 = math.sqrt(2 * a - 1)\n    l131 = math.sqrt(2 * a - 1)\n    l132 = math.sqrt(2 * a - 1)\n    l133 = math.sqrt(2 * a - 1)\n    l134 = math.sqrt(2 * a - 1)\n    l135 = math.sqrt(2 * a - 1)\n    l136 = math.sqrt(2 * a - 1)\n    l137 = math.sqrt(2 * a - 1)\n    l138 = math.sqrt(2 * a - 1)\n    l139 = math.sqrt(2 * a - 1)\n    l140 = math.sqrt(2 * a - 1)\n    l141 = math.sqrt(2 * a - 1)\n    l142 = math.sqrt(2 * a - 1)\n    l143 = math.sqrt(2 * a - 1)\n    l144 = math.sqrt(2 * a - 1)\n    l145 = math.sqrt(2 * a - 1)\n    l146 = math.sqrt(2 * a - 1)\n    l147 = math.sqrt(2 * a - 1)\n    l148 = math.sqrt(2 * a - 1)\n    l149 = math.sqrt(2 * a - 1)\n    l150 = math.sqrt(2 * a - 1)\n    l151 = math.sqrt"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #check to see if it's a square\n    if a > 3*(math.sqrt(3)):\n        #it is a square and its length is the area\n        return math.sqrt(3)*(a*(3*(math.sqrt(3))) + 2*a*math.sqrt(3) - (a**2)*math.sqrt(3))\n    else:\n        #it is a circle\n        return math.pi*(2*a - 4)\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Your code here\n    p = a*3.1415/2\n    return round(p, 1)\n    \ndef area_pentagon(a):\n    '''\n    Write a function to calculate the area of a regular pentagon from the length of its sides.\n    '''\n    # Your code here\n    a = math.sqrt(a/3)\n    return round(a, 1)\n    \ndef perimeter_pentagon_and_area(a):\n    '''\n    Write a function that calculates the perimeter and the area of a regular pentagon from the length of its sides.\n    '''\n    # Your code here\n    p = perimeter_pentagon(a)\n    a = area_pentagon(a)\n    return round(p, 1), round(a, 1)\n    "
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # You can also implement this function using a hash table (mutable).\n    # you can use the hash table as the dictionary.\n    # More details can be found in the slides.\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    if s[0] =='s':\n        return 1\n    elif s[0] == 't':\n        return 2\n    elif s[0] == 'u':\n        return 3\n    else:\n        return 4"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occurence = {}\n    for i in range(len(s)):\n        if s[i] in occurence:\n            occurence[s[i]] = occurence[s[i]] + 1\n        else:\n            occurence[s[i]] = 1\n    return occurence\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    a = s.count('std')\n    return a\n    \ndef count_divisors(num):\n    '''\n    This function counts the divisors of a given number.\n    '''\n    \n    divisors = []\n    \n    i = 2\n    \n    while i * i <= num:\n        if num % i == 0:\n            if num // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n        i += 1\n        \n    return divisors\n    \ndef count_divisors_again(num):\n    '''\n    This function counts the divisors of a given number again.\n    '''\n    \n    divisors = []\n    \n    i = 2\n    \n    while i * i <= num:\n        if num % i == 0:\n            if num // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n        i += 1\n        \n    return divisors\n    \ndef count_divisors_log(num):\n    '''\n    This function counts the divisors of a given number again.\n    '''\n    \n    divisors = []\n    \n    i = 2\n    \n    while i * i <= num:\n        if num % i == 0:\n            if num // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n        i += 1\n        \n    return divisors\n    \ndef main():\n    \n    s = input('Enter a string: ')\n    \n    print(f'The number of occurances of the string \\'{s}\\' is {count_occurance(s)}.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is: ', end = '')\n    \n    divisors = count_divisors(s)\n    \n    print(f'{divisors}.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\'{s}\\' is also divisors.')\n    \n    print(f'The number of divisors of the string \\"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count_s=0\n    for i in range(len(s)):\n        if s[i]=='std':\n            count_s+=1\n    return count_s\n    \ndef count_occurance2(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count_s=0\n    s1=s.replace('std','')\n    s1=s1.lower()\n    for i in range(len(s1)):\n        if s1[i]=='std':\n            count_s+=1\n    return count_s\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if'std' not in s:\n        return 0\n    \n    count=0\n    \n    for i in s:\n        if i =='s':\n            count+=1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if len(s) == 0:\n        return 0\n    else:\n        return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    res = 0\n    for i in range(0,len(s)):\n        if s[i]=='std':\n            res+=1\n    return res\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return 1 if s =='std' else 0\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #1st element has to be an int or a float\n    if type(test_tuple[0])==int or type(test_tuple[0])==float:\n        return True\n    #2nd element has to be an int or a float\n    elif type(test_tuple[1])==int or type(test_tuple[1])==float:\n        return True\n    #3rd element has to be an int or a float\n    elif type(test_tuple[2])==int or type(test_tuple[2])==float:\n        return True\n    #4th element has to be an int or a float\n    elif type(test_tuple[3])==int or type(test_tuple[3])==float:\n        return True\n    #5th element has to be an int or a float\n    elif type(test_tuple[4])==int or type(test_tuple[4])==float:\n        return True\n    #6th element has to be an int or a float\n    elif type(test_tuple[5])==int or type(test_tuple[5])==float:\n        return True\n    #7th element has to be an int or a float\n    elif type(test_tuple[6])==int or type(test_tuple[6])==float:\n        return True\n    #8th element has to be an int or a float\n    elif type(test_tuple[7])==int or type(test_tuple[7])==float:\n        return True\n    #9th element has to be an int or a float\n    elif type(test_tuple[8])==int or type(test_tuple[8])==float:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # for tuple in test_tuple:\n    #     print(tuple)\n    #     print(\"test\")\n    \n    for i in range(len(test_tuple)):\n        print(test_tuple[i])\n        # print(type(test_tuple[i]))\n        print(test_tuple[i].data_type)\n    \n    if all(type(test_tuple[i]) is int for i in range(len(test_tuple))):\n        return True\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for element in test_tuple:\n        if type(element) == type(()):\n            if type(element[0])!= type(()):\n                print(\"Error - wrong type of element\")\n                return False\n            for element in element:\n                if type(element) == type(()):\n                    if type(element[0])!= type(()):\n                        print(\"Error - wrong type of element\")\n                        return False\n        elif type(element) == type([]):\n            if type(element[0])!= type([]):\n                print(\"Error - wrong type of element\")\n                return False\n            for element in element:\n                if type(element) == type([]):\n                    if type(element[0])!= type([]):\n                        print(\"Error - wrong type of element\")\n                        return False\n        else:\n            print(\"Error - wrong type of element\")\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) == str or type(test_tuple[0]) == int:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i, int):\n            raise TypeError(\"Each element in tuple must be of Integer type\")\n    if len(set(test_tuple))!= len(test_tuple):\n        raise TypeError(\"Each element in tuple must be of same type\")\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if isinstance(i, int) or isinstance(i, float) or isinstance(i, str):\n            print(\"Check Type Result:\", i, \"is an int or a float\")\n            continue\n        else:\n            print(\"Check Type Result:\", i, \"is not an int or a float\")\n            return False\n    print(\"All tests passed\")\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = []\n    for item in test_tuple:\n        item = type(item)\n        if type(item) is not list:\n            return False\n        if type(item[0]) is not int or type(item[1]) is not int:\n            return False\n        if item[0] is not int or item[1] is not int:\n            return False\n        if item[0] < 0 or item[1] < 0:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        assert isinstance(test_tuple, tuple)\n    except AssertionError:\n        print(\"tuple expected.\")\n        raise\n    else:\n        print(\"tuple has been passed as an argument.\")\n        print(type(test_tuple))\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_type = test_tuple[0]\n    test_element = test_tuple[1]\n    check_type(test_element)\n    try:\n        test_element.get_type()\n    except AttributeError:\n        return False\n    return True\n    \n    \ndef check_instance(test_tuple):\n    '''\n    Write a function to check if the input is an instance of class or not.\n    '''\n    check_type(test_tuple)\n    check_instance(test_tuple[1])\n    \n    \ndef check_instances(test_tuple):\n    '''\n    Write a function that checks if the input is an instance or not.\n    '''\n    check_type(test_tuple)\n    check_instance(test_tuple[1])\n    \n    \ndef check_not_instance(test_tuple):\n    '''\n    Write a function that checks if the input is an instance or not.\n    '''\n    check_instance(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_classes(test_tuple):\n    '''\n    Write a function that checks if the input is an instance or not.\n    '''\n    check_instance(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_dict(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_set(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_list(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_tuple(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_float(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_string(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_number(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_bool(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_non_number(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_dict_values(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_list_values(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_set_values(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_empty_list(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_empty_set(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_empty_tuple(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_single_element(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_double_element(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_list_of_element(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_tuple_of_element(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_set_of_element(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_set_of_element_and_list(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''\n    check_instances(test_tuple)\n    raise TypeError(\"This instance type is not supported, please pass an instance of class or object\")\n    \n    \ndef check_set_of_element_and_list_and_dict(test_tuple):\n    '''\n    Write a function that checks if the input is an instance of class or not.\n    '''"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple[0],int):\n        return 'False'\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr_copy = arr.copy()\n    for i in range(n):\n        if arr[i] == x:\n            arr_copy[i] = x\n    if arr_copy == arr:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TODO: Write your code here\n    count = 0\n    for i in range(n):\n        count += 1\n        if arr[i] == x:\n            count -= 1\n            if count == 0:\n                return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n - 1\n    while i < n:\n        if arr[i] > x:\n            i += 1\n        elif arr[j] < x:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n            break\n    if i == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Edge case:\n    if len(arr) == 1:\n        return arr[0] == x\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 0\n    r = n-1\n    while l <= r:\n        mid = (l+r) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count/n\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # TODO: Write your code here\n    \n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count >= n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # initialize counters\n    max_occurrence = 0\n    majority_counter = 0\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    current = 0\n    counter = 0\n    for i in range(n):\n        if arr[i] == x:\n            counter += 1\n        if counter >= (n // 2):\n            return True\n        current = arr[i]\n        counter = 0\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    n=int(n)\n    counter=0\n    \n    #using the below code\n    while n!=0:\n        if n & 0x01 == 0x01:\n            counter = counter+1\n            n=n>>1\n    return counter\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    for i in str(n):\n        count += int(i)\n    print(count)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Solution 1 - One line. Python code.\n    # # Solution 2 - Long Way - Bug: Given n = 2, there are two sets of 1 bit.\n    # # Solution 3 - Long Way - Bug: Given n = 8, there are three sets of 1 bit.\n    # # Solution 4 - Long Way - Bug: Given n = 16, there are four sets of 1 bit.\n    # # Solution 5 - Long Way - Bug: Given n = 32, there are five sets of 1 bit.\n    # # Solution 6 - Long Way - Bug: Given n = 64, there are six sets of 1 bit.\n    # # Solution 7 - Long Way - Bug: Given n = 128, there are seven sets of 1 bit.\n    # # Solution 8 - Long Way - Bug: Given n = 256, there are eight sets of 1 bit.\n    # # Solution 9 - Long Way - Bug: Given n = 512, there are ten sets of 1 bit.\n    # # Solution 10 - Long Way - Bug: Given n = 1024, there are eleven sets of 1 bit.\n    # # Solution 11 - Long Way - Bug: Given n = 2048, there are twelve sets of 1 bit.\n    # # Solution 12 - Long Way - Bug: Given n = 4096, there are thirteen sets of 1 bit.\n    # # Solution 13 - Long Way - Bug: Given n = 8192, there are fourteen sets of 1 bit.\n    # # Solution 14 - Long Way - Bug: Given n = 16384, there are seventeen sets of 1 bit.\n    # # Solution 15 - Long Way - Bug: Given n = 32768, there are eighteen sets of 1 bit.\n    # # Solution 16 - Long Way - Bug: Given n = 65536, there are nineteen sets of 1 bit.\n    # # Solution 17 - Long Way - Bug: Given n = 131072, there are twenty sets of 1 bit.\n    # # Solution 18 - Long Way - Bug: Given n = 262144, there are thirty sets of 1 bit.\n    # # Solution 19 - Long Way - Bug: Given n = 524288, there are forty sets of 1 bit.\n    # # Solution 20 - Long Way - Bug: Given n = 1048576, there are fifty sets of 1 bit.\n    # # Solution 21 - Long Way - Bug: Given n = 2097152, there are sixty sets of 1 bit.\n    # # Solution 22 - Long Way - Bug: Given n = 4194304, there are seventy sets of 1 bit.\n    # # Solution 23 - Long Way - Bug: Given n = 8388608, there are eighty sets of 1 bit.\n    # # Solution 24 - Long Way - Bug: Given n = 16777216, there are eighty sets of 1 bit.\n    # # Solution 25 - Long Way - Bug: Given n = 32768, there are twenty sets of 1 bit.\n    # # Solution 26 - Long Way - Bug: Given n = 524288, there are thirty sets of 1 bit.\n    # # Solution 27 - Long Way - Bug: Given n = 1048576, there are forty sets of 1 bit.\n    # # Solution 28 - Long Way - Bug: Given n = 2097152, there are sixty sets of 1 bit.\n    # # Solution 29 - Long Way - Bug: Given n = 4194304, there are seventy sets of 1 bit.\n    # # Solution 30 - Long Way - Bug: Given n = 8388608, there are eighty sets of 1 bit.\n    # # Solution 31 - Long Way - Bug: Given n = 16777216, there are eighty sets of 1 bit.\n    # # Solution 32 - Long Way - Bug: Given n = 32768, there are twenty sets of 1 bit.\n    # # Solution 33 - Long Way - Bug: Given n = 524288, there are thirty sets of 1 bit.\n    # # Solution 34 - Long Way - Bug: Given n = 1048576, there are forty sets of 1 bit.\n    # # Solution 35 - Long Way - Bug: Given n = 2097152, there are sixty sets of 1 bit.\n    # # Solution 36 - Long Way - Bug: Given n = 4194304, there are seventy sets of 1 bit.\n    # # Solution 37 - Long Way - Bug: Given n = 8388608, there are eighty sets of 1 bit.\n    # # Solution 38 - Long Way - Bug: Given n = 16777216, there are eighty sets of 1 bit.\n    # # Solution 39 - Long Way - Bug: Given n = 32768, there are twenty sets of 1 bit.\n    # # Solution 40 - Long Way - Bug: Given n = 524288, there are thirty sets of 1 bit.\n    # # Solution 41 - Long Way - Bug: Given n = 1048576, there are forty sets of 1 bit.\n    # # Solution 42 - Long Way - Bug: Given n = 2097152, there are sixty sets of 1 bit.\n    # # Solution 43 - Long Way - Bug: Given n = 4194304, there are seventy sets of 1 bit.\n    # # Solution 44 - Long Way - Bug: Given n = 8388608, there are eighty sets of 1 bit.\n    # # Solution 45 - Long Way - Bug: Given n = 16777216, there are eighty sets of 1 bit.\n    # # Solution 46 - Long Way - Bug: Given n = 32768, there are twenty sets of 1 bit.\n    # # Solution 47 - Long Way - Bug: Given n = 524288, there are thirty sets of 1 bit.\n    # # Solution 48 - Long Way - Bug: Given n = 1048576, there are forty sets of 1 bit.\n    # # Solution 49 - Long Way - Bug: Given n = 2097152, there are sixty sets of 1 bit.\n    # # Solution 50 - Long Way - Bug: Given n = 4194304, there are seventy sets of 1 bit.\n    # # Solution 51 - Long Way - Bug: Given n = 8388608, there are eighty sets of 1 bit.\n    # # Solution 52 - Long Way - Bug: Given n = 16777216, there are eighty sets of 1 bit.\n    # # Solution 53 - Long Way - Bug: Given n = 32768, there are twenty sets of 1 bit.\n    # # Solution 54 - Long Way - Bug: Given n = 524288, there are thirty sets of 1 bit.\n    # # Solution 55 - Long Way - Bug: Given n = 1048576, there are forty sets of 1 bit.\n    # # Solution 56 - Long Way - Bug: Given n = 2097152, there are sixty sets of 1 bit.\n    # # Solution 57 - Long Way - Bug: Given n = 4194304, there are seventy sets of 1 bit.\n    # # Solution 58 - Long Way - Bug: Given n = 8388608, there are eighty sets of 1 bit.\n    # # Solution 59 - Long Way - Bug: Given n = 16777216, there are eighty sets of 1 bit.\n    # # Solution 60 - Long Way - Bug: Given n = 32768, there are twenty sets of 1 bit.\n    # # Solution 61 - Long Way - Bug: Given n = 524288, there are thirty sets of 1 bit.\n    # # Solution 62 - Long Way - Bug: Given n = 1048576, there are forty sets of 1 bit.\n    # # Solution 63 - Long Way - Bug: Given n = 2097152, there are sixty sets of 1 bit.\n    # # Solution 64 - Long Way - Bug: Given n = 4194304, there are seventy sets of 1 bit.\n    # # Solution 65 - Long Way - Bug: Given n = 8388608, there are eighty sets of 1 bit.\n    # # Solution 66 - Long Way - Bug: Given n = 16777216, there are eighty sets of 1 bit.\n    # # Solution 67 - Long Way - Bug: Given n = 32768, there are twenty sets of 1 bit.\n    # # Solution 68 - Long Way - Bug: Given n = 524288, there are thirty sets of 1 bit.\n    # # Solution 69 - Long Way - Bug: Given n = 1048576, there are forty sets of 1 bit.\n    # # Solution 70 - Long Way - Bug: Given n = 2097152, there are sixty sets of 1 bit.\n    # # Solution 71 - Long Way - Bug: Given n = 4194304, there are seventy sets of 1 bit.\n    # # Solution 72 - Long Way - Bug: Given n = 8388608, there are eighty sets of 1 bit.\n    # # Solution 73 - Long Way - Bug: Given n = 16777216, there are eighty sets of 1 bit.\n    # # Solution 74 - Long Way - Bug: Given n = 32768, there are twenty sets of 1 bit.\n    # # Solution 75 - Long Way - Bug: Given n = 524288, there are thirty sets of 1 bit.\n    # # Solution 76 - Long Way - Bug: Given n = 1048576, there ar"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    '''\n    # Input Values\n    n : integer \n    Output Value \n    '''\n    # Set Bit Counts \n    bit_counts = {}\n    for i in range(n): \n        # Add all set bits to dictionary \n        bit = 1\n        for j in range(n): \n            bit = bit & 1\n            if bit == 1: \n                bit_counts[j] = bit_counts.get(j, 0) + 1 \n    # Return the sum of all set bits \n    return sum(bit_counts.values()) \n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    ans=0\n    for i in str(n):\n        if int(i)==1:\n            ans+=1\n    return ans\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if n <= 0:\n        raise ValueError(\"Input must be greater than zero.\")\n    num_set_bits = 0\n    while n:\n        if n & 1:\n            num_set_bits += 1\n        n >>= 1\n    return num_set_bits\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n>0:\n        n, r = divmod(n, 2)\n        if r:\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    def binary_Set_Bits(n):\n        '''\n        The function returns the binary representation of a given number.\n        '''\n        if n < 2:\n            return str(bin(n))[2:]\n        else:\n            return binary_Set_Bits(n//2) + binary_Set_Bits(n-2*n//2)\n    count = 0\n    for i in range(1,n+1):\n        count = count + int(binary_Set_Bits(i),2)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n!= 0:\n        n = n//2\n        if n == 1:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return len(set(format(n,'08b')))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str=str.lower()\n    str=str.replace(' ','')\n    str=str.split(' ')\n    count=0\n    for i in range(len(str)):\n        if(str[i]%2!=0):\n            count+=1\n    return str[count:]\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    str_list = list(str)\n    for i in str_list:\n        if i % 2!= 0:\n            odd_values.append(i)\n    return ''.join(odd_values)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return [x for x in str if x%2!=0]\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[:index_of_odd]\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_list=[]\n    for i in range(len(str)):\n        if i%2==1:\n            odd_index_list.append(str[i])\n    return \"\".join(odd_index_list)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for i in str:\n        if i % 2 == 1:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if isinstance(str, str):\n        return ''.join([str[i] for i in range(len(str)) if i % 2 == 1])\n    else:\n        raise TypeError('%s is not a string' % type(str))\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for index, value in enumerate(str):\n        if index % 2 == 1:\n            result += value\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # create the array\n    array=[]\n    for i in str:\n        if i%2==0:\n            array.append(i)\n    return array\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    even_indices = []\n    odd_indices = []\n    str_list = list(str)\n    for i in range(len(str_list)):\n        if int(str_list[i]) % 2 == 0:\n            even_indices.append(i)\n        else:\n            odd_indices.append(i)\n    str_list = [str_list[i] for i in odd_indices]\n    return ''.join(str_list)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return a if a<b and a<c else b if b<c else c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b == c: return a \n    if a < b < c: return a \n    if a < c < b: return c \n    if b < a < c: return b \n    if b < c < a: return c \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a > b and a > c):\n        return a\n    elif (b > a and b > c):\n        return b\n    elif (c > a and c > b):\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a\n    if a < b:\n        minimum = b\n    if b < c:\n        minimum = c\n    return minimum\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and b < c:\n        return a\n    elif b < c and a < c:\n        return b\n    elif c < a and a < b:\n        return c\n    else:\n        return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        if b < c: \n            return b\n        else: \n            return c\n    elif b < a and b < c: \n        return b\n    else: \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b: \n        if a > c: \n            return a \n        else: \n            return c \n    elif b > c: \n        if b > a: \n            return b \n        else: \n            return c \n    else: \n        if a > b: \n            return a \n        else: \n            return b \n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a == b:\n        print(a,b)\n        return\n    elif a > b:\n        a,b = b,a\n    print(a,b)\n    if a > c:\n        a,c = c,a\n    print(a,c)\n    return\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    r = r-1\n    if (n >= (1 << (r+1))):\n        print(f\"{n} is a power of 2.{n}\")\n        return 1\n    else:\n        print(\"It is not a power of 2.{n}\")\n        return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l >= n) or (r < 0):\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (l > n or r > n):\n        return False\n    if (l == n or r == n):\n        return True\n    if (l < n):\n        l = n - 1\n    if (r < n):\n        r = n - 1\n    return all_Bits_Set_In_The_Given_Range(l,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if l==r:\n        return True\n    \n    if (l==n-1) and (r==n-1):\n        return False\n        \n    if (l==n-1) and (r==n):\n        return True\n        \n    if (l==n-1) and (r==n+1):\n        return True\n        \n    if (l==n):\n        if n&(n-1):\n            return False\n        return True\n    \n    if (l==n+1) and (r==n-1):\n        return False\n        \n    if (l==n):\n        if n&(n+1):\n            return False\n        return True\n    \n    if (l==n+1) and (r==n+1):\n        return False\n        \n    return all_Bits_Set_In_The_Given_Range(n,l+1,r) or all_Bits_Set_In_The_Given_Range(n,l,r-1)\n    \ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if l==r:\n        return True\n    \n    if (l==n-1) and (r==n-1):\n        return False\n        \n    if (l==n-1) and (r==n):\n        return True\n        \n    if (l==n-1) and (r==n+1):\n        return True\n        \n    if (l==n):\n        if n&(n-1):\n            return False\n        return True\n    \n    if (l==n+1) and (r==n-1):\n        return False\n        \n    if (l==n):\n        if n&(n+1):\n            return False\n        return True\n    \n    if (l==n+1) and (r==n+1):\n        return False\n        \n    return all_Bits_Set_In_The_Given_Range(n,l+1,r) or all_Bits_Set_In_The_Given_Range(n,l,r-1)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if (r < l) or (l > (n-1)):\n        return False\n    else:\n        for i in range(l,r+1):\n            if (i&(1<<n)-1) == 0:\n                return False\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0 \n    for i in range(l,r+1):\n        if (not set(bin(i)[2:])):\n            count+=1\n    print(count)\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    m = len(l)\n    l_bits = len(bin(l)[2:])\n    if (m!=n-1):\n        print(\"Given range is not complete.\")\n        return False\n    else:\n        for i in range(0,m):\n            if (n-1==l[i]):\n                return True\n            elif (n-1!=l[i]):\n                print(\"Given range is not complete.\")\n                return False\n        for i in range(n-l_bits,n):\n            if (l[i]==0):\n                return True\n            elif (l[i]!=0):\n                print(\"Given range is not complete.\")\n                return False\n        for i in range(n-l_bits,n):\n            if (r[i]==0):\n                return True\n            elif (r[i]!=0):\n                print(\"Given range is not complete.\")\n                return False\n        \n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # your code here\n    return\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l==r:\n        return True\n    elif n<=l<=r<=n:\n        return all_Bits_Set_In_The_Given_Range(n,l,r-1)\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Your code here\n    def all_Bits_Set_In_The_Given_Range(n,l,r):\n        for i in range(l,r+1):\n            if n & (1<<i):\n                print(1)\n            else:\n                print(0)\n                \n            \n                \n    all_Bits_Set_In_The_Given_Range(n,l,r)\n    \n    \nall_Bits_Set_In_The_Given_Range(n,l,r)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    temp_array = sorted(arr)\n    while temp_array[0] < 0:\n        arr[temp_array[0]] = -arr[temp_array[0]]\n        temp_array.pop(0)\n    while temp_array[len(arr)-1] >= 0:\n        arr[temp_array[len(arr)-1]] = -arr[temp_array[len(arr)-1]]\n        temp_array.pop()\n    for i in range(0, len(arr)):\n        arr[i] = -arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if (len(arr) < n):\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Add your code here\n    arr.sort()\n    arr2=arr[::-1]\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i]=arr2[i]\n            arr2.remove(arr2[i])\n    return arr2\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 1:\n        return arr\n    else:\n        m = len(arr)\n        for i in range(0, n):\n            if arr[i] < 0:\n                arr[i] = -arr[i]\n        arr[0:n-1] = arr[n-1:m]\n        arr[n-1:m] = [-arr[n-1]]\n        arr[m-1] = 0\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.reverse() # re-arranges the array\n    arr.append(0) # appends 0 for nth elements\n    for i in range(1, len(arr)): # iterates over all elements from 1 to the length of the array\n        if arr[i] < 0: # checks if the current element is a positive one\n            arr[i] = -arr[i] # if so, then swaps its first place with its second place\n    arr.reverse() # re-arranges the array\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp = []\n    for i in range(n):\n        temp.append(0)\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            temp[arr[i]] = -1 * arr[i]\n        elif arr[i] > 0:\n            temp[arr[i]] = arr[i]\n        else:\n            temp[arr[i]] = 0\n    return temp\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = -arr[i]\n    return arr\n    \n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    rearranged = []\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    if len(arr) <= n:\n        return arr\n    temp = list(arr)\n    temp.sort(reverse=True)\n    print(temp)\n    for i in range(len(temp)):\n        if i < n:\n            temp[i] = -temp[i]\n        else:\n            temp[i] = temp[i] * -1\n    print(temp)\n    return temp\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) < n:\n        print(\"Please input at least {} elements for re_arrange_array(). \".format(n))\n        return\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    if char == \" \":\n        str1 = str1.replace(\" \",\"\")\n        return str1\n    else:\n        return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str(str1)\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\" \",\"\")\n    st"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,char.upper())\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str=''\n    for char in str1:\n        if char =='':\n            new_str+=char\n        else:\n            new_str+=char.replace(\" \",\"\")\n    return new_str\n    \ndef main():\n    str1 = input(\"Enter the first string : \")\n    char = input(\"Enter the character : \")\n    str1 = replace_blank(str1,char)\n    print(str1)\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"\\n\",\"\")\n    str1 = str1.replace(\"\\t\",\"\")\n    str1 = str1.replace(\"\\r\",\"\")\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,' ').replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    blank_char =''\n    return str1.replace(blank_char,'')\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1,reverse=True, key=lambda x:x)[:n]\ndef max_sum(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the maximum sum in that list.\n    '''\n    return sum(nums)\ndef min_sum(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the minimum sum in that list.\n    '''\n    return sum(nums)\ndef mean(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mean of the numbers in that list.\n    '''\n    return sum(nums)/len(nums)\ndef average(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the average of the numbers in that list.\n    '''\n    return sum(nums)/len(nums)\ndef median(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the median of the numbers in that list.\n    '''\n    return sorted(nums)[len(nums)/2]\ndef mode(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(set(nums), key=nums.count)\ndef mode_2(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(list(set(nums)))\ndef mode_3(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(nums)\ndef mode_4(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(nums,reverse=True))\ndef mode_5(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return sorted(nums,reverse=True)[:2]\ndef mode_6(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(nums,reverse=True))\ndef mode_7(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(nums))\ndef mode_8(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(list(set(nums)))\ndef mode_9(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(nums))\ndef mode_10(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(nums)\ndef mode_11(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(nums)\ndef mode_12(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(list(set(nums)))\ndef mode_13(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return sorted(set(nums))[:2]\ndef mode_14(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return sorted(set(nums))[:2]\ndef mode_15(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return sorted(nums)[:2]\ndef mode_16(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(set(nums)))\ndef mode_17(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(set(nums)))\ndef mode_18(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(list(set(nums)))\ndef mode_19(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(set(nums)))\ndef mode_20(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(list(set(nums)))\ndef mode_21(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(nums)\ndef mode_22(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(list(set(nums)))\ndef mode_23(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(set(nums)))\ndef mode_24(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(nums))\ndef mode_25(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return sorted(set(nums))[:2]\ndef mode_26(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return sorted(set(nums))[:2]\ndef mode_27(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(set(nums)))\ndef mode_28(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(set(nums)))\ndef mode_29(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(list(set(nums)))\ndef mode_30(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(nums)\ndef mode_31(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(list(set(nums)))\ndef mode_32(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(set(nums)))\ndef mode_33(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the mode of the numbers in that list.\n    '''\n    return max(sorted(set(nums)))\ndef mode_34(nums)"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(list1[i],i))\n    l=[]\n    while len(heap)>1:\n        a = heapq.heappop(heap)\n        b = heapq.heappop(heap)\n        l.append(a[1])\n        l.append(b[1])\n    return l\ndef min_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,(list1[i],i))\n    l=[]\n    while len(heap)>1:\n        a = heapq.heappop(heap)\n        b = heapq.heappop(heap)\n        l.append(a[1])\n        l.append(b[1])\n    return l\ndef list_operations(list1,list2):\n    '''\n    Write a function that takes in a list and a list and returns a new list that contains the sum of each element of the list.\n    '''\n    return sum(list1)\ndef main():\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=[1,2,3,4,5,6,7,8,9]\n    list2=[1,2,3,4,5,6,7,8,9,10]\n    return larg_nnum(list1,3)\ndef main1():\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1=[1,2,3,4,5,6,7,8,9]\n    list2=[1,2,3,4,5,6,7,8,9,10]\n    return min_nnum(list1,3)\ndef main2():\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1=[1,2,3,4,5,6,7,8,9,10,11,12]\n    list2=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    list3=[]\n    for i in range(n):\n        list1.append(list1[i])\n        list2.append(list1[i])\n        list3.append(list1[i])\n    return sorted(list3, reverse=True, key=len)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap_obj=[]\n    for i in range(0,n):\n        heap_obj.append(list1[i])\n    heapq.heapify(heap_obj)\n    sorted_list=[]\n    while(len(heap_obj)!=0):\n        sorted_list.append(heapq.heappop(heap_obj))\n    return sorted_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    while len(list1) > 0:\n        v = heapq.heappop(heap)\n        if len(list1) == n:\n            return v\n        else:\n            heapq.heappush(heap,list1.pop(0))\n    return 'not in list'\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in list1:\n        heapq.heappush(heap,i)\n    \n    final_list = []\n    while len(heap)>1:\n        temp = heapq.heappop(heap)\n        heapq.heappush(heap,temp*-1)\n        final_list.append(heapq.heappop(heap))\n    \n    return final_list\ndef main():\n    \"\"\"Main function\"\"\"\n    print('Welcome to the number crunching calculator.')\n    print('Please enter two numbers and see how they are together.')\n    first_num = input(\"Enter first number: \")\n    second_num = input(\"Enter second number: \")\n    print('Your first number is: ',first_num)\n    print('Your second number is: ',second_num)\n    first_num = int(first_num)\n    second_num = int(second_num)\n    first_list = [first_num]\n    second_list = [second_num]\n    #code for getting the number of numbers in the list\n    while True:\n        #code for getting the number of numbers in the list\n        n = int(input(\"Enter the number of numbers to add: \"))\n        if n == 0:\n            break\n        for i in range(n):\n            first_num = input(\"Enter first number: \")\n            second_num = input(\"Enter second number: \")\n            print('Your first number is: ',first_num)\n            print('Your second number is: ',second_num)\n            first_num = int(first_num)\n            second_num = int(second_num)\n            first_list.append(first_num)\n            second_list.append(second_num)\n    \n    #code for the merge sort algorithm\n    def mergeSort(list1, n):\n        \"\"\"\n        sort the list using the mergeSort algorithm\n        \"\"\"\n        if len(list1) <= 1:\n            return list1\n        else:\n            middle = len(list1) // 2\n            left_list = mergeSort(list1[:middle], n)\n            right_list = mergeSort(list1[middle:], n)\n            return merge(left_list, right_list)\n    def merge(left, right):\n        \"\"\"\n        merge two sorted lists\n        \"\"\"\n        merged_list = []\n        if left == [] and right == []:\n            return []\n        if left!= [] and right!= []:\n            left_index = right_index = 0\n            while left_index < len(left) and right_index < len(right):\n                if left[left_index] < right[right_index]:\n                    merged_list.append(left[left_index])\n                    left_index += 1\n                else:\n                    merged_list.append(right[right_index])\n                    right_index += 1\n            merged_list += left[left_index:]\n            merged_list += right[right_index:]\n        else:\n            while left_index < len(left):\n                merged_list.append(left[left_index])\n                left_index += 1\n            while right_index < len(right):\n                merged_list.append(right[right_index])\n                right_index += 1\n        return merged_list\n    #code for the quick sort algorithm\n    def quickSort(list1, n):\n        \"\"\"\n        sort the list using the quickSort algorithm\n        \"\"\"\n        if len(list1) <= 1:\n            return list1\n        else:\n            pivot = list1[0]\n            pivot_index = 0\n            for index in range(1, len(list1)):\n                if list1[index] < pivot:\n                    pivot_index = index\n                    pivot = list1[index]\n            # swap the two parts of the list\n            pivot_list = list1[0:pivot_index] + list1[pivot_index + 1:len(list1)]\n            # partition the list\n            pivot_list = quickSort(pivot_list, n)\n            # append the smaller to the main list\n            list1[0:pivot_index] = pivot_list\n            return list1\n    def partition(list1, start, end):\n        \"\"\"\n        partition a list\n        \"\"\"\n        mid = list1[start]\n        left = start + 1\n        right = end\n        while True:\n            while left <= right and list1[left] <= mid:\n                left += 1\n            while left <= right and list1[right] >= mid:\n                right -= 1\n            if left < right:\n                list1[left], list1[right] = list1[right], list1[left]\n            else:\n                return\n    #code for the quick sort algorithm\n    def quickSort_recursive(list1, start, end):\n        \"\"\"\n        sort the list using the quickSort algorithm\n        \"\"\"\n        if len(list1) <= 1:\n            return list1\n        if start < end:\n            pivot_index = partition(list1, start, end)\n            quickSort_recursive(list1, start, pivot_index - 1)\n            quickSort_recursive(list1, pivot_index + 1, end)\n    def quickSort_iterative(list1, start, end):\n        \"\"\"\n        sort the list using the quickSort algorithm\n        \"\"\"\n        if len(list1) <= 1:\n            return list1\n        pivot = list1[start]\n        pivot_index = start\n        for index in range(start + 1, end + 1):\n            if list1[index] < pivot:\n                list1[index], list1[pivot_index] = list1[pivot_index], list1[index]\n                pivot_index += 1\n        list1[start], list1[pivot_index] = list1[pivot_index], list1[start]\n        quickSort_iterative(list1, start, pivot_index - 1)\n        quickSort_iterative(list1, pivot_index + 1, end)\n    def mergeSort_recursive(list1, start, end):\n        \"\"\"\n        sort the list using the mergeSort algorithm\n        \"\"\"\n        if len(list1) <= 1:\n            return list1\n        if start < end:\n            pivot_index = partition(list1, start, end)\n            mergeSort_recursive(list1, start, pivot_index - 1)\n            mergeSort_recursive(list1, pivot_index + 1, end)\n    def mergeSort_iterative(list1, start, end):\n        \"\"\"\n        sort the list using the mergeSort algorithm\n        \"\"\"\n        if len(list1) <= 1:\n            return list1\n        pivot = list1[start]\n        pivot_index = start\n        left = start + 1\n        right = end\n        while True:\n            while left <= right and list1[left] <= pivot:\n                left += 1\n            while left <= right and list1[right] >= pivot:\n                right -= 1\n            if left < right:\n                list1[left], list1[right] = list1[right], list1[left]\n                left += 1\n                right -= 1\n            else:\n                return list1\n    #code for the merge sort algorithm\n    list2 = []\n    quickSort_recursive(list2, 0, len(list2) - 1)\n    list2.sort()\n    mergeSort_recursive(list2, 0, len(list2) - 1)\n    list2.sort()\n    mergeSort_iterative(list2, 0, len(list2) - 1)\n    list2.sort()\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n = sorted(list1, reverse=True)\n    return n[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list=[]\n    for i in range(n):\n        new_list.append(list1[i])\n    new_list.sort(reverse=True)\n    return new_list\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    heap = []\n    heapq.heapify(heap)\n    for i in list1:\n        if heapq.heappop(heap) < i:\n            heapq.heappush(heap,i)\n            \n    list2 = []\n    for i in range(n):\n        list2.append(heapq.heappop(heap))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    def largest_number(list1):\n        '''\n        Take a list of numbers and return the largest number in that list.\n        '''\n        \n        largest = []\n        for i in range(len(list1)):\n            largest.append(list1[i])\n        return largest\n    \n    def sort_with_heap(list1,n):\n        '''\n        Return a list of the n largest numbers in a list.\n        '''\n        \n        heap = []\n        for i in range(n):\n            heapq.heappush(heap,list1[i])\n        \n        return heap\n    \n    if (n<=0):\n        print(\"Error: n must be greater than 0\")\n        return \n        \n    else:\n        result = sort_with_heap(list1,n)\n        return result\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (4*pi*r*r)*(tan(h/2))**2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x=r*math.cos(h)\n    y=r*math.sin(h)\n    return (x,y)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    def find_area(r,h):\n        return 4*np.pi*r*np.cos(h)\n    \n    def linear_progression(a,b,c,d):\n        return ((a*d)/(b*c))\n    \n    def area_cylinder(r,h):\n        return (4*np.pi*r*np.cos(h))\n    \n    def approximate_pi(r,h):\n        return (4*np.pi*r*np.cos(h))/(1+(r**2)+(r**2))\n    \n    def linear_progression(a,b,c,d):\n        return ((a*d)/(b*c))\n    \n    def area_cylinder(r,h):\n        return (4*np.pi*r*np.cos(h))\n    \n    r = r\n    h = h\n    a = approximate_pi(r,h)\n    b = area_cylinder(r,h)\n    c = linear_progression(a,b,c,d)\n    \n    return c"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(f'The lateral surface area of the cylinder is {r * h} mm')\n    return r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    R = r + 0.5*h\n    P = (0.5*R*R)/h\n    A = 2*math.pi*(P**2)\n    return A\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (r**2*h)/6\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x,y,z = r,h,0\n    L = (x**2 + y**2 + z**2)**(1/2)\n    return L\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    F=2*pi*r**2\n    F_plus_2=F-2*(r**2)\n    F_plus_pi=pi*r**2\n    F_plus_pi_2=pi*r**2\n    d = (pi*(r**2))\n    s1 = pi*(r**2)\n    s2 = pi*r**2\n    s3 = pi*r**2\n    s4 = pi*r**2\n    s5 = pi*r**2\n    s6 = pi*r**2\n    s7 = pi*r**2\n    s8 = pi*r**2\n    s9 = pi*r**2\n    s10 = pi*r**2\n    s11 = pi*r**2\n    s12 = pi*r**2\n    s13 = pi*r**2\n    s14 = pi*r**2\n    s15 = pi*r**2\n    s16 = pi*r**2\n    s17 = pi*r**2\n    s18 = pi*r**2\n    s19 = pi*r**2\n    s20 = pi*r**2\n    s21 = pi*r**2\n    s22 = pi*r**2\n    s23 = pi*r**2\n    s24 = pi*r**2\n    s25 = pi*r**2\n    s26 = pi*r**2\n    s27 = pi*r**2\n    s28 = pi*r**2\n    s29 = pi*r**2\n    s30 = pi*r**2\n    s31 = pi*r**2\n    s32 = pi*r**2\n    s33 = pi*r**2\n    s34 = pi*r**2\n    s35 = pi*r**2\n    s36 = pi*r**2\n    s37 = pi*r**2\n    s38 = pi*r**2\n    s39 = pi*r**2\n    s40 = pi*r**2\n    s41 = pi*r**2\n    s42 = pi*r**2\n    s43 = pi*r**2\n    s44 = pi*r**2\n    s45 = pi*r**2\n    s46 = pi*r**2\n    s47 = pi*r**2\n    s48 = pi*r**2\n    s49 = pi*r**2\n    s50 = pi*r**2\n    s51 = pi*r**2\n    s52 = pi*r**2\n    s53 = pi*r**2\n    s54 = pi*r**2\n    s55 = pi*r**2\n    s56 = pi*r**2\n    s57 = pi*r**2\n    s58 = pi*r**2\n    s59 = pi*r**2\n    s60 = pi*r**2\n    s61 = pi*r**2\n    s62 = pi*r**2\n    s63 = pi*r**2\n    s64 = pi*r**2\n    s65 = pi*r**2\n    s66 = pi*r**2\n    s67 = pi*r**2\n    s68 = pi*r**2\n    s69 = pi*r**2\n    s70 = pi*r**2\n    s71 = pi*r**2\n    s72 = pi*r**2\n    s73 = pi*r**2\n    s74 = pi*r**2\n    s75 = pi*r**2\n    s76 = pi*r**2\n    s77 = pi*r**2\n    s78 = pi*r**2\n    s79 = pi*r**2\n    s80 = pi*r**2\n    s81 = pi*r**2\n    s82 = pi*r**2\n    s83 = pi*r**2\n    s84 = pi*r**2\n    s85 = pi*r**2\n    s86 = pi*r**2\n    s87 = pi*r**2\n    s88 = pi*r**2\n    s89 = pi*r**2\n    s90 = pi*r**2\n    s91 = pi*r**2\n    s92 = pi*r**2\n    s93 = pi*r**2\n    s94 = pi*r**2\n    s95 = pi*r**2\n    s96 = pi*r**2\n    s97 = pi*r**2\n    s98 = pi*r**2\n    s99 = pi*r**2\n    s100 = pi*r**2\n    s101 = pi*r**2\n    s102 = pi*r**2\n    s103 = pi*r**2\n    s104 = pi*r**2\n    s105 = pi*r**2\n    s106 = pi*r**2\n    s107 = pi*r**2\n    s108 = pi*r**2\n    s109 = pi*r**2\n    s110 = pi*r**2\n    s111 = pi*r**2\n    s112 = pi*r**2\n    s113 = pi*r**2\n    s114 = pi*r**2\n    s115 = pi*r**2\n    s116 = pi*r**2\n    s117 = pi*r**2\n    s118 = pi*r**2\n    s119 = pi*r**2\n    s120 = pi*r**2\n    s121 = pi*r**2\n    s122 = pi*r**2\n    s123 = pi*r**2\n    s124 = pi*r**2\n    s125 = pi*r**2\n    s126 = pi*r**2\n    s127 = pi*r**2\n    s128 = pi*r**2\n    s129 = pi*r**2\n    s130 = pi*r**2\n    s131 = pi*r**2\n    s132 = pi*r**2\n    s133 = pi*r**2\n    s134 = pi*r**2\n    s135 = pi*r**2\n    s136 = pi*r**2\n    s137 = pi*r**2\n    s138 = pi*r**2\n    s139 = pi*r**2\n    s140 = pi*r**2\n    s141 = pi*r**2\n    s142 = pi*r**2\n    s143 = pi*r**2\n    s144 = pi*r**2\n    s145 = pi*r**2\n    s146 = pi*r**2\n    s147 = pi*r**2\n    s148 = pi*r**2\n    s149 = pi*r**2\n    s150 = pi*r**2\n    s151 = pi*r**2\n    s152 = pi*r**2\n    s153 = pi*r**2\n    s154 = pi*r**2\n    s155 = pi*r**2\n    s156 = pi*r**2\n    s157 = pi*r**2\n    s158 = pi*r**2\n    s159 = pi*r**2\n    s160 = pi*r**2\n    s161 = pi*r**2\n    s162 = pi*r**2\n    s163 = pi*r**2\n    s164 = pi*r**2\n    s165 = pi*r**2\n    s166 = pi*r**2\n    s167 = pi*r**2\n    s168 = pi*r**2\n    s169 = pi*r**2\n    s170 = pi*r**2\n    s171 = pi*r**2\n    s172 = pi*r**2\n    s173 = pi*r**2\n    s174 = pi*r**2\n    s175 = pi*r**2\n    s176 = pi*r**2\n    s177 = pi*r**2\n    s178 = pi*r**2\n    s179 = pi*r**2\n    s180 = pi*r**2\n    s181 = pi*r**2\n    s182 = pi*r**2\n    s183 = pi*r**2\n    s184 = pi*r**2\n    s185 = pi*r**2\n    s186 = pi*r**2\n    s187 = pi*r**2\n    s188 = pi*r**2\n    s189 = pi*r**2\n    s190 = pi*r**2\n    s191 = pi*r**2\n    s192 = pi*r**2\n    s193 = pi*r**2\n    s194 = pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    x1, y1, z1 = r\n    x2, y2, z2 = (h * (2 * np.pi)) / 2\n    x3, y3, z3 = (h * (3 * np.pi)) / 2\n    x4, y4, z4 = (h * (4 * np.pi)) / 2\n    x5, y5, z5 = (h * (5 * np.pi)) / 2\n    x6, y6, z6 = (h * (6 * np.pi)) / 2\n    x7, y7, z7 = (h * (7 * np.pi)) / 2\n    x8, y8, z8 = (h * (8 * np.pi)) / 2\n    \n    A = (x1 * x2 * z1)\n    B = (x1 * y2 * z2)\n    C = (x1 * z2 * z3)\n    D = (x1 * z3 * z4)\n    E = (x1 * z4 * z5)\n    F = (x1 * z5 * z6)\n    G = (x1 * z6 * z7)\n    H = (x1 * z7 * z8)\n    I = (x2 * x3 * z1)\n    J = (x2 * y2 * z2)\n    K = (x2 * z2 * z3)\n    L = (x2 * z3 * z4)\n    M = (x2 * z4 * z5)\n    N = (x2 * z5 * z6)\n    O = (x2 * z6 * z7)\n    P = (x2 * z7 * z8)\n    Q = (x2 * z8 * z9)\n    R = (x2 * z9 * z10)\n    S = (x3 * x4 * z1)\n    T = (x3 * y2 * z2)\n    U = (x3 * z2 * z3)\n    V = (x3 * z3 * z4)\n    W = (x3 * z4 * z5)\n    X = (x3 * z5 * z6)\n    Y = (x3 * z6 * z7)\n    Z = (x3 * z7 * z8)\n    \n    # print(A)\n    # print(B)\n    # print(C)\n    # print(D)\n    # print(E)\n    # print(F)\n    # print(G)\n    # print(H)\n    # print(I)\n    # print(J)\n    # print(K)\n    # print(L)\n    # print(M)\n    # print(N)\n    # print(O)\n    # print(P)\n    # print(Q)\n    # print(R)\n    # print(S)\n    # print(T)\n    # print(U)\n    # print(V)\n    # print(W)\n    # print(X)\n    # print(Y)\n    # print(Z)\n    \n    # print(f'A: {A}, B: {B}, C: {C}, D: {D}, E: {E}, F: {F}, G: {G}, H: {H}, I: {I}, J: {J}, K: {K}, L: {L}, M: {M}, N: {N}, O: {O}, P: {P}, Q: {Q}, R: {R}, S: {S}, T: {T}, U: {U}, V: {V}, W: {W}, X: {X}, Y: {Y}, Z: {Z}')\n    \n    area = A * H + B * H + C * H + D * H + E * H + F * H + G * H + H * H + I * H + J * H + K * H + L * H + M * H + N * H + O * H + P * H + Q * H + R * H + S * H + T * H + U * H + V * H + W * H\n    return area\n    \ndef cone(x, y, z, r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    A = (r ** 2) * np.pi\n    b = (2 * r ** 2) * np.pi\n    c = (2 * r ** 2) * np.pi\n    d = (2 * r ** 2) * np.pi\n    \n    # print(f'A: {A}, b: {b}, c: {c}, d: {d}')\n    \n    # x = (x ** 2) * np.pi\n    # y = (y ** 2) * np.pi\n    # z = (z ** 2) * np.pi\n    # A = (x * y * z)\n    \n    x = x / 2\n    y = y / 2\n    z = z / 2\n    \n    area = A * (b / 2)\n    \n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    \n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    \n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {d}')\n    \n    # area = A * (b / 2)\n    # print(f'A: {area}, b: {b}, c: {c}, d: {"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = 4*l*l*l\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    print(l)\n    print(l * l * l)\n    print(l ** 3)\n    print(l ** 2)\n    print(l / 2)\n    print(l / 3)\n    print(l / 4)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return round(math.pow(l,3),1)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    s = l**3\n    return s\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l == 0:\n        return 0\n    elif l == 1:\n        return 1\n    elif l == 2:\n        return 4\n    else:\n        return l * volume_cube(l - 1)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = (l**3)*(3*l**2)\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (3.14 * l ** 3)\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(l * 4 * 3 * 2)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return 3.142*(l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #volume = 1\n    # for i in range(0,3):\n    #     for j in range(0,3):\n    #         if l[i][j] < 0:\n    #             volume -= 1\n    # return volume\n    '''\n    volume = 0\n    for i in range(0,3):\n        for j in range(0,3):\n            if l[i][j] < 0:\n                volume -= 1\n    return volume\n    '''\n    return l[0][0]*l[1][1]*l[2][2]\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1\n    even = 0\n    if n & 1 == 0:\n        even += 1\n    if n & 2 == 0:\n        even += 1\n    return even\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bit = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_bit.append(1)\n        else:\n            even_bit.append(0)\n    return even_bit\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits=0\n    while (n>0): \n        if n%2==0: \n            even_bits=even_bits|1 \n        n=n//2 \n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0: \n        return False\n    elif n < 2: \n        return True\n    else: \n        n = n & 0xFF \n        if n & 0x1: \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    x = n\n    y = 0\n    while(x>0):\n        if (x&1 == 1):\n            y = y | 1\n        x = x >> 1\n    return y\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            result += '1'\n        else:\n            result += '0'\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 2 \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while (n & even_bits) == 0:\n        even_bits += 1\n    return even_bits\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bin_n = bin(n)[2:] \n    n_bin = [int(i) for i in bin_n] \n    while (len(n_bin) < 5): \n        n_bin.insert(0,0)\n    for i in range(len(n_bin)): \n        if n_bin[i] == 0: \n            n_bin[i] = 1\n    return n_bin \n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    binary = bin(n)\n    bin_str = binary[2:]\n    if (bin_str.count('1') == 0):\n        return 0\n    return 2 ** len(bin_str) - 2\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {tup:count for tup, count in Counter(test_list).items() if count > 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_occurences = {}\n    for item in test_list:\n        if item[0] in unique_occurences:\n            unique_occurences[item[0]] += 1\n        else:\n            unique_occurences[item[0]] = 1\n    return unique_occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dic = {}\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    \n    for i in test_list:\n        if i[0] not in result:\n            result[i[0]] = 1\n        else:\n            result[i[0]] += 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # make a dictionary of the tuples in the list\n    dictionary = {}\n    for data in test_list:\n        if data[0] in dictionary:\n            dictionary[data[0]] = dictionary[data[0]] + 1\n        else:\n            dictionary[data[0]] = 1\n    \n    # return the dictionary\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # TODO: Write your code here\n    result = {}\n    for tuple in test_list:\n        result[tuple] = result.get(tuple, 0) + 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # make a dictionary of tuples from each tuple \n    d = dict(Counter(test_list).most_common())\n    # return the dictionary as a new list\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dictionary={}\n    for test in test_list:\n        if test[0] not in dictionary:\n            dictionary[test[0]]=1\n        else:\n            dictionary[test[0]]+=1\n    return dictionary\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dic = dict()\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_list = set(test_list)\n    return dict(Counter(unique_list).items())\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    d={}\n    for i in range(1,len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1] in d:\n                d[str[i:j+1]]=d[str[i:j+1]]+1\n            else:\n                d[str[i:j+1]]=1\n    return len(d)\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    substr = \"\"\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            substr += str[i]\n            count += 1\n        else:\n            count -= 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    sub = []\n    for i in range(len(str)-1):\n        if (str[i] == str[i+1]):\n            sub.append(i)\n    return len(sub)\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    counter = 0\n    for i in range(len(str)-1):\n        for j in range(i+1,len(str)+1):\n            if str[i:j] == str[i:j][::-1]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize count as 0\n    count = 0\n    # for loop to iterate through the string\n    for i in range(0, len(str)):\n        # iterate through each character in the string\n        for j in range(i, len(str)):\n            # if the substring is non-empty\n            if str[i:j + 1]!= str[i:j]:\n                # increment count\n                count += 1\n    # return the count\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = list(str)\n    total = 0\n    for i in range(len(substrings)):\n        for j in range(i+1,len(substrings)):\n            if (substrings[i] == substrings[j]):\n                total += 1\n    return total\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    cnt = 0\n    for i in range(0,len(str)):\n        j = 0\n        while j < len(str):\n            if str[i] == str[j]:\n                j+=1\n                cnt+=1\n            else:\n                break\n    return cnt\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    len_str = len(str)\n    if len_str == 0:\n        return 0\n    else:\n        x = str[0]\n        count = 1\n        for i in range(1, len_str):\n            if str[i]!= x:\n                count += 1\n            else:\n                count = 1\n        return count\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if str == '':\n        return 0\n    count = 0\n    for i in range(len(str)):\n        if str[i] == str[i+1]:\n            count = count+1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_sequence_length(m,n):\n        '''\n        Return the length of a sequence of length n.\n        '''\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            return 1 + get_sequence_length(m-1,n-1)\n    \n    return get_sequence_length(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 0 or n < 0:\n        raise ValueError(\"Bad values\")\n    # Total number of all possible sequences\n    total = 0\n    # Iterate through m\n    for k in range(m, n+1):\n        # Iterate through n\n        for j in range(1, k+1):\n            # Count the number of sequences of length k that are less than or equal to the previous element\n            total += k - j * (2*j)\n    return total\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # YOUR CODE HERE\n    #raise NotImplementedError\n    pass\n    #raise NotImplementedError\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    If the sequence length is not a positive integer, return None\n    '''\n    if not (type(m) == int or type(m) == float): \n        return None\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    m = min(m,n)\n    total_number_of_sequences = 0\n    if m > 2:\n        for i in range(1,m):\n            if m%i == 0:\n                total_number_of_sequences += 1\n            else:\n                total_number_of_sequences += i\n    return total_number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # YOUR CODE HERE\n    l = n\n    r = m-1\n    s = 0\n    while l>=0:\n        if (m*(m-1))//2 <= l < (m*(m-1)):\n            s += 1\n        l -= 1\n    return s\ndef get_fibonacci_sequence(x):\n    '''\n    Write a function that returns the the fibonacci sequence, which is the sequence of the numbers in the range from 0 to x.\n    '''\n    # YOUR CODE HERE\n    a, b = 0, 1\n    for i in range(x):\n        a, b = b, a+b\n    return b\ndef get_total_number_of_triplets(k):\n    '''\n    Write a function that takes in positive integers k and returns the number of possible triplets of length k.\n    '''\n    # YOUR CODE HERE\n    return k*k + 1\ndef get_triplets(x):\n    '''\n    Write a function that takes in positive integers x and returns the total number of triplets of length 3 that can be formed from those of length 1, 2, and 3.\n    '''\n    # YOUR CODE HERE\n    k = 0\n    l = 0\n    s = 0\n    for i in range(x):\n        if l == 1:\n            s += 1\n        if l == 2:\n            s += 1\n        if l == 3:\n            s += 1\n        if k == x:\n            break\n        l += 1\n    return s\ndef get_number_of_pairs(x, y):\n    '''\n    Write a function that takes in positive integers x and y and returns the number of pairs of integers that can form the triplet of integers x and y.\n    '''\n    # YOUR CODE HERE\n    return x*y\ndef get_number_of_triplets(n):\n    '''\n    Write a function that takes in positive integers n and returns the total number of triplets of length 3 that can form that number of triples.\n    '''\n    # YOUR CODE HERE\n    return n*(n-1)*(n-2)\ndef get_number_of_triplets_odd(n):\n    '''\n    Write a function that takes in positive integers n and returns the total number of triples of length 3 that can form that number of triples.\n    '''\n    # YOUR CODE HERE\n    return n*(n-1)*(n-2)//2\ndef get_number_of_triplets_even(n):\n    '''\n    Write a function that takes in positive integers n and returns the total number of triples of length 3 that can form that number of triples.\n    '''\n    # YOUR CODE HERE\n    return n*(n-1)*(n-2)//3\ndef get_number_of_triplets_odd_even(n):\n    '''\n    Write a function that takes in positive integers n and returns the total number of triples of length 3 that can form that number of triples.\n    '''\n    # YOUR CODE HERE\n    return n*(n-1)*(n-2)//4\ndef get_number_of_triplets_divisible(n):\n    '''\n    Write a function that takes in positive integers n and returns the total number of triples of length 3 that can form that number of triples.\n    '''\n    # YOUR CODE HERE\n    return n*(n-1)*(n-2)//5\ndef get_number_of_triplets_divisible_even(n):\n    '''\n    Write a function that takes in positive integers n and returns the total number of triples of length 3 that can form that number of triples.\n    '''\n    # YOUR CODE HERE\n    return n*(n-1)*(n-2)//6\ndef get_number_of_triplets_divisible_odd(n):\n    '''\n    Write a function that takes in positive integers n and returns the total number of triples of length 3 that can form that number of triples.\n    '''\n    # YOUR CODE HERE\n    return n*(n-1)*(n-2)//7\ndef get_sum_of_squares(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x-1)**2\ndef get_sum_of_squares_odd(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_even(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x-1)**2\ndef get_sum_of_squares_odd_even(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x-1)**2\ndef get_sum_of_squares_divisible_even(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible_odd(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible_even_odd(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible_odd_even(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible_even_odd_even(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible_even_odd_odd(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible_even_odd_even_odd(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible_even_odd_odd_odd(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible_even_odd_odd_odd(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible_even_odd_odd_even_odd(x):\n    '''\n    Write a function that returns the sum of squares of the integers in the range from 1 to x.\n    '''\n    # YOUR CODE HERE\n    return (x+1)**2\ndef get_sum_of_squares_divisible_even_odd"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    result = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i*2 <= j and j%2!= 0:\n                result = result + 1\n    return result\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    for i in range(1,n+1):\n        if n%i == 0 and n/i == 2:\n            return n//i\n    return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_number_of_sequences(m,n): \n        '''\n        Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n        '''\n        def get_number_of_sequences_helper(m,n): \n            if m==0 or n==0: \n                return 1\n            if m<0 or n<0: \n                return 0\n            if n==0: \n                return 0\n            if m>0 and n>0: \n                return get_number_of_sequences_helper(m-1,n) + get_number_of_sequences_helper(m-1,n-1)\n        return get_number_of_sequences_helper(m,n)\n    return get_number_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return m\n    elif n < m:\n        return 0\n    elif n % 2 == 0:\n        return m - (n - 1)\n    else:\n        return m - (n + 1)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list=[]\n    new_list=list1.copy()\n    print(new_list)\n    if list2.__len__()==1:\n        new_list.append(list2.__len__())\n        print(new_list)\n    else:\n        print(\"not possible\")\n    \n    for i in range(len(list2)):\n        if list2[i] in new_list:\n            new_list.remove(list2[i])\n            new_list.append(list2[i])\n        if list2[i]==new_list[i]:\n            new_list.remove(list2[i])\n            new_list.append(list2[i])\n    print(new_list)\n    \n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1[1:]\n    list2 = list2[1:]\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #complete the list\n    list1.pop()\n    #Replace the last element of the second list with the elements of the first list\n    list2.pop(0)\n    #Prints the modified list\n    print(list1)\n    print(list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if type(list1)!= list:\n        raise TypeError(\"list1 must be a list\")\n    if type(list2)!= list:\n        raise TypeError(\"list2 must be a list\")\n    for i in list2:\n        list1.append(i)\n    return list1\n    \n    \n    \n    \n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a new list with the duplicate items removed.\n    '''\n    if type(list)!= list:\n        raise TypeError(\"list must be a list\")\n    else:\n        for i in range(len(list)):\n            if list[i] in list:\n                list.remove(list[i])\n        return list\n    \n    \n    \n    \n    \ndef main():\n    '''\n    Test 1\n    '''\n    print(\"Test 1\")\n    list1 = [1, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 10]\n    list2 = [2, 4, 6, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13]\n    print(list1)\n    print(list2)\n    print(\"After test 1\")\n    print(remove_duplicates(list1))\n    print(\"After test 2\")\n    print(remove_duplicates(list2))\n    print(\"After test 3\")\n    print(remove_duplicates([1, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 10]))\n    print(\"After test 4\")\n    print(remove_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(\"After test 5\")\n    print(remove_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(\"After test 6\")\n    print(remove_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(\"After test 7\")\n    print(remove_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.append(list2.pop())\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    del list2[-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.pop()\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1[0])\n    print(list2[0])\n    if len(list1) < len(list2):\n        list1.extend(list2)\n    else:\n        list2.extend(list1)\n    print(list1)\n    print(list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #create the list\n    list1 = list(list1)\n    list1.pop(len(list1)-1)\n    list2 = list(list2)\n    list2.pop(len(list2)-1)\n    #loop through the list, replace the last element, and add it back\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    #return the list\n    return list(list1)\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #For loop to replace the last element of first list with second list\n    for i in range(len(list1)-1,-1,-1):\n        list1[i] = list2[i]\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i]:\n            charac += 1\n    return charac\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Convert the string to lowercase.\n    str1 = str1.lower()\n    # Split the string into words.\n    word_list = str1.split()\n    # Initialize an empty dictionary to store counts of each word.\n    word_dict = {}\n    # For each word in the word_list.\n    for word in word_list:\n        # If the word exists in the word_dict, add 1 to the count.\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            # Otherwise, the word is added to the word_dict.\n            word_dict[word] = 1\n    # Initialize an empty string to store the answer.\n    count = \"\"\n    # For each key in the word_dict.\n    for key in word_dict:\n        # Calculate the number of characters in the value of the key.\n        value = word_dict[key]\n        # If the count is greater than zero, then increment it by 1.\n        if value > 0:\n            count += key + \" \" + str(value) + \" \"\n    # Return the answer.\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+=-=[]{}|\":\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    characters = 0\n    for character in str1:\n        characters += 1\n    return characters\n    \ndef count_words(str1):\n    '''\n    Write a function that returns the number of words in a string.\n    '''\n    words = 0\n    for word in str1.split():\n        words += 1\n    return words\n    \ndef count_punctuation(str1):\n    '''\n    Write a function that returns the number of punctuations in a string.\n    '''\n    punctuations = 0\n    for char in str1:\n        if char in string.punctuation:\n            punctuations += 1\n    return punctuations\n    \ndef count_letters(str1):\n    '''\n    Write a function that returns the number of letters in a string.\n    '''\n    letters = 0\n    for char in str1:\n        if char in string.ascii_lowercase:\n            letters += 1\n    return letters\n    \ndef count_numbers(str1):\n    '''\n    Write a function that returns the number of digits in a string.\n    '''\n    digits = 0\n    for char in str1:\n        if char in string.digits:\n            digits += 1\n    return digits\n    \ndef count_lower_case(str1):\n    '''\n    Write a function that returns the number of lowercase letters in a string.\n    '''\n    lower_case = 0\n    for char in str1:\n        if char.islower():\n            lower_case += 1\n    return lower_case\n    \ndef count_uppercase(str1):\n    '''\n    Write a function that returns the number of uppercase letters in a string.\n    '''\n    uppercase = 0\n    for char in str1:\n        if char.isupper():\n            uppercase += 1\n    return uppercase\n    \ndef count_symbols(str1):\n    '''\n    Write a function that returns the number of symbols in a string.\n    '''\n    symbols = 0\n    for char in str1:\n        if char in string.punctuation:\n            symbols += 1\n    return symbols\n    \ndef count_symbols_vowels(str1):\n    '''\n    Write a function that returns the number of vowels in a string.\n    '''\n    vowels = 0\n    for char in str1:\n        if char in string.ascii_lowercase:\n            if char in string.vowels:\n                vowels += 1\n    return vowels\n    \ndef count_words_bigrams(str1):\n    '''\n    Write a function that returns the number of bigrams in a string.\n    '''\n    bigrams = 0\n    for i in range(len(str1)-1):\n        if str1[i:i+2] in string.ascii_lowercase:\n            bigrams += 1\n    return bigrams\n    \ndef count_words_trigrams(str1):\n    '''\n    Write a function that returns the number of trigrams in a string.\n    '''\n    trigrams = 0\n    for i in range(len(str1)-1):\n        if str1[i:i+3] in string.ascii_lowercase:\n            trigrams += 1\n    return trigrams\n    \ndef count_numbers_bigrams(str1):\n    '''\n    Write a function that returns the number of bigrams in a string.\n    '''\n    bigrams = 0\n    for i in range(len(str1)-1):\n        if str1[i:i+2] in string.digits:\n            bigrams += 1\n    return bigrams\n    \ndef count_numbers_trigrams(str1):\n    '''\n    Write a function that returns the number of trigrams in a string.\n    '''\n    trigrams = 0\n    for i in range(len(str1)-1):\n        if str1[i:i+3] in string.digits:\n            trigrams += 1\n    return trigrams\n    \ndef count_punctuation_bigrams(str1):\n    '''\n    Write a function that returns the number of bigrams in a string.\n    '''\n    bigrams = 0\n    for char in str1:\n        if char in string.punctuation:\n            if char in string.ascii_lowercase:\n                bigrams += 1\n    return bigrams\n    \ndef count_punctuation_trigrams(str1):\n    '''\n    Write a function that returns the number of trigrams in a string.\n    '''\n    trigrams = 0\n    for char in str1:\n        if char in string.punctuation:\n            if char in string.digits:\n                trigrams += 1\n    return trigrams\n    \ndef count_alphabet(str1):\n    '''\n    Write a function that returns the number of alphabet characters in a string.\n    '''\n    alphabet = 0\n    for char in str1:\n        if char.isalpha():\n            alphabet += 1\n    return alphabet\n    \ndef count_numbers_alphabet(str1):\n    '''\n    Write a function that returns the number of alphabet characters in a string.\n    '''\n    alphabet = 0\n    for char in str1:\n        if char.isalpha():\n            if char in string.digits:\n                alphabet += 1\n    return alphabet\n    \ndef count_numbers_uppercase(str1):\n    '''\n    Write a function that returns the number of uppercase characters in a string.\n    '''\n    uppercase = 0\n    for char in str1:\n        if char in string.ascii_uppercase:\n            uppercase += 1\n    return uppercase\n    \ndef count_letters_uppercase(str1):\n    '''\n    Write a function that returns the number of uppercase letters in a string.\n    '''\n    letters = 0\n    for char in str1:\n        if char in string.ascii_uppercase:\n            letters += 1\n    return letters\n    \ndef count_letters_lowercase(str1):\n    '''\n    Write a function that returns the number of uppercase letters in a string.\n    '''\n    letters = 0\n    for char in str1:\n        if char in string.ascii_lowercase:\n            letters += 1\n    return letters\n    \ndef count_lower_case_uppercase(str1):\n    '''\n    Write a function that returns the number of uppercase letters in a string.\n    '''\n    letters = 0\n    for char in str1:\n        if char in string.ascii_lowercase:\n            letters += 1\n    return letters\n    \ndef count_lower_case_lowercase(str1):\n    '''\n    Write a function that returns the number of uppercase letters in a string.\n    '''\n    letters = 0\n    for char in str1:\n        if char in string.ascii_lowercase:\n            letters += 1\n    return letters\n    \ndef count_letters_lowercase_uppercase(str1):\n    '''\n    Write a function that returns the number of uppercase letters in a string.\n    '''\n    letters = 0\n    for char in str1:\n        if char in string.ascii_lowercase:\n            letters += 1\n    return letters\n    \ndef count_letters_uppercase(str1):\n    '''\n    Write a function that returns the number of uppercase letters in a string.\n    '''\n    letters = 0\n    for char in str1:\n        if char in string.ascii_uppercase:\n            letters += 1\n    return letters\n    \ndef count_symbols_uppercase(str1):\n    '''\n    Write a function that returns the number of uppercase letters in a string.\n    '''\n    letters = 0\n    for char in str1:\n        if char in string.ascii_uppercase:\n            letters += 1\n    return letters\n    \ndef count_symbols_lowercase(str1):\n    '''\n    Write a function that returns the number of uppercase letters in a string.\n    '''\n    letters = 0\n    for char in str1:\n        if char in string.ascii_lowercase:\n            letters += 1\n    return letters"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == 'a' or str1[i] == 'e' or str1[i] == 'i' or str1[i] == 'o' or str1[i] == 'u':\n            count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_char = 0\n    for i in str1:\n        total_char += len(i)\n    return total_char\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    cnt = 0\n    for char in str1:\n        cnt += 1\n    return cnt\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        if i == \" \":\n            count = count + 1\n    print(count)\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #print(str1.count('l'))\n    print(len(str1))\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        return -1\n    elif N == 0:\n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    r = 1\n    while True: \n        r = (r+1)*2\n        if r**2==N: \n            return r \n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 1: \n        return 0\n    if N < 2: \n        return 1\n    if N == 2: \n        return 3\n    else: \n        return 4\n    \ndef main():\n    print('***** Perfect Square *****')\n    '''\n    for i in range(0,20):\n        print(i)\n    '''\n    N = int(input('please enter a positive number:'))\n    print(next_Perfect_Square(N))\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    if N == 0:\n        return 0\n    \n    if N < 0:\n        return -1\n    \n    if N == 1:\n        return 1\n    \n    if N == 2:\n        return 2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    is_Perfect = True\n    i = 2\n    while i <= N :\n        if math.sqrt(N) % i == 0:\n            is_Perfect = False\n        else:\n            i+=1\n    if is_Perfect :\n        print (N,\" is a perfect square\")\n    else:\n        print (N,\" is not a perfect square\")\nN = 9\nnext_Perfect_Square(N"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while (i * i <= N):\n        if (N % i == 0):\n            return N//i\n        i = i + 1\n    return i\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1: \n        return 1\n    if N == 2: \n        return 3\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(N,0,-1):\n        for j in range(i,0,-1):\n            if((i**2)+(j**2)==N):\n                return i\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    elif N%2 == 0:\n        a = N//2\n        return (next_Perfect_Square(a) * next_Perfect_Square(a))/2\n    else:\n        a = N/2\n        b = N//2\n        return (next_Perfect_Square(a) * next_Perfect_Square(b))/2 + a\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    arr_size = len(arr)\n    for i in range(0, arr_size):\n        if arr[i] < 0:\n            max_sum += arr[i]\n        else:\n            if arr[i-1] < 0:\n                max_sum += arr[i-1]\n            elif arr[i-1] > 0:\n                max_sum += arr[i-1]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    current = arr[0]\n    index = 1\n    sum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > current:\n            current = arr[i]\n        else:\n            current = arr[i]\n            index += 1\n        if current < sum:\n            sum = current\n            max_sum = index\n    return sum"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = 0\n    output = -1\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def find_max_sum(arr):\n        n = len(arr)\n        dp = [0 for i in range(n)]\n        dp[0] = arr[0]\n        for i in range(1, n):\n            if arr[i] > arr[i-1]:\n                dp[i] = arr[i]\n            else:\n                dp[i] = arr[i-1] + arr[i]\n        return dp[-1]\n    return find_max_sum(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = 0\n    index = 0\n    for i in range(len(arr)):\n        if i < len(arr) - 1 and arr[i] > arr[i+1] and arr[i] > arr[i+1]:\n            index = i\n            max_sum += arr[i]\n        elif arr[i] > arr[i+1] and arr[i] > arr[i+1]:\n            index = i\n            max_sum += arr[i]\n        elif arr[i] < arr[i+1] and arr[i] < arr[i+1]:\n            index = i\n            max_sum += arr[i]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    cur_sum = 0\n    result = 0\n    for i in range(len(arr)):\n        cur_sum += arr[i]\n        if cur_sum > result:\n            result = cur_sum\n    return result\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # initialize the max_sum to 0 for the initial index\n    max_sum = 0\n    \n    # loop over the array\n    for i in range(len(arr)-1): \n        # check if the sequence is increasing\n        if arr[i+1] < arr[i]:\n            # if so, add the maximum sum\n            max_sum = max(arr[i+1], max_sum)\n        else: \n            # if not, determine if we need to calculate the sum\n            if arr[i+1] > arr[i]: \n                # if so, add the maximum sum\n                max_sum = max(arr[i+1], max_sum)\n    \n    return max_su"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: \n        return arr[0]\n    else:\n        arr.sort()\n        i = 1\n        max_sum = 0\n        while i < len(arr):\n            if i == len(arr):\n                return max_sum\n            if arr[i] + arr[i - 1] > arr[i]:\n                max_sum += arr[i]\n            else:\n                max_sum += arr[i] + arr[i - 1]\n            i += 1\n        return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return 1\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        return number**0.5\n    \n    \ndef f_square(number):\n    '''\n    Write a function for calculating square roots using the f(x) square root method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 4\n    else:\n        return number**0.5\n    \n    \ndef babylonian_square(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        return number**0.5\n    \n    \ndef factorial(number):\n    '''\n    Write a function for calculating factorials using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return number**0.5\n    \n    \ndef factorial_quotient(number):\n    '''\n    Write a function for calculating factorials using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return number**0.5\n    \n    \ndef fibonacci(number):\n    '''\n    Write a function for calculating fibonacci numbers using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return fibonacci(number-1) + fibonacci(number-2)\n    \n    \ndef fibonacci_quotient(number):\n    '''\n    Write a function for calculating fibonacci numbers using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return fibonacci_quotient(number-1) + fibonacci_quotient(number-2)\n    \n    \ndef nth_root(number, n):\n    '''\n    Write a function for finding the nth root using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        return number**0.5\n    \n    \ndef memoization(f):\n    '''\n    Write a function for computing fibonacci numbers using the babylonian method.\n    '''\n    cache = {}\n    \n    def _fib(number):\n        if number in cache:\n            return cache[number]\n        else:\n            cache[number] = f(number)\n            return cache[number]\n    \n    return _fib\n    \n    \ndef memoization_quotient(f):\n    '''\n    Write a function for computing fibonacci numbers using the babylonian method.\n    '''\n    cache = {}\n    \n    def _fib(number):\n        if number in cache:\n            return cache[number]\n        else:\n            cache[number] = f_square(number)\n            return cache[number]\n    \n    return _fib\n    \n    \ndef fibonacci_polynomial(n):\n    '''\n    Write a function for computing polynomial for fibonacci numbers using the babylonian method.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fibonacci_polynomial(n-1) + fibonacci_polynomial(n-2)\n    \n    \ndef fibonacci_quotient_polynomial(n):\n    '''\n    Write a function for computing polynomial for fibonacci numbers using the babylonian method.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_quotient_polynomial(n-1) + fibonacci_quotient_polynomial(n-2)\n    \n    \ndef fibonacci_polynomial_two_roots(n):\n    '''\n    Write a function for computing polynomial for fibonacci numbers using the babylonian method.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fibonacci_polynomial_two_roots(n-1) + fibonacci_polynomial_two_roots(n-2)\n    \n    \ndef fibonacci_quotient_polynomial_two_roots(n):\n    '''\n    Write a function for computing polynomial for fibonacci numbers using the babylonian method.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fibonacci_quotient_polynomial_two_roots(n-1) + fibonacci_quotient_polynomial_two_roots(n-2)\n    \n    \ndef fibonacci_polynomial_discontinuities(n):\n    '''\n    Write a function for computing polynomial for fibonacci numbers using the babylonian method.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return fibonacci_polynomial_discontinuities(n-1) + fibonacci_polynomial_discontinuities(n-2)\n    \n    \ndef fibonacci_quotient_discontinuities(n):\n    '''\n    Write a function for computing polynomial for fibonacci numbers using the babylonian method.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return fibonacci_quotient_discontinuities(n-1) + fibonacci_quotient_discontinuities(n-2)\n    \n    \ndef fibonacci_polynomial_discontinuities_two_roots(n):\n    '''\n    Write a function for computing polynomial for fibonacci numbers using the babylonian method.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return fibonacci_polynomial_discontinuities_two_roots(n-1) + fibonacci_polynomial_discontinuities_two_roots(n-2)\n    \n    \ndef fibonacci_quotient_discontinuities_two_roots(n):\n    '''\n    Write a function for computing polynomial for fibonacci numbers using the babylonian method.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return fibonacci_quotient_discontinuities_two_roots(n-1) + fibonacci_quotient_discontinuities_two_roots(n-2)\n    \n    \ndef fibonacci_polynomial_discontinuities_three_roots(n):\n    '''\n    Write a function for computing polynomial for fibonacci numbers using the babylonian method.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return fibonacci_polynomial_discontinuities_three_roots(n-1) + fibonacci_polynomial_discontinuities_three_roots(n-2) + fibonacci_polynomial_discontin"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return 0.0\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        raise ValueError(\"The number must be positive.\")\n    else:\n        numerator = 2\n        denominator = 1\n        while numerator <= number:\n            if denominator == 1:\n                result = numerator\n            else:\n                result = numerator / denominator\n            numerator = denominator\n            denominator = result\n        return result\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Checks if number is an integer\n    if not isinstance(number, int) or (number < 0):\n        raise TypeError('Number must be an integer')\n    # if it is a square root, return it\n    if number**0.5 == round(number**0.5):\n        return number\n    # else, make sure the number is negative and add it to a 'towards' number\n    elif number > 0:\n        towards = (number**0.5) + 1\n        return babylonian_squareroot(towards)\n    # if number is 0, return it\n    elif number == 0:\n        return number\n    # If number is less than zero, return a babylonian number\n    else:\n        return babylonian_squareroot(round(number**0.5))\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square_root = 0\n    a = 0\n    b = 1\n    for i in range(1, number):\n        c = a + b\n        a = b\n        b = c\n        square_root += b\n    return square_root\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    square = number\n    for i in range(1,int(sqrt(number))+1):\n        if square > 2 * i and square % (i+1) == 0:\n            return i\n        square *= 2\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return ((number ** 0.5) ** 2)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    else:\n        return babylonian_squareroot(number - 1) + babylonian_squareroot(number - 2)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if (str == \"\"): \n        return 0\n    if (str == str[::-1]): \n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps_s = 0 \n    lps_end = 1 \n    \n    # base case \n    if len(str) == 1: \n        return 1 \n    elif str[0] == str[-1]: \n        return 1 + lps_s \n    \n    # traversing for all the palindromes \n    # till the last character is the same \n    for i in range(1, len(str)): \n        if str[i]!= str[i-1]: \n            lps_s += lps(str[i:]) \n            lps_end += 1 \n        else: \n            lps_s += lps(str[:i]) \n            lps_end += lps(str[i:]) \n    return lps_end \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    i, n = 0, len(str)\n    longest = 0\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Find the length of the longest palindromic subsequence\n    length = 0\n    i = 0\n    for j in range(len(str)-1):\n        while i < len(str) and str[i] == str[j]:\n            i += 1\n        length = max(length, j-i+1)\n    return length"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps_dict = {}\n    for i in range(len(str)):\n        lps_dict[str[i]] = 0\n    for i in range(len(str)-1):\n        for j in range(i+1,len(str)):\n            if str[i] == str[j]:\n                lps_dict[str[i]] = max(lps_dict[str[i]] + 1, lps_dict[str[j]])\n    return max(lps_dict.values())\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    i=0\n    maxlen=0\n    while(i<len(str)):\n        i+=1\n        if(str[i]==str[i-1]):\n            i+=1\n            continue\n        else:\n            if(len(str[i:])>maxlen):\n                maxlen=len(str[i:])\n    return maxlen\n    \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    len_str = len(str)\n    if len_str <= 1:\n        return 1\n    max_dp = 1\n    for i in range(1,len_str//2+1):\n        dp = str[0:i]\n        if len(dp) > len_str//2:\n            continue\n        elif len(dp) == len_str//2:\n            if dp == str[len_str//2:]:\n                max_dp = max(max_dp,len_str//2-i)\n            else:\n                max_dp = max(max_dp,len_str//2-i)\n        else:\n            if dp == str[len_str-i:len_str-i:i]:\n                max_dp = max(max_dp,len_str//2-i)\n            else:\n                max_dp = max(max_dp,len_str//2-i)\n    return max_dp\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if str == str[::-1]: \n        return len(str)\n    else:\n        pal = 0\n        lps = lps(str[:-1]) \n        for i in range(0, len(str) - lps + 1):\n            pal += 1\n            if str[i:i + lps] == str[i + lps::-1][::-1]: \n                pal += 1\n        return pal \n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lengths = []\n    if len(str) <= 1: \n        return len(str)\n    \n    # initialize a list of palindromic subsequences\n    subsequence_lps = []\n    for i in range(len(str)):\n        subsequence_lps.append(str[i])\n        for j in range(i, len(str)): \n            if str[j] == str[i] and (i == 0 or j == 0): \n                pass\n            elif str[j] == str[i] and (i!= 0 or j!= 0): \n                subsequence_lps.append(str[i:j+1])\n                if len(subsequence_lps) > len(subsequence_lps[-1]): \n                    subsequence_lps.pop()\n                \n    # consider all subsequences and add the length to the list\n    for sub in subsequence_lps: \n        lengths.append(lps(sub))\n    \n    # return the length of the longest subsequence\n    return max(lengths)\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Generate a list of all characters in the string.\n    # For each character, keep a count of the number of times it occurs in the list. \n    # For example, if the character is 'c', then 'cc' appears in the list, so we keep it's count.\n    # The longest palindromic subsequence is the character at index 0, if there are multiple longest palindromic subsequences,\n    # the first is the second, etc.\n    # The idea is to build a two-pass HashMap, the key is the characters in the string, and the value is the count of each character in the string\n    # The second pass builds a new HashMap for every character in the string, with keys as the characters, and values as the count of the character for each time. \n    # Time O(n^2), space O(n)\n    def lps(str): \n        # Fill in the rest\n        HashMap = dict()\n        for char in str:\n            if char in HashMap:\n                HashMap[char] += 1\n            else:\n                HashMap[char] = 1\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1.0\n    for i in range(1, n+1):\n        harmonic_sum *= i\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/n)+(1/"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 1\n    for i in range(2,n):\n        harmonic = harmonic * i\n    return harmonic\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(1, n):\n        harmonic += (1/i)\n    return harmonic\n    \ndef equation(n):\n    '''\n    Write a function that returns the last n natural numbers.\n    '''\n    ans = []\n    for i in range(n + 1):\n        if i % 2 == 1:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(1/n)) + 1\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Write your code here\n    return (n+1)/(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return round((1 + n)/2,3)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    H = n + 1\n    return H\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # TODO: Your code here\n    def harmonic_sum_recursive(n):\n        if n == 1:\n            return 1\n        else:\n            return n * harmonic_sum_recursive(n-1)\n    \n    return harmonic_sum_recursive(n)\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * harmonic_sum(n-1)\n    \nprint(harmonic_sum(5))\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_intersection = set()\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] == array_nums2[j]:\n                set_intersection.add(array_nums1[i])\n    return set_intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_nums = []\n    for num in array_nums1:\n        for num2 in array_nums2:\n            if num*num2 in array_nums1:\n                intersection_nums.append(num*num2)\n                array_nums1.remove(num*num2)\n                array_nums2.remove(num2)\n    return intersection_nums\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #Your code here\n    return None\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Write your code here\n    n = len(array_nums1)\n    m = len(array_nums2)\n    i = 0\n    j = 0\n    intersect = []\n    while i < n and j < m:\n        if array_nums1[i] < array_nums2[j]:\n            i+=1\n        elif array_nums1[i] > array_nums2[j]:\n            j+=1\n        elif array_nums1[i] == array_nums2[j]:\n            if i == 0:\n                intersect.append(array_nums2[j])\n            if j == 0:\n                intersect.append(array_nums1[i])\n            elif array_nums1[i] < array_nums2[j-1]:\n                intersect.append(array_nums1[i])\n            elif array_nums1[i] > array_nums2[j-1]:\n                intersect.append(array_nums2[j])\n        elif array_nums1[i] == array_nums2[j]:\n            if i == 0:\n                intersect.append(array_nums1[j])\n            elif array_nums1[i] < array_nums2[j-1]:\n                intersect.append(array_nums2[j-1])\n            elif array_nums1[i] > array_nums2[j-1]:\n                intersect.append(array_nums1[i])\n        elif array_nums1[i] > array_nums2[j]:\n            i+=1\n        elif array_nums1[i] < array_nums2[j]:\n            j+=1\n    return intersect\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    if len(array_nums1) > len(array_nums2):\n        array_nums1, array_nums2 = array_nums2, array_nums1\n    intersection = []\n    for x in array_nums1:\n        if x in array_nums2:\n            intersection.append(x)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1_size = len(array_nums1)\n    array2_size = len(array_nums2)\n    intersection = []\n    if array1_size == array2_size:\n        for i in range(array1_size):\n            for j in range(array1_size):\n                if array_nums1[i] == array_nums2[j]:\n                    intersection.append(array_nums1[i])\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Your code here\n    # Passes all the tests below\n    pass\n    #return []\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Write your code here.\n    intersection = []\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            if num1 == num2:\n                intersection.append(num1)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    l1 = []\n    l2 = []\n    for i in array_nums1:\n        if i not in l1:\n            l1.append(i)\n    for j in array_nums2:\n        if j not in l2:\n            l2.append(j)\n    return l1 if len(l1)>len(l2) else l2\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #initialize variables\n    set1=set(array_nums1)\n    set2=set(array_nums2)\n    list_intersection=list(set1 & set2)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    lst = []\n    for i in tup:\n        if i==x:\n            lst.append(tup.count(i))\n        else:\n            lst.append(0)\n    print(lst)\n    return lst\nprint(count_X([0,1,2,3,4,5], 0))\nprint(count_X([0,1,2,3,4,5], 1))\nprint(count_X([0,1,2,3,4,5], 2))\nprint(count_X([0,1,2,3,4,5], 3))\nprint(count_X([0,1,2,3,4,5], 4))\nprint(count_X([0,1,2,3,4,5], 5))\nprint(count_X([0,1,2,3,4,5], 6)"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    s, c = tup\n    return s, c + 1\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len(tup)\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n    \n    \n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # Write your code here\n    \n    return 0\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(0,len(tup)):\n        if tup[i] == x:\n            count = count+1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    total = 0\n    for i in range(0, len(tup)):\n        if tup[i] == x:\n            total += 1\n    return total\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if x == tup[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #TODO\n    #Use a dictionary to count the number of occurrences of the element.\n    #Use a dictionary to count the number of occurrences of the element.\n    #Use a dictionary to count the number of occurrences of the element.\n    #Use a dictionary to count the number of occurrences of the element.\n    #Use a dictionary to count the number of occurrences of the element.\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    counter = 0\n    for i in range(len(tup)): \n        if tup[i] == x: \n            counter += 1\n    return counter\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    for i in range(len(list)):\n        if element > list[i]:\n            list.insert(i,element)\n            return list\n        elif element < list[i]:\n            list.insert(i,element)\n            return list\n    \n    return list"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)-1):\n        list.insert(i+1,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result=[]\n    for i in list:\n        if element<i:\n            result.append(i)\n            result.append(element)\n            return result\n        else:\n            result.append(i)\n            return result\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=[]\n    for element in list:\n        if element<element:\n            new_list.append(element)\n        else:\n            new_list.append(element)\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list[1:]\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return []\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n    for j in range(1, len(new_list)):\n        new_list[j] = new_list[j-1]\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    l=len(list)\n    for i in range(l):\n        if(i==0):\n            list[i]=element\n        elif(i==l-1):\n            list[i]=element\n        else:\n            x=list[i]\n            y=list[i+1]\n            list[i]=element\n            list[i+1]=y\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result_list = []\n    for idx, item in enumerate(list):\n        if item!= element:\n            result_list.append(item)\n            result_list.insert(idx, element)\n    return result_list\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0 or i == len(list) - 1:\n            result.append(list[i] + element)\n        else:\n            result.append(list[i] + element)\n            result.append(list[i + 1] + element)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i=0\n    while i<len(list):\n        if list[i]==element:\n            list.insert(i,element)\n            return list\n        else:\n            i+=1\n    return None\n    \ndef index_of(element,list):\n    '''\n    Write a function that takes in a list and an element and returns the index of the element in the list, if it is there, otherwise return -1.\n    '''\n    for i in range(len(list)):\n        if list[i]==element:\n            return i\n    return -1\n    \ndef merge_sort(list):\n    '''\n    Write a function that takes in a list and returns a sorted version.\n    '''\n    if len(list)<=1:\n        return list\n    else:\n        middle=len(list)//2\n        left=merge_sort(list[:middle])\n        right=merge_sort(list[middle:])\n        return merge(left,right)\n    \ndef merge(left,right):\n    '''\n    Write a function that takes in two sorted lists and returns a sorted list containing all the elements of both lists.\n    '''\n    result=[]\n    i=j=0\n    while i<len(left) and j<len(right):\n        if left[i]<right[j]:\n            result.append(left[i])\n            i+=1\n        else:\n            result.append(right[j])\n            j+=1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n    \ndef reverse(list):\n    '''\n    Write a function that takes in a list and returns a reversed version.\n    '''\n    i=len(list)-1\n    while i>=0:\n        list[i],list[i-1] = list[i-1],list[i]\n        i-=1\n    return list\n    \ndef selection_sort(list):\n    '''\n    Write a function that takes in a list and returns a sorted version.\n    '''\n    for i in range(len(list)):\n        min_value_index=index_of(list[i],list)\n        if min_value_index!=-1:\n            min_value=list[min_value_index]\n            list[min_value_index]=list[i]\n            list[i]=min_value\n    return list\n    \ndef bubble_sort(list):\n    '''\n    Write a function that takes in a list and returns a sorted version.\n    '''\n    for i in range(len(list)):\n        j=len(list)-1-i\n        if i==j:\n            continue\n        if list[i]<list[j]:\n            list[i],list[j]=(list[j],list[i])\n    return list\n    \ndef insertion_sort(list):\n    '''\n    Write a function that takes in a list and returns a sorted version.\n    '''\n    for i in range(len(list)):\n        j=i+1\n        while j>=0:\n            if list[j]<list[j-1]:\n                list[j],list[j-1]=list[j-1],list[j]\n            j-=1\n    return list\n    \ndef partition(list,pivot):\n    '''\n    Write a function that takes in a list and returns a sorted version.\n    '''\n    i=pivot\n    left=0\n    right=len(list)-1\n    result=[]\n    while i<=right:\n        if list[i]<=pivot:\n            result.append(list[i])\n            i+=1\n        else:\n            result.append(list[left])\n            left+=1\n        if left==right:\n            break\n    result.extend(list[left:])\n    return result\n    \ndef selection_partition(list,pivot):\n    '''\n    Write a function that takes in a list and returns a sorted version.\n    '''\n    i=pivot\n    left=0\n    right=len(list)-1\n    result=[]\n    while i<=right:\n        if list[i]<=pivot:\n            result.append(list[i])\n            i+=1\n        else:\n            result.append(list[left])\n            left+=1\n        if left==right:\n            break\n    result.extend(list[left:])\n    return result\n    \ndef quick_sort(list):\n    '''\n    Write a function that takes in a list and returns a sorted version.\n    '''\n    if len(list)<=1:\n        return list\n    else:\n        pivot=list[0]\n        less_list=[]\n        greater_list=[]\n        left=[]\n        right=[]\n        for i in range(len(list)):\n            if list[i]<=pivot:\n                left.append(list[i])\n            else:\n                greater_list.append(list[i])\n            if list[i]>=pivot:\n                right.append(list[i])\n            else:\n                less_list.append(list[i])\n        return quick_sort(less_list)+[pivot]+quick_sort(greater_list)\n        \n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def list2array(list):\n        return array([complex(item) for item in list])\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = float(numbers[i])\n        except:\n            pass\n    return convert(numbers)\n    \ndef convert_hex(numbers):\n    '''\n    Convert hexadecimal number to the coordinates.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = int(numbers[i],16)\n        except:\n            pass\n    return convert(numbers)\n        \ndef convert_oct(numbers):\n    '''\n    Convert octadecimal number to the coordinates.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = int(numbers[i],8)\n        except:\n            pass\n    return convert(numbers)\n    \ndef convert_decimal(numbers):\n    '''\n    Convert decimal number to the coordinates.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = int(numbers[i],10)\n        except:\n            pass\n    return convert(numbers)\n    \ndef convert_sin(numbers):\n    '''\n    Convert sin to the coordinates.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = complex(numbers[i])\n        except:\n            pass\n    return convert(numbers)\n    \ndef convert_cos(numbers):\n    '''\n    Convert cos to the coordinates.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = complex(numbers[i])\n        except:\n            pass\n    return convert(numbers)\n    \ndef convert_tan(numbers):\n    '''\n    Convert tan to the coordinates.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = complex(numbers[i])\n        except:\n            pass\n    return convert(numbers)\n    \ndef convert_cot(numbers):\n    '''\n    Convert cot to the coordinates.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = complex(numbers[i])\n        except:\n            pass\n    return convert(numbers)\n    \ndef convert_csc(numbers):\n    '''\n    Convert csc to the coordinates.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = complex(numbers[i])\n        except:\n            pass\n    return convert(numbers)\n    \ndef convert_sec(numbers):\n    '''\n    Convert sec to the coordinates.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = complex(numbers[i])\n        except:\n            pass\n    return convert(numbers)\n    \ndef convert_cot_sec(numbers):\n    '''\n    Convert cot to sec and vice versa.\n    '''\n    # remove [] and ()\n    for i in numbers:\n        try:\n            numbers[i] = complex(numbers[i])\n        except:\n            pass\n    return convert(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    lst_with_the_complex_number = [complex(number) for number in numbers]\n    return list(map(lambda x: x.conjugate().real,lst_with_the_complex_number))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # your code here\n    return 0, 0\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"\\nConvert: Convert a complex number to polar coordinates.\\n\")\n    print(\"Complex Numbers: \", numbers)\n    print(\"Polar Coordinates:\")\n    if numbers < 0:\n        print(\"Error: Value must be >= 0\")\n        return\n    else:\n        c = numbers.imag\n        d = numbers.real\n        print(\"Imaginary:\",c)\n        print(\"Real:\",d)\n        angle = 0.5*cmath.pi*d\n        print(\"Angle:\",angle)\n        print(\"\\n\")\n    return angle\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # convert complex number to polar coordinates\n    coordinate = complex(numbers.real, numbers.imag)\n    # get the real part\n    real_part = coordinate.real\n    # get the imaginary part\n    imaginary_part = coordinate.imag\n    # get the angle between the real and imaginary part\n    angle = cmath.phase(imaginary_part*real_part)\n    # return the angle\n    return angle"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for i in range(0, len(numbers)):\n        polar_coordinates.append(cmath.polar(numbers[i]))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = abs(numbers[0])\n    if a < 0:\n        a = -a\n    b = cmath.polar(numbers[1])\n    return b\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (cmath.polar(numbers))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i].real + 1j * numbers[i].imag\n    return numbers\ndef poly_coeff(numbers):\n    '''\n    Write a python function to determine the coefficients of a polynomial.\n    '''\n    total = 0\n    for i in range(len(numbers)):\n        total += numbers[i]*i\n    return total\ndef load_data(file):\n    '''\n    Open a data file and store in a list.\n    '''\n    with open(file, 'r') as f:\n        data = []\n        for line in f:\n            data.append(line.split())\n    return data\ndef load_data_2(file):\n    '''\n    Open a data file and store in a list.\n    '''\n    with open(file, 'r') as f:\n        data = []\n        for line in f:\n            data.append(line.split())\n    return data\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i].isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        count = 0\n        for i in list1:\n            if type(i) == int:\n                count = count + 1\n        return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    number = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            number += 1\n    return number\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    c = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            c += 1\n    return c\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # pass\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in list1:\n        if type(i) == int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return [[]]\n    else:\n        ls = []\n        for i in range(len(l)):\n            ls.append(l[i])\n            ls.extend(combinations_colors(l[:i] + l[i+1:], n-1))\n        return ls\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l.sort()\n    return combinations_with_replacement(l,n)\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #return list(combinations(l, n))\n    if l == []:\n        return [()]\n    elif n == 0:\n        return [(tuple(l))]\n    elif n < 0:\n        return []\n    elif n == 1:\n        return combinations_with_replacement(l, 1)\n    else:\n        return combinations_colors(l[:], n-1) + combinations_with_replacement(l[:], n-1) + combinations_colors(l[:], n-1) \n        \n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [''.join(e) for e in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(0, l):\n        combs.append(tuple([i]*n))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    a=[]\n    for i in range(len(l)-n+1):\n        l_repetition=[]\n        for j in range(i,i+n):\n            l_repetition.append(l[j])\n        a.append(tuple(l_repetition))\n    return a\ndef create_combinations_dict(l, n):\n    '''\n    Create a dictionary of {combination: number_of_times_element_in_the_combination} from the list of tuples.\n    '''\n    d=dict()\n    for i in range(len(l)):\n        for j in range(i,i+n):\n            d[tuple(l[i])]=d.get(tuple(l[i]),0)+1\n    return d\ndef print_combinations_dict(d, n):\n    '''\n    Print all of the combinations of the tuples given in d in the format of '<element>_<number_of_times_element_in_the_combination>' \n    '''\n    print('\\n'.join([''.join(x) for x in combinations(d.keys(),n)]))\ndef compare_all_combinations_dicts(d1, d2):\n    '''\n    Compare two dictionaries of {combination: number_of_times_element_in_the_combination} to find the most common combination.\n    '''\n    # NOTE: If there are no elements in both dictionaries, it will return None. In this case, we'll do the computations here.\n    common_set={}\n    for element1 in d1.keys():\n        for element2 in d2.keys():\n            if element1!=element2:\n                common_set[tuple(element1,element2)]=0\n    if len(common_set)!=0:\n        return max(common_set,key=common_set.get)\n    else:\n        return None\ndef merge_dicts(dict1, dict2):\n    '''\n    Merge two dictionaries into a new dictionary.\n    '''\n    common_keys=[]\n    for key in dict1.keys():\n        for key2 in dict2.keys():\n            if key[0]!=key2[0]:\n                if key[0] in common_keys:\n                    common_keys.remove(key[0])\n                if key2[0] in common_keys:\n                    common_keys.remove(key2[0])\n                common_keys.append(key[0])\n                common_keys.append(key2[0])\n    new_dict={}\n    for key in dict1.keys():\n        new_dict[key]=dict1[key]\n    for key in dict2.keys():\n        new_dict[key]=dict2[key]\n    return new_dict\ndef number_of_times_element_in_the_combination(d, c, n):\n    '''\n    Return the number of times element in a combination of a list of tuples.\n    '''\n    return sum(d.get(x,0) for x in combinations(c,n))\ndef number_of_times_element_in_all_combinations(d, c, n):\n    '''\n    Return the number of times element in a list of tuples.\n    '''\n    return sum(d.get(x,0) for x in combinations(c,n))\ndef number_of_times_element_in_all_combinations_dicts(d1, d2, n):\n    '''\n    Return the number of times element in a list of tuples.\n    '''\n    return sum(d1.get(x,0) for x in combinations(d2,n))\ndef combination_probabilities(d1, d2, c, n):\n    '''\n    Return the probability of a combination of a list of tuples.\n    '''\n    # If there are no elements in the dictionaries, then return 0.\n    if len(d1.keys())==0 or len(d2.keys())==0:\n        return 0\n    # If there are elements in the dictionaries, return 1.\n    elif len(d1.keys())>1 and len(d2.keys())>1:\n        return 1\n    # If there are two elements, return 1/2.\n    elif len(d1.keys())==1 and len(d2.keys())==2:\n        return 1/2\n    # If there are three elements, return 1/3.\n    elif len(d1.keys())==3 and len(d2.keys())==3:\n        return 1/3\n    # If there are four elements, return 1/4.\n    elif len(d1.keys())==4 and len(d2.keys())==4:\n        return 1/4\n    # If there are five elements, return 1/5.\n    elif len(d1.keys())==5 and len(d2.keys())==5:\n        return 1/5\n    # If there are one element, return 1/6.\n    elif len(d1.keys())==1 and len(d2.keys())==0:\n        return 1/6\n    # If there are one element and two elements, return 1/8.\n    elif len(d1.keys())==1 and len(d2.keys())==2:\n        return 1/8\n    # If there are one element and three elements, return 1/9.\n    elif len(d1.keys())==1 and len(d2.keys())==3:\n        return 1/9\n    # If there are two element and three elements, return 1/10.\n    elif len(d1.keys())==2 and len(d2.keys())==3:\n        return 1/10\n    # If there are two element and four elements, return 1/12.\n    elif len(d1.keys())==2 and len(d2.keys())==4:\n        return 1/12\n    # If there are two element and five elements, return 1/13.\n    elif len(d1.keys())==2 and len(d2.keys())==5:\n        return 1/13\n    # If there are three element and five elements, return 1/14.\n    elif len(d1.keys())==3 and len(d2.keys())==5:\n        return 1/14\n    # If there are three element and six elements, return 1/15.\n    elif len(d1.keys())==3 and len(d2.keys())==6:\n        return 1/15\n    # If there are three element, return 1/16.\n    elif len(d1.keys())==3:\n        return 1/16\n    # If there are three element, return 1/17.\n    elif len(d1.keys())==3:\n        return 1/17\n    # If there are four element, return 1/18.\n    elif len(d1.keys())==4:\n        return 1/18\n    # If there are four element, return 1/19.\n    elif len(d1.keys())==4:\n        return 1/19\n    # If there are five element, return 1/20.\n    elif len(d1.keys())==5:\n        return 1/20\n    # If there are five element, return 1/21.\n    elif len(d1.keys())==5:\n        return 1/21\n    # If there are six element, return 1/22.\n    elif len(d1.keys())==6:\n        return 1/22\n    # If there are six element, return 1/23.\n    elif len(d1.keys())==6:\n        return 1/23\n    # If there are seven element, return 1/24.\n    elif len(d1.keys())==7:\n        return 1/24\n    # If there are seven element, return 1/25.\n    elif len(d1.keys())==7:\n        return 1/25\n    # If there are eight element, return 1/26.\n    elif len(d1.keys())==8:\n        return 1/26\n    # If there are eight element, return 1/27.\n    elif len(d1.keys())==8:\n        return 1/27\n    # If there are nine elemen"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    # Creating all combinations\n    for i in range(1,n+1):\n        # Adding each element to a list\n        combinations.extend(list(combinations_with_replacement([i], i)))\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = combinations_with_replacement([item for item in l], n)\n    return [tuple(item) for item in combinations]\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_colors = []\n    if n == 0:\n        return []\n    else:\n        for i in range(0, n):\n            for j in combinations_with_replacement(l, i+1):\n                comb_colors.append(tuple(j))\n    return comb_colors\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    from math import sqrt\n    prime = [True] * (n+1)\n    prime[0] = prime[1] = False\n    for i in range(2, int(sqrt(n))+1):\n        if prime[i]:\n            for j in range(i*i, n+1, i):\n                prime[j] = False\n    return sum(sum(prime)"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime = [True for i in range(n+1)]\n    prime[0] = False\n    prime[1] = False\n    for i in range(2, n+1):\n        if prime[i]:\n            for j in range(i*i, n+1, i):\n                prime[j] = False\n    return sum(sum(prime)) - 1\n    \n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #determine a set of positive numbers less than or equal to n\n    prime_set = set([])\n    for i in range(2, n+1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                prime_set.add(i)\n    #return number of prime numbers less than n\n    return len(prime_set)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(n+1):\n        if is_prime(i):\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    Prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    print(Prime)\n    count = 0\n    for i in range(n + 1):\n        for j in range(len(Prime)):\n            print(f\"Checking {i} and {j} for prime number\")\n            if i < Prime[j]:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if(isPrime(i)):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    s = 0 # setup for s for primes\n    if n == 0 or n == 1:\n        return 0 # if n == 0 return 0\n    for i in range(2, n):\n        if n % i == 0: # if i is divisible by n return 1's count\n            return 1 # else return 0\n        else:\n            s += 1 # increment the count\n    return s # if i is divisible by n, return 1's count\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    lst = [0, 0, 0, 0, 0, 0]\n    for i in range(1, n + 1):\n        if lst[i] == 0:\n            lst[i] = 1\n        else:\n            lst[i] = 0\n    return len(lst)\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Write your code here\n    num = 1\n    for i in range(1, n + 1):\n        if is_prime(i):\n            num += 1\n    return num\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Write your solution here\n    return len([i for i in range(1,n+1) if n%i==0])\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    swap_value = a\n    first_number = b\n    second_number = a\n    return second_number, swap_value\n    \n    \n    \n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = a,b\n    return tup\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a, b\n    \ndef reverse(a, n):\n    '''\n    Write a function that takes a string as an argument and reverses it.\n    '''\n    temp = n\n    n = a\n    a = temp\n    return n, a\n    \ndef score_to_grade(a, b, c):\n    '''\n    Write a function that takes two strings as arguments and returns the grade of a student based on the highest score.\n    '''\n    score = 0\n    if a >= b:\n        score = a\n    elif a >= c:\n        score = b\n    else:\n        score = c\n    return score\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    num1= a\n    num2= b\n    return (num1, num2)\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    #pass\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a == b:\n        return (a,b)\n    else:\n        return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n    '''\n    test_tup1_max = max(test_tup1)\n    test_tup2_max = max(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        test_tup2 = test_tup1\n    if len(test_tup2) > len(test_tup1):\n        test_tup1 = test_tup2\n    for x in range(len(test_tup1)):\n        if test_tup1[x] > test_tup2[x]:\n            return x\n    return x + 1\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    if len(tup1) >= len(tup2):\n        return max(tup1, key=lambda element: element[1])\n    else:\n        return min(tup2, key=lambda element: element[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup2[0]\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2\n    \n    \n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max(test_tup1, test_tup2)\n    elif len(test_tup2) > len(test_tup1):\n        return max(test_tup2, test_tup1)\n    else:\n        return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    n = len(test_tup1)\n    if n < 2:\n        return max(test_tup1, key = len)\n    if n == 2:\n        return test_tup1\n    if n == 3:\n        return max(test_tup1, key = len)\n    if n == 4:\n        return test_tup1\n    if n == 5:\n        return max(test_tup1, key = len)\n    if n == 6:\n        return max(test_tup1, key = len)\n    if n == 7:\n        return max(test_tup1, key = len)\n    if n == 8:\n        return max(test_tup1, key = len)\n    if n == 9:\n        return max(test_tup1, key = len)\n    if n == 10:\n        return max(test_tup1, key = len)\n    if n == 11:\n        return max(test_tup1, key = len)\n    if n == 12:\n        return max(test_tup1, key = len)\n    if n == 13:\n        return max(test_tup1, key = len)\n    if n == 14:\n        return max(test_tup1, key = len)\n    if n == 15:\n        return max(test_tup1, key = len)\n    if n == 16:\n        return max(test_tup1, key = len)\n    if n == 17:\n        return max(test_tup1, key = len)\n    if n == 18:\n        return max(test_tup1, key = len)\n    if n == 19:\n        return max(test_tup1, key = len)\n    if n == 20:\n        return max(test_tup1, key = len)\n    if n == 21:\n        return max(test_tup1, key = len)\n    if n == 22:\n        return max(test_tup1, key = len)\n    if n == 23:\n        return max(test_tup1, key = len)\n    if n == 24:\n        return max(test_tup1, key = len)\n    if n == 25:\n        return max(test_tup1, key = len)\n    if n == 26:\n        return max(test_tup1, key = len)\n    if n == 27:\n        return max(test_tup1, key = len)\n    if n == 28:\n        return max(test_tup1, key = len)\n    if n == 29:\n        return max(test_tup1, key = len)\n    if n == 30:\n        return max(test_tup1, key = len)\n    if n == 31:\n        return max(test_tup1, key = len)\n    if n == 32:\n        return max(test_tup1, key = len)\n    if n == 33:\n        return max(test_tup1, key = len)\n    if n == 34:\n        return max(test_tup1, key = len)\n    if n == 35:\n        return max(test_tup1, key = len)\n    if n == 36:\n        return max(test_tup1, key = len)\n    if n == 37:\n        return max(test_tup1, key = len)\n    if n == 38:\n        return max(test_tup1, key = len)\n    if n == 39:\n        return max(test_tup1, key = len)\n    if n == 40:\n        return max(test_tup1, key = len)\n    if n == 41:\n        return max(test_tup1, key = len)\n    if n == 42:\n        return max(test_tup1, key = len)\n    if n == 43:\n        return max(test_tup1, key = len)\n    if n == 44:\n        return max(test_tup1, key = len)\n    if n == 45:\n        return max(test_tup1, key = len)\n    if n == 46:\n        return max(test_tup1, key = len)\n    if n == 47:\n        return max(test_tup1, key = len)\n    if n == 48:\n        return max(test_tup1, key = len)\n    if n == 49:\n        return max(test_tup1, key = len)\n    if n == 50:\n        return max(test_tup1, key = len)\n    if n == 51:\n        return max(test_tup1, key = len)\n    if n == 52:\n        return max(test_tup1, key = len)\n    if n == 53:\n        return max(test_tup1, key = len)\n    if n == 54:\n        return max(test_tup1, key = len)\n    if n == 55:\n        return max(test_tup1, key = len)\n    if n == 56:\n        return max(test_tup1, key = len)\n    if n == 57:\n        return max(test_tup1, key = len)\n    if n == 58:\n        return max(test_tup1, key = len)\n    if n == 59:\n        return max(test_tup1, key = len)\n    if n == 60:\n        return max(test_tup1, key = len)\n    if n == 61:\n        return max(test_tup1, key = len)\n    if n == 62:\n        return max(test_tup1, key = len)\n    if n == 63:\n        return max(test_tup1, key = len)\n    if n == 64:\n        return max(test_tup1, key = len)\n    if n == 65:\n        return max(test_tup1, key = len)\n    if n == 66:\n        return max(test_tup1, key = len)\n    if n == 67:\n        return max(test_tup1, key = len)\n    if n == 68:\n        return max(test_tup1, key = len)\n    if n == 69:\n        return max(test_tup1, key = len)\n    if n == 70:\n        return max(test_tup1, key = len)\n    if n == 71:\n        return max(test_tup1, key = len)\n    if n == 72:\n        return max(test_tup1, key = len)\n    if n == 73:\n        return max(test_tup1, key = len)\n    if n == 74:\n        return max(test_tup1, key = len)\n    if n == 75:\n        return max(test_tup1, key = len)\n    if n == 76:\n        return max(test_tup1, key = len)\n    if n == 77:\n        return max(test_tup1, key = len)\n    if n == 78:\n        return max(test_tup1, key = len)\n    if n == 79:\n        return max(test_tup1, key = len)\n    if n == 80:\n        return max(test_tup1, key = len)\n    if n == 81:\n        return max(test_tup1, key = len)\n    if n == 82:\n        return max(test_tup1, key = len)\n    if n == 83:\n        return max(test_tup1, key = len)\n    if n == 84:\n        return max(test_tup1, key = len)\n    if n == 85:\n        return max(test_tup1, key = len)\n    if n == 86:\n        return max(test_tup1, key = len)\n    if n == 87:\n        return max(test_tup1, key = len)\n    if n == 88:\n        return max(test_tup1, key = len)\n    if n == 89:\n        return max(test_tup1, key = len)\n    if n == 90:\n        return max(test_tup1, key = len)\n    if n == 91:\n        return max(test_tup1, key = len)\n    if n == 92:\n    "
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    elements_list = []\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # TODO: Write a function to maximize the given two tuples.\n    # The function should return the tuple with the greatest sum.\n    \n    # TODO: Write a function to maximize the given two tuples.\n    # The function should return the tuple with the greatest sum.\n    # It should only return a tuple of integers.\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) >= len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n    \ndef maximize_element(test_tup):\n    '''\n    Write a function to maximize the given tuple.\n    '''\n    if len(test_tup) >= 1:\n        return test_tup[0]\n    else:\n        return 0\n    \ntest_tup1 = (2,3,4)\ntest_tup2 = (5,6,7)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # n is the limit of the number to be searched\n    # return a list with all the prime numbers up to n\n    prime_list = [] \n    # 1, 2, 3, 5, 7, 11, 13...\n    for i in range(1,n): \n        for j in range(i,n): \n            # if it is even\n            if j%2==0: \n                # if it is greater than 1\n                if i>j: \n                    # the number is prime\n                    prime_list.append(i) \n    # return the list \n    return prime_list\n    \nprint(newman_prime(10)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197]"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = n % 10\n        b = n // 10\n        c = a + b\n        x = 5 * a * b\n        y = a + b + c\n        z = b + c + a\n        j = n % 3\n        if j == 0 or j == 2:\n            return 5 * x * y\n        else:\n            return 5 * x * y + 5 * z * y + z\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    while True:\n        if n % i == 0:\n            return i\n        i += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = True\n    for i in range(2, n+1):\n        if prime:\n            for j in range(i):\n                if i % j == 0:\n                    prime = False\n                    break\n    if prime:\n        print(n)\n    else:\n        print(0)\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        for i in range(3,n+1):\n            if prime_check(i):\n                prime_part = divmod(i,2)[1]\n                prime_check_part = divmod(prime_part,2)[0]\n                if prime_check_part == 1:\n                    p = divmod(i,2)[0]\n                    q = p * 2\n                    if q > n:\n                        return n\n            else:\n                continue\n    return 0\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 0\n    for x in range(2, n+1):\n        if (n % x == 0):\n            a = a+1\n    if (a % 2 == 1):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # To find prime numbers we will use the method of geometric series. \n    n1 = 1\n    for i in range(2, n):\n        if n % i == 0:\n            print(\"Newman-Shanks\u2013Williamson Prime number =\", n)\n            return n1\n        n1 += 1\n    print(\"Newman-Shanks\u2013Williamson Prime number =\", n)\n    return n1\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert 0 < n <= 10 ** 9 + 7\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    x = 0\n    for i in range(2, n+1):\n        if i == 2 or i == n:\n            x = 1\n            continue\n        y = 0\n        if n % i == 0:\n            y = 1\n        if (x == 0) and (y == 0):\n            x = 1\n        else:\n            x = 0\n            y = 0\n    return x\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = []\n    for x in range(2, n+1):\n        if n % x == 0:\n            prime_list.append(x)\n    return prime_list[0]\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Define test functions\n    def div_3(a, b):\n        return (a[0] / b[0], a[1] / b[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #define the division function\n    def divide(test_tup1, test_tup2):\n        '''\n        Called whenever we have two tuples with the same value stored in the two tuples. We divide the second tuple by the first.\n        '''\n        #access the values stored in the second tuple\n        num1, num2 = test_tup2\n        #access the values stored in the first tuple\n        num1, num2 = test_tup1\n        #find the sum of the values\n        sum = num1 + num2\n        #print the new sum\n        print(sum)\n        #return the sum\n        return sum\n    #first the tuple to calculate the result of division\n    result = divide(test_tup1, test_tup2)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = 0\n    # Write your code here\n    for e in test_tup1:\n        result = result + e * test_tup2[e]\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # your code here\n    output = []\n    for i in test_tup1:\n        if i in test_tup2:\n            output.append(i/test_tup2[i])\n        else:\n            output.append('None')\n    return output\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert type(test_tup1) == tuple, \"Test Tuple must be a tuple.\"\n    assert type(test_tup2) == tuple, \"Test Tuple must be a tuple.\"\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return(test_tup1[0] / test_tup1[1], test_tup1[0] / test_tup2[1], test_tup1[0] / test_tup2[0])\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Define variables as needed\n    number1, number2 = test_tup1[0], test_tup2[0]\n    divide_num = 0\n    # Print test_tup1 and test_tup2\n    print(test_tup1)\n    print(test_tup2)\n    # Loop through test_tup1 and test_tup2\n    for i in range(len(test_tup1)):\n        # Try/except to check if the element is a tuple\n        try:\n            divide_num += number1[i]/number2[i]\n        except ZeroDivisionError:\n            print(f'Failed to divide {number1[i]} by {number2[i]}.')\n    # Print the result\n    print(divide_num)\n    print('-'*20)\n    # Return the result\n    return divide_num\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    t1 = list(test_tup1)\n    t2 = list(test_tup2)\n    for i in range(len(t1)):\n        t1[i] = int(t1[i])\n    for i in range(len(t2)):\n        t2[i] = int(t2[i])\n    division_result = t1 / t2\n    for i in range(len(division_result)):\n        division_result[i] = int(division_result[i])\n    return division_result\n    # write a function that takes in two tuples and returns a list of the results of the two given tuples.\n    # call the function from the main program\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    def div_elements(test_tup1, test_tup2):\n        '''\n        Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n        '''\n        print('TESTING THE FUNCTION')\n        print(test_tup1)\n        print('TESTING THE FUNCTION')\n        print(test_tup2)\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print('TESTING THE FUNCTION')\n        print("
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    test_tup1 = list(map(lambda x: x/test_tup2, test_tup1))\n    return test_tup1\n    \ndef check_result(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if test_tup1!= test_tup2:\n        raise TypeError('Type of the test tuple must be an integer and then this function has been called with two tuples.')\n    else:\n        return 'The result of the division is {}'.format(division_elements(test_tup1, test_tup2))\n    \ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L//2], list1[L//2:])\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first = list1[:L]\n    second = list1[L:]\n    return first, second\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    L2 = []\n    L3 = []\n    for i in list1:\n        if len(i) <= L:\n            L2.append(i)\n        else:\n            L3.append(i[:L])\n            L3.append(i[L:])\n    return L2, L3\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L==1:\n        return list1\n    return list1[0:L//2], list1[L//2:]\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    def split(list1, L):\n        '''\n        Split the given list into two parts where the length of the first part of the list is L, and return the resulting tuples in a tuple.\n        '''\n        new_list = []\n        new_list.append(list1[:L])\n        new_list.append(list1[L:])\n        return new_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    new_list = []\n    for i in list1:\n        if len(i) < L:\n            i.append('')\n        new_list.append(i[:L])\n        i = i[L:]\n    return tuple(new_list)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list by L number of elements\n    new_list = []\n    for i in list1:\n        if L % len(i)!= 0:\n            i = i[:L//len(i)]\n        new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 1:\n        return (list1[:], 1)\n    else:\n        return split_two_parts(list1[:L-1], L-1) + split_two_parts(list1[L-1:], L)\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_L = L // 2\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # TO DO: Implement this function\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    ages = [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n    #dog_age = 0\n    dog_age = 0\n    for age in ages:\n        dog_age = dog_age + (h_age - age) * 7\n    return dog_age\n    "
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0 and h_age <= 1:\n        return '{:.2f} years'.format(h_age)\n    elif h_age >= 2 and h_age <= 3:\n        return '{:.2f} years and over'.format(h_age)\n    elif h_age >= 4 and h_age <= 6:\n        return '{:.2f} years and over'.format(h_age)\n    else:\n        return '{:.2f} years and over'.format(h_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = int(h_age)\n    years = dog_age * 365\n    return years\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 0\n    if h_age < 1:\n        dog_age = 0\n    elif h_age < 5:\n        dog_age = 5\n    elif h_age < 10:\n        dog_age = 10\n    elif h_age < 20:\n        dog_age = 20\n    else:\n        dog_age = 25\n    return(dog_age)\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 1:\n        return 0\n    elif h_age <= 2:\n        return 1\n    elif h_age <= 4:\n        return 2\n    else:\n        return 3\n        \n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE!\n    if h_age < 5:\n        print(f\"The dog is {h_age} years old.\")\n    elif 5 <= h_age <= 6.9:\n        print(f\"The dog is {h_age} years old.\")\n    elif 7.0 <= h_age <= 8:\n        print(f\"The dog is {h_age} years old.\")\n    else:\n        print(f\"The dog is {h_age} years old.\")\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return 0\n    elif h_age <= 5:\n        return (h_age * 10) + 2\n    elif h_age <= 8:\n        return (h_age * 5) + 1\n    elif h_age <= 14:\n        return (h_age * 2) + 1\n    else:\n        return h_age + 1\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # YOUR CODE HERE\n    if h_age <= 1:\n        return 'No in the year.'\n    else:\n        return '{} years.'.format(h_age)\n    \n    \n    #raise NotImplementedError\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 365.25\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age*7\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    for i in range(0, len(S), step):\n        out.append(S[i:i + step])\n    return out\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    def split_list(l, n):\n        '''\n        Split the list into a number of lists of length n.\n        '''\n        if len(l) < n:\n            return []\n        else:\n            return [l[i:i+n] for i in range(0, len(l), n)]\n    return [split_list(l, step) for l in S]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # base case\n    if step == 0:\n        return [list(S)]\n    # not base case\n    else:\n        return [list_split(S[0:step], step-1)] + [list_split(S[step:], step-1)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # A helper function that allows you to split a string into a list of strings\n    def split(S, n):\n        return [S[i:i+n] for i in range(0, len(S), n)]\n    # The main function that returns the split list and the number of lists\n    def split_loop(S, n):\n        return [[S[i:i+n]] for i in range(0, len(S), n)]\n    # A helper function that takes in a string and an integer n and returns the original string after it has been split at n characters\n    def split_helper(S, n):\n        # Base case, base case\n        if n == 0:\n            return S\n        # Recursive case, recursion\n        else:\n            return split_helper(S[:n], n-1) + [S[n]] + split_helper(S[n+1:], n-1)\n    # The main function that returns the split list and the number of lists\n    def split_loop_helper(S, n):\n        # Base case, base case\n        if n == 0:\n            return [S]\n        # Recursive case, recursion\n        elif n == 1:\n            return [[S]] + split_loop_helper(S, n-1)\n        # Recursive case, recursion\n        else:\n            return split_loop_helper(S[:n], n-1) + [S[:n] + [S[n]]] + split_loop_helper(S[n+1:], n-1)\n    # A helper function that returns the original string after it has been split at n characters\n    def split_string(S, n):\n        return split_string_helper(S, n)\n    # The main function that returns the split list and the number of lists\n    def split_string_helper(S, n):\n        # Base case, base case\n        if n == 0:\n            return [[S]]\n        # Recursive case, recursion\n        elif n == 1:\n            return [[S]] + split_string_helper(S, n-1)\n        # Recursive case, recursion\n        else:\n            return split_string_helper(S[:n], n-1) + [[S[:n] + [S[n]]] + split_string_helper(S[n+1:], n-1)]\n    # The main function that returns the split list and the number of lists\n    def split_string_loop(S, n):\n        # Base case, base case\n        if n == 0:\n            return [[S]]\n        # Recursive case, recursion\n        elif n == 1:\n            return [[S]] + split_string_loop(S, n-1)\n        # Recursive case, recursion\n        else:\n            return split_string_loop(S[:n], n-1) + [[S[:n] + [S[n]] + [S[n]]] + split_string_loop(S[n+1:], n-1)]\n    # Returns the list of lists of the original string and the number of lists\n    def get_strings(S):\n        return split_string(S, len(S))\n    # Returns the list of lists of the original string and the number of lists\n    def get_strings_loop(S):\n        return split_string_loop(S, len(S))\n    # Returns the list of lists of the original string and the number of lists\n    def get_strings_loop_helper(S):\n        # Base case, base case\n        if S == ['']:\n            return [[['']]]\n        # Recursive case, recursion\n        elif S == ['']:\n            return [[['']] + [[''] + ['']]]\n        # Recursive case, recursion\n        else:\n            return [[['']]] + get_strings_loop_helper([S[0]]) + [[['']] + [[''] + ['']] + [['']] + [['']] + [['']]]\n    # Returns the list of lists of the original string and the number of lists\n    def get_strings_loop_helper_loop(S):\n        # Base case, base case\n        if S == ['']:\n            return [[['']]]\n        # Recursive case, recursion\n        elif S == ['']:\n            return [[['']] + [['']]]\n        # Recursive case, recursion\n        else:\n            return [[['']]] + get_strings_loop_helper_loop([S[0]]) + [[['']] + [['']] + [['']] + [['']] + [['']] + [['']]]\n    # Returns the list of lists of the original string and the number of lists\n    def get_strings_loop_helper_loop_loop(S):\n        # Base case, base case\n        if S == ['']:\n            return [[['']]]\n        # Recursive case, recursion\n        elif S == ['']:\n            return [[['']] + [['']]]\n        # Recursive case, recursion\n        else:\n            return [[['']]] + get_strings_loop_helper_loop_loop([S[0]]) + [[['']] + [['']] + [['']] + [['']] + [['']] + [['']]]\n    # Returns the list of lists of the original string and the number of lists\n    def get_strings_loop_helper_loop_loop_loop(S):\n        # Base case, base case\n        if S == ['']:\n            return [[['']]]\n        # Recursive case, recursion\n        elif S == ['']:\n            return [[['']] + [['']]]\n        # Recursive case, recursion\n        else:\n            return [[['']]] + get_strings_loop_helper_loop_loop([S[0]]) + [[['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']]]\n    # Returns the list of lists of the original string and the number of lists\n    def get_strings_loop_helper_loop_loop_loop(S):\n        # Base case, base case\n        if S == ['']:\n            return [[['']]]\n        # Recursive case, recursion\n        elif S == ['']:\n            return [[['']] + [['']]]\n        # Recursive case, recursion\n        else:\n            return [[['']]] + get_strings_loop_helper_loop_loop([S[0]]) + [[['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']]]\n    # Returns the list of lists of the original string and the number of lists\n    def get_strings_loop_helper_loop_loop_loop(S):\n        # Base case, base case\n        if S == ['']:\n            return [[['']]]\n        # Recursive case, recursion\n        elif S == ['']:\n            return [[['']] + [['']]]\n        # Recursive case, recursion\n        else:\n            return [[['']]] + get_strings_loop_helper_loop_loop([S[0]]) + [[['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']]]\n    # Returns the list of lists of the original string and the number of lists\n    def get_strings_loop_helper_loop_loop_loop(S):\n        # Base case, base case\n        if S == ['']:\n            return [[['']]]\n        # Recursive case, recursion\n        elif S == ['']:\n            return [[['']] + [['']]]\n        # Recursive case, recursion\n        else:\n            return [[['']]] + get_strings_loop_helper_loop_loop([S[0]]) + [[['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']] + [['']]]\n    # Returns the list of lists of the original string and the number of lists\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [list(S[i:i + step]) for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    splits = [None] * step\n    for i in range(step):\n        splits[i] = S[i::step]\n    return splits\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_to_split = []\n    for i in range(0, len(S), step):\n        list_to_split.append(S[i:i+step])\n    return list_to_split\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # TODO: Implement the function.\n    if step == 0:\n        return []\n    elif step < 0:\n        return list_split(S, abs(step))\n    else:\n        return [list(S[i:i+step]) for i in range(len(S) - step + 1)]\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = list()\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if (l < 0):\n        print('Error: negative side length')\n        return\n    elif (l > 0):\n        a = (l**3)*np.pi\n        b = (l**3)*np.sin(np.pi*l/3)\n        c = l**3\n        d = l\n    else:\n        print('Error: Side length is zero')\n        return\n    return a, b, c, d\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = l/2\n    l = (l+0.00000001) # Round off the value to the nearest integer.\n    return (l**2)*(l**3)*(l**4)*(l**5)*(l**6)*(l**7)*(l**8)*(l**9)*(l**10) # Multiply by the fact that the value of l equals the length of the cube\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    import numpy as np\n    from scipy.interpolate import griddata\n    import matplotlib.pyplot as plt\n    \n    X = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8])\n    Y = np.array([0, 1, 1, 0, 0, 0, 1, 1, 0])\n    Z = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    \n    X_coordinate = X\n    Y_coordinate = Y\n    \n    X_coordinate_grid = np.arange(0, 10, 1)\n    Y_coordinate_grid = np.arange(0, 10, 1)\n    X_grid, Y_grid = np.meshgrid(X_coordinate_grid, Y_coordinate_grid)\n    \n    z = np.zeros((10, 10))\n    for i in range(10):\n        for j in range(10):\n            z[i][j] = griddata((X, Y), (X_grid, Y_grid), (X_coordinate, Y_coordinate), method='linear')\n    \n    fig = plt.figure(figsize=(7, 5))\n    ax = fig.gca(projection='3d')\n    \n    surf = ax.plot_surface(X_grid, Y_grid, z)\n    \n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_zlabel('Z')\n    \n    #ax.plot_wireframe(X_grid, Y_grid, z)\n    #plt.show()\n    #fig.savefig('lateral_surface_cube.png')\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_length = l\n    y = int(side_length / 2)\n    if l >= 0:\n        a = (l * 2) + (l - 1)\n        b = l * (l - 1) - y * 2\n        c = l * (l - 1) + y * 2\n    else:\n        a = ((l * 2) - y * 2) + (l * 2)\n        b = ((l * 2) - y * 2) - (l * 2)\n        c = ((l * 2) + y * 2) + (l * 2)\n    print('A = {}'.format(a))\n    print('B = {}'.format(b))\n    print('C = {}'.format(c))\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def get_side(p):\n        return p[0]\n    def cube_side(p):\n        return p[1]\n    #print(get_side(l))\n    return sum([get_side(p) for p in l])\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = l**2 #lateral surface area of a cube\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = np.pi*(3*l**2)\n    print(area)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def inner(x):\n        return 0.5*x**2+0.5*x+0.5\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * np.pi\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    #error checks\n    if type(l)!= int or l<0:\n        print(\"The length of the input must be positive!\")\n    elif l>200:\n        print(\"The length of the input must be less than 200!\")\n    else:\n        #calculations\n        #lateral surface area\n        area=l*l*0.5*np.pi\n        #error check\n        if area<0.5:\n            print(\"The lateral surface area of the cube is negative!\")\n        else:\n            #returns the result\n            return area\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**2\n    return sum\n    \n    \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a = a + (i**2)\n    return a\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # TODO:  Implement the function with less code\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n*n+n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)*(n+8)*(n+9)*(n+10)*(n+11)*(n+12)*(n+13)*(n+14)*(n+15)*(n+16)*(n+17)*(n+18)*(n+19)*(n+20)*(n+21)*(n+22)*(n+23)*(n+24)*(n+25)*(n+26)*(n+27)*(n+28)*(n+29)*(n+30)*(n+31)*(n+32)*(n+33)*(n+34)*(n+35)*(n+36)*(n+37)*(n+38)*(n+39)*(n+40)*(n+41)*(n+42)*(n+43)*(n+44)*(n+45)*(n+46)*(n+47)*(n+48)*(n+49)*(n+50)*(n+51)*(n+52)*(n+53)*(n+54)*(n+55)*(n+56)*(n+57)*(n+58)*(n+59)*(n+60)*(n+61)*(n+62)*(n+63)*(n+64)*(n+65)*(n+66)*(n+67)*(n+68)*(n+69)*(n+70)*(n+71)*(n+72)*(n+73)*(n+74)*(n+75)*(n+76)*(n+77)*(n+78)*(n+79)*(n+80)*(n+81)*(n+82)*(n+83)*(n+84)*(n+85)*(n+86)*(n+87)*(n+88)*(n+89)*(n+90)*(n+91)*(n+92)*(n+93)*(n+94)*(n+95)*(n+96)*(n+97)*(n+98)*(n+99)*(n+100))\n    \n    \nprint(square_Sum(5))\nprint(square_Sum(4))\nprint(square_Sum(7))"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + pow(i, 2)\n        i = i + 1\n        \n    return sum\n        \n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + (i**2)\n    return sum\n    \nsum_of_squares = square_Sum(5)\nprint(sum_of_squares)"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n**2\nprint(square_Sum(9))\nprint(square_Sum(3))\nprint(square_Sum(5))\nprint(square_Sum(8))\nprint(square_Sum(9))\nprint(square_Sum(12))\nprint(square_Sum(15))\nprint(square_Sum(16))"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # def squares_of_even_numbers(n):\n    #     '''\n    #     Write a python function that takes in an integer n and returns the sum of the squares of the first n even natural numbers.\n    #     '''\n    #     return (n**2) + (n**2)\n    # squares_of_even_numbers(3)\n    return (n**2) + (n**2)\nn = int(input('enter a number: '))\nprint('The square of the numbers of the odd natural numbers is: ', square_Sum(n))\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # write your code here\n    numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    star_num = []\n    for i in range(1,n+1):\n        if i % 3!= 0:\n            star_num.append(numbers[i])\n    return star_num[n-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for x in range(n+1):\n        if x*x == n:\n            return x\n    return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    number_of_stars = 0\n    for x in range(1,n+1):\n        if x**3 % 10 == 1:\n            number_of_stars += 1\n    return number_of_stars\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1: \n        return\n    else: \n        return find_star_num(n - 1) + n\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for i in range(n):\n        if n%(i+1) == 0:\n            return i+1\n            \n    return n+1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import math\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: \n        return 1\n    if n == 2: \n        return 3\n    if n == 3: \n        return 5\n    if n == 4: \n        return 7\n    if n == 5: \n        return 11\n    if n == 6: \n        return 13\n    if n == 7: \n        return 15\n    if n == 8: \n        return 17\n    if n == 9: \n        return 19\n    if n == 10: \n        return 23\n    if n == 11: \n        return 29\n    if n == 12: \n        return 31\n    if n == 13: \n        return 37\n    if n == 14: \n        return 41\n    if n == 15: \n        return 47\n    if n == 16: \n        return 51\n    if n == 17: \n        return 53\n    if n == 18: \n        return 59\n    if n == 19: \n        return 61\n    if n == 20: \n        return 67\n    if n == 21: \n        return 71\n    if n == 22: \n        return 73\n    if n == 23: \n        return 79\n    if n == 24: \n        return 83\n    if n == 25: \n        return 89\n    if n == 26: \n        return 93\n    if n == 27: \n        return 99\n    if n == 28: \n        return 103\n    if n == 29: \n        return 107\n    if n == 30: \n        return 111\n    if n == 31: \n        return 127\n    if n == 32: \n        return 131\n    if n == 33: \n        return 137\n    if n == 34: \n        return 141\n    if n == 35: \n        return 147\n    if n == 36: \n        return 151\n    if n == 37: \n        return 157\n    if n == 38: \n        return 161\n    if n == 39: \n        return 167\n    if n == 40: \n        return 171\n    if n == 41: \n        return 173\n    if n == 42: \n        return 179\n    if n == 43: \n        return 181\n    if n == 44: \n        return 187\n    if n == 45: \n        return 191\n    if n == 46: \n        return 199\n    if n == 47: \n        return 211\n    if n == 48: \n        return 223\n    if n == 49: \n        return 239\n    if n == 50: \n        return 251\n    if n == 51: \n        return 257\n    if n == 52: \n        return 261\n    if n == 53: \n        return 263\n    if n == 54: \n        return 269\n    if n == 55: \n        return 271\n    if n == 56: \n        return 277\n    if n == 57: \n        return 281\n    if n == 58: \n        return 283\n    if n == 59: \n        return 289\n    if n == 60: \n        return 291\n    if n == 61: \n        return 297\n    if n == 62: \n        return 301\n    if n == 63: \n        return 307\n    if n == 64: \n        return 311\n    if n == 65: \n        return 313\n    if n == 66: \n        return 319\n    if n == 67: \n        return 327\n    if n == 68: \n        return 331\n    if n == 69: \n        return 333\n    if n == 70: \n        return 349\n    if n == 71: \n        return 341\n    if n == 72: \n        return 343\n    if n == 73: \n        return 349\n    if n == 74: \n        return 357\n    if n == 75: \n        return 361\n    if n == 76: \n        return 363\n    if n == 77: \n        return 359\n    if n == 78: \n        return 363\n    if n == 79: \n        return 359\n    if n == 80: \n        return 359\n    if n == 81: \n        return 359\n    if n == 82: \n        return 359\n    if n == 83: \n        return 359\n    if n == 84: \n        return 359\n    if n == 85: \n        return 359\n    if n == 86: \n        return 359\n    if n == 87: \n        return 359\n    if n == 88: \n        return 359\n    if n == 89: \n        return 359\n    if n == 90: \n        return 359\n    if n == 91: \n        return 359\n    if n == 92: \n        return 359\n    if n == 93: \n        return 359\n    if n == 94: \n        return 359\n    if n == 95: \n        return 359\n    if n == 96: \n        return 359\n    if n == 97: \n        return 359\n    if n == 98: \n        return 359\n    if n == 99: \n        return 359\n    if n == 100: \n        return 359\n    if n == 101: \n        return 359\n    if n == 102: \n        return 359\n    if n == 103: \n        return 359\n    if n == 104: \n        return 359\n    if n == 105: \n        return 359\n    if n == 106: \n        return 359\n    if n == 107: \n        return 359\n    if n == 108: \n        return 359\n    if n == 109: \n        return 359\n    if n == 110: \n        return 359\n    if n == 111: \n        return 359\n    if n == 112: \n        return 359\n    if n == 113: \n        return 359\n    if n == 114: \n        return 359\n    if n == 115: \n        return 359\n    if n == 116: \n        return 359\n    if n == 117: \n        return 359\n    if n == 118: \n        return 359\n    if n == 119: \n        return 359\n    if n == 120: \n        return 359\n    if n == 121: \n        return 359\n    if n == 122: \n        return 359\n    if n == 123: \n        return 359\n    if n == 124: \n        return 359\n    if n == 125: \n        return 359\n    if n == 126: \n        return 359\n    if n == 127: \n        return 359\n    if n == 128: \n        return 359\n    if n == 129: \n        return 359\n    if n == 130: \n        return 359\n    if n == 131: \n        return 359\n    if n == 132: \n        return 359\n    if n == 133: \n        return 359\n    if n == 134: \n        return 359\n    if n == 135: \n        return 359\n    if n == 136: \n        return 359\n    if n == 137: \n        return 359\n    if n == 138: \n        return 359\n    if n == 139: \n        return 359\n    if n == 140: \n        return 359\n    if n == 141: \n        return 359\n    if n == 142: \n        return 359\n    if n == 143: \n        return 359\n    if n == 144: \n        return 359\n    if n == 145: \n        return 359\n    if n == 146: \n        return 359\n    if n == 147: \n        return 359\n    if n == 148: \n        return 359\n    if n == 149: \n        return 359\n    if n == 150: \n        return 359\n    if n == 151: \n        return 359\n    if n == 152: \n        return 359\n    if n == 153: \n        return 359\n    if n == 154: \n        return 359\n    if n == 155: \n        return 359\n    if n == 156: \n        return 359\n    if n == 157: \n        return 359\n    if n == 158: \n        return 359\n    if n == 159: \n        return 359\n    if n == 160: \n        return 359\n    if n == 161: \n        return 359\n    if n == 162: \n        return 359\n    if n == 163: \n        return 359\n    if n == 164: \n        return 359\n    if n == 165: \n        return 359\n    if n == 166: \n        return 359\n    if n == 167: \n        return 359\n    if n == 168: \n        return 35"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    else:\n        return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n=int(n)\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n    \nif __name__=='__main__':\n    n = input('Enter the number: ')\n    print(find_star_num(n))\n    "
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    return chr(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k) - 65\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return chr(ord(k) - 32)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return int(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k == None:\n        raise ValueError(\"Key is not provided.\")\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    def ascii_decode(s):\n        value = ord(s)\n        return value\n    return ascii_decode(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    try:\n        return chr(int(k))\n    except:\n        raise ValueError('You must enter a valid number.')\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k =='':\n        return''\n    elif k == '\\n':\n        return '\\n'\n    elif k == '\\r':\n        return '\\r'\n    elif ord(k) < 127:\n        return k\n    else:\n        return chr(ord(k) - 128)"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    value = ord(k)\n    value = value if value > 127 else value - 1\n    return value\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = []\n    even = 0\n    sum = 0\n    for i in arr:\n        if(i % 2 == 0):\n            even_index.append(even)\n            sum += i\n            even += 1\n    print(sum)\n    print(even_index)\n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum = sum + arr[i]\n    return sum\n    \n    \n    \n    "
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    even_sum = 0\n    for i in range(len(arr)):\n        if(arr[i] % 2 == 0):\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for index in range(len(arr)):\n        if index % 2 == 0:\n            even_sum += arr[index]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    summ = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            summ+= arr[i]\n    return summ\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr)):\n        if arr[i]%2 == 0:\n            total += arr[i]\n    print(\"The sum of all even numbers is:\", total)\n    \nsum_even_and_even_index([3,4,2,0,1,5])"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for num in arr:\n        if num % 2 == 0:\n            sum += num\n    return sum\n    \n    \n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    evens = 0\n    for num in arr:\n        if num % 2 == 0:\n            evens += num\n    return evens\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans = 0\n    for i in range(1, n + 1):\n        if i % 5 == 0:\n            ans += i\n    return ans\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    if n == 0 or n == 1: \n        return n \n    else:\n        return sum([even_Power_Sum(i) for i in range(n) if i % 2 == 0 ]) \n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0: \n        raise ValueError(\"You must provide an integer greater than 0\")\n    else: \n        result = 0\n        for i in range(1, n+1): \n            result = result + i**5\n        return result\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([int(i)**5 for i in range(n) if int(i)%2==0])\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # if n is a natural number, return that number, otherwise return 0\n    if n % 2 == 0:\n        return n\n    elif n == 0:\n        return 0\n    else:\n        # find the first n natural numbers greater than 1\n        power = 1\n        while power <= n:\n            n *= power\n            power += 1\n        return n\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    if n < 0:\n        raise ValueError(\"Invalid Input\")\n    elif n <= 0:\n        raise ValueError(\"Invalid Input\")\n    \n    \n    answer = 0\n    for i in range(1,n+1):\n        answer += i**5\n    return answer\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # define a return statement\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        power = 1\n        while n:\n            n = n - (n & 1)\n            power = power + power\n        return power\n    return power\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    i = 0\n    sum = 0\n    while i < n:\n        sum = sum + (i*i)\n        i = i+1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    num = 0\n    for i in range(1,n):\n        num += pow(i,5)\n    print(num)\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for tup in test_list:\n        rear.append(tup[1])\n    return rear"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    \n    for index, element in enumerate(test_list):\n        if index == len(test_list)-1:\n            rear.append(element[0])\n        else:\n            rear.append(element[1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[0])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    temp_list = []\n    for element in test_list:\n        temp_list.append(element[1])\n    return temp_list\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list\n    \ntest_list = [(1,2), (3,4), (5,6), (7,8), (9,10)]\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_extract = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Your code here\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[1])\n    return rear_list\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    front_tup = tuple(test_list[0][1])\n    rear_tup = tuple(test_list[-1][1])\n    return (front_tup,rear_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # add them together\n    total = 0\n    for x, y in zip(test_tup1, test_tup2):\n        total += x\n        total -= y\n    return total\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    first_tuple = test_tup1\n    second_tuple = test_tup2\n    for i in range(len(first_tuple)):\n        if i < len(second_tuple) and first_tuple[i] < second_tuple[i]:\n            first_tuple[i] = -1*first_tuple[i]\n        elif first_tuple[i] < second_tuple[i]:\n            first_tuple[i] = -1*first_tuple[i]\n        else:\n            return \"Not possible\"\n    return first_tuple\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    \n    # loop through the tup1 and tup2, and subtract the two tuples.\n    for index in range(len(tup1)):\n        tup1[index] = tup1[index] - tup2[index]\n    \n    # return the new list.\n    return tup1\n    \ndef find_even_num(test_tup1):\n    '''\n    Write a function that takes in a tuple and returns the number of even numbers in that tuple.\n    '''\n    tup1 = test_tup1\n    \n    # loop through the tuple, and if the tuple contains an even number, return the value of the loop variable.\n    for index in range(len(tup1)):\n        if tup1[index] % 2 == 0:\n            return tup1[index]\n    \n    # return 0\n    return 0\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # YOUR CODE HERE\n    sub_tup = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            sub_tup.append(i)\n    return sub_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: Replace pass with your code here\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return_tup = test_tup2[:]\n    for i in range(len(test_tup1)):\n        return_tup[i] = test_tup1[i] - test_tup2[i]\n    return return_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    try:\n        test_tup1 = tuple(test_tup1)\n        test_tup2 = tuple(test_tup2)\n        return tuple(map(lambda x,y: x - y, test_tup1, test_tup2))\n    except TypeError:\n        return 'Invalid Input'\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #Remove all elements with the same index\n    test_tup1 = test_tup1[1:]\n    test_tup2 = test_tup2[1:]\n    \n    #Convert all elements of the second tuple to string\n    test_tup2 = tuple(map(str, test_tup2))\n    \n    #Check if index number of the element of the second tuple in the first tuple is greater than the index number of the element of the first tuple\n    if test_tup2[1] < test_tup1[1]:\n        #Convert all the elements of the second tuple to string\n        test_tup2 = tuple(map(str, test_tup2))\n        #Remove all elements with the same index number\n        test_tup1 = test_tup1[2:]\n        test_tup2 = test_tup2[2:]\n        \n        #Convert all the elements of the first tuple to string\n        test_tup1 = tuple(map(str, test_tup1))\n        \n        #Check if the index number of the element of the first tuple in the second tuple is greater than the index number of the element of the first tuple\n        if test_tup2[0] > test_tup1[0]:\n            #Convert all the elements of the second tuple to string\n            test_tup2 = tuple(map(str, test_tup2))\n            \n            #Remove all elements with the same index number\n            test_tup1 = test_tup1[1:]\n            test_tup2 = test_tup2[1:]\n            \n            #Convert all the elements of the first tuple to string\n            test_tup1 = tuple(map(str, test_tup1))\n            \n            #Convert all elements of the second tuple to string\n            test_tup2 = tuple(map(str, test_tup2))\n    else:\n        #Convert all the elements of the second tuple to string\n        test_tup2 = tuple(map(str, test_tup2))\n        \n        #Remove all elements with the same index number\n        test_tup1 = test_tup1[2:]\n        test_tup2 = test_tup2[2:]\n        \n        #Convert all elements of the first tuple to string\n        test_tup1 = tuple(map(str, test_tup1))\n        \n        #Convert all elements of the second tuple to string\n        test_tup2 = tuple(map(str, test_tup2))\n        \n    #Get the index number of the element of the second tuple with the same index number\n    ind = test_tup2[0]\n    \n    #If the index number of the element of the second tuple is greater than the index number of the element of the first tuple\n    if test_tup2[0] > test_tup1[0]:\n        #Convert all the elements of the second tuple to string\n        test_tup2 = tuple(map(str, test_tup2))\n        \n        #Remove all elements with the same index number\n        test_tup1 = test_tup1[1:]\n        test_tup2 = test_tup2[1:]\n        \n        #Convert all elements of the first tuple to string\n        test_tup1 = tuple(map(str, test_tup1))\n        \n        #Convert all elements of the second tuple to string\n        test_tup2 = tuple(map(str, test_tup2))\n    else:\n        #Convert all elements of the second tuple to string\n        test_tup2 = tuple(map(str, test_tup2))\n    \n    #Get the index number of the element of the first tuple with the same index number\n    ind = test_tup1[0]\n    \n    #Return all elements with the same index number\n    return test_tup1[1:], test_tup2[1:]\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    substracted = (tuple(map(lambda x: x-x, test_tup2)))\n    return substracted\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return \"Enter a non-negative integer\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return n\n    if n == 2:\n        return n\n    if n == 3:\n        return n * (n - 1) * (n - 2) / 6\n    if n % 2 == 0:\n        return even_binomial_Coeff_Sum(n - 1)\n    else:\n        return (n * even_binomial_Coeff_Sum(n - 1) + 2 * even_binomial_Coeff_Sum(n - 2)) / 6\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += math.pow(i, 2)\n        return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum + math.comb(n, i) * (i ** (n))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(n + 1): \n        s += math.pow(i, 2) * math.pow(1 - i, n - i)\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    if n == 0:\n        return 0\n    for i in range(1,n+1):\n        if (n-i) % 2 == 0:\n            Sum += (i/2) * (2*even_binomial_Coeff_Sum(i-1) + even_binomial_Coeff_Sum(i))\n    return Sum \n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n%2==0):\n        return 0\n    elif (n%2==1):\n        return 1\n    elif (n>=3):\n        return even_binomial_Coeff_Sum(n-1)\n    else:\n        print(\"Error, only 2 or more integers are accepted as n.\")\n        return -1"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even=0\n    for i in range(n+1):\n        sum_even+=math.binomial(n,i)\n    return sum_even\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_Coeff(n,k):\n        '''\n        Given a positive integer n, find the sum of even index binomial coefficients.\n        '''\n        if k == 0:\n            return 1\n        if k > n:\n            return 0\n        return binomial_Coeff(n,k-1) + binomial_Coeff(n-1,k)\n    return binomial_Coeff(n,k)\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += math.log2(i) * (2**i) * (i**2) \n    return num_sum \ndef odd_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += math.log2(i) * (i**2) \n    return num_sum\ndef Power_of_2_binomial_coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of 2 index binomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 1): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += i**2\n    return num_sum \ndef Even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += math.log2(i) * (i**2) \n    return num_sum \ndef Odd_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += math.log2(i) * (i**2) \n    return num_sum \ndef Polynomial_Binary_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of a power of 2 index polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 1): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += i**2\n    return num_sum \ndef Power_of_2_Polynomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of 2 index polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += math.log2(i) * (i**2) \n    return num_sum \ndef Polynomial_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of a power of n polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 1): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += i**i \n    return num_sum \ndef Power_of_2_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of 2 index polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 1): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += math.log2(i) * i \n    return num_sum \ndef Polynomial_Sum_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of 2 index polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += i**2\n    return num_sum \ndef Polynomial_Binary_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of n polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 1): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += i**2\n    return num_sum \ndef Polynomial_Sum_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of n polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += math.log2(i) * i \n    return num_sum \ndef Power_of_2_Binary_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of 2 index polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += i**2\n    return num_sum \ndef Power_of_2_Binary_Sum_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of 2 index polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += math.log2(i) * i \n    return num_sum \ndef Power_of_2_Polynomial_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of 2 index polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 1): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += i**i \n    return num_sum \ndef Power_of_2_Sum_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of 2 index polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += math.log2(i) * i \n    return num_sum \ndef Power_of_2_Binary_Sum_2(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of 2 index polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 2): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += i**2\n    return num_sum \ndef Polynomial_Sum_3(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of a power of 3 polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 1): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += i**i \n    return num_sum \ndef Power_of_2_Polynomial_Sum_3(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power of 2 index polynomial coefficients.\n    '''\n    num_sum = 0\n    if (n < 1): \n        return 0 \n    for i in range(2, n+1): \n        num_sum += math.log2(i) * i \n    return num_sum \ndef Polynomial_Sum_4(n): \n    '''\n    Write a python function that take"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #dont forget the variable n and use math.factorial to calculate the binomial coefficient \n    #the function returns the sum of even binomial coefficients\n    return math.factorial(n)/(math.factorial(n-2)*math.factorial(n-3))\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = r**3*(3/8)*(1 - (4/5)*(1 - 2*r)**2)\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3*np.pi*r*h\n    print(f\"Volume of a cylinder with radius {r} and height {h} is {volume}\")\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (4/3) * np.pi * r**3\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*3.14\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # YOUR CODE HERE\n    return 3.14*(r**2)*h/2\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    def cylinder_volume(r,h):\n        return r**2*h**3\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return round(r*h,2)\n    \n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (4/3)*np.pi*r*r*h\n    return V\n    \ndef volume_cylinder_c(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the volume using the constant constant\n    '''\n    V = 4/3*np.pi*r*r*h\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r*r*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict(filter(lambda x: x[n] >= n, dict.items()))\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newdict={}\n    for entry in dict.items():\n        if entry[1] >= n:\n            newdict[entry[0]]=entry[1]\n    return newdict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered = dict.copy()\n    for k, v in dict.items():\n        if v >= n:\n            filtered[k] = v\n    return filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dictionary = dict()\n    for key in dict:\n        if dict[key] >= n:\n            new_dictionary[key] = dict[key]\n    return new_dictionary\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for k, v in dict.items():\n        if v >= n:\n            filtered_dict[k] = v\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filteredDict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filteredDict[key] = value\n    return filteredDict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    mydict={}\n    for key,val in dict.items():\n        if type(val) == int:\n            if val >= n:\n                mydict[key] = val\n    return mydict\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    temp = []\n    for key in dict:\n        if dict[key] >= n:\n            temp.append(key)\n    return temp\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key in dict:\n        if dict[key] >= n:\n            dict[key] = 1\n        else:\n            dict[key] = 0\n    return dict\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # TODO: Write your code here\n    num = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            num += 1\n    return num\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] <= test_tup[i+1]:\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if i == 0:\n            if test_tup[i] == test_tup[i+1]:\n                first_num = test_tup[i]\n            else:\n                first_num = 'Error'\n                break\n        elif test_tup[i]!= test_tup[i-1]:\n            first_num = 'Error'\n            break\n    return len(test_tup) - 1 - first_num\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in test_tup:\n        if i == test_tup[0]:\n            return test_tup.count(i)\n    return 0\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(list(filter(lambda x: x[0] < test_tup[0], test_tup)))"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    dict_elements = {}\n    for i in range(len(test_tup)):\n        for j in range(i):\n            if test_tup[j] in dict_elements:\n                dict_elements[test_tup[j]] += 1\n            else:\n                dict_elements[test_tup[j]] = 1\n    return dict_elements\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # your code goes here\n    temp=0\n    if len(test_tup)>1:\n        for i in range(len(test_tup)-1):\n            if test_tup[i]<=test_tup[i+1]:\n                temp+=1\n        return temp\n    else:\n        return 0\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count\n    \ndef get_elements(test_tup):\n    '''\n    Write a function to get all elements from a tuple and store them in an array.\n    '''\n    elements = []\n    for i in range(len(test_tup)):\n        elements.append(test_tup[i])\n    return elements\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n<=0: \n        return 0\n    if n==1: \n        return 1\n    return is_num_decagonal(n-1) + is_num_decagonal(n-2)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def check_first(x):\n        return x % 2 == 0\n    \n    def check_second(x):\n        return x % 2 == 1\n    \n    # upper and lower limits\n    a, b = 0, n-1\n    # digits\n    digits = [int(i) for i in str(n)]\n    # iterate\n    while a < b:\n        # if numbers\n        if digits[a] == digits[b]:\n            # check values\n            if check_first(a) and check_second(b):\n                return digits[a]\n            # check if odd\n            if check_first(b):\n                return check_second(a)\n            # check if even\n            elif check_second(a):\n                return check_first(b)\n            # not a number\n            else:\n                a += 1\n                b -= 1\n        # swap\n        elif digits[a] < digits[b]:\n            a, b = b, a\n        # swap\n        elif digits[a] > digits[b]:\n            a, b = b, a\n    \n    return None\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Your code here\n    if n < 0:\n        return None\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    # Solution 2\n    # Solution 1\n    # return n // 2\n    \n    # Solution 2\n    if n%2 == 0:\n        return is_num_decagonal(n//2)\n    else:\n        return is_num_decagonal(n//2 - 1) + is_num_decagonal(n//2 + 1)\n    \n    return 0\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    i=1\n    while i<=n: \n        if i%2==1: \n            j=i+1\n            while j<=n: \n                if j%2==1: \n                    print(i) \n                    print(j) \n                j+=1\n        i+=1\n        \ndef main(): \n    '''    \n    Main function to run the program. \n    '''\n    n=int(input()) \n    is_num_decagonal(n)\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Your code here\n    return n % 2 == 0\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0 or n == 1 or n == 2:\n        return n\n    \n    i = 3\n    while i <= n:\n        if n % i == 0:\n            return (n//i)\n        i+=2\n    \n    return -1\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n + 1): \n        if i == (n - 1): \n            return True\n        elif i == 2: \n            return False\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(n+1): \n        for j in range(i+1):\n            if j == i-1: \n                print(f'{i}', end =' ')\n            else:\n                print(f' {i}', end ='')\n        print()\n    print()\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n % 2 == 1\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x,y = 1,1\n    while x <= n:\n        y += 1\n        x *= 2\n    return y\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, num in enumerate(dlist):\n        if num == item:\n            return i == len(dlist) - 1, i\n    return False\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0,len(dlist)-1):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #initilaise\n    for i,element in enumerate(dlist):\n        if element == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #Your code goes here...\n    i=0\n    while (i<len(dlist)):\n        if(dlist[i]==item):\n            return i,i\n        i+=1\n    return False\n        \n        \n        \n        \n    \ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #Your code goes here...\n    i=0\n    while (i<len(dlist)):\n        if (dlist[i]==item):\n            return i,i\n        i+=1\n    return False\n        \n        \n        \n        \n        \n        \ndef binary_search_recursive(dlist, item, index):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #Your code goes here...\n    i=0\n    while (i<len(dlist)):\n        if(dlist[i]==item):\n            return i,i\n        if(dlist[i]>item and index<len(dlist)):\n            i=index\n            index=i+1\n        i+=1\n    return False\n        \n        \n        \n        \n        \n        \n        \ndef linear_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #Your code goes here...\n    i=0\n    while (i<len(dlist)):\n        if(dlist[i]==item):\n            return i,i\n        i+=1\n    return False\n        \n        \n        \n        \n        \n        \n        \ndef linear_search_recursive(dlist, item, index):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #Your code goes here...\n    i=0\n    while (i<len(dlist)):\n        if(dlist[i]==item):\n            return i,i\n        if(dlist[i]>item and index<len(dlist)):\n            i=index\n            index=i+1\n        i+=1\n    return False\n        \n        \n        \n        \n        \n        \n        \ndef remove_duplicates(dlist):\n    '''\n    Write a function that takes in an array and returns an array with only the unique values.\n    '''\n    #Your code goes here...\n    i=0\n    dlist.sort()\n    while (i<len(dlist)):\n        if(dlist[i]==dlist[i+1]):\n            i+=2\n            continue\n        dlist.pop(i)\n    return dlist\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \ndef insert_at_beginning(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #Your code goes here...\n    i=0\n    while (i<len(dlist)):\n        if(dlist[i]==item):\n            dlist.insert(i,item)\n            return True\n        i+=1\n    return False\n        \n        \n        \n        \n        \n        \ndef insert_at_end(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #Your code goes here...\n    i=0\n    while (i<len(dlist)):\n        if(dlist[i]==item):\n            i+=1\n            dlist.insert(len(dlist),item)\n            return True\n        i+=1\n    return False\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \ndef insert_at_position(dlist, item, pos):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #Your code goes here...\n    i=0\n    while (i<len(dlist)):\n        if(dlist[i]==item):\n            dlist.insert(i,pos)\n            return True\n        i+=1\n    return False\n        \n        \n        \n        \n        \n        \n        \n        \ndef remove_duplicates_from_list(dlist):\n    '''\n    Write a function that takes in an array and returns an array with only the unique values.\n    '''\n    #Your code goes here...\n    i=0\n    dlist.sort()\n    while (i<len(dlist)):\n        if(dlist[i]==dlist[i+1]):\n            dlist.pop(i)\n            i=0\n            continue\n        dlist.pop(i)\n        i+=1\n    return dlist\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (-1, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list) == len(set(unique_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    count = 0\n    for element in test_list:\n        if element == element:\n            count += 1\n    return count == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == 0:\n        return True\n    else:\n        seen_list = []\n        for i in test_list:\n            if i in seen_list:\n                return False\n            else:\n                seen_list.append(i)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(set(test_list))\n    return test_list\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        print(\"Yes, all elements are unique.\")\n    else:\n        print(\"No, all elements are unique.\")\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # if all elements of the list are unique, return true\n    if len(test_list) == len(set(test_list)):\n        return True\n    # if all elements are the same, return false\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    all_unique = []\n    test_list = test_list.copy()\n    test_list.sort()\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if test_list.count(test_list[0])!= len(test_list):\n        return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    my_list = []\n    for item in test_list:\n        if item not in my_list:\n            my_list.append(item)\n    return len(my_list) == len(set(my_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = {}\n    for i in test_list:\n        if i in unique_elements:\n            return False\n        else:\n            unique_elements[i] = 1\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    newlist = []\n    for num in nums1:\n        if num in nums2:\n            newlist.append(num)\n    return newlist\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # E.g. nums1 = [1, 3, 4, -4], nums2 = [1, -4, 3, 0]\n    # Output should be [1, 2, 3, 4]\n    sub_lst = []\n    for i in range(len(nums1)):\n        if nums1[i] < nums2[i]:\n            sub_lst.append(nums1[i])\n        elif nums1[i] > nums2[i]:\n            sub_lst.append(nums2[i])\n        else:\n            sub_lst.append(nums1[i])\n    return sub_lst\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for x,y in zip(nums1,nums2):\n        result.append(x - y)\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Method 1: Brute Force\n    # O(n^2) time complexity, O(n) space\n    \n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    \n    sub_list = []\n    for num in nums1:\n        if num in nums2:\n            sub_list.append(num)\n        \n    return sub_list\n    \ndef check_sub_list(nums1,nums2):\n    '''\n    Write a function to check if two lists are subsets of each other.\n    '''\n    # Method 1: Brute Force\n    # O(n^2) time complexity, O(n) space\n    \n    # Time complexity: O(n)\n    # Space complexity: O(1)\n    \n    # brute force\n    for num in nums1:\n        if num in nums2:\n            return False\n    return True\n    \ndef subsets(nums):\n    '''\n    Write a function to find all subsets of a set.\n    '''\n    # Method 1: Recursion\n    # O(n^2) time complexity, O(n) space\n    \n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # recursion\n    sub_list = sub_list(nums,nums)\n    sub_list.sort()\n    return sub_list\n    \ndef subsets_algo(nums):\n    '''\n    Recursive helper for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef sub_list_set(nums):\n    '''\n    Write a function to find a subset of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subset_algo(nums):\n    '''\n    Recursive helper for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subsets_helper(nums,start=0,end=None):\n    '''\n    Helper function for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    if end is None:\n        end = len(nums)\n    sub_list = sub_list(nums,nums,start,end)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subsets_algo_helper(nums):\n    '''\n    Helper function for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums,0,len(nums)-1)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subsets_helper2(nums,start=0,end=None):\n    '''\n    Helper function for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    if end is None:\n        end = len(nums)\n    sub_list = sub_list(nums,nums,start,end)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subsets_algo2(nums):\n    '''\n    Recursive helper for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums,0,len(nums)-1)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subsets_helper3(nums):\n    '''\n    Helper function for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums,0,len(nums)-1)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subsets_algo3(nums):\n    '''\n    Recursive helper for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums,0,len(nums)-1)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subsets_helper4(nums):\n    '''\n    Helper function for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums,0,len(nums)-1)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subsets_algo4(nums):\n    '''\n    Recursive helper for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums,0,len(nums)-1)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subsets_helper5(nums):\n    '''\n    Helper function for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums,0,len(nums)-1)\n    return [i + [i[-1]] for i in sub_list]\n    \ndef subsets_algo5(nums):\n    '''\n    Recursive helper for finding all subsets of a set.\n    '''\n    # Method 1: Subset Sum (runtime O(n^2))\n    # Time complexity: O(n^2)\n    # Space complexity: O(n^2)\n    \n    # Subset sum\n    sub_list = sub_list(nums,nums,0,len(nums)-1)\n    return [i + [i[-1]] for i in sub_lis"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return None\n    \n    # Initialize a empty list\n    ans = []\n    for i in range(len(nums1)):\n        ans.append(nums1[i] - nums2[i])\n    return ans\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums2)):\n        nums2[i] = nums2[i] - nums1[i]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y:x-y,nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1.sort()\n    nums2.sort()\n    for i in range(len(nums2)-1):\n        if nums1[i] == nums2[i]:\n            continue\n        return nums1[i] - nums2[i]\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if nums2==None or nums1==None:\n        return []\n    sub_nums=[]\n    num1=nums1[0]\n    num2=nums2[0]\n    for item in nums1:\n        if num1==item:\n            sub_nums.append(num2)\n            num1=num2\n        else:\n            num1=item\n            num2=item\n    for item in nums2:\n        if num2==item:\n            sub_nums.append(num1)\n            num2=num1\n        else:\n            num2=item\n            num1=item\n    return sub_nums\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums1 if num not in nums2]\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in range(n):\n        if(n%(n%10) == 0):\n            count = count + 1\n    if count == 0:\n        return \"There is a prime number!\"\n    else:\n        return \"There is no prime number\"\n    \nprint(validate(int(input(\"Enter a number:\")))"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count=0\n    for i in range(0,n):\n        count=count+1\n    for j in range(0,count):\n        if(i%2!=0):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = 0\n    count = 0\n    for i in n:\n        num += int(i)**count\n        count+=1\n    if(num == int(n)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in range(10):\n        freq[i] = 0\n    \n    for i in range(n):\n        freq[int(str(i)[0])] += 1\n    \n    for i in range(10):\n        if(freq[i]!= 0):\n            if(freq[i] < n):\n                return False\n            else:\n                return True\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def digits(n):\n        return sum(map(int, str(n)))\n    if n == 0:\n        return True\n    if digits(n) > digits(n - 1):\n        return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not isinstance(n, int):\n        raise TypeError(\"{0} must be an integer\".format(n))\n    if n < 0:\n        raise ValueError(\"{0} must be greater than 0\".format(n))\n    elif n == 0:\n        raise ValueError(\"{0} must be greater than 0\".format(n))\n    if n % 2 == 0:\n        raise ValueError(\"{0} must be odd\".format(n))\n    else:\n        return n\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return (len(set(str(n)))) < len(str(n))\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    if n >= 0: \n        sum = 0 \n        for i in str(n): \n            sum += int(i) \n        if sum <= 10: \n            return True\n        else: \n            return False\n    else: \n        return \"Invalid Input\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n>0:\n        f = [i for i in range(10)]\n        k = 0\n        \n        for i in range(10):\n            if f[i]<n:\n                k = i\n                break\n        \n        if k==0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if(element in list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    error = 'INVALID ELEMENT'\n    for element in list:\n        if element!= element:\n            print(error)\n            break\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list.count(element)==len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    elif list[0]!=element:\n        return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # find the index of the element\n    index = list.index(element)\n    # check if list is a list\n    if isinstance(list,list):\n        if isinstance(index,int) and 0 < index < len(list):\n            return True\n        else:\n            print(\"There are no elements of type \"+str(type(index))+\" in \"+str(list))\n    else:\n        print(\"There are no elements of type \"+str(type(index))+\" in \"+str(list))\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    #your code goes here\n    if(element not in list):\n        return False\n    \n    for i in range(len(list)):\n        if(list[i]!=element):\n            return False\n    \n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    two_thre = ['a','b']\n    if not(re.search('\\w*a\\w*',text)):\n        return False\n    for w in text:\n        if not(re.search('\\w*b\\w*',w) or re.search('\\w*a\\w*',w)):\n            return False\n    if not(re.search('\\w*b',text)):\n        for w in text:\n            if w not in two_thre:\n                return False\n    if not(re.search('\\w*a',text)):\n        return False\n    if not(re.search('\\w*',text)):\n        return False\n    return True\ndef text_match_two_three_and_fucntion(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by a 'f' character.\n    '''\n    two_thre = ['a','b','f']\n    for w in text:\n        if not(re.search('\\w*b\\w*',w) or re.search('\\w*a\\w*',w) or re.search('\\w*f\\w*',w)):\n            return False\n    if not(re.search('\\w*b',text)):\n        for w in text:\n            if w not in two_thre:\n                return False\n    if not(re.search('\\w*a',text)):\n        return False\n    if not(re.search('\\w*f',text)):\n        return False\n    return True\ndef text_match_two_three_and_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters.\n    '''\n    two_thre = ['a','b','f']\n    for w in text:\n        if not(re.search('\\w*b\\w*',w) or re.search('\\w*a\\w*',w) or re.search('\\w*f\\w*',w) or re.search('\\w*b\\w*',w) or re.search('\\w*a\\w*',w) or re.search('\\w*f\\w*',w)):\n            return False\n    if not(re.search('\\w*b',text)):\n        for w in text:\n            if w not in two_thre:\n                return False\n    if not(re.search('\\w*a',text)):\n        return False\n    if not(re.search('\\w*f',text)):\n        return False\n    return True\ndef text_match_two_three_and_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters.\n    '''\n    two_thre = ['a','b','f']\n    for w in text:\n        if not(re.search('\\w*b\\w*',w) or re.search('\\w*a\\w*',w) or re.search('\\w*f\\w*',w) or re.search('\\w*b\\w*',w) or re.search('\\w*a\\w*',w) or re.search('\\w*f\\w*',w)):\n            return False\n    if not(re.search('\\w*b',text)):\n        for w in text:\n            if w not in two_thre:\n                return False\n    if not(re.search('\\w*a',text)):\n        return False\n    if not(re.search('\\w*f',text)):\n        return False\n    if not(re.search('\\w*b',text)):\n        return False\n    return True\ndef text_match_two_three_and_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or three 'b' characters followed by a 'f' character followed by two or thre"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    r = re.compile(r'\\w*a+\\w*b+')\n    res = r.search(text)\n    if res:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    res = re.search(\"a*b\", text)\n    if res is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    r = re.match(r'[a-b]', text)\n    if r:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return (re.search(r'[aA]bBb',text))\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match(r\"a[bc]\", text):\n        return True\n    elif re.match(r\"a[bc]b[cd]\", text):\n        return True\n    else:\n        return False\n        \n        \nprint(text_match_two_three('t'))\nprint(text_match_two_three('tabb'))\nprint(text_match_two_three('aaa'))\nprint(text_match_two_three('aab'))\nprint(text_match_two_three('aab'))\nprint(text_match_two_three('baa'))\nprint(text_match_two_three('aab'))\nprint(text_match_two_three('abc'))\nprint(text_match_two_three('abc'))\nprint(text_match_two_three('b'))\nprint(text_match_two_three('b'))\nprint(text_match_two_three('b'))\nprint(text_match_two_three('b'))\nprint(text_match_two_three('b'))\nprint(text_match_two_three('b'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_match_two_three('a'))\nprint(text_matc"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_clean = re.sub(r'\\s+','', text)\n    text_clean = re.sub(r'[^A-Za-z0-9 ]', '', text_clean)\n    pattern = r'[aA]+'\n    for i in range(len(text_clean)):\n        if text_clean[i] in pattern:\n            return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # this method is used to check whether the string contains the 'a' character followed by two or three 'b' characters\n    a_b_list = [s.strip() for s in text.split() if s.startswith('a') and len(s) > 2 and s[1] in 'ab']\n    if a_b_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count('a') == 1 and text.count('b') == 2:\n        return True\n    elif text.count('b') == 1 and text.count('a') == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    for line in text:\n        if line.startswith('a'):\n            if len(line) == 2:\n                return True\n        if line.startswith('a'):\n            if len(line) == 3:\n                return True\n    return False\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    d = {0:1}\n    for i in range(1, n + 1):\n        d[i] = d[i-1] + a[i-1]\n    result = d[k]\n    for i in range(k+1, n+1):\n        result = max(result, d[i])\n    return result\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if a == []: return 0\n    l, r = 0, len(a) - 1\n    m = (r + l) // 2\n    # print(m)\n    l, r = 0, len(a) - 1\n    while m > 0:\n        # print(l,r)\n        if l == r: return max(a[m], a[l])\n        if l + 1 < r:\n            sum = a[l] + a[m]\n            if sum == k: return sum\n            elif sum > k:\n                l = m\n                m = (r + l) // 2\n            elif sum < k:\n                r = m\n                m = (r + l) // 2\n        elif r - l == 1:\n            if a[m] < a[l]:\n                m = m - 1\n            else:\n                l = l + 1\n                m = m + 1\n        else:\n            if a[m] > a[l]:\n                m = m + 1\n            else:\n                l = l - 1\n        # print(l,r)\n    return -1\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    res = 0\n    for i in range(n):\n        res += a[i]\n        if res >= k:\n            res -= k\n            max_sum = max(max_sum, res)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = len(a)\n    if l==0:\n        return 0\n    if k==0:\n        return a[0]\n    \n    #lazy approach\n    k = k-1\n    if l%k==0:\n        return a[l//k]\n    else:\n        return a[l//k]+max_sub_array_sum_repeated(a, n, k)\n        \ndef max_sub_array_sum_repeated2(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = len(a)\n    if l==0:\n        return 0\n    if k==0:\n        return a[0]\n    \n    #lazy approach\n    k = k-1\n    if l%k==0:\n        return a[l//k]\n    else:\n        return a[l//k]+max_sub_array_sum_repeated2(a, n, k)\n        \n    \ndef max_sub_array_sum_repeated3(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = len(a)\n    if l==0:\n        return 0\n    if k==0:\n        return a[0]\n    \n    #lazy approach\n    k = k-1\n    if l%k==0:\n        return a[l//k]\n    else:\n        return a[l//k]+max_sub_array_sum_repeated3(a, n, k)\n        \n        \ndef max_sub_array_sum_repeated4(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = len(a)\n    if l==0:\n        return 0\n    if k==0:\n        return a[0]\n    \n    #lazy approach\n    k = k-1\n    if l%k==0:\n        return a[l//k]\n    else:\n        return a[l//k]+max_sub_array_sum_repeated4(a, n, k)\n        \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # define an array of current sums \n    sums = [0] * n \n    for i in range(k): \n        sums[i] = sums[i] + a[i] \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    memo = [[0] * n for _ in range(k+1)]\n    maxSum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Pre-allocate max sub array sum,\n    max_sub_sum = 0\n    # Do a loop to find the max sum\n    for i in range(n):\n        max_sub_sum += a[i]\n    # Do a loop to find the max sub sum\n    for i in range(k):\n        for j in range(n):\n            # If the sum is greater than max sub sum\n            if (max_sub_sum + a[j]) < a[j]:\n                max_sub_sum = max_sub_sum + a[j]\n    return max_sub_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sub_array = []\n    for i in range(n):\n        sub_array.append(a[i])\n    max_sum = -1\n    for j in range(k):\n        for i in range(k):\n            sum = sub_array[i] + sub_array[j]\n            if sum > max_sum:\n                max_sum = sum\n            sub_array[i] = 0\n            sub_array[j] = 0\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = 0\n    for i in range(n): \n        sum = 0\n        for j in range(k): \n            sum += a[i] \n        if ans < sum:\n            ans = sum \n    return ans \n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # largest sum of a contiguous array in modified array \n    # sum = 0\n    # for i in range(n-1):\n    #     sum += a[i]\n    #     for j in range(k):\n    #         sum += a[i + j]\n    #         if sum > n:\n    #             break\n    #     if sum > n:\n    #         return sum\n    #     if i + j + a[i + j] < n:\n    #         return max_sub_array_sum_repeated(a, i + j + 1, k)\n    # return n\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2==0:\n            s+=i\n    return s\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    print(\"square sum of number is \", end=\"\")\n    print(sum(range(1, n+1)))\n    return sum(range(1, n+1))\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i\n        else:\n            pass\n    print(sum)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n<0:\n        print('N must be greater than or equal to 0')\n    else:\n        sum=0\n        for i in range(1, n+1):\n            sum+=i**2\n        return sum\ndef cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of cubes of first n natural numbers.\n    '''\n    if n<0:\n        print('N must be greater than or equal to 0')\n    else:\n        sum=0\n        for i in range(1, n+1):\n            sum+=i**3\n        return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    a=0\n    for i in range(n):\n        a+=i**2\n    return a\nn=int(input(\"Enter the number\"))\nprint(square_Sum(n))"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for num in range(1, n+1, 2):\n        sum += num\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    pass\n    return sum(i**2 for i in range(1, n+1) if i % 2 == 0)\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1, 2):\n        sum = sum + i ** 2\n    return sum\n    \n    "
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum += i ** 2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if len(list1[i][j]) > max_length:\n                max_length = len(list1[i][j])\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    my_list = []\n    for item in list1:\n        my_list.append(item[0])\n    print(my_list)\n    return max(my_list)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    maxLength = 0\n    \n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if maxLength < len(list1[i][j]):\n                maxLength = len(list1[i][j])\n    return maxLength\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for lst in list1:\n        for i in lst:\n            if i > max_length:\n                max_length = i\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    for sublist in list1:\n        max_length = 0\n        for element in sublist:\n            if len(element) > max_length:\n                max_length = len(element)\n        list1.remove(sublist)\n        list1.insert(0, ['']*max_length)\n    return list1\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if max_len < len(list1[i][j]):\n                max_len = len(list1[i][j])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maximum = 0\n    for i in list1:\n        if len(i) > maximum:\n            maximum = len(i)\n    return maximum\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Get the length of the list\n    list_len = len(list1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    return int(k*(n//k+1)) if n%k==0 else 0\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    pass\n    \n    \n    pass\n    \n    \n    \n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(n<2):\n        return n\n    elif(n == 2):\n        return 1\n    else:\n        return count_no_of_ways(n-2,k)*count_no_of_ways(n-1,k)+k\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n<=0 or k<=0:\n        return 0\n    if n==1:\n        return 1\n    else:\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Define variables\n    ways = [[[0 for k in range(k+1)] for j in range(n+1)] for i in range(n+1)]\n    # Run the fibonacci algorithm\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == 0:\n                ways[i][j][0] = 1\n            elif j == 1:\n                ways[i][j][1] = 1\n            else:\n                ways[i][j][1] = ways[i][j-1][0] + ways[i-1][j][1]\n                ways[i][j][0] = ways[i-1][j][0] + ways[i-1][j-1][1]\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    import collections\n    \n    def count_ways(f):\n        visited = collections.defaultdict(bool)\n        queue = collections.deque([(f,0)])\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 2 or n <= 2:\n        return n * k\n    if n == 0:\n        return 0\n    if k == 0:\n        return n\n    \n    count = 0\n    for i in range(1, k+1):\n        count += count_no_of_ways(n - 1, i)\n    \n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_no_of_ways_rec(n, k, i, l): \n        '''\n        Recursive function to find the number of ways of painting the fence.\n        '''\n        # base cases\n        if i == n:\n            return 1\n        if l == k: \n            return count_no_of_ways_rec(n, k, 0, 0)\n        if l == 0:\n            return 0\n        if i >= n:\n            return 0\n        if i < n and k > 0:\n            return count_no_of_ways_rec(n, k - 1, i + 1, l + 1) + \\\n                count_no_of_ways_rec(n, k - 1, i + 1, l)\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n > 2: \n        #print(\"in the function for counting the number of ways\")\n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n    else: \n        return 1\n    \ndef all_papers_in_white_or_black(n, k): \n    '''\n    Write a function to count the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n > 2: \n        #print(\"in the function for counting the number of ways\")\n        return all_papers_in_white_or_black(n-1, k) * all_papers_in_white_or_black(n-2, k)\n    else: \n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def k_ways(n, k):\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n        if n < k:\n            return 0\n        \n        if colors[n]!= colors[k]:\n            return 0\n        \n        return (k_ways(n-1, k) + k_ways(n-2, k) + k_ways(n-3, k)) % 1000000007\n    \n    colors = [\"R\", \"G\", \"B\"]\n    return k_ways(n, k) % 100000000"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n<m):\n        return (n//m)\n    else:\n        return (m//n)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    '''\n    Quotient should be rounded down to the nearest integer, but you don't need to use integer division so you can just use floor division, even if you would be a little bit more precise.\n    '''\n    if n<m:\n        m = floor(m)\n    # print(f\"m is {m}, n is {n}\")\n    # print(f\"m {m}\")\n    # print(f\"n {n}\")\n    m = m - 1\n    # print(f\"m {m}\")\n    # print(f\"n {n}\")\n    return floor((n+m)/2)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m or n==0 or m==0:\n        return False\n    else:\n        n=n%10\n        m=m%10\n        if n>m:\n            n=n%10+1\n        else:\n            m=m%10+1\n        if n==m:\n            return True\n        else:\n            return False\n    \n    \n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n > m:\n        return -1\n    \n    # While there are elements to divide\n    while n % m!= 0:\n        m = m + 1\n    return m\n    \n    \ndef main():\n    '''\n    The following program implements a divide-and-conquer algorithm which finds the quotient of two numbers.\n    '''\n    \n    print(\"Given two integers, the program finds the quotient of two numbers, which is the value of the smallest integer x such that (x / m) mod n where n is the number of digits after the decimal point (rounded down to the nearest integer).\")\n    \n    print(\"For example, if the user enters 3 and the program finds the quotient of 3 and 6, the program will print out 3 and 6, because 3 / 6 is 5.  If the user enters 6 and the program finds the quotient of 6 and 9, the program will print out 6 and 9, because 6 / 9 is 2.  If the user enters 2 and the program finds the quotient of 2 and 3, the program will print out 2 and 3, because 2 / 3 is 1.  If the user enters 3 and the program finds the quotient of 3 and 8, the program will print out 3 and 8, because 3 / 8 is 7.  If the user enters 8 and the program finds the quotient of 8 and 12, the program will print out 8 and 12, because 8 / 12 is 3.  If the user enters 2 and the program finds the quotient of 1 and 2, the program will print out 1 and 2, because 1 / 2 is 1.  If the user enters 2 and the program finds the quotient of 1 and 5, the program will print out 1 and 5, because 1 / 5 is 1.')\n    \n    n = int(input(\"Enter a number: \"))\n    m = int(input(\"Enter a number: \"))\n    x = find(n,m)\n    \n    if x!= -1:\n        print(\"The value of the smallest integer x such that (x / m) mod n where m is the number of digits after the decimal point is:\", end = '')\n        for i in range(x):\n            print(end = ', ')\n        print(\".\")\n    else:\n        print(\"The given number,\", end = '')\n        for i in range(abs(n)):\n            print(\".\", end = ', ')\n        print(\"is not a valid number.\")\n    \n    \n    print(\"The program is ready to begin.\".center(60))\n    print(\"\\n\")\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(m==0):\n        return n\n    if(m==1):\n        return 1\n    if(n==0):\n        return 0\n    if(n%m==0):\n        return n//m\n    else:\n        return m*(find(n//m,m))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        if m==0:\n            return 0\n        else:\n            return -1\n    if n==0:\n        if m==0:\n            return -1\n        else:\n            return 1\n    if n==0:\n        if m==0:\n            return 0\n        else:\n            return 1\n    else:\n        if m==0:\n            return 0\n        else:\n            return n%m\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == m:\n        return n\n    elif n < m:\n        return find(n,m-1)\n    elif n > m:\n        return find(n-1,m)\n    \ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    x = n\n    while x>=m:\n        x-=m\n        y=x\n        while y>=n:\n            y-=n\n            z=y\n            while z>=m:\n                z-=m\n                q=z\n                while q>=n:\n                    q-=n\n                    p=q\n                    while p>=n:\n                        p-=n\n                        q=p\n                        y=x\n                        while y>=n:\n                            y-=n\n                            z=x\n                            while z>=m:\n                                z-=m\n                                q=z\n                                y=x\n                                while y>=n:\n                                    y-=n\n                                    p=z\n                                    z=x\n                                break\n                            break\n                        break\n                    break\n                break\n    return q\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n==0 and m==0):\n        return 0\n    if(n==0 or m==0):\n        return -1\n    if(n==m):\n        return n\n    if(m==1):\n        return -1\n    if(m==2):\n        return n\n    if(m==3):\n        return (n*(n+1))/2\n    if(m==4):\n        return n*(3*n+2)\n    if(m==5):\n        return n*(3*n+1)\n    if(m==6):\n        return n*(3*n+2)\n    if(m==7):\n        return n*(3*n+3)\n    if(m==8):\n        return n*(3*n+4)\n    if(m==9):\n        return n*(3*n+5)\n    if(m==10):\n        return n*(3*n+6)\n    if(m==11):\n        return n*(3*n+7)\n    if(m==12):\n        return n*(3*n+8)\n    if(m==13):\n        return n*(3*n+9)\n    if(m==14):\n        return n*(3*n+10)\n    if(m==15):\n        return n*(3*n+11)\n    if(m==16):\n        return n*(3*n+12)\n    if(m==17):\n        return n*(3*n+13)\n    if(m==18):\n        return n*(3*n+14)\n    if(m==19):\n        return n*(3*n+15)\n    if(m==20):\n        return n*(3*n+16)\n    if(m==21):\n        return n*(3*n+17)\n    if(m==22):\n        return n*(3*n+18)\n    if(m==23):\n        return n*(3*n+19)\n    if(m==24):\n        return n*(3*n+20)\n    if(m==25):\n        return n*(3*n+21)\n    if(m==26):\n        return n*(3*n+22)\n    if(m==27):\n        return n*(3*n+23)\n    if(m==28):\n        return n*(3*n+24)\n    if(m==29):\n        return n*(3*n+25)\n    if(m==30):\n        return n*(3*n+26)\n    if(m==31):\n        return n*(3*n+27)\n    if(m==32):\n        return n*(3*n+28)\n    if(m==33):\n        return n*(3*n+29)\n    if(m==34):\n        return n*(3*n+30)\n    if(m==35):\n        return n*(3*n+31)\n    if(m==36):\n        return n*(3*n+32)\n    if(m==37):\n        return n*(3*n+33)\n    if(m==38):\n        return n*(3*n+34)\n    if(m==39):\n        return n*(3*n+35)\n    if(m==40):\n        return n*(3*n+36)\n    if(m==41):\n        return n*(3*n+37)\n    if(m==42):\n        return n*(3*n+38)\n    if(m==43):\n        return n*(3*n+39)\n    if(m==44):\n        return n*(3*n+40)\n    if(m==45):\n        return n*(3*n+41)\n    if(m==46):\n        return n*(3*n+42)\n    if(m==47):\n        return n*(3*n+43)\n    if(m==48):\n        return n*(3*n+44)\n    if(m==49):\n        return n*(3*n+45)\n    if(m==50):\n        return n*(3*n+46)\n    if(m==51):\n        return n*(3*n+47)\n    if(m==52):\n        return n*(3*n+48)\n    if(m==53):\n        return n*(3*n+49)\n    if(m==54):\n        return n*(3*n+50)\n    if(m==55):\n        return n*(3*n+51)\n    if(m==56):\n        return n*(3*n+52)\n    if(m==57):\n        return n*(3*n+53)\n    if(m==58):\n        return n*(3*n+54)\n    if(m==59):\n        return n*(3*n+55)\n    if(m==60):\n        return n*(3*n+56)\n    if(m==61):\n        return n*(3*n+57)\n    if(m==62):\n        return n*(3*n+58)\n    if(m==63):\n        return n*(3*n+59)\n    if(m==64):\n        return n*(3*n+60)\n    if(m==65):\n        return n*(3*n+61)\n    if(m==66):\n        return n*(3*n+62)\n    if(m==67):\n        return n*(3*n+63)\n    if(m==68):\n        return n*(3*n+64)\n    if(m==69):\n        return n*(3*n+65)\n    if(m==70):\n        return n*(3*n+66)\n    if(m==71):\n        return n*(3*n+67)\n    if(m==72):\n        return n*(3*n+68)\n    if(m==73):\n        return n*(3*n+69)\n    if(m==74):\n        return n*(3*n+70)\n    if(m==75):\n        return n*(3*n+71)\n    if(m==76):\n        return n*(3*n+72)\n    if(m==77):\n        return n*(3*n+73)\n    if(m==78):\n        return n*(3*n+74)\n    if(m==79):\n        return n*(3*n+75)\n    if(m==80):\n        return n*(3*n+76)\n    if(m==81):\n        return n*(3*n+77)\n    if(m==82):\n        return n*(3*n+78)\n    if(m==83):\n        return n*(3*n+79)\n    if(m==84):\n        return n*(3*n+80)\n    if(m==85):\n        return n*(3*n+81)\n    if(m==86):\n        return n*(3*n+82)\n    if(m==87):\n        return n*(3*n+83)\n    if(m==88):\n        return n*(3*n+84)\n    if(m==89):\n        return n*(3*n+85)\n    if(m==90):\n        return n*(3*n+86)\n    if(m==91):\n        return n*(3*n+87)\n    if(m==92):\n        return n*(3*n+88)\n    if(m==93):\n        return n*(3*n+89)\n    if(m==94):\n        return n*(3*n+90)\n    if(m==95):\n        return n*(3*n+91)\n    if(m==96):\n        return n*(3*n+92)\n    if(m==97):\n        return n*(3*n+93)\n    if(m==98):\n        return n*(3*n+94)\n    if(m==99):\n        return n*(3*n+95"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # 1. Recursion\n    if n<m: return 0\n    # 2. Recursion\n    if n==m: return n\n    # 3. Recursion\n    if n%2==0: return (find(n//2,m)+n)//2\n    else: return (find(n//2,m)+find(n,m))//2\n    \ndef main():\n    '''\n    Find the quotient of two numbers and display the result.\n    '''\n    #print(find(n,m))\n    n=int(input(\"Enter first number:\"))\n    m=int(input(\"Enter second number:\"))\n    print(\"Result:\",find(n,m))\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==n:\n        return n\n    else:\n        return find(n,m//n)\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    try:\n        c = w/math.sqrt(2)\n        r = h/math.sqrt(3)\n        if r == 0:\n            if (c*r) < (w/2) and (c*r) > (h/2):\n                return c*r\n            elif r == h/2:\n                return c*r\n        else:\n            return c*r\n    except Exception:\n        return \"Invalid side length\"\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    try:\n        c = w/math.sqrt(3)\n        r = h/math.sqrt(2)\n        if r == 0:\n            if (c*r) < (w/2) and (c*r) > (h/2):\n                return c*r\n            elif r == h/2:\n                return c*r\n        else:\n            return c*r\n    except Exception:\n        return \"Invalid side length\"\ndef otherside_up(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    try:\n        c = w/math.sqrt(2)\n        r = h/math.sqrt(3)\n        if r == 0:\n            if (c*r) < (w/2) and (c*r) > (h/2):\n                return c*r\n            elif r == h/2:\n                return c*r\n        else:\n            return c*r\n    except Exception:\n        return \"Invalid side length\"\ndef otherside_down(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    try:\n        c = w/math.sqrt(3)\n        r = h/math.sqrt(2)\n        if r == 0:\n            if (c*r) < (w/2) and (c*r) > (h/2):\n                return c*r\n            elif r == h/2:\n                return c*r\n        else:\n            return c*r\n    except Exception:\n        return \"Invalid side length\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    r=math.sqrt((w**2)+(h**2))\n    if(r>20):\n        print(\"The three sides of the right angle are \"+str(r)+\"\\n\")\n        print(\"The two sides of the triangle are: \"+str(w) + \" and \"+ str(h) +\"\\n\")\n    elif(r>10 and r<20):\n        print(\"The two sides of the triangle are: \"+str(w) + \" and \"+ str(h) +\"\\n\")\n    elif(r>5 and r<10):\n        print(\"The three sides of the triangle are: \"+str(w) + \" and \"+ str(h) +\"\\n\")\n    elif(r==5):\n        print(\"The three sides of the triangle are: \"+str(w) + \" and \"+ str(h) +\"\\n\")\n    else:\n        print(\"The two sides of the triangle are: \"+str(w) + \" and \"+ str(h) +\"\\n\")\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    v = math.sqrt(w*w-h*h)\n    if v < 0.001:\n        return 0\n    elif v < 0.01:\n        return h/2\n    elif v < 0.02:\n        return h/3\n    else:\n        return v\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a=h/2\n    b=w/2\n    c=math.sqrt(a*a+b*b)\n    angle=math.acos(b/c)\n    return angle\ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the third side of a left angled triangle.\n    '''\n    a=h/2\n    b=w/2\n    c=math.sqrt(a*a+b*b)\n    angle=math.acos((-a*a+c*c)/(2*b*b))\n    return angle\ndef distance(a,b):\n    '''\n    Write a function to calculate the Euclidean distance between two points.\n    '''\n    return math.sqrt((a[0]-b[0])**2+(a[1]-b[1])**2)\ndef slope(a,b):\n    '''\n    Write a function to calculate the slope of a line through two points.\n    '''\n    return math.degrees(math.atan2((b[1]-a[1]),(b[0]-a[0])))\ndef start_points(a,b):\n    '''\n    Write a function to calculate the coordinates of the starting point of a line through two points.\n    '''\n    x=a[0]\n    y=a[1]\n    z=b[0]\n    x1=x+b[0]\n    y1=y-b[0]\n    x2=x+b[0]\n    y2=y-b[0]\n    x3=x-b[0]\n    y3=y-b[0]\n    return (x,y,z,x1,y1,x2,y2,x3,y3)\ndef end_points(a,b):\n    '''\n    Write a function to calculate the coordinates of the ending point of a line through two points.\n    '''\n    x=a[0]\n    y=a[1]\n    z=b[0]\n    x1=x-b[0]\n    y1=y-b[0]\n    x2=x-b[0]\n    y2=y-b[0]\n    x3=x+b[0]\n    y3=y-b[0]\n    return (x,y,z,x1,y1,x2,y2,x3,y3)\ndef line_intersection(a,b):\n    '''\n    Write a function to determine if two lines intersect.\n    '''\n    return (distance(a,b),slope(a,b))\ndef line_point(a,b):\n    '''\n    Write a function to determine if two lines point on the same axis.\n    '''\n    return (distance(a,b),slope(a,b))\ndef line_segment(a,b):\n    '''\n    Write a function to determine if two lines are on the same axis.\n    '''\n    return (distance(a,b),slope(a,b))\ndef axis_line_segment(a,b):\n    '''\n    Write a function to determine if two lines are on the same axis.\n    '''\n    return (distance(a,b),slope(a,b))\ndef normal(a,b):\n    '''\n    Write a function to determine the normal of a line through two points.\n    '''\n    c=distance(a,b)\n    return math.atan2(b[1]-a[1],b[0]-a[0])\ndef normal_segment(a,b):\n    '''\n    Write a function to determine if two lines are on the same axis.\n    '''\n    c=distance(a,b)\n    return math.atan2(b[1]-a[1],b[0]-a[0])\ndef point_line_intersection(a,b):\n    '''\n    Write a function to determine if two points point on the same axis.\n    '''\n    return line_intersection(a,b)\ndef point_line_segment(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return line_segment(a,b)\ndef point_line_point(a,b):\n    '''\n    Write a function to determine if two points point on the same axis.\n    '''\n    return line_point(a,b)\ndef point_line_collision(a,b):\n    '''\n    Write a function to determine if two points point on the same axis.\n    '''\n    return point_line_intersection(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_segment(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_point(a,b)\ndef point_line_line_point_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_line_segment(a,b)\ndef point_line_line_point_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_point(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_segment(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_point(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_segment(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_point(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_segment(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_point(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_segment(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_point(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_segment(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_point(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_segment(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_point(a,b)\ndef point_line_line_collision(a,b):\n    '''\n    Write a function to determine if two points are on the same axis.\n    '''\n    return point_line_s"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # get width and height\n    w = float(w)\n    h = float(h)\n    # calculate area\n    area = math.sqrt(w*h/2)\n    # find the angle\n    angle = math.degrees(math.atan(h/w))\n    # find the distance\n    distance = area/4\n    # make the angle the same as the angle\n    angle = math.degrees(angle)\n    # return\n    return angle, distance\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    def hypotenuse(x,y,z):\n        '''\n        Returns the hypotenuse of a triangle given the lengths of the sides of the triangles.\n        '''\n        return math.sqrt((x*x)+(y*y))\n    def trig_right_angle(w,h):\n        '''\n        Returns the trig right angle of the triangle.\n        '''\n        if hypotenuse(w,h,w)**2 + hypotenuse(w,h,h)**2 > (w**2 + h**2):\n            return math.atan2(h,w)\n        else:\n            return math.atan2(h,w)\n    def get_side(w,h,w2,h2):\n        '''\n        Returns the side of a triangle given the lengths of the sides of the triangles.\n        '''\n        return (w**2 + h**2 - hypotenuse(w,h,w)**2 - hypotenuse(w2,h2,w))/2\n    side1 = get_side(w,h,w,h)\n    side2 = get_side(w,h,w2,h2)\n    if hypotenuse(w,h,w2)**2 + hypotenuse(w,h,h2)**2 > (w**2 + h**2):\n        side3 = get_side(w,h,w,h2)\n    else:\n        side3 = get_side(w,h,w2,h2)\n    return (side1+side2+side3)/2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        return -math.pi/2\n    elif w < h:\n        return -2*math.pi/3\n    elif w > h:\n        return math.pi/3\n    \ndef otherside_leftangle(w,h):\n    '''\n    Write a function to find the fourth side of a left angled triangle.\n    '''\n    if w == h:\n        return math.pi/2\n    elif w < h:\n        return -2*math.pi/3\n    elif w > h:\n        return -math.pi/3\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        return \"right\"\n    elif w < h:\n        return \"right\"\n    else:\n        return \"right\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # x = math.sqrt(w**2 + h**2)\n    # y = w/math.sqrt(w**2 + h**2)\n    # z = h/w\n    # return x, y, z\n    return 3*w/4, 2*w/4, h/4\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return h/2\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \ndef is_perfect(num):\n    '''\n    Write a function to check if a given number is perfect or not.\n    '''\n    return num%2 == 0\n    \ndef perfect_nums(listval):\n    '''\n    Write a function to return the list of perfect numbers\n    '''\n    return [num for num in listval if is_perfect(num)]\n    \ndef prime_nums(listval):\n    '''\n    Write a function to return the list of prime numbers\n    '''\n    return [num for num in listval if num%2 == 0 and is_prime(num)]\n    \ndef prime_nums2(listval):\n    '''\n    Write a function to return the list of prime numbers\n    '''\n    return [num for num in listval if num%2 == 0 and is_prime(num)]\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    if len(listval) == 0:\n        return 0\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # assume user has entered a list of lists\n    max = None\n    for i in range(len(listval)):\n        # for each element in listval, calculate maximum\n        for j in range(len(listval[i])):\n            if max == None or listval[i][j] > max:\n                max = listval[i][j]\n                index = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxv = 0\n    for item in listval:\n        if item > maxv:\n            maxv = item\n    return maxv\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxv = 0\n    for i in listval:\n        if(i>=maxv):\n            maxv=i\n    return maxv\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Your code here\n    div_sums = []\n    for d in range(1, number + 1):\n        if number % d == 0:\n            div_sums.append(d)\n    \n    return sum(div_sums)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    if number == 0:\n        return 0\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    # Calculate the sum of all divisors of the given number\n    sum_d = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            sum_d += i\n            \n    return sum_d\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return sum([i for i in range(1,number + 1) if number % i == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_lst = []\n    for i in range(1, number + 1):\n        if (number % i == 0):\n            div_lst.append(i)\n    return(sum(div_lst))\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 2:\n        return 0\n    else:\n        divisors = []\n        i = 2\n        while i <= number:\n            if number % i == 0:\n                divisors.append(i)\n                if i!= number/i:\n                    divisors.append(number/i)\n            i += 1\n        return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number < 0:\n        print(\"Sorry, the sum of all divisors of a negative number is 0.\")\n    else:\n        return sum_div(number-1) + number\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Create a set to save the divisors\n    divisors = {1}\n    # Loop through the numbers\n    for num in range(2, number + 1):\n        # Check if the number is divisible by any of the divisors\n        if number % num == 0:\n            # Save the divisors\n            divisors.add(num)\n    # Return the sum\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        left_half = number//2\n        right_half = number - left_half\n        return sum_div(left_half) + sum_div(right_half)\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return (number) - (sum_div(number-1))"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i=0\n    j=len(arr)-1\n    while i < j:\n        if arr[i] < arr[j]:\n            i+=1\n        else:\n            j-=1\n        return i\n    return j\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] < arr[j]:\n                count += 1\n            else:\n                count = 0\n    return count\n    \ndef sort_the_list(arr): \n    ''' \n    Sort the given array in ascending order \n    ''' \n    for i in range(len(arr)): \n        for j in range(i,len(arr)): \n            if arr[i] > arr[j]: \n                arr[i], arr[j] = arr[j], arr[i] \n    return arr \n        \ndef quick_sort(arr, n): \n    ''' \n    Sorts an array in ascending order \n    '''\n    if len(arr) <= 1: \n        return arr \n    else: \n        pivot = arr[-1] \n        l, r = 0, n - 1\n        while l < r: \n            if arr[l] > pivot: \n                arr[r] = arr[l] \n                r -= 1\n            elif arr[r] < pivot: \n                arr[l] = arr[r] \n                l += 1\n            else: \n                arr[l] = arr[r] \n                l += 1\n                r -= 1\n        arr[l], arr[r] = arr[r], arr[l] \n        return quick_sort(arr, l + 1, r - 1) \n  \nif __name__ == '__main__':\n    print(\"Test 1:\")\n    arr = [6, 8, 4, 2, 3, 1, 7, 5, 9, 10, 8, 5, 2, 1, 6]\n    print(\"Input array:\", arr)\n    print(\"Expected output:\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 8, 5, 2, 1, 6])\n    print(\"Expected output:\", get_Inv_Count(arr))\n    print(\"Test 2:\")\n    arr = [3, 2, 4, 6, 5, 9, 8, 1, 7, 10, 11, 12]\n    print(\"Input array:\", arr)\n    print(\"Expected output:\", [1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    print(\"Expected output:\", quick_sort(arr, len(arr)))\n    print(\"Test 3:\")\n    arr = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]\n    print(\"Input array:\", arr)\n    print(\"Expected output:\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, "
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # write your code here\n    # for i in range(0,len(arr)):\n    #     for j in range(0,len(arr)):\n    #         if(arr[i]>arr[j]):\n    #             arr[i],arr[j] = arr[j],arr[i]\n    #         else:\n    #             break\n    #     arr[i] = 0\n    count = 0\n    for i in range(0,len(arr)):\n        if arr[i]==0:\n            continue\n        else:\n            for j in range(0,len(arr)):\n                if arr[j]==0:\n                    count+=1\n                    arr[j] = arr[i]\n                    arr[i] = 0\n    return count\n    # for i in range(0,len(arr)):\n    #     for j in range(0,len(arr)):\n    #         if(arr[i]>arr[j]):\n    #             arr[i],arr[j] = arr[j],arr[i]\n    #         else:\n    #             break\n    #     arr[i] = 0\n    # return arr.count(0)\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)): \n        for j in range(i, len(arr)): \n            if arr[i] > arr[j]: \n                inversions += 1\n    return inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    k = 0\n    l = 0\n    flag = False\n    for i in range(n):\n        if arr[i] > arr[i]:\n            k = k + 1\n        else:\n            flag = True\n            if arr[i] == arr[l]:\n                l = l + 1\n            elif arr[i] > arr[l]:\n                k = k + 1\n                l = l + 1\n    if flag == True:\n        return k\n    else:\n        return n - k\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    no_of_inversions = 0\n    for i in range(len(arr) - 1): \n        for j in range(i + 1, len(arr)): \n            if arr[i] > arr[j]: \n                no_of_inversions += 1\n    return no_of_inversions\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Your code here\n    arr = sorted(arr, reverse=True)\n    count = 0\n    # Last point of the array\n    for i in range(0, len(arr) - 1):\n        # Check the value of i\n        if arr[i] > arr[i + 1]:\n            count += 1\n            # Move it to the end\n        else:\n            # It is not in the middle so remove it\n            break\n    # Check the last point of the array\n    if arr[-1] < arr[-2]:\n        # Move it to the end\n        count += 1\n    else:\n        # It is the last point of the array so remove it\n        count = 0\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] > arr[right]:\n            if arr[left] <= arr[right]:\n                right -= 1\n            else:\n                left += 1\n        elif arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n    return left + right\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(1,len(arr)): \n        if arr[i] > arr[i-1]: \n            inversions += 1\n    return inversions\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) == dict:\n        flat = []\n        for each in list1.values():\n            flat.extend(flatten_list(each))\n        return flat\n    else:\n        return list(map(lambda x: list(map(lambda y: y, x)), list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if type(list1[i][j]) is list:\n                list1[i][j] = flatten_list(list1[i][j])\n            if type(list1[i][j]) is tuple:\n                list1[i][j] = flatten_list(list1[i][j])\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) is not list:\n        return list1\n    if list1[0] is None:\n        return list1[1:]\n    return list1[0] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    output = []\n    for x in list1:\n        if isinstance(x, list):\n            output += flatten_list(x)\n        else:\n            output.append(x)\n    return output\n    \n    \n    "
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [el for sublist in list1 for el in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [value for array in list1 for value in array]\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list_to_flatten = []\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output_list = []\n    if type(list1) is not list:\n        return output_list\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_val = 0\n    max_aggregate_key = None\n    for i in stdata:\n        if i[1] > max_aggregate_val:\n            max_aggregate_val = i[1]\n            max_aggregate_key = i[0]\n    return max_aggregate_key, max_aggregate_val\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = []\n    \n    for i in range(len(stdata)):\n        sum = 0\n        for j in range(len(stdata[i])):\n            sum += stdata[i][j]\n        if sum > max_aggregate[-1]:\n            max_aggregate.append(sum)\n        else:\n            max_aggregate[-1] = sum\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_st = stdata[0]\n    for i in stdata:\n        if i[0] > max_st[0]:\n            max_st = i\n    return max_st\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = 0\n    for x in stdata:\n        result += x[1]\n    return result/len(stdata)\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for key in stdata:\n        curr_agg = 0\n        for value in stdata[key]:\n            curr_agg = value + curr_agg\n        max_aggregate = max(max_aggregate, curr_agg)\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return 0.0\n    data = [i[0] for i in stdata]\n    sum_of_aggregate = 0.0\n    aggregate = 0.0\n    for i in data:\n        aggregate += i\n        sum_of_aggregate += i\n    return aggregate/sum_of_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    m = {}\n    for u in stdata:\n        if not u[0] in m:\n            m[u[0]] = 0\n        m[u[0]] += u[1]\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def aggregate_set(record, records_set):\n        '''\n        Use the current record as the set for aggregation.\n        Return the max aggregate of the records from the set.\n        '''\n        agg_record = records_set.union(record)\n        if len(agg_record) > 1:\n            agg_record.remove(record[-1])\n        return max(agg_record)\n    return max(map(aggregate_set, stdata, set([tuple(s) for s in stdata])))\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for x in range(len(stdata)):\n        y = stdata[x]\n        if y[1] > max_aggregate:\n            max_aggregate = y[1]\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    # initialize the dictionary\n    all_items = {}\n    \n    # populate the dictionary\n    for row in stdata:\n        for key, value in row.items():\n            # if the key exists, add the value\n            if key in all_items.keys():\n                if value > all_items[key]:\n                    all_items[key] = value\n            # otherwise, set the value to 1\n            else:\n                all_items[key] = 1\n    # return the dictionary\n    return all_items\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Base case: If n is 0, then return 1.\n    if n == 0:\n        return 1\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    ans = 0\n    for i in range(1,n):\n        ans += int(bin(i)[2:],2)\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def count_binary(n):\n        n_bits = n//2\n        sum_first = 0\n        sum_last = 0\n        for i in range(1, n_bits+1):\n            if n & (1 << i) == 0:\n                sum_last += i\n            else:\n                sum_first += i\n        return sum_first, sum_last\n    \n    sum_first, sum_last = count_binary_seq(n)\n    \n    if n & (1 << n_bits) == 0:\n        return 0\n    else:\n        return sum_first - sum_last\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count=0\n    for i in range(2**n):\n        if i&1==1:\n            count+=1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # set the initial value of dp\n    dp = [0]*(n+1)\n    # define the initial value of dp[0] as 0\n    dp[0] = 0\n    # define the initial value of dp[n] as 0\n    dp[n] = 0\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    # counter\n    counter = 0\n    # generate sequence \n    # for i in range(n):\n    #     if (i % 2) == 1:\n    #         counter += 1\n    #     if counter == n:\n    #         return 1\n    for i in range(n):\n        if (i % 2) == 1:\n            # counter += 1\n            counter += count_binary_seq(i+1)\n    return counter\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq(n):\n        def _count_binary_seq(index, A):\n            if index == len(A):\n                return 0\n            return A[index] + _count_binary_seq(index+1, A)\n        return _count_binary_seq(0, A)\n    return count_binary_seq(n)"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n<=2:\n        return 1\n    if n==2:\n        return 2\n    count = 0\n    count += count_binary_seq(n-1)\n    for i in range(0,n-1):\n        count += count_binary_seq(n-i-1)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Write your code here\n    count = 0\n    for i in range(n):\n        if (n & 1) == 0:\n            count += 1\n            n = n >> 1\n        else:\n            n = n << 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # The base case\n    if (n < 2):\n        return 1\n    \n    # Using bitwise operators\n    num1 = (n >> 1) & 0xffff\n    num2 = (n >> 2) & 0xffff\n    count = (num1 + num2) & 0xffff\n    # count = num1 + num2\n    # print(count)\n    # print(bin(count))\n    \n    return count\n    \n    \n    \nif __name__ == \"__main__\":\n    \n    n = 20\n    print(count_binary_seq(n))"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d)==0:\n        return 0\n    elif len(d)==1:\n        return 1\n    else:\n        return max(dict_depth(d[1:])+1, dict_depth(d[1:])+1+dict_depth(d[2:])+1)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Write your code here.\n    depth = 0\n    for key, value in d.items():\n        depth += 1 + dict_depth(value)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max(dict_depth(v) for v in d.values()) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def dict_depth(d):\n        if d == {}:\n            return 0\n        depth = 1 + dict_depth(d[list(d.keys())[0]])\n        return depth\n    return dict_depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k in d:\n        if isinstance(d[k], dict):\n            depth = max(depth, dict_depth(d[k]))\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return sum(1 for k in d.keys() if k[:1] == '_')\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    return sum(map(dict_depth,d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 0\n    if type(d) == list:\n        return 1 + max(dict_depth(x) for x in d)\n    return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        if rotations > 1:\n            index -= 1\n            if (index >= ranges.count(arr[index])) :\n                return -1\n        index += 1\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(index,len(ranges)) : \n        if arr[ranges[i][0]] == arr[ranges[i][1]] and arr[ranges[i][1]]!= ranges[i][2] : \n            count += 1\n    if count!= 0 : \n        return arr[index]\n    else : \n        return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[ranges[index][0] : ranges[index][1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges)!= len(rotations) :\n        raise Exception('Range and rotations must be of same length.')\n    elif len(ranges) == 0 :\n        raise Exception('Range must not be empty.')\n    elif index >= len(arr) :\n        raise Exception('index must be less or equal to length of array.')\n    for i in range(len(ranges)) :\n        if ranges[i] <= index :\n            index = index - ranges[i]\n        else :\n            index = index - ranges[i]\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= ranges[0] and index <= ranges[1]:\n        return arr[index]\n    if rotations >= ranges[0] and rotations <= ranges[1]:\n        return arr[rotations + index]\n    if index > ranges[1]:\n        return arr[index + ranges[0]]\n    if rotations > ranges[1]:\n        return arr[index - ranges[0]]\n        \ndef merge(arr):\n    '''\n    Write a python function to merge two sorted array.\n    '''\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr\n    if arr[0] > arr[1]:\n        arr[0], arr[1] = arr[1], arr[0]\n    left, right = [], []\n    result = []\n    for i in range(len(arr)):\n        if i < len(arr) // 2:\n            right.append(arr[i])\n        else:\n            left.append(arr[i])\n    left.append(None)\n    for i in range(len(left)):\n        result.append(left[i] + right[i])\n    return result\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)):\n        if index >= len(ranges):\n            return arr[i]\n        elif ranges[i] <= index < ranges[i+1]:\n            index += 1\n            continue\n        else :\n            break\n    if len(rotations) - i == index:\n        return arr[i]\n    else :\n        return find_Element(arr,ranges,rotations[i:i+index],index)\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)-ranges[index][1]):\n        if(arr[i+ranges[index][1]][index]==arr[index][index]):\n            print(arr[i+ranges[index][1]:index])\n            return arr[i+ranges[index][1]:index]\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges)!= len(rotations) or len(ranges[0])!= len(arr[0]) or len(ranges) > len(rotations):\n        print(\"Invalid input\")\n        return -1\n    for i in range(len(rotations)) :\n        if rotations[i] == 'R' :\n            index = ranges[i]\n        if rotations[i] == 'L' :\n            index = ranges[i]\n        if rotations[i] == 'D' :\n            index = ranges[i]\n        if rotations[i] == 'U' :\n            index = ranges[i]\n    return arr[index[0]][index[1]]\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)):\n        if(arr[i]==index):\n            return i\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    res=0\n    for rotation in range(rotations):\n        res+=arr[rotation][index]\n    return res\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    p = 'p'\n    n = len(words)\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = words[0][0]\n    if len(p_words) > 1:\n        p_words = p_words[1:]\n    if p_words == \"p\":\n        p_words = \"The\"\n    else:\n        p_words = p_words[1:]\n    return p_words, p_words\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    p_words = words[-1][-1]\n    if len(p_words) > 1:\n        p_words = p_words[:-1]\n    if p_words == \"p\":\n        p_words = \"The\"\n    else:\n        p_words = p_words[:-1]\n    return p_words, p_words\ndef first_in_all(words):\n    '''\n    Write a function to return one word from a list of words starting with letter 'p'.\n    '''\n    p_words = words[0][0]\n    if p_words == \"p\":\n        p_words = \"The\"\n    else:\n        p_words = p_words[1:]\n    return p_words, p_words\ndef is_p_ending(words):\n    '''\n    Return boolean value of whether the word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = start_withp(words)\n    return p_words == \"p\"\ndef is_p_starting(words):\n    '''\n    Return boolean value of whether the word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_final(words):\n    '''\n    Return boolean value of whether the final word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = first_in_all(words)\n    return p_words == \"p\"\ndef is_p_middle(words):\n    '''\n    Return boolean value of whether the middle word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = first_in_all(words)\n    return p_words == \"The\"\ndef is_p_mid(words):\n    '''\n    Return boolean value of whether the middle word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_final_ending_with_p(words):\n    '''\n    Return boolean value of whether the final word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_final_starting_with_p(words):\n    '''\n    Return boolean value of whether the final word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = start_withp(words)\n    return p_words == \"The\"\ndef is_p_mid_ending_with_p(words):\n    '''\n    Return boolean value of whether the middle word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_mid_starting_with_p(words):\n    '''\n    Return boolean value of whether the middle word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = start_withp(words)\n    return p_words == \"The\"\ndef is_p_final_ending_with_p_and_mid(words):\n    '''\n    Return boolean value of whether the final word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_final_starting_with_p_and_mid(words):\n    '''\n    Return boolean value of whether the final word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = start_withp(words)\n    return p_words == \"The\"\ndef is_p_mid_ending_with_p_and_mid(words):\n    '''\n    Return boolean value of whether the middle word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_mid_starting_with_p_and_mid(words):\n    '''\n    Return boolean value of whether the middle word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = start_withp(words)\n    return p_words == \"The\"\ndef is_p_final_ending_with_p_and_mid_and_mid(words):\n    '''\n    Return boolean value of whether the final word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_final_starting_with_p_and_mid_and_mid(words):\n    '''\n    Return boolean value of whether the final word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = start_withp(words)\n    return p_words == \"The\"\ndef is_p_final_mid_ending_with_p_and_mid(words):\n    '''\n    Return boolean value of whether the middle word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_final_starting_with_p_and_mid_and_mid(words):\n    '''\n    Return boolean value of whether the final word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = start_withp(words)\n    return p_words == \"The\"\ndef is_p_final_mid_starting_with_p_and_mid_and_mid(words):\n    '''\n    Return boolean value of whether the final word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = start_withp(words)\n    return p_words == \"The\"\ndef is_p_mid_ending_with_p_and_mid(words):\n    '''\n    Return boolean value of whether the middle word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_mid_starting_with_p_and_mid(words):\n    '''\n    Return boolean value of whether the middle word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = start_withp(words)\n    return p_words == \"The\"\ndef is_p_final_ending_with_p_and_mid_and_mid(words):\n    '''\n    Return boolean value of whether the final word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_final_starting_with_p_and_mid_and_mid(words):\n    '''\n    Return boolean value of whether the final word starting with 'p' exists in the list.\n    '''\n    p_words, p_words = start_withp(words)\n    return p_words == \"The\"\ndef is_p_final_mid_ending_with_p_and_mid_and_mid(words):\n    '''\n    Return boolean value of whether the final word ending with 'p' exists in the list.\n    '''\n    p_words, p_words = end_withp(words)\n    return p_words == \"p\"\ndef is_p_mid_ending_with_p_and_mid"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if len(words) < 2:\n        return None\n    elif words[0] == 'p':\n        return words[1],words[2:]\n    else:\n        return None\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'p':\n        return words[0] + 'a' + words[1]\n    return words[0] + 'p' + words[1]\n    \ndef start_withs(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with's'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] =='s':\n        return words[0] + 'a'\n    return words[0] +'s'\n    \ndef start_withd(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'd'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'd':\n        return words[0] + 'a'\n    return words[0] + 'd'\n    \ndef start_withc(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'c'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'c':\n        return words[0] + 'a'\n    return words[0] + 'c'\n    \ndef start_withe(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'e'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'e':\n        return words[0] + 'a'\n    return words[0] + 'e'\n    \ndef start_withf(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'f'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'f':\n        return words[0] + 'a'\n    return words[0] + 'f'\n    \ndef start_withg(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'g'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'g':\n        return words[0] + 'a'\n    return words[0] + 'g'\n    \ndef start_withh(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'h'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'h':\n        return words[0] + 'a'\n    return words[0] + 'h'\n    \ndef start_withi(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'i'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'i':\n        return words[0] + 'a'\n    return words[0] + 'i'\n    \ndef start_withj(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'j'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'j':\n        return words[0] + 'a'\n    return words[0] + 'j'\n    \ndef start_withk(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'k'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'k':\n        return words[0] + 'a'\n    return words[0] + 'k'\n    \ndef start_withl(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'l'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'l':\n        return words[0] + 'a'\n    return words[0] + 'l'\n    \ndef start_withm(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with'm'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] =='m':\n        return words[0] + 'a'\n    return words[0] +'m'\n    \ndef start_withn(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'n'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'n':\n        return words[0] + 'a'\n    return words[0] + 'n'\n    \ndef start_witho(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'o'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'o':\n        return words[0] + 'a'\n    return words[0] + 'o'\n    \ndef start_withp_list(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'p'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'p':\n        return words[0] + 'a'\n    return words[0] + 'p'\n    \ndef start_withs_list(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with's'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] =='s':\n        return words[0] + 'a'\n    return words[0] +'s'\n    \ndef start_withd_list(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'd'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'd':\n        return words[0] + 'a'\n    return words[0] + 'd'\n    \ndef start_withc_list(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'c'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'c':\n        return words[0] + 'a'\n    return words[0] + 'c'\n    \ndef start_withe_list(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'e'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'e':\n        return words[0] + 'a'\n    return words[0] + 'e'\n    \ndef start_withf_list(words):\n    '''\n    Write a function that takes in a list of words and returns the first word in the list that starts with 'f'.\n    '''\n    if len(words) == 1:\n        return words[0]\n    if words[0] == 'f':\n        return words[0] + 'a'\n    return words[0] + 'f'\n    \ndef start_withg_list(words):\n    '''\n    Write a function that takes in a list of words and returns the first word i"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words[0].lower()!= 'p':\n        return None\n    return words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words is None or len(words) == 0:\n        return None\n    firstword = words[0][0]\n    secondword = words[0][1]\n    return firstword, secondword\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [x for x in words if x[0]=='p'][0]\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # the first word\n    p_word = words[0]\n    # the second word\n    p_word_2 = ''\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    final_word=''\n    i=0\n    while i<len(words):\n        if words[i]=='p':\n            final_word=final_word+words[i+1]\n            i=i+2\n        else:\n            i=i+1\n    return final_word\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_string = ''\n    for i in words:\n        if i[0] == 'p':\n            p_string += i\n    return p_string\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    p_string = ''\n    for i in words:\n        if i[-1] == 'p':\n            p_string += i\n    return p_string\ndef get_index(string, letter):\n    '''\n    Write a function to return the index of a word in a list of strings.\n    '''\n    index = -1\n    for i in range(len(string)):\n        if string[i] == letter:\n            index = i\n            break\n    return index\ndef main():\n    file = open(\"input.txt\",\"r\")\n    text = file.read()\n    print(\"Original text:\")\n    print(text)\n    print(\"Words after 'p':\\n\")\n    print(start_withp(text.split(\" \")))\n    print(\"Words after 'p' after 'e':\\n\")\n    print(end_withp(text.split(\" \")))\n    print(\"Words after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'e':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_index(text, 'p'))\n    print(\"Words after 'p' after 'p' after 'p':\\n\")\n    print(get_inde"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a[index] + k < 0:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum_arr = []\n    sum_arr.append(a[0])\n    for i in range(1, len(a)):\n        curr_sum = a[i] + sum_arr[i-1]\n        if curr_sum > k:\n            sum_arr.append(curr_sum)\n        else:\n            sum_arr.append(0)\n    return max(sum_arr)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[k]\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return a[k] + max(a[k], max_sum_increasing_subseq(a, n, index + 1, k + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = 0\n    sum = 0\n    # k = index + 1\n    for i in range(index, n):\n        # print('i', i)\n        # print('sum', sum, end='\\n')\n        sum += a[i]\n        # print('sum', sum, end='\\n')\n        if sum > k:\n            break\n        if sum > max_sum:\n            max_sum = sum\n        sum = 0\n    return max_sum, max_sum + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == k:\n        return a[:k]\n    else:\n        if k > index:\n            return max_sum_increasing_subseq(a, n, index+1, k) + [a[index]]\n        else:\n            return [a[index]] + max_sum_increasing_subseq(a, n, index+1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return sum(a)\n    if index == 0:\n        return a[0]\n    if index == 1:\n        return max(a[1], a[1] + a[0])\n    if index > n:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    return max_sum_increasing_subseq(a, n, index - 1, k - a[index - 1]) + a[index - 1]\n    \n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # the array is pre-computed\n    s = [0] * n\n    for i in range(1, n + 1):\n        s[i] = s[i - 1] + a[i - 1]\n        if s[i - 1] < k:\n            s[i] = max(s[i - 1], s[i])\n    return s[-1]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return a[k]\n    if k == 0 or k > n - index:\n        return 0\n    if index == 0:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1), a[index] + max_sum_increasing_subseq(a, n, index, k - 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        return sum(a[index:])\n    if index == n:\n        return max(a[:k], key=lambda x: x+a[k])\n    else:\n        return max_sum_increasing_subseq(a, n, index, k-1) + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = index\n    j = index\n    while i < n:\n        # if the sum is already less than the k element, then go to the next element\n        if a[i] + a[j] <= k:\n            i += 1\n            continue\n        # if sum is greater than the current element, then it's a left subseq and return it\n        elif a[i] + a[j] > k:\n            return a[i] + a[j]\n        # if the element is not present, then take the max of the left subsequence and the right subsequence\n        else:\n            a[i] = max(a[i], a[j] + a[i])\n            a[j] = max(a[j], a[i] + a[j])\n            j += 1\n    return a[i] + a[j]\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #Tuple is represented by a list and a list\n    #m is the length of the tuple.\n    #n is the index of the tuple.\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    def reverse_m(m):\n        for i in range(len(m)):\n            for j in range(i+1,len(m)):\n                m[i],m[j] = m[j],m[i]\n        return m\n        \n    m = deepcopy(tuplex)\n    return m\n    \ndef get_column(tuplex,m,n):\n    '''\n    Write a function to get a column of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        tuplex[i] = tuplex[i][n]\n        \n    return tuplex\n    \ndef get_column_and_row(tuplex,m,n):\n    '''\n    Write a function to get a column and row of a tuple.\n    '''\n    def reverse_m(m):\n        for i in range(len(m)):\n            for j in range(i+1,len(m)):\n                m[i],m[j] = m[j],m[i]\n        return m\n    m = deepcopy(tuplex)\n    return m,n\n    \ndef get_columns(tuplex,m,n):\n    '''\n    Write a function to get a column of a tuple.\n    '''\n    def reverse_m(m):\n        for i in range(len(m)):\n            for j in range(i+1,len(m)):\n                m[i],m[j] = m[j],m[i]\n        return m\n    \n    m = deepcopy(tuplex)\n    return m,n\n        \ndef get_col(m,n):\n    '''\n    Write a function to get a column of a tuple.\n    '''\n    m = get_column(m,n)\n    m = reverse_m(m)\n    return m\n    \ndef get_rows(m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    m = get_column(m,n)\n    m = reverse_m(m)\n    return m\n    \ndef get_row(m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    return get_rows(m,n)\n    \ndef get_column_and_row_from_list(list):\n    '''\n    Write a function to get a column and row of a list.\n    '''\n    columns = []\n    rows = []\n    for i in range(len(list)):\n        if i == 0:\n            columns.append(list[i])\n        elif i == 1:\n            rows.append(list[i])\n        else:\n            columns.append(list[i][0])\n            rows.append(list[i][1])\n    \n    return columns,rows\n    \ndef get_columns_and_rows_from_list(list):\n    '''\n    Write a function to get a column and row of a list.\n    '''\n    columns = []\n    rows = []\n    for i in range(len(list)):\n        columns.append(list[i][0])\n        rows.append(list[i][1])\n    \n    return columns,rows\n    \ndef get_columns_and_rows_from_col(m,n):\n    '''\n    Write a function to get a column and row of a matrix.\n    '''\n    columns = []\n    rows = []\n    for i in range(len(m)):\n        columns.append(m[i][n])\n        rows.append(m[i][n])\n    \n    return columns,rows\n    \ndef get_column_and_row_from_col_row(column,row):\n    '''\n    Write a function to get a column and row of a matrix.\n    '''\n    columns = []\n    rows = []\n    for i in range(len(column)):\n        columns.append(column[i])\n        rows.append(row[i])\n    \n    return columns,rows\n    \ndef get_columns_and_rows_from_col_row(column,row):\n    '''\n    Write a function to get a column and row of a matrix.\n    '''\n    columns = []\n    rows = []\n    for i in range(len(column)):\n        columns.append(column[i])\n        rows.append(row[i])\n    \n    return columns,rows\n    \ndef get_columns_and_rows_from_col_row_row(column,row,row):\n    '''\n    Write a function to get a column and row of a matrix.\n    '''\n    columns = []\n    rows = []\n    for i in range(len(column)):\n        columns.append(column[i])\n        rows.append(row[i])\n    \n    return columns,rows\n    \ndef get_columns_and_rows_from_col_row_col(column,row,col):\n    '''\n    Write a function to get a column and row of a matrix.\n    '''\n    columns = []\n    rows = []\n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][col])\n    \n    return columns,rows\n    \ndef get_columns_and_rows_from_col_row_row_col(column,row,col,row,col):\n    '''\n    Write a function to get a column and row of a matrix.\n    '''\n    columns = []\n    rows = []\n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][col])\n    \n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][row])\n    \n    return columns,rows\n    \ndef get_columns_and_rows_from_col_row_row_col_col(column,row,col,row,col,col):\n    '''\n    Write a function to get a column and row of a matrix.\n    '''\n    columns = []\n    rows = []\n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][col])\n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][row])\n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][col])\n    \n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][col])\n    \n    return columns,rows\n    \ndef get_columns_and_rows_from_col_row_col_col_col_col(column,row,col,row,col,col,col):\n    '''\n    Write a function to get a column and row of a matrix.\n    '''\n    columns = []\n    rows = []\n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][col])\n    \n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][col])\n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][row])\n    \n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][col])\n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][col])\n    \n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append(row[i][col])\n    \n    for i in range(len(column)):\n        columns.append(column[i][col])\n        rows.append"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:i+n] for i in range(0,m,n))\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    colon_tuplex = []\n    for i in range(n):\n        colon_tuplex.append(tuplex[i][m])\n    return colon_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + (' '*(n-len(tuplex[:m])) + tuplex[m:])\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(tuplex)\n    #print(m)\n    #print(n)\n    if len(tuplex)==2 and m>=0 and n>=0:\n        if tuplex[0]==tuplex[1] and n==0:\n            return tuplex\n        elif tuplex[0]==tuplex[1] and n!=0:\n            if m==n:\n                return tuplex\n            else:\n                return colon_tuplex((tuplex[0]+tuplex[1],m,n-1),m-1,n)\n        elif tuplex[0]==tuplex[1] and n!=0:\n            if m==n:\n                return tuplex\n            else:\n                return colon_tuplex((tuplex[0]+tuplex[1],m,n-1),m-1,n)\n        else:\n            return tuplex\n    else:\n        return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for col in range(n):\n        new_tuplex=[]\n        for row in range(m):\n            new_tuplex.append(tuplex[row][col])\n        tuplex[row]=new_tuplex\n    return tuplex\ndef parse_file(fname):\n    '''\n    Read a file and return a dictionary of the form:\n    {'row': row_tuple,\n    'col': column_tuple,\n    'value': the value in this row,\n    'value_with_col': the value_with_col_tuple}\n    '''\n    f=open(fname,\"r\")\n    tuplex=[]\n    for line in f:\n        line=line.strip()\n        if not line:\n            tuplex=[]\n            continue\n        try:\n            tuplex.append(tuple(map(float,line.split())))\n        except:\n            continue\n    f.close()\n    return {'row':tuplex[:],\n        'col':tuplex[:],\n        'value':tuplex[0][0],\n        'value_with_col':tuplex[0][1:],\n        'value_with_col_tuple':tuplex[0][:]\n        }\ndef get_col_tuplex(d):\n    '''\n    Return a new tuple of col_tuple for a given dictionary\n    '''\n    col_tuple=d['col']\n    return col_tuple\ndef get_value_tuplex(d):\n    '''\n    Return a new tuple of value_tuple for a given dictionary\n    '''\n    return d['value']\ndef get_value_with_col_tuple(d):\n    '''\n    Return a new tuple of value_with_col_tuple for a given dictionary\n    '''\n    return d['value_with_col']\ndef get_value_with_col_tuple_list(d):\n    '''\n    Return a new list of value_with_col_tuple for a given dictionary\n    '''\n    return d['value_with_col_tuple']\ndef print_row_tuplex(tuplex,m,n):\n    '''\n    Print a row of the given dictionary.\n    '''\n    print(\" \".join([str(v) for v in tuplex[:]]))\n    for row in range(n):\n        print(str(tuplex[row][:])+\"\\t\")\ndef print_col_tuplex(tuplex,m,n):\n    '''\n    Print a column of the given dictionary.\n    '''\n    print(\" \".join([str(v) for v in tuplex[:,:]]))\n    for row in range(m):\n        print(str(tuplex[:,row][:])+\"\\t\")\ndef print_value_tuplex(tuplex,m,n):\n    '''\n    Print a column of the given dictionary\n    '''\n    for row in range(m):\n        print(str(tuplex[row][:])+\"\\t\")\ndef print_value_with_col_tuple(tuplex,m,n):\n    '''\n    Print a column of the given dictionary\n    '''\n    print(\" \".join([str(v) for v in tuplex[:,:]]))\n    for row in range(m):\n        print(str(tuplex[:,row][:])+\"\\t\")\ndef print_value_with_col_tuple_list(tuplex,m,n):\n    '''\n    Print a column of the given dictionary\n    '''\n    print(\" \".join([str(v) for v in tuplex[:,:]]))\n    for row in range(m):\n        print(str(tuplex[:,row][:])+\"\\t\")\ndef print_tuplex(tuplex):\n    '''\n    Print a row of the given dictionary\n    '''\n    print(\" \".join([str(v) for v in tuplex[:]]))\n    for row in range(tuplex.shape[0]):\n        print(str(tuplex[row][:])+\"\\t\")\ndef print_tuplex_list(tuplex):\n    '''\n    Print a row of the given dictionary\n    '''\n    print(\" \".join([str(v) for v in tuplex[:]]))\n    for row in range(tuplex.shape[0]):\n        print(str(tuplex[row][:])+\"\\t\")\ndef print_col_tuplex_list(tuplex,m,n):\n    '''\n    Print a column of the given dictionary\n    '''\n    print(\" \".join([str(v) for v in tuplex[:,:]]))\n    for row in range(m):\n        print(str(tuplex[:,row][:])+\"\\t\")\ndef print_col_tuplex_list_list(tuplex,m,n):\n    '''\n    Print a column of the given dictionary\n    '''\n    print(\" \".join([str(v) for v in tuplex[:,:]]))\n    for row in range(m):\n        print(str(tuplex[:,row][:])+\"\\t\")\ndef get_parsed_tuplex(fname):\n    '''\n    Read the values of the given file, and return a tuple of all\n    the parsed values\n    '''\n    tuplex=parse_file(fname)\n    return tuplex\ndef get_parsed_tuplex_list(fname):\n    '''\n    Read the values of the given file, and return a list of all\n    the parsed values\n    '''\n    tuplex=parse_file(fname)\n    return tuplex\ndef get_parsed_value(fname):\n    '''\n    Read the values of the given file and return a tuple\n    of the parsed values\n    '''\n    tuplex=parse_file(fname)\n    return tuplex['value']\ndef get_parsed_value_with_col_tuple(fname):\n    '''\n    Read the values of the given file and return a tuple\n    of the parsed values\n    '''\n    tuplex=parse_file(fname)\n    return tuplex['value_with_col']\ndef get_parsed_value_with_col_tuple_list(fname):\n    '''\n    Read the values of the given file and return a list\n    of the parsed values\n    '''\n    tuplex=parse_file(fname)\n    return tuplex['value_with_col_tuple']\ndef get_parsed_value_with_col_tuple_list_list(fname):\n    '''\n    Read the values of the given file and return a list\n    of the parsed values\n    '''\n    tuplex=parse_file(fname)\n    return tuplex['value_with_col_tuple_list']\ndef get_parsed_value_with_col_tuple_list_row(fname):\n    '''\n    Read the values of the given file and return a list\n    of the parsed values\n    '''\n    tuplex=parse_file(fname)\n    return tuplex['value_with_col_tuple_list']\ndef get_parsed_value_with_col_tuple_list_row_row(fname):\n    '''\n    Read the values of the given file and return a list\n    of the parsed values\n    '''\n    tuplex=parse_file(fname)\n    return tuplex['value_with_col_tuple_list']\ndef get_parsed_tuplex_list_list_row(fname):\n    '''\n    Read the values of the given file and return a list\n    of the parsed values\n    '''\n    tuplex=parse_file(fname)\n    return tuplex['value_with_col_tuple_list']\ndef get_parsed_tuplex_list_row_row_row(fname):\n    '''\n    Read the values of the given file and return a list\n    of the parsed values\n    '''\n    tuplex=parse_fil"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    h = []\n    for i in range(0,len(tuplex)):\n        h.append(tuplex[i][m:n])\n    return h\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    m=m+1\n    tuplex=tuplex+' '\n    tuplex=tuplex+' '\n    tuplex=tuplex+' '\n    tuplex=tuplex+' '\n    m=m+1\n    n=n+1\n    return tuplex,m,n\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # Get the first two items in the tuple\n    # Use recursion to get the first two items\n    if len(tuplex)<n:\n        return -1\n    if len(tuplex)==n:\n        return tuplex[2]\n    \n    # Get the next two items in the tuple\n    # Use recursion to get the next two items\n    if len(tuplex)<m+n:\n        return -1\n    if len(tuplex)==m+n:\n        return tuplex[m]\n    \n    # Set the first item of the tuple to the second item\n    # Use recursion to set the first two items\n    if m<n:\n        tuplex[0]=tuplex[2]\n    if n<m:\n        tuplex[1]=tuplex[2]\n    \n    # Set the second item of the tuple to the first item\n    # Use recursion to set the second two items\n    if m<n:\n        tuplex[2]=tuplex[0]\n    if n<m:\n        tuplex[0]=tuplex[1]\n    \n    # Recursively call the function\n    return colon_tuplex(tuplex,m,n-1)\ndef cst_colon(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # Check if the tuple is a tuple of length 2\n    if len(tuplex)<n:\n        return -1\n    if len(tuplex)==n:\n        return tuplex[0]\n    \n    # Check if the tuple is a tuple of length 3\n    if len(tuplex)<m+n:\n        return -1\n    if len(tuplex)==m+n:\n        return tuplex[m]\n    \n    # Get the last two items in the tuple\n    # Use recursion to get the last two items\n    if len(tuplex)<m+n+2:\n        return -1\n    if len(tuplex)==m+n+2:\n        return tuplex[m+n]\n    \n    # Set the first item of the tuple to the second item\n    # Use recursion to set the first two items\n    if m<n:\n        tuplex[0]=tuplex[2]\n    if n<m:\n        tuplex[1]=tuplex[2]\n    \n    # Set the second item of the tuple to the first item\n    # Use recursion to set the second two items\n    if m<n:\n        tuplex[2]=tuplex[0]\n    if n<m:\n        tuplex[0]=tuplex[1]\n    \n    # Recursively call the function\n    return cst_colon(tuplex,m,n-2)\n    \ndef count_colon(tuplex,m,n):\n    '''\n    Write a function to get a tuple of the number of items in a tuple.\n    '''\n    \n    # Check if the tuple is a tuple of length 2\n    if len(tuplex)<n:\n        return -1\n    if len(tuplex)==n:\n        return 1\n    \n    # Check if the tuple is a tuple of length 3\n    if len(tuplex)<m+n:\n        return -1\n    if len(tuplex)==m+n:\n        return tuplex[0]+tuplex[1]+1\n    \n    # Get the last two items in the tuple\n    # Use recursion to get the last two items\n    if len(tuplex)<m+n+2:\n        return -1\n    if len(tuplex)==m+n+2:\n        return tuplex[m+n]\n    \n    # Set the first item of the tuple to the second item\n    # Use recursion to set the first two items\n    if m<n:\n        tuplex[0]=tuplex[2]\n    if n<m:\n        tuplex[1]=tuplex[2]\n    \n    # Set the second item of the tuple to the first item\n    # Use recursion to set the second two items\n    if m<n:\n        tuplex[2]=tuplex[0]\n    if n<m:\n        tuplex[0]=tuplex[1]\n    \n    # Recursively call the function\n    return count_colon(tuplex,m,n-2)\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    L = []\n    for i in range(N):\n        temp = []\n        for j in range(N):\n            temp.append(nums1[j] * nums2[j])\n        L.append(temp)\n    return L\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res1 = []\n    res2 = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i + j < len(nums1):\n                res1.append(nums1[i] * nums2[j])\n                res2.append(nums1[i] * nums2[j])\n    return res1, res2\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    large = []\n    # Use iterative approach to find largest number\n    for i in range(N):\n        # Find maximum value of the given list\n        for j in range(len(nums1)):\n            if nums1[j] * nums2[i] > large[i]:\n                large[i] = nums1[j] * nums2[i]\n    return large\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    total = sum(nums1) + sum(nums2)\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if total % nums1[i] == 0:\n                for k in range(N):\n                    if k == j:\n                        continue\n                    if nums1[k] < nums1[i] * nums2[k]:\n                        count += 1\n                break\n            if total % nums2[i] == 0:\n                for k in range(N):\n                    if k == i:\n                        continue\n                    if nums2[k] < nums2[i] * nums1[k]:\n                        count += 1\n                break\n    return count\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    \n    for i in range(len(nums1)):\n        \n        for j in range(len(nums2)):\n            \n            # max result\n            temp = nums1[i] * nums2[j]\n            \n            if temp > N:\n                break\n                \n            elif temp == N:\n                \n                # add to result\n                result.append(nums1[i] * nums2[j])\n                \n                # break\n                \n            elif temp < N:\n                \n                # find largest factor of max product\n                if (j + 1) < len(nums2):\n                    \n                    temp2 = nums1[i] * nums2[j + 1]\n                    if temp2 > N:\n                        break\n                    elif temp2 == N:\n                        \n                        # add to result\n                        result.append(nums1[i] * nums2[j + 1])\n                        \n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    L = len(nums1)\n    if L < N:\n        return []\n    if L == N:\n        return nums1, nums2\n    d = {}\n    result = []\n    for i in range(L):\n        for j in range(i, L):\n            if i!= j:\n                d[nums1[i] * nums2[j]] = max(d[nums1[i] * nums2[j]], d[nums1[i]] + d[nums2[j]])\n    # print(d)\n    for key, val in d.items():\n        if val == N:\n            result.append(key)\n    # print(result)\n    return result[0]\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    factor = 1\n    large = 0\n    for i in range(N):\n        for j in range(N):\n            if i!=j:\n                if i>j:\n                    temp = nums1[i]*factor\n                    nums1[i] = nums2[j]\n                    nums2[j] = temp\n                    if temp > large:\n                        large = temp\n            factor+=1\n    return large\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # hint: https://stackoverflow.com/questions/56263377/how-to-find-the-maximum-number-of-product-from-two-lists-with-such-factor\n    # answer: https://www.geeksforgeeks.org/find-the-maximum-number-of-product-from-two-lists-with-such-factor/\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    elif len(nums2) > len(nums1):\n        nums1, nums2 = nums1, nums2\n    \n    if N == 1:\n        return nums1\n    \n    if len(nums2) == N:\n        return nums2\n    \n    if N == 2:\n        return nums1 * nums2\n        \n    for i in range(N):\n        if N == 2:\n            return nums2 * nums1\n        \n        for j in range(N - i):\n            temp = nums1[i] * nums2[j + i]\n            if temp > nums1[N - 1] * nums2[N - 1]:\n                temp = nums1[i] * nums2[N - 1]\n                nums1[i], nums1[N - 1] = nums1[N - 1], nums1[i]\n                nums2[j + i], nums2[N - 1] = nums2[N - 1], nums2[j + i]\n            else:\n                break\n        \n    return nums1, nums2\n    \ndef common_product(a, b):\n    '''\n    Finds the smallest common product between two lists of integers.\n    '''\n    if len(a) < len(b):\n        a, b = b, a\n    \n    if len(a) == len(b):\n        return min(a) * max(b)\n        \n    for i in range(len(a)):\n        if a[i] == b[i]:\n            a[i] = 0\n            continue\n        a[i] /= min(a[i], b[i])\n        if a[i] == 0:\n            a[i] = 1\n    \n    return min(a) * max(b)\n    \n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    result = [[0] * (N + 1) for i in range(n)]\n    # k = 0\n    # j = 0\n    for i in range(n):\n        for j in range(m):\n            if nums1[i] * nums2[j] > nums1[i] * nums2[j]:\n                result[i][j+1] = nums1[i] * nums2[j]\n            else:\n                result[i][j+1] = nums1[i] * nums2[j]\n            # k = k + 1\n            # if k == N:\n            #     break\n        # j = j + 1\n    return result\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b == 0:\n        return a\n    if a > b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(\"Maximum of two numbers : \",a,b)\n    if a>b:\n        return a\n    else:\n        return b\n    \nprint(maximum(5,6))\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a\n    if b<a:\n        max=b\n    elif a<b:\n        max=a\n    return max\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a\n    if b<a:\n        min=b\n    elif a<b:\n        min=a\n    return min\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        print(a,b)\n        print(\"Maximum value is :\",max(a,b))\n        return max(a,b)\n    else:\n        print(b,a)\n        print(\"Maximum value is :\",max(b,a))\n        return max(b,a)\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a > b):\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max = a\n    if(b>a):\n        max = b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    if b>a:\n        return b\n    return a\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum = a\n    if a > b:\n        maximum = b\n    return maximum\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list_of_characters = list(str1)\n    return tuple(list_of_characters)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    chars = []\n    for char in str1:\n        chars.append(char)\n    return tuple(chars)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = ()\n    for c in str1:\n        t = t + (c,)\n    return tuple(t)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    temp = str1.split()\n    for i in range(len(temp)):\n        temp[i] = temp[i][::-1]\n    return tuple(temp)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    try:\n        return tuple(str1)\n    except TypeError:\n        return str1\n    \n    \ndef tuple_to_string(tuple):\n    '''\n    Write a function to convert a given tuple to a string.\n    '''\n    try:\n        return str(tuple)\n    except TypeError:\n        return str(tuple)\n        \n    \ndef string_to_int(str1):\n    '''\n    Write a function that converts a given string into an integer.\n    '''\n    try:\n        return int(str1)\n    except ValueError:\n        return 0\n        \n        \ndef int_to_string(num):\n    '''\n    Write a function that converts an integer into a string.\n    '''\n    try:\n        return str(num)\n    except TypeError:\n        return str(num)\n        \n        \ndef string_to_float(str1):\n    '''\n    Write a function that converts a given string into a float.\n    '''\n    try:\n        return float(str1)\n    except ValueError:\n        return 0.0\n        \n        \ndef float_to_string(num):\n    '''\n    Write a function that converts a given float into a string.\n    '''\n    try:\n        return str(num)\n    except TypeError:\n        return str(num)\n        \n        \ndef string_to_bool(str1):\n    '''\n    Write a function that converts a given string into a boolean.\n    '''\n    try:\n        return bool(str1)\n    except ValueError:\n        return False\n        \n        \ndef bool_to_string(bool):\n    '''\n    Write a function that converts a given boolean into a string.\n    '''\n    try:\n        return str(bool)\n    except TypeError:\n        return str(bool)\n        \n        \ndef string_to_string(str1):\n    '''\n    Write a function that converts a given string into a string.\n    '''\n    try:\n        return str(str1)\n    except TypeError:\n        return str(str1)\n    \n    \ndef string_to_number(str1):\n    '''\n    Write a function that converts a given string into a number.\n    '''\n    try:\n        return int(str1)\n    except ValueError:\n        return 0\n        \n        \ndef number_to_string(num):\n    '''\n    Write a function that converts an integer into a string.\n    '''\n    try:\n        return str(num)\n    except TypeError:\n        return str(num)\n        \n        \ndef string_to_number_list(str1):\n    '''\n    Write a function that converts a given string into a list.\n    '''\n    try:\n        return list(str1)\n    except TypeError:\n        return str1\n        \n        \ndef number_to_string_list(num):\n    '''\n    Write a function that converts an integer into a list.\n    '''\n    try:\n        return list(str(num))\n    except TypeError:\n        return str(num)\n    \n    \ndef string_to_list(str1):\n    '''\n    Write a function that converts a given string into a list.\n    '''\n    try:\n        return list(str1)\n    except TypeError:\n        return str1\n        \n        \ndef string_to_number_list_for_int(str1):\n    '''\n    Write a function that converts a given string into a list of integers.\n    '''\n    try:\n        return list(str1)\n    except TypeError:\n        return str1\n        \n        \ndef number_to_string_list_for_int(num):\n    '''\n    Write a function that converts an integer into a list of integers.\n    '''\n    try:\n        return list(str(num))\n    except TypeError:\n        return str(num)\n        \n    \ndef string_to_float_list(str1):\n    '''\n    Write a function that converts a given string into a list of floats.\n    '''\n    try:\n        return list(str1)\n    except TypeError:\n        return str1\n        \n        \ndef float_list_to_string(num_list):\n    '''\n    Write a function that converts a given list of floats into a string.\n    '''\n    try:\n        return str(num_list)\n    except TypeError:\n        return str(num_list)\n    \n    \ndef string_to_float_list_for_int(str1):\n    '''\n    Write a function that converts a given string into a list of floats.\n    '''\n    try:\n        return list(str1)\n    except TypeError:\n        return str1\n        \n        \ndef float_list_to_string_for_int(num_list):\n    '''\n    Write a function that converts a given list of floats into a string.\n    '''\n    try:\n        return list(str(num_list))\n    except TypeError:\n        return str(num_list)\n        \n        \ndef list_to_string(num_list):\n    '''\n    Write a function that converts a given list of numbers into a string.\n    '''\n    try:\n        return str(num_list)\n    except TypeError:\n        return str(num_list)\n        \n        \ndef string_to_list_for_int(str1):\n    '''\n    Write a function that converts a given string into a list of integers.\n    '''\n    try:\n        return str1.split(\",\")\n    except TypeError:\n        return str1\n        \n        \ndef string_to_list_for_float(str1):\n    '''\n    Write a function that converts a given string into a list of floats.\n    '''\n    try:\n        return str1.split(\",\")\n    except TypeError:\n        return str1\n        \n        \ndef list_to_string_for_int(num_list):\n    '''\n    Write a function that converts a given list of integers into a string.\n    '''\n    try:\n        return str(num_list)\n    except TypeError:\n        return str(num_list)\n        \n        \ndef bool_to_string_for_int(num_list):\n    '''\n    Write a function that converts a given list of integers into a string.\n    '''\n    try:\n        return str(num_list)\n    except TypeError:\n        return str(num_list)\n        \n        \ndef bool_to_string_for_float(num_list):\n    '''\n    Write a function that converts a given list of floats into a string.\n    '''\n    try:\n        return str(num_list)\n    except TypeError:\n        return str(num_list)\n        \n        \ndef string_to_bool_list(str1):\n    '''\n    Write a function that converts a given string into a list of boolean values.\n    '''\n    try:\n        return list(str1)\n    except TypeError:\n        return str1\n        \n        \ndef string_to_bool_list_for_int(str1):\n    '''\n    Write a function that converts a given string into a list of boolean values.\n    '''\n    try:\n        return list(str1)\n    except TypeError:\n        return str1\n        \n        \ndef bool_to_string_list_for_int(num_list):\n    '''\n    Write a function that converts a given list of integers into a string.\n    '''\n    try:\n        return list(str(num_list))\n    except TypeError:\n        return str(num_list)\n        \n        \ndef string_to_list_for_float(str1):\n    '''\n    Write a function that converts a given string into a list of floats.\n    '''\n    try:\n        return str1.split(\",\")\n    except TypeError:\n        return str1\n        \n        \ndef list_to_float_list(num_list):\n    '''\n    Write a function that converts a given list of integers into a list of floats.\n    '''\n    try:\n        return list(str(num_list))\n    except TypeError:\n        return str(num_list)\n        \n        \ndef list_to_float_list_for"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Note: make sure the string is a lower-case string\n    if not str1:\n        return (None, None)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # your code goes here\n    #raise NotImplementedError()\n    return str1.split()\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = []\n    for char in str1:\n        t.append(char)\n    return tuple(t)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple = list(str1)\n    for i in range(0, len(tuple)):\n        if tuple[i] =='':\n            tuple.pop(i)\n        else:\n            tuple.insert(i,'')\n    return tuple\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n & (1 << (n.bit_length() - 1)))\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n > 0):\n        if (n & 1):\n            # Set the bit\n            n = n >> 1\n        else:\n            # Set bit as 1\n            n = n << 1\n    else:\n        if (n & 1):\n            # Set bit as 1\n            n = n << 1\n        else:\n            # Set bit as 0\n            n = n >> 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return\n    while True:\n        temp = n & 1\n        n = n >> 1\n        if n == 0:\n            break\n    #print(temp)\n    bits = bin(temp)[2:]\n    #print(bits)\n    i = len(bits) - 1\n    while i >= 0:\n        if bits[i] == '1':\n            bits = bits[:i] + '0' + bits[i+1:]\n        else:\n            bits = bits[:i] + '1' + bits[i+1:]\n        #print(bits)\n        i -= 1\n    bits = bits[::-1]\n    #print(bits)\n    c = int(bits, 2)\n    #print(bin(c)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    b = int(n, 2)\n    #print(b)\n    while b > 0:\n        #print(bin(b)[2:])\n        b = int(bin(b)[2:])\n        b &= 0xFFFFFFFF\n        #print(b)\n    #print(bin(n)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    c = int(n, 2)\n    #print(c)\n    while c > 0:\n        #print(bin(c)[2:])\n        c = int(bin(c)[2:])\n        c &= 0xFFFFFFFF\n        #print(c)\n    bits = bin(c)[2:]\n    #print(bits)\n    i = len(bits) - 1\n    while i >= 0:\n        if bits[i] == '1':\n            bits = bits[:i] + '0' + bits[i+1:]\n        else:\n            bits = bits[:i] + '1' + bits[i+1:]\n        #print(bits)\n        i -= 1\n    bits = bits[::-1]\n    #print(bits)\n    c = int(bits, 2)\n    #print(bin(n)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    b = int(n, 2)\n    #print(b)\n    while b > 0:\n        #print(bin(b)[2:])\n        b = int(bin(b)[2:])\n        b &= 0xFFFFFFFF\n        #print(b)\n    #print(bin(n)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    c = int(n, 2)\n    #print(c)\n    while c > 0:\n        #print(bin(c)[2:])\n        c = int(bin(c)[2:])\n        c &= 0xFFFFFFFF\n        #print(c)\n    bits = bin(c)[2:]\n    #print(bits)\n    i = len(bits) - 1\n    while i >= 0:\n        if bits[i] == '1':\n            bits = bits[:i] + '0' + bits[i+1:]\n        else:\n            bits = bits[:i] + '1' + bits[i+1:]\n        #print(bits)\n        i -= 1\n    bits = bits[::-1]\n    #print(bits)\n    c = int(bits, 2)\n    #print(bin(n)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    b = int(n, 2)\n    #print(b)\n    while b > 0:\n        #print(bin(b)[2:])\n        b = int(bin(b)[2:])\n        b &= 0xFFFFFFFF\n        #print(b)\n    bits = bin(b)[2:]\n    #print(bits)\n    i = len(bits) - 1\n    while i >= 0:\n        if bits[i] == '1':\n            bits = bits[:i] + '0' + bits[i+1:]\n        else:\n            bits = bits[:i] + '1' + bits[i+1:]\n        #print(bits)\n        i -= 1\n    bits = bits[::-1]\n    #print(bits)\n    c = int(bits, 2)\n    #print(bin(n)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    b = int(n, 2)\n    #print(b)\n    while b > 0:\n        #print(bin(b)[2:])\n        b = int(bin(b)[2:])\n        b &= 0xFFFFFFFF\n        #print(b)\n    #print(bin(n)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    c = int(n, 2)\n    #print(bin(n)[2:])\n    while c > 0:\n        #print(bin(c)[2:])\n        c = int(bin(c)[2:])\n        c &= 0xFFFFFFFF\n        #print(c)\n    bits = bin(c)[2:]\n    #print(bits)\n    i = len(bits) - 1\n    while i >= 0:\n        if bits[i] == '1':\n            bits = bits[:i] + '0' + bits[i+1:]\n        else:\n            bits = bits[:i] + '1' + bits[i+1:]\n        #print(bits)\n        i -= 1\n    bits = bits[::-1]\n    #print(bits)\n    c = int(bits, 2)\n    #print(bin(n)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    b = int(n, 2)\n    #print(b)\n    while b > 0:\n        #print(bin(b)[2:])\n        b = int(bin(b)[2:])\n        b &= 0xFFFFFFFF\n        #print(b)\n    #print(bin(n)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    c = int(n, 2)\n    #print(bin(n)[2:])\n    while c > 0:\n        #print(bin(c)[2:])\n        c = int(bin(c)[2:])\n        c &= 0xFFFFFFFF\n        #print(c)\n    bits = bin(c)[2:]\n    #print(bits)\n    i = len(bits) - 1\n    while i >= 0:\n        if bits[i] == '1':\n            bits = bits[:i] + '0' + bits[i+1:]\n        else:\n            bits = bits[:i] + '1' + bits[i+1:]\n        #print(bits)\n        i -= 1\n    bits = bits[::-1]\n    #print(bits)\n    c = int(bits, 2)\n    #print(bin(n)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    b = int(n, 2)\n    #print(b)\n    while b > 0:\n        #print(bin(b)[2:])\n        b = int(bin(b)[2:])\n        b &= 0xFFFFFFFF\n        #print(b)\n    #print(bin(n)[2:])\n    n = bin(n)[2:]\n    #print(n)\n    c = int(n, 2)\n    #print(bin(n)[2:])\n    while c > 0:\n        #print(bin(c)[2:])\n        c = int(bin(c)[2:])\n        c &= 0xFFFFFFFF\n        #print(c)\n    bits = bin(c)[2:]\n    #print(bits)\n    i = len(bits) - 1\n    while i >= 0:\n        if bits[i] == '1':\n            bits = bits[:i] + '0' + bits[i+1:]\n        else:\n            bits = bits[:i] + '1' + bits[i+1:]\n        #print(bits)\n        i -= 1\n    bits = bits[::-1]\n    #print(bits)\n    c = int(bits, 2)\n    #print(bin(n)[2:])\n    n = bin("
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = (n >> 1) & 0x01\n    return mask\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return '0x00' if n & (1 << n.bit_length()-1) else '0xFF'\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # Set first bit to 1 and the rest to 0 \n    set1 = {1}\n    set2 = {0}\n    set3 = set1.copy()\n    set3.update(set2)\n    \n    # Convert set to a string and convert to int\n    s1 = str(set1)\n    s2 = str(set2)\n    s3 = str(set3)\n    \n    # Initialize left most unset bit to 1\n    left_most_unset_bit = 0b1\n    \n    # Iterate through string \n    for i in range(len(s1)):\n        # Check if the left most unset bit is set\n        if s1[i] == '1':\n            # Set left most unset bit to 1\n            left_most_unset_bit = 1\n        # Check if the right most unset bit is set\n        elif s2[i] == '1':\n            # Set right most unset bit to 1\n            left_most_unset_bit = 1\n        # Check if the third most unset bit is set\n        elif s3[i] == '1':\n            # Set third most unset bit to 1\n            left_most_unset_bit = 1\n        \n    # Iterate through string\n    for j in range(len(s2)):\n        # Check if left most unset bit is set\n        if s2[j] == '1':\n            # Set left most unset bit to 1\n            left_most_unset_bit = 1\n        # Check if right most unset bit is set\n        elif s3[j] == '1':\n            # Set right most unset bit to 1\n            left_most_unset_bit = 1\n        \n    # Return the bit to which the top most unset bit is set\n    return left_most_unset_bit\n    "
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n: return n\n    else: return 0\n    \n    "
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # if no values are left, return -1\n    if n < 0:\n        return -1\n    \n    # generate a tuple of all values of n\n    tup = tuple(range(n))\n    # if there is only one value, we're done\n    if len(tup) == 1:\n        return 1\n    \n    # if the tuple contains only one value, set the next bit to 0\n    if tup.count(tup[0]) == 1:\n        return 0\n    \n    # otherwise, we're done\n    return 1\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n is None:\n        return\n    else:\n        temp = n & 1 # set only the bit if the bit is 1\n        n = n >> 1 # clear the bit\n        if temp: # set the bit\n            n |= 0x01 # set the first bit (or set 1)\n        else:\n            n |= 0x00 # clear the bit (or clear 1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n & ~(n - 1"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * (r**2)) * (1 - math.pow(r,2)) * (1 - math.pow(h,2))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = 4 * math.pi * r ** 3\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 2 * math.pi * r * h\n    print(round(v,2))\n    \ndef volume_cylinder(radius, height):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    v = math.pi * radius * radius * height\n    print(round(v,2))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*math.pi*3.1416*h*r*(r-2)\ndef length_cone(r,h):\n    '''\n    Write a function to find the length of a cone.\n    '''\n    return 2*math.pi*r*(h-2)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return r*h*math.pi*3.1416\ndef length_cylinder(r,h):\n    '''\n    Write a function to find the length of a cylinder.\n    '''\n    return 2*math.pi*r*h\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return h*math.pi*3.1416*r*(r-2)\ndef volume_cuboid(r1,r2,r3):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return r1*r2*r3*3.1416\ndef length_cuboid(r1,r2,r3):\n    '''\n    Write a function to find the length of a cuboid.\n    '''\n    return (2*math.pi*r1*r2)*r3\ndef area_cuboid(r1,r2,r3):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    return (r1*r2*r3*3.1416)*3.1416*r1*r2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r*(math.sqrt(r**3-2*r**2))\ndef length_sphere(r):\n    '''\n    Write a function to find the length of a sphere.\n    '''\n    return (r**3)*math.sqrt(r**2-2*r)\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*r*math.sqrt(r**2-2*r)\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return 4/3*math.pi*r*(r**3-2*r**2)*math.sqrt(r**2-2*r)\ndef length_cube(r):\n    '''\n    Write a function to find the length of a cube.\n    '''\n    return (r**3)*math.sqrt(r**2-2*r)\ndef area_cube(r):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    return 4*math.pi*r*math.sqrt(r**2-2*r)\ndef volume_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return r1*r2*r3*r4*3.1416\ndef length_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the length of an ellipsoid.\n    '''\n    return (r1*r2*r3*r4*3.1416)*3.1416\ndef area_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of an ellipsoid.\n    '''\n    return (r1*r2*r3*r4*3.1416)*3.1416\ndef volume_cube_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return (r1*r2*r3*r4*3.1416)*3.1416\ndef length_cube_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the length of an ellipsoid.\n    '''\n    return (r1*r2*r3*r4*3.1416)*3.1416\ndef area_cube_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of an ellipsoid.\n    '''\n    return (r1*r2*r3*r4*3.1416)*3.1416\ndef volume_cylinder_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*math.pi*r1*(r1+r2+r3+r4)\ndef length_cylinder_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the length of an ellipsoid.\n    '''\n    return (r1+r2+r3+r4)*math.sqrt(r1**2+r2**2+r3**2+r4**2)\ndef area_cylinder_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of an ellipsoid.\n    '''\n    return (r1+r2+r3+r4)*math.pi*r1*r1*(r1+r2+r3+r4)\ndef volume_cone_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*math.pi*r1*r1*r2*math.sqrt(r1**2+r2**2+r3**2+r4**2)\ndef length_cone_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the length of an ellipsoid.\n    '''\n    return (r1+r2+r3+r4)*math.sqrt(r1**2+r2**2+r3**2+r4**2)\ndef area_cone_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of an ellipsoid.\n    '''\n    return (r1+r2+r3+r4)*math.pi*r1*r2*r3*math.sqrt(r1**2+r2**2+r3**2+r4**2)\ndef volume_sphere_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*math.pi*r1*(r1+r2+r3+r4)**3\ndef length_sphere_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the length of an ellipsoid.\n    '''\n    return (r1+r2+r3+r4)*math.sqrt(r1**2+r2**2+r3**2+r4**2)\ndef area_sphere_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the area of an ellipsoid.\n    '''\n    return (r1+r2+r3+r4)*math.pi*r1*r2*r3*math.sqrt(r1**2+r2**2+r3**2+r4**2)\ndef volume_cube_ellipsoid_ellipsoid(r1,r2,r3,r4):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    return 4/3*math.pi*r1*"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #Calculate the volume of a cone\n    vol = r * h * math.pi * math.sin(math.pi * (r - 0.5))\n    print(\"Volume is: \" + str(vol))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*h*math.pi*(math.e)**(4/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    v = r**2 * pi * h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 4.0*math.pi*(r**2)*(h**2)\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pass"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #get volume of cone, as a function of the radius\n    volume = ((math.pi*r**2)*h)/4\n    print(\"Volume of cone is\",volume)\ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    #get volume of rectangle, as a function of the length\n    volume = ((math.pi*l*h)/4)\n    print(\"Volume of rectangle is\",volume)\ndef volume_square(l):\n    '''\n    Write a function that calculates the volume of a square.\n    '''\n    #get volume of square, as a function of the width\n    volume = (l*l)\n    print(\"Volume of square is\",volume)\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function that finds the area of a triangle.\n    '''\n    #get the area of the triangle\n    area = ((math.pow(a,2) + math.pow(b,2) + math.pow(c,2))/(2*a*b*c))\n    print(\"Area of triangle is\",area)\ndef area_of_rectangle(l,h):\n    '''\n    Write a function that finds the area of a rectangle.\n    '''\n    #get the area of the rectangle\n    area = ((l*h)\n            (l*h)*((math.pow(l,2) + math.pow(h,2))))\n    print(\"Area of rectangle is\",area)\ndef area_of_circle(r):\n    '''\n    Write a function that finds the area of a circle.\n    '''\n    #get the area of the circle\n    area = ((math.pi*(r**2))\n            (math.pow(r,2)))\n    print(\"Area of circle is\",area)\ndef area_of_sphere(r):\n    '''\n    Write a function that finds the area of a sphere.\n    '''\n    #get the area of the sphere\n    area = ((math.pi*(math.pow(r,2))))\n    print(\"Area of sphere is\",area)\ndef volume_of_circle(r):\n    '''\n    Write a function that finds the volume of a circle.\n    '''\n    #get the volume of the circle\n    volume = ((math.pi*(math.pow(r,2)))\n            (math.pow(r,3)))\n    print(\"Volume of circle is\",volume)\ndef volume_of_rectangle(l,h):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    #get the volume of the rectangle\n    volume = ((math.pow(l,2) + math.pow(h,2))\n                ((math.pow(l,2) + math.pow(h,2)))\n                ((math.pow(l,3) + math.pow(h,3))\n                ((math.pow(l,3) + math.pow(h,3))))\n    print(\"Volume of rectangle is\",volume)\ndef volume_of_square(l):\n    '''\n    Write a function that finds the volume of a square.\n    '''\n    #get the volume of the square\n    volume = ((math.pow(l,2))\n                (math.pow(l,3)))\n    print(\"Volume of square is\",volume)\ndef volume_of_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere.\n    '''\n    #get the volume of the sphere\n    volume = ((math.pow(r,2))\n                (math.pow(r,3)))\n    print(\"Volume of sphere is\",volume)\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    #get the volume of the cylinder\n    volume = ((math.pow(r,2)*(math.pow(h,2)))\n                (math.pow(r,3)*(math.pow(h,3))))\n    print(\"Volume of cylinder is\",volume)\ndef volume_of_rectangle(l,h):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    #get the volume of the rectangle\n    volume = ((math.pow(l,2) + math.pow(h,2))\n                (math.pow(l,3)*math.pow(h,3)))\n    print(\"Volume of rectangle is\",volume)\ndef volume_of_square(l):\n    '''\n    Write a function that finds the volume of a square.\n    '''\n    #get the volume of the square\n    volume = ((math.pow(l,2))\n                (math.pow(l,3)))\n    print(\"Volume of square is\",volume)\ndef volume_of_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere.\n    '''\n    #get the volume of the sphere\n    volume = ((math.pow(r,2)*(math.pow(r,3)))\n                (math.pow(r,3)))\n    print(\"Volume of sphere is\",volume)\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    #get the volume of the cylinder\n    volume = ((math.pow(r,2)*(math.pow(r,3)))\n                (math.pow(r,4)*(math.pow(h,3))))\n    print(\"Volume of cylinder is\",volume)\ndef volume_of_square(l):\n    '''\n    Write a function that finds the volume of a square.\n    '''\n    #get the volume of the square\n    volume = ((math.pow(l,2)*math.pow(l,3)))\n    print(\"Volume of square is\",volume)\ndef volume_of_sphere(r):\n    '''\n    Write a function that finds the volume of a sphere.\n    '''\n    #get the volume of the sphere\n    volume = ((math.pow(r,2)*(math.pow(r,3)))\n                (math.pow(r,4)))\n    print(\"Volume of sphere is\",volume)\ndef volume_of_rectangle(l,h):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    #get the volume of the rectangle\n    volume = ((math.pow(l,2)*math.pow(l,3))\n                (math.pow(l,4)))\n    print(\"Volume of rectangle is\",volume)\ndef volume_of_square(l):\n    '''\n    Write a function that finds the volume of a square.\n    '''\n    #get the volume of the square\n    volume = ((math.pow(l,2))\n                (math.pow(l,3)))\n    print(\"Volume of square is\",volume)\ndef volume_of_rectangle(l,h):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    #get the volume of the rectangle\n    volume = ((math.pow(l,2)*math.pow(l,3)))\n    print(\"Volume of rectangle is\",volume)\ndef volume_of_rectangle(l,h):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    #get the volume of the rectangle\n    volume = ((math.pow(l,2)*math.pow(l,3)))\n    print(\"Volume of rectangle is\",volume)\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that finds the volume of a cylinder.\n    '''\n    #get the volume of the cylinder\n    volume = ((math.pow(r,2)*(math.pow(r,3)))\n                (math.pow(r,4)*(math.pow(h,3))))\n    print(\"Volume of cylinder is\",volume)\ndef volume_of_rectangle(l,h):\n    '''\n    Write a function that finds the volume of a rectangle.\n    '''\n    #get the volume of the rectangle\n    volume = ((math.pow(l,2)*math.pow(l,3)))\n    print(\"Volume of rectangle is\""
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    result = 0\n    for i in range(2**(n-1)):\n        if (i):\n            if (i & 1):\n                result = result*2\n            else:\n                result = result*3\n    return result\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return n\n    return highest_Power_of_2(n - 1) + highest_Power_of_2(n // 2)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n == 1): \n        return n \n    if (n == 2): \n        return n \n    if (n % 2!= 0): \n        print(\"Number is not an even number\") \n        return \n    else: \n        result = highest_Power_of_2(n//2) \n        if(result < n): \n            return result \n        else: \n            return result \n        \ndef highest_Power_of_3(n): \n    '''\n    Write a python function to find the highest power of 3 that is less than or equal to n.\n    '''\n    if (n == 1): \n        return n \n    if (n == 2): \n        return n \n    if (n % 3!= 0): \n        print(\"Number is not an even number\") \n        return \n    else: \n        result = highest_Power_of_3(n//3) \n        if(result < n): \n            return result \n        else: \n            return result \n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max = 0\n    for i in range(1, n+1):\n        if (n % i) == 0:\n            max = i\n            break\n    return max\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    elif n % 2 == 0:\n        return 1\n    else:\n        return highest_Power_of_2(n // 2) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return None\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n*highest_Power_of_2(n-1)\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return_string = \"\"\n    for i in range(0, n+1):\n        if n % i == 0:\n            return_string +=''\n        else:\n            return_string += str(i)\n    return return_string\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # your code here\n    if n <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else:\n        l = highest_Power_of_2(n//2)\n        r = highest_Power_of_2(n-1)\n        return l * r\nprint(highest_Power_of_2(36))\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Declaring a list to hold the highest powers of 2 that are less than or equal to n.\n    highest_powers_2 = []\n    \n    # For loop to iterate the given n value through the range of 1 to 10.\n    for i in range(1, 11):\n        # For loop to iterate through the given n value.\n        for j in range(1, i + 1):\n            # For loop to iterate through the given n value and save the highest power of 2 found by the previous step in the loop.\n            # Save the value found by the previous step in the list.\n            highest_power_2 = highest_powers_2[-1]\n            \n            # For loop to iterate through the given n value and save the highest power of 2 found by the previous step in the loop.\n            # Save the value found by the previous step in the list.\n            highest_power_2 = highest_power_2 ** j\n            \n            # If the current value of highest_power_2 is less than or equal to the n value then it will add the value to the list and add the current value to the highest_powers_2.\n            # Otherwise it will add the value to the list and add the current value to the highest_powers_2.\n            if highest_power_2 < n:\n                highest_powers_2.append(highest_power_2)\n    \n    # Return the highest_powers_2 list.\n    return highest_powers_2\n    "
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 0\n    for i in range(1,n+1):\n        if i > 1:\n            lucas = lucas + (i * (i + 1) // 2)\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a = [1, 3, 9]\n    for i in range(2, n + 1):\n        a.append(a[i - 1] * a[i - 2])\n    return a[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 8\n    else:\n        return find_lucas(n-3) + find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if (n <= 1): \n        return n \n    else: \n        return find_lucas(n-1) + find_lucas(n-2) \n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(2, n+1):\n        if (n%i == 0):\n            return i\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return find_lucas(n - 2) + find_lucas(n - 1) + find_lucas(n - 3)\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    try:\n        n = int(n)\n        if n >= 2 and n <= 12:\n            return (n+1) * (n+1) // 2\n        else:\n            raise ValueError\n    except:\n        raise ValueError\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Your code goes here\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = str(list_[i]).replace('-', '')\n        list_[i] = list_[i].replace(' ', '')\n        list_[i] = list_[i].replace('-', '')\n        list_[i] = list_[i].replace('\\n', '')\n        list_[i] = list_[i].replace('\\t', '')\n        list_[i] = list_[i].replace('\\r', '')\n        list_[i] = list_[i].replace('\\b', '')\n        list_[i] = list_[i].replace('\\f', '')\n        list_[i] = list_[i].replace('\\xa0', '')\n        list_[i] = list_[i].replace('\\u00A0', '')\n        list_[i] = list_[i].replace('\\u00C0', '')\n        list_[i] = list_[i].replace('\\u00C1', '')\n        list_[i] = list_[i].replace('\\u00C2', '')\n        list_[i] = list_[i].replace('\\u00C3', '')\n        list_[i] = list_[i].replace('\\u00C4', '')\n        list_[i] = list_[i].replace('\\u00C5', '')\n        list_[i] = list_[i].replace('\\u00C6', '')\n        list_[i] = list_[i].replace('\\u00C7', '')\n        list_[i] = list_[i].replace('\\u00C8', '')\n        list_[i] = list_[i].replace('\\u00C9', '')\n        list_[i] = list_[i].replace('\\u00CA', '')\n        list_[i] = list_[i].replace('\\u00CB', '')\n        list_[i] = list_[i].replace('\\u00CC', '')\n        list_[i] = list_[i].replace('\\u00CD', '')\n        list_[i] = list_[i].replace('\\u00CE', '')\n        list_[i] = list_[i].replace('\\u00CF', '')\n        list_[i] = list_[i].replace('\\u00D0', '')\n        list_[i] = list_[i].replace('\\u00D1', '')\n        list_[i] = list_[i].replace('\\u00D2', '')\n        list_[i] = list_[i].replace('\\u00D3', '')\n        list_[i] = list_[i].replace('\\u00D4', '')\n        list_[i] = list_[i].replace('\\u00D5', '')\n        list_[i] = list_[i].replace('\\u00D6', '')\n        list_[i] = list_[i].replace('\\u00D7', '')\n        list_[i] = list_[i].replace('\\u00D8', '')\n        list_[i] = list_[i].replace('\\u00D9', '')\n        list_[i] = list_[i].replace('\\u00DA', '')\n        list_[i] = list_[i].replace('\\u00DB', '')\n        list_[i] = list_[i].replace('\\u00DC', '')\n        list_[i] = list_[i].replace('\\u00DD', '')\n        list_[i] = list_[i].replace('\\u00DE', '')\n        list_[i] = list_[i].replace('\\u00DF', '')\n        list_[i] = list_[i].replace('\\u00E0', '')\n        list_[i] = list_[i].replace('\\u00E1', '')\n        list_[i] = list_[i].replace('\\u00E2', '')\n        list_[i] = list_[i].replace('\\u00E3', '')\n        list_[i] = list_[i].replace('\\u00E4', '')\n        list_[i] = list_[i].replace('\\u00E5', '')\n        list_[i] = list_[i].replace('\\u00E6', '')\n        list_[i] = list_[i].replace('\\u00E7', '')\n        list_[i] = list_[i].replace('\\u00E8', '')\n        list_[i] = list_[i].replace('\\u00E9', '')\n        list_[i] = list_[i].replace('\\u00EA', '')\n        list_[i] = list_[i].replace('\\u00EB', '')\n        list_[i] = list_[i].replace('\\u00EC', '')\n        list_[i] = list_[i].replace('\\u00ED', '')\n        list_[i] = list_[i].replace('\\u00EE', '')\n        list_[i] = list_[i].replace('\\u00EF', '')\n        list_[i] = list_[i].replace('\\u00F0', '')\n        list_[i] = list_[i].replace('\\u00F1', '')\n        list_[i] = list_[i].replace('\\u00F2', '')\n        list_[i] = list_[i].replace('\\u00F3', '')\n        list_[i] = list_[i].replace('\\u00F4', '')\n        list_[i] = list_[i].replace('\\u00F5', '')\n        list_[i] = list_[i].replace('\\u00F6', '')\n        list_[i] = list_[i].replace('\\u00F7', '')\n        list_[i] = list_[i].replace('\\u00F8', '')\n        list_[i] = list_[i].replace('\\u00F9', '')\n        list_[i] = list_[i].replace('\\u00FA', '')\n        list_[i] = list_[i].replace('\\u00FB', '')\n        list_[i] = list_[i].replace('\\u00FC', '')\n        list_[i] = list_[i].replace('\\u00FD', '')\n        list_[i] = list_[i].replace('\\u00FE', '')\n        list_[i] = list_[i].replace('\\u00FF', '')\n        list_[i] = list_[i].replace('\\u0fff', '')\n        list_[i] = list_[i].replace('\\u10000', '')\n        list_[i] = list_[i].replace('\\u10001', '')\n        list_[i] = list_[i].replace('\\u10002', '')\n        list_[i] = list_[i].replace('\\u10003', '')\n        list_[i] = list_[i].replace('\\u10004', '')\n        list_[i] = list_[i].replace('\\u10005', '')\n        list_[i] = list_[i].replace('\\u10006', '')\n        list_[i] = list_[i].replace('\\u10007', '')\n        list_[i] = list_[i].replace('\\u10008', '')\n        list_[i] = list_[i].replace('\\u10009', '')\n        list_[i] = list_[i].replace('\\u10010', '')\n        list_[i] = list_[i].replace('\\u10011', '')\n        list_[i] = list_[i].replace('\\u10012', '')\n        list_[i] = list_[i].replace('\\u10013', '')\n        list_[i] = list_[i].replace('\\u10"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = element.replace(string, '')\n    return list"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        if string in i:\n            index = list_.index(i)\n            list_.insert(index, string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(list(map(str.format, string)))\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    output_list = []\n    for element in list_:\n        output_list.append(element.format(string))\n    return output_list\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    output = []\n    for item in list_:\n        output.append(item.format(string))\n    return output\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list_[:]\n    for i in range(len(list_)):\n        list_[i] = list_[i].format(string)\n    return list_\n    \n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        i = string.replace('{', '(').replace('}', ')').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('.', ',')\n        i = i.replace('<', '(').replace('>', ')').replace('^', '(').replace('*', '*')\n        i = i.replace('|', '|')\n        i = i.replace('-', '-')\n        i = i.replace('|', '|')\n        i = i.replace('!', '!').replace('&', '&')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('=', '=').replace('>', '>')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replace('>', ')').replace('^', '(').replace('*', '*')\n        i = i.replace('|', '|')\n        i = i.replace('!', '!').replace('&', '&')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replace('>', ')').replace('^', '(').replace('*', '*')\n        i = i.replace('|', '|')\n        i = i.replace('!', '!').replace('&', '&')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replace('>', ')').replace('^', '(').replace('*', '*')\n        i = i.replace('|', '|')\n        i = i.replace('!', '!').replace('&', '&')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replace('>', ')').replace('^', '(').replace('*', '*')\n        i = i.replace('|', '|')\n        i = i.replace('!', '!').replace('&', '&')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replace('>', ')')\n        i = i.replace('%', '%')\n        i = i.replace('&', '&')\n        i = i.replace('$', '$')\n        i = i.replace('&', '&')\n        i = i.replace('*', '*')\n        i = i.replace('(', '(').replace(')', ')').replace('{', '{').replace('}', '}').replace('<', '<').replace('>', '>').replace(',', ',')\n        i = i.replace('<', '(').replac"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    for el in list_:\n        if type(string) is not str:\n            print('The input is not a string!')\n            return\n        elif len(string) > 10:\n            print('String is too long!')\n            return\n        elif type(string) is not str:\n            print('String is not a string!')\n            return\n        elif string[0]!= '{':\n            print('String is not a formatted string!')\n            return\n        elif string[-1]!= '}':\n            print('String is not a formatted string!')\n            return\n        elif string[1]!= '{':\n            print('String is not a formatted string!')\n            return\n        else:\n            list_[list_.index(el)] = string\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) == len(l3):\n        d1 = {}\n        d2 = {}\n        d3 = {}\n        for i in range(len(l1)):\n            d1[l1[i]] = l1[i]\n        for i in range(len(l2)):\n            d2[l2[i]] = l2[i]\n        for i in range(len(l3)):\n            d3[l3[i]] = l3[i]\n        return d1, d2, d3\n    else:\n        return None\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        if l1[i] not in d.keys():\n            d[l1[i]] = []\n        d[l1[i]].append(l2[i])\n    for i in range(len(l2)):\n        if l2[i] not in d.keys():\n            d[l2[i]] = []\n        d[l2[i]].append(l3[i])\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in range(len(l1)):\n        d1[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        d1[l3[i]] = l3[i]\n    return d1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0:\n        return {}\n    if len(l2) == 0:\n        return {}\n    if len(l3) == 0:\n        return {}\n    if len(l1) > len(l2) and len(l2) > len(l3):\n        return {}\n    d = {}\n    for i, v in enumerate(l1):\n        if i == len(l1) - 1:\n            d[v] = {}\n        else:\n            d[v] = l1[i+1]\n    for i, v in enumerate(l2):\n        if i == len(l2) - 1:\n            d[v] = {}\n        else:\n            d[v] = l2[i+1]\n    for i, v in enumerate(l3):\n        if i == len(l3) - 1:\n            d[v] = {}\n        else:\n            d[v] = l3[i+1]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    list_dict = dict()\n    list_dict[\"first_key\"] = l1[0]\n    list_dict[\"second_key\"] = l2[0]\n    list_dict[\"third_key\"] = l3[0]\n    return list_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {k:convert_list_dictionary(v1, v2, v3) for k,v1 in l1.items() for v2,v3 in l2.items()}\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for k in l1:\n        d[k] = {}\n        for l in l2:\n            d[k][l] = l3[k][l]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {}\n    for i in range(0, len(l1)):\n        new_dict[l1[i]] = l2[i]\n    for i in range(0, len(l2)):\n        new_dict[l1[i]] = l3[i]\n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    def convert_list_dictionary_back(l1, l2, l3):\n        '''\n        Write a function to convert more than one dictionary to list.\n        '''\n        \n        def convert_list_dictionary_back_except(l1, l2, l3):\n            '''\n            Write a function to convert more than one dictionary to list.\n            '''\n            \n            def convert_list_dictionary_back_except_except(l1, l2, l3):\n                '''\n                Write a function to convert more than one dictionary to list.\n                '''\n                \n                def convert_list_dictionary_back_except_except_except(l1, l2, l3):\n                    '''\n                    Write a function to convert more than one dictionary to list.\n                    '''\n                    \n                    def convert_list_dictionary_back_except_except_except_except(l1, l2, l3):\n                        '''\n                        Write a function to convert more than one dictionary to list.\n                        '''\n                        \n                        def convert_list_dictionary_back_except_except_except_except_except(l1, l2, l3):\n                            '''\n                            Write a function to convert more than one dictionary to list.\n                            '''\n                            \n                            def convert_list_dictionary_back_except_except_except_except_except_except(l1, l2, l3):\n                                '''\n                                Write a function to convert more than one dictionary to list.\n                                '''\n                                \n                                def convert_list_dictionary_back_except_except_except_except_except_except_except(l1, l2, l3):\n                                    '''\n                                    Write a function to convert more than one dictionary to list.\n                                    '''\n                                    \n                                    def convert_list_dictionary_back_except_except_except_except_except_except_except(l1, l2, l3):\n                                        '''\n                                        Write a function to convert more than one dictionary to list.\n                                        '''\n                                        \n                                        def convert_list_dictionary_back_except_except_except_except_except_except_except_except_except(l1, l2, l3):\n                                            '''\n                                            Write a function to convert more than one dictionary to list.\n                                            '''\n                                            \n                                            def convert_list_dictionary_back_except_except_except_except_except_except_except_except_except_except_except(l1, l2, l3):\n                                                '''\n                                                Write a function to convert more than one dictionary to list.\n                                                '''\n                                                \n                                                def convert_list_dictionary_back_except_except_except_except_except_except_except_except_except_except_except(l1, l2, l3):\n                                                    '''\n                                                    Write a function to convert more than one dictionary to list.\n                                                    '''\n                                                    \n                                                    def convert_list_dictionary_back_except_except_except_except_except_except_except_except_except_except_except(l1, l2, l3):\n                                                        '''\n                                                        Write a function to convert more than one dictionary to list.\n                                                        '''\n                                                        \n                                                        def convert_list_dictionary_back_except_except_except_except_except_except_except_except_except_except(l1, l2, l3):\n                                                            '''\n                                                            Write a function to convert more than one dictionary to list.\n                                                            '''\n                                                            \n                                                            def convert_list_dictionary_back_except_except_except_except_except_except_except_except_except_except_except(l1, l2, l3):\n                                                                '''\n                                                                Write a function to convert more than one dictionary to list.\n                                                                '''\n                                                                \n                                                                def convert_list_dictionary_back_except_except_except_except_except_except_except_except_except_except(l1, l2, l3):\n                                                                    '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except_except_except_except_except_except_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except_except_except_except_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except_except_except_except_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except_except_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except(l1, l2, l3):\n                                                                        '''\n                                                                    Write a function to convert more than one dictionary to list.\n                                                                    '''\n                                                                    \n                                                                    def convert_list_dictionary_back_except_except(l1, l2, l3):\n                                                                        '"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    # Build the dictionary\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n    # Recursively call function\n    d1 = convert_list_dictionary(l1[1:], l2[1:], l3[1:])\n    # Return the dictionary\n    return d1\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return get_max_sum (n / 2) + get_max_sum (n / 3) + get_max_sum (n / 4) + get_max_sum (n / 5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    num_list = [1,3,5,7,9]\n    if n in num_list:\n        return num_list[num_list.index(n)]\n    else:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    from math import gcd\n    max_sum = 0\n    for n in range (1, n+1):\n        max_sum += gcd(n, n)\n        if n % 2 == 0:\n            max_sum += gcd(n, n//2)\n        if n % 3 == 0:\n            max_sum += gcd(n, n//3)\n        if n % 4 == 0:\n            max_sum += gcd(n, n//4)\n        if n % 5 == 0:\n            max_sum += gcd(n, n//5)\n    return max_sum\ndef get_num_of_primes (n):\n    '''\n    Write a function to determine how many numbers are primes up to n.\n    '''\n    count = 0\n    for n in range (2, n):\n        if all (n % i == 0 for i in range (2, n)):\n            count += 1\n    return count\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 10\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Write your code here.\n    return (f(n/2) + f(n/3) + f(n/4) + f(n/5))"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n*(n+1)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n <= 0:\n        return 0\n    else:\n        return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for n in range(1, 6, 1):\n        max_sum = max(max_sum, sum(f(n) for f in (max_mult, min_mult, sqrt_mult)))\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return max(f(n/2), f(n/3), f(n/4), f(n/5)) + n\n    \n    max_sum = 0\n    for n in range(1,n):\n        if f(n) > max_sum:\n            max_sum = f(n)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    f = lambda n: max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return f(n)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list)\n    for i in range(len(input_list)):\n        if input_list[i] > max_length:\n            max_length = input_list[i]\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #initialize empty list\n    max_length = []\n    #loop through list\n    for x in input_list:\n        #if list is not empty\n        if x!= None:\n            #if list is not in max_length append it to max_length\n            if len(x) > len(max_length):\n                max_length = x\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 0\n    elif len(input_list) == 1:\n        return input_list[0]\n    elif len(input_list) == 2:\n        if input_list[0] > input_list[1]:\n            return input_list[0]\n        else:\n            return input_list[1]\n    else:\n        if input_list[0] > input_list[1]:\n            return max(input_list[0:2])\n        else:\n            return max(input_list[1:])\n    "
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #write your code here\n    #pass\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    new_list = []\n    for i in input_list:\n        new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #initialize an empty list\n    output_list = []\n    for number in input_list:\n        output_list.append(number)\n    #Iterate through list\n    for number in range(0,len(output_list)):\n        output_list[number] = output_list[number].split('-')\n    output_list.sort(reverse=True)\n    #iterate through list\n    for number in range(0,len(output_list)):\n        output_list[number] = output_list[number]\n    return output_list\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = input_list[0]\n    for i in input_list:\n        if i > maximum:\n            maximum = i\n    return maximum\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    output = []\n    for i in input_list:\n        if len(i) > len(output):\n            output = i\n    return output\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Convert the list to string and split it into list of strings\n    # convert the list into a list of strings and then replace the \n    # indexes with characters\n    str_list = str(input_list)\n    str_list = str_list.replace('[','')\n    str_list = str_list.replace(']','')\n    str_list = str_list.replace('\\n','')\n    str_list = str_list.split(',')\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for val in test_tup:\n        if val in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = True\n    for i in test_tup:\n        if i in test_tup:\n            distinct = False\n    if distinct:\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n    \ndef find_missing_values(test_tup):\n    '''\n    Write a function to find all missing values in given tuple.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in (\"NaN\", \"nan\", \"\", \"n/a\"):\n            return None\n    return test_tup\n    \ndef find_missing_values_with_indices(test_tup, index_list):\n    '''\n    Write a function to find all missing values in given tuple\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if i not in index_list:\n            return test_tup\n    return None\n    \ndef check_duplicates(test_tup):\n    '''\n    Write a function to check if given tuple contains only duplicate elements.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] not in (\"\", \"null\", \"nan\", \"?\", \"null\", \"nan\", \"\", \"null\", \"nan\", \"\", \"nan\", \"\", \"null\", \"\", \"nan\", \"null\"):\n            return False\n    return True\n    \ndef find_missing_values_and_indices(test_tup):\n    '''\n    Write a function to find all missing values in given tuple\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in (\"\", \"null\", \"nan\", \"?\", \"null\", \"nan\", \"\", \"null\", \"nan\", \"\", \"nan\", \"\", \"null\", \"\", \"nan\", \"null\"):\n            return test_tup\n    return None\n    \ndef find_missing_values_and_indices_with_index(test_tup, index_list):\n    '''\n    Write a function to find all missing values in given tuple\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if i not in index_list:\n            return test_tup\n    return None\n        \ndef check_duplicates_with_index(test_tup, index_list):\n    '''\n    Write a function to check if given tuple contains only duplicate elements\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in (\"\", \"null\", \"nan\", \"?\", \"null\", \"nan\", \"\", \"null\", \"nan\", \"\", \"nan\", \"\", \"null\", \"\", \"nan\", \"null\"):\n            return False\n    for i in index_list:\n        if i not in index_list:\n            return False\n    return True\n    \ndef check_duplicates_with_index_and_indices(test_tup, index_list):\n    '''\n    Write a function to check if given tuple contains only duplicate elements\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in (\"\", \"null\", \"nan\", \"?\", \"null\", \"nan\", \"\", \"null\", \"nan\", \"\", \"nan\", \"\", \"null\", \"\", \"nan\", \"null\"):\n            return False\n    for i in index_list:\n        if i not in index_list:\n            return False\n    return True\n    \ndef check_duplicates_with_index_and_indices_with_index(test_tup, index_list):\n    '''\n    Write a function to check if given tuple contains only duplicate elements\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in (\"\", \"null\", \"nan\", \"?\", \"null\", \"nan\", \"\", \"null\", \"nan\", \"\", \"nan\", \"\", \"null\", \"\", \"nan\", \"null\"):\n            return False\n    for i in index_list:\n        if i not in index_list:\n            return False\n    return True\n    \ndef check_duplicates_and_indices(test_tup):\n    '''\n    Write a function to check if given tuple contains only duplicate elements\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in (\"\", \"null\", \"nan\", \"?\", \"null\", \"nan\", \"\", \"null\", \"nan\", \"\", \"nan\", \"\", \"null\", \"\", \"nan\", \"null\"):\n            return False\n    return True\n    \ndef check_duplicates_and_indices_with_index(test_tup, index_list):\n    '''\n    Write a function to check if given tuple contains only duplicate elements\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in (\"\", \"null\", \"nan\", \"?\", \"null\", \"nan\", \"\", \"null\", \"nan\", \"\", \"nan\", \"\", \"null\", \"\", \"nan\", \"null\"):\n            return False\n    for i in index_list:\n        if i not in index_list:\n            return False\n    return True\n    \ndef check_duplicates_and_indices_with_index_and_indices(test_tup, index_list):\n    '''\n    Write a function to check if given tuple contains only duplicate elements\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in (\"\", \"null\", \"nan\", \"?\", \"null\", \"nan\", \"\", \"null\", \"nan\", \"\", \"nan\", \"\", \"null\", \"\", \"nan\", \"null\"):\n            return False\n    for i in index_list:\n        if i not in index_list:\n            return False\n    return True\n    \ndef check_duplicates_and_indices_with_index_and_indices_with_index(test_tup, index_list):\n    '''\n    Write a function to check if given tuple contains only duplicate elements\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in (\"\", \"null\", \"nan\", \"?\", \"null\", \"nan\", \"\", \"null\", \"nan\", \"\", \"nan\", \"\", \"null\", \"\", \"nan\", \"null\"):\n            return False\n    for i in index_list:\n        if i not in index_list:\n            return False\n    return True\n    \ndef check_missing_values(test_tup):\n    '''\n    Write a function to check if given tuple contains only missing values.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] in (\"\", \"null\", \"nan\", \"?\", \"null\", \"nan\", \"\", \"null\", \"nan\", \"\", \"nan\", \"\", \"null\", \"\", \"nan\", \"null\"):\n            return None\n    return test_tup\n    \ndef check_missing_values_with_indices(test_tup, index_list):\n    '''\n    Write a function to check if given tuple contains only missing values\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if i not in index_list:\n            return test_tup\n    return None\n    \ndef check_missing_values_with_indices_and_indices(test_tup, index_list):\n    '''\n    Write a function to check if given tuple contains only missing values\n    whose index is in the given list.\n    '''\n    for i in range(len(test_tup)):\n        if i not in index_list:\n            return test_tup\n    return None\n    \ndef check_missing_values_and_indices(test_tup, index_list):\n    '''\n    Write a function to check if given tuple contains only missing values\n    whose index is in the given list.\n    '''\n    for i in range"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # use set to create a set\n    set_tuple = set(test_tup)\n    return len(set_tuple) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup[0] in test_tup[1:]:\n        print(\"Error, because of duplicates.\")\n        return 0\n    return 1\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    # check if tuple is not empty\n    if len(test_tup) == 0:\n        return True\n    \n    # check if tuple has unique elements\n    check_tup = tuple(sorted(test_tup))\n    if len(check_tup) == len(set(check_tup)):\n        return True\n    \n    # return False if list is not of same length\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    \n    # return True if set is not of same length\n    for i in range(len(test_tup)):\n        if test_tup[i] in set(check_tup):\n            return False\n    \n    # return True if set contains duplicate elements\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set1 = set(test_tup)\n    return len(set1) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set\n    set_tuple = set(test_tup)\n    # if there are no duplicates, we return true\n    if len(set_tuple) == 0:\n        return True\n    # if there are duplicates, we return false\n    return False\n    \n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup in set(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    print(str1)\n    result = \"\"\n    for i in str1:\n        if str1.count(i) == 1:\n            result = result + i\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict_first_non_repeating_characters = {}\n    for element in str1:\n        if element not in dict_first_non_repeating_characters:\n            dict_first_non_repeating_characters[element] = 1\n        else:\n            dict_first_non_repeating_characters[element] += 1\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    character_count = {}\n    for letter in str1:\n        if letter in character_count:\n            character_count[letter] += 1\n        else:\n            character_count[letter] = 1\n    for key in character_count:\n        if character_count[key] == 1:\n            return key\n    return 'Error'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Initialize a set with all characters in the string\n    str_set = set(str1)\n    #Loop through each character in the string\n    for char in str_set:\n        #If the current character is not the same as the previous character, then increment the counter by 1\n        if char!= str1[0]:\n            str_set.add(char)\n    #If the string set has a single character, then the character is the first non-repeated character\n    if len(str_set) == 1:\n        return str_set.pop()\n    else:\n        #Return the first character of the string\n        return str_set.pop()\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # TODO: Write your code here\n    # Note: if you see this line in the code, it means you are doing a bit of coding.\n    # I can probably figure out how you will code the code, and how you will know that\n    # because you are a bit of coding.\n    '''\n    s = input(\"Give me a string: \")\n    c = s.count(\" \")\n    if c!= 0:\n        for i in range(len(s)):\n            if s[i] == s[i-1]:\n                pass\n            else:\n                print(s[i])\n                break\n    '''\n    # TODO: Write your code here\n    # Note: if you see this line in the code, it means you are doing a bit of coding.\n    # I can probably figure out how you will code the code, and how you will know that\n    # because you are a bit of coding.\n    '''\n    c = s.count(\" \")\n    if c > 0:\n        for i in range(len(s)):\n            if s[i] == s[i-1]:\n                pass\n            else:\n                print(s[i])\n                break\n    '''\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    arr = list(str1.lower())\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            return arr[i]\n    return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    return \"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in count:\n        if count[i]!= 1:\n            return i\n    return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # remove spaces, convert to lowercase\n    str1 = str1.lower()\n    # loop through characters and check if the character occurs only once in the string\n    for i in range(len(str1)):\n        if str1[i] == str1[i+1]:\n            continue\n        else:\n            return str1[i]\n    return 'a'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counter = {}\n    for c in str1:\n        counter[c] = counter.get(c, 0) + 1\n    for i in counter:\n        if counter[i] == 1:\n            return i\n    return \"None\"\n    \nprint(first_non_repeating_character(\"abcdefghijklm\"))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not(string):\n        return False\n    elif len(string) == 1:\n        return True\n    else:\n        string = string.lower()\n        if re.search(regex, string):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not isinstance(string, str):\n        raise TypeError('string must be str')\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \ndef main():\n    while(1):\n        try:\n            inp = input()\n        except EOFError:\n            break\n        if not inp:\n            continue\n        elif check_char(inp):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nif __name__==\"__main__\":\n    main()"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    for c in string:\n        if re.match(regex,c): return True\n    return False\ndef check_digits(string):\n    '''\n    Write a function to check whether the given string contains the digits of numbers or not.\n    '''\n    string = string.replace(\",\",\"\")\n    string = string.replace(\".\",\"\")\n    if string.isalpha():\n        return True\n    else:\n        return False\ndef check_lower(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same lower case characters or not.\n    '''\n    string = string.replace(\",\",\"\")\n    string = string.replace(\".\",\"\")\n    if string.isalpha():\n        return True\n    else:\n        return False\ndef check_upper(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same upper case characters or not.\n    '''\n    string = string.replace(\",\",\"\")\n    string = string.replace(\".\",\"\")\n    if string.isalpha():\n        return True\n    else:\n        return False\ndef check_phone(string):\n    '''\n    Write a function to check whether the given string contains the digits of numbers or not.\n    '''\n    string = string.replace(\",\",\"\")\n    string = string.replace(\".\",\"\")\n    if string.isdigit():\n        return True\n    else:\n        return False\ndef check_date(string):\n    '''\n    Write a function to check whether the given string contains the date in a format like yyyy-mm-dd.\n    '''\n    if (string.endswith(\"-\")):\n        string = string[:-1]\n    if (string.endswith(\".\")) and (string.replace(\".\",\"\")[0]!= \"0\"):\n        return True\n    else:\n        return False\ndef check_time(string):\n    '''\n    Write a function to check whether the given string contains the time in a format like hh:mm:ss.\n    '''\n    if (string.startswith(\"[\")):\n        string = string[1:]\n    if (string.startswith(\" \")):\n        string = string[1:]\n    if (string.endswith(\":\")):\n        string = string[:-1]\n    if (string.endswith(\".\")) and (string.replace(\".\",\"\")[0]!= \"0\"):\n        return True\n    else:\n        return False\ndef check_other(string):\n    '''\n    Write a function to check whether the given string contains the special character \":\", \",\" and \".\" or not.\n    '''\n    if string[0] == \":\":\n        return True\n    else:\n        return False\ndef check_only_digit(string):\n    '''\n    Write a function to check whether the given string contains only digits or not.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\ndef get_all_char(string):\n    '''\n    Write a function to check whether the given string contains all characters in the given string or not.\n    '''\n    return list(string)\ndef is_zero(string):\n    '''\n    Write a function to check whether the given string starts with a zero or not.\n    '''\n    if string.startswith(\"0\") and (string.replace(\"0\",\"\")!= \"\"):\n        return True\n    else:\n        return False\ndef is_other(string):\n    '''\n    Write a function to check whether the given string starts with a non numeric character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_zero(string) or is_other(string)\ndef is_digit(string):\n    '''\n    Write a function to check whether the given string starts with a numeric character or not.\n    '''\n    if string.isdigit():\n        return True\n    else:\n        return False\ndef is_digit_lower(string):\n    '''\n    Write a function to check whether the given string starts with a lower case character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_digit(string)\ndef is_digit_upper(string):\n    '''\n    Write a function to check whether the given string starts with an upper case character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_digit(string)\ndef is_digit_upper_lower(string):\n    '''\n    Write a function to check whether the given string starts with a lower case character and a upper case character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_digit(string)\ndef is_digit_lower_upper(string):\n    '''\n    Write a function to check whether the given string starts with a lower case character and an upper case character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_digit(string)\ndef is_character(string):\n    '''\n    Write a function to check whether the given string contains a character or not.\n    '''\n    if string.isalpha():\n        return True\n    else:\n        return False\ndef is_digit_upper(string):\n    '''\n    Write a function to check whether the given string starts with an upper case character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_digit(string)\ndef is_digit_lower(string):\n    '''\n    Write a function to check whether the given string starts with an upper case character and a lower case character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_digit(string)\ndef is_digit_lower_upper(string):\n    '''\n    Write a function to check whether the given string starts with a lower case character and an upper case character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_digit(string)\ndef is_digit_upper_lower(string):\n    '''\n    Write a function to check whether the given string starts with an upper case character and an lower case character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_digit(string)\ndef is_digits(string):\n    '''\n    Write a function to check whether the given string contains digits or not.\n    '''\n    return string.isdigit()\ndef is_word(string):\n    '''\n    Write a function to check whether the given string starts with a word or not.\n    '''\n    return string.endswith(\" \") or string.endswith(\".\")\ndef is_upper(string):\n    '''\n    Write a function to check whether the given string starts with an upper case character or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\ndef is_lower(string):\n    '''\n    Write a function to check whether the given string starts with a lower case character or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False\ndef is_digit_upper_lower(string):\n    '''\n    Write a function to check whether the given string starts with a lower case character and an upper case character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_digit(string) or is_digit_upper_lower(string)\ndef is_digit_upper_lower_upper(string):\n    '''\n    Write a function to check whether the given string starts with a lower case character and an upper case character and an upper case character or not.\n    '''\n    return string.isalpha() or string.isdigit() or is_digit(string) or is_digit_upper_lower(string) or is_digit_upper_lower(string) or is_digit_upper_lower(string) or is_digit_upper_lower(string) or is_digit_upper_lower(string) or is_digit_upper_lower(string) or is_digit_upper_lower(string) or is_digit_upper_lower(string) or is_digit_upper_lower(string) or is_digit_upper_lower(string) or i"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    def is_same_char(char):\n        return char in string\n    return re.search(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #a pattern of a character is a string of 2 or more characters that ends with the same character as the given string.\n    # The function takes a string as parameter.\n    # The function returns True if the given string is valid and False otherwise.\n    p = re.compile(r'^(\\w)(\\w+)(\\w+)$')\n    result = p.search(string)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return not (string.startswith('-'))\ndef check_sub_char(string):\n    '''\n    Write a function to check whether the given string ends with the same character or not.\n    '''\n    return not (string.endswith('-'))\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # TO DO\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #Define variables to store the three numbers \n    number_a = a \n    number_b = b \n    number_c = c \n    \n    #Find the average of the three numbers \n    a = float(number_a + number_b + number_c) /3 \n    b = float(number_a * 2 + number_b * 2 + number_c) /3 \n    c = float(number_a * 3 + number_b * 3 + number_c) /3 \n    \n    #Return the average of the three numbers \n    return a \n    \n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if not a or not b or not c:\n        return 'Invalid input'\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and b > c:\n        return (a+b+c)/3\n    elif a > b:\n        return (a+c)/2\n    elif a > c:\n        return (b+c)/2\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num1 = a\n    num2 = b\n    num3 = c\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    num=[]\n    num.append(a)\n    num.append(b)\n    num.append(c)\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Your code here\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Your code here\n    # complete the function\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a>b and a>c):\n        return a\n    if (b>a and b>c):\n        return b\n    if (c>a and c>b):\n        return c\n    if (a>b and a>c):\n        return a\n    if (b>a and b>c):\n        return b\n    if (c>a and c>b):\n        return c\n    return a\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    x = int(a)\n    y = int(b)\n    z = int(c)\n    m = (x+y+z)/3\n    return m\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    #FIRST PASS\n    #sum = 0\n    #for num in nums:\n        #sum = sum + int(num)\n    #return sum\n    \n    # SECOND PASS\n    #return sum(x for x in nums if type(x)==int)\n    \n    #FIRST PASS\n    #sum = sum(map(int, str(nums)))\n    #return sum\n    \n    #SECOND PASS\n    return sum(map(int, str(nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n    \n    \n    \n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for n in nums:\n        sum += n % 10\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(num) for num in nums if num.isdigit()])\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += i\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(nums)\n    #raise NotImplementedError\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through numbers and add to a variable\n    sum_of_digits_ = 0\n    for i in nums:\n        sum_of_digits_ += i\n    # Return the sum of digits\n    return sum_of_digits_\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum(digits):\n        s = 0\n        for i in range(len(digits)):\n            s = s + int(digits[i])\n        return s\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int,str(nums)))\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = 0\n    for i in range(len(test_tup1)):\n        xor ^= test_tup1[i] * test_tup2[i]\n    return xor\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result = result ^ test_tup1[i]\n    for i in range(len(test_tup2)):\n        result = result ^ test_tup2[i]\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    temp = []\n    for i in test_tup1:\n        temp.append(i)\n    for i in test_tup2:\n        temp.append(i)\n    return tuple(temp)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    print('\\n# Bitwise XOR')\n    print('Tests:\\n- Tuple 1 = ', test_tup1, '\\n- Tuple 2 = ', test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = int(test_tup1[i][0]) ^ int(test_tup2[i][0])\n        result.append(str(temp))\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = 0\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Input tuples have different length\")\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Write your code here.\n    tup_1_c = []\n    tup_2_c = []\n    for i in range(len(test_tup1)):\n        tup_1_c.append(test_tup1[i][0])\n        tup_2_c.append(test_tup2[i][0])\n    tup_1 = tuple(tup_1_c)\n    tup_2 = tuple(tup_2_c)\n    result = 0\n    for i in range(len(tup_1)):\n        result = result ^ tup_1[i]\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(sorted(test_tup1))\n    test_tup2 = tuple(sorted(test_tup2))\n    print(test_tup1, test_tup2)\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup2[0]\n    x = a & b\n    return x\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xored_tup1 = []\n    for tup in test_tup1:\n        xored_tup1.append(tup[0] ^ tup[1])\n    for tup in test_tup2:\n        xored_tup2.append(tup[0] ^ tup[1])\n    return xored_tup1, xored_tup2\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # TO DO: Replace this with the function developed in class\n    freq_dict = collections.Counter(test_list)\n    return freq_dict\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = 0\n    test = list(test_list.keys())\n    for key in test:\n        result += len(test_list[key])\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # TO DO - write your logic here\n    return len(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count=0\n    for i in test_list:\n        count+=len(i)\n    return count\n    \n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for test_set in test_list:\n        for key, value in test_set.items():\n            if key in freq_dict:\n                freq_dict[key] += 1\n            else:\n                freq_dict[key] = 1\n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    tuple_counts = dict()\n    for item in test_list:\n        if item[0] not in tuple_counts.keys():\n            tuple_counts[item[0]] = 1\n        else:\n            tuple_counts[item[0]] += 1\n    return tuple_counts\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return len(freq.keys())\n    \n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # start\n    test_list = set(test_list)\n    # end\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    l = [len(test) for test in test_list]\n    \n    freq = {}\n    for t in test_list:\n        if t in freq:\n            freq[t] += 1\n        else:\n            freq[t] = 1\n    \n    return freq\n    \n    \ndef find_clusters(freq_lst, max_freq):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    clusters = {}\n    \n    # Create clusters\n    for k, v in freq_lst.items():\n        if v in clusters:\n            clusters[v].append(k)\n        else:\n            clusters[v] = [k]\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_2(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_3(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_4(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_5(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_6(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_7(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_8(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_9(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_10(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_11(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_12(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_13(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_14(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_15(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_16(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_17(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_18(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_19(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_20(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_21(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_22(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_23(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_24(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_25(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_26(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_27(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_28(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_29(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_30(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_31(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_32(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_33(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_34(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n    '''\n    \n    # Return the clusters\n    return clusters\n    \n    \ndef find_clusters_35(clusters, max_clusters):\n    '''\n    Write a function to find a given number of clusters.\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Define variables\n    index_1 = 0\n    index_2 = 0\n    index_3 = 0\n    # Define nested tuples\n    nested_tuple1 = (test_tup1[0], test_tup1[1], test_tup1[2])\n    nested_tuple2 = (test_tup2[0], test_tup2[1], test_tup2[2])\n    # Loop through nested tuples\n    for index_1 in range(3, len(test_tup1)):\n        # Create a new list\n        new_list1 = list(nested_tuple1)\n        new_list2 = list(nested_tuple2)\n        # Append the new list to the list\n        new_list1.append(test_tup1[index_1])\n        new_list2.append(test_tup2[index_2])\n        # Create an index of 0\n        index_3 = 0\n        # Loop through nested tuples\n        for index_2 in range(3, len(new_list2)):\n            # Create a new list\n            new_list3 = list(new_list1)\n            # Append the new list to the list\n            new_list3.append(new_list2[index_2])\n            # Create an index of 1\n            index_3 = index_3 + 1\n        # Create the index of 2\n        index_1 = index_1 + index_2\n    # Return the index of the second tuple\n    return index_2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # return tuple([(x1+x2) for x1, x2 in zip(test_tup1, test_tup2)])\n    return tuple([(x1+x2) for x1, x2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # get a list of the two nested tuples\n    test_tup1_list = test_tup1\n    test_tup2_list = test_tup2\n    test_tup1 = test_tup1.tolist()\n    test_tup2 = test_tup2.tolist()\n    \n    # check if the length of the two nested tuples is equal\n    if len(test_tup1_list)!= len(test_tup2_list):\n        raise ValueError(f'Length of lists do not match: {len(test_tup1_list)}!= {len(test_tup2_list)}')\n    \n    # create a new list with the index of each element of each nested tuple\n    tup_index_list = [0] * (len(test_tup1_list[0]))\n    for i in range(len(test_tup1_list)):\n        for j in range(len(test_tup2_list[0])):\n            tup_index_list[j] = tup_index_list[j] + 1\n    \n    # create a new list of the two nested tuples\n    add_list = list()\n    for i in range(len(tup_index_list)):\n        add_list.append((test_tup1_list[i][tup_index_list[i]-1], test_tup2_list[i][tup_index_list[i]-1]))\n    \n    return add_list\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # code here\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = test_tup1[0] + test_tup1[1]\n    test_tup2 = test_tup2[0] + test_tup2[1]\n    return test_tup1, test_tup2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Your code here\n    nested_tuple1 = (test_tup1[0], test_tup1[1])\n    nested_tuple2 = (test_tup2[0], test_tup2[1])\n    return nested_tuple1 + nested_tuple2\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    if test_tup1 is None or test_tup2 is None:\n        return None\n    elif len(test_tup1) == 1:\n        return test_tup1[0] + test_tup2[0]\n    elif len(test_tup1) == 2:\n        return test_tup1[0] + test_tup1[1] + test_tup2[0]\n    elif len(test_tup1) == 3:\n        return test_tup1[0] + test_tup1[1] + test_tup1[2] + test_tup2[0] + test_tup2[1] + test_tup2[2]\n    else:\n        return None\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for index, tuple1 in enumerate(test_tup1):\n        for index, tuple2 in enumerate(test_tup2):\n            if index < len(test_tup1):\n                if index < len(test_tup2):\n                    print(f'{tuple1} + {tuple2} = {tuple1 + tuple2}')\n                else:\n                    print(f'{tuple1} + {tuple2} = {tuple1 + tuple2}')\n            else:\n                print(f'{tuple1} + {tuple2} = {tuple1 + tuple2}')"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    t1 = test_tup1\n    t2 = test_tup2\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min=a\n    if b<min:\n        min=b\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return 'Invalid arguments.'\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        a,b=b,a\n    a=a%10\n    b=b%10\n    minimum=a\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimum=min(minimum,b)\n    minimum=min(minimum,a)\n    minimu"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    if a<b:\n        return b\n    return a\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    # your code goes here\n    min_num = a\n    if a < b:\n        min_num = b\n    return min_num\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum = float('inf')\n    if a > b:\n        minimum = a\n        a = b\n        b = minimum\n    if b > a:\n        minimum = b\n        b = a\n        a = minimum\n    return a,b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        min=a\n    else:\n        min=b\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if (a<b) else b\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex: \n        if x == tuple1: \n            return True\n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    try:\n        tuplex.index(tuple1)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if tuple1 == i:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"tuplex must be tuple\")\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 == None:\n        print('No Tuple!')\n        return True\n    else:\n        for i in range(0,len(tuplex)):\n            if tuplex[i] == tuple1:\n                return True\n        print('No Tuple!')\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if isinstance(tuplex, tuple):\n        for i in tuplex:\n            if isinstance(i,int):\n                if tuplex.count(i) > 0:\n                    return True\n            else:\n                if tuplex.count(i) > 1:\n                    return True\n    else:\n        if tuplex.count(tuple1) > 0:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex[0] == tuple1:\n        print(\"That's a tuple.\")\n    else:\n        print(\"That's not a tuple.\")\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for tuplex_tuple in tuplex:\n        if tuplex_tuple[0] == tuplex[1] and tuplex_tuple[1] == tuplex[2]:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #print(tuplex)\n    \n    for x in tuplex:\n        #print(x)\n        if x in tuple1:\n            return True\n        #print(x)\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef find_Quad_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is even.\n    '''\n    if x % 4 == 0:\n        return True\n    else:\n        return False\n    \ndef find_Squared_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is even.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef find_Hexagon_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is even.\n    '''\n    if x % 6 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        print(\"The number is even.\")\n        return 0\n    else:\n        print(\"The number is odd.\")\n        return 1\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Your code here\n    return x % 2 == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y=x\n    if x==2 or x==4:\n        y=x\n    elif x%2==0:\n        y=x-1\n    return y\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x == 0): \n        print(\"No PArity\")\n    elif (x % 2) == 0: \n        print(x, \"is Even\")\n    else: \n        print(x, \"is Odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n    \nx = int(input('Enter a number: '))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    l = list(n)\n    return str(int(''.join(l[i] for i in range(len(n)) if not l[i].isdigit())) + int(''.join(l[i] for i in range(len(n)) if l[i].isdigit())))\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # write your code here\n    if n<10:\n        return n\n    while n%10!=0:\n        n=n//10\n    return n*10 + n%10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        new_number = n % 10\n        n = n // 10\n        return rearrange_bigger(n) + new_number\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 0:\n        return 0\n    if n <= 9:\n        return n\n    if n >= 10:\n        return n % 10 + rearrange_bigger(n // 10)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n = n[::-1]\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(num,rem):\n        if num < 10:\n            return num\n        else:\n            rem = num % 10\n            if rem!= 0:\n                return next_bigger(rem,10)\n            else:\n                return next_bigger(rem,5)\n    return next_bigger(num,n)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    a = []\n    b = []\n    while n>0:\n        a.append(n%10)\n        n = n//10\n    for i in a:\n        b.append(i)\n    return b\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    result = ''\n    for i in range(n):\n        result += str(i + 1)\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    rev = 0\n    while n >= 10:\n        rev = rev * 10 + n % 10\n        n = n // 10\n    return rev\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    temp = str(n)\n    digits = list(temp)\n    for i in range(0,len(digits),2):\n        digits[i] = str(digits[i]*10)\n    digits = digits[::-1]\n    digits = ''.join(digits)\n    return int(digits)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    pq = []\n    heapq.heapify(pq)\n    for i in nums1:\n        for j in nums2:\n            if i == j:\n                continue\n            heapq.heappush(pq, (i + j, i, j))\n    return heapq.nsmallest(k, pq, key = lambda x: x[2])\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    smallest_pairs = []\n    heapq.heapify(smallest_pairs)\n    n = len(nums1)\n    k = max(k, n)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    minheap = []\n    nums1.sort()\n    nums2.sort()\n    for i in range(len(nums1)):\n        heapq.heappush(minheap, -nums1[i])\n        heapq.heappush(minheap, -nums2[i])\n        if len(minheap) > k:\n            heapq.heappop(minheap)\n    return len(minheap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs_count = 0\n    a1 = []\n    a2 = []\n    for i in nums1:\n        a1.append(i)\n    for i in nums2:\n        a2.append(i)\n    #print(a1)\n    #print(a2)\n    a = set(a1)\n    b = set(a2)\n    #print(b)\n    #print(a.intersection(b))\n    #print(b.intersection(a))\n    for i in b:\n        for j in a:\n            if i!= j:\n                k = k - 1\n                if k < 0:\n                    break\n                #print(i,j)\n                pairs_count = pairs_count + 1\n    #print(pairs_count)\n    return pairs_count\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k==0:\n        return -1\n    if k == 1:\n        return len(nums1) - len(nums2)\n    \n    pairs_count = 0\n    heap = [(nums1[0], nums1[0], 0)]\n    heapq.heapify(heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if(k==0):\n        return []\n    if(len(nums1)<len(nums2)):\n        return []\n    n=len(nums1)\n    arr1=[]\n    for i in range(n):\n        arr1.append(nums1[i])\n    arr2=[]\n    for i in range(n):\n        arr2.append(nums2[i])\n    arr1=sorted(arr1)\n    arr2=sorted(arr2)\n    pairs_arr1=[]\n    pairs_arr2=[]\n    for i in range(len(arr1)):\n        for j in range(i+1,len(arr1)):\n            pairs_arr1.append((arr1[i],arr1[j]))\n    for i in range(len(arr2)):\n        for j in range(i+1,len(arr2)):\n            pairs_arr2.append((arr2[i],arr2[j]))\n    if(len(pairs_arr1)==0):\n        return []\n    if(len(pairs_arr2)==0):\n        return []\n    pairs=sorted(pairs_arr1+pairs_arr2)\n    return pairs[:k]\ndef main():\n    print(\"K Smallest Pair : \")\n    print(\" \")\n    print(\"K Smallest Pair : \")\n    print(\" \")\n    n = int(input(\"Enter size of array : \"))\n    arr1 = []\n    for i in range(n):\n        num1 = int(input(\"Enter number : \"))\n        arr1.append(num1)\n    print(\" \")\n    n = int(input(\"Enter size of array : \"))\n    arr2 = []\n    for i in range(n):\n        num2 = int(input(\"Enter number : \"))\n        arr2.append(num2)\n    k=int(input(\"Enter K : \"))\n    pairs=k_smallest_pairs(arr1, arr2, k)\n    print(\" \")\n    for i in pairs:\n        print(i[0],\" and \",i[1])\n    print(\" \")\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Initialize a priority queue to sort the element and their index\n    heap = []\n    \n    # Create a list to save the elements of each array\n    # size = len(nums1) + len(nums2)\n    temp_list = []\n    # Create a list to save the indices of each element in nums1 and nums2\n    temp_index_list = []\n    \n    # Loop through nums1 and nums2 to create a heap with the elements\n    for i in range(len(nums1)):\n        heapq.heappush(temp_list, (nums1[i], i))\n    \n    for j in range(len(nums2)):\n        heapq.heappush(temp_list, (nums2[j], j))\n    \n    # Sort the heap by the smallest element\n    for i in range(k):\n        heapq.heappush(temp_list, heapq.heappop(temp_list)[1])\n    \n    # Initialize a dictionary to save the pairs\n    pairs = {}\n    \n    # Loop through the elements of the heap to find the elements\n    # one by one and put them in a dictionary\n    # sort the dictionary by the smallest element\n    for i in range(k):\n        # Get the index of the smallest element in the array\n        # by popping the element from the heap\n        index = heapq.heappop(temp_list)\n        \n        # Get the index of the second element in the array\n        # by popping the element from the heap\n        j = heapq.heappop(temp_list)\n        \n        # Add the pair with the smallest index\n        # and the second element to the dictionary\n        # if there is a pair in the dictionary\n        pairs[index] = [nums1[i], nums2[j]]\n        \n    # Sort the dictionary\n    # and return the pairs\n    return sorted(pairs.items())\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # my code\n    a = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] + nums2[j] == nums1[i] * nums2[j]:\n                a.append([nums1[i], nums2[j]])\n    a = sorted(a, key=lambda x:x[1])\n    return a[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[i] < arr[l]:\n            largest = l\n        if r < n and arr[largest] < arr[r]:\n            largest = r\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    \n    arr1 = nums1 + nums2\n    arr1.sort()\n    n = len(arr1)\n    count = 0\n    for i in range(n):\n        count += 1\n        heapify(arr1, n, i)\n    for i in range(k):\n        print(arr1[i])\n        print(arr1)\n    return count\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    ans = []\n    \n    for i in nums1:\n        for j in nums2:\n            if i!= j:\n                heapq.heappush(heap, (i+j, i,j))\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min1 = sys.maxsize\n    min2 = sys.maxsize\n    for i in list1:\n        min1 = min(i[0], min1)\n        min2 = min(i[1], min2)\n    return min1 * min2\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    s=list(map(min,zip(*list1)))\n    return s\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tuple1 = []\n    for element in list1:\n        tuple1.append(element)\n    print(tuple1)\n    min_element = tuple1[0]\n    min_tuple = tuple1[0]\n    for item in range(len(tuple1)):\n        for element in tuple1[item+1:]:\n            if min_element < element:\n                min_element = element\n                min_tuple = tuple1[item+1:item+1]\n    print(\"The minimum element is: \", min_element)\n    print(\"The minimum tuple: \", min_tuple)\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # min_product = float(\"inf\")\n    # print(list1)\n    min_product = list1[0][0] * list1[1][0]\n    print(min_product)\n    # min_product = list1[0][0] * list1[1][0]\n    for i in range(0, len(list1) - 1):\n        min_product = min(min_product, list1[i][1] * list1[i + 1][0])\n        # print(min_product)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n    else:\n        n = len(list1)\n        min_product = list1[0][0] * list1[0][1]\n        for i in range(1, n):\n            min_product = min(min_product, list1[i][0] * list1[i][1])\n        return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 100\n    for i in range(0, len(list1) - 1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0]\n    for i in range(len(list1)-1):\n        min_product = min(min_product,list1[i+1])\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    i = 1\n    min_product = list1[0]\n    for item in list1[1:]:\n        if item < min_product:\n            i = 1\n            min_product = item\n        elif item > min_product:\n            i += 1\n            min_product = item\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    \n    min1 = list1[0][0]\n    for item in list1:\n        if min1 < item[0]:\n            min1 = item[0]\n    return min1\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return 0\n    else:\n        minimum_product = float('inf')\n        for index_1 in range(len(list1)):\n            for index_2 in range(index_1 + 1, len(list1)):\n                if list1[index_1][1] > list1[index_2][1]:\n                    product = (list1[index_1][1] * list1[index_2][1])\n                    if product < minimum_product:\n                        minimum_product = product\n        return minimum_product\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    if len(listval) == 2:\n        return listval[0] if listval[0] < listval[1] else listval[1]\n    mid = len(listval) // 2\n    if listval[mid] < listval[mid - 1]:\n        return listval[mid]\n    if listval[mid] < listval[mid + 1]:\n        return listval[mid + 1]\n    return listval[mid]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) < 1:\n        raise ValueError('List must be non-empty.')\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) > 0:\n        return min(listval)\n    else:\n        return 0\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    for i in range(len(listval)):\n        if listval[i] < listval[0]:\n            return listval[0]\n    return listval[0]\n    \n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    print(\"minimum value in list is: \")\n    print(listval[0])\n    min = listval[0]\n    min_index = 0\n    for i in range(1, len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n            min_index = i\n    print(\"minimum value is: \", min)\n    print(\"the index is: \", min_index)\n    return min_index\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return 0\n    elif listval[0] < listval[1]:\n        return listval[0]\n    else:\n        return listval[1]\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in listval:\n        if i < minimum:\n            minimum = i\n    return minimum\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(0,len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n    "
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('-', '_').replace('.', '_').replace('_', '-').replace('_', '.')\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r\"[^A-Za-z0-9]+\",\"\",word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'[A-Z]', lambda x: ''.join(word.capitalize()), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Initialize empty string\n    word_list = []\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    d = dict(zip(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'], range(len(word.split(' ')))))\n    return ''.join([d.get(c.lower(), c.upper()) for c in word])\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('-','')\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.sub(r\"[^A-Z]\", \"-\", word).split(\"-\")\n    return ''.join(words[::-1])\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # test case: ['apple', 'Carrot'] -> appleCarrot\n    # test case: ['Apple', 'Carrot', 'a'] -> aAppleCarrot\n    # test case: ['apple', 'Carrot', 'apple', 'Carrot'] -> appleCarrotappleCarrot\n    if word.isupper():\n        return word.lower()\n    elif word.islower():\n        return word.upper()\n    else:\n        return word\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = []\n    for i in l:\n        if i%2!= 0:\n            l2.append(i)\n    return l2\n    \ndef solution(a):\n    '''\n    Find the length of the longest subarray with odd numbers.\n    '''\n    a2 = remove_odd(a)\n    return len(a2)\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if l[0]%2 == 0:\n        l[0] = l[0]/2\n        return l\n    else:\n        l[0] = l[0]*3\n        return l\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    if l[0]%2 == 0:\n        l[0] = l[0]/2\n        return l\n    else:\n        l[0] = l[0]*3\n        return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2 == 1:\n            odd_list.append(i)\n    l = odd_list\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i=0\n    while i<len(l):\n        if l[i]%2!=0:\n            l.pop(i)\n        else:\n            i+=1\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = [x for x in l if x % 2!= 0]\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2 == 1]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2!= 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # YOUR CODE HERE\n    l2=[]\n    for i in l:\n        if i%2==0:\n            l2.append(i)\n    l2.sort()\n    return l2\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    res = []\n    for i in l:\n        if(i % 2!= 0):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    newList = []\n    for i in range(len(l)):\n        if l[i] % 2 == 1:\n            newList.append(l[i])\n    return newList\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][0]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Write your code here\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    l = len(list1)\n    if n == 1:\n        return list1[0][n-1]\n    elif l > 0:\n        return extract_nth_element(list1[1:l//n], n-1)\n    else:\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) > n:\n        return list1[n]\n    else:\n        return -1\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # your code here\n    return list1[n][0]\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        return None\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    dictionary1 = {}\n    dictionary2 = {}\n    for i in range(len(list1)):\n        if list1[i] in dictionary1.keys():\n            dictionary1[list1[i]] += 1\n        else:\n            dictionary1[list1[i]] = 1\n    for j in range(len(list2)):\n        if list2[j] in dictionary2.keys():\n            dictionary2[list2[j]] += 1\n        else:\n            dictionary2[list2[j]] = 1\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list3 = []\n    \n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    if len(list3)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!=len(list2):\n        return False\n    result=True\n    for x,y in zip(list1,list2):\n        if x!=y:\n            result=False\n    return result\ndef count_elements(list1):\n    '''\n    Write a python function to count the number of occurrences of each element in a sequence.\n    '''\n    dict={}\n    for element in list1:\n        if element in dict.keys():\n            dict[element]=dict[element]+1\n        else:\n            dict[element]=1\n    return dict\ndef reverse_seq(list):\n    '''\n    Write a python function to reverse a sequence.\n    '''\n    reversed_list=[]\n    for i in list:\n        reversed_list.append(i)\n    return reversed_list\ndef even_odd(list):\n    '''\n    Write a python function to check whether a sequence is a permutation or not.\n    '''\n    rev=reverse_seq(list)\n    if(list==rev):\n        return False\n    elif(len(list)==0):\n        return True\n    elif(list[0]==list[len(list)-1]):\n        return even_odd(list[1:len(list)])\n    else:\n        return even_odd(list[1:len(list)])\ndef interleave(list):\n    '''\n    Write a python function to find all the interleaving values of a list.\n    '''\n    interleaved_list=[]\n    for i in range(len(list)):\n        if(len(list)%2==1):\n            interleaved_list.append(list[i]+list[i+1])\n        else:\n            interleaved_list.append(list[i]+list[i+1])\n            interleaved_list.append(list[i]+list[i+1])\n    return interleaved_list\ndef count_possible_permutations(list):\n    '''\n    Write a python function to find all possible permutations of a list.\n    '''\n    result=[]\n    list.sort()\n    if(len(list)==0):\n        return []\n    elif(list[0]==list[len(list)-1]):\n        return count_possible_permutations(list[1:len(list)])\n    else:\n        for i in range(0,len(list)):\n            if(interleave(list[:i]+list[i+1:])==list):\n                result.append(list[:i]+list[i+1:])\n        return result\ndef test_func(test_input):\n    '''\n    Write a python function to test your solution on a list.\n    '''\n    print(\"Test case 1:\")\n    result=interleave(test_input)\n    if(result==test_input):\n        print(\"Test Passed\")\n    else:\n        print(\"Test Failed\")\n    print(\"\\nTest case 2:\")\n    result=count_possible_permutations(test_input)\n    if(result==test_input):\n        print(\"Test Passed\")\n    else:\n        print(\"Test Failed\")\ndef main():\n    '''\n    Write a python function to print out all possible permutation of the list [1,2,3,4,5,6,7].\n    '''\n    print(\"\\nTest case 1:\")\n    test_func([1,2,3,4,5,6,7])\n    print(\"\\nTest case 2:\")\n    test_func([1,2,3,4,5,6])\n    print(\"\\nTest case 3:\")\n    test_func([1,2,3,4,5,6,7,8])\nmain("
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)<len(list2):\n        return list2[0] in list1\n    else:\n        return list1[0] in list2\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return True in list1 and True in list2\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # code here\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] * arr[j] > highest:\n                highest = arr[i] * arr[j]\n    return (highest, i)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    def is_Pair(arr, n): \n        for i in range(n): \n            for j in range(n): \n                if arr[i] * arr[j] > arr[i] * arr[j]: \n                    return False\n        return True\n    \n    def num_Pairs(arr, n): \n        pairs = 0\n        for i in range(0, n): \n            for j in range(i, n): \n                if (arr[i] * arr[j]) > arr[i] * arr[j]: \n                    pairs += 1\n        return pairs\n    \n    n = len(arr) \n    if n == 1: \n        return 0\n    if n == 2: \n        if is_Pair(arr, n): \n            return 0\n        return num_Pairs(arr, n)\n    \n    # finding sum of pairs \n    sum_Pair = arr[0] * arr[1] \n    for i in range(0, n - 1): \n        for j in range(i + 1, n): \n            sum_Pair += arr[i] * arr[j] \n    \n    # finding the maximum possible product \n    if sum_Pair > (n * (n - 1) / 2): \n        return 0\n    else: \n        return num_Pairs(arr, n)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    res = []\n    res.append(0)\n    \n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j] and arr[i] * arr[j] > arr[i] * arr[j]:\n                res[0] = arr[i]\n                res[1] = arr[j]\n    return res[1] * res[0]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    newArr=[]\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if (arr[j]>arr[i]):\n                newArr.append(arr[j])\n            elif (arr[j]==arr[i]):\n                newArr.append(arr[j])\n                break\n    return max(newArr)\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    max_product = 0\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            max_product = arr[i]\n        \n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    def return_max_P(arr, i, j):\n        if j < i:\n            return None\n        else:\n            return arr[i] * arr[j]\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    i = 0\n    while i < n:\n        for j in range(i+1,n):\n            if arr[i] * arr[j] > arr[i] * arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n        i+=1\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    sum = 0\n    max_product = -1\n    for i in range(len(arr)):\n        sum = arr[i]*(i+1)\n        if max_product < sum:\n            max_product = sum\n            ind = i\n    if max_product == 0:\n        return -1\n    else:\n        return ind\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) == 0: \n        return 0\n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] * arr[j] > arr[i] * arr[j]: \n                return arr[i]*arr[j] \n    return arr[i]*arr[i] \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0: \n        return None\n    #getting the first element of the tuple\n    if len(Input[0]) == 1:\n        return Input[0][0]\n    else:\n        return Input[0][0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        raise ValueError('Input must not be empty')\n    return tuple(set(Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # get length of list\n    L = len(Input)\n    # set flag to keep track of list\n    # if list has less than 2 elements\n    # return flag\n    flag = 1\n    for i in range(L):\n        # check for length of tuple\n        # if less than 2 elements\n        # return\n        if len(Input[i]) < 2:\n            flag = 0\n            break\n    # if list has length 2\n    # return\n    if len(Input) == 2:\n        flag = 0\n    # if list has length 1\n    # return\n    if len(Input) == 1:\n        flag = 0\n    # if list has length 0\n    # return\n    if len(Input) == 0:\n        flag = 0\n    # if flag was set to zero\n    # return\n    if flag == 0:\n        return Input\n    else:\n        # find common first element in list\n        # return index\n        index = 0\n        for i in range(L):\n            # if element in list is 2\n            # return\n            if len(Input[i]) == 2:\n                index = i\n        # if list is not empty\n        # return\n        return index\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Solution \n    s = list(map(tuple, Input))\n    if not s: \n        return None\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]: \n            return s[i]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input:\n        return []\n    elif len(Input) < 2:\n        return Input\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Method 1: HashMap\n    def hashmap(tup):\n        return hash(tup)\n    \n    # Method 2: Hash Set\n    def hashset(tup):\n        return hash(tup) % 65536\n    \n    # Method 3: Hash Table\n    def hashtable(tup):\n        return tup[0]\n    \n    # Check if any element in the tuple is in the hashmap or not\n    def isin_hashmap(tup):\n        if tup in hashmap:\n            return True\n        else:\n            return False\n    \n    # Check if any element in the tuple is in the hashset or not\n    def isin_hashset(tup):\n        if tup in hashset:\n            return True\n        else:\n            return False\n    \n    # Find the common element from the given list of tuple\n    common = []\n    for i in range(0, len(Input)):\n        if Input[i] in hashmap:\n            common.append(Input[i])\n        elif Input[i] in hashset:\n            common.append(hashmap[Input[i]])\n    return common\n    \n    \n    \n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return len(set(Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # your code goes here\n    l=[]\n    a=[]\n    for i in range(len(Input)):\n        if Input[i] not in l:\n            l.append(Input[i])\n        if Input[i] not in a:\n            a.append(Input[i])\n    if len(l)==len(a):\n        return l\n    else:\n        return a\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return None\n    elif len(Input) == 1:\n        return Input[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    temp = []\n    for i in range(len(Input)):\n        if not temp:\n            temp.append(Input[i])\n        else:\n            if Input[i][1] < temp[0][1]:\n                temp.append(Input[i])\n            else:\n                temp.remove(Input[i])\n    return temp\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        print(\"List is empty\")\n        return 0\n    else:\n        print(lst[0])\n    return max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst is None or len(lst) == 0:\n        return -1\n    else:\n        max_len = 0\n        for i in range(len(lst)):\n            if len(lst[i]) > max_len:\n                max_len = len(lst[i])\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if len(lst[i][j]) == max_len:\n                    lst[i][j] = True\n        return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # loop over the list\n    for index in range(len(lst)): \n        if len(lst[index]) > len(lst[index + 1]): \n            return lst[index] \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    MAX_LENGTH = 0\n    for i in range(len(lst)): \n        if len(lst[i]) > MAX_LENGTH: \n            MAX_LENGTH = len(lst[i])\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    longest = 0\n    for i in lst:\n        if len(i) > longest:\n            longest = len(i)\n    return longest\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key = len)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=lst[0] \n    for i in lst: \n        if i>max: \n            max=i \n    return max \nlst=[1,2,3,4,5,6,7,8,9,10,12,13,14,15]\nprint(Find_Max(lst)"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0: \n        return -1\n    else: \n        for i in range(len(lst)): \n            for j in range(i+1, len(lst)): \n                if len(lst[i]) > len(lst[j]): \n                    lst[i], lst[j] = lst[j], lst[i] \n                \n        return max(lst, key = len) \n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst)\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    max = 0\n    for i in lst:\n        if i > max:\n            max = i\n    return max"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for item in list1:\n        total += item\n    print(f\"{total} = {total} * {len(list1)}\")\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [int(x) for x in list1]\n    list1_total = 0\n    length = len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(round(i,2))\n    return sum(list2)\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for item in list1:\n        sum += item\n    print(sum)\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum=0\n    for num in list1:\n        sum+=num\n    return sum\n    \ndef list_sum(list1):\n    '''\n    Write a function that takes in a list of integers and prints the sum of the list, one item at a time.\n    '''\n    sum=0\n    for num in list1:\n        sum+=num\n    return sum\n    \n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    length = len(list1)\n    for number in list1:\n        total += number\n    return total * length\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for number in list1:\n        sum += number\n    return sum\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # pass the list to the function\n    list_of_numbers = list1\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for element in list1:\n        total += element\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #loop through list and sum all the numbers with an index count\n    total = 0\n    for number in list1:\n        total += number\n    print(total)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    pass"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # sum = 0\n    # for i in range(1, n + 1):\n    #     sum = sum + (i ** 3)\n    # return sum\n    # result = 0\n    # for i in range(1, n + 1):\n    #     result = result + i ** 3\n    # return result\n    return sum(x**3 for x in range(1, n + 1))"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n > 0:\n        sum = n * (n*n+1)\n        for i in range(1, n):\n            sum = sum - (i*i*i)\n        return sum\n    else:\n        print(\"Please enter a positive integer.\")\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = 1\n    for i in range(1, n + 1):\n        cube *= i\n    print(cube)\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total = total + i**3\n    print(total)\n    return total\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i**3\n    return sum \nprint(cube_Sum(10))\n    "
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 0:\n        print('Error: negative integer')\n    elif n == 0:\n        return 0\n    else:\n        result = n * (n + 1) * (n + 2) * (n + 3) * (n + 4) * (n + 5) * (n + 6) * (n + 7)\n        return result\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result=0\n    for i in range(n):\n        result+=i**3\n    return result\nn=int(input())\nprint(cube_Sum(n)"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(map(lambda x: x.strip(), test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    first = test_tup[0]\n    second = test_tup[1]\n    final_string = \"\".join(first)+\"\".join(second)+\"\".join(second)\n    return final_string\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join([ str(x) for x in test_tup ])\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(map(str, test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tuple_to_concat = ''\n    for item in test_tup:\n        tuple_to_concat +='' + item\n    return tuple_to_concat\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    final_list = []\n    for element in test_tup:\n        final_list.append(element)\n    return final_list\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_test_tup = ()\n    for i in range(len(test_tup)):\n        new_test_tup = new_test_tup + test_tup[i]\n    return new_test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] +'' + test_tup[1] +'' + test_tup[2]\n    \n    # YOUR CODE HERE\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(map(lambda x: x[0] + x[1], test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return test_tup[0] + \" \" + test_tup[1] + \" \" + test_tup[2]\n    \n    \ndef change_test_tuple(test_tup):\n    '''\n    Write a function to change the first element of tuple to the last element of tuple.\n    '''\n    \n    return (test_tup[0] + \" \" + test_tup[1])\n    \n    \n    \ndef normalize_tuple(test_tup):\n    '''\n    Write a function to normalize each element of tuple by dividing it by the sum of its elements.\n    '''\n    \n    return test_tup[0] / (sum(test_tup[1:]))\n    \n    \n    \n    \ndef get_test_tup(n):\n    '''\n    Create a tuple with n random elements from 0 to 10,000.\n    '''\n    \n    tup = tuple(random.randrange(0, 10) for i in range(n))\n    return tup\n    \n    \ndef get_p(n):\n    '''\n    Create a tuple with n random elements from 0 to 10,000, from the original list.\n    '''\n    \n    tup = tuple(random.randrange(0, 10) for i in range(n))\n    return tup\n    \n    \ndef get_q(n):\n    '''\n    Create a tuple with n random elements from 0 to 10,000, from the original list.\n    '''\n    \n    tup = tuple(random.randrange(0, 10) for i in range(n))\n    return tup\n    \n    \ndef get_r(n):\n    '''\n    Create a tuple with n random elements from 0 to 10,000, from the original list.\n    '''\n    \n    tup = tuple(random.randrange(0, 10) for i in range(n))\n    return tup\n    \n    \ndef get_s(n):\n    '''\n    Create a tuple with n random elements from 0 to 10,000, from the original list.\n    '''\n    \n    tup = tuple(random.randrange(0, 10) for i in range(n))\n    return tup\n    \n    \ndef get_t(n):\n    '''\n    Create a tuple with n random elements from 0 to 10,000, from the original list.\n    '''\n    \n    tup = tuple(random.randrange(0, 10) for i in range(n))\n    return tup\n    \n    \ndef get_v(n):\n    '''\n    Create a tuple with n random elements from 0 to 10,000, from the original list.\n    '''\n    \n    tup = tuple(random.randrange(0, 10) for i in range(n))\n    return tup\n    \n    \ndef encrypt(pt, c):\n    '''\n    Create a function to encrypt a given plaintext using a specific key.\n    '''\n    \n    c = str(c)\n    return str(sub(pt, c))\n    \n    \ndef decrypt(ct, c):\n    '''\n    Create a function to decrypt a given ciphertext using a specific key.\n    '''\n    \n    c = str(c)\n    return str(add(ct, c))\n    \n    \ndef main():\n    '''\n    Write a function that encrypts a given plaintext using the key, and decrypts it using the key, using either a given string or a key.\n    '''\n    \n    print(\"This program encrypts a given text using a key, and decrypts it using the key, using either a string or a key.\")\n    \n    \n    key = input(\"Please enter a key to encrypt or decrypt the text: \")\n    \n    print(\"Please enter a plaintext for encryption or decryption\")\n    \n    pt = input(\"Type a plaintext: \")\n    \n    print(\"\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")\n    \n    print(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\")"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # O(n)\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if (n < 1):\n        print(\"Invalid input\")\n        return\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum = cube_sum + (n-i)**3\n    return cube_sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Average_of_Cube = 0\n    for i in range(1,n+1):\n        Average_of_Cube += i**3\n    return Average_of_Cube / n\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    i = 1\n    while (i<=n):\n        if (i%3==0 and i%5==0):\n            avg = avg + i\n        i = i+1\n    return round(avg/n,2)\n    \nprint(find_Average_Of_Cube(10)"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    from math import sqrt\n    i = 1\n    sum = 0\n    while i <= n:\n        sum += sqrt(i * i * i)\n        i += 1\n    return sum/float(n)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = n * n * n\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum/cube\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes=0\n    for i in range(1,n+1):\n        sum_of_cubes+=i**3\n    average=sum_of_cubes/n\n    print(f'The average of cubes of {n} natural numbers is {average}')\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0 \n    for i in range(1, n + 1):\n        sum = sum + i\n    return sum/n\n    \nn = 10\nprint(find_Average_Of_Cube(n))\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return find_Average_Of_Cube(n-1) + find_Average_Of_Cube(n-2) + find_Average_Of_Cube(n-3)\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    for i in range(n):\n        print(sum(map(lambda x: x**3, range(1, n))))\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1][1],test_tuple[1][2])\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    index = 0\n    rear_index = []\n    for x in test_tuple:\n        if x[0] == x[-1]:\n            rear_index.append(index)\n            index = 0\n        else:\n            index += 1\n    return rear_index\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1].split(',')\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    def extract_rear(test_tuple):\n        return test_tuple[0]\n    return extract_rear(test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for (x,y) in test_tuple:\n        rear_index_list.append(y)\n    return rear_index_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    i = 0\n    for x in test_tuple:\n        if x[i] == \"R\":\n            print(x)\n        i += 1\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    rear_list = []\n    \n    for index, element in enumerate(test_tuple):\n        if index == 0:\n            rear_list.append(element)\n        \n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return_list = []\n    for index in range(len(test_tuple[0])):\n        return_list.append(test_tuple[1][index])\n    return return_list\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    numbers = []\n    for i in range(len(test_tuple[0])):\n        numbers.append(test_tuple[0][i][-1])\n    return numbers\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    index_of_rear_str = tuple()\n    for i, element in enumerate(test_tuple):\n        if element =='rear':\n            index_of_rear_str.append(i)\n    return tuple(index_of_rear_str)\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if item == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n        \n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==x:\n            count+=1\n    return count\n    "
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    \n    for i in list1:\n        if x in i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # your code here\n    count = 0\n    for i in range(len(list1)):\n        count += list1[i].count(x)\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    sublist_counter = 0\n    for sublist in list1:\n        if x in sublist:\n            sublist_counter += 1\n    return sublist_counter\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    size = len(list1)\n    count = 0\n    \n    for i in range(0, size):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = list(set(nums))\n    print(new_list)\n    new_list.sort()\n    print(new_list)\n    new_list = list(map(lambda x: x % 2, new_list))\n    print(new_list)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # print(nums)\n    for num in nums:\n        if num % 2 == 1:\n            # print(num)\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # just in case the filter turns out to be a generator\n    filter_odd = lambda x: True if x % 2 == 0 else False\n    # calls the filter function and returns the values\n    return filter(filter_odd, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            print(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # TODO: use a loop and use O(n) space\n    # TODO: if odd, return True\n    # TODO: if even, return True\n    # TODO: else, return False\n    \n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    \n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # write your code here\n    odd_nums = list(filter(lambda x: x % 2 == 1, nums))\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num%2!=0]\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num%2 == 1:\n            print(num)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})$\"\n    return re.sub(pattern, r\"\\1-\\2-\\3\", dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split()\n    return dt[0]+dt[1]+dt[2]+dt[3]\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d_split = dt.split('-')\n    if len(d_split)==3:\n        d_split[2] = d_split[2].lstrip()\n    elif len(d_split)==2:\n        d_split[2] = d_split[2].lstrip()\n    d = '-'.join(d_split)\n    return d\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(?P<month>[0-9]{2})(?P<day>[0-9]{2})(?P<year>\\d{4})\"\n    result = re.search(pattern, dt)\n    if result:\n        return result.groupdict()\n    else:\n        return None\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    import time\n    import datetime\n    import pytz\n    \n    time_zones = ['GMT+0', 'GMT+1', 'GMT+2', 'GMT+3', 'GMT+4', 'GMT+5', 'GMT+6', 'GMT+7', 'GMT+8', 'GMT+9', 'GMT-0', 'GMT-1', 'GMT-2', 'GMT-3', 'GMT-4', 'GMT-5', 'GMT-6', 'GMT-7', 'GMT-8', 'GMT-9']\n    \n    date_regex = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-(0[1-9]|[12][0-9]|3[01])\\b'\n    date_regex_2 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_3 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_4 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_5 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_6 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_7 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_8 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_9 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_10 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_11 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_12 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_13 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_14 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_15 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_16 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_17 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_18 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_19 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_20 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_21 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])'\n    date_regex_22 = r'\\b(?:[0-2][0-9]|3[0-1])-([0-2][0-9]|[1-9][0-2]|3[0-1])-([0-2][0-9]|[1-9]["
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # to do\n    # return format\n    if dt is None:\n        return 'NA'\n    elif isinstance(dt, str):\n        return dt\n    elif isinstance(dt, datetime.datetime):\n        return dt.strftime('%d-%m-%Y')\n    elif isinstance(dt, int):\n        return dt\n    elif isinstance(dt, float):\n        return dt\n    else:\n        raise TypeError('date type not recognized')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.replace('-', '-').replace('.', '-').replace(' ', '-')\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = re.search(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    if d is None:\n        return None\n    year, month, day = d.groups()\n    day = int(day)\n    month = int(month)\n    year = int(year)\n    date = day + month + year\n    date = '{0:0>2}-{1:0>2}-{2:0>2}'.format(day, month, year)\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    matcher = re.fullmatch(pattern, dt)\n    if not matcher:\n        return dt\n    \n    dd, mm, yy = matcher.groups()\n    dd = int(dd)\n    mm = int(mm)\n    yy = int(yy)\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    d[2] = str(int(d[2]) + 1)\n    return '{}-{}-{}'.format(d[0], d[1], d[2])\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n        \n    \n    \ndef get_min_and_max(my_list):\n    '''\n    Return a tuple of the smallest and the largest number in the given array.\n    '''\n    \n    minimum = my_list[0]\n    maximum = my_list[0]\n    for item in my_list:\n        if item < minimum:\n            minimum = item\n        elif item > maximum:\n            maximum = item\n    return minimum, maximum\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # find length of array\n    length = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # loop through array, compare each element with the previous element,\n    # determine if the current element is greater than the previous\n    # element.\n    # If yes, swap the current element with the previous element\n    # until the current element is less than the previous element.\n    # If no, swap the current element with the previous element\n    # until the array is sorted in ascending order.\n    while n > 1:\n        # find the midpoint of the array\n        # mid = n // 2\n        mid = n // 2\n        # While current element is greater than the\n        # next element, swap it with next element\n        # until the element is less than the previous\n        # element\n        while mid >= 1:\n            if my_list[mid] > my_list[mid + 1]:\n                # Swap current element with next element\n                # until next element is less than current\n                temp = my_list[mid]\n                my_list[mid] = my_list[mid + 1]\n                my_list[mid + 1] = temp\n            mid = mid // 2\n        # Once element has been sorted,\n        # swap it with the next element in the\n        # sorted array\n        temp = my_list[mid]\n        my_list[mid] = my_list[n]\n        my_list[n] = temp\n        # print(f\"Array after sorting: {my_list}\")\n        # print(f\"Array after sorting: {my_list}\")\n        n = mid\n    # print(f\"Array after sorting: {my_list}\")\n    # print(f\"Array after sorting: {my_list}\")\n    # print(f\"Array after sorting: {my_list}\")\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    print(\"Shell sort is optimizing the array by running through the whole array.\")\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] > my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    steps = len(my_list) - 1\n    while steps > 1:\n        for i in range(steps):\n            j = i\n            while j > 0:\n                if my_list[j] < my_list[j - 1]:\n                    temp = my_list[j]\n                    my_list[j] = my_list[j - 1]\n                    my_list[j - 1] = temp\n                j -= 1\n        steps -= 1\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # The function can be called as many times as needed as we want\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell(start, end):\n        if start == end:\n            return\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    iteration = len(my_list)\n    while iteration > 1:\n        for i in range(iteration-1):\n            for j in range(iteration-i-1):\n                if my_list[j] > my_list[j+1]:\n                    temp = my_list[j]\n                    my_list[j] = my_list[j+1]\n                    my_list[j+1] = temp\n        iteration -= 1\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    def f(test_tup1, test_tup2):\n        '''\n        Write a function to extract the elementwise and tuples from the given two tuples.\n        '''\n        if (type(test_tup1) == tuple and type(test_tup2) == tuple):\n            return test_tup1 + test_tup2\n        else:\n            return test_tup1 and test_tup2\n    return f\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    for tup in [tup1, tup2]:\n        if tup not in [test_tup1, test_tup2]:\n            return False\n    return True\n    \ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 6, 7, 8)\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0], test_tup2[0], test_tup1[1], test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup1[1] and test_tup2[0] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # YOUR CODE HERE\n    return (test_tup1[0] and test_tup2[0]) or (test_tup1[1] and test_tup2[1])"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # extract the tuple from both tuples\n    tuple = test_tup1.__getitem__(0)\n    # add the element to the return tuple\n    tuple = test_tup2.__getitem__(0) + tuple\n    # return the tuple\n    return tuple\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1, test_tup2 = map(tuple, [test_tup1, test_tup2])\n    test_tup_and = and(test_tup1, test_tup2)\n    return test_tup_and\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    return test_tup1.intersection(test_tup2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (a == b == c):\n        return 1\n    elif (a == 0 and b == 0):\n        return 2\n    else:\n        return parabola_directrix(a, b / 2, c) + parabola_directrix(a, b / 2, c - b / 2) + parabola_directrix(a, b, c - a / 2)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b * a > 0 and c * b < 0:\n        print('B is parabola')\n    elif b * a < 0 and c * a < 0:\n        print('B is not parabola')\n    elif b * a > 0 and c * a > 0:\n        print('A is parabola')\n    else:\n        print('A is not parabola')\n        \nparabola_directrix(5, 9, 10"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b == 0:\n        return (a*(-1))/(2*b)\n    else:\n        return (a*(-1)**b)/(2*b)\n        \ndef parabola_linear(a,b,c):\n    '''\n    Write a function to find the linear curve of a parabola.\n    '''\n    if a == 0:\n        return (b*(-1))\n    else:\n        return (b*(-1)**a)/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b*b)-(4*a*c)\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    while True:\n        try:\n            print(a,b,c)\n            x = (b**2-4*a*c)/(2*b)\n            print(x)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:\n            print('ZeroDivisionError',e)\n            pass\n        except ValueError as e:\n            print('ValueError',e)\n            pass\n        except BaseException as e:\n            print('Exception',e)\n            pass\n        print('--------------')\n        try:\n            x = (b**2-4*a*c)/(2*b)\n        except ZeroDivisionError as e:"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = -b/2 + a/2\n    y = (c**2 - a**2)*x**2 + (c**2 - b**2)*x - a\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_1 = 0\n    x_2 = 0\n    x_3 = 0\n    x_4 = 0\n    x_5 = 0\n    x_6 = 0\n    x_7 = 0\n    x_8 = 0\n    x_9 = 0\n    x_10 = 0\n    x_11 = 0\n    x_12 = 0\n    x_13 = 0\n    x_14 = 0\n    x_15 = 0\n    x_16 = 0\n    x_17 = 0\n    x_18 = 0\n    x_19 = 0\n    x_20 = 0\n    x_21 = 0\n    x_22 = 0\n    x_23 = 0\n    x_24 = 0\n    x_25 = 0\n    x_26 = 0\n    x_27 = 0\n    x_28 = 0\n    x_29 = 0\n    x_30 = 0\n    x_31 = 0\n    x_32 = 0\n    x_33 = 0\n    x_34 = 0\n    x_35 = 0\n    x_36 = 0\n    x_37 = 0\n    x_38 = 0\n    x_39 = 0\n    x_40 = 0\n    x_41 = 0\n    x_42 = 0\n    x_43 = 0\n    x_44 = 0\n    x_45 = 0\n    x_46 = 0\n    x_47 = 0\n    x_48 = 0\n    x_49 = 0\n    x_50 = 0\n    x_51 = 0\n    x_52 = 0\n    x_53 = 0\n    x_54 = 0\n    x_55 = 0\n    x_56 = 0\n    x_57 = 0\n    x_58 = 0\n    x_59 = 0\n    x_60 = 0\n    x_61 = 0\n    x_62 = 0\n    x_63 = 0\n    x_64 = 0\n    x_65 = 0\n    x_66 = 0\n    x_67 = 0\n    x_68 = 0\n    x_69 = 0\n    x_70 = 0\n    x_71 = 0\n    x_72 = 0\n    x_73 = 0\n    x_74 = 0\n    x_75 = 0\n    x_76 = 0\n    x_77 = 0\n    x_78 = 0\n    x_79 = 0\n    x_80 = 0\n    x_81 = 0\n    x_82 = 0\n    x_83 = 0\n    x_84 = 0\n    x_85 = 0\n    x_86 = 0\n    x_87 = 0\n    x_88 = 0\n    x_89 = 0\n    x_90 = 0\n    x_91 = 0\n    x_92 = 0\n    x_93 = 0\n    x_94 = 0\n    x_95 = 0\n    x_96 = 0\n    x_97 = 0\n    x_98 = 0\n    x_99 = 0\n    x_100 = 0\n    x_101 = 0\n    x_102 = 0\n    x_103 = 0\n    x_104 = 0\n    x_105 = 0\n    x_106 = 0\n    x_107 = 0\n    x_108 = 0\n    x_109 = 0\n    x_110 = 0\n    x_111 = 0\n    x_112 = 0\n    x_113 = 0\n    x_114 = 0\n    x_115 = 0\n    x_116 = 0\n    x_117 = 0\n    x_118 = 0\n    x_119 = 0\n    x_120 = 0\n    x_121 = 0\n    x_122 = 0\n    x_123 = 0\n    x_124 = 0\n    x_125 = 0\n    x_126 = 0\n    x_127 = 0\n    x_128 = 0\n    x_129 = 0\n    x_130 = 0\n    x_131 = 0\n    x_132 = 0\n    x_133 = 0\n    x_134 = 0\n    x_135 = 0\n    x_136 = 0\n    x_137 = 0\n    x_138 = 0\n    x_139 = 0\n    x_140 = 0\n    x_141 = 0\n    x_142 = 0\n    x_143 = 0\n    x_144 = 0\n    x_145 = 0\n    x_146 = 0\n    x_147 = 0\n    x_148 = 0\n    x_149 = 0\n    x_150 = 0\n    x_151 = 0\n    x_152 = 0\n    x_153 = 0\n    x_154 = 0\n    x_155 = 0\n    x_156 = 0\n    x_157 = 0\n    x_158 = 0\n    x_159 = 0\n    x_160 = 0\n    x_161 = 0\n    x_162 = 0\n    x_163 = 0\n    x_164 = 0\n    x_165 = 0\n    x_166 = 0\n    x_167 = 0\n    x_168 = 0\n    x_169 = 0\n    x_170 = 0\n    x_171 = 0\n    x_172 = 0\n    x_173 = 0\n    x_174 = 0\n    x_175 = 0\n    x_176 = 0\n    x_177 = 0\n    x_178 = 0\n    x_179 = 0\n    x_180 = 0\n    x_181 = 0\n    x_182 = 0\n    x_183 = 0\n    x_184 = 0\n    x_185 = 0\n    x_186 = 0\n    x_187 = 0\n    x_188 = 0\n    x_189 = 0\n    x_190 = 0\n    x_191 = 0\n    x_192 = 0\n    x_193 = 0\n    x_194 = 0\n    x_195 = 0\n    x_196 = 0\n    x_197 = 0\n    x_198 = 0\n    x_199 = 0\n    x_200 = 0\n    x_201 = 0\n    x_202 = 0\n    x_203 = 0\n    x_204 = 0\n    x_205 = 0\n    x_206 = 0\n    x_207 = 0\n    x_208 = 0\n    x_209 = 0\n    x_210 = 0\n    x_211 = 0\n    x_212 = 0\n    x_213 = 0\n    x_214 = 0\n    x_215 = 0\n    x_216 = 0\n    x_217 = 0\n    x_218 = 0\n    x_219 = 0\n    x_220 = 0\n    x_221 = 0\n    x_222 = 0\n    x_223 = 0\n    x_224 = 0\n    x_225 = 0\n    x_226 = 0\n    x_227 = 0\n    x_228 = 0\n    x_229 = 0\n    x_230 = 0\n    x_231 = 0\n    x_232 = 0\n    x_233 = 0\n    x_234 = 0\n    x_235 = 0\n    x_236 = 0\n    x_237 = 0\n    x_238 = 0\n    x_239 = 0\n    x_240 = 0\n    x_241 = 0\n    x_242 = 0\n    x_243 = 0\n    x_244 = 0\n    x_245 = 0\n    x_246 = 0\n    x_247 = 0\n    x_248 = 0\n    x_249 = 0\n    x_250 = 0\n    x_251 = 0\n    x_252 = 0\n    x_253 = 0\n    x_254 = 0\n    x_255 = 0\n    x_256 = 0\n    x_257 = 0\n    x_258 = 0\n    x_259 = 0\n    x_260 = 0\n    x_261 = 0\n    x_262 = 0\n    x_263 = 0\n    x_264 = 0\n    x_265 = 0\n    x_266 = 0\n    x_267 = 0\n    x_268 = 0\n    x_269 = 0\n    x_270 = 0\n    x_271 = 0\n    x_272 = 0\n    x_273 = 0\n    x_274 = 0\n    x_275 = 0\n    x_276 = 0\n    x_277 = 0\n    x_278 = 0\n    x_279 = 0\n    x_280 = 0\n    x_281 = 0\n    x_282 = 0\n    x_283 = 0\n    x_284 = 0\n    x_285 = 0\n    x_286 = 0\n    x_287 = "
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    dx = c[0]*b[0] - a[0]*b[0]\n    dy = c[1]*b[1] - a[1]*b[1]\n    dz = c[2]*b[2] - a[2]*b[2]\n    return [dx, dy, dz]\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        print('Directrix of a parabola is zero')\n        return 0\n    elif b == 0:\n        print('Directrix of a parabola is zero')\n        return 0\n    elif a*a+b*b==c:\n        print('Directrix of a parabola is a quadrilateral')\n        return 1\n    elif a*a+b*b>c:\n        print('Directrix of a parabola is not a quadrilateral')\n        return 0\n    else:\n        print('Directrix of a parabola is a tricorve')\n        return 2\n    \ndef tetra_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a tetrahedron.\n    '''\n    if a == 0:\n        print('Directrix of a tetrahedron is zero')\n        return 0\n    elif a == 1:\n        print('Directrix of a tetrahedron is a triange')\n        return 1\n    elif b == 1:\n        print('Directrix of a tetrahedron is a parallelepiped')\n        return 2\n    elif a*a+b*b==c:\n        print('Directrix of a tetrahedron is a tetrahedral')\n        return 3\n    elif a*a+b*b>c:\n        print('Directrix of a tetrahedron is not a tetrahedral')\n        return 0\n    else:\n        print('Directrix of a tetrahedron is a tricorve')\n        return 4\n        \ndef quadrilateral_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a quadrilateral.\n    '''\n    if a == 0:\n        print('Directrix of a quadrilateral is zero')\n        return 0\n    elif a == 1:\n        print('Directrix of a quadrilateral is a tricorve')\n        return 1\n    elif b == 1:\n        print('Directrix of a quadrilateral is a parallelepiped')\n        return 2\n    elif a*a+b*b==c:\n        print('Directrix of a quadrilateral is a parallelepiped')\n        return 3\n    elif a*a+b*b>c:\n        print('Directrix of a quadrilateral is not a parallelepiped')\n        return 0\n    else:\n        print('Directrix of a quadrilateral is a tricorve')\n        return 4\n        \ndef tricorve_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a tricorve.\n    '''\n    if a == 0:\n        print('Directrix of a tricorve is zero')\n        return 0\n    elif a == 1:\n        print('Directrix of a tricorve is a parallelepiped')\n        return 1\n    elif b == 1:\n        print('Directrix of a tricorve is a parallelepiped')\n        return 2\n    elif a*a+b*b==c:\n        print('Directrix of a tricorve is a tricorve')\n        return 3\n    elif a*a+b*b>c:\n        print('Directrix of a tricorve is not a parallelepiped')\n        return 0\n    else:\n        print('Directrix of a tricorve is a tricorve')\n        return 4\n    \ndef parallelepiped_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parallelepiped.\n    '''\n    if a == 0:\n        print('Directrix of a parallelepiped is zero')\n        return 0\n    elif a == 1:\n        print('Directrix of a parallelepiped is a parallelepiped')\n        return 1\n    elif b == 1:\n        print('Directrix of a parallelepiped is a parallelepiped')\n        return 2\n    elif a*a+b*b==c:\n        print('Directrix of a parallelepiped is a parallelepiped')\n        return 3\n    elif a*a+b*b>c:\n        print('Directrix of a parallelepiped is not a parallelepiped')\n        return 0\n    else:\n        print('Directrix of a parallelepiped is a parallelepiped')\n        return 4\n        \ndef angle(a, b, c):\n    '''\n    Write a function to calculate the angle between two vectors.\n    '''\n    c = (a*b-b*a)\n    if a == 0:\n        print('The angle between a and b is 0')\n        return 0\n    elif a == 1:\n        print('The angle between a and b is 180')\n        return 180\n    elif a*a+b*b==c:\n        print('The angle between a and b is 180')\n        return 180\n    elif a*a+b*b>c:\n        print('The angle between a and b is 180')\n        return 180\n    else:\n        print('The angle between a and b is 180')\n        return 180\n        \ndef gradient(a, b):\n    '''\n    Write a function to calculate the gradient of a vector.\n    '''\n    c = (b*b+a*a)\n    if c == 0:\n        print('The gradient between a and b is 0')\n        return 0\n    elif c == 1:\n        print('The gradient between a and b is 0')\n        return 0\n    elif a*a+b*b==c:\n        print('The gradient between a and b is 1')\n        return 1\n    elif a*a+b*b>c:\n        print('The gradient between a and b is 0')\n        return 0\n    else:\n        print('The gradient between a and b is 0')\n        return 0\n        \ndef triangle(a, b):\n    '''\n    Write a function to check if a triangle is a triangle or not.\n    '''\n    if a*a+b*b==0:\n        print('The triangle is a triangle')\n        return True\n    else:\n        print('The triangle is not a triangle')\n        return False\n        \ndef parallelepiped(a, b, c):\n    '''\n    Write a function to check if a parallelepiped is a parallelepiped or not.\n    '''\n    if a*a+b*b==0:\n        print('The parallelepiped is a parallelepiped')\n        return True\n    else:\n        print('The parallelepiped is not a parallelepiped')\n        return False\n        \ndef bounding_box(a, b, c):\n    '''\n    Write a function to get the bounding box of a triangle.\n    '''\n    if triangle(a, b):\n        print('The triangle is a parallelepiped')\n        return parallelepiped(a, b, c)\n    elif parallelepiped(a, b, c):\n        print('The parallelepiped is a parallelepiped')\n        return parallelepiped(a, b, c)\n    else:\n        print('The triangle is not a parallelepiped')\n        return bounding_box(a, b, c)\n        \ndef triangle_area(a, b, c):\n    '''\n    Write a function to get the area of a triangle.\n    '''\n    if triangle(a, b):\n        print('The triangle is a parallelepiped')\n        return parallelepiped(a, b, c)\n    else:\n        print('The triangle is not a parallelepiped')\n        return 0\n        \ndef parallelepiped_area(a, b, c):\n    '''\n    Write a function to get the area of a parallelepiped.\n    '''\n    if parallelepiped(a, b, c):\n        print('The parallelepiped is a parallelepiped')\n        return parallelepiped(a, b, c)\n    else:\n        print('The parallelepiped is not a parallelepiped')\n        return 0\n        \ndef bounding_box_area(a, b, c):\n    '''\n    Write a function to get the area of a bounding box.\n    '''\n    if triangle(a, b):\n        prin"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*a*(a+b+c)-a*b*c\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_val = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and i < j:\n                common_val.append(list1[i])\n    return len(common_val) == 1\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # define variables\n    common = []\n    # for loop to find all common elements\n    for i in list1:\n        for j in list2:\n            # if this element is found in both lists then append it to common\n            if i == j:\n                common.append(i)\n    # return True if no common element\n    return len(common) == 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # TODO: Write your code here.\n    common_element = False\n    for index in range(len(list1)):\n        if index in range(len(list2)):\n            if list1[index] == list2[index]:\n                common_element = True\n            else:\n                common_element = False\n    return common_element\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common = set(list1) & set(list2)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common.append(i)\n    if len(common) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list1[0] in list2 and list1[1] in list2\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and i!=j:\n                count += 1\n                \n    if count==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Find the length of the lists\n    len_list1 = len(list1)\n    len_list2 = len(list2)\n    # Initialize variables\n    if len_list1 == 0:\n        return False\n    elif len_list2 == 0:\n        return False\n    # Find the common element\n    for i in range(len_list1):\n        if list1[i] == list2[i]:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # base case\n    if len(list1) < len(list2):\n        return False\n    # find common elements\n    list_of_lists_of_elements = []\n    for i in range(0, len(list1)):\n        list_of_lists_of_elements.append(list1[i] + list2[i])\n    return len(list(set(list_of_lists_of_elements)))!= 0\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == [] or list2 == []:\n        return False\n    else:\n        return True if list1[0] == list2[0] else False\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Use a list of the base1 height values and an array to determine the median value\n    n=len(base1)\n    #Create a list of the base2 height values, and use a for loop to calculate the median\n    for i in range(n):\n        base2[i]=base2[i]+height[i]\n    #Create a list of the length of the base2 values\n    base2_length=len(base2)\n    #Create a list of the median\n    base2_median=[]\n    for i in range(base2_length):\n        base2_median.append(base2[i]/base2_length)\n    #Create a new list of the base1 height values, but each value is divided by base2_length\n    base1_height=[]\n    for i in range(base1_length):\n        base1_height.append(base1[i]/base2_length)\n    #Calculate the average of the base1 height values and calculate the sum of the base1 values\n    base1_sum=0\n    for i in range(base1_length):\n        base1_sum=base1_sum+base1[i]\n    #Calculate the average of the base2 height values and calculate the sum of the base2 values\n    base2_sum=0\n    for i in range(base2_length):\n        base2_sum=base2_sum+base2[i]\n    #Calculate the average of the base2 height values and calculate the sum of the base2 values\n    base2_avg=0\n    for i in range(base2_length):\n        base2_avg=base2_avg+(base2[i]/base2_length)\n    #Find the median using the medians function\n    base2_median.sort()\n    median=base2_median[base2_length/2]\n    #Calculate the average of the base1 height values and calculate the sum of the base1 values\n    base1_avg=0\n    for i in range(base1_length):\n        base1_avg=base1_avg+(base1[i]/base1_length)\n    #Calculate the average of the base2 height values and calculate the sum of the base2 values\n    base2_avg=0\n    for i in range(base2_length):\n        base2_avg=base2_avg+(base2[i]/base2_length)\n    #Calculate the standard deviation using the standard_deviation function\n    base2_std=base2_avg-base2_sum\n    base2_std=base2_std**0.5\n    #Calculate the standard deviation using the standard_deviation function\n    base1_std=base1_avg-base1_sum\n    base1_std=base1_std**0.5\n    #Find the median using the median_function\n    base2_median.sort()\n    median=base2_median[base2_length/2]\n    #Print the median values for the base2 and base1\n    print(\"The median value for the base2 is: \" + str(base2_median))\n    print(\"The median value for the base1 is: \" + str(base1_median))\n    #Print the standard deviation using the standard_deviation function\n    print(\"The standard deviation for the base2 is: \" + str(base2_std))\n    print(\"The standard deviation for the base1 is: \" + str(base1_std))\n    print(\"The median value for the base2 is: \" + str(median))\n    print(\"The median value for the base1 is: \" + str(median))\n    #Return the median values\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (base1>height):\n        print(\"It's an empty trapezium\")\n    elif (base2<0):\n        print(\"The trapezium doesn't have a base\")\n    else:\n        m=(base1+base2)//2\n        a=0\n        b=0\n        c=0\n        d=0\n        e=0\n        f=0\n        g=0\n        h=0\n        i=0\n        j=0\n        print(\"Trapezium: \")\n        print(\"|\",end=\"\")\n        print(\"|\",end=\"\")\n        while a<=m:\n            print(a,end=\"\")\n            a+=1\n        while b<=m:\n            print(b,end=\"\")\n            b+=1\n        while c<=m:\n            print(c,end=\"\")\n            c+=1\n        while d<=m:\n            print(d,end=\"\")\n            d+=1\n        while e<=m:\n            print(e,end=\"\")\n            e+=1\n        while f<=m:\n            print(f,end=\"\")\n            f+=1\n        while g<=m:\n            print(g,end=\"\")\n            g+=1\n        while h<=m:\n            print(h,end=\"\")\n            h+=1\n        while i<=m:\n            print(i,end=\"\")\n            i+=1\n        while j<=m:\n            print(j,end=\"\")\n            j+=1\n        print(\"\")\n        print(\"The median is:\",(a+b+c+d+e+f+g+h+i+j)/4)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapez = 0\n    #find the trapezium\n    for i in range(base1,base2):\n        trapez = trapez + i\n    #find the trapezium in the middle of the list\n    trapez = trapez/2\n    #find the trapezium in the middle\n    return trapez\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height_list = [base1,base2]\n    height_list.sort()\n    print(\"Height list is :\",height_list)\n    if height_list[1] - height_list[0] > height:\n        print(\"Median is not possible\")\n        return None\n    \n    return ((height_list[0] + height_list[1]) / 2)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if (height == 0 or height < 0):\n        raise ValueError('height must be a positive number')\n    if (base1 < base2):\n        raise ValueError('base1 must be larger than base2')\n    \n    trapezium = []\n    \n    for y in range(base1,height):\n        trapezium.append(y)\n    \n    middle_height = (height - 1)/2\n    median = round( (trapezium[0] + trapezium[len(trapezium)-1]))/2\n    \n    for y in range(base1,len(trapezium)):\n        if (y >= height):\n            break\n        trapezium[y] = (median + trapezium[y] - middle_height) / 2\n        \n    return round(sum(trapezium))\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium(a,b,c,d,e,f):\n        '''\n        This function takes the base lengths of a trapezium and returns the\n        value of the median.\n        '''\n        if (d < a) or (b < e):\n            return 0\n        return ((a + b + c + d + e + f) / 4)\n    if (height < base1) or (height < base2):\n        return 0\n    if (height <= base1) and (height <= base2):\n        return base1\n    if (height <= base2) and (height <= base1):\n        return base2\n    return trapezium(base1,base2,height)\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    mid1 = (base1 + base2) / 2\n    mid2 = (base2 + base1) / 2\n    mid3 = (base2 + base1) / 2\n    if height <= 2:\n        return mid2\n    elif height > 2 and height <= 4:\n        return mid3\n    elif height > 4:\n        return mid1\n    else:\n        return mid2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    return ( ( (base1+base2)/2 ) * height ) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    def trapezium(base1,base2,height):\n        if height<base1:\n            return height*2\n        else:\n            return height*base1+(base2-base1)*height\n    def med_trapezium(base1,base2,height):\n        if height<base1:\n            return base1\n        else:\n            if height>=base2:\n                return base2\n            else:\n                if height<=base2-base1:\n                    return base2+(base2-base1)*height\n                else:\n                    if height>=base2-base1-height:\n                        return base2+(base2-base1-height)*height\n                    else:\n                        return base2+(base2-base1-height)*(height-base1)+base2+(base2-base1)*height\n    def get_trapezium_height(height,trapezium):\n        if height<trapezium:\n            return height\n        else:\n            return trapezium\n    height = get_trapezium_height(height,trapezium(base1,base2,height))\n    height = get_trapezium_height(height,med_trapezium(base1,base2,height))\n    return height\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Your code here\n    # Do not use the math functions\n    #math.sqrt(base2*base2)\n    if base1 > base2:\n        base1,base2 = base2,base1\n    return (base1 + (height/2) * (base2 - base1))/2\n    \n    \nprint(median_trapezium(10,20,30))\nprint(median_trapezium(10,10,15))\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0,len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr.count(number) > 1\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if arr[0] > number and arr[1] > number and arr[2] > number and arr[3] > number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    if arr[0] < number:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0,len(arr)):\n        if arr[i] > number:\n            print(\"Number is greater\")\n            return True\n    print(\"Number is not greater\")\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr.sort()\n    if arr[-1] >= number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'([a-z][A-Z])(\\s+)')\n    text = pattern.search(text)\n    if text is None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    while True:\n        match = re.search(r'\\w+[a-z]*$', text)\n        if match:\n            break\n        print('Invalid input. Try again.')\n    if match:\n        return text[match.start():]\n    print('Invalid input. Try again.')\n    return ''\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r\"(\\S*\\d{1})(\\d{1,5})(\\d{1,5})$\", text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'[Aa][b](?= \\1)'\n    regex = re.compile(pattern)\n    return regex.match(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #print(\"text\", text)\n    if not re.search(r'^(.+?)(\\s|$)', text):\n        #print(\"not found\")\n        return False\n    else:\n        #print(\"found\")\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"[a-zA-Z0-9\\s'\\[\\]\\.]+\"\n    return re.search(pattern, text)\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_matched = re.search('a(.*)b', text)\n    if text_matched:\n        return text_matched.group(1)\n    else:\n        return None\n        \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has b followed by one or more a's.\n    '''\n    text_matched = re.search('b(.*)a', text)\n    if text_matched:\n        return text_matched.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a_repl = 'a'\n    b_repl = 'b'\n    text = text.lower()\n    text = re.sub(r'(a)(?=\\s|$|\\s+|\\t)', a_repl, text)\n    text = re.sub(r'(b)(?=\\s|$|\\s+|\\t)', b_repl, text)\n    text = re.sub(r'([a-z])(?=\\s|$|\\s+|\\t)', a_repl, text)\n    text = re.sub(r'([a-z])(?=\\s|$|\\s+|\\t)', b_repl, text)\n    text = re.sub(r'(\\s+|\\t)+','', text)\n    text = re.sub(' +','', text)\n    return text\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has one a followed by one b's.\n    '''\n    a_repl = 'a'\n    b_repl = 'b'\n    text = re.sub(r'(\\s|\\t)+','', text)\n    text = re.sub(r'(a)(?=\\s|$|\\s+|\\t)', a_repl, text)\n    text = re.sub(r'(b)(?=\\s|$|\\s+|\\t)', b_repl, text)\n    text = re.sub(r'(?=[a-z])','', text)\n    text = re.sub(r'(?=[a-z])','', text)\n    text = re.sub(r'(?=[A-Z])','', text)\n    text = re.sub(r'(?=[A-Z])','', text)\n    text = re.sub(r'(?=[0-9])','', text)\n    text = re.sub(r'(?=[0-9])','', text)\n    text = re.sub(r'(?=[a-z])','', text)\n    text = re.sub(r'(?=[0-9])','', text)\n    text = re.sub(r'(?=[A-Z])','', text)\n    text = re.sub(r'(?=[A-Z])','', text)\n    text = re.sub(r'(?=[\\u0081-\\u024F])','', text)\n    text = re.sub(r'(?=[\\u00A0-\\u25CF])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00F6])','', text)\n    text = re.sub(r'(?=[\\u0040-\\u024F])','', text)\n    text = re.sub(r'(?=[\\u0061-\\u0071])','', text)\n    text = re.sub(r'(?=[\\u0081-\\u024F])','', text)\n    text = re.sub(r'(?=[\\u0061-\\u0071])','', text)\n    text = re.sub(r'(?=[\\u0070-\\u00FF])','', text)\n    text = re.sub(r'(?=[\\u0100-\\u017F])','', text)\n    text = re.sub(r'(?=[\\u0080-\\u024F])','', text)\n    text = re.sub(r'(?=[\\u0080-\\u024F])','', text)\n    text = re.sub(r'(?=[\\u0080-\\u024F])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FF])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FE])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC])','', text)\n    text = re.sub(r'(?=[\\u00C0-\\u00FC]"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.lower()\n    matches = re.findall('a[^b]', text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has one or more c's.\n    '''\n    text = text.lower()\n    matches = re.findall('c[^c]', text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search(\"a(.*)b(.*)\", text)\n    if result == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    return n%10\n    \n    \ndef get_index(n) :\n    '''\n    Use for loop to find index of first occurence of a given number.\n    '''\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            return i\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code here\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    if n <= 0 :\n        return 0\n    elif n == 1 :\n        return 0\n    \n    else :\n        return int(str(n)[len(str(n))-1])\n    \n    \n    "
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    sum = 0\n    dig = 0\n    while n > 0:\n        dig = n % 10\n        sum = sum + dig\n        n = n//10\n    return sum\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 0:\n        n = n // 10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    digit = n % 10\n    return digit\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Input:\n    # number = 1234567890\n    # Output:\n    # last_digit = 3\n    \n    # Note:\n    # The input number will always be at least 1 number\n    # It's guaranteed that the last digit in the number is 0\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # answer = ''\n    # for i in range(n) :\n    #     answer += str(n%10)\n    #     n //= 10\n    # return answer\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in range(len(list1)):\n        neg.append(-list1[i])\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i > 0:\n            print(i)\n        else:\n            print(i)\n    \nlist1 = [10, 20, 40, 0, -5]\nneg_nos(list1"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    out_list = []\n    for i in range(len(list1)):\n        out_list.append(list1[i] * -1)\n    return out_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(-i)\n    return neg\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test2(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test2(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test3(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test3(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test3(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test4(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test4(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test5(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test5(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test5(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test6(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test6(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test7(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test8(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test8(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test8(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test9(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test9(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test10(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test10(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test11(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test11(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test12(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test12(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test13(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test13(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test14(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    \n    for i in list1:\n        if i>0:\n            list1.remove(i)\n    return list1\n    \ndef neg_test14(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n    \ndef pos_test1"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos_list = []\n    for item in list1:\n        if item < 0:\n            neg_nos_list.append(-item)\n        else:\n            pass\n    return neg_nos_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i=0\n    while i<len(list1):\n        if list1[i]<0:\n            del list1[i]\n        else:\n            i+=1\n    return list1\n        \n    \ndef sum(list1):\n    '''\n    Write a python function to return the sum of numbers in a list.\n    '''\n    total=0\n    for i in list1:\n        total+=i\n    return total\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for item in list1:\n        if item < 0:\n            neg_list.append(item)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list1\n    \ndef product(list):\n    '''\n    Write a python function to return the product of a list.\n    '''\n    return list\n    \ndef max_index(list1):\n    '''\n    Write a python function to find the index of the maximum value of a list.\n    '''\n    return list1\n    \ndef min_index(list1):\n    '''\n    Write a python function to find the index of the minimum value of a list.\n    '''\n    return list1\n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function to return the sum of squares of a list.\n    '''\n    return list1\n    \ndef product_of_squares(list1):\n    '''\n    Write a python function to return the product of squares of a list.\n    '''\n    return list1\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list1\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list1\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list1\n    \ndef product(list):\n    '''\n    Write a python function to return the product of a list.\n    '''\n    return list\n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function to return the sum of squares of a list.\n    '''\n    return list\n    \ndef product_of_squares(list1):\n    '''\n    Write a python function to return the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef product(list):\n    '''\n    Write a python function to return the product of a list.\n    '''\n    return list\n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function to return the sum of squares of a list.\n    '''\n    return list\n    \ndef product_of_squares(list1):\n    '''\n    Write a python function to return the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef product(list):\n    '''\n    Write a python function to return the product of a list.\n    '''\n    return list\n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function to return the sum of squares of a list.\n    '''\n    return list\n    \ndef product_of_squares(list1):\n    '''\n    Write a python function to return the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef product(list):\n    '''\n    Write a python function to return the product of a list.\n    '''\n    return list\n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function to return the sum of squares of a list.\n    '''\n    return list\n    \ndef product_of_squares(list1):\n    '''\n    Write a python function to return the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef product(list):\n    '''\n    Write a python function to return the product of a list.\n    '''\n    return list\n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function to return the sum of squares of a list.\n    '''\n    return list\n    \ndef product_of_squares(list1):\n    '''\n    Write a python function to return the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef product(list):\n    '''\n    Write a python function to return the product of a list.\n    '''\n    return list\n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function to return the sum of squares of a list.\n    '''\n    return list\n    \ndef product_of_squares(list1):\n    '''\n    Write a python function to return the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef product(list):\n    '''\n    Write a python function to return the product of a list.\n    '''\n    return list\n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function to return the sum of squares of a list.\n    '''\n    return list\n    \ndef product_of_squares(list1):\n    '''\n    Write a python function to return the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef square_of_product(list1):\n    '''\n    Write a python function to return the square of the product of squares of a list.\n    '''\n    return list\n    \ndef product(list):\n    '''\n    Write a python function to return the product of a list.\n    '''\n    return list\n    \ndef sum_of_squares(list1):\n    '''\n    Write a python function to return the sum of squares of a list.\n    '''\n    return list\n    \ndef product_of_squares(list1):\n    '''\n    Write a pytho"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_reverse = str1[::-1]\n    count = 0\n    \n    for i in range(len(str_reverse)):\n        if i % 2!= 0:\n            count += 1\n            \n    return count\n    \nif __name__ == \"__main__\":\n    str = input(\"Enter string: \")\n    print(\"Number of odd characters are: \" + str(remove_odd(str))"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    p = 0\n    for i in range(len(str1)):\n        if p%2 == 1:\n            str1 = str1[:i]+str1[i+1:]\n        p += 1\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    result = \"\"\n    for i in str1:\n        if i % 2 == 0:\n            result += i\n    return result\n    \nprint(remove_odd(\"AAbbbCCCD\"))\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if(len(str1)==0):\n        return \"\"\n    str1=str1.upper()\n    odd=list(str1)\n    temp=str1\n    for i in range(len(odd)):\n        if(odd[i]%2!=0):\n            temp=temp.replace(odd[i], \"\")\n    return temp\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str1[::2], '')"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2=''\n    for i in str1:\n        if i%2==1:\n            str2=str2+i\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = []\n    for i in str1:\n        if i % 2 == 0:\n            lst.append(i)\n    return ''.join(lst)\n        \n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.lower()\n    lst = []\n    for char in str1:\n        if char % 2!= 0:\n            lst.append(char)\n    return \"\".join(lst)\n    \nstr1 = input(\"Give me a string: \")\nprint(remove_odd(str1)"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # set letters to the length of the string\n    letters = len(str1)\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = []\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if i[0]>i[1]:\n            count+=1\n        else:\n            count+=1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = 0\n    for pair in test_list:\n        if pair[0] == pair[1]:\n            bidirectional += 1\n    return bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] > test_list[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Your code here\n    # TODO: define bidirectional count function\n    return 0"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for x in test_list:\n        total += len(x)\n    return total\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for element in test_list:\n        if(type(element) is tuple):\n            if(element[1] > element[0]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if i[0]==i[1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum(list(map(lambda pair: pair[0] * pair[1], test_list)))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return int(L[0]) + int(L[1])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def find_max_num(L):\n        max_num = 0\n        for num in L:\n            if num > max_num:\n                max_num = num\n        return max_num\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return ''.join([str(int(i)) for i in L])\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # define the list\n    L = L[0]\n    # define a for-loop\n    for i in range(1,len(L)):\n        # add element to the sum\n        L[i] = L[i] + L[i-1]\n    # return the new list\n    return L\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n    \ndef is_prime(n):\n    '''\n    Recursive function that determines whether a number is prime.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    for i in range(5,int(math.sqrt(n))+1,6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True\n    \ndef find_factors(n):\n    '''\n    Recursive function that finds the largest prime factor of n.\n    '''\n    if n < 2:\n        return [n]\n    if n == 2 or n == 3:\n        return [2, 1]\n    \n    primes = find_factors(n//2) + find_factors(n//3)\n    primes.sort()\n    return primes\n    \ndef factorize(n):\n    '''\n    Iterative function that finds the factorization of n.\n    '''\n    if n == 1:\n        return [1]\n    if n == 0:\n        return []\n    if n % 2 == 0 or n % 3 == 0:\n        return [2, 1]\n    \n    factors = factorize(n//2)\n    factors.append(n)\n    return factors + factorize(n//3)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for item in L:\n        L.append(item)\n    \n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        raise ValueError('List is empty')\n    return int(''.join(map(str,L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # my_list = [1,2,3,4,5]\n    # print(my_list)\n    # print(type(my_list))\n    # return my_list\n    my_list = [int(i) for i in L]\n    # print(my_list)\n    return sum(my_list)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find the first adverb\n    adverb_positions = re.finditer(r\"[a-zA-Z]+_[a-zA-Z]+\", text)\n    if len(adverb_positions) == 0:\n        return None\n    adverb_position = adverb_positions[0]\n    # find the first letter of each adverb\n    adverb_letters = adverb_position.group()\n    adverb_letters = adverb_letters[1:]\n    # find the position of the first letter of each adverb\n    adverb_position_list = []\n    for i in range(0, len(adverb_letters)):\n        adverb_position_list.append(i)\n    return adverb_position_list\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    sentence = re.sub(r'^\\s+', '', text)\n    sentence = re.sub(r'\\n|\\t','', sentence).strip()\n    \n    for i in range(len(sentence)):\n        if sentence[i] in ['a', 'e', 'i', 'o', 'u']:\n            if sentence[i + 1] in ['a', 'e', 'i', 'o', 'u']:\n                if sentence[i + 2] in ['a', 'e', 'i', 'o', 'u']:\n                    return (i, i + 2)\n            else:\n                if sentence[i + 2] in ['a', 'e', 'i', 'o', 'u']:\n                    return (i, i + 1)\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    pattern = r'^(a\\.|an)\\.+\\?\\w+\\s\\w\\w{0,5}$'\n    adverbs = re.finditer(pattern, text)\n    for adverb in adverbs:\n        result.append(adverb.start())\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    position = 0\n    tokens = text.split()\n    \n    for index,token in enumerate(tokens):\n        if token in [\"i\",\"a\",\"am\",\"are\",\"you\",\"'s\",\"'ve\",\"he\",\"she\",\"it\",\"we\",\"they\",\"me\",\"my\",\"we\",\"they\",\"that\"]:\n            position = index\n            break\n    \n    return position\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    adverb_pattern = re.compile('([A-z]|(n\\d\\w|\\d\\d))')\n    start_position = -1\n    end_position = -1\n    text = text.replace('.', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    adverbs = adverb_pattern.findall(text)\n    for adverb in adverbs:\n        start_position = text.find(adverb)\n        end_position = start_position + len(adverb)\n        \n        if end_position < len(text):\n            \n            #print(text[start_position:end_position])\n            text = text[start_position:end_position]\n        \n        else:\n            \n            #print(text)\n            text = text[start_position:]\n    \n    return text\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pos_lst = []\n    for word in text.split(' '):\n        if len(word) > 1 and word[-1] in 'aioAiOoA':\n            if word[-2] == word[-1]:\n                pos = word[-2]\n                adverb_pos_lst.append((pos, len(word)))\n    return adverb_pos_lst\n    \ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    verb_pos_lst = []\n    for word in text.split(' '):\n        if len(word) > 1 and word[-2] in 'aioAiOo':\n            if word[-1] == word[-2]:\n                pos = word[-2]\n                verb_pos_lst.append((pos, len(word)))\n    return verb_pos_lst\n    \ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    noun_pos_lst = []\n    for word in text.split(' '):\n        if len(word) > 1 and word[-1] in 'NnOoOoNn':\n            if word[-2] == word[-1]:\n                pos = word[-2]\n                noun_pos_lst.append((pos, len(word)))\n    return noun_pos_lst\n    \ndef find_prep_position(text):\n    '''\n    Write a function to find the first prep (adverb) and their positions in a given sentence.\n    '''\n    prep_pos_lst = []\n    for word in text.split(' '):\n        if len(word) > 1 and word[-2] in 'AaiIoOo':\n            if word[-1] == word[-2]:\n                pos = word[-2]\n                prep_pos_lst.append((pos, len(word)))\n    return prep_pos_lst\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = text.split('.')\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'a']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'e']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'i']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'o']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'u']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'y']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'z']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'w']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'x']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'y']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'z']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'i']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'o']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'u']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'y']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'z']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'w']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'x']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'y']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'z']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'i']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'o']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'u']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'y']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [adverbs[1][i] for i in range(len(adverbs[1])) if adverbs[1][i] == 'z']\n    adverbs.append(text.split('.')[-1])\n    adverbs = [list(i) for i in zip(*[iter(adverbs)] * 2)]\n    adverbs = [a"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    tokens = text.split(' ')\n    adverb_list = []\n    adverb_position = []\n    adverb_index = 0\n    for token in tokens:\n        token_split = token.split('\\n')\n        token_split = token_split[:-1]\n        for word in token_split:\n            if word == 'a':\n                adverb_list.append(adverb_index)\n                adverb_position.append(adverb_index)\n                adverb_index += 1\n            if word == 'a' and word in['the', 'or', 'and', 'for', 'and', 'for', 'in']:\n                adverb_index = 0\n            if word == 'an' and word in['the', 'or', 'and', 'for', 'and', 'for', 'in']:\n                adverb_index = 1\n            if word == 'the' and word in['and', 'or', 'for', 'and', 'for', 'in']:\n                adverb_index = 2\n            if word == 'and' and word in['or', 'for', 'and', 'for', 'in']:\n                adverb_index = 3\n            if word == 'for' and word in['or', 'and', 'for', 'in']:\n                adverb_index = 4\n            if word == 'or' and word in['and', 'or', 'and', 'for', 'in']:\n                adverb_index = 5\n            if word == 'in' and word in['and', 'and', 'for', 'and', 'in']:\n                adverb_index = 6\n            if word == 'and' and word in['in']:\n                adverb_index = 7\n            if word == 'for' and word in['in']:\n                adverb_index = 8\n            if word == 'and' and word in['in']:\n                adverb_index = 9\n            if word == 'in' and word in['and', 'or', 'for', 'and', 'in']:\n                adverb_index = 10\n            if word == 'and' and word in['and', 'or', 'for', 'and', 'for', 'in']:\n                adverb_index = 11\n            if word == 'or' and word in['and', 'or', 'and', 'and', 'for', 'in']:\n                adverb_index = 12\n            if word == 'or' and word in['or', 'and', 'and', 'and', 'in']:\n                adverb_index = 13\n            if word == 'and' and word in['and', 'and', 'in']:\n                adverb_index = 14\n            if word == 'for' and word in['and', 'and', 'and', 'in']:\n                adverb_index = 15\n            if word == 'and' and word in['and', 'or', 'and', 'in']:\n                adverb_index = 16\n            if word == 'and' and word in['and', 'or', 'in']:\n                adverb_index = 17\n            if word == 'and' and word in['in']:\n                adverb_index = 18\n            if word == 'for' and word in['in']:\n                adverb_index = 19\n            if word == 'in' and word in['and', 'or', 'in']:\n                adverb_index = 20\n            if word == 'and' and word in['and', 'in']:\n                adverb_index = 21\n            if word == 'or' and word in['and', 'in']:\n                adverb_index = 22\n            if word == 'and' and word in['and', 'in']:\n                adverb_index = 23\n            if word == 'and' and word in['in']:\n                adverb_index = 24\n            if word == 'in' and word in['and', 'or', 'in']:\n                adverb_index = 25\n            if word == 'and' and word in['in']:\n                adverb_index = 26\n            if word == 'in' and word in['and', 'or', 'in']:\n                adverb_index = 27\n            if word == 'and' and word in['and', 'or', 'and', 'in']:\n                adverb_index = 28\n            if word == 'in' and word in['and', 'or', 'and', 'and', 'in']:\n                adverb_index = 29\n            if word == 'in' and word in['and', 'in']:\n                adverb_index = 30\n            if word == 'and' and word in['and', 'and', 'in']:\n                adverb_index = 31\n            if word == 'and' and word in['and', 'or', 'in']:\n                adverb_index = 32\n            if word == 'in' and word in['and', 'and', 'and', 'in']:\n                adverb_index = 33\n            if word == 'and' and word in['and', 'and', 'or', 'in']:\n                adverb_index = 34\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'in']:\n                adverb_index = 35\n            if word == 'in' and word in['and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 36\n            if word == 'and' and word in['and', 'and', 'in']:\n                adverb_index = 37\n            if word == 'and' and word in['and', 'or', 'in']:\n                adverb_index = 38\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 39\n            if word == 'in' and word in['and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 40\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 41\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 42\n            if word == 'and' and word in['and', 'or', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 43\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 44\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 45\n            if word == 'and' and word in['and', 'or', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 46\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 47\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 48\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 49\n            if word == 'and' and word in['and', 'or', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 50\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 51\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 52\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 53\n            if word == 'and' and word in['and', 'and', 'and', 'and', 'and', 'and', 'and', 'in']:\n                adverb_index = 54\n            if word == 'and' and word in['and', 'and', 'and', "
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Get rid of punctuation and set to lowercase\n    text = text.translate(remove_punct_removed_punctuation_lower_case).lower()\n    # Set the start and end to 0 for the start and end of the sentence\n    start, end = 0, 0\n    # Loop through each character in the sentence\n    for i in range(len(text)):\n        # Check if the current character is an adverb\n        if text[i] in ['a', 'e', 'i', 'o', 'u']:\n            # If it is, increment the start of the sentence\n            if text[i] == 'a':\n                start += 1\n            # If it is, increment the end of the sentence\n            elif text[i] == 'e':\n                end += 1\n        # If it is not an adverb, increment the end of the sentence\n        else:\n            end += 1\n    # Return the start and end positions\n    return start, end\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['positive', 'noun','verb', 'adverb']\n    adverbs_with_position = []\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Figure out the size of the cube\n    side_length = l * 0.5\n    # Find the triangle where the cube is in the middle\n    theta = 0\n    phi = 0\n    p_a = 4\n    \n    while p_a <= side_length:\n        # Calculate the angles\n        theta = theta + 1\n        phi = phi + 1\n        # Calculate distance\n        r = side_length * np.cos(phi)\n        # Check if there is a triangle in the middle\n        if r <= side_length:\n            # Find the mid point of the triangle\n            p_a = p_a + (r / 2)\n    \n    # Get the surface area of the cube\n    s = 3.141592 * (p_a ** 2) * np.sin(theta * 0.017453) * np.sin(phi * 0.017453)\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area_sum = 0\n    for i in range(l):\n        for j in range(l):\n            area_sum += (i**3) + (j**3)\n    print(area_sum)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Create a new variable called surface_area\n    surface_area = 0\n    # Iterate through the list\n    for l in range(len(l)):\n        # Find the value of the length of the list\n        l = l * 4\n        # Calculate the area of the cube with the value of the length\n        surface_area += l * l\n    # Return the result\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for n in range(l):\n        for m in range(l):\n            for k in range(l):\n                s += abs(n**2 + m**2 + k**2 - 4 * (n + m + k))**2\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # if isinstance(l, list):\n    #     print(\"Hello\")\n    #     print(l)\n    #     print(type(l))\n    #     print(\"Hello\")\n    #     print(l[0])\n    #     print(\"Hello\")\n    #     print(l[0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hello\")\n    #     print(l[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0])\n    #     print(\"Hell"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    from math import sqrt, pi\n    s = 0\n    for x in range(l):\n        for y in range(l):\n            for z in range(l):\n                s += (x**2 + y**2 + z**2)**2\n    return (s)\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return ((l**3)*(3*(3.14*l)**2))\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (1 / 3) * (4 * (l ** 3))\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    \n    positive_num = {}\n    for num in nums:\n        if num > 0:\n            positive_num[num] = positive_num.get(num, 0) + 1\n    ratio = []\n    for num in positive_num.keys():\n        ratio.append((positive_num[num] + 1) / (sum(positive_num.values())))\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_positive = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            count_positive += 1\n    return count_positive / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    max_len = max(nums)\n    result = [0]*max_len\n    for num in nums:\n        if num > 0:\n            result[num%max_len]+=1\n    return result\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Your code here\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num>0:\n            positive_count+=1\n    \n    return positive_count\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    size = len(nums)\n    sum_of_positive = 0\n    for num in nums:\n        if num > 0:\n            sum_of_positive += num\n    return sum_of_positive / size\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_num = 0\n    negative_num = 0\n    for i in nums:\n        if i > 0:\n            pos_num += 1\n        else:\n            negative_num += 1\n    if positive_num!= 0:\n        return pos_num/positive_num\n    else:\n        return negative_num/negative_num\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    print(len(nums))\n    count = 1\n    for x in nums:\n        if x>0:\n            count += 1\n    print(count)\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    c = 0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            c+=1\n        else:\n            pass\n    return c/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    for num in nums:\n        if num >= 0:\n            positive += 1\n        else:\n            negative += 1\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -100\n    for i in list1:\n        if i < 0:\n            if i > max_neg:\n                max_neg = i\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negative = 0\n    for element in list1:\n        if element < 0:\n            negative += 1\n    return negative\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        if list1[i] < 0:\n            break\n        list1[i] = -list1[i]\n    return max(list1)\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for i in list1: \n        if i < 0:\n            if max_neg < i:\n                max_neg = i\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    if len(list1) == 1:\n        return list1[0]\n    if list1[0] < list1[1]:\n        return list1[0]\n    if list1[0] > list1[1]:\n        return list1[1]\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    result=list1[0]\n    for i in list1:\n        if i<0:\n            result=i\n    return result\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -100\n    for element in list1:\n        if element < 0:\n            if element > largest:\n                largest = element\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    l = []\n    for i in list1:\n        if i < 0:\n            l.append(i)\n    return max(l)\n        \n        \n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for i in list1:\n        if i < 0:\n            i = -i\n        else:\n            i = abs(i)\n            if i > largest:\n                largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            neg_list.append(list1[i])\n    return(neg_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j].lower()\n    #return a trimmed list\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    def trim(t):\n        return t[:K]\n    \n    return [trim(i) for i in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        test_list[test_list.index(i)] = i[:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    sorted_list = sorted(test_list, key=len)\n    trimmed = list()\n    for i in range(len(sorted_list)):\n        if len(sorted_list[i]) < K:\n            trimmed.append(sorted_list[i])\n        else:\n            break\n    return trimmed\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create a set from the given list of tuples\n    # remove all tuples that are longer than k\n    set_of_tuples = [t for t in test_list if len(t) < K]\n    # return the list\n    return set_of_tuples\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for element in test_list:\n        if len(element) < K:\n            new_list.append(element)\n        else:\n            new_list.append(element[0:K])\n            new_list.append(element[K:])\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return_list = []\n    for item in test_list:\n        return_list.append(item[:K])\n    return return_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, K):\n            test_list[i] = test_list[i][j]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(filter(lambda x: len(x) > K, test_list))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # write your code here\n    x = test_tup1\n    y = test_tup2\n    new_tup = (x[0]*y[0], x[1]*y[1], x[2]*y[2], x[3]*y[3], x[4]*y[4], x[5]*y[5], x[6]*y[6], x[7]*y[7], x[8]*y[8], x[9]*y[9], x[10]*y[10], x[11]*y[11], x[12]*y[12], x[13]*y[13], x[14]*y[14], x[15]*y[15], x[16]*y[16], x[17]*y[17], x[18]*y[18], x[19]*y[19], x[20]*y[20], x[21]*y[21], x[22]*y[22], x[23]*y[23], x[24]*y[24], x[25]*y[25], x[26]*y[26], x[27]*y[27], x[28]*y[28], x[29]*y[29], x[30]*y[30], x[31]*y[31], x[32]*y[32], x[33]*y[33], x[34]*y[34], x[35]*y[35], x[36]*y[36], x[37]*y[37], x[38]*y[38], x[39]*y[39], x[40]*y[40], x[41]*y[41], x[42]*y[42], x[43]*y[43], x[44]*y[44], x[45]*y[45], x[46]*y[46], x[47]*y[47], x[48]*y[48], x[49]*y[49], x[50]*y[50], x[51]*y[51], x[52]*y[52], x[53]*y[53], x[54]*y[54], x[55]*y[55], x[56]*y[56], x[57]*y[57], x[58]*y[58], x[59]*y[59], x[60]*y[60], x[61]*y[61], x[62]*y[62], x[63]*y[63], x[64]*y[64], x[65]*y[65], x[66]*y[66], x[67]*y[67], x[68]*y[68], x[69]*y[69], x[70]*y[70], x[71]*y[71], x[72]*y[72], x[73]*y[73], x[74]*y[74], x[75]*y[75], x[76]*y[76], x[77]*y[77], x[78]*y[78], x[79]*y[79], x[80]*y[80], x[81]*y[81], x[82]*y[82], x[83]*y[83], x[84]*y[84], x[85]*y[85], x[86]*y[86], x[87]*y[87], x[88]*y[88], x[89]*y[89], x[90]*y[90], x[91]*y[91], x[92]*y[92], x[93]*y[93], x[94]*y[94], x[95]*y[95], x[96]*y[96], x[97]*y[97], x[98]*y[98], x[99]*y[99], x[100]*y[100], x[101]*y[101], x[102]*y[102], x[103]*y[103], x[104]*y[104], x[105]*y[105], x[106]*y[106], x[107]*y[107], x[108]*y[108], x[109]*y[109], x[110]*y[110], x[111]*y[111], x[112]*y[112], x[113]*y[113], x[114]*y[114], x[115]*y[115], x[116]*y[116], x[117]*y[117], x[118]*y[118], x[119]*y[119], x[120]*y[120], x[121]*y[121], x[122]*y[122], x[123]*y[123], x[124]*y[124], x[125]*y[125], x[126]*y[126], x[127]*y[127], x[128]*y[128], x[129]*y[129], x[130]*y[130], x[131]*y[131], x[132]*y[132], x[133]*y[133], x[134]*y[134], x[135]*y[135], x[136]*y[136], x[137]*y[137], x[138]*y[138], x[139]*y[139], x[140]*y[140], x[141]*y[141], x[142]*y[142], x[143]*y[143], x[144]*y[144], x[145]*y[145], x[146]*y[146], x[147]*y[147], x[148]*y[148], x[149]*y[149], x[150]*y[150], x[151]*y[151], x[152]*y[152], x[153]*y[153], x[154]*y[154], x[155]*y[155], x[156]*y[156], x[157]*y[157], x[158]*y[158], x[159]*y[159], x[160]*y[160], x[161]*y[161], x[162]*y[162], x[163]*y[163], x[164]*y[164], x[165]*y[165], x[166]*y[166], x[167]*y[167], x[168]*y[168], x[169]*y[169], x[170]*y[170], x[171]*y[171], x[172]*y[172], x[173]*y[173], x[174]*y[174], x[175]*y[175], x[176]*y[176], x[177]*y[177], x[178]*y[178], x[179]*y[179], x[180]*y[180], x[181]*y[181], x[182]*y[182], x[183]*y[183], x[184]*y[184], x[185]*y[185], x[186]*y[186], x[187]*y[187], x[188]*y[188], x[189]*y[189], x[190]*y[190], x[191]*y[191], x[192]*y[192], x[193]*y[193], x[194]*y[194], x[195]*y[195], x[196]*y[196], x[197]*y[197], x[198]*y[198], x[199]*y[199], x[200]*y[200], x[201]*y[201], x[202]*y[202], x[203]*y[203], x[204]*y[204], x[205]*y[205], x[206]*y[206], x[207]*y[207], x[208]*y[208], x[209]*y[209], x[210]*y[210], x[211]*y[211], x[212]*y[212], x[213]*y[213], x[214]*y[214], x[215]*y[215], x[216]*y[216], x[217]*y[217], x[218]*y"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_1 = []\n    index_2 = []\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Tuple dimensions not match\")\n    for i in range(len(test_tup1)):\n        index_1.append(test_tup1[i])\n        index_2.append(test_tup2[i])\n    result = []\n    for i in range(len(index_1)):\n        result.append(index_1[i] * index_2[i])\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1 = tuple(map(lambda x: int(x), test_tup1))\n    tup2 = tuple(map(lambda x: int(x), test_tup2))\n    result = tuple(map(lambda x, y: x * y, tup1, tup2))\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Write your code here\n    result = 0\n    for i in test_tup1:\n        result += i * test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result += test_tup1[i] * test_tup2[i]\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[0]\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] * test_tup2[i])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        result_tuple = (tup1 * tup2 for tup1 in test_tup1 for tup2 in test_tup2)\n        return list(result_tuple)\n    except TypeError:\n        print('Invalid input')\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in tup: \n        if i in lst:\n            lst.remove(i) \n    return len(lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst: \n        if i in tup:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    ans = []\n    for i in tup: \n        ans.append(lst.count(i))\n    return ans \n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len([x for x in tup if x in lst])\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # creating a hash table to store the occurance of each element \n    # in the tuple \n    d = {} \n    # using dictionary comprehension to return the count of each element \n    for i in lst: \n        if i in d: \n            d[i] += 1 \n        else: \n            d[i] = 1 \n    # looping through the dictionary \n    for i in d: \n        # checking if the key is present in the tuple \n        # and if so, the value of that key \n        if i in tup: \n            # increment the counter for that key \n            # by 1 \n            tup[i] += 1 \n    # returning the dictionary \n    return d\n    #  return(d)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    count = 0\n    for i in tup:\n        count += c.get(i, 0)\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = 0\n    lst_count = 0\n    for i in tup:\n        if i in lst:\n            tup_count+=1\n        lst_count+=1\n    return tup_count, lst_count\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur = Counter(tup)\n    for e in occur:\n        occur[e] = occur[e] + 1\n    print(occur)\n    return occur"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence = 0\n    for i in lst:\n        occurence += tup.count(i)\n    return occurence\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element in lst:\n            lst.remove(element)\n            count += 1\n    return count\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num*num)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Initialize empty list for cubes\n    cubes = []\n    # Initialize list of cubes to 0\n    cubes = [0] * len(nums)\n    # Iterate through list\n    for num in nums:\n        # Update number of cubes of cubes, if num is less than\n        # the last one, add it to the cubes list\n        if num < cubes[-1]:\n            cubes[-1] += 1\n            cubes.append(num**3)\n        # Else, add it to cubes\n        else:\n            cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in range(len(nums)):\n        cubes.append(nums[i]*3**i)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    lst = list(nums)\n    for i in range(len(lst)):\n        if lst[i]%3 == 0:\n            lst[i] = 3*lst[i]\n        if lst[i]%2 == 0:\n            lst[i] = 2*lst[i]\n    return lst\n    \ndef cube(nums):\n    '''\n    Write a function to return the cube of the given list.\n    '''\n    return [num**3 for num in nums]\n    \n    \nif __name__ == \"__main__\":\n    print(\"cube_nums: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube: \", cube([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_2: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_3: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_4: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_5: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_6: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_7: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_8: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_9: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_10: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_11: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_12: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_13: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_14: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_15: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_16: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_17: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_18: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_19: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_20: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_21: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_22: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_23: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_24: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_25: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_26: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_27: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_28: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_29: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_30: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_31: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_32: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_33: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_34: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_35: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_36: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_37: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_38: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_39: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_40: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_41: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_42: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_43: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_44: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_45: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_46: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_47: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_48: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_49: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_50: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_51: \", cube_nums([1,2,3,4,5,6,7,8,9]))\n    print(\"cube_nums_52"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num*num)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cube for n in nums for cube in n*n*n]\n    \n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = [num**3 for num in nums]\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Add logic to check if the number of cubes is less than the cube count\n    return sum([num**3 for num in nums])\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=0:\n        raise ValueError(\"n must be positive\")\n    if n%2==0:\n        return n*n*n\n    else:\n        return n*n*n+1\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # write your code here\n    if n==0:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i\n    return result\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0 \n    for i in range(1, n+1):\n        s += i\n    return s\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 1: \n        return 0\n    if n == 1: \n        return n \n    else: \n        return n + cal_sum(n-1) \n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=0:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    l = []\n    for i in range(1, n+1):\n        l.append(i)\n    sum = 0\n    for i in range(n):\n        sum += l[i]\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for item in l:\n        str_list.append(item[:l])\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    l = l.replace(' ','')\n    l = l.replace('\\n',' ')\n    l = l.replace('\\t',' ')\n    l = l.replace('\\r',' ')\n    l = l.replace('\\f',' ')\n    l = l.replace('  ',' ')\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if not l:\n        return ''\n    l.sort()\n    for i in range(len(l)):\n        l[i] = str[l[i]]\n    return ''.join(l)\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = ''\n    for i in range(l):\n        s += str[i]\n    return s\n    \ndef cmp(l1, l2):\n    '''\n    Write a function to compare two list of strings.\n    '''\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return i\n    return len(l1)\n    \ndef reverse_list(l):\n    '''\n    Write a function to reverse the given list.\n    '''\n    for i in range(len(l)-1, -1, -1):\n        l[i] = l[i+1]\n    l.pop()\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = l.index(str)\n    j = l[i:].index(str)\n    return l[i:i+j]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    k = 0\n    s = \"\"\n    for i in range(len(l)):\n        if l[i]!= '-':\n            s = s + l[i]\n        else:\n            k += 1\n            s = s[:k]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[l:l+l+3]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[l:l+size]\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    size = len(str)\n    if size > l:\n        return ''.join(str[i:i + l] for i in range(0, size, l))\n    return str\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('^\\s+', '', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.replace(\"\\t\", \"\")\n    text = text.replace(\"\\n\", \"\")\n    text = text.replace(\"\\r\", \"\")\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\"^\\s+\", \"\", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.strip()\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+', '', text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(\" +\", \" \", text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\"\\t\",\" \")\n    text1 = text1.replace(\"\\n\",\" \")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub('[\\r\\n\\t]+',' ',text1)\n    return text\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #Your code goes here\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #check if sale amount is greater than actual cost\n    if sale_amount > actual_cost:\n        return 0\n    #make sure sale amount is less than actual cost\n    elif sale_amount < actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return sale_amount\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    # YOUR CODE HERE\n    return actual_cost/sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0:\n        return 0\n    else:\n        return sale_amount/actual_cost*100\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return 0\n    else: \n        return sale_amount - actual_cost \n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #First, create a set of all even numbers in range [2, n]\n    #check to see if n is even\n    if n%2 == 0:\n        sumofFactors = n\n        return sumofFactors\n    else:\n        #Find the factors\n        for x in range(2,n):\n            if n%x == 0:\n                sumofFactors = n\n                return sumofFactors\n    #If not, return 0\n    return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    f=[]\n    for i in range(1,n) : \n        if n%i==0 : \n            f.append(i) \n    return sum(f)\n    \ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number. \n    '''\n    f=[]\n    for i in range(1,n+1) : \n        f.append(i*factorial(i-1))\n    return f[n]\n    \ndef sigmoid(x) : \n    '''\n    Write a python function to calculate the sigmoid of a number. \n    '''\n    e=math.exp(-x) \n    return 1/(1+e) \n    \ndef sign(x) : \n    '''\n    Write a python function to calculate the sign of a number. \n    '''\n    if x>0 : \n        return 1\n    else : \n        return -1\n    \ndef dotProduct(x,y) : \n    '''\n    Write a python function to calculate the dot product of two numbers. \n    '''\n    return x[0]*y[0] + x[1]*y[1]\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    while n % 2 == 0 : \n        n = n / 2\n    while n % 2 == 1 : \n        n = n - 1\n    if n == 2 : \n        print (n)\n    elif n > 2 : \n        print (n) \n    else : \n        print (\"We cannot find the sum of all the factors of number\") \ndef isPrime(n) : \n    '''\n    Write a python function to find if a number is prime.\n    '''\n    if n <= 1 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 : \n        return False\n    if n % 3 == 0 : \n        return False\n    i = 5\n    while i * i <= n : \n        if n % i == 0 : \n            return False\n        i = i + 6\n    return True\ndef m(n) : \n    '''\n    Write a python function to compute the sum of the squares of the first \n    and last natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    if n == 1 : \n        return 1\n    if n == 2 : \n        return 2\n    if n < 0 : \n        return -1\n    return m(n - 1) + m(n - 2)\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    if n < 2 :\n        return n\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    c = n\n    i = 2\n    while (i<c) :\n        if c%i == 0 :\n            sum = sum + i\n            c = c - sum\n            i = i + 2\n        else :\n            i = i + 1\n    return sum\ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    c = n\n    i = 1\n    while (i<c) :\n        fact = fact * i\n        i = i + 1\n    return fact\ndef isprime(n) :\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    c = n\n    i = 2\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isDivisble(n) :\n    '''\n    Write a python function to check if a number is divisible by itself and by 3 or 5.\n    '''\n    c = n\n    i = 1\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isAlphabetic(n) :\n    '''\n    Write a python function to check if a number is alphabetic.\n    '''\n    c = n\n    i = 0\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isNumber(n) :\n    '''\n    Write a python function to check if a number is numeric.\n    '''\n    c = n\n    i = 1\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef findFactor(n) : \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    c = n\n    i = 2\n    while (i<c) :\n        if c%i == 0 :\n            if c%(i*2) == 0 :\n                i = i + 2\n                factor = i\n            else :\n                factor = i\n        else :\n            factor = i\n        i = i + 1\n    return factor\ndef findFactors(n) :\n    '''\n    Write a python function to find the factors of a number.\n    '''\n    c = n\n    i = 2\n    factor = 1\n    while (i<c) :\n        if c%i == 0 :\n            factor = factor * i\n            if c%(i*2) == 0 :\n                i = i + 2\n                factor = factor * i\n            else :\n                factor = factor * i\n        else :\n            factor = factor * i\n        i = i + 1\n    return factor\ndef isPalindrome(n) :\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    c = n\n    i = 1\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isReverse(n) :\n    '''\n    Write a python function to check if a number is reverse.\n    '''\n    c = n\n    i = 0\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isUnique(n) :\n    '''\n    Write a python function to check if a number is unique.\n    '''\n    c = n\n    i = 0\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isPerfect(n) :\n    '''\n    Write a python function to check if a number is perfect.\n    '''\n    c = n\n    i = 2\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isPerfectNumber(n) :\n    '''\n    Write a python function to check if a number is perfect number.\n    '''\n    c = n\n    i = 3\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isPythagoreanTriplet(n) :\n    '''\n    Write a python function to check if a number is Pythagorean triplet.\n    '''\n    c = n\n    i = 4\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isSquare(n) :\n    '''\n    Write a python function to check if a number is square.\n    '''\n    c = n\n    i = 5\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isPrime(n) :\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    c = n\n    i = 6\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isPrimes(n) :\n    '''\n    Write a python function to check if a number is prime.\n    '''\n    c = n\n    i = 7\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isCombinatorial(n) :\n    '''\n    Write a python function to check if a number is combinatorial.\n    '''\n    c = n\n    i = 8\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isHump(n) :\n    '''\n    Write a python function to check if a number is a hump.\n    '''\n    c = n\n    i = 9\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isHumpSpiral(n) :\n    '''\n    Write a python function to check if a number is a hump spiral.\n    '''\n    c = n\n    i = 10\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isHumpEccentric(n) :\n    '''\n    Write a python function to check if a number is a hump eccentric.\n    '''\n    c = n\n    i = 11\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isHumpEccentricSquare(n) :\n    '''\n    Write a python function to check if a number is a hump eccentric square.\n    '''\n    c = n\n    i = 12\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isHumpEccentricCube(n) :\n    '''\n    Write a python function to check if a number is a hump eccentric cube.\n    '''\n    c = n\n    i = 13\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isHumpEccentricTriangle(n) :\n    '''\n    Write a python function to check if a number is a hump eccentric triangle.\n    '''\n    c = n\n    i = 14\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isHumpSquare(n) :\n    '''\n    Write a python function to check if a number is a hump square.\n    '''\n    c = n\n    i = 15\n    while (i<c) :\n        if c%i == 0 :\n            return False\n        i = i + 1\n    return True\ndef isHumpTriangle(n) :\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factor = 1\n    for i in range(2, int(math.sqrt(n))+1) : \n        if (n % i) == 0 : \n            if (factor % 2 == 0) : \n                factor += 2\n            else : \n                factor += 1\n    return factor \ndef count_sorted_pairs(arr, k): \n    '''\n    Return the number of pairs of items with the given sum.\n    '''\n    if (k > 1) : \n        count = 0\n        for i in range(len(arr)-1): \n            for j in range(i+1, len(arr)): \n                if arr[i] + arr[j] == k : \n                    count += 1\n    return count \ndef is_perfect_num(num): \n    '''\n    Return True if the given number is a perfect number, \n    otherwise return False.\n    '''\n    if (num == 1) : \n        return True\n    elif (num % 2 == 0) : \n        if num == 3 or num == 5 : \n            return True\n        else : \n            return False\n    else : \n        return False \ndef is_prime_number(n): \n    '''\n    Check if the given number is a prime number or not.\n    '''\n    if n > 1: \n        for i in range(2, int(math.sqrt(n) + 1)): \n            if n % i == 0: \n                return False\n    else : \n        return True \ndef max_prime_number(n): \n    '''\n    Find the largest prime number that is less than or equal to n. \n    '''\n    for i in range(3, math.floor(math.sqrt(n)) + 1, 2): \n        if (is_prime_number(i) == True) and (i > n) : \n            return i \ndef is_prime_list(n): \n    '''\n    Check if a given list is a prime list or not.\n    '''\n    prime_list = [] \n    for i in range(2, n) : \n        if n % i == 0 : \n            return False\n    return True \ndef sum_of_pairs(n): \n    '''\n    Find the sum of the pairs of numbers in a list. \n    '''\n    pairs = [] \n    for i in range(1, n) : \n        if (n % i == 0) : \n            pairs.append(i) \n    sum = 0 \n    for i in range(1, len(pairs)) : \n        sum += pairs[i - 1] * (pairs[i] - 1) \n    return sum \ndef sum_of_factors(n): \n    '''\n    Find the sum of the factors of the given number. \n    '''\n    if is_prime_number(n) == True : \n        return n \n    elif is_prime_number(n) == False : \n        return 0 \n    else : \n        factor = n % sum_of_pairs(n) \n        return sum_of_pairs(factor) \ndef is_perfect(num): \n    '''\n    Check if the given number is a perfect number or not. \n    '''\n    if num == sum_of_factors(num): \n        return True\n    else : \n        return False \ndef find_square(n): \n    '''\n    Find the square of the given number. \n    '''\n    if n > 1 : \n        return int(math.sqrt(n)) ** 2 \n    else : \n        return 0 \ndef get_gcd(n, k): \n    '''\n    Find the gcd of the given numbers. \n    '''\n    if k < n : \n        return get_gcd(n, k) \n    else : \n        return n \ndef get_intersect(arr,n): \n    '''\n    Find the intersection of the given list with the given number. \n    '''\n    i = 0 \n    j = 0 \n    pairs = [] \n    while(i < len(arr)) : \n        while(j < len(arr)) : \n            if arr[i] + arr[j] == n : \n                pairs.append(arr[i]) \n                pairs.append(arr[j]) \n            j += 1 \n        i += 1 \n    return pairs \ndef get_product_numbers(n): \n    '''\n    Find the product of the given numbers. \n    '''\n    if n == 1 : \n        return [2]\n    else : \n        return [2 * n] + get_product_numbers(n-1)\ndef is_prime(n): \n    '''\n    Check if the given number is a prime number or not. \n    '''\n    if n > 1 : \n        for i in range(2, math.floor(math.sqrt(n)) + 1) : \n            if n % i == 0 : \n                return False\n    return True \ndef is_prime_list(n): \n    '''\n    Check if a given list is a prime list or not. \n    '''\n    prime_list = [] \n    for i in range(2, n) : \n        if is_prime(i) == True : \n            prime_list.append(i) \n    return prime_list \ndef reverse_list(n): \n    '''\n    Reverse the given list using it's first and last element. \n    '''\n    i = 0 \n    while (i < len(n)) : \n        j = len(n) - 1 - i \n        while (j > i) : \n            n[j], n[i] = n[i], n[j] \n            j -= 1 \n        i += 1 \ndef reverse_list2(n): \n    '''\n    Reverse the given list using it's first and last element. \n    '''\n    i = 0 \n    while (i < len(n)) : \n        j = len(n) - 1 - i \n        while (j > i) : \n            n[j], n[i] = n[i], n[j] \n            j -= 1 \n        i += 1 \ndef sublist(n): \n    '''\n    Compute all sublist from the given list. \n    '''\n    l = [] \n    for i in range(len(n)): \n        l.append(n[i:i+2]) \n    return l \ndef is_prime_pair(n): \n    '''\n    Check if a given pair of numbers is a prime pair or not. \n    '''\n    if n == 1 : \n        return True\n    elif n == 2 : \n        return False\n    elif n > 1 : \n        for i in range(3, int(math.sqrt(n)) + 1, 2) : \n            if n % i == 0 : \n                return False\n        return True\ndef is_prime_pair_list(n): \n    '''\n    Check if a given pair of numbers is a prime pair or not. \n    '''\n    prime_pair = [] \n    for i in range(3, int(math.sqrt(n)) + 1, 2) : \n        if n % i == 0 : \n            prime_pair.append(i) \n    return prime_pair \ndef get_prime_factors(n): \n    '''\n    Find the factors of a given number. \n    '''\n    prime_factor = [] \n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            prime_factor.append(i) \n    return prime_factor \ndef get_prime_factors_list(n): \n    '''\n    Find the factors of a given number. \n    '''\n    prime_factor = [] \n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            prime_factor.append(i) \n    return prime_factor \ndef is"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    lst = []\n    for i in range(1, int(math.sqrt(n))+1) :\n        if n % i == 0 : \n            lst.append(i) \n    if len(lst) == 0 : \n        return 0\n    else :\n        return sum(lst)\ndef multlist(lst) :\n    '''\n    Write a python function to find the product of a list of numbers.\n    '''\n    product = 1\n    for i in lst : \n        product = product * i\n    return product\ndef gcd(num1, num2) : \n    '''\n    Write a python function to find the greatest common denominator of two numbers.\n    '''\n    if num1 > num2 : \n        return gcd(num1, num2) \n    else : \n        return gcd(num2, num1) \ndef power(x, y) : \n    '''\n    Write a python function to find the power of a number.\n    '''\n    if y == 0 : \n        return 1\n    else : \n        return x * power(x, y-1)\ndef qSort(n,lst):\n    '''\n    Write a python function to sort a list of numbers.\n    '''\n    #if len(lst) == 0 : \n    #    return \n    # else : \n    #     low = 0\n    #     high = len(lst) - 1\n    #     mid = int(len(lst)/2)\n    #     while(low <= high) : \n    #         while (lst[mid][0] < lst[high][0]) : \n    #             high = high - 1\n    #         while (lst[mid][0] > lst[low][0]) : \n    #             low = low + 1\n    #         if (lst[low][0] < lst[mid][0]) : \n    #             lst[low], lst[mid] = lst[mid], lst[low]\n    #         mid = int(mid - 1)\n    #     lst[low], lst[high] = lst[high], lst[low]\n    #     qSort(lst, lst[low:high+1])\n    #     qSort(lst, lst[low:high+1])\n    # return \n    if len(lst) == 0 : \n        return \n    if len(lst) == 1 : \n        return lst\n    mid = int(len(lst)/2)\n    lst1 = qSort(n,lst[mid:mid+1])\n    lst2 = qSort(n,lst[:mid])\n    i = j = 0\n    while i < len(lst1) and j < len(lst2): \n        if lst1[i][0] < lst2[j][0] : \n            lst[i] = lst1[i] \n            i = i + 1\n        else : \n            lst[i] = lst2[j] \n            j = j + 1\n        if (i >= len(lst1)) : \n            i = 0\n        else : \n            i = i + 1\n    while j < len(lst2) : \n        lst[i] = lst2[j] \n        i = i + 1\n        j = j + 1\n    return lst\ndef Quotient(x, y): \n    '''\n    Write a python function to find the quotient of two numbers.\n    '''\n    if x == y : \n        return 1\n    else : \n        x = int(x)\n        y = int(y)\n        if x > y : \n            return 1\n        elif x < y : \n            return -1\n        else :\n            return 0\ndef findMod(n):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    lst = []\n    for i in range(1,int(math.sqrt(n))+1) :\n        if n % i == 0 : \n            lst.append(i) \n    if len(lst) == 0 : \n        return 0\n    else : \n        return multlist(lst)\ndef inRange(x, lst) : \n    '''\n    Write a python function to find if a number is within the given list.\n    '''\n    if x < lst[0] or x > lst[len(lst)-1] : \n        return False\n    else : \n        return True\ndef isprime(x) : \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if x > 1 : \n        for i in range(2, int(math.sqrt(x))+1): \n            if x % i == 0: \n                return False \n        return True \n    else : \n        return False \ndef checker(i, lst) : \n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    for j in range(0, len(lst)) : \n        if lst[j][0]!= lst[i][0] : \n            return False\n    return True \ndef rotate(n,k) : \n    '''\n    Write a python function to rotate a given number by k places.\n    '''\n    if n == 0 : \n        return 0\n    else : \n        if n < 0 : \n            n = -n\n            k = -k\n        lst = []\n        for i in range(0, n, k) : \n            lst.append(lst[i:i+k]) \n        for i in range(0, k) : \n            lst.append(lst[n-1-i]) \n        return lst\ndef isPalindrome(n) : \n    '''\n    Write a python function to check if a number is a palindrome or not.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return True\n    elif n > 1 : \n        if n % 2 == 0 : \n            if n % 3 == 0 : \n                return True\n            else : \n                return False\n        else : \n            if n % 3 == 0 : \n                return True\n            else : \n                return False\ndef pattern(n) : \n    '''\n    Write a python function to find the number of bits that are set to 1 for the given number.\n    '''\n    if n == 0 : \n        return 0\n    else : \n        k = 0\n        lst = []\n        for i in range(0, n) : \n            lst.append(lst[i:i+1]) \n        lst2 = []\n        for i in range(0, len(lst)) : \n            lst2.append(lst[i][0])\n        j = 0\n        for i in lst2 : \n            if i!= 0 : \n                k = k + 1\n        return k\ndef getLongestRepeating(lst) : \n    '''\n    Write a python function to find the longest repeating string for a given list of strings.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in range(0, len(lst)) : \n        if lst[i][0] == lst[i][-1] : \n            lst1.append(lst[i][0])\n        else : \n            lst2.append(lst[i][0])\n    return(max(lst1, key=len))\ndef isPower(n, k) : \n    '''\n    Write a python function to check if a number is a power of k or not.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return True\n    elif n > 1 : \n        if n % k == 0 : \n            return True\n        else : \n            return False\ndef isPower2(n) : \n    '''\n    Write a python function to check if a numbe"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    if n % 2 == 0:\n        return 0\n    if n % 2 == 1:\n        return n // 2\n    c = 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            c += 1\n    if n % c == 0:\n        return c\n    return n // c\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    while n>0:\n        r=n%2\n        sum+=r\n        n=n//2\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # number of times the number is divided by 2 and also\n    # multiplied with 2 and added to find the number of times\n    # the number is divided by 3.\n    return (int(n/2)) * (int(n/2)) * (int(n/2))\n    #     return (int(n/2)) * (int(n/2)) + (int(n/2))\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_list = []\n    if not isinstance(text, list):\n        return 'No text list was provided, please provide a list'\n    for word in text:\n        if word.casefold() == 'z':\n            text_list.append(word.title())\n        else:\n            text_list.append(word.title())\n    return text_list\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # You'll need to fill in this function!\n    word_list = re.findall(r'[a-zA-Z]+', text)\n    for word in word_list:\n        if word.lower() == \"z\":\n            return word\n    return None\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text_wordz = ['z']\n    text_wordz.extend(text.split(' '))\n    text_wordz = set(text_wordz)\n    text_wordz = list(text_wordz)\n    text_wordz = [w for w in text_wordz if w.isalpha()]\n    text_wordz = list(text_wordz)\n    text_wordz = [w for w in text_wordz if w.isalpha()]\n    text_wordz = list(text_wordz)\n    text_wordz = [w for w in text_wordz if not w.isdigit()]\n    text_wordz = list(text_wordz)\n    return text_wordz\ndef text_match_wordz_list(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text_wordz = []\n    text_wordz = text.split(' ')\n    for word in text_wordz:\n        if word.isalpha() == True:\n            text_wordz.append(word)\n    return text_wordz\ndef text_match_wordz_set(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text_wordz = set(text.split(' '))\n    text_wordz = list(text_wordz)\n    return text_wordz\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    m = re.findall(r'z', text)\n    return m\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.upper()\n    for i in range(len(text)-1, -1, -1):\n        if text[i] == 'Z':\n            return True\n    return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    m = re.search(r'z', text)\n    if m == None:\n        return False\n    else:\n        return m.start()\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if 'z' in text:\n        text_pattern = re.compile(\"[z]\")\n        match = text_pattern.match(text)\n        if match:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.upper()\n    text = text.replace('Z',' ')\n    words = re.findall(r'[A-Z][A-Za-z]*',text)\n    final_text = ''\n    for word in words:\n        final_text += word +''\n    return final_text\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if text == '':\n        return []\n    matched_words = []\n    for word in text.split():\n        if word[-1] == 'z':\n            matched_words.append(word[:-1])\n    return matched_words\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match_word = \"z\"\n    if len(text) > 1:\n        if text[1].isalpha():\n            match_word = text[0]\n            if match_word in text:\n                text_string = text[1:]\n                return text_string\n        else:\n            return text\n    else:\n        return text\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2%4 == 0:\n        if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n    elif monthnum2%4 == 1:\n        if monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n    elif monthnum2%4 == 2:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n    elif monthnum2%4 == 3:\n        if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n    elif monthnum2%4 == 4:\n        if monthnum2 == 1 or monthnum2 == 2 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n    elif monthnum2%4 == 5:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n    elif monthnum2%4 == 6:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n    elif monthnum2%4 == 7:\n        if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n    elif monthnum2%4 == 8:\n        if monthnum2 == 1 or monthnum2 == 2 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n    elif monthnum2%4 == 9:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n    elif monthnum2%4 == 10:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n    elif monthnum2%4 == 11:\n        if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n    elif monthnum2%4 == 12:\n        if monthnum2 == 1 or monthnum2 == 2 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    try:\n        if monthnum2>12:\n            raise ValueError\n        else:\n            return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 0 or monthnum2 > 12:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb2=monthnum2.split('/')\n    check=True\n    for i in range(len(monthnumb2)):\n        if monthnumb2[i]!='31':\n            check=False\n            break\n    return check\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    else:\n        if monthnum2 % 2 == 0 and monthnum2 > 31:\n            return True\n        elif monthnum2 % 2 == 1 and monthnum2 > 29:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 <= 0):\n        print(\"Please enter a positive number.\")\n        return -1\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12 or monthnum2 < 0:\n        print(\"Invalid month number\")\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 >= 12 or monthnum2 <= 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2 < 1 or monthnum2 > 12):\n        print(\"month number must be between 1 and 12.\")\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum=int(monthnum2)\n    if monthnum==12:\n        return True\n    elif monthnum==1 or monthnum==2:\n        return True\n    elif monthnum==3 or monthnum==4 or monthnum==5:\n        return True\n    elif monthnum==7 or monthnum==8 or monthnum==9:\n        return True\n    elif monthnum==10 or monthnum==11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i][::-1]\n        \n    return stringlist\n    \n    \n    "
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    return list(reversed(stringlist))\n    \n    \n    \ndef separate_commands(stringlist):\n    '''\n    Write a function to split each string in a given list of string values.\n    '''\n    \n    return list(zip(stringlist, stringlist))\n    \n    \ndef split_commands(stringlist):\n    '''\n    Write a function to split each string in a given list of string values.\n    '''\n    \n    return list(zip(*stringlist))\n    \n    \ndef remove_spaces(stringlist):\n    '''\n    Write a function to remove any spaces from each string in a given list of string values.\n    '''\n    \n    return [s.strip() for s in stringlist]\n    \n    \n    \ndef remove_punctuation(stringlist):\n    '''\n    Write a function to remove any punctuation from each string in a given list of string values.\n    '''\n    \n    return [s.strip().replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace('\\'', '').replace('\"', '').replace(\"'\", '').replace('-', '').replace('|', '').replace(';', '').replace('*', '').replace('(', '').replace(')', '').replace('=', '').replace('+', '').replace('*', '') for s in stringlist]\n    \n    \ndef remove_stopwords(stringlist):\n    '''\n    Write a function to remove any stopwords from each string in a given list of string values.\n    '''\n    \n    return [s.strip().lower().replace('-', '').replace('!', '').replace('?', '').replace('\\'', '').replace('\\\"', '').replace(':', '').replace(';', '').replace(')', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace('[', '').replace('.', '').replace('!', '').replace('?', '').replace('\"', '').replace(\"'\", '').replace(\"'\", '').replace(\"'\", '') for s in stringlist]\n    \n    \ndef remove_punctuation_and_punctuation_list(stringlist):\n    '''\n    Write a function to remove any punctuation from each string in a given list of string values.\n    '''\n    \n    return [s.strip().replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace('\\'', '').replace('\"', '').replace(\"'\", '').replace('-', '').replace('|', '').replace(';', '').replace('*', '').replace('(', '').replace(')', '').replace('=', '').replace('+', '').replace('*', '') for s in stringlist]\n    \n    \ndef remove_stopwords_and_stopwords_list(stringlist):\n    '''\n    Write a function to remove any stopwords from each string in a given list of string values.\n    '''\n    \n    return [s.strip().lower().replace('-', '').replace('!', '').replace('?', '').replace('\\'', '').replace('\\\"', '').replace(':', '').replace(';', '').replace(')', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace('[', '').replace('.', '').replace('!', '').replace('?', '').replace('\"', '').replace(\"'\", '').replace(\"'\", '') for s in stringlist]\n    \n    \ndef remove_punctuation_and_punctuation_list_and_remove_stopwords_and_stopwords_list(stringlist):\n    '''\n    Write a function to remove any punctuation from each string in a given list of string values.\n    '''\n    \n    return [s.strip().replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace('\\'', '').replace('\\\"', '').replace(':', '').replace(';', '').replace(')', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace('[', '').replace('.', '').replace('!', '').replace('?', '').replace('\"', '').replace(\"'\", '').replace(\"'\", '') for s in stringlist]\n    \n    \ndef remove_punctuation_and_punctuation_list_and_remove_stopwords_and_stopwords_list_and_remove_stopwords_and_stopwords_list(stringlist):\n    '''\n    Write a function to remove any punctuation from each string in a given list of string values.\n    '''\n    \n    return [s.strip().replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace('\\'', '').replace('\\\"', '').replace(':', '').replace(';', '').replace(')', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace('[', '').replace('.', '').replace('!', '').replace('?', '').replace('\"', '').replace(\"'\", '').replace(\"'\", '') for s in stringlist]\n    \n    \ndef filter_stopwords(stringlist):\n    '''\n    Write a function to remove any stopwords from each string in a given list of string values.\n    '''\n    \n    return [s.strip().lower().replace('-', '').replace('!', '').replace('?', '').replace('\\'', '').replace('\\\"', '').replace(':', '').replace(';', '').replace(')', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace('[', '').replace('.', '').replace('!', '').replace('?', '').replace('\"', '').replace(\"'\", '').replace(\"'\", '') for s in stringlist]\n    \n    \ndef filter_punctuation(stringlist):\n    '''\n    Write a function to remove any punctuation from each string in a given list of string values.\n    '''\n    \n    return [s.strip().replace('.', '').replace(',', '').replace('!', '').replace('?', '').replace('\\'', '').replace('\\\"', '').replace(':', '').replace(';', '').replace(')', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace('[', '').replace('.', '').replace('!', '').replace('?', '').replace('\"', '').replace(\"'\", '').replace(\"'\", '') for s in stringlist]\n    \n    \ndef filter_stopwords_and_stopwords_list(stringlist):\n    '''\n    Write a function to remove any stopwords from each string in a given list of string values.\n    '''\n    \n    return [s.strip().lower().replace('-', '').replace('!', '').replace('?', '').replace('\\'', '').replace('\\\"', '').replace(':', '').replace(';', '').replace(')', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace(']', '').replace('[', '').replace('.', '').replace('!', '').replace('?', '').replace('\"', '').replace(\"'\", '').replace(\"'\", '') for s in stringlist]\n    \n    \ndef filter_punctuation_and_punctuation_list_and_filter_stopwords_and_stopwords_list(stringlist):\n    '''\n    Write a function to remove any punctuation from each string in a given list of string values.\n    '''\n    \n    return [s.strip().replace('.', '').replace(',', '').replace('!'"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    output = []\n    for string in stringlist:\n        output.append(string[::-1])\n    return output\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_string = ''\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    def reverse_string(stringlist):\n        '''\n        Create a reverse string by reversing each word in a string\n        '''\n        if not stringlist:\n            return \"\"\n        else:\n            list_len = len(stringlist)\n            for i in range(list_len // 2):\n                stringlist[i], stringlist[list_len - 1 - i] = stringlist[list_len - 1 - i], stringlist[i]\n            return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return reverse_string(stringlist)\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist = stringlist[::-1]\n    for index, word in enumerate(stringlist):\n        stringlist[index] = word[::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    print(\"function: reverse_string_list\")\n    print(\"syntax: reverse_string_list(stringlist)\")\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst)==0:\n        return None\n    if lst[0]!=None:\n        return lst\n    min_lst=[]\n    for i in lst:\n        if len(i)>len(min_lst):\n            min_lst=i\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    i = 0\n    j = 0\n    current_min = lst[0]\n    for index, value in enumerate(lst):\n        if value < current_min:\n            current_min = lst[index]\n            j = index\n    # print(\"value of j=\",j)\n    for index, value in enumerate(lst):\n        if index > j:\n            j = index\n    # print(\"current_min=\",current_min)\n    # print(\"j=\",j)\n    return j\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    import math\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    return lst[0:i+1]\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    # Iterate over all elements\n    for i in range(len(lst) - 1):\n        for j in range(len(lst) - i - 1):\n            # if length of sublist is greater than current sublist\n            if len(lst[j:j+i+1]) > min_length:\n                # return minimum length\n                return len(lst[j:j+i+1])\n    return False\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if(len(lst)==0): \n        return -1\n    if(len(lst)==1): \n        return lst[0] \n    if (lst[0]<lst[1]): \n        lst.sort() \n        return lst[1] \n    else: \n        return lst[0] \n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = []\n    for i in range(len(lst)):\n        if len(lst[i]) < len(min):\n            min = lst[i]\n    return min\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst:\n        return []\n    else:\n        for i in range(len(lst)):\n            if len(lst[i])<=min(lst[i]):\n                min_elem = lst[i]\n        return min_elem\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = lst[0]\n    min_index = 0\n    for i in range(1, len(lst)):\n        if min_len > lst[i]:\n            min_len = lst[i]\n            min_index = i\n    return min_index\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_min = []\n    min_length = sys.maxsize\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            lst_min = i\n    return lst_min\n    \n    \ndef Quick_Sort(lst):\n    '''\n    Write a python function to find the smallest number in a sorted list.\n    '''\n    if len(lst) <= 1:\n        return lst\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)/2\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l[0]*b[1])-(l[1]*b[0])\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a=l*b\n    return a\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if b[0]<l[0] or l[1]<b[1]:\n        return \"Error: Rectangle Error\"\n    else:\n        return l[0]*b[1]-l[1]*b[0]\n    \n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    return(area)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join([i.lower() if ord(i) > ord('z') else i for i in str1])\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return ''.join([i for i in str1 if i not in ['.', ',', '!', '?']])\ndef split_text(str1):\n    '''\n    Write a function to split a given string into substrings using regex.\n    '''\n    return re.findall(r'\\w+', str1)\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return ''.join([chr(i) for i in range(65536) if i not in str1])\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return ''.join([str(i) for i in range(10) if i not in str1])\ndef remove_symbols(str1):\n    '''\n    Write a function to remove all symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if i not in str1])\ndef remove_special_symbols(str1):\n    '''\n    Write a function to remove all special symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if str(i) not in str1])\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return ''.join([i if i in ['.', ',', '!', '?'] else '' for i in str1])\ndef capitalize_word(str1):\n    '''\n    Write a function to capitalize a given word.\n    '''\n    return str1.title()\ndef remove_word_first(str1):\n    '''\n    Write a function to remove a word first in a given string.\n    '''\n    return str1[1:].strip()\ndef remove_word_last(str1):\n    '''\n    Write a function to remove a word last in a given string.\n    '''\n    return str1[:-1].strip()\ndef remove_word_first_and_last(str1):\n    '''\n    Write a function to remove a word first and last in a given string.\n    '''\n    return str1[1:].strip().lower() + str1[:-1].strip().lower()\ndef remove_number(str1):\n    '''\n    Write a function to remove any number from a given string.\n    '''\n    return str1.replace('0', '')\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove any whitespace from a given string.\n    '''\n    return ''.join([i for i in str1 if i!=''])\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return ''.join([chr(i) for i in range(65536) if i not in str1])\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return ''.join([str(i) for i in range(10) if i not in str1])\ndef remove_symbols(str1):\n    '''\n    Write a function to remove all symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if i not in str1])\ndef remove_special_symbols(str1):\n    '''\n    Write a function to remove all special symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if str(i) not in str1])\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return ''.join([chr(i) for i in range(65536) if i not in str1])\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return ''.join([i for i in str1 if i not in ['.', ',', '!', '?']])\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return ''.join([str(i) for i in range(10) if i not in str1])\ndef capitalize_word(str1):\n    '''\n    Write a function to capitalize a given word.\n    '''\n    return str1.title()\ndef remove_word_first(str1):\n    '''\n    Write a function to remove a word first in a given string.\n    '''\n    return str1[1:].strip()\ndef remove_word_last(str1):\n    '''\n    Write a function to remove a word last in a given string.\n    '''\n    return str1[:-1].strip()\ndef remove_word_first_and_last(str1):\n    '''\n    Write a function to remove a word first and last in a given string.\n    '''\n    return str1[1:].strip().lower() + str1[:-1].strip().lower()\ndef remove_number(str1):\n    '''\n    Write a function to remove any number from a given string.\n    '''\n    return str1.replace('0', '')\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove any whitespace from a given string.\n    '''\n    return ''.join([i for i in str1 if i!=''])\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return ''.join([chr(i) for i in range(65536) if i not in str1])\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return ''.join([str(i) for i in range(10) if i not in str1])\ndef remove_symbols(str1):\n    '''\n    Write a function to remove all symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if i not in str1])\ndef remove_special_symbols(str1):\n    '''\n    Write a function to remove all special symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if str(i) not in str1])\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return ''.join([chr(i) for i in range(65536) if i not in str1])\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return ''.join([i for i in str1 if i not in ['.', ',', '!', '?']])\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return ''.join([str(i) for i in range(10) if i not in str1])\ndef capitalize_word(str1):\n    '''\n    Write a function to capitalize a given word.\n    '''\n    return str1.title()\ndef remove_word_first(str1):\n    '''\n    Write a function to remove a word first in a given string.\n    '''\n    return str1[1:].strip()\ndef remove_word_last(str1):\n    '''\n    Write a function to remove a word last in a given string.\n    '''\n    return str1[:-1].strip()\ndef remove_word_first_and_last(str1):\n    ''"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Your code here\n    # print(str1)\n    new_str = str1.lower()\n    # print(new_str)\n    r = re.compile(r'\\W')\n    # print(r.findall(str1))\n    return r.sub('',new_str)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    pattern = re.compile(r'(.)\\1+')\n    return pattern.sub(r'\\1', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.title()\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in 'abcdefghijklmnopqrstuvwxyz'}))\ndef remove_number(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '0123456789'}))\ndef remove_symbols(str1):\n    '''\n    Write a function to remove symbols from a given string.\n    '''\n    return str1.translate(str.maketrans({'!':'' for key in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'}))\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'}))\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!'[:-1] for key in '!@#$%&()'}))\ndef remove_simple_symbols(str1):\n    '''\n    Write a function to remove simple letters from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_dashes(str1):\n    '''\n    Write a function to remove dashes from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all characters from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_special_characters_group(str1):\n    '''\n    Write a function to remove all characters from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_brackets(str1):\n    '''\n    Write a function to remove all brackets from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '[]'}))\ndef remove_brackets_group(str1):\n    '''\n    Write a function to remove all brackets from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '[]'}))\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in''}))\ndef remove_numbers(str1):\n    '''\n    Write a function to remove numbers from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '0123456789'}))\ndef remove_special_chars_group(str1):\n    '''\n    Write a function to remove all characters from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_brackets_group_group(str1):\n    '''\n    Write a function to remove all brackets from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '[]'}))\ndef remove_dashes_group_group(str1):\n    '''\n    Write a function to remove all dashes from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_symbols_group_group(str1):\n    '''\n    Write a function to remove all symbols from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_numbers_group_group(str1):\n    '''\n    Write a function to remove all numbers from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '0123456789'}))\ndef remove_special_characters_group_group(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_spaces_group_group(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in''}))\ndef remove_special_chars_group_group(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_dashes_group_group(str1):\n    '''\n    Write a function to remove all dashes from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_symbols_group_group(str1):\n    '''\n    Write a function to remove all symbols from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_numbers_group_group(str1):\n    '''\n    Write a function to remove all numbers from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '0123456789'}))\ndef remove_special_chars_group_group(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_brackets_group_group(str1):\n    '''\n    Write a function to remove all brackets from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '[]'}))\ndef remove_brackets_group_group(str1):\n    '''\n    Write a function to remove all brackets from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '[]'}))\ndef remove_spaces_group_group(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in''}))\ndef remove_symbols_group_group(str1):\n    '''\n    Write a function to remove all symbols from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '!@#$%&()'}))\ndef remove_numbers_group_group(str1):\n    '''\n    Write a function to remove all numbers from a given string.\n    '''\n    return str1.translate(str.maketrans({key:'' for key in '0123456789'}))\ndef remove_special_chars_group_group(str1):\n    '''\n    Write a function to remove all special characters fro"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    start = 0\n    end = len(str1)\n    while start < end:\n        if str1[start].isupper():\n            str1 = str1[0:start] + str1[end].upper() + str1[end+1:]\n        start += 1\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #TODO\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = re.compile('^[A-Za-z]')\n    return re.sub(regex, '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def removeUpper(str1):\n        '''\n        Return a string with all uppercase characters removed.\n        '''\n        new_str1 = \"\"\n        \n        for char in str1:\n            if char.isupper():\n                new_str1 += char.lower()\n        \n        return new_str1\n    \n    return removeUpper(str1)\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    def getFirst(lst): \n        return lst[0] \n    \n    def getLast(lst): \n        return lst[-1] \n    \n    listOfEntries = lst[:] \n    listOfEntries.sort(key=getFirst) \n    lst = listOfEntries[:] \n    \n    return lst \n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    \n    for item in lst:\n        print(item[0])\n        "
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    #lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n    lst = [lst[i:i + 6] for i in range(0, len(lst), 6)]\n    return lst\n    \ndef main():\n    print(Extract([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]))\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    index = 0\n    for i in lst:\n        if len(i) > 1:\n            index = index + 1\n        else:\n            pass\n    return index\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        return lst[i][0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst_1 = []\n    for i in range(len(lst)):\n        lst_1.append(lst[i][0])\n    return lst_1\ndef main():\n    lst = [['a', 'b', 'c', 'd'], ['e', 'f', 'g'], ['h', 'i', 'j'], ['k', 'l','m', 'n']]\n    lst_1 = Extract(lst)\n    print(lst_1)\n    print(lst[0][1:4])\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if type(lst) is not list: \n        raise TypeError('lst must be a list')\n    return lst[0]\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublist_1 = lst[0]\n    for i in range(1, len(lst)):\n        sublist_1 = sublist_1 + lst[i]\n    return sublist_1\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            upper_count += 1\n    return upper_count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        if(str[i].isupper()):\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    print(f\"Count of upper case in string {str} is: {str.upper().count('A')}\")\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_str = ''\n    for i in str:\n        if i.isupper():\n            upper_str+=i\n    return upper_str\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    if type(str) == str:\n        str = str.upper()\n        for char in str:\n            if char >= \"A\" and char <= \"Z\":\n                count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    c = 0\n    for i in str:\n        if i.isupper():\n            c += 1\n    return c\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    def helper(list, ind):\n        '''\n        Helper to find all possible combinations of the elements of the given list.\n        '''\n        if ind == len(list):\n            return [tuple(list)]\n        \n        combo = []\n        for el in list:\n            combo.extend(helper(list, ind+1))\n        return combo\n    \n    return helper(list1, 0)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [''.join(e) for e in itertools.permutations(list1)]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_combos = []\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [''.join(i) for i in itertools.product(list1,repeat=len(list1))]\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combination = list(itertools.combinations(list1,2))\n    combination.append(list1)\n    return combination\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return combinations(list1, list2, list1)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    s = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            s.append([list1[i], list1[j]])\n    return s\n    \n    "
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return list1\n    else:\n        return combinations_list(list1[:len(list1)//2] + list1[len(list1)//2:])\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = []\n    prev_min = [0]*len(arr)\n    result_arr = []\n    subarray = []\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    \n    \n    # Find the max product of each sub array\n    max_prod = []\n    prod_list = []\n    max_prod_subarray = []\n    prod_subarray_index = []\n    i = 0\n    j = 0\n    \n    while i < len(arr):\n        prod = 1\n        while j < len(arr):\n            prod *= arr[j]\n            j += 1\n        max_prod.append(prod)\n        prod_list.append(prod)\n        prod_subarray_index.append(i)\n        \n        while prod in max_prod:\n            prod += 1\n        max_prod.append(prod)\n        prod_list.append(prod)\n        \n        i += 1\n        j = 0\n        \n    # Find the maximum product subarray\n    for i in prod_subarray_index:\n        if arr[i] > prod_list[i]:\n            prod_list[i] = prod_list[i] * arr[i]\n        else:\n            i += 1\n    \n    for i in range(len(prod_list)):\n        if prod_list[i] > prod_list[i-1]:\n            prod_list[i] = prod_list[i] * arr[i]\n        else:\n            i += 1\n            \n    # Sort the max_prod subarray\n    for i in range(len(max_prod)):\n        prod = max_prod[i]\n        max_prod_subarray.append(prod)\n        \n        while prod in max_prod:\n            max_prod.remove(max_prod[prod])\n            prod += 1\n        max_prod.append(prod)\n        \n    return max_prod_subarray\n    \n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Case when array is one element long, return 1 as product of that element\n    if len(arr) == 1:\n        return 1\n    \n    # Set to check for the edge cases\n    check_edge = [True for _ in range(len(arr))]\n    # Create a new array where we fill in the current element\n    arr_copy = arr.copy()\n    # Set check_edge to False to prevent we have already done the checking\n    check_edge[0] = False\n    \n    # Iterate over all elements in array\n    for i in range(1, len(arr)):\n        # Calculate the maximum product of all consecutive elements of this element\n        # If this element is 0, we have already done the check for the edge case\n        # in this iteration, so we just increment the previous element\n        if arr[i - 1] == 0:\n            arr_copy[i] = arr_copy[i - 1]\n        # Else, we add this element to the array\n        else:\n            # If this element is negative, we have already done the check for the edge case\n            # in this iteration, so we simply increment the previous element\n            if arr[i - 1] < 0:\n                arr_copy[i] = arr_copy[i - 1] + arr[i]\n            # Else, we add this element to the array\n            else:\n                arr_copy[i] = max(arr_copy[i - 1], arr[i])\n        # Check if the current element is 0\n        if arr_copy[i] == 0:\n            check_edge[i] = False\n    \n    # If any element of array is 0, then we have already done the check for the edge case\n    # in this iteration, so we just return the maximum product of all consecutive elements of this element\n    # and reset the array\n    if any(arr_copy[i] == 0 for i in range(1, len(arr))):\n        return max(arr_copy)\n    \n    # Return the maximum product of all consecutive elements of array\n    return max(arr_copy)\n    \ndef main():\n    print(f\"Max Subarray Product is {max_subarray_product([-1, 2, -3, 0, -2, 1, -4, -1, -2, -5, -3, -3, -2, 0, 0, -1, -2, -1, -2, -1, -2, -1, -3, -3, -2, -1, -2, -1, -2, -1, -3, -2, -2, -2, -1, -3, -3, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, "
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    l = len(arr)\n    arr.sort()\n    if l == 1:\n        return arr[0]\n    if l == 2:\n        return arr[0] * arr[1]\n    if l == 3:\n        return arr[0] * arr[1] * arr[2]\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    p, q, s, t = 0, 0, 0, 0\n    max_p = 0\n    for i in arr:\n        if i == 0:\n            s = q\n            q = p\n            t += 1\n        elif i < 0:\n            if (p < q and t > 0) or (q < p and s > 0):\n                s = q\n                q = p\n                t -= 1\n            else:\n                if q > t:\n                    t = p\n                    p = q\n            max_p = max(max_p, t*i)\n        else:\n            q = q + i\n    return max_p"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = []\n    product = 1\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            product = product * arr[j]\n        result.append(product)\n        product = 1\n    return max(result)"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product_subarray = arr[0]\n    max_product_index = 0\n    for index in range(1,len(arr)):\n        product = arr[index]*arr[index-1]\n        if product > max_product_subarray:\n            max_product_subarray = product\n            max_product_index = index\n    return max_product_subarray,max_product_index\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr\n    else:\n        max_sub = arr[0]\n        curr_sub = arr[1:]\n        for i in range(1, len(arr)):\n            curr_sub = [arr[i]] + max(curr_sub)\n            if curr_sub[-1] > max_sub:\n                max_sub = curr_sub[-1]\n        return max_sub"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # find the max product subarray and increment by the product of all subarrays\n    def get_max_product_subarray(arr):\n        subarray_prod = 1\n        max_subarray_prod = 1\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                subarray_prod = subarray_prod * arr[i]\n                if subarray_prod > max_subarray_prod:\n                    max_subarray_prod = subarray_prod\n                subarray_prod = 1\n        return max_subarray_prod\n    # find the max product subarray and increment by the product of all subarrays\n    def get_max_product_subarray_2(arr):\n        max_prod_subarray = 1\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                prod_subarray = arr[i] * arr[j]\n                if prod_subarray > max_prod_subarray:\n                    max_prod_subarray = prod_subarray\n        return max_prod_subarray\n    \n    # calculate the maximum product subarray and return it\n    # with two subarrays\n    def get_max_product_subarray_2(arr):\n        max_prod_subarray = 1\n        sub_arr = []\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                prod_subarray = arr[i] * arr[j]\n                if prod_subarray > max_prod_subarray:\n                    max_prod_subarray = prod_subarray\n                prod_subarray = 1\n                if prod_subarray > max_prod_subarray:\n                    max_prod_subarray = prod_subarray\n                sub_arr.append(max_prod_subarray)\n        return sub_arr\n    # calculate the maximum product subarray and return it\n    # with a single subarray\n    def get_max_product_subarray_1(arr):\n        max_prod_subarray = 1\n        sub_arr = []\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                prod_subarray = arr[i] * arr[j]\n                if prod_subarray > max_prod_subarray:\n                    max_prod_subarray = prod_subarray\n                prod_subarray = 1\n                if prod_subarray > max_prod_subarray:\n                    max_prod_subarray = prod_subarray\n                sub_arr.append(max_prod_subarray)\n        return sub_arr\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # if arr is empty\n    if len(arr)==0:\n        return 0\n    \n    # if array is only one element\n    if len(arr)==1:\n        return arr[0]\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(0, n):\n        if dict.get(i) == None:\n            return False\n        elif dict.get(i)!= None:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        key = 'key'+str(i)\n        value = 'value'+str(i)\n        if key not in dict.keys():\n            return False\n        if value not in dict[key].values():\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = 0\n    for key, value in dict.items():\n        if value == n:\n            check = 1\n            break\n    if check == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for val in dict.values():\n        if dict[val]!=n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if not isinstance(dict, dict):\n        return 'Error: Argument was not a dictionary'\n    if not dict:\n        return 'Error: No data provided'\n    try:\n        for k in dict.keys():\n            if type(dict[k]) == list:\n                for item in dict[k]:\n                    if item == n:\n                        return 'Error: Value already present'\n            elif dict[k] == n:\n                return 'Error: Value already present'\n        return 'No errors'\n    except:\n        return 'Error: Did not find key in the dict'\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    for item in dict.values():\n        if item!= dict[item]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if type(dict[n]) == dict:\n        if type(dict[n]) == list:\n            for item in dict[n]:\n                check_value(item, n)\n        else:\n            if dict[n] == dict[n+1]:\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_counts = Counter(dict.values())\n    for value in dict.values():\n        if value_counts[value]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        for j in range(i, len(dict)):\n            if dict[i]!= dict[j]:\n                return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if dict[i]!= dict[i+n]:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # import required module\n    import re\n    # create dictionary to remove items\n    dic = dict1.copy()\n    # loop through the dictionary\n    for i in dic:\n        # if item is not empty\n        if dic[i]!= '':\n            # replace it with empty string\n            dic[i] = ''\n    return dic\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in range(len(dict1)):\n        if dict1.get(i) == None:\n            dict1.pop(i)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        if dict1[key]==\"\":\n            result[key]=\" \"\n        else:\n            result[key] = dict1[key]\n    return result\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if not dict1[i]:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i, j in dict1.items():\n        if j:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_dict = {}\n    for key, value in dict1.items():\n        if value:\n            empty_dict[key] = value\n    return empty_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1:\n        if dict1[k]==[]:\n            del dict1[k]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if dict1[key] == \"\":\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.keys():\n        if type(dict1[key]) is list:\n            if len(dict1[key]) > 0:\n                del dict1[key]\n        else:\n            if len(dict1[key]) > 0:\n                del dict1[key]\n    return dict1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product_value = arr[0]*arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = -1\n    for i in range(len(arr)-1):\n        max_product = max(arr[i]+arr[i+1],max_product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res = arr[1]*arr[0]\n    for i in range(1,len(arr)):\n        res = max(res,arr[i]+arr[i-1])\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max = arr[0]\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    \n    max_product = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        max_product = max(max_product, arr[i] * arr[i-1])\n    return max_product\n    \ndef main():\n    '''\n    Run main function.\n    '''\n    print(\"Maximum product of an increasing subsequence of the array = \" + str(max_product(A)))\n    print(\"Maximum product of an increasing subsequence of the array = \" + str(max_product(B)))\n    print(\"Maximum product of an increasing subsequence of the array = \" + str(max_product(C)))\n    print(\"Maximum product of an increasing subsequence of the array = \" + str(max_product(D)))\n    print(\"Maximum product of an increasing subsequence of the array = \" + str(max_product(E)))\n    print(\"Maximum product of an increasing subsequence of the array = \" + str(max_product(F)))\n    print(\"Maximum product of an increasing subsequence of the array = \" + str(max_product(G)))\n    print(\"Maximum product of an increasing subsequence of the array = \" + str(max_product(H)))\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr.sort()\n    length = len(arr)\n    m = 0\n    for i in range(0, length-1):\n        if arr[i]*arr[i+1] > m:\n            m = arr[i]*arr[i+1]\n    return m\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    def product(arr,i):\n        ans = 1\n        for j in range(i,len(arr)):\n            ans *= arr[j]\n        return ans\n    \n    n = len(arr)\n    dp = [[0 for i in range(n)]for i in range(n)]\n    for i in range(n-1,-1,-1):\n        for j in range(i,n):\n            dp[i][j] = arr[i]*arr[j]\n    res = 1\n    for i in range(n):\n        res = max(dp[i][i],res)\n        for j in range(i,n):\n            res = max(dp[i][j],res)\n    return res\narr = [1,3,5,7,9]\nprint(product(arr,3))\nprint(product(arr,5))\nprint(product(arr,7))\nprint(product(arr,9)"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    m = []\n    n = len(arr)\n    for i in range(1, n):\n        m.append(arr[i] * arr[i-1])\n    for i in range(n - 1):\n        for j in range(i+1, n):\n            m.append(arr[i] * arr[j])\n    return max(m)\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    if len(arr)==2:\n        return arr[1]*arr[0]\n    if len(arr)==3:\n        return arr[1]*arr[1]*arr[2]\n    if arr[0]!=arr[1] and arr[0]!=arr[2] and arr[2]!=arr[1] and arr[2]!=arr[3]:\n        return arr[0]*arr[1]*arr[2]\n    #these are the indexes of the elements which are sorted.\n    s1,s2,s3=0,0,0\n    #we take all the 3 elements of the array and combine them to the sums\n    #and then sort them so we can combine them in a single array\n    for i in range(len(arr)):\n        if arr[i]>arr[s1]:\n            s2+=arr[i]\n            s1=i\n        elif arr[i]>arr[s2]:\n            s3+=arr[i]\n            s2=i\n        else:\n            s3+=arr[i]\n    #we return the sums of the elements\n    return s1*s2*s3\n    #if there is only one element, return it \n    #if the array is of length 2 or 3, return the sum of the two elements\n    #if the array is of length 4, return the sum of the three elements\n    #if the array is of length 5, return the sum of the four elements\n    #if the array is of length 6, return the sum of the five elements\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0]+test_tup[1], test_tup[1]+test_tup[0]\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # return tuple of two tuples\n    return tuple(tup + test_tup for tup in zip(test_tup[0], test_tup[1]))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup\n    if b < a:\n        a,b = b,a\n    if a == b:\n        return a\n    return tuple(sorted([a,b]))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple((tuple(test_tup[j]) + tuple(test_tup[j+1])) for j in range(len(test_tup)-1))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup\n    if a + b!= 0:\n        return a + b\n    else:\n        return None\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # return (test_tup[0], test_tup[1])\n    return tuple(sorted([test_tup[0], test_tup[1]]))\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n_list = []\n    for i in range(len(test_tup)):\n        n_list.append(test_tup[i][0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return(test_tup[1] + test_tup[0])\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            if test_tup[j] > test_tup[i] + test_tup[j]:\n                return test_tup[:j] + test_tup[j+1:n] + test_tup[i+1:n] + test_tup[j+1:n]\n    return test_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(f\"{test_tup[0]}{test_tup[1]}\")\n    print(\"\")\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 0\n    for i in range(n):\n        result = result * arr[i] % n\n    return result\n    \ndef main():\n    arr = [5, 2, 3, 4, 7]\n    n = len(arr)\n    print(find_remainder(arr, n))\n    \nmain()"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0:\n        return 1\n    # Initialize the result to 0\n    result = 1\n    # Iterate through the array\n    for i in range(n): \n        # Find the product of remaining elements \n        product = arr[i]*result \n        # If product is less than or equal to 1, increment the result \n        if product <= 1: \n            result += 1\n    # Return the result \n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return find_remainder(arr, abs(n))\n    else:\n        return arr[n] * find_remainder(arr, n - 1)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mod = n%1\n    if mod == 1: \n        return arr[0]\n    else: \n        return find_remainder(arr, mod)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    m = 1\n    for i in range(1, len(arr)):\n        m = m * arr[i]\n    return m % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    temp = 1\n    for i in range(n): \n        temp = temp * arr[i]\n    return temp\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in arr:\n        res *= i\n    return res % n\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0:\n        return 0\n    if n%2 == 0:\n        return arr[n//2]*find_remainder(arr, n//2)\n    else:\n        return arr[n//2]*find_remainder(arr, n//2) + find_remainder(arr, n//2+1)\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    k = n % len(arr)\n    while k!= 0:\n        arr[k] *= arr[k % len(arr)]\n        k = k // len(arr)\n    return arr\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    mod = 1\n    remainder = 0\n    \n    for i in range(len(arr)):\n        remainder += arr[i] * mod\n        mod *= n\n    \n    return remainder\n    \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = False\n    i = 0\n    while i < len(l):\n        if l[i] == l[i-1]:\n            i += 1\n        else:\n            consecutive = True\n            break\n    return consecutive\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    temp = 0\n    for item in l:\n        if item!= 0:\n            temp += 1\n    if temp == len(l):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l is not None: \n        for i in l:\n            if i == l[-1]:\n                return False\n            else:\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count=0\n    for i in range(len(l)):\n        if l[i]!=l[i+1] and l[i]!=l[i-1] and l[i]!=l[i-2] and l[i]!=l[i-3] and l[i]!=l[i-4] and l[i]!=l[i-5]:\n            count+=1\n    if count==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l == []:\n        return True\n    else:\n        flag = 0\n        for i in range(len(l)):\n            if l[i] - l[i-1] > 1:\n                flag = 1\n                break\n        if flag == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    j = 1\n    while i < len(l): \n        if l[i] == l[i-1]: \n            j += 1\n        else: \n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)): \n        if l[i]%2==0: \n            return True\n    return False \n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l or len(l) == 0: \n        return False\n    elif l[0]!= l[-1]: \n        return True\n    else: \n        for i in range(1,len(l)): \n            if l[i]!= l[i-1]: \n                return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in l:\n        if i == i + 1:\n            count += 1\n    return count == len(l) - 1\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i=0\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if test_list1 == None or test_list2 == None:\n        return None\n    if len(test_list1) == len(test_list2):\n        return tuple(sorted(test_list1))\n    else:\n        return None\n    \ndef test_tuple_intersection():\n    '''\n    Write a function that returns the tuple intersection of lists, given the same size of the lists.\n    '''\n    test_list1 = [1,2,3,4]\n    test_list2 = [1,2,3,4,5]\n    assert tuple_intersection(test_list1, test_list2) == (1, 2, 3, 4, 5)\n    test_list1 = [1,2,3,4]\n    test_list2 = [2,3,4,5]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6,7]\n    assert tuple_intersection(test_list1, test_list2) == (1, 2, 3, 4, 5, 6, 7)\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6,7]\n    assert tuple_intersection(test_list1, test_list2) == (1, 2, 3, 4, 5, 6, 7)\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6,7]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6,7]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6,7]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 = [1,2,3,4,5]\n    test_list2 = [1,2,3,4,5,6]\n    assert tuple_intersection(test_list1, test_list2) == None\n    test_list1 "
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_tuple = ()\n    for item in test_list1:\n        if item in test_list2:\n            intersection_tuple = intersection_tuple + (item,)\n    return intersection_tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    '''\n    test_list1 = [[1, 2], [3, 4], [5, 6]]\n    test_list2 = [[1, 3], [2, 4], [5, 7]]\n    '''\n    # TODO: INSERT YOUR CODE BETWEEN THE DASHED LINES\n    # ------------------------------------------------------------------\n    tuple1 = ()\n    tuple2 = ()\n    for item in test_list1:\n        if tuple1 == () or tuple1 == item:\n            tuple1 = item\n        if tuple2 == () or tuple2 == item:\n            tuple2 = item\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return test_list1[0]\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(sorted(set(test_list1) & set(test_list2)))\n    \ndef tuple_intersection_v2(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(sorted(set(test_list1) & set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    '''\n    TEST CASE:    \n    - list1 = (1,2,3,4)\n    - list2 = (2,3,4,1)\n    - return the tuple ((2,3))\n    - list1 = (2,3,4,1)\n    - list2 = (2,4)\n    - return the tuple ((2,4))\n    - list1 = (2,4)\n    - list2 = (1,4)\n    - return the tuple ((1,4))\n    - list1 = (1,4)\n    - list2 = (4)\n    - return the tuple ((4))\n    - list1 = (1,2,3,4,5)\n    - list2 = (1,2,3,4,5)\n    - return the tuple ((1,2,3))\n    - list1 = (1,2,3)\n    - list2 = (1,3)\n    - return the tuple ((1,3))\n    '''\n    list1 = test_list1\n    list2 = test_list2\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list3 = []\n    for i in range(len(test_list2)):\n        if test_list2[i] in test_list1:\n            test_list3.append(test_list2[i])\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # print(\"tuple_intersection: test_list1: {} \\ntest_list2: {}\".format(test_list1, test_list2))\n    # if len(test_list1)!= len(test_list2):\n    #     return -1\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple1_indexes, tuple2_indexes = [], []\n    for element in test_list1:\n        if element in test_list2:\n            tuple1_indexes.append(test_list1.index(element))\n        else:\n            tuple2_indexes.append(test_list2.index(element))\n    return tuple(tuple1_indexes), tuple(tuple2_indexes)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    output = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            output += newch\n        else:\n            output += str1[i]\n    return output\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \ndef replace_all(str1,ch,newch):\n    '''\n    Write a function to replace all occurences of characters in a string.\n    '''\n    return str1.replace_all(ch,newch)\n    \ndef split_string(str1,sep):\n    '''\n    Write a function to split a string.\n    '''\n    return str1.split(sep)\n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef rev_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1].reverse()\n    \ndef is_even(num):\n    '''\n    Write a function to check whether a number is even or odd.\n    '''\n    return num%2==0\n    \ndef is_odd(num):\n    '''\n    Write a function to check whether a number is even or odd.\n    '''\n    return num%2!=0\n    \ndef is_prime(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3,int(num**0.5)+1,2):\n        if num%i==0:\n            return False\n    return True\n    \ndef is_prime_number(num):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if num == 2:\n        return True\n    for i in range(3,int(num**0.5)+1,2):\n        if num%i==0:\n            return False\n    return True\n    \ndef contains_digit(num):\n    '''\n    Write a function to check whether a number contains any digits or not.\n    '''\n    for i in range(0,len(num)):\n        if num[i].isdigit():\n            return True\n    return False\n    \ndef get_digits_order(num):\n    '''\n    Write a function to get the digits order.\n    '''\n    digits = []\n    for i in range(0,len(num)):\n        if num[i].isdigit():\n            digits.append(i)\n    return digits\n    \ndef get_permutations(num):\n    '''\n    Write a function to get the permutations of the digits of a number.\n    '''\n    if contains_digit(num):\n        return [num]\n    if num == 0:\n        return [0]\n    elif num == 1:\n        return [1]\n    elif num == 2:\n        return [1,2]\n    elif num == 3:\n        return [1,3]\n    elif num == 4:\n        return [1,4]\n    elif num == 5:\n        return [1,5]\n    elif num == 6:\n        return [1,6]\n    elif num == 7:\n        return [1,7]\n    elif num == 8:\n        return [1,8]\n    elif num == 9:\n        return [1,9]\n    elif num == 10:\n        return [1,10]\n    elif num == 11:\n        return [1,11]\n    elif num == 12:\n        return [1,12]\n    elif num == 13:\n        return [1,13]\n    elif num == 14:\n        return [1,14]\n    elif num == 15:\n        return [1,15]\n    elif num == 16:\n        return [1,16]\n    elif num == 17:\n        return [1,17]\n    elif num == 18:\n        return [1,18]\n    elif num == 19:\n        return [1,19]\n    elif num == 20:\n        return [1,20]\n    elif num == 21:\n        return [1,21]\n    elif num == 22:\n        return [1,22]\n    elif num == 23:\n        return [1,23]\n    elif num == 24:\n        return [1,24]\n    elif num == 25:\n        return [1,25]\n    elif num == 26:\n        return [1,26]\n    elif num == 27:\n        return [1,27]\n    elif num == 28:\n        return [1,28]\n    elif num == 29:\n        return [1,29]\n    elif num == 30:\n        return [1,30]\n    elif num == 31:\n        return [1,31]\n    elif num == 32:\n        return [1,32]\n    elif num == 33:\n        return [1,33]\n    elif num == 34:\n        return [1,34]\n    elif num == 35:\n        return [1,35]\n    elif num == 36:\n        return [1,36]\n    elif num == 37:\n        return [1,37]\n    elif num == 38:\n        return [1,38]\n    elif num == 39:\n        return [1,39]\n    elif num == 40:\n        return [1,40]\n    elif num == 41:\n        return [1,41]\n    elif num == 42:\n        return [1,42]\n    elif num == 43:\n        return [1,43]\n    elif num == 44:\n        return [1,44]\n    elif num == 45:\n        return [1,45]\n    elif num == 46:\n        return [1,46]\n    elif num == 47:\n        return [1,47]\n    elif num == 48:\n        return [1,48]\n    elif num == 49:\n        return [1,49]\n    elif num == 50:\n        return [1,50]\n    elif num == 51:\n        return [1,51]\n    elif num == 52:\n        return [1,52]\n    elif num == 53:\n        return [1,53]\n    elif num == 54:\n        return [1,54]\n    elif num == 55:\n        return [1,55]\n    elif num == 56:\n        return [1,56]\n    elif num == 57:\n        return [1,57]\n    elif num == 58:\n        return [1,58]\n    elif num == 59:\n        return [1,59]\n    elif num == 60:\n        return [1,60]\n    elif num == 61:\n        return [1,61]\n    elif num == 62:\n        return [1,62]\n    elif num == 63:\n        return [1,63]\n    elif num == 64:\n        return [1,64]\n    elif num == 65:\n        return [1,65]\n    elif num == 66:\n        return [1,66]\n    elif num == 67:\n        return [1,67]\n    elif num == 68:\n        return [1,68]\n    elif num == 69:\n        return [1,69]\n    elif num == 70:\n        return [1,70]\n    elif num == 71:\n        return [1,71]\n    elif num == 72:\n        return [1,72]\n    elif num == 73:\n        return [1,73]\n    elif num == 74:\n        return [1,74]\n    elif num == 75:\n        return [1,75]\n    elif num == 76:\n        return [1,76]\n    elif num == 77:\n        return [1,77]\n    elif num == 78:\n        return [1,78]\n    elif num == 79:\n        return [1,79]\n    elif num == 80:\n        return [1,80]\n    elif num == 81:\n        return [1,81]\n    elif num == 82:\n        return [1,82]\n    elif num == 83:\n        return [1,83]\n    elif num == 84:\n        return [1,84]"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = []\n    for c in range(0,len(str1)):\n        if str1[c]!= ch:\n            result.append(str1[c])\n    result = ''.join(result)\n    return result\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if(i!= ch):\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Add all the characters\n    s = \"\"\n    for i in range(len(str1)):\n        s += str1[i]\n    # Add all the new characters\n    for j in range(len(s)):\n        if s[j] == ch:\n            s = s[:j]+newch+s[j+1:]\n    # Return the new string\n    return s\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if ch in str1:\n        str1 = str1.replace(ch,\"\")\n    return str1\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=str1.replace(ch,\"\")\n    str2=str2.replace(newch,\"\")\n    return str2\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i]==ch:\n            str1=str1.replace(str1[i],newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str=[]\n    for c in str1:\n        if c==ch:\n            new_str.append(newch)\n        else:\n            new_str.append(c)\n    return \"\".join(new_str)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1.sort(key=dict1.get)\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    \n    count = dict1.items()\n    count = sorted(count, key = lambda x : x[1])\n    return count\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = {k: v for k, v in sorted(dict1.items(), key= lambda item: item[1])}\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict1.values()\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict()\n    for key, value in dict1.items():\n        if key not in sorted_dict:\n            sorted_dict[key] = value\n        else:\n            if sorted_dict[key] < value:\n                sorted_dict[key] = value\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = dict1.copy()\n    dict2.pop('NUM')\n    dict2.pop('LEN')\n    dict2.pop('TIME')\n    dict2.pop('PTS')\n    dict2.pop('WINS')\n    dict2.pop('DIM')\n    dict2.pop('DRB')\n    dict2.pop('WL_GAME')\n    dict2.pop('WL_PAY')\n    dict2.pop('WL_BOMB')\n    dict2.pop('WL_EVALUATE')\n    dict2.pop('WL_GAME_OVER')\n    dict2.pop('WL_MISS')\n    dict2.pop('WL_DRAW')\n    dict2.pop('WL_UNDER')\n    dict2.pop('WL_WIN_DRAW')\n    dict2.pop('WL_WIN_MISS')\n    dict2.pop('WL_DRAW_MISS')\n    dict2.pop('DAMAGE')\n    dict2.pop('LIFE')\n    dict2.pop('MOVIES')\n    dict2.pop('TIMEDELAY')\n    dict2.pop('WINS_LOSE')\n    dict2.pop('WL_DRAW_LOSE')\n    dict2.pop('DAMAGE_LOSE')\n    dict2.pop('LIFE_LOSE')\n    dict2.pop('LIMIT')\n    dict2.pop('MOVIES_MAX')\n    dict2.pop('TIMEDELAY_MAX')\n    dict2.pop('WINS_MAX')\n    dict2.pop('WL_DRAW_MAX')\n    dict2.pop('DAMAGE_MAX')\n    dict2.pop('LIFE_MAX')\n    dict2.pop('MOVIES_MIN')\n    dict2.pop('TIMEDELAY_MIN')\n    dict2.pop('WINS_MIN')\n    dict2.pop('WL_DRAW_MIN')\n    dict2.pop('DAMAGE_MIN')\n    dict2.pop('LIFE_MIN')\n    dict2.pop('MOVIES_AVG')\n    dict2.pop('TIMEDELAY_AVG')\n    dict2.pop('WINS_AVG')\n    dict2.pop('WL_DRAW_AVG')\n    dict2.pop('DAMAGE_AVG')\n    dict2.pop('LIFE_AVG')\n    dict2.pop('MOVIES_MAX_STOP')\n    dict2.pop('TIMEDELAY_MAX_STOP')\n    dict2.pop('WINS_MAX_STOP')\n    dict2.pop('WL_DRAW_MAX_STOP')\n    dict2.pop('DAMAGE_MAX_STOP')\n    dict2.pop('LIFE_MAX_STOP')\n    dict2.pop('MOVIES_MIN_STOP')\n    dict2.pop('TIMEDELAY_MIN_STOP')\n    dict2.pop('WINS_MIN_STOP')\n    dict2.pop('WL_DRAW_MIN_STOP')\n    dict2.pop('DAMAGE_MIN_STOP')\n    dict2.pop('LIFE_MIN_STOP')\n    dict2.pop('MOVIES_AVG_STOP')\n    dict2.pop('TIMEDELAY_AVG_STOP')\n    dict2.pop('WINS_AVG_STOP')\n    dict2.pop('WL_DRAW_AVG_STOP')\n    dict2.pop('DAMAGE_AVG_STOP')\n    dict2.pop('LIFE_AVG_STOP')\n    dict2.pop('MOVIES_MAX_END')\n    dict2.pop('TIMEDELAY_MAX_END')\n    dict2.pop('WINS_MAX_END')\n    dict2.pop('WL_DRAW_MAX_END')\n    dict2.pop('DAMAGE_MAX_END')\n    dict2.pop('LIFE_MAX_END')\n    dict2.pop('MOVIES_MIN_END')\n    dict2.pop('TIMEDELAY_MIN_END')\n    dict2.pop('WINS_MIN_END')\n    dict2.pop('WL_DRAW_MIN_END')\n    dict2.pop('DAMAGE_MIN_END')\n    dict2.pop('LIFE_MIN_END')\n    dict2.pop('MOVIES_AVG_END')\n    dict2.pop('TIMEDELAY_AVG_END')\n    dict2.pop('WINS_AVG_END')\n    dict2.pop('WL_DRAW_AVG_END')\n    dict2.pop('DAMAGE_AVG_END')\n    dict2.pop('LIFE_AVG_END')\n    dict2.pop('MOVIES_MAX_END_STOP')\n    dict2.pop('TIMEDELAY_MAX_END_STOP')\n    dict2.pop('WINS_MAX_END_STOP')\n    dict2.pop('WL_DRAW_MAX_END_STOP')\n    dict2.pop('DAMAGE_MAX_END_STOP')\n    dict2.pop('LIFE_MAX_END_STOP')\n    dict2.pop('MOVIES_MIN_END_STOP')\n    dict2.pop('TIMEDELAY_MIN_END_STOP')\n    dict2.pop('WINS_MIN_END_STOP')\n    dict2.pop('WL_DRAW_MIN_END_STOP')\n    dict2.pop('DAMAGE_MIN_END_STOP')\n    dict2.pop('LIFE_MIN_END_STOP')\n    dict2.pop('MOVIES_AVG_END_STOP')\n    dict2.pop('TIMEDELAY_AVG_END_STOP')\n    dict2.pop('WINS_AVG_END_STOP')\n    dict2.pop('WL_DRAW_AVG_END_STOP')\n    dict2.pop('DAMAGE_AVG_END_STOP')\n    dict2.pop('LIFE_AVG_END_STOP')\n    dict2.pop('MOVIES_MAX_END_END')\n    dict2.pop('TIMEDELAY_MAX_END')\n    dict2.pop('WINS_MAX_END')\n    dict2.pop('WL_DRAW_MAX_END')\n    dict2.pop('DAMAGE_MAX_END')\n    dict2.pop('LIFE_MAX_END')\n    dict2.pop('MOVIES_MIN_END_END')\n    dict2.pop('TIMEDELAY_MIN_END')\n    dict2.pop('WINS_MIN_END')\n    dict2.pop('WL_DRAW_MIN_END')\n    dict2.pop('DAMAGE_MIN_END')\n    dict2.pop('LIFE_MIN_END')\n    dict2.pop('MOVIES_AVG_END_END')\n    dict2.pop('TIMEDELAY_AVG_END')\n    dict2.pop('WINS_AVG_END')\n    dict2.pop('WL_DRAW_AVG_END')\n    dict2.pop('DAMAGE_AVG_END')\n    dict2.pop('LIFE_AVG_END')\n    dict2.pop('MOVIES_MAX_END_END_STOP')\n    dict2.pop('TIMEDELAY_MAX_END_STOP')\n    dict2.pop('WINS_MAX_END_STOP')\n    dict2.pop('WL_DRAW_MAX_END_STOP')\n    dict2.pop('DAMAGE_MAX_END_STOP')\n    dict2.pop('LIFE_MAX_END_STOP')\n    dict2.pop('MOVIES_MIN_END_END_STOP')\n    dict2.pop('TIMEDELAY_MIN_END_END_STOP')\n    dict2.pop('WINS_MIN_END_END_END_STOP')\n    dict2.pop('WL_DRAW_MIN_END_END_END_STOP')\n    dict2.pop('DAMAGE_MIN_END_END_END_END"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key in dict1.keys():\n        dict1[key] = sorted(dict1[key], key=lambda value: value['score'])\n    return dict1\ndef avg(list):\n    '''\n    Write a function to compute the average of a list.\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    my_dict = dict(Counter(dict1).most_common())\n    return my_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1, key=dict1.get, reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    from itertools import chain\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return (0, 0)\n    else:\n        # sort the list, and find the largest element\n        sorted_nums = sorted(nums)\n        return (sorted_nums[-1], sorted_nums[0])\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = 0\n    min = 0\n    sums = 0\n    for num in nums:\n        if num > max:\n            max = num\n        if num < min:\n            min = num\n    return max + min\n    # Write your code here.\n    \nprint(big_sum([1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    '''\n    Algorithm:\n    1. Initialize the max_sum, min_sum as 0\n    2. Iterate through the array using a for loop\n        (EACH iteration, there will be a max_sum and min_sum that are the two greatest)\n        2. If max_sum is greater than min_sum, add that to the max_sum\n        3. If min_sum is less than max_sum, add that to the min_sum\n    '''\n    max_sum = 0\n    min_sum = 0\n    for num in nums:\n        if num > max_sum:\n            max_sum = num\n        if num < min_sum:\n            min_sum = num\n    return max_sum + min_sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums)<=2:\n        return sum(nums)\n    else:\n        return max(big_sum(nums[:2]),big_sum(nums[-2:]))+nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(max(nums) - min(nums) + 1)\n    "
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # The algorithm is simple, but it takes the max value, as the sum of the largest value and the smallest value.\n    # So, if nums is [1,2,3] then sum will be 1 + 2 + 3 = 6\n    \n    # Initialize the sum\n    sum = 0\n    \n    # Start with the smallest and the largest value, as the sum of these values is now 1\n    for i in range(len(nums)):\n        sum += nums[i]\n        \n    return sum\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    for i in range(len(nums)):\n        nums[i] = (nums[i] + max(nums[:i+1])) # + sum(nums[:i+1])\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = \"\"\n    for char in string:\n        if char.islower():\n            lower_string += char\n    return lower_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # YOUR CODE HERE\n    if string.isalpha():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_str = string.lower()\n    return lower_str\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lst = list(string)\n    lst[0] = lst[0].lower()\n    new_string = ''.join(lst)\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if string.isupper() == False:\n        return False\n    else:\n        return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(.)\\1+')\n    result = pattern.sub(r'\\1', str1)\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return''.join([w for w in str1.split() if w.lower() not in ',.?'])\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # set to lowercase letters only\n    str1 = str1.lower()\n    # create an empty list to store the substrings\n    substr = []\n    # iterate over every letter in the string\n    for i in range(len(str1)):\n        # if a letter is a lowercase letter\n        if str1[i].isalpha():\n            # if it's a vowel\n            if str1[i] == \"a\":\n                # add a lowercase vowel to the end of the list\n                substr.append(\"e\")\n            # if it's a consonant\n            elif str1[i] == \"c\":\n                # add a lowercase consonant to the end of the list\n                substr.append(\"i\")\n            # if it's a muword\n            elif str1[i] == \"m\":\n                # add a lowercase muword to the end of the list\n                substr.append(\"o\")\n            # if it's a non-letter\n            else:\n                # add the letter itself to the end of the list\n                substr.append(str1[i])\n        else:\n            # if it's not a lowercase letter, add the letter itself\n            substr.append(str1[i])\n    # return the concatenated string\n    return \"\".join(substr)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    try:\n        regex1 = re.compile(r'[a-z]+')\n        return regex1.sub('',str1)\n    except:\n        print('the given string is not a valid file, \\\n                the value of the parameter is: ',str1)\n        return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # WRITE CODE HERE\n    return str1.lower().replace(' ','')\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = ''\n    for i in str1:\n        if i.lower() in string.ascii_lowercase:\n            result += i\n        else:\n            result += i.lower()\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('([a-z])([A-Z]{2,})', r'\\1 \\2', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    result = ''\n    \n    for char in str1:\n        if char.lower() in \"aeiou\":\n            result += char\n        else:\n            result += '_'\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    split_str1 = str1.split(' ')\n    print(split_str1)\n    new_list = []\n    for i in range(len(split_str1)):\n        # new_list.append(str1[i].lower())\n        if str1[i]!= split_str1[i]:\n            # print('split_str1:', split_str1)\n            # print('str1[i]:', str1[i])\n            # print('str1[i].lower():', str1[i].lower())\n            new_list.append(str1[i].lower())\n            # print('new_list:', new_list)\n    str1 = \" \".join(new_list)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]\\s?\\w+','', str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # set a constant so we can use it in the remainder sum later\n    digit_constant = 1\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n > 0 :\n        digit = n % 10\n        n = n // 10\n        return digit\n    \n    \n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i = n\n    while i >= 0 :\n        # if i = 0, return 0\n        if i == 0 :\n            return 0\n        # if i = 1, return 1\n        elif i == 1 :\n            return 1\n        else :\n            i -= 1\n            # if i = 2, return the 2nd digit\n            if i == 2 :\n                return n % 10\n            # if i = 3, return the 3rd digit\n            elif i == 3 :\n                return n // 10 % 10\n            else :\n                i -= 3\n    return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n    "
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n == 0 : \n        return 0\n    if n == 1 : \n        return 1\n    \n    if n % 10 == 0 :\n        return 1\n    \n    return int(n%10)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 :  \n        return n  \n    else :  \n        return (n % 10 )  \n       \ndef first_digits(n) :  \n    '''\n    Write a python function to find the digits of a number. \n    '''\n    if n < 10 :  \n        return (n,)  \n    else :  \n        return (n % 10,)  \n       \ndef reverse_vowels(n):  \n    '''\n    Write a python function to find the first vowel in a given string.\n    '''\n    if n == '' :  \n        return ''  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef reverse_vowels2(n):  \n    '''\n    Write a python function to find the first vowel in a given string.\n    '''\n    if n == '' :  \n        return ''  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef first_vowel(n):  \n    '''\n    Write a python function to find the first vowel in a given string.\n    '''\n    if n == '' :  \n        return ''  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef remove_vowels(n):  \n    '''\n    Write a python function to remove the first vowel in a given string. \n    '''\n    if n == '' :  \n        return ''  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return n[1:-1] + n[-1] + 'a' +n[-2] + n[-3] + 'i' + n[-4] + n[-5] + 'e' + n[-6] +'' + n[-7] \n       \ndef reverse_words(n) :  \n    '''\n    Write a python function to reverse the given string.\n    '''\n    if n == '' :  \n        return ''  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef reverse_words2(n) :  \n    '''\n    Write a python function to reverse the given string.\n    '''\n    if n == '' :  \n        return ''  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef last_word(n):  \n    '''\n    Write a python function to reverse the given string.\n    '''\n    if n == '' :  \n        return ''  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef last_word2(n):  \n    '''\n    Write a python function to reverse the given string.\n    '''\n    if n == '' :  \n        return ''  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef count_vowels(n):  \n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    if n == '' :  \n        return 0  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef count_vowels2(n):  \n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    if n == '' :  \n        return 0  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef count_vowels3(n):  \n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    if n == '' :  \n        return 0  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef is_all_caps(n):  \n    '''\n    Write a python function to check if a given string is all caps or not.\n    '''\n    if len(n) == 0 :  \n        return 0  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef is_vowel(n):  \n    '''\n    Write a python function to check if a given string is a vowel or not.\n    '''\n    if len(n) == 0 :  \n        return 0  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef is_vowel2(n):  \n    '''\n    Write a python function to check if a given string is a vowel or not.\n    '''\n    if len(n) == 0 :  \n        return 0  \n    elif len(n) < 4 :  \n        return n  \n    else :  \n        return (n[-1] + n[-2] + n[-3] + 'a' +n[-4] + n[-5] + 'i' + n[-6] + 'e' + n[-7])  \n       \ndef is_vowel3(n):  \n    '''\n    Write a pytho"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    sum = 0\n    for i in range(0, n) :\n        sum = sum + i\n    first_digit = int(str(sum)[0])\n    return first_digit\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n // 10\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10 : return n\n    else : return n%10\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    newList = []\n    for i in list:\n        if i % 2 == 0:\n            newList.append(i)\n    return newList\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds=[]\n    for n in list: \n        if n%2==1: \n            odds.append(n) \n    return odds\n    \n    \n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)): \n        if list[i] % 2!= 0: \n            odd_list.append(list[i]) \n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if list!= []:\n        even_numbers = []\n        odd_numbers = []\n        for i in range(len(list)):\n            if list[i]%2==0:\n                odd_numbers.append(list[i])\n            else:\n                even_numbers.append(list[i])\n        print('The even numbers are : ',even_numbers)\n        print('The odd numbers are : ',odd_numbers)\n    else:\n        print(\"List is empty\")\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    even_list = []\n    for i in list: \n        if (i % 2!= 0):\n            odd_list.append(i)\n        else:\n            even_list.append(i)\n    return odd_list, even_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    odd = []\n    for i in list: \n        if i % 2 == 0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even, odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2!=0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if list[i] % 2 == 1:\n            odd.append(list[i])\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list: \n        if i%2 == 0: \n            odd_list.append(i)\n    return odd_list\n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0 \n    cubes = [i**3 for i in range(1,n+1)]\n    for i in range(1,n+1):\n        result += cubes[i]\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) :\n        sum = sum + (i ** 3)\n    return sum - n\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum(n) :\n        x = 1\n        for i in range(1, n + 1) :\n            x += i**3\n        return x\n    print(sum(n))\ndifference(5)\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #convert n to an integer\n    n = int(n)\n    #initialize variables\n    difference = 0\n    #loop through n to find the cubes of the first n natural numbers\n    for i in range(1, n+1):\n        #add the cubes of the natural numbers to the total of the cubes\n        difference += i**3\n    #return the difference\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube(n) :\n        return n**3\n    n = int(input(\"Enter the sum of cubes: \"))\n    result = 0\n    for i in range(1, n+1):\n        result += cube(i)\n    return result\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0 \n    for i in range(1,n+1) : \n        sum += i * i * i\n    return sum\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    sum_of_cubes = 0\n    for i in range(1,n+1) : \n        sum_of_cubes += i*(i**2)\n    print(sum_of_cubes)\n    sum_of_cubes_1 = 0\n    for i in range(1,n+1) : \n        sum_of_cubes_1 += i*(i**3)\n    print(sum_of_cubes_1)\n    difference = sum_of_cubes-sum_of_cubes_1\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube(n) : \n        num = n\n        cubes = []\n        while n > 0:\n            cubes.append(n ** 3)\n            n = n - 1\n        return sum(cubes)\n    return (cube(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([n*(n+1)//2 for n in range(1, n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    lst = [5, 3, 8, 9]\n    sum = lst[0] + lst[1] + lst[2]\n    diff = lst[0] + lst[1] + lst[2] - sum\n    return diff\n    \nprint(difference(5))\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    counter = 0\n    for i in range(N):\n        for j in range(N):\n            if (A[i] ^ A[j])%2!= 0:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i,N):\n            xor = A[i] ^ A[j]\n            if xor == 0 :\n                count += 1\n    return count\n    \ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i,N):\n            xor = A[i] ^ A[j]\n            if xor == 1 :\n                count += 1\n    return count\n    \ndef find_Multiple(A,N) : \n    '''\n    Write a python function to find the minimum number of pairs whose xor value is even\n    and their xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i,N):\n            xor = A[i] ^ A[j]\n            if xor == 1 :\n                if find_Odd_Pair(A,N) == 1 : \n                    count += 1\n            else :\n                if find_Odd_Pair(A,N) == 0 : \n                    count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i]==A[j] and A[i]!=A[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #Create a copy of array A so that it does not get modified by the while loop \n    A_copy = A\n    \n    #Loop over the elements of the array\n    for i in range(len(A_copy)): \n        for j in range(i+1,len(A_copy)):\n            #Find the xor value of the two elements\n            xor = A_copy[i] ^ A_copy[j]\n            #Check if xor is odd\n            if xor % 2 == 0: \n                #add the two elements to the original array \n                A_copy[i], A_copy[j] = A_copy[j], A_copy[i]\n            #Check if xor is not odd \n            else: \n                #remove the two elements from the original array \n                A_copy[i], A_copy[j] = A_copy[j], A_copy[i]\n    #Return the number of pairs \n    return len(A_copy)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = 0\n    for i in range(len(A)) : \n        if A[i] == 0 : \n            n = n + 1\n    return n\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N == 1: \n        return 0\n    if N == 2: \n        return 1\n    if A[0] & A[N-1] == 0: \n        return 2\n    return find_Odd_Pair(A,N-2) + find_Odd_Pair(A,N-1)\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    for i in range(0,N) : \n        xor_sum = xor_sum ^ A[i]\n    if (xor_sum & 0x01)!= 0 : \n        return \"odd\" \n    else : \n        return \"even\" \n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N < 2 : return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0\n    for i in range(N) :\n        if (A[i] & 1)!= 0 : \n            return i + 1\n    return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # TODO: implement the function\n    # TODO: store the result in another list \n    # TODO: print the result list \n    # TODO: return the length of the list \n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.isupper():\n        newstring = string.lower()\n    else:\n        newstring = string.upper()\n    return newstring\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    upper = 0\n    lower = 0\n    for c in string:\n        if c.isupper():\n            upper += 1\n        elif c.islower():\n            lower += 1\n    return string.swapcase()\n    \nprint(toggle_string(\"hello\"))\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Define a function to toggle the case\n    # Return a string\n    def string_to_toggle(string):\n        '''\n        Returns a new string that is the same but the first and last letters switched to lowercase.\n        '''\n        # Split the string into characters and lowercase\n        # Return a new string with the first and last letters switched to lowercase\n        return string.lower()\n    \n    # Check if the string is empty\n    if string == \"\":\n        return \"\"\n    \n    # Check if the string is not empty\n    elif len(string) == 0:\n        return \"\"\n    \n    # Check if all characters are in lowercase\n    elif all(c.islower() for c in string):\n        return string\n    \n    # Return string with first and last letter switched to upper case\n    return string_to_toggle(string) + string_to_toggle(string[-1])\n    \ndef toggle_string_v2(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Define a function to toggle the case\n    # Return a string\n    def string_to_toggle(string):\n        '''\n        Returns a new string that is the same but the first and last letters switched to upper case.\n        '''\n        # Split the string into characters and upper case\n        # Return a new string with the first and last letters switched to upper case\n        return string.upper()\n    \n    # Check if the string is empty\n    if string == \"\":\n        return \"\"\n    \n    # Check if the string is not empty\n    elif len(string) == 0:\n        return \"\"\n    \n    # Check if all characters are in upper case\n    elif all(c.isupper() for c in string):\n        return string\n    \n    # Return string with first and last letter switched to lower case\n    return string_to_toggle(string) + string_to_toggle(string[-1])\n    \ndef toggle_string_v3(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Define a function to toggle the case\n    # Return a string\n    def string_to_toggle(string):\n        '''\n        Returns a new string that is the same but the first and last letters switched to lowercase.\n        '''\n        # Split the string into characters and lower case\n        # Return a new string with the first and last letters switched to lowercase\n        return string.lower()\n    \n    # Check if the string is empty\n    if string == \"\":\n        return \"\"\n    \n    # Check if the string is not empty\n    elif len(string) == 0:\n        return \"\"\n    \n    # Check if all characters are in lower case\n    elif all(c.islower() for c in string):\n        return string\n    \n    # Return string with first and last letter switched to upper case\n    return string_to_toggle(string) + string_to_toggle(string[-1])\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Replace the condition that is true to the test case for if the string is a palindrome.\n    if string.replace('a', 'A').replace('A', 'a').replace('e', 'E').replace('E', 'e').replace('i', 'I').replace('I', 'i') == string.replace('i', 'I').replace('o', 'O').replace('O', 'o'):\n        string = string.replace('i', 'I').replace('o', 'O').replace('a', 'A')\n    else:\n        string = string.replace('o', 'O').replace('i', 'I').replace('a', 'A')\n    # Return the string with the new value.\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) > 0:\n        string = string.lower()\n        string = string.replace(\" \", \"\")\n        return string[::-1]\n    else:\n        return \"1\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print('String was:'+ string)\n    for c in string:\n        if c.upper() == 'X':\n            print('X is in upper case')\n        elif c.lower() == 'x':\n            print('X is in lower case')\n        else:\n            print('Not a letter')\n    return\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(c if c.islower() else c.upper() for c in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\": return\n    return string.casefold()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.islower():\n        return string.upper()\n    elif string.isupper():\n        return string.lower()\n    elif string.isalpha():\n        return string\n    else:\n        return string.capitalize()\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.lower() if string[0] == string[-1] else f\"{string}{string[0]}\"\n    \ndef toggle_string_with_special_characters(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string[0].upper() + string[1:] if string[0].islower() else f\"{string}{string[0].upper()}\" + f\"{string[1:]}\"\n    \ndef string_slicing(string):\n    '''\n    Write a function that takes a string and returns a list of characters where the first character is turned into a string and the last character is turned to a string.\n    '''\n    return string[0:len(string) - 1].replace(\" \", \"\").replace(\"\\n\", \"\") + \",\" + string[-1:]\n    \ndef string_concat(string):\n    '''\n    Write a function that takes a string and returns a new string made of the first and last characters of a given string.\n    '''\n    return string[0:len(string) - 1].replace(\" \", \"\") + \",\" + string[-1:]\n    \ndef string_list(string):\n    '''\n    Write a function that takes a string and returns a list of the first and last characters of a given string.\n    '''\n    return string[0:len(string) - 1].replace(\" \", \"\") + \",\" + string[-1:]\n    \ndef string_find_all(string, substring):\n    '''\n    Write a function that takes a string and a substring and returns a list of the positions where the substring is present in the given string.\n    '''\n    if substring in string:\n        return list(range(len(string)))\n    else:\n        return []\n    \ndef string_find_all_indexed(string, substring):\n    '''\n    Write a function that takes a string and a substring and returns a list of the positions where the substring is present in the given string.\n    '''\n    return [i for i in range(len(string)) if substring in string[i:i + len(substring)]]\n    \ndef string_is_number(string):\n    '''\n    Write a function that takes a string and returns whether or not it contains any of the characters in the string and all of it's digits.\n    '''\n    return string[0] in string and string[0:len(string) - 1].isdigit()\n    \ndef string_is_cap_number(string):\n    '''\n    Write a function that takes a string and returns whether or not it contains any of the characters in the string and all of it's digits.\n    '''\n    return string[0] in string and string[0:len(string) - 1].isdigit() and string[0:len(string) - 1].isdigit()\n    \ndef string_is_numeric(string):\n    '''\n    Write a function that takes a string and returns whether or not it contains any of the characters in the string and all of it's digits.\n    '''\n    return string[0] in string and string[0:len(string) - 1].isdigit()\n    \ndef string_is_decimal(string):\n    '''\n    Write a function that takes a string and returns whether or not it contains any of the characters in the string and all of it's digits.\n    '''\n    return string[0] in string and string[0:len(string) - 1].isdigit()\n    \ndef string_is_in_alphabet(string):\n    '''\n    Write a function that takes a string and returns whether or not it contains any of the characters in the string and all of it's digits.\n    '''\n    return string[0] in string and string[0:len(string) - 1].isdigit()\n    \ndef string_is_substring(string, substring):\n    '''\n    Write a function that takes a string and a substring and returns whether or not it contains one of the characters in the string and all of it's digits.\n    '''\n    return substring in string and substring in string[:len(string) - len(substring)]\n    \ndef string_is_unique(string):\n    '''\n    Write a function that takes a string and returns whether or not it contains any of the characters in the string and all of it's digits.\n    '''\n    return string[0] in string and string[0:len(string) - 1].isdigit()\n    \ndef string_replace_string(string, old, new):\n    '''\n    Write a function that replaces a string with another string.\n    '''\n    return string[0:len(string) - 1].replace(old, new)\n    \ndef string_remove_duplicates(string):\n    '''\n    Write a function that takes a string and returns it without any strings that have a duplicate.\n    '''\n    string = string.split(\" \")\n    string.pop(0)\n    string = \" \".join(string)\n    return string\n    \ndef string_check_duplicates(string):\n    '''\n    Write a function that checks whether a string contains any duplicate characters.\n    '''\n    return len(set(string)) > len(string)\n    \ndef string_join(string):\n    '''\n    Write a function that takes a string and returns it without any characters that occur in the string.\n    '''\n    if len(string) == 0:\n        return \"\"\n    else:\n        return \" \" + string\n    \ndef string_unique_combinations(string):\n    '''\n    Write a function that takes a string and returns it without any duplicate strings in the string.\n    '''\n    return \" \" + string\n    \ndef string_unique_combinations2(string):\n    '''\n    Write a function that takes a string and returns it without any duplicate strings in the string.\n    '''\n    if len(string) == 0:\n        return \"\"\n    elif len(string) > 1:\n        return \" \" + string[0] + \" \" + string[1]\n    else:\n        return \" \" + string[0]\n    \ndef string_unique_combinations3(string):\n    '''\n    Write a function that takes a string and returns it without any duplicate strings in the string.\n    '''\n    if len(string) == 0:\n        return \"\"\n    elif len(string) > 1:\n        return \" \" + string[0] + \" \" + string[1] + \" \" + string[2]\n    else:\n        return \" \" + string[0]\n    \ndef string_join_lists(list_of_strings):\n    '''\n    Write a function that takes a list of strings and returns it without any duplicate strings in the string.\n    '''\n    return \" \" + \" \".join(list_of_strings)\n    \ndef string_join_lists2(list_of_strings):\n    '''\n    Write a function that takes a list of strings and returns it without any duplicate strings in the string.\n    '''\n    if len(list_of_strings) == 0:\n        return \"\"\n    elif len(list_of_strings) > 1:\n        return \" \" + \" \".join(list_of_strings[0]) + \" \" + \" \".join(list_of_strings[1])\n    else:\n        return \" \" + \" \".join(list_of_strings[0])\n    \ndef string_join_lists3(list_of_strings):\n    '''\n    Write a function that takes a list of strings and returns it without any duplicate strings in the string.\n    '''\n    if len(list_of_strings) == 0:\n        return \"\"\n    elif len(list_of_strings) > 1:\n        return \" \" + \" \".join(list_of_strings[0]) + \" \" + \" \".join(list_of_strings[1]) + \" \" + \" \".join(list_of_strings[2])\n    else:\n        return \" \" + \" \".join(list_of_strings[0])\n    \ndef string_join_lists4(list_of_strings):\n    '''\n    Write a function that takes a list of strings and returns it without any duplicate strings in the string.\n    '''\n    if len(list_of_strings) == 0:\n        return \"\"\n    elif len(list_of_strings) > 1:\n        return \" \" + \" \".join(list_of_strings[0]"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return str(abs(n1-n2))\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum(n1 - n2) % 10\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return (abs(n1-n2) % 10)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    n1, n2 = map(int, [n1, n2])\n    \n    return abs(n1 - n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(n1, n2 + 1):\n        sum += n1 - i\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # return n1-n2 if n1 > n2\n    # return n1-n2 if n1 < n2\n    if n1 < n2:\n        n1, n2 = n2, n1\n    return n1-n2\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digits = []\n    if n1 == 0:\n        digits.append(0)\n    elif n2 == 0:\n        digits.append(0)\n    else:\n        digits.append(abs(n1 - n2))\n    if n1 < 0:\n        digits.append(abs(n1))\n    elif n2 < 0:\n        digits.append(abs(n2))\n    else:\n        digits.append(0)\n    return digits\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for digit in str(n1):\n        diff += int(digit) - int(digit)\n    return diff\n    \ndef digit_distance_magnitude(n1, n2):\n    '''\n    Write a python function to find the magnitude of the difference between two integers.\n    '''\n    return abs(digit_distance_nums(n1, n2) % 10)\n    \ndef digit_distance_modulo(n1, n2):\n    '''\n    Write a python function to find the modulo of the difference between two integers.\n    '''\n    return digit_distance_nums(n1, n2) % 10\n    \ndef digit_distance_reciprocal(n1, n2):\n    '''\n    Write a python function to find the reciprocal of the difference between two integers.\n    '''\n    return 1 / digit_distance_nums(n1, n2)\n    \ndef digit_distance_product(n1, n2):\n    '''\n    Write a python function to find the product of the difference between two integers.\n    '''\n    return int(n1) * int(n2)\n    \ndef digit_distance_product_reciprocal(n1, n2):\n    '''\n    Write a python function to find the product of the difference between two integers.\n    '''\n    return 1 / digit_distance_nums(n1, n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_diff = 0\n    for i in range(0, n1):\n        sum_of_diff += abs(n1 - i)\n    for j in range(0, n2):\n        sum_of_diff += abs(n2 - j)\n    return sum_of_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def nth_digit(n):\n        if n<0:\n            return n*(-1)\n        else:\n            return n*n\n    return sum([nth_digit(n) for n in range(10)])\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # define max_sum\n    max_sum = 0\n    \n    # for every non negative number\n    for i in range(len(a)):\n        # if i is the first number\n        if i == 0:\n            # set max_sum to the sum of a[i]\n            max_sum = a[i]\n        else:\n            # set max_sum to the sum of the current value minus the last value of the list\n            max_sum = max(a[i] - a[i-1], max_sum)\n    \n    # return max_sum\n    return max_sum\n    \n    \ndef main():\n    print(\"\"\"\nInput: \na = [1,2,3,4,5,6,7,8,9,10,11]\nsize = 5\nOutput: 10\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    else:\n        return max(a[size - 1]) + max_sub_array_sum(a, size - 1)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    temp = 0\n    max_sub_array_sum = 0\n    for i in range(0, len(a)):\n        temp = a[i]\n        max_sub_array_sum = max(max_sub_array_sum, temp)\n    print(max_sub_array_sum)\n    for i in range(0, size):\n        if a[i] >= max_sub_array_sum:\n            print(a[i])\n            temp = a[i]\n            a[i] = 0\n            a[i] = temp\n    print(a)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #find a subset of the list with sum of smallest value\n    sub_subset = []\n    for i in range(size):\n        if a[i] not in sub_subset:\n            sub_subset.append(a[i])\n    #we check if sum of the largest sublist is smaller than sum of smallest sublist\n    sub_subset_sum = sum(sub_subset)\n    if sub_subset_sum < sum(sub_subset):\n        #if its larger\n        return max_sub_array_sum(sub_subset, size)\n    else:\n        #if its smaller\n        return sum(sub_subset)\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # We need to iterate backwards so we can iterate backwards to find the maximum of the sublists.\n    max_sub_array = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = 0\n    n = len(a)\n    # Initialize a trivial dictionary to store the largest sum\n    if size == 1:\n        return a[0]\n    # Start at the end of the array\n    for i in range(n - 1, -1, -1):\n        s = max(a[i], s + a[i])\n    return s\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    return sum(map(sum, combinations(a, size)))"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    if size < 0:\n        return -1\n    result = a[0]\n    for i in range(1, size):\n        result = max(a[i], result + a[i - 1])\n    return result\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    count = 0\n    for i in range(0,len(a)):\n        count += 1\n        curr_sum = a[i]\n        current_sublist = a[i+1:i+size]\n        for j in range(0,len(current_sublist)):\n            current_sum = current_sum + current_sublist[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum, count\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1:\n        return test_tup2\n    elif not test_tup2:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return union_elements(test_tup1, test_tup2[1:])\n    elif test_tup1[0] > test_tup2[0]:\n        return union_elements(test_tup2, test_tup1[1:])\n    else:\n        return test_tup1\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # TODO\n    return 0\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #Convert the tuple into a list\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n    test_tup1_list.sort()\n    test_tup2_list.sort()\n    if test_tup1_list[0] < test_tup2_list[0]:\n        test_tup1_list = test_tup1_list[::-1]\n    else:\n        test_tup2_list = test_tup2_list[::-1]\n    #Find the index of the last element in the list\n    last_index = len(test_tup1_list)\n    #Find the index of the first element in the list\n    first_index = 0\n    while first_index < last_index:\n        if test_tup1_list[first_index] < test_tup2_list[first_index]:\n            first_index += 1\n        else:\n            last_index -= 1\n    return test_tup1_list[first_index:last_index]\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #find the first and the last element of tuple\n    first_element = 0\n    last_element = len(test_tup1)-1\n    #loop through elements of tuple 1\n    for element in test_tup1:\n        #if element is the first element of tuple\n        if first_element == 0:\n            #insert the element into the list\n            test_tup1[first_element] = element\n            #increment the index to start the second list\n            first_element += 1\n            #break the loop\n            break\n        #if element is the last element of tuple\n        elif last_element == last_element:\n            #update the index of the last element\n            test_tup1[last_element] = element\n            #increment the index to start the second list\n            last_element += 1\n            #break the loop\n            break\n        #if element is not in the list, add it to the list\n        else:\n            test_tup1[first_element] = element\n            first_element += 1\n            #break the loop\n            break\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup3 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            test_tup3.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        if test_tup2[i] not in test_tup3:\n            test_tup3.append(test_tup2[i])\n    return tuple(sorted(test_tup3))\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    i = 0\n    j = 0\n    while i < test_tup1_len and j < test_tup2_len:\n        if test_tup1[i] < test_tup2[j]:\n            result.append(test_tup1[i])\n            i+=1\n        else:\n            result.append(test_tup2[j])\n            j+=1\n    while i < test_tup1_len:\n        result.append(test_tup1[i])\n        i+=1\n    while j < test_tup2_len:\n        result.append(test_tup2[j])\n        j+=1\n    return result\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    if len(test_tup1) == len(test_tup2):\n        return tuple(sorted(test_tup1 + test_tup2))\n    return None\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            res.append(test_tup1[i])\n    return sorted(res)\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return union_elements(test_tup1, test_tup2[1:])\n    elif len(test_tup2) > len(test_tup1):\n        return union_elements(test_tup2, test_tup1[1:])\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n    for i in range(1, len(lst)):\n        j = i - 1\n        if lst[i] < lst[j]:\n            lst[i], lst[j] = lst[j], lst[i]\n            j -= 1\n        lst = lst[:j] + [lst[j]] + lst[j+1:]\n    return len(lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    L=[]\n    for i in lst:\n        L.append(len(i))\n    L.sort(reverse=True)\n    return L[0]\nlst=[1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = len(lst)\n    l = l if l < 10 else 10\n    lst2 = []\n    \n    for i in range(0, l):\n        s = set(lst[i])\n        lst2.append(len(s))\n        for j in range(i + 1, l):\n            if lst2[j] > lst2[i]:\n                lst2[j] = lst2[i]\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    for i in range(len(lst)):\n        length += 1\n    return length\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n=len(lst)\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        if lst[0]>lst[1]:\n            return 1+Find_Max_Length(lst[1:])\n        else:\n            return 2+Find_Max_Length(lst[1:])\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                max_len = max(len(lst[i]), len(lst[j]))\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    my_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i]!= lst[j] and lst[i] not in my_list:\n                my_list.append(lst[i])\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n=len(lst)\n    if n==0:\n        return 0\n    n_max=0\n    for i in range(1,n):\n        if len(set(lst[i-1]))>n_max:\n            n_max=len(set(lst[i-1]))\n    return n_max\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst is None:\n        return 0\n    \n    result = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > result:\n                result = len(lst[i:j+1])\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #split the text\n    text_split = re.split('\"|\\'',text)\n    values = []\n    for item in text_split:\n        #split the value into parts\n        values.append(item.split('\\\\'))\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    output = []\n    temp = \"\"\n    if text:\n        for char in text:\n            if char == '\"':\n                temp = temp + char\n                if char == '\"' and len(temp) > 2:\n                    output.append(temp[1:-1])\n                    temp = \"\"\n            else:\n                temp = temp + char\n    else:\n        temp = \"\"\n    return output, temp\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return text[text.find('\"')+1:].replace('\"', \"\").replace(\"'\", \"\").strip().split(',')\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    reg = r'\\b(?P<name>{0})[\\w\\.,?\\!\\\"\\'\\[\\]\\{\\}\\\\+\\-*;=?_]*\\b'\n    return re.findall(reg,text,re.I)\ndef get_valid_name(name):\n    '''\n    Write a function to get a valid name from a string.\n    '''\n    name = re.sub(r'[^\\w\\.]','',name)\n    return name\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    text = text.replace('\u201c','\"')\n    text = text.replace('\u201d','\"')\n    text = text.replace('\u2018','\"')\n    text = text.replace('\u2019','\"')\n    text = text.replace('\"','\"')\n    for ch in text:\n        if ch in '\u2018\u2019':\n            values.append(ch)\n        elif ch in '\u201c':\n            values.append('\"')\n        elif ch in '\u201d':\n            values.append('\"')\n        elif ch in '\u201c':\n            values.append(' ')\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace(r'\"', '\"')\n    text = re.sub('[\\']', '\"', text)\n    text = text.replace(r\"\\n\",'')\n    return text\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.split(r\"\\w+\\s\\w+\", text)\n    values = [x.strip() for x in values if x.strip()]\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = str(text)\n    values = re.findall('\"\\S+?\"\\S+?', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expressions to extract values and return the list of values.\n    return [re.sub(r'(^ | )', '', i) for i in re.split(r'[,\\s]+', text)]\n    # Text is a string containing characters that may appear in \n    # a document and will be case-insensitive.\n    # Convert to lowercase.\n    # Remove whitespace.\n    # Remove characters that can't be used as a variable name.\n    # Remove spaces and characters that appear after a number.\n    # Replace any other characters.\n    # Remove any duplicate values.\n    # Replace any common leading and trailing spaces with a single space.\n    # Remove any leading or trailing characters.\n    # Return the list of values.\n    \n    # TODO: Use regex to extract values.\n    # Use regular expressions to extract values and return the list of values.\n    # Use the function to extract a list of values from a document.\n    \n    # For example, the input:\n    # Heels : Left motor shaft torque\n    # Heels : Right motor shaft torque\n    #\n    # The output:\n    # [\n    # 'heels',\n    # 'left',\n    #'motor shaft torque',\n    # 'right'\n    # ]\n    \n    \n    \n    \n    #Example:\n    # H: Head\n    # L: Left\n    # R: Right\n    # Heels: Head\n    # Left: Left motor shaft torque\n    # Right: Right motor shaft torque\n    # Heels: Head\n    # Left motor shaft torque\n    # Right motor shaft torque\n    # Heels: Head\n    \n    # Use regex to extract values and return the list of values.\n    # Use a function to extract a list of values from a document.\n    \n    # For example, the input:\n    # Heels: Left motor shaft torque\n    # Heels: Right motor shaft torque\n    #\n    # The output:\n    # [\n    # 'heels',\n    # 'left',\n    #'motor shaft torque',\n    # 'right'\n    # ]\n    \n    \n    \n    \n    #Example:\n    # Heels: Left motor shaft torque\n    # Heels: Right motor shaft torque\n    #\n    # The output:\n    # [\n    # 'heels',\n    # 'left',\n    #'motor shaft torque',\n    # 'right'\n    # ]\n    \n    \n    \n    \n    #Example:\n    # Heels: Left motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Left motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Right motor shaft torque\n    # Heels: Righ"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    # Replace all occurrences of the subquotation marks with a special char\n    text = re.sub(r\"\\`\", \"\", text, flags=re.MULTILINE)\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\\"]+)\", text)\n    if values:\n        value = values[0].replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # Again, as the pattern for the match is matched, we can retrieve\n    # the first value as well.\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]])\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        value = values[0].replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\")\n        return [value]\n    else:\n        return ['']\n    \n    # We can't still do this because it returns [] when the value is\n    # empty (it's actually blank).\n    \n    # Replace the backslash with an escape sequence to prevent it from\n    # being interpreted as a text literal.\n    text = text.replace(\"\\\\\", \"\\\\\\\\\")\n    \n    # Search the pattern for the match and extract the first value\n    # and put it into a list\n    values = re.findall(r\"([^\\]]+)\", text)\n    if values:\n        valu"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    for i in range(0,len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            c = c+1\n    return c\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1): \n        for j in range(i+1,n): \n            if arr[i]!=arr[j] and arr[i]<arr[j] and arr[j]<arr[i]: \n                count=count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                break\n        else:\n            continue\n        break\n    return i+1\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j]!= 0:\n                if arr[i] == arr[j]:\n                    ans += 1\n    return ans\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # number of unordered pairs\n    count=0\n    # iterate through list\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j] and arr[i] < arr[j]:\n                count+=1\n    # return\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j] or (arr[i]>arr[j]):\n                counter+=1\n    return counter\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = dict()\n    for i in range(0,n): \n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    for i in d:\n        if d[i] > 1:\n            print(\"%s is a pair\" %(i))\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    def count_pairs(arr):\n        count = 0\n        for i in range(n):\n            for j in range(i+1,n):\n                if arr[i] == arr[j] or arr[i]!= arr[j]:\n                    count += 1\n        return count\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]!=arr[j]):\n                count+=1\n    return count\narr=[4,3,1,2,3]\nn=len(arr)\nprint(count_Pairs(arr,n))\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(\" \")\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # your code goes here\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [word[i:i+len(word)] for i in range(0,len(word),len(word))]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    res=[]\n    while word!='':\n        char=word[0]\n        if char==' ':\n            res.append(char)\n            word=word[1:]\n        else:\n            res.append(char)\n            word=word[1:]\n    return res\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if len(word)<=1:\n        return word\n    else:\n        word = word.lower()\n        result = \"\"\n        for i in range(len(word)):\n            if word[i]==''or word[i]=='\\n':\n                result += word[i]\n            else:\n                result += word[i]\n        return result\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(' ')\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    dig_list = []\n    while n > 0:\n        dig_list.append(n % 10)\n        n //= 10\n    return sum(dig_list)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n!= 0:\n        total += n % 10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if type(n)!= int:\n        raise TypeError(\"num must be an integer\")\n    elif n < 0:\n        raise ValueError(\"num must be non-negative\")\n    \n    sum = 0\n    while n!= 0:\n        sum += n % 10\n        n = n//10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return n\n    sum = 0\n    while n:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    return n % 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s=0\n    while n>0:\n        s+=n%10\n        n//=10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # HINT: You may not use any built-in function you have already written\n    # Check if the input number is non-negative\n    if n < 0:\n        return 0\n    sum = 0\n    # Divide by 10 and check for remainder\n    while n > 0:\n        sum = sum + n % 10\n        n = n // 10\n    # If sum is negative, add 0\n    return sum\n    \nprint(sum_digits(12321))"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        if list1[0]>list1[1]:\n            list1[0],list1[1] = list1[1],list1[0]\n        return issort_list(list1[1:])\n    \n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #returns true if list is sorted, false if not\n    def sort(list_):\n        #declaration\n        output=[]\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    check_list = list()\n    check_list_length = len(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list(sorted(list1)) == list(sorted(list1, key=list1.__getitem__))\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # INSERT YOUR CODE HERE\n    # print(list1)\n    if len(list1) < 1:\n        return False\n    elif len(list1) == 1:\n        return True\n    else:\n        if list1[0] == list1[1]:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append(dict())\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return ['{}' for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Empty dictionary\n    empty_dict = {}\n    # Loop over items in the list\n    for i in range(length):\n        # Create empty dictionary\n        empty_dict[i] = {}\n    return empty_dict\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for _ in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    #return []\n    l=[]\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    if length >= 1:\n        for i in range(length):\n            new_dict = {}\n            new_dict['name'] = str(input(\"Enter the name of the dictionary: \"))\n            new_dict['value'] = str(input(\"Enter the value of the dictionary: \"))\n            list.append(new_dict)\n        return list\n    else:\n        print(\"Input Error\")\n        return \"Sorry, there is a problem with the format, you have entered invalid input, please try again\"\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    return list\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = [[] for i in range(len(list1[0]))]\n    for i in range(len(list1)):\n        for j in range(len(list1[0])):\n            sublists[j].append(list1[i][j])\n    return sublists"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = []\n    for i in range(len(list1)):\n        l.append(list1[i][0])\n    l.sort()\n    return l\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = lambda x: x.split())\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    import copy\n    def sort_sublists_helper(ls1):\n        if len(ls1) < 2:\n            return ls1\n        else:\n            ls2 = copy.deepcopy(ls1)\n            sort_sublists_helper(ls2)\n            for i in range(len(ls2)):\n                for j in range(len(ls2[i])):\n                    ls2[i][j] = sort_sublists_helper(ls2[i][:j]+ls2[i][j+1:])\n            return ls2\n    return sort_sublists_helper(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = str(list1[i][j])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def get_sort_list(l):\n        return sorted(l,key=lambda x:x[0])\n    \n    def sort_string_list(l):\n        '''\n        Sort a list of strings and return a sorted list.\n        '''\n        return [tuple(sorted(l,key=lambda x:x[0])) for l in list(zip(*l))]\n    \n    return [sort_string_list(list1[i:i+3]) for i in range(0,len(list1),3)]\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key = lambda x: len(x))\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output = []\n    for sublist in list1:\n        output.append([])\n        for element in sublist:\n            output[-1].append(element)\n    return output\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    n = len(list1[0])\n    for i in range(n):\n        for j in range(len(list1)):\n            list1[j].append(list1[j][i])\n        list1[j].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(list1) < 2:\n        return list1\n    \n    mid = len(list1) // 2\n    \n    L = []\n    R = []\n    \n    for i in range(mid):\n        L.append(list1[i])\n    \n    for j in range(mid, len(list1)):\n        R.append(list1[j])\n        \n    return sorted(L + sort_sublists(R))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # all_nums = []\n    # for num in nums:\n    #     if num not in all_nums:\n    #         all_nums.append(num)\n    # return all_nums\n    return list(dict.fromkeys(nums))\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    return list(nums_set)"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # 1. Create a new list to store only unique numbers.\n    list_of_nums = []\n    # 2. Create a counter to track the total number of unique numbers.\n    counter = 0\n    # 3. Create a for loop to iterate through each number.\n    for num in nums:\n        # 4. Check if the current number is already in the list. If it is,\n        # increment the counter by one. If not, add it to the list.\n        if num in list_of_nums:\n            counter += 1\n        # 5. Else, set the counter to 0 and add it to the list.\n        else:\n            list_of_nums.append(num)\n            counter = 0\n            # 6. Break out of the for loop.\n            break\n    # 7. Return the list of unique numbers.\n    return list_of_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    from itertools import combinations\n    return list(set(list(combinations(nums, 2))).difference(set(nums)))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # base case\n    if len(nums) == 0:\n        return\n    # sort the list\n    nums = sorted(nums)\n    # no duplicate values\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = list()\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return [num for num in nums if nums.count(num) == 1]\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    \n    for i in range(len(nums)):\n        count = 0\n        for j in range(len(nums)):\n            if nums[i] == nums[j]:\n                count += 1\n        \n        if count > 1:\n            nums.remove(nums[i])\n    \n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n        else:\n            nums.remove(num)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total = 1\n    for x in list_data:\n        total = total*x\n    return total\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_data=[]\n    for i in list_data:\n        for j in range(1,i+1):\n            if i%j==0:\n                unique_data.append(j)\n    return(unique_data)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # c = []\n    # for i in list_data:\n    #     c.append(i)\n    # n = 0\n    # for i in c:\n    #     if n == 0:\n    #         n = i\n    #     else:\n    #         if n!= i:\n    #             n = i\n    #             break\n    # return n\n    product = 1\n    n = 0\n    for i in list_data:\n        if n == 0:\n            n = i\n            continue\n        if n!= i:\n            n = i\n            continue\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    numbers = list_data[:]\n    numbers.sort()\n    length = len(numbers)\n    if length == 0:\n        return 0\n    else:\n        numbers.remove(numbers[length-1])\n        length -= 1\n        while numbers[length] == numbers[length-1]:\n            length -= 1\n        numbers[length] = 0\n        return numbers[length]\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    return (sum(unique_list))\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique = []\n    for i in range(len(list_data)):\n        if list_data[i] not in unique:\n            unique.append(list_data[i])\n    return sum(unique)\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = sorted(list_data)\n    length = len(list_data)\n    total = 1\n    for i in list_data:\n        total *= i\n    return total\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    # Let's create a set to keep unique numbers.\n    unique_set = set()\n    \n    # Loop through the list, and add all the numbers to the set.\n    for number in list_data:\n        if number not in unique_set:\n            unique_set.add(number)\n            \n    # Return the product of all numbers in the set.\n    return len(unique_set)\n    "
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_list = []\n    for item in list_data:\n        product_list.append(item)\n    product_list = list(set(product_list))\n    product_list = sorted(product_list)\n    return product_list[0]\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    #print(list_data)\n    for elem in list_data:\n        if elem not in unique_list:\n            unique_list.append(elem)\n    print(unique_list)\n    #print(len(unique_list))\n    return unique_list\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # (1) Set the initial values for the cylinder dimensions\n    cx,cy,cz = r,h,0\n    # (2) Define the volume\n    V = 4*cx**2\n    # (3) Define the outer radius\n    alpha = 1.4142135623730951\n    # (4) Define the surface area\n    s = (alpha*V*cx) + (V**2)*(alpha**2*cy) + (2*alpha**2*cz)\n    # (5) Return the result\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r_squared = (r*r)**0.5\n    h_squared = (h*h)**0.5\n    return r_squared*h_squared\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    def volume_cylinder(r,h):\n        return (4*np.pi*(r*r)) - (h*h)\n    return volume_cylinder(r,h)\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*(r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2)*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r * h * 3.14\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # TODO: Write your code here.\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return h*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (r * h) + (r * r)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    x = len(A)\n    y = len(B)\n    i = 0\n    j = 0\n    if x>y:\n        while i < x:\n            if A[i]!= B[j]:\n                return False\n            else:\n                i = i+1\n                j = j+1\n    else:\n        while j < y:\n            if A[i]!= B[j]:\n                return False\n            else:\n                j = j+1\n                i = i+1\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==0 or len(B)==0: \n        return False\n    for i in range(len(A)):\n        if A[i]!=B[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)): \n        if (A[i] in B) == True: \n            return True \n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A[0] < B[0]:\n        return is_Sub_Array(A[1:],B[1:])\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(a is b for a,b in zip(A,B))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # your code goes here\n    if len(A)!= len(B):\n        return False\n    #comparison\n    return sorted(A) == sorted(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)==len(A):\n        return True\n    else:\n        return False\nA=[1,2,3,4,5]\nB=[1,2,3,4,5,6]\nprint(is_Sub_Array(A,B))\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # TODO: Add your code here.\n    for i in range(0,len(A)-1):\n        if(A[i] in B[i:len(A)]):\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    x = len(A)\n    y = len(B)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # use factorial function to return n\n    if n == 0 or n == 1:\n        return n\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial_number=1\n    for i in range(1, n+1):\n        factorial_number *= i\n    return factorial_number\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Factorial cannot be calculated for negative numbers\")\n    elif n==0:\n        return 1\n    elif n==1:\n        return 1\n    elif n>1:\n        fact=1\n        for i in range(2,n+1):\n            fact=fact*i\n        return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 0): \n        print (\"Please provide a positive number.\") \n        return -1 \n    elif n == 1: \n        print (\"The last digit of 1 is 1.\") \n        return 1 \n    elif n == 2: \n        print (\"The last digit of 2 is 2.\") \n        return 2 \n    elif n > 2: \n        print (\"The last digit of n is greater than 2.\") \n        return 0\n    else: \n        return n * factorial(n-1) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        return ''\n    elif n == 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n    "
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return n%10 + last_Digit_Factorial(n//10) \n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    lastDigit = 0\n    if n > 0:\n        for i in range(1, n+1):\n            lastDigit = i * lastDigit\n        return lastDigit\n    else:\n        return 0\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # list of numbers\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # base case\n    if n == 0:\n        return 0\n    # recur for number\n    elif n in numbers:\n        return numbers[n-1]\n    else:\n        return n * last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = abs(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n % 10**9 + last_Digit_Factorial(n//10**9)\n    \nprint(last_Digit_Factorial(34))"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result=[]\n    result.extend(list1)\n    result.extend(list2)\n    result.extend(list3)\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1.extend(list2)\n    list3.extend(list1)\n    list1.extend(list3)\n    return list1\n    \ndef get_prime_factors(n):\n    '''\n    Write a function that returns all the prime factors of an integer.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef flatten(l):\n    '''\n    Write a function that takes a list and returns a flattened version.\n    '''\n    # TODO: Implement this function.\n    l = []\n    for i in l:\n        l.extend(i)\n    return l\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    #create empty list\n    list_out = []\n    \n    #iterate through list1 and for each element in list1 add list2 to list_out\n    for i in range(0,len(list1)):\n        list_out.append(list1[i])\n        list_out.append(list2[i])\n        list_out.append(list3[i])\n        \n    #return list_out\n    return list_out\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Hint: You can use the built-in function list.extend, which concatenates lists together.\n    return list(list1+list2+list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            if i % 2 == 0:\n                list4.append(list1[i])\n            else:\n                list4.append(list2[j])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4=[]\n    for index in range(0,len(list1),len(list1)):\n        for i in range(0,len(list1)-index):\n            list4.append(list1[index+i])\n    for index in range(0,len(list2),len(list2)):\n        for i in range(0,len(list2)-index):\n            list4.append(list2[index+i])\n    for index in range(0,len(list3),len(list3)):\n        for i in range(0,len(list3)-index):\n            list4.append(list3[index+i])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1,list2,list3]\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Step 1. Create empty list to iterate over\n    list_3 = []\n    for l in list2:\n        list_3 += l\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #Pass 3 lists as arguments\n    result = []\n    for i in range(len(list1)):\n        result += list1[i] + list2[i] + list3[i]\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) ^ set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    # Import time module\n    import time\n    \n    # Define variables\n    start_time = time.time()\n    \n    # Calculate distance\n    distance = 0\n    for i in range(0, len(test_tup1)):\n        distance += pow(test_tup1[i] - test_tup2[i], 2)\n    \n    # Calculate the average distance\n    avg_dist = distance / len(test_tup1)\n    \n    # Print the output\n    print(avg_dist)\n    \n    # Return the elements of the tuples, and also print the time\n    return (test_tup1, test_tup2, avg_dist)\n    "
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tuple_1, tuple_2 = test_tup1, test_tup2\n    len_1, len_2 = len(tuple_1), len(tuple_2)\n    \n    for i in range(len_1):\n        for j in range(len_2):\n            if tuple_1[i] == tuple_2[j]:\n                del tuple_2[j]\n                len_2 -= 1\n                break\n            \n    return tuple_1, tuple_2\n    \n    \n    \n    \n    \ndef union_find_all(test_tup1, test_tup2):\n    '''\n    Write a function to do the union of the given two tuples in a standard way.\n    '''\n    union_tup_list = []\n    \n    if not test_tup2:\n        \n        test_tup1, test_tup2 = test_tup1, test_tup2\n        \n    union_tup_list = list(set(test_tup1).union(test_tup2))\n    \n    return union_tup_list\n    \n    \ndef find_sorted(test_tup):\n    '''\n    Write a function to do the union of the given two tuples in a standard way.\n    '''\n    sorted_tup_list = sorted(test_tup)\n    \n    return sorted_tup_list\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup1,tup2 = test_tup1,test_tup2\n    if len(tup1)==1:\n        if tup1[0] in tup2:\n            return tup1[0]\n    elif len(tup2)==1:\n        if tup2[0] in tup1:\n            return tup2[0]\n    else:\n        for i in range(len(tup1)):\n            if tup1[i] not in tup2:\n                break\n            if tup1[i] in tup2:\n                return tup1[i]\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in tup:\n            tup.append(test_tup1[i])\n    return tup\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    pass\n    \ndef test_find_dissimilar_2():\n    '''\n    Test the function.\n    '''\n    # Correct\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6,7)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4,5,6,7)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2,3)\n    test_tup2 = (4,5,6,7)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4,5,6,7)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fail\n    test_tup1 = (1,2)\n    test_tup2 = (3,4)\n    assert test_find_dissimilar(test_tup1, test_tup2) == []\n    \n    # Fai"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Your code here\n    # In case of a tie, you need to put the element that comes first in the list\n    # Or the other way around, if both are at the end\n    # And check the tuple with one element in the tuple\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # your code here\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return test_tup1[i], test_tup2[i]\n    return test_tup1[i], test_tup2[i]\n    #raise NotImplementedError\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    dissimilar = []\n    for item in test_tup1:\n        if item in test_tup2:\n            dissimilar.append(item)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_tup1 = []\n    dissim_tup2 = []\n    for i in range(len(test_tup1)):\n        dissim_tup1.append(tuple(sorted(test_tup1[i])))\n        dissim_tup2.append(tuple(sorted(test_tup2[i])))\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = list(test_tuple)\n    even_lst.sort(reverse=True)\n    even_tuple = tuple(even_lst)\n    even_tuple = list(even_tuple)\n    # Set the odd element to 0\n    even_lst[-1] = 0\n    even_lst = tuple(even_lst)\n    even_tuple = list(even_tuple)\n    even_tuple.sort(reverse=True)\n    return even_tuple, even_fnc, even_lst\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = test_tuple[0]\n    even_tuple = []\n    for ele in even_list:\n        if ele % 2 == 0:\n            even_tuple.append(ele)\n    test_tuple[0] = tuple(even_tuple)\n    even_fnc(test_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_ele_remove(even_tuple): \n        '''\n        Return a tuple of all even elements of the nested tuple. \n        '''\n        even = []\n        for el in even_tuple: \n            if not el in even: \n                even.append(el) \n        return even \n    t = test_tuple \n    for i in even_ele(t, even_fnc):\n        t = tuple(i)\n        t = tuple(filter(lambda x : x not in t, t))\n        return t \n    return test_tuple\n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def odd_ele_remove(odd_tuple): \n        '''\n        Return a tuple of all odd elements of the nested tuple. \n        '''\n        odd = []\n        for el in odd_tuple: \n            if el in odd: \n                odd.remove(el) \n        return odd \n    t = test_tuple \n    for i in odd_ele(t, odd_fnc):\n        t = tuple(i)\n        t = tuple(filter(lambda x : x not in t, t))\n        return t \n    return test_tuple\n    \ndef test_odd_ele(): \n    test_tuple = (1, 2, 3, 4) \n    even = even_ele(test_tuple, lambda x: x % 2) \n    odd = odd_ele(test_tuple, lambda x: x % 2) \n    print(even, odd) \n    print(odd_ele(even, lambda x: x % 2)) \n    print(even, odd) \n    \ndef test_odd_ele_remove(): \n    test_tuple = (1, 2, 3, 4) \n    even = even_ele(test_tuple, lambda x: x % 2) \n    odd = odd_ele(test_tuple, lambda x: x % 2) \n    print(even, odd) \n    print(even_ele_remove(even, lambda x: x % 2)) \n    print(even, odd) \n    \ntest_odd_ele()\ntest_odd_ele_remove()\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_tuple = test_tuple[0]\n    for i in test_tuple[1:]:\n        odd_tuple = even_fnc(odd_tuple, i)\n    return odd_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_ele_v(even_tuple):\n        # *args is used to pass in tuple of individual arguments\n        # *returns even/odd tuple\n        return tuple((even_tuple[0], even_tuple[1]))\n    return even_ele_v(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elem_indices = []\n    even_elem_vals = []\n    even_fnc(test_tuple, even_elem_indices, even_elem_vals)\n    even_elem_indices = [element for element in even_elem_indices if element % 2 == 0]\n    even_elem_vals = [element for element in even_elem_vals if element % 2 == 0]\n    return even_elem_indices, even_elem_vals\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if even_fnc() in test_tuple: \n        if even_fnc() == test_tuple: \n            test_tuple = test_tuple.remove(even_fnc())\n            return test_tuple\n    else: \n        return even_fnc(test_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Handle missing elements in nested mixed tuple \n    try:\n        test_tuple[0] = float(test_tuple[0])\n        test_tuple[1] = float(test_tuple[1])\n        test_tuple[2] = float(test_tuple[2])\n        test_tuple[3] = float(test_tuple[3])\n    except IndexError:\n        print(\"You should not try to use uneven elements in nested mixed tuple.\")\n    except ValueError:\n        print(\"You should not try to use odd elements in nested mixed tuple.\")\n    else:\n        # Handle error in elements\n        if even_fnc(test_tuple) == True:\n            test_tuple.remove(test_tuple[0])\n            test_tuple.remove(test_tuple[1])\n            test_tuple.remove(test_tuple[2])\n            test_tuple.remove(test_tuple[3])\n        else:\n            print(\"You should not use uneven elements in nested mixed tuple.\")\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple[0], test_tuple[1])\n    even_fnc(test_tuple[1], test_tuple[2])\n    even_fnc(test_tuple[2], test_tuple[0])\n    \ndef odd_ele(test_tuple, odd_fnc): \n    '''\n    Write a function to remove odd elements in the nested mixed tuple.\n    '''\n    odd_fnc(test_tuple[0])\n    odd_fnc(test_tuple[1])\n    odd_fnc(test_tuple[2])\n    odd_fnc(test_tuple[0])\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(tuple(test_tuple)) \n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # if height is equal to 1 then return the base edge \n    if height == 1: \n        return b \n    # if height is greater than 1 then return the area of the quadre \n    if height > 1: \n        return surface_Area_of_Quadrilateral(b, s) * height \n    # if height is 0 then return -1 \n    if height == 0: \n        return -1 \n    # if height is negative then return -1 \n    if height < -1: \n        return -1 \n    # if height is 0 then return 0 \n    if height == 0: \n        return 0 \n    \n    # if height is greater than 0 then find the area of the polygon  \n    b_p = polygon_Area(b, s) \n    s_p = polygon_Area(s, height) \n    return (b_p + s_p) * height \n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2 + s**2)*(4/3)\ndef surface_Area_squares(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2 + s**2)*(4/3)\ndef surface_Area_recursive(b,s):\n    if s == 0:\n        return b*s\n    return (b**2 + s**2)*(4/3) + (b**2 + s**2)*(4/3) + (b**2 + s**2)*(4/3)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    x = b + (s-1)/2\n    y = 0\n    for i in range(s):\n        x = x + (b-1)/2\n        y = y + (i+1)\n        return (x*y)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    sides = b*s\n    side_sum = sides*s\n    print(f'The surface area of a square pyramid with base edge {b} and height {s} is: {side_sum}')\n    return side_sum\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #raise NotImplementedError()\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Determine base edge\n    base = b - s\n    # Determine height\n    height = (2 * base - 1) * s\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def sum_sq(b,s):\n        return b*s\n    a = s - b\n    area = 0\n    for i in range(1,a + 1):\n        area = sum_sq(a,i)\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Your code here\n    import math\n    # h = int(input(\"Please enter the base edge height of the pyramid: \"))\n    # s = int(input(\"Please enter the height of the square you would like to be placed: \"))\n    # area = math.sqrt(pow(h-s,2) + pow(b-s,2))\n    # print(area)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Calculate the base edge and the height \n    base = int(s/2)\n    height = int(b/2)\n    #Use the fact that height = base + 1\n    return base*(height+1)\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # base edge\n    base_edge = int(b)\n    # height\n    height = int(s)\n    # calculate area\n    return base_edge * height\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)!= 0:\n        return 1\n    else:\n        return 0\n        \nmy_dict = {'name': 'Ana', 'age': '30', 'email': 'a@b.com'}\nprint(my_dict)\nprint(my_dict == {})\nprint(my_dict['age'])\nprint(my_dict)\nprint(my_dict.get('name', 'Not found'))\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key,value in dict1.items():\n        print(key)\n        print(value)\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n        \ndef main():\n    '''\n    Fill in this function so that it checks if\n    the dictionary has a value of \"car\" and\n    returns True if it does and False otherwise.\n    '''\n    print('\\nChecking if dictionary has a value of \"car\"')\n    print('Testing')\n    print(my_dict({\"car\": \"car\", \"model\": \"MiG\"}))\n    print('Passing')\n    print('Testing')\n    print(my_dict({\"car\": \"car\", \"model\": \"MiG\", \"year\": 2020}))\n    print('Passing')\n    print('Testing')\n    print(my_dict({\"car\": \"car\", \"model\": \"MiG\", \"year\": 2020, \"xyz\": \"xyz\"}))\n    print('Passing')\n    print('Testing')\n    print(my_dict({\"car\": \"car\", \"model\": \"MiG\", \"xyz\": \"xyz\"}))\n    print('Passing')\n    print('Testing')\n    print(my_dict({\"car\": \"car\", \"model\": \"MiG\"}))\n    print('Passing')\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return \"No Values\"\n    else:\n        return \"Yes: {}\".format(dict1)\n    \ndef dict_to_string(dict):\n    '''\n    Write a function to convert a dictionary to a string\n    '''\n    if len(dict) == 0:\n        return \"No Values\"\n    else:\n        return \"Yes: {}\".format(dict)\n    \ndef add_dict(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries using the existing\n    value of a given key\n    '''\n    dict1.update(dict2)\n    return dict1\n    \ndef dict_to_list(dict):\n    '''\n    Write a function to convert a dictionary to a list\n    '''\n    if len(dict) == 0:\n        return \"No Values\"\n    else:\n        return \"Yes: {}\".format(dict)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    number = 0\n    \n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    elif num == 3:\n        return 2\n    elif num == 4:\n        return 3\n    elif num == 5:\n        return 4\n    elif num == 6:\n        return 5\n    elif num == 7:\n        return 6\n    elif num == 8:\n        return 7\n    elif num == 9:\n        return 8\n    elif num == 10:\n        return 9\n    else:\n        i = 1\n        while i <= num:\n            number = number + 1\n            i = i + 1\n        return number"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 2\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    #Please add your code here\n    if num==0:\n        return 1\n    elif num==1:\n        return 0\n    else:\n        return catalan_number(num-1)+catalan_number(num-2)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = 0\n    for i in range(1,num+1):\n        c += i**2\n    return c\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c = [1]\n    for i in range(1,num+1):\n        c.append(c[i-1] + c[i-1] * i)\n    return c[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # declare the variables\n    j, m = 0, 1\n    while j < num:\n        j = j + 1\n        m = m + 1 - j\n    # return nth catalan number\n    return m\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan(n):\n        if n <= 1:\n            return 1\n        if n%2 == 0:\n            return catalan(n//2) + catalan(n//2)\n        else:\n            return catalan(n-1) + catalan(n-1)\n    return catalan(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    cat_n = 1\n    for i in range(1, num+1):\n        cat_n = cat_n*i\n    return cat_n\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def c_nth_catalan(n):\n        '''\n        Return nth catalan number.\n        '''\n        if n == 0:\n            return 1\n        else:\n            return c_nth_catalan(n-1) + c_nth_catalan(n-1) * (n-1)\n    print(c_nth_catalan(num))\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return None\n    else:\n        counter = 1\n        result = 1\n        for i in range(1, num + 1):\n            counter = counter * i\n            result = result * i\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex_ly = r\"(?:[^\\.\\[\\]]|\\[|]|\\[)|[aeiou]{2,3}|[lL]|[mM]|[nN]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]|[iI]|[oO]|[uU]|[yY]"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] in [\"l\"] and text[i+1] == \"y\":\n            adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    final_adverb = []\n    final_adverb_positions = []\n    for i, line in enumerate(text.split('\\n')):\n        if 'ly' in line:\n            final_adverb.append(line)\n            final_adverb_positions.append(i)\n    if len(final_adverb) == 1:\n        final_adverb.append(text[final_adverb_positions[0]+1:])\n    return final_adverb, final_adverb_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # TODO: implement this function\n    adverb = \"\"\n    pos_i = 0\n    while pos_i < len(text) and text[pos_i]!= \" \":\n        if text[pos_i] == \"a\" or text[pos_i] == \"A\":\n            adverb = text[pos_i:pos_i+2]\n            break\n        pos_i += 1\n    return adverb\ndef find_adverb_index(text, adverb):\n    '''\n    Given a string of a sentence, find the first adverb ending with ly and its positions\n    in it.\n    '''\n    # TODO: implement this function\n    pos_i = 0\n    while pos_i < len(text) and text[pos_i]!= \" \":\n        if text[pos_i] == \"a\" or text[pos_i] == \"A\":\n            if adverb == \"ly\":\n                return pos_i\n        pos_i += 1\n    return -1\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create a regex for finding the adverb ending with ly\n    ly_regex = re.compile('(ly|est|ies|y)|ly|ies|y|ly')\n    # find the first adverb ending with ly\n    return ly_regex.findall(text)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pos_range = (text.find('ly'),text.find('ly')+5)\n    for i in range(pos_range[0],pos_range[1]):\n        if text[i] == 'ly':\n            adverbs.append(i)\n    adverbs.remove(pos_range[1]-1)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if 'ly' in text:\n        adverbs = [re.split('ly|ly|y', text)[0]]\n        return adverbs\n    else:\n        adverbs = [re.split('ly|ly|y', text)[0]]\n        return adverbs\n    \ndef find_adjectives(text):\n    '''\n    Write a function to find the first adjective ending with danish and its positions in a given string.\n    '''\n    if 'danish' in text:\n        adjectives = [re.split('danish|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|dansk|"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the adverbs ending with ly\n    adverbs = []\n    adverb_pattern = r'ly|ly\\.'\n    text = text.replace('ly', 'ly.') # replacely is for ly.\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    pos = 0\n    while True:\n        if text[pos] == \"a\":\n            if pos == 0:\n                pos += 1\n            else:\n                pos += 1\n        elif text[pos] == \"a\" and text[pos-1] == \"n\":\n            result.append((pos,pos-1))\n        else:\n            pos += 1\n        if pos >= len(text):\n            break\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = '([a-zA-Z]+ly|([a-zA-Z]+ly|ly|L|y|Y|l|L|Y|L|Y|L|y|Y|l|L|Y|L|Y|l|L|Y|L|L|Y|L|L|Y|L|L|L|Y|L|L|Y|l|L|Y|l|L|Y|L|L|Y|L|L|L|Y|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|L|"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heappush(heap,[-item[0][1] for item in items])\n    for _ in range(n):\n        heapq.heappop(heap)\n        for item in items:\n            if item[0][1] > heap[0][1]:\n                heapq.heappush(heap,[-item[0][1],item])\n    return heapq.heappop(heap)[1]\ndef load_from_file(filename):\n    '''\n    Read in a file containing a list of dictionaries. Each dictionary is an item.\n    '''\n    s = ''\n    with open(filename, 'r') as f:\n        for line in f:\n            s+=line\n            s+=','\n    return s[:-1]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    count = 0\n    results = []\n    for i in range(len(items)):\n        if items[i][2] == n:\n            count += 1\n            results.append((items[i][0],items[i][1],count))\n    results.sort(reverse=True,key=lambda tup: tup[2])\n    return results[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    import heapq\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,items[i][1])\n    \n    for i in range(n-1,0,-1):\n        heapq.heappush(heap,-heapq.heappop(heap)+items[i][1])\n    \n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    print(\"\\n\\nN =\",n,\"\\n\")\n    for i in range(n):\n        print(\"Item\",i+1,\":\",items[i],\"\\n\")\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #create a new dataset with n items\n    dataset=[]\n    for i in range(n):\n        dataset.append(i)\n    #sort the list\n    dataset.sort()\n    #use a heap for storing the items\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap, items[i][1])\n    #add the items to the heap\n    for i in range(n):\n        heapq.heappushpop(heap,items[i][1])\n    #retrieve the n items in the dataset and return the list\n    #in case the dataset is too long\n    ret=[]\n    for i in range(n):\n        ret.append(heapq.heappop(heap))\n    return ret\ndef expensive_items_2(items,n):\n    '''\n    Using recursion\n    '''\n    #if n is zero then we don't need to go through it\n    if n==0:\n        return items\n    #if n is one then we have to go through all the items\n    if n==1:\n        return items\n    #if n is 2 then we need to create a new list and then call recursion\n    #else the list will be returned\n    return expensive_items_2(items,n-1) + expensive_items(items,n-1)\ndef expensive_items_3(items,n):\n    '''\n    Using stack\n    '''\n    #if n is zero then we don't need to go through it\n    if n==0:\n        return items\n    #if n is one then we have to go through all the items\n    if n==1:\n        return items\n    #if n is 2 then we need to create a new list and then call recursion\n    #else the list will be returned\n    ret=[]\n    ret.append(items[0])\n    for i in range(1,n):\n        ret.append(items[i][1])\n    return ret\ndef expensive_items_4(items,n):\n    '''\n    Using queue\n    '''\n    #if n is zero then we don't need to go through it\n    if n==0:\n        return items\n    #if n is one then we have to go through all the items\n    if n==1:\n        return items\n    #if n is 2 then we need to create a new list and then call recursion\n    #else the list will be returned\n    ret=[]\n    ret.append(items[0])\n    for i in range(1,n):\n        ret.append(items[i][1])\n    return ret\ndef expensive_items_5(items,n):\n    '''\n    Using heap\n    '''\n    #if n is zero then we don't need to go through it\n    if n==0:\n        return items\n    #if n is one then we have to go through all the items\n    if n==1:\n        return items\n    #if n is 2 then we need to create a new list and then call recursion\n    #else the list will be returned\n    ret=[]\n    ret.append(items[0])\n    for i in range(1,n):\n        ret.append(items[i][1])\n    return ret\ndef expensive_items_6(items,n):\n    '''\n    Using merge sort\n    '''\n    #if n is zero then we don't need to go through it\n    if n==0:\n        return items\n    #if n is one then we have to go through all the items\n    if n==1:\n        return items\n    #if n is 2 then we need to create a new list and then call recursion\n    #else the list will be returned\n    ret=[]\n    ret.append(items[0])\n    for i in range(1,n):\n        ret.append(items[i][1])\n    return ret\ndef expensive_items_7(items,n):\n    '''\n    Using binary search\n    '''\n    #if n is zero then we don't need to go through it\n    if n==0:\n        return items\n    #if n is one then we have to go through all the items\n    if n==1:\n        return items\n    #if n is 2 then we need to create a new list and then call recursion\n    #else the list will be returned\n    l=0\n    r=len(items)-1\n    #we need to keep checking to see if we have to lower the item we're looking for\n    while l<=r:\n        m=(l+r)/2\n        #if the item is in the middle of the list\n        if items[m][1]==n:\n            #then return the item\n            return items\n        #if the item is less than the item we're looking for\n        elif items[m][1]<n:\n            #then shift the left pointer forward\n            l=m+1\n        #if the item is greater than the item we're looking for\n        elif items[m][1]>n:\n            #then shift the right pointer forward\n            r=m-1\n    #if we didn't find it in the dataset\n    return -1\ndef expensive_items_8(items,n):\n    '''\n    Using dynamic programming\n    '''\n    #if n is zero then we don't need to go through it\n    if n==0:\n        return items\n    #if n is one then we have to go through all the items\n    if n==1:\n        return items\n    #if n is 2 then we need to create a new list and then call recursion\n    #else the list will be returned\n    ret=[]\n    ret.append(items[0])\n    for i in range(1,n):\n        ret.append(items[i][1])\n    return ret\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    for i in range(n):\n        heapq.heappush(h,items[i][2])\n    heapq.heappush(h,0)\n    #print(h)\n    while len(h)>0:\n        #print(heapq.heappop(h))\n        print(heapq.heappop(h))\n    return [i for i in items if heapq.heappop(h) > 0]\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    for i in items:\n        heapq.heappush(heap, i[2])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    count = {}\n    for i in items:\n        if items.count(i) < count.get(i,0):\n            count[i] = items.count(i)\n            \n    return heapq.nlargest(n,count.items(),key=lambda i: i[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    \n    for item in items:\n        heapq.heappush(heap,item)\n        heapq.heappush(heap,-item)\n        \n    for i in range(n):\n        print(heapq.heappop(heap))\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for x in items:\n        heapq.heappush(heap,(-x,x))\n    \n    n_items = len(items)\n    if n_items == 0:\n        return None\n    \n    for _ in range(n):\n        heapq.heappop(heap)\n    \n    return heap\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    i = 0\n    a = []\n    b = []\n    while i < len(l):\n        a.append(l[i])\n        i += 1\n    j = 0\n    while j < n:\n        b.append(a[j])\n        j += 1\n    return b\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i + n] for i in range(0, len(l), n)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split_arr_to_list() is a function that returns a list\n    arr = l\n    for x in range(0, n):\n        arr.append(arr[x])\n    return arr\n    \ndef reverse_list(l):\n    '''\n    Write a function that reverses the list l\n    '''\n    # reverse_list() is a function that returns a list\n    arr = l\n    arr = arr[::-1]\n    return arr\n    \ndef array_rotate(arr, k):\n    '''\n    Write a function that rotate the list arr from left to right by k\n    '''\n    # array_rotate() is a function that returns a list\n    arr = arr[::-1]\n    arr = arr[k:] + arr[:k]\n    return arr\n    \ndef binary_search(arr, k, start, end):\n    '''\n    Write a function that finds the first element in the list that is greater than the first element in the list that is less than the second element.\n    '''\n    # binary_search() is a function that returns a number\n    arr = arr[::-1]\n    for i in range(start, end):\n        if arr[i] > arr[k]:\n            return i + 1\n    return -1\n    \ndef even_odd(l):\n    '''\n    Write a python function that returns a list where the even elements appear in the start position and the odd elements in the end position.\n    '''\n    # even_odd() is a function that returns a list\n    arr = l\n    arr = arr[::-1]\n    arr = arr[:len(arr)//2] + arr[len(arr)//2:]\n    return arr\n    \ndef odd_even(l):\n    '''\n    Write a python function that returns a list where the odd elements appear in the start position and the even elements in the end position.\n    '''\n    # odd_even() is a function that returns a list\n    arr = l\n    arr = arr[::-1]\n    arr = arr[len(arr)//2:-len(arr)//2] + arr[-len(arr)//2:]\n    return arr\n    \ndef merge_sort(l):\n    '''\n    Write a python function that returns a list where the elements in the first sub-list are sorted from left to right and the elements in the last sub-list are sorted from right to left.\n    '''\n    # merge_sort() is a function that returns a list\n    arr = l\n    arr = merge_sort_array(arr)\n    arr = merge_sort_list(arr)\n    return arr\n    \ndef merge_sort_array(arr):\n    '''\n    Write a python function that returns a list where the elements in the first sub-list are sorted from left to right and the elements in the last sub-list are sorted from right to left.\n    '''\n    # sort_array() is a function that returns a list\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        arr[i] = arr[i][::-1]\n    return arr\n    \ndef merge_sort_list(arr):\n    '''\n    Write a python function that returns a list where the elements in the first sub-list are sorted from left to right and the elements in the last sub-list are sorted from right to left.\n    '''\n    # sort_list() is a function that returns a list\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        arr[i] = arr[i][::-1]\n    return arr\n    \ndef insert_sort(l):\n    '''\n    Write a python function that returns a list where the elements in the first sub-list are sorted from left to right and the elements in the last sub-list are sorted from right to left.\n    '''\n    # insert_sort() is a function that returns a list\n    arr = l\n    arr = insert_sort_array(arr)\n    arr = insert_sort_list(arr)\n    return arr\n    \ndef insert_sort_array(arr):\n    '''\n    Write a python function that returns a list where the elements in the first sub-list are sorted from left to right and the elements in the last sub-list are sorted from right to left.\n    '''\n    # sort_array() is a function that returns a list\n    arr = sorted(arr)\n    for i in range(1, len(arr)):\n        x = arr[i]\n        j = i-1\n        while arr[j] > x and j >= 0:\n            arr[j+1] = arr[j]\n            j-=1\n        arr[j+1] = x\n    return arr\n    \ndef insert_sort_list(arr):\n    '''\n    Write a python function that returns a list where the elements in the first sub-list are sorted from left to right and the elements in the last sub-list are sorted from right to left.\n    '''\n    # sort_list() is a function that returns a list\n    arr = sorted(arr)\n    for i in range(1, len(arr)):\n        x = arr[i]\n        j = i-1\n        while arr[j] < x and j >= 0:\n            arr[j+1] = arr[j]\n            j-=1\n        arr[j+1] = x\n    return arr\n    \ndef quick_sort(l):\n    '''\n    Write a python function that sorts the elements in a list in ascending order.\n    '''\n    # quick_sort() is a function that returns a list\n    arr = l\n    arr = quick_sort_array(arr)\n    return arr\n    \ndef quick_sort_array(arr):\n    '''\n    Write a python function that sorts the elements in a list in ascending order.\n    '''\n    # sort_array() is a function that returns a list\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n    \ndef quick_sort_list(arr):\n    '''\n    Write a python function that sorts the elements in a list in ascending order.\n    '''\n    # sort_list() is a function that returns a list\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        for j in range(len(arr)-1-i):\n            if arr[j] < arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n    \ndef print_dictionary(d):\n    '''\n    Write a python function that prints a dictionary.\n    '''\n    # print_dictionary() is a function that returns a string\n    string = \"\"\n    for key in d:\n        string += str(key) + \" = \" + str(d[key]) + \"\\n\"\n    return string\n    \ndef de_duplicate(l):\n    '''\n    Write a python function that returns a list where the elements in the first sub-list are sorted in ascending order and the elements in the last sub-list are sorted in ascending order.\n    '''\n    # de_duplicate() is a function that returns a list\n    arr = l\n    arr = de_duplicate_array(arr)\n    return arr\n    \ndef de_duplicate_array(arr):\n    '''\n    Write a python function that returns a list where the elements in the first sub-list are sorted in ascending order and the elements in the last sub-list are sorted in ascending order.\n    '''\n    # sort_array() is a function that returns a list\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1 - i):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n    \ndef print_dictionary_alt(d):\n    '''\n    Write a python function that prints a dictionary.\n    '''\n    # print_dictionary_alt() is a function that returns a string\n    string = \"\"\n    for key in d:\n        string += str(key) + \" "
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l.split(n)\n    return a[1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    # HINT: You can use the built-in split function\n    return list(l[i:i + n])\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[i:i+n] for i in range(len(l)-n+1)]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # base case: if the length of the list is even, split at the 0th element\n    if len(l)%2 == 0:\n        return l[:n]+l[n:]\n    # return empty list if the list is odd\n    else:\n        return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    try:\n        for i in range(len(l)):\n            l[i] = l[i][:n]\n    except Exception as e:\n        print(e)\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n] + l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_list = []\n    for x in listx:\n        tuple_list.append(x)\n    return tuple_list\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = ()\n    for item in listx:\n        t = t + (item, )\n    return t\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplelist = []\n    for x in listx:\n        tuplelist.append(x)\n    return tuplelist\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple = tuple(listx)\n    return tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    l = []\n    for i in listx:\n        l.append(i)\n    return tuple(l)\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    import math\n    smallest = None\n    largest = None\n    diff = None\n    for n in nums:\n        if smallest == None:\n            smallest = n\n        elif largest == None:\n            largest = n\n        else:\n            diff = n - largest\n            if diff < smallest:\n                smallest = n\n            elif diff > largest:\n                largest = n\n    return smallest - larges"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0] - nums[0]\n    l = []\n    for i in range(len(nums)):\n        l.append(nums[i] - max(nums[i - 1], nums[i]))\n    return max(l)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 0\n    if len(nums) == 2:\n        if nums[0] < nums[1]:\n            return nums[1] - nums[0]\n        else:\n            return nums[1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    smallest = min(nums)\n    largest = max(nums)\n    \n    if smallest == largest:\n        return largest - smallest\n    \n    diff = largest - smallest\n    \n    return diff\n    "
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # get the maximum\n    max = max(nums)\n    # get the minimum\n    min = min(nums)\n    # find the difference\n    return abs(max - min)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest element\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    if nums == []:\n        return 0\n    \n    if len(nums) == 1:\n        return max(nums) - min(nums)\n    \n    if len(nums) == 2:\n        return max(nums) - min(nums)\n    \n    min_index = 0\n    max_index = len(nums) - 1\n    min_val = max(nums)\n    \n    while min_index <= max_index:\n        mid = (min_index + max_index) // 2\n        if nums[mid] < min_val:\n            min_index = mid + 1\n        elif nums[mid] > min_val:\n            max_index = mid - 1\n        else:\n            return nums[mid] - min_val\n    \n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    nums_diff = abs(smallest-largest)\n    return nums_diff\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #get the list of integers\n    new_list=[]\n    for x in nums:\n        new_list.append(x)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b or abs(a) == abs(b):\n        return a * a\n    return 2 ** ((a + b) // 2)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 0:\n        if b == 0:\n            return True\n        return False\n    if b == 0:\n        return a >= 2 and a % 2 == 0\n    if a >= b:\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    s = set()\n    for n in range(a, b+1):\n        i = 1\n        while i**2 < n:\n            if n%i == 0:\n                s.add(i)\n            i += 1\n    return s\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n    if a < b:\n        a, b = b, a\n    \n    i = 0\n    while a + i * i <= b:\n        if a + i * i == b:\n            return [a + i * i]\n        elif a + i * i < b:\n            i += 1\n        else:\n            return []\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    s = []\n    for i in range(a, b):\n        if i**2 <= b**2:\n            s.append(i**2)\n        if i**2 > b**2:\n            s.append(b**2)\n    return s\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return False\n    if a == 0:\n        return False\n    if a == b:\n        return True\n    if a % b == 0:\n        return perfect_squares(a // b, b)\n    return False\n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if n is a prime number, otherwise return False.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n) + 1), 5):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    m = max(a, b)\n    if m == 1:\n        return [a]\n    elif m == 2:\n        return [2 * a]\n    elif m > 2:\n        return perfect_squares(m - 1, 2 * m)\n    elif m < 2:\n        return perfect_squares(a, m - 1)\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    # define a list of the perfect squares.\n    squares = [i**2 for i in range(1, a) if i**2 % b == 0]\n    \n    # return the list of perfect squares.\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def square(num):\n        if num < 0:\n            return None\n        return num * num\n    n = len(a)\n    if n == 0:\n        return None\n    if b < a[0]:\n        return square(b)\n    if a[-1] > b:\n        return square(b)\n    i = 0\n    while i < n:\n        if square(a[i]) + square(b) == b:\n            return square(a[i])\n        if a[i] < b:\n            i += 1\n        elif a[i] > b:\n            i += -1\n    return square(b)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    l = x - y\n    r = 2 * cmath.pi * y\n    x = l * cmath.sqrt(1 - l * l) / cmath.sqrt(1 + l * l)\n    y = r * cmath.sqrt(1 - r * r) / cmath.sqrt(1 + r * r)\n    return (x,y)\npolar_rect(2,1)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.polar((x,y))\ndef polar_rect_polar(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase((x,y))\n    r = cmath.rect(x,y)\n    return theta, r\ndef polar_rect_polar_arc(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase((x,y))\n    r = cmath.rect(x,y)\n    phi = cmath.phase(theta)\n    return phi, r\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = 0.0\n    theta = 0.0\n    r = 0.0\n    p = 0.0\n    while abs(x)!= 0.0:\n        theta = cmath.polar(x/cmath.sqrt(y))\n        phi = cmath.polar(y/cmath.sqrt(y))\n        r = abs(x)\n        x = 0.0\n        y = 0.0\n    return (r, phi, theta, phi)\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x_rad = cmath.polar(x)\n    y_rad = cmath.polar(y)\n    return x_rad,y_rad\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle = math.atan2(y,x)\n    return (math.cos(angle), math.sin(angle))\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # convert x and y to radians\n    x = x*cmath.pi/180.0\n    y = y*cmath.pi/180.0\n    # construct a rectangle\n    length = cmath.sqrt(x*x + y*y)\n    if length == 0:\n        # if length is zero, return empty\n        return []\n    return [length, length/2.0, length/2.0]\ndef polar_rect_2d(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # convert x and y to radians\n    x = x*cmath.pi/180.0\n    y = y*cmath.pi/180.0\n    # construct a rectangle\n    length = abs(x)\n    if length == 0:\n        # if length is zero, return empty\n        return []\n    return [length, length, length]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    delta = cmath.sqrt(x**2+y**2)\n    if delta == 0:\n        return [0,0]\n    r = cmath.sqrt(x**2+y**2)/delta\n    return [r,cmath.sqrt(r**2-1)]\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    t = cmath.phase(z)\n    p = cmath.phase(cmath.rect)\n    return (r,t,p)\ndef polar_triang(x,y):\n    '''\n    Write a function to convert polar coordinates to trapezoidal coordinates.\n    '''\n    z = complex(x,y)\n    t = cmath.phase(z)\n    s = complex(0,0)\n    if t<0:\n        s = complex(1,1)\n        t+=2*math.pi\n    else:\n        s = complex(-1,1)\n        t-=2*math.pi\n    r = s.real\n    t = t-r\n    return (r,t)\ndef polar_aglyph(x,y):\n    '''\n    Write a function to convert polar coordinates to trigonometric coordinates.\n    '''\n    z = complex(x,y)\n    f = cmath.phase(z)\n    sin = cmath.sin(f)\n    cos = cmath.cos(f)\n    return (sin,cos,f)\ndef polar_rad(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    return (r,cmath.phase(z))\ndef polar_seg(x,y):\n    '''\n    Write a function to convert polar coordinates to segction coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    t = complex(0,0)\n    if t<0:\n        t+=2*math.pi\n    else:\n        t-=2*math.pi\n    return (r,t)\ndef polar_sim(r,t,p):\n    '''\n    Write a function to convert polar coordinates to simetric coordinates.\n    '''\n    r_sin = complex(math.sin(p),0)\n    r_cos = complex(0,math.cos(p))\n    x = r * r_cos - (r * r_sin)\n    y = r * r_sin + (r * r_cos)\n    return (x,y)\ndef polar_sum(r,t,p):\n    '''\n    Write a function to convert polar coordinates to sum coordinates.\n    '''\n    r_sum = polar_sim(r,t,p)\n    return (r_sum[0],r_sum[1])\ndef polar_diff(r,t,p):\n    '''\n    Write a function to convert polar coordinates to diff coordinates.\n    '''\n    r_diff = polar_sim(r,t,p)\n    return (r_diff[0]+r,r_diff[1]+r)\ndef polar_real(x,y):\n    '''\n    Write a function to convert polar coordinates to real coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    return (r,cmath.phase(z))\ndef polar_imag(x,y):\n    '''\n    Write a function to convert polar coordinates to imaginary coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    return (r,cmath.phase(z))\ndef polar_conjugate(x,y):\n    '''\n    Write a function to convert polar coordinates to conjugate coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    return (r,cmath.phase(z))\ndef polar_rotate(x,y):\n    '''\n    Write a function to convert polar coordinates to rotate coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    f = cmath.phase(z)\n    if f>0:\n        t = (math.pi/2 + f)%(2*math.pi)\n        s = (t+math.pi)%(2*math.pi)\n        return (r,s)\n    else:\n        return (r,complex(1,0))\ndef polar_translate(x,y):\n    '''\n    Write a function to convert polar coordinates to translate coordinates.\n    '''\n    z = complex(x,y)\n    s = complex(0,0)\n    return (z,s)\ndef polar_normalize(x,y):\n    '''\n    Write a function to convert polar coordinates to normalize coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    if r>0:\n        t = (math.pi/2 + cmath.phase(z))%(2*math.pi)\n        return (r,t)\n    else:\n        return (r,complex(-1,0))\ndef polar_conjugate_inverse(x,y):\n    '''\n    Write a function to convert polar coordinates to conjugate inverse coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    if r>0:\n        s = (math.pi/2 + cmath.phase(z))%(2*math.pi)\n        t = (s+math.pi)%(2*math.pi)\n        return (complex(r,t))\n    else:\n        return (complex(1,0))\ndef polar_translate_inverse(x,y):\n    '''\n    Write a function to convert polar coordinates to translate inverse coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    if r>0:\n        t = (math.pi/2 + cmath.phase(z))%(2*math.pi)\n        s = (t-math.pi)%(2*math.pi)\n        return (complex(r,t),complex(s,0))\n    else:\n        return (complex(1,0),complex(0,0))\ndef polar_scale(x,y):\n    '''\n    Write a function to convert polar coordinates to scale coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    return (r,cmath.phase(z))\ndef polar_rotate_inverse(x,y):\n    '''\n    Write a function to convert polar coordinates to rotate inverse coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    f = cmath.phase(z)\n    if f>0:\n        t = (math.pi/2 + f)%(2*math.pi)\n        s = (t+math.pi)%(2*math.pi)\n        return (complex(r,0),complex(0,t))\n    else:\n        return (complex(1,0),complex(0,0))\ndef polar_scale_inverse(x,y):\n    '''\n    Write a function to convert polar coordinates to scale inverse coordinates.\n    '''\n    z = complex(x,y)\n    r = (z.real**2 + z.imag**2)**0.5\n    if r>0:\n        s = (math.pi/2 + cmath.phase(z))%(2*math.pi)\n        t = (s+math.pi)%(2*math.pi)\n        return (complex(r,0),complex(0,t))\n    else:\n        return (complex(1,0),complex(0,0))\ndef polar_translate_log(x,y):\n    '''\n    Write a function to convert polar coordinates to logarithmically spaced coordinates.\n    '''\n    z = complex(x"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    c = math.pi / 180.0\n    a = math.sqrt((x ** 2) + (y ** 2))\n    b = (x * x * c) + (y * y * c)\n    x_ = (a * cmath.cos(c)) + (b * x)\n    y_ = (a * cmath.sin(c)) + (b * y)\n    return x_,y_\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (cmath.rect(x,y),cmath.rect(y,x))\ndef rect_convert(polar_coord):\n    '''\n    Write a function that converts a rectangular coordinate to polar coordinates.\n    '''\n    x,y = polar_coord\n    x = x * (math.pi/180)\n    y = y * (math.pi/180)\n    return (x,y)\ndef mat_to_matrix(matrix):\n    '''\n    Write a function that converts a matrix to a vector.\n    '''\n    m = []\n    for i in range(len(matrix)):\n        m.append(matrix[i][0])\n        m.append(matrix[i][1])\n    return m\ndef matrix_to_matrix(matrix):\n    '''\n    Write a function that converts a matrix to a vector.\n    '''\n    m = []\n    for i in range(len(matrix)):\n        m.append([])\n        for j in range(len(matrix)):\n            m[i].append(matrix[i][j])\n    return m\ndef matrix_to_vector(matrix):\n    '''\n    Write a function that converts a matrix to a vector.\n    '''\n    v = []\n    for i in range(len(matrix)):\n        v.append(matrix[i][0])\n        v.append(matrix[i][1])\n    return v\ndef vector_to_matrix(vector):\n    '''\n    Write a function that converts a vector to a matrix.\n    '''\n    m = []\n    for i in range(len(vector)):\n        m.append(vector[i])\n    return m\ndef matrix_to_vector(matrix):\n    '''\n    Write a function that converts a matrix to a vector.\n    '''\n    v = []\n    for i in range(len(matrix)):\n        v.append(matrix[i][0])\n        v.append(matrix[i][1])\n    return v\ndef vector_to_matrix(vector):\n    '''\n    Write a function that converts a vector to a matrix.\n    '''\n    m = []\n    for i in range(len(vector)):\n        m.append(vector[i])\n    return m\ndef matrix_to_vector(matrix):\n    '''\n    Write a function that converts a matrix to a vector.\n    '''\n    v = []\n    for i in range(len(matrix)):\n        v.append(matrix[i][0])\n        v.append(matrix[i][1])\n    return v\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = newList[:len(newList)//2] + newList[len(newList)//2:] \n    return new_list\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = newList[0:len(newList) // 2] + newList[len(newList) // 2:len(newList)] \n    new_list.reverse()\n    return new_list\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList1 = newList[1:]\n    newList1.append(newList[0])\n    newList = newList1\n    print(newList)\n    \n    \n    \n    \nif __name__ == \"__main__\":\n    # create a list of 10 random integers\n    randomList = random.sample(range(1,100),10)\n    print(randomList)\n    # create a list of strings\n    randomList_Strings = ['string1','string2','string3','string4','string5','string6','string7','string8','string9']\n    print(randomList_Strings)\n    # call the swap_List function\n    swap_List(randomList_Strings)\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList[0], newList[-1])\n    newList.pop(0)\n    newList.pop()\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your code here\n    # Your code here\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    for i in range(len(newList)-1):\n        newList[i], newList[i + 1] = newList[i + 1], newList[i]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # your code goes here\n    if len(newList) <= 1:\n        return newList\n    else:\n        # \u4e0b\u9762\u5982\u679c\u8be5\u884c\u4e0d\u80fd\u8f6c\u6362\u6210\u4e00\u4e2a\u5143\u7ec4\uff0c\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519\n        return swap_List(newList[1:]) + swap_List(newList[0:1])\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # # Get the length of the list\n    # len(newList)\n    # # Swap the first element of each list with the second element of each list\n    # newList[0], newList[-1] = newList[-1], newList[0]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    tempList = newList[:]\n    print(\"The new list is:\", tempList)\n    print(\"Swap the first element:\", tempList[0])\n    print(\"Swap the last element:\", tempList[-1])\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Write your code here\n    newList.reverse()\n    newList.append(newList.pop())\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0 or k == 0:\n        return 1\n    if n < 0 or k < 0:\n        raise ValueError(\"Negative or zero arguments are not accepted\")\n    return binomial_Coeff(n-1,k) * binomial_Coeff(n-1,k-1)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += co_sum(i) * co_sum(k-i)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # n = size of numbers\n    # k = number of iterations\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    f = lambda n,k: n*k\n    return sum(map(f,range(1,n+1),range(1,k+1)))\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # n is the length of the array\n    # k is the order of the coefficient\n    # returns a sum of the product of consecutive binomial co-efficients\n    total_coeff = 0\n    for i in range(k):\n        total_coeff += pow(n,i)*(n-i)\n    return total_coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (k>n):\n        return 0\n    res=0\n    for i in range(k):\n        res+=binomial_Coeff(n-1,i+1)*(n-i-1)\n    return res\ndef polynomial_coeff(n,x):\n    '''\n    Write a python function to find the sum of the product of polynomial co-efficients.\n    '''\n    if (n==0):\n        return 1\n    elif (n==1):\n        return x\n    return polynomial_coeff(n-1,x)*x\ndef poly_coeff(n,x):\n    '''\n    Write a python function to find the sum of the polynomial co-efficients.\n    '''\n    if (n==0):\n        return 1\n    elif (n==1):\n        return 0\n    if (n%2==0):\n        return polynomial_coeff(n//2,x)*poly_coeff(n//2,x)\n    else:\n        return (x**n)*poly_coeff(n//2,x)\ndef exp_poly(n,x):\n    '''\n    Write a python function to find the sum of the exponents of polynomial co-efficients.\n    '''\n    if (n==0):\n        return 1\n    elif (n==1):\n        return 0\n    if (n%2==0):\n        return poly_coeff(n//2,x)*poly_coeff(n//2,x)\n    else:\n        return (x**n)*poly_coeff(n//2,x)\ndef exp_coeff(n,x):\n    '''\n    Write a python function to find the sum of the exponents of polynomial co-efficients.\n    '''\n    if (n==0):\n        return 1\n    elif (n==1):\n        return 0\n    if (n%2==0):\n        return poly_coeff(n//2,x)*poly_coeff(n//2,x)\n    else:\n        return (x**n)*poly_coeff(n//2,x)\ndef exponent_sum(n,x):\n    '''\n    Write a python function to find the sum of the exponents of polynomial co-efficients.\n    '''\n    if (n==0):\n        return 1\n    elif (n==1):\n        return 0\n    if (n%2==0):\n        return poly_coeff(n//2,x)*exponent_sum(n//2,x)\n    else:\n        return (x**n)*exponent_sum(n//2,x)\ndef inv_poly_coeff(n,x):\n    '''\n    Write a python function to find the sum of the inverse polynomial co-efficients.\n    '''\n    if (n==0):\n        return 1\n    elif (n==1):\n        return 0\n    if (n%2==0):\n        return poly_coeff(n//2,x)*poly_coeff(n//2,x)\n    else:\n        return (x**n)*poly_coeff(n//2,x)\ndef inv_poly_coeff_sum(n,x):\n    '''\n    Write a python function to find the sum of the inverse polynomial co-efficients.\n    '''\n    if (n==0):\n        return 1\n    elif (n==1):\n        return 0\n    if (n%2==0):\n        return poly_coeff(n//2,x)*inv_poly_coeff(n//2,x)\n    else:\n        return (x**n)*inv_poly_coeff(n//2,x)\ndef inv_poly_coeff_sum_sum(n,x):\n    '''\n    Write a python function to find the sum of the inverse polynomial co-efficients.\n    '''\n    if (n==0):\n        return 1\n    elif (n==1):\n        return 0\n    if (n%2==0):\n        return poly_coeff(n//2,x)*inv_poly_coeff_sum(n//2,x)\n    else:\n        return (x**n)*inv_poly_coeff_sum(n//2,x)\ndef poly_compose(f,g):\n    '''\n    Write a python function to compose a polynomial.\n    '''\n    return f(x) + g(x)\ndef poly_inv(f,g):\n    '''\n    Write a python function to inverse a polynomial.\n    '''\n    return g(f(x))/f(x)\ndef poly_eval(f,x):\n    '''\n    Write a python function to evaluate a polynomial.\n    '''\n    if (x>0):\n        return f(x)*poly_coeff(2,x) + f(x)*poly_coeff(3,x)\n    else:\n        return f(x)*poly_coeff(0,x) - f(x)*poly_coeff(1,x)\ndef nth_poly_coeff(n,f,g):\n    '''\n    Write a python function to return the nth power of a polynomial.\n    '''\n    if (n<1):\n        return 0\n    if (n==1):\n        return f(x)\n    return nth_poly_coeff(n-1,f,g)\ndef nth_poly_coeff_sum(n,f):\n    '''\n    Write a python function to return the nth power of a polynomial.\n    '''\n    if (n<1):\n        return 0\n    if (n==1):\n        return f(x)\n    return nth_poly_coeff_sum(n-1,f) + f(x)\ndef nth_poly_coeff_sum_sum(n,f):\n    '''\n    Write a python function to return the nth power of a polynomial.\n    '''\n    if (n<1):\n        return 0\n    if (n==1):\n        return f(x)\n    return nth_poly_coeff_sum_sum(n-1,f) + nth_poly_coeff_sum_sum(n-2,f)\ndef nth_poly_coeff_sum_sum_sum(n,f):\n    '''\n    Write a python function to return the nth power of a polynomial.\n    '''\n    if (n<1):\n        return 0\n    if (n==1):\n        return f(x)\n    return nth_poly_coeff_sum_sum(n-1,f) + nth_poly_coeff_sum_sum(n-2,f) + nth_poly_coeff_sum_sum(n-3,f)\ndef poly_derivative(f,x):\n    '''\n    Write a python function to compute the derivative of a polynomial.\n    '''\n    if (x>0):\n        return (1/x)*f(x)*poly_coeff(2,x) + (1/x)*f(x)*poly_coeff(3,x)\n    else:\n        return (1/x)*f(x)*poly_coeff(0,x) + (1/x)*f(x)*poly_coeff(1,x)\ndef poly_eval_derivative(f,x):\n    '''\n    Write a python function to evaluate the derivative of a polynomial.\n    '''\n    if (x>0):\n        return (1/x)*f(x)*poly_coeff(2,x) + (1/x)*f(x)*poly_coeff(3,x)\n    else:\n        return (1/x)*f(x)*poly_coeff(0,x) + (1/x)*f(x)*poly_coeff(1,x)\ndef nth_poly_derivative(n,f):\n    '''\n    Write a python function to compute the derivative of a polynomial.\n    '''\n    if (n<1):\n        return 0\n    if (n==1):\n        return f(x)\n    return nth_poly_derivative(n-1,f) + nth_poly_derivative(n-2,f)\ndef nth_poly_deri"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1))\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(n-k+1):\n        res = res*(i+1)\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # convert the input number to integer\n    n = int(n)\n    k = int(k)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    res=0\n    for i in range(n):\n        res=res+numbers[i]*(i+1)*(numbers[i]+1)\n        \n    return res\n    \n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_patt = r'^0+\\d+\\.'\n    return re.sub(zero_patt, '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_without_zeros = ''\n    for i in range(len(ip)):\n        if ip[i] == '0' and i > 0:\n            ip_without_zeros += ip[i-1]\n    return ip_without_zeros\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    n = len(ip)\n    for i in range(n):\n        if ip[i] == \"0\":\n            ip = ip[:i] + ip[i+1:]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = list(ip)\n    num[0] = 0\n    return ''.join(num)\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    print(ip)\n    zero_count = 0\n    empty_count = 0\n    for i in range(len(ip)):\n        if ip[i] == '0':\n            zero_count += 1\n        if zero_count == 3:\n            empty_count += 1\n            zero_count = 0\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Iterate through string and see if ip has a leading zero\n    for i in range(len(ip)):\n        if ip[i] == '0':\n            return ip[:i]\n    # If ip has no leading zero, return it\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.lstrip(\"0\")\n    zero = 0\n    # find the first zero\n    zero = ip.index(\"0\")\n    # find the last zero\n    if zero > 0:\n        zero = ip.index(\"0\")\n        # remove all leading zeros from the ip\n        ip = ip[:zero]\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.replace(\".\", \"\")\n    if ip.startswith(\"0.\"):\n        return ip\n    else:\n        return ip[1:]\ndef removezero_mac(mac):\n    '''\n    Write a function to remove leading zeroes from an mac address.\n    '''\n    mac = mac.replace(\".\", \"\")\n    if mac.startswith(\"00:\"):\n        return mac\n    else:\n        return mac[2:]\ndef removezero_name(name):\n    '''\n    Write a function to remove leading zeroes from an name.\n    '''\n    name = name.replace(\".\", \"\")\n    if name.startswith(\"0.\"):\n        return name\n    else:\n        return name[1:]\ndef removezero_date(date):\n    '''\n    Write a function to remove leading zeroes from an date.\n    '''\n    date = date.replace(\".\", \"\")\n    if date.startswith(\"0\"):\n        return date\n    else:\n        return date[1:]\ndef removezero_reason(reason):\n    '''\n    Write a function to remove leading zeroes from an reason.\n    '''\n    reason = reason.replace(\".\", \"\")\n    if reason.startswith(\"0.\"):\n        return reason\n    else:\n        return reason[1:]\ndef removezero_priority(priority):\n    '''\n    Write a function to remove leading zeroes from an priority.\n    '''\n    priority = priority.replace(\".\", \"\")\n    if priority.startswith(\"0\"):\n        return priority\n    else:\n        return priority[1:]\ndef removezero_url(url):\n    '''\n    Write a function to remove leading zeroes from an url.\n    '''\n    url = url.replace(\".\", \"\")\n    if url.startswith(\"0\"):\n        return url\n    else:\n        return url[1:]\ndef removezero_list(list):\n    '''\n    Write a function to remove leading zeroes from an list.\n    '''\n    return list[list.index(0):list.index(0)+1]\ndef removezero_value(value):\n    '''\n    Write a function to remove leading zeroes from an value.\n    '''\n    return value[value.index(0):value.index(0)+1]\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from an port.\n    '''\n    port = port.replace(\".\", \"\")\n    if port.startswith(\"0\"):\n        return port\n    else:\n        return port[1:]\ndef removezero_user(user):\n    '''\n    Write a function to remove leading zeroes from an user.\n    '''\n    user = user.replace(\".\", \"\")\n    if user.startswith(\"0\"):\n        return user\n    else:\n        return user[1:]\ndef removezero_pass(passwd):\n    '''\n    Write a function to remove leading zeroes from an passwd.\n    '''\n    passwd = passwd.replace(\".\", \"\")\n    if passwd.startswith(\"0\"):\n        return passwd\n    else:\n        return passwd[1:]\ndef removezero_host(host):\n    '''\n    Write a function to remove leading zeroes from an host.\n    '''\n    host = host.replace(\".\", \"\")\n    if host.startswith(\"0\"):\n        return host\n    else:\n        return host[1:]\ndef removezero_comment(comment):\n    '''\n    Write a function to remove leading zeroes from an comment.\n    '''\n    comment = comment.replace(\".\", \"\")\n    if comment.startswith(\"0\"):\n        return comment\n    else:\n        return comment[1:]\ndef removezero_hostname(hostname):\n    '''\n    Write a function to remove leading zeroes from an hostname.\n    '''\n    hostname = hostname.replace(\".\", \"\")\n    if hostname.startswith(\"0\"):\n        return hostname\n    else:\n        return hostname[1:]\ndef removezero_yaml(yaml):\n    '''\n    Write a function to remove leading zeroes from an yaml.\n    '''\n    yaml = yaml.replace(\".\", \"\")\n    if yaml.startswith(\"0\"):\n        return yaml\n    else:\n        return yaml[1:]\ndef removezero_hostname_yaml(hostname, yaml):\n    '''\n    Write a function to remove leading zeroes from an hostname and yaml.\n    '''\n    hostname = hostname.replace(\".\", \"\")\n    if hostname.startswith(\"0\"):\n        yaml = yaml.replace(\".\", \"\")\n        return hostname, yaml\n    else:\n        return hostname[1:], yaml[1:]\ndef removezero_hostname_url(hostname, url):\n    '''\n    Write a function to remove leading zeroes from an hostname and url.\n    '''\n    hostname = hostname.replace(\".\", \"\")\n    url = url.replace(\".\", \"\")\n    if hostname.startswith(\"0\"):\n        return hostname, url\n    else:\n        return hostname[1:], url[1:]\ndef removezero_url_yaml(url, yaml):\n    '''\n    Write a function to remove leading zeroes from an url and yaml.\n    '''\n    url = url.replace(\".\", \"\")\n    yaml = yaml.replace(\".\", \"\")\n    if url.startswith(\"0\"):\n        return url, yaml\n    else:\n        return url[1:], yaml[1:]\ndef removezero_url_image(url, image):\n    '''\n    Write a function to remove leading zeroes from an url and image.\n    '''\n    url = url.replace(\".\", \"\")\n    image = image.replace(\".\", \"\")\n    if url.startswith(\"0\"):\n        return url, image\n    else:\n        return url[1:], image[1:]\ndef removezero_comment_yaml(comment, yaml):\n    '''\n    Write a function to remove leading zeroes from an comment and yaml.\n    '''\n    comment = comment.replace(\".\", \"\")\n    yaml = yaml.replace(\".\", \"\")\n    if comment.startswith(\"0\"):\n        return comment, yaml\n    else:\n        return comment[1:], yaml[1:]\ndef removezero_comment_image(comment, image):\n    '''\n    Write a function to remove leading zeroes from an comment and image.\n    '''\n    comment = comment.replace(\".\", \"\")\n    image = image.replace(\".\", \"\")\n    if comment.startswith(\"0\"):\n        return comment, image\n    else:\n        return comment[1:], image[1:]\ndef removezero_url_image(url, image):\n    '''\n    Write a function to remove leading zeroes from an url and image.\n    '''\n    url = url.replace(\".\", \"\")\n    image = image.replace(\".\", \"\")\n    if url.startswith(\"0\"):\n        return url, image\n    else:\n        return url[1:], image[1:]\ndef removezero_comment_image(comment, image):\n    '''\n    Write a function to remove leading zeroes from an comment and image.\n    '''\n    comment = comment.replace(\".\", \"\")\n    image = image.replace(\".\", \"\")\n    if comment.startswith(\"0\"):\n        return comment, image\n    else:\n        return comment[1:], image[1:]\ndef removezero_host_ip(host_ip):\n    '''\n    Write a function to remove leading zeroes from an host ip.\n    '''\n    host_ip = host_ip.replace(\".\", \"\")\n    if host_ip.startswith(\"0\"):\n        return host_ip\n    else:\n        return host_ip[1:]\ndef removezero_host_mac(host_mac):\n    '''\n    Write a function to remove leading zeroes from an host mac.\n    '''\n    host_mac = host_mac.replace(\".\", \"\")\n    if host_mac.startswith(\"0"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # 1. Split the string into a list of chars\n    str_list = ip.split('.')\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=ip.replace(' ','')\n    return ip.strip(',. ')\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    n=len(list1)\n    if n==0:\n        return \"We can't take even numbers\"\n    else:\n        if n%2==0:\n            return list1[0]-list1[n//2]\n        else:\n            return list1[0]-list1[n//2]+list1[n//2+1]\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_number = len(list1)\n    even_number = len(list1)\n    even_odd_list = []\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = []\n    for item in list1:\n        if item%2 == 0:\n            even_odd.append(item)\n        else:\n            pass\n    return even_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd=[]\n    even=[]\n    for i in range(len(list1)):\n        if i%2==0:\n            odd.append(list1[i])\n        else:\n            even.append(list1[i])\n    return odd,even\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    output = []\n    for number in list1:\n        if number % 2 == 0:\n            output.append(number)\n        else:\n            output.append(number)\n    return output\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0:2]\n    odd = list1[2:4]\n    print(\"The first even number is\",even)\n    print(\"The first odd number is\",odd)\n    if len(list1)%2 == 0:\n        return(list1[len(list1)//2-1]+list1[len(list1)//2])\n    else:\n        return(list1[len(list1)//2])\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    print(\"Echo list is:\", list1)\n    x = list1[1]\n    y = list1[0]\n    print(\"The difference of the first even and first odd number is:\", x-y)\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = list1[0] - list1[-1]\n    for i in range(1, len(list1)):\n        if list1[i] % 2 == 0:\n            diff = diff + list1[i]\n        else:\n            diff = diff + list1[i]\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # your code here\n    return\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_numbers = 0\n    even_numbers = 0\n    for number in list1:\n        if (number % 2 == 0):\n            even_numbers += 1\n        else:\n            odd_numbers += 1\n    return even_numbers - odd_numbers\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    N = len(str1)\n    M = len(str2)\n    if N!= M : return -1\n    swaps = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if not str1:\n        return 0\n    if not str2:\n        return 0\n    s1 = list(str1)\n    s2 = list(str2)\n    m = len(s1)\n    n = len(s2)\n    minSwaps = 0\n    \n    def count_swaps(s1,s2):\n        swaps = 0\n        s1 = list(s1)\n        s2 = list(s2)\n        i = 0\n        j = 0\n        while i < m and j < n:\n            if s1[i]!= s2[j]:\n                if s1[i] == '0' and s2[j] == '1':\n                    i += 1\n                elif s1[i] == '1' and s2[j] == '0':\n                    i += 1\n                elif s1[i] == '0' and s2[j] == '1':\n                    j += 1\n                elif s1[i] == '1' and s2[j] == '0':\n                    j += 1\n                else:\n                    print('ERROR')\n                    exit()\n            else:\n                i += 1\n                j += 1\n                swaps += 1\n        return swaps\n    \n    def swap(s1,s2):\n        swaps = 0\n        s1 = list(s1)\n        s2 = list(s2)\n        i = 0\n        j = 0\n        while i < m and j < n:\n            if s1[i]!= s2[j]:\n                if s1[i] == '0' and s2[j] == '1':\n                    swaps += 1\n                    i += 1\n                elif s1[i] == '1' and s2[j] == '0':\n                    swaps += 1\n                    i += 1\n                elif s1[i] == '0' and s2[j] == '1':\n                    swaps += 1\n                    j += 1\n                elif s1[i] == '1' and s2[j] == '0':\n                    swaps += 1\n                    j += 1\n                else:\n                    print('ERROR')\n                    exit()\n            else:\n                i += 1\n                j += 1\n        return swaps\n        \n    i = 0\n    j = 0\n    k = 0\n    while i < m and j < n:\n        if s1[i] == s2[j]:\n            swaps += count_swaps(s1,s2)\n            i += 1\n            j += 1\n        else:\n            k = k + 1\n            print('ERROR')\n            print(f'{k}')\n            exit()\n    return minSwaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    for i in range(0, len(str1)):\n        for j in range(0,len(str2)):\n            if str1[i] == str2[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    c=0\n    d={'1':'0','0':'1'}\n    for i in str1:\n        for j in str2:\n            if i == j :\n                continue\n            else:\n                if d[i]==d[j] :\n                    c=c+1\n                else :\n                    break\n    return c\n        \n    \n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #taking input\n    n=int(input())\n    #converting binary number to string\n    str1=input()\n    str2=input()\n    #initialising count\n    swaps=0\n    #iterate through the string\n    for i in range(0,len(str1)-1):\n        if str1[i]!=str2[i]:\n            swaps+=1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)>len(str2): \n        return len(str2)-len(str1) \n    else: \n        return len(str1)-len(str2) \ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to find maximum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)>len(str2): \n        return len(str2)-len(str1) \n    else: \n        return len(str1)-len(str2) \ndef swap(a,b,c) : \n    '''\n    Write a python function to swap two elements of a binary number represented as a string.\n    '''\n    a=a[::-1] \n    b=b[::-1] \n    c=c[::-1] \n    return a+b+c\ndef reverse(a) : \n    '''\n    Write a python function to reverse the elements of a binary number represented as a string.\n    '''\n    a=a[::-1] \n    return a \ndef str_comp(str1,str2) : \n    '''\n    Write a python function to check whether two binary numbers are equal or not.\n    '''\n    if len(str1)==len(str2) : \n        return True\n    else: \n        return False \ndef add_letters(str1,str2) : \n    '''\n    Write a python function to add the letters of two binary numbers represented as strings into a binary number represented as a string.\n    '''\n    str1=str1[::-1] \n    str2=str2[::-1] \n    a=str1+str2\n    return a\ndef concat_string(str1,str2) : \n    '''\n    Write a python function to add the characters from two binary numbers represented as strings into a binary number represented as a string.\n    '''\n    str1=str1[::-1] \n    str2=str2[::-1] \n    a=str1+str2\n    return a\ndef reverse_string(str1) : \n    '''\n    Write a python function to reverse the elements of a binary number represented as a string.\n    '''\n    str1=str1[::-1] \n    return str1 \ndef int_convert(str1) : \n    '''\n    Write a python function to convert a binary number represented as a string to an integer.\n    '''\n    a=int(str1,2) \n    return a \ndef string_length(str1) : \n    '''\n    Write a python function to determine the length of a binary number represented as a string.\n    '''\n    a=len(str1) \n    return a \ndef print_tables(a,b,c,d,e,f,g,h) : \n    '''\n    Write a python function to print the tables to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a+b+c+d+e+f+g+h) \ndef print_table_1(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a) \ndef print_table_2(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1]) \ndef print_table_3(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1]) \ndef print_table_4(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1]) \ndef print_table_5(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1]) \ndef print_table_6(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1][::-1]) \ndef print_table_7(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1][::-1][::-1]) \ndef print_table_8(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1][::-1][::-1][::-1]) \ndef print_table_9(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]) \ndef print_table_10(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]) \ndef print_table_11(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]) \ndef print_table_12(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]) \ndef print_table_13(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]) \ndef print_table_14(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1][::-1][::-1][::-1]) \ndef print_table_15(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    print(a[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]) \ndef print_table_16(a) : \n    '''\n    Write a python function to print the table to print the minimum number of swaps required to convert one binary number represented a"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            c += 1\n    return c\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    \n    # create empty dictionary\n    dictionary = {}\n    \n    # iterate through each character in string\n    for i in range(len(str1)) :\n        \n        # check if the char in the string is in dictionary\n        if str1[i] in dictionary :\n            # check if the key is in dictionary\n            if str2[i] in dictionary[str1[i]] :\n                # add a swap to dictionary\n                dictionary[str1[i]].append(str2[i])\n                \n                # delete from dictionary\n                del dictionary[str1[i]]\n                \n            else :\n                dictionary[str1[i]] = [str2[i]]\n                \n        else :\n            # add key to dictionary\n            dictionary[str1[i]] = [str2[i]]\n            \n    # if the string is not in dictionary\n    if len(dictionary)!= 0 :\n        # print(dictionary)\n        \n        # count the number of swaps\n        count = 0\n        \n        # iterate through each key in dictionary\n        for i in dictionary :\n            # if the key is in dictionary\n            if len(dictionary[i])!= 0 :\n                # for each item in the list of the key, check if there is a jump\n                for j in dictionary[i] :\n                    \n                    # create a sub string of the list\n                    sub_str = str1[i:j]\n                    \n                    # if list is empty\n                    if len(sub_str) == 0 :\n                        # set count to zero\n                        count = count + 0\n                        \n                    # if it is not empty\n                    else :\n                        \n                        # check if the next character in the sub_str is in dictionary\n                        if sub_str in dictionary :\n                            # create list of jumps\n                            list_of_jumps = dictionary[sub_str]\n                            \n                            # if there is a jump\n                            if len(list_of_jumps)!= 0 :\n                                # delete the jump from the list\n                                dictionary[sub_str].remove(j)\n                                \n                                # count the number of jumps\n                                count = count + len(list_of_jumps)\n                                \n                        # if not\n                        else :\n                            count = count + 1\n            \n        \n        return count\n    else :\n        return 0\n    \n    # if the string is not in dictionary\n    if len(dictionary)!= 0 :\n        # print(dictionary)\n        \n        # count the number of swaps\n        count = 0\n        \n        # iterate through each key in dictionary\n        for i in dictionary :\n            # if the key is in dictionary\n            if len(dictionary[i])!= 0 :\n                # for each item in the list of the key, check if there is a jump\n                for j in dictionary[i] :\n                    \n                    # create a sub string of the list\n                    sub_str = str1[i:j]\n                    \n                    # if list is empty\n                    if len(sub_str) == 0 :\n                        # set count to zero\n                        count = count + 0\n                        \n                    # if it is not empty\n                    else :\n                        \n                        # check if the next character in the sub_str is in dictionary\n                        if sub_str in dictionary :\n                            # create list of jumps\n                            list_of_jumps = dictionary[sub_str]\n                            \n                            # if there is a jump\n                            if len(list_of_jumps)!= 0 :\n                                # delete the jump from the list\n                                dictionary[sub_str].remove(j)\n                                \n                                # count the number of jumps\n                                count = count + len(list_of_jumps)\n                                \n                        # if not\n                        else :\n                            count = count + 1\n    \n        # if the string is not in dictionary\n        if len(dictionary)!= 0 :\n            # print(dictionary)\n            \n            # count the number of swaps\n            count = 0\n            \n            # iterate through each key in dictionary\n            for i in dictionary :\n                # if the key is in dictionary\n                if len(dictionary[i])!= 0 :\n                    # for each item in the list of the key, check if there is a jump\n                    for j in dictionary[i] :\n                        \n                        # create a sub string of the list\n                        sub_str = str1[i:j]\n                        \n                        # if list is empty\n                        if len(sub_str) == 0 :\n                            # set count to zero\n                            count = count + 0\n                            \n                        # if it is not empty\n                        else :\n                            \n                            # check if the next character in the sub_str is in dictionary\n                            if sub_str in dictionary :\n                                # create list of jumps\n                                list_of_jumps = dictionary[sub_str]\n                                \n                                # if there is a jump\n                                if len(list_of_jumps)!= 0 :\n                                    # delete the jump from the list\n                                    dictionary[sub_str].remove(j)\n                                    \n                                    # count the number of jumps\n                                    count = count + len(list_of_jumps)\n                                    \n                                # if not\n                                else :\n                                    count = count + 1\n            \n        return count\n    else :\n        return 0\n    \n    # if the string is not in dictionary\n    if len(dictionary)!= 0 :\n        # print(dictionary)\n        \n        # count the number of swaps\n        count = 0\n        \n        # iterate through each key in dictionary\n        for i in dictionary :\n            # if the key is in dictionary\n            if len(dictionary[i])!= 0 :\n                # for each item in the list of the key, check if there is a jump\n                for j in dictionary[i] :\n                    \n                    # create a sub string of the list\n                    sub_str = str1[i:j]\n                    \n                    # if list is empty\n                    if len(sub_str) == 0 :\n                        # set count to zero\n                        count = count + 0\n                        \n                    # if it is not empty\n                    else :\n                        \n                        # check if the next character in the sub_str is in dictionary\n                        if sub_str in dictionary :\n                            # create list of jumps\n                            list_of_jumps = dictionary[sub_str]\n                            \n                            # if there is a jump\n                            if len(list_of_jumps)!= 0 :\n                                # delete the jump from the list\n                                dictionary[sub_str].remove(j)\n                                \n                                # count the number of jumps\n                                count = count + len(list_of_jumps)\n                                \n                        # if not\n                        else :\n                            count = count + 1\n            \n        \n        return count\n    else :\n        return 0\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    N1=len(str1)\n    N2=len(str2)\n    str1=bin(int(str1))\n    str1=list(str1)\n    str2=bin(int(str2))\n    str2=list(str2)\n    str1[N1-1]='1'\n    str2[N1-1]='0'\n    \n    i=0\n    j=0\n    while i<len(str1) and j<len(str2):\n        if str1[i]==str2[j]:\n            i=i+1\n            j=j+1\n        else:\n            i=i+1\n            j=j+1\n            \n    if i<len(str1) and j<len(str2):\n        if str1[i]=='1' and str2[j]=='0':\n            j=j-1\n            i=i+1\n        elif str2[j]=='1' and str1[i]=='0':\n            i=i-1\n            j=j-1\n    if i<len(str1) and j<len(str2):\n        if str2[j]=='0' and str1[i]=='1':\n            j=j-1\n            i=i+1\n        elif str1[i]=='0' and str2[j]=='1':\n            i=i-1\n            j=j-1\n    i=i+1\n    j=j+1\n    \n    if i<len(str1) and j<len(str2):\n        if str1[i]=='1' and str2[j]=='0':\n            i=i+1\n            j=j+1\n        elif str2[j]=='1' and str1[i]=='0':\n            i=i-1\n            j=j+1\n        elif str1[i]=='1' and str2[j]=='1':\n            i=i-1\n            j=j-1\n    \n    \n    if i<len(str1) and j<len(str2):\n        if str1[i]=='0' and str2[j]=='0':\n            i=i+1\n            j=j+1\n        elif str2[j]=='0' and str1[i]=='0':\n            i=i-1\n            j=j+1\n    \n    if i<len(str1) and j<len(str2):\n        if str1[i]=='0' and str2[j]=='1':\n            i=i+1\n            j=j+1\n        elif str2[j]=='0' and str1[i]=='0':\n            i=i-1\n            j=j+1\n    \n    return (i-1,j-1)\n    \n    \n    \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Code here\n    size = 0\n    for element in tuple_list:\n        size+=sys.getsizeof(element)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = 0\n    for i in tuple_list:\n        size_of_tuple = size_of_tuple + sys.getsizeof(i)\n    return size_of_tuple\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import struct\n    # int = struct.calcsize(\"d\")\n    # d = struct.calcsize(\"f\")\n    # int_size = struct.calcsize(\"i\")\n    # float_size = struct.calcsize(\"f\")\n    # bool_size = struct.calcsize(\"i\")\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += item.__sizeof__()\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    x = 0\n    for el in tuple_list:\n        x += len(el)\n    return x\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for item in tuple_list:\n        count += len(item)\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    return sys.getsizeof(tuple_list)\n    "
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    i = 0\n    size = 0\n    for elem in tuple_list:\n        size += (len(str(elem)) + 1)\n        i += 1\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            print(i,j)\n    return \n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find index of first element in the sorted array\n    index1 = 0\n    for i in range(len(arr1)):\n        if arr1[i] < arr2[index1]:\n            index1 += 1\n        elif arr1[i] > arr2[index1]:\n            index1 -= 1\n        if index1 >= 0 and index1 < len(arr1):\n            break\n    \n    # Find index of second element in the sorted array\n    index2 = 0\n    for i in range(len(arr2)):\n        if arr2[i] < arr1[index2]:\n            index2 += 1\n        elif arr2[i] > arr1[index2]:\n            index2 -= 1\n        if index2 >= 0 and index2 < len(arr2):\n            break\n    \n    return arr1[index1 + k - 1]\n    \ndef check_div(arr1, arr2):\n    '''\n    Find whether there are any even numbers in arr1 and arr2.\n    '''\n    for i in arr1:\n        if i % 2 == 0:\n            return False\n    for i in arr2:\n        if i % 2 == 0:\n            return False\n    return True\n    \n    \ndef find_fib(arr1, arr2):\n    '''\n    Find the first element in arr1 which is a fibonacci number and return it.\n    '''\n    # Find index of first element in the sorted array\n    index = 0\n    for i in range(len(arr1)):\n        if arr1[i] > arr2[index]:\n            index += 1\n        if index == len(arr2):\n            return arr1[i]\n    \n    \ndef find_fib_kth(arr1, arr2, k):\n    '''\n    Find the first element in arr1 which is a fibonacci number and return it.\n    '''\n    return find_fib(arr1, arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr1) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr1[mid] == arr2[mid]:\n            return arr1[mid]\n        elif arr1[mid] > arr2[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # find the position of the kth element\n    # if the array contains multiple elements\n    # then we return the first element\n    # else we return the second element\n    if len(arr1) < 2 or len(arr2) < 2:\n        return arr1[k-1] if k > 0 else arr2[k-1]\n    \n    # we have to find the position of the last element\n    # where kth element is to be found\n    if k == 1:\n        return arr1[0]\n    \n    # the first element is the kth element from the array\n    # if the element is the kth element then\n    # the return first element is the kth element\n    if arr1[0] <= arr2[0]:\n        return arr1[0]\n    \n    # if the last element is the kth element then\n    # the return last element is the kth element\n    return arr2[0]\n    \n    \n    \n    # if k > n then return the last element\n    # if k = 0 then return the first element\n    # if k < 1 then return the second element\n    if k > len(arr1) or k < 0:\n        return arr2[0]\n    \n    # if the kth element is the last element then\n    # return the last element\n    return arr1[len(arr1)-1]\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    index = len(arr1) - 1\n    while index >= 0:\n        if arr1[index] < arr2[k - 1]:\n            index -= 1\n        else:\n            if index == 0:\n                return arr1[index]\n            elif arr1[index] == arr2[k - 1]:\n                index -= 1\n                break\n            else:\n                index -= 1\n    return arr2[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    #check if list 1 is empty or not\n    if len(arr1) == 0 or len(arr2) == 0:\n        return -1\n    \n    # if arr1[k] > arr2[k] return arr1[k]\n    # if arr1[k] < arr2[k] return arr2[k]\n    # if arr1[k] < arr2[k] return arr2[k]\n    # if arr1[k] > arr2[k] return arr1[k]\n    \n    # if len(arr1) > k:\n    #     return arr1[k]\n    # elif len(arr2) > k:\n    #     return arr2[k]\n    \n    # if k == 0:\n    #     return arr1[k]\n    # elif k == len(arr1):\n    #     return arr2[k]\n    # elif k == len(arr2):\n    #     return arr2[k]\n    \n    # if k >= 0:\n    #     if arr1[k] > arr2[k]:\n    #         return arr1[k]\n    #     elif arr1[k] < arr2[k]:\n    #         return arr2[k]\n    #     elif arr1[k] == arr2[k]:\n    #         return arr1[k]\n    # return arr2[k]\n    # return arr1[k]\n    # return arr2[k]\n    \n    # Check for two sorted sub-arrays\n    if arr1[k] < arr2[k]:\n        return find_kth(arr1[k:k+1], arr2, k)\n    else:\n        return find_kth(arr1, arr2[k:k+1], k)\n    \n    \n    \n    # # if len(arr1) > 0 and k <= 0:\n    # #     return arr1[k]\n    # # if len(arr1) > 0 and k > 0:\n    # #     return arr1[k]\n    # # if len(arr1) > 0 and k >= 0:\n    # #     return arr1[k]\n    # # if len(arr1) < 0 and k <= 0:\n    # #     return arr2[k]\n    # # if len(arr1) < 0 and k > 0:\n    # #     return arr2[k]\n    # # if len(arr1) < 0 and k >= 0:\n    # #     return arr2[k]\n    \n    # # return arr1[k] if len(arr1) > 0 else arr2[k]\n    # if k >= 0:\n    #     if arr1[k] > arr2[k]:\n    #         return arr1[k]\n    #     elif arr1[k] < arr2[k]:\n    #         return arr2[k]\n    #     elif arr1[k] == arr2[k]:\n    #         return arr1[k]\n    # return arr2[k]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the first kth element\n    l = 0\n    r = len(arr1)-1\n    while l <= r:\n        mid = l + (r - l)//2\n        if arr1[mid] < arr2[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    if k > l:\n        return arr2[k]\n    else:\n        return arr1[k]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def compare(arr1, arr2, k):\n        i = 0\n        j = len(arr1) - 1\n        while i <= j:\n            mid = (i + j) // 2\n            if arr1[mid] < arr2[mid]:\n                i = mid + 1\n            else:\n                j = mid - 1\n        if k == i:\n            return arr1[k]\n        elif k == j:\n            return arr2[k]\n        else:\n            return arr1[k] if arr1[k] < arr2[k] else arr2[k]\n    \n    return compare(arr1, arr2, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k >= len(arr1) or k >= len(arr2):\n        return -1\n    \n    left = 0\n    right = len(arr1)-1\n    while left <= right:\n        mid = (left + right)//2\n        if arr1[mid] <= arr2[k]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return arr1[left]\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def sort(arr):\n        for i in range(len(arr)):\n            arr.sort(reverse=True)\n            return arr[i]\n    # Find the kth element\n    for i in range(len(arr1)):\n        if k == 1:\n            return arr1[i]\n        if k == arr1.index(arr1[i]):\n            return arr1[i]\n        else:\n            k -= 1\n    # If k is smaller than the length of arr1, return the next kth element\n    if k < len(arr1):\n        return sort(arr1[arr1.index(arr1[k]) + 1:])\n    # If k is greater than the length of arr1, return the last kth element\n    else:\n        return sort(arr1[0:arr1.index(arr1[k]) + 1])\n    \n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # if array has only one element\n    if len(arr1) <= 1:\n        return arr1[k-1]\n    # if array has more than one element\n    if len(arr2) <= 1:\n        return arr2[k-1]\n    \n    # find the mid point\n    mid = (len(arr1) + len(arr2)) // 2\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    count = 0\n    numbers = [3, 7, 9]\n    for i in range(1, number):\n        total += i\n        count += 1\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number)) < len(str(number)[::-1]):\n        return False\n    else:\n        k = len(str(number))//2\n        a = int(str(number)[::-1][k:])\n        for i in range(k, len(str(number))):\n            if int(str(number)[::-1][i])!= a:\n                return False\n        return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    strong = 0\n    number = abs(number)\n    count = 0\n    if number < 10:\n        return \"Number is less than 10\"\n    elif number < 1000:\n        return \"The number is smaller than 1000\"\n    elif number < 100000:\n        return \"The number is smaller than 100000\"\n    else:\n        while count < number:\n            first = int(number % 10)\n            second = int(count / 10)\n            count = int(count % 10)\n            temp = first\n            first = second\n            second = temp\n            temp = first\n            if temp == first:\n                break\n        if temp == first:\n            return \"Armstrong\"\n        else:\n            return \"Not Armstrong\"\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = 0\n    number = int(number)\n    for i in range(number):\n        s += 1\n        if number % s == 0:\n            return False\n    return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    temp = number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Loop through every digit\n    for i in str(number):\n        # Check every digit\n        for j in range(len(i)):\n            # Check every letter\n            for k in i:\n                # Check if the letter is lowercase\n                if k.islower():\n                    # If it is, add 1 to the count\n                    if i.count(k) == len(i):\n                        # If the count is equal to the length of the string, the number is strong\n                        if j == len(i)-1:\n                            return True\n                        else:\n                            return False\n                    # If not, add 1 to the count\n                    else:\n                        # If the count is less than the length of the string, the number is not strong\n                        if j == len(i)-1:\n                            return False\n                        else:\n                            return True\n    # Return the boolean\n    return True\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    count = 0\n    num_list = []\n    num_list.append(int(number))\n    while(num_list):\n        first_num = num_list[0]\n        if(first_num == 0):\n            break\n        for i in range(len(num_list)):\n            remainder = num_list[i] % 10\n            if(remainder == first_num):\n                count += 1\n            else:\n                break\n        if(count == len(num_list)-1):\n            print(\"Armstrong Number\")\n            return True\n        num_list.pop(0)\n        count = 0\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_string = str(number)\n    number_len = len(number_string)\n    result = 0\n    counter = 0\n    for i in range(0, number_len):\n        result += int(number_string[i]) * (pow(10, counter))\n        counter += 1\n    return result == number\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = int(number)\n    str_num = str(number)\n    count = 0\n    for i in range(len(str_num)):\n        remainder = number % 10\n        count += remainder\n        number = number // 10\n    if count == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = number\n    while (num!= 0):\n        num, temp = divmod(num, 10)\n        sum += temp\n    \n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    print(\"The sum of the natural numbers is:\", sum(range(1, number + 1)))\n    print(\"The average of the numbers is:\", (sum(range(1, number + 1)) / number))\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    average = 0\n    for i in range(1,number+1):\n        sum_of_numbers += i\n    average = sum_of_numbers/number\n    return sum_of_numbers, average\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    number = int(number)\n    for i in range(1, number + 1):\n        sum += i\n    average = sum/number\n    return (sum, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1,number+1):\n        number = int(input())\n        sum += number\n        count += 1\n    average = sum / count\n    return round(average,2)\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(number):\n        num = int(input('Enter an integer: '))\n        total += num\n        count += 1\n        if count > 0:\n            average = total / count\n            print(f'Sum of {count} numbers is {total}')\n            print(f'Average is {average}')\n    print(f'Total Sum of {count} numbers is {total}')\n    print(f'Average is {average}')\n    print()\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n    sum += number\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count\n        count += 1\n    avg = sum/n\n    return f\"Sum: {sum}\\nAverage: {avg}\"\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = len(number)\n    if n < 2:\n        return 'Please enter an even number'\n    sum = 0\n    for i in range(1, n):\n        sum += number[i]\n    average = sum / n\n    return f'{number} = {sum} + {average}'\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for x in range(0,number+1):\n        sum = sum+x\n    avg = sum/number\n    return sum,avg\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum/number\n    return average\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #pass #remove this line\n    if n % 2 == 0 :\n        return True\n    else:\n        return False\n    #pass #remove this line\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : return True\n    else : return False\n    \n    \nprint(is_Even(8))\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2 == 1 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) : \n        print(\"The number is even\")\n        return True\n    else :\n        print(\"The number is odd\")\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # YOUR CODE HERE\n    if n%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str_count = 0\n    str_list = []\n    \n    for i in str1:\n        if i in str_list:\n            str_list.append(i)\n            str_count += 1\n        else:\n            str_list.append(i)\n    \n    print(f'The first repeated character in {str1} is {str_count}')\n    print('The first repeated character in the string is', end=' ')\n    for i in range(str_count):\n        print(str_list[i], end=' ')\n    \n    return str_count\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if str1[i] == str1[i-1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] = freq_dict[char] + 1\n        else:\n            freq_dict[char] = 1\n    for char, count in freq_dict.items():\n        if count == 1:\n            return char\n    return None\n    "
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count_dict = dict()\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n    for key in count_dict:\n        if count_dict[key] == 1:\n            return key\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # your code here\n    # str1_list = list(str1)\n    # first_char = str1_list.pop(0)\n    # second_char = str1_list.pop(0)\n    # count = 0\n    # for i in range(len(str1)):\n    #     if str1[i] == first_char:\n    #         count += 1\n    #         if count == 1:\n    #             return first_char\n    # return \"no repeated character\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #HashTable to store the frequency\n    dict = {}\n    \n    #Loop through the string\n    for i in range(len(str1)):\n        if str1[i] in dict:\n            dict[str1[i]] += 1\n        else:\n            dict[str1[i]] = 1\n        \n    #Print the character in dict\n    for key in dict:\n        print(key)\n    \n    #Return the first character in dict\n    print(dict[str1[0]])\n    \n    return dict[str1[0]]\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    res = ''\n    arr = []\n    for c in str1:\n        if c not in arr:\n            arr.append(c)\n        else:\n            arr.remove(c)\n            res += c\n    return res\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    my_dict = {}\n    count = 0\n    for i in str1:\n        if i in my_dict:\n            my_dict[i] += 1\n            if my_dict[i] == 1:\n                count += 1\n        else:\n            my_dict[i] = 1\n    return count\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    import re\n    for i in range(len(str1)):\n        if str1[i] == str1[i+1]:\n            return i\n        return str1.count(str1[i])\n    return str1\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc = list()\n    for x in range(n+1):\n        if x >= 10:\n            if x%10 < 5:\n                luc.append(x)\n            elif x%10 >= 1 and x%10 < 9:\n                luc.append(x)\n            elif x%10 >= 2 and x%10 < 6:\n                luc.append(x)\n            else:\n                luc.append(x)\n    return luc\n    "
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(n):\n        if ludic_list.count(i) < 1:\n            ludic_list.append(i)\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucides = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            lucides.append(i)\n    return lucides\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(range(1,n+1))\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        if i <= 2:\n            ludic.append(i)\n        else:\n            for j in range(2, i+1):\n                if j <= n:\n                    ludic.append(j)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(0, n):\n        if i < 10:\n            ludic.append(i)\n        elif i < 100:\n            ludic.append(i / 10)\n        elif i < 1000:\n            ludic.append(i / 100)\n        elif i < 10000:\n            ludic.append(i / 1000)\n        elif i < 100000:\n            ludic.append(i / 100000)\n        else:\n            ludic.append(i / 10000000)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        ludic.append(i)\n    for i in ludic:\n        if i % 2 == 0:\n            pass\n        else:\n            ludic.remove(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [n for n in range(n+1) if n % 10 < 5]\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    i = 0\n    while True:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3\n            \n        i += 1\n        if n < 10:\n            print(n, end=\" \")\n        else:\n            print(n)\n        \n        if n == 10:\n            break\n        \n    return i\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    for i in range(1,n+1):\n        if i <10:\n            lucid_list.append(i)\n        elif i<100:\n            lucid_list.append(10*i)\n        elif i<1000:\n            lucid_list.append(10*i+1)\n        elif i<10000:\n            lucid_list.append(10*i+2)\n        elif i<100000:\n            lucid_list.append(10*i+3)\n        else:\n            lucid_list.append(i)\n    return lucid_list\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.replace(\" \", \"\")\n    if len(s) <= 1:\n        return s\n    \n    i = len(s)-1\n    \n    while i >= 0:\n        temp = s[i]\n        j = i - 1\n        while j >= 0:\n            s[j] = s[j+1]\n            j -= 1\n        \n        s[j+1] = temp\n        i -= 1\n    \n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    result = []\n    \n    def reverse_word(str):\n        # go through the string\n        for c in str:\n            # if the char is a space, ignore it.\n            if c =='': continue\n            # add the char to the result list\n            result.append(c)\n        # remove the last word in the list\n        result.pop()\n        \n    # get the length of the string\n    size = len(s)\n    \n    # fill the list with the characters\n    for i in range(size):\n        reverse_word(s[i:])\n    \n    # join the strings back together\n    return''.join(result)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    s = [s[i] for i in range(len(s))]\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # First, make a variable that will contain the reversed string\n    reversed_string = \"\"\n    # Iterate through the given string \n    for i in range(len(s)):\n        # If the current letter is a space, remove it from the string \n        if s[i] == \" \":\n            continue\n        # If it is a letter, add it to the reversed string\n        else:\n            reversed_string += s[i]\n    # Return the string with the reversed words \n    return reversed_string\n    \n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return reverse_words_helper(s, 0, len(s)-1)\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    r=''\n    for i in s:\n        if i in'':\n            r+=i\n    return r\n    \n    \ns=input('Enter a string:')\ns=s.lower()\ns=s.split()\nprint(reverse_words(s))"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse(s):\n        if s == '':\n            return ''\n        else:\n            return s[0] + reverse(s[1:])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.strip().split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # iterate over string\n    for word in s.split():\n        # reverse the word\n        word = word[::-1]\n        # add word to a list\n        l.append(word)\n    \n    return''.join(l)\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime = True\n    for num in range(2, num):\n        if (num % 2 == 0):\n            prime = False\n            break\n    if (prime == True):\n        print(\"{} is a prime number\".format(num))\n    else:\n        print(\"{} is not a prime number\".format(num))\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,num):\n        if(num % i) == 0:\n            return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    isPrime = True\n    for n in range(2, num):\n        if num % n == 0:\n            isPrime = False\n            break\n    return isPrime\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    isprime = True\n    for i in range(2,num):\n        if num%i==0:\n            isprime = False\n            break\n    if isprime == True:\n        print(\"Yes, \" + str(num) + \" is a prime number\")\n    else:\n        print(\"No, \" + str(num) + \" is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime = True\n    for num in range(2, num):\n        if num!= 1:\n            for x in range(2, num):\n                if num % x == 0:\n                    prime = False\n                    break\n            if prime:\n                print(num, 'is not a prime number')\n                break\n    else:\n        print(num, 'is a prime number')\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for n in range(2,num):\n        if (num%n) == 0:\n            return False\n    return True\n    \nprint(prime_num(int(input())))\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    \n    for i in range(3, num, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num == 5:\n        return False\n    if num == 7:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi / 180)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree <= 0:\n        raise ValueError(\"degree must be positive\")\n    result = (degree * math.pi / 180)\n    return result\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * (math.pi / 180)\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree *(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree % 360\n    radian = degree/360 * math.pi\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree * (math.pi / 180)\n    return radian_degree\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match is not None:\n        start_index = match.start(1)\n        end_index = match.end(1)\n        substring = text[start_index:end_index]\n        return substring, start_index, end_index\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        pattern = pattern.replace(\"[^a-zA-Z0-9]+\", \" \")\n        pattern = pattern.replace(\"[a-zA-Z0-9]+\", \" \")\n        pattern = pattern.replace(\"[^a-zA-Z0-9 ]+\", \" \")\n        pattern = re.sub(pattern, \" \", text)\n        pattern = pattern.lower()\n        pattern = re.sub('\\s','', pattern)\n        pattern = re.sub('\\d', '', pattern)\n        pattern = pattern.replace(\":\", \" \")\n        pattern = pattern.replace(\" \", \"\")\n        pattern = pattern.replace(\"\\n\", \" \")\n        pattern = pattern.replace(\"\\t\", \" \")\n        pattern = pattern.replace(\"\\r\", \" \")\n        pattern = pattern.replace(\"\\n\", \" \")\n        pattern = pattern.replace(\"\\v\", \" \")\n        pattern = re.sub(\"\\s\\s\", \" \", pattern)\n        pattern = re.sub('(\\d)', '\\g<1>', pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1> \\\\g<2> \\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.sub('(\\d{3})([A-Za-z]+)(\\d{4})', \"\\\\g<1>\\\\g<2>\\\\g<3>\", pattern)\n        pattern = re.su"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # YOUR CODE HERE\n    match = re.findall(pattern, text)\n    return match\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match_iter = re.finditer(pattern, text)\n    \n    start = 0\n    end = 0\n    while True:\n        for match in match_iter:\n            if match.start() >= end:\n                end = match.start()\n            else:\n                match_iter.stop()\n                break\n        else:\n            break\n        for match in match_iter:\n            start = match.start()\n            if match.end() <= end:\n                end = match.end()\n            else:\n                match_iter.stop()\n                break\n    return start, end, match_iter.start(), match_iter.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find the first match of the pattern in the string\n    matches = pattern.findall(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #\n    # First let's write a regex pattern to find the match\n    #\n    match = re.search(pattern, text)\n    return match\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    def search(text, pattern):\n        start, end = 0, len(pattern)\n        while start < end:\n            mid = start + (end - start) // 2\n            if pattern[mid] in text:\n                end = mid\n            else:\n                start = mid + 1\n        return start, end\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # YOUR CODE HERE\n    # TO-DO\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.findall(pattern, text)\n    if match == None:\n        return None\n    return match\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if len(pattern) == 0:\n        return '', 0, 0\n    if pattern[0] == '\\\\':\n        pattern = pattern[1:]\n        if pattern[0] == '\\\\':\n            pattern = pattern[1:]\n        pattern = pattern[1:]\n    start = 0\n    end = 0\n    if pattern[0] == '^':\n        pattern = pattern[1:]\n        if pattern[0] == '^':\n            pattern = pattern[1:]\n        pattern = pattern[1:]\n    while True:\n        index = text.find(pattern, start)\n        if index == -1:\n            return '', 0, 0\n        if index == start:\n            start = index + len(pattern)\n            end = index\n        else:\n            if pattern[-1] == '$':\n                pattern = pattern[:-1]\n                end = index\n                start = index\n            else:\n                pattern = pattern[:-1]\n                end = index\n                start = index\n            if end >= len(text):\n                return '', start, end\n    return '', start, end\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    from math import factorial\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell_number_for_n(n):\n        x = []\n        for i in range(0,n+1):\n            x.append(i)\n        return sum(x)\n    return bell_number_for_n(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    from math import factorial \n    # n - is number of terms \n    # if n <= 1: \n    #     return 1 \n    # else: \n    #     return factorial(n-1) // (factorial(n-2) * factorial(n-3)) \n    return factorial(n-1) // (factorial(n-2) * factorial(n-3)) \n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # get length of list\n    length = len(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    num = []\n    for i in range(1, n+1):\n        if(i%2==0):\n            num.append(1)\n        else:\n            num.append(i)\n    return sum(num)\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    result = 1\n    count = 1\n    while result <= n:\n        result *= count\n        count += 1\n    return result\ndef find_3(n):\n    '''\n    Write a function to find a triplet with three numbers in array.\n    '''\n    result = 0\n    for i in range(3):\n        result += (n - (n // 3))\n    return result\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    if n==1:\n        return 1\n    elif n==2:\n        return 3\n    else:\n        return bell_Number(n-2) + bell_Number(n-1)\n    \nn=int(input(\"Enter the value\"))\nprint(bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    list_of_values = [2, 3, 5, 8, 13, 21, 34, 55, 89]\n    count = 0\n    for i in list_of_values:\n        count += 1\n        if count == n:\n            print(i)\n            break\n        else:\n            continue\n    else:\n        print(\"No such n\")\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    while n!= i:\n        i += 1\n        n += i\n    return i\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    temp_list = list1[0:L]\n    list1.remove(temp_list[L-1])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    a = list1.pop(L)\n    return a\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1)):\n        list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(set(list1) - set(list1[L:]))\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [item for item in list1 if item!= L]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(len(list1)):\n        # for loop goes through the list1, \n        # find the kth element\n        # and remove it from the list\n        # and returns the new list\n        if i == L - 1:\n            list1.pop(len(list1) - 1)\n        else:\n            list1.pop(i)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1.copy()\n    new_list.pop(L)\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n    \n    if L == []:\n        return []\n    \n    if L[0]!= 0:\n        raise ValueError(\"The element is not 0!\")\n    \n    removed_element_index = L[0]\n    \n    removed_element_list = []\n    \n    for i in range(1, len(L)):\n        if L[i] == removed_element_index:\n            removed_element_list.append(L[i])\n        else:\n            removed_element_list.append(L[i])\n            \n            removed_element_index = L[i]\n            \n    removed_element_list.append(L[-1])\n    \n    return removed_element_list\n    \n    \n    \ndef is_in_list(L, i):\n    '''\n    Write a python function which takes a list and a number and returns True if the number in the list at the index i is in the list.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return False\n    \n    for i in range(len(L)):\n        if i == i:\n            return True\n        \n    return False\n    \n    \n    \ndef is_even_number(L):\n    '''\n    Write a python function which takes a list and returns True if the list is even, otherwise return False.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return False\n    \n    if L[0] == 0 or L[-1] == 0:\n        return True\n        \n    else:\n        return False\n    \n    \n    \ndef is_even_list(L):\n    '''\n    Write a python function which takes a list and returns True if the list is even, otherwise return False.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return False\n    \n    for i in range(len(L)):\n        if L[i] == 0:\n            continue\n        else:\n            return False\n    \n    return True\n    \n    \n    \ndef calculate_sum_of_list(L):\n    '''\n    Write a python function which takes a list and returns the sum of the elements of the list.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return 0\n    \n    sum = 0\n    \n    for i in range(len(L)):\n        sum = sum + L[i]\n        \n    return sum\n    \n    \n    \n    \ndef list_to_string(L):\n    '''\n    Write a python function which takes a list and returns a string with the elements of the list in the same order.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return \"\"\n    \n    s = \"\"\n    \n    for i in range(len(L)):\n        s = s + L[i] + \" \"\n        \n    return s\n    \n    \n    \ndef is_string_to_string(L):\n    '''\n    Write a python function which takes a list and returns True if the list is a string, otherwise return False.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return False\n    \n    return True\n    \n    \n    \ndef string_to_list(L):\n    '''\n    Write a python function which takes a string and returns a list.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return []\n    \n    if L == \"\":\n        return []\n    \n    else:\n        \n        return list(map(int, L.split()))\n    \n    \n    \ndef is_list_in_order(L):\n    '''\n    Write a python function which takes a list and returns True if the list is in order, otherwise return False.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return False\n    \n    if L == []:\n        return True\n    \n    for i in range(len(L) - 1):\n        if L[i] > L[i+1]:\n            return False\n    \n    return True\n    \n    \n    \ndef list_to_string_in_order(L):\n    '''\n    Write a python function which takes a list and returns a string with the elements of the list in the same order.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return \"\"\n    \n    s = \"\"\n    \n    for i in range(len(L)):\n        s = s + L[i] + \" \"\n        \n    return s\n    \n    \n    \n    \ndef find_index_of_first_number(L):\n    '''\n    Write a python function which takes a list and returns the index of the first number in the list.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return 0\n    \n    if L == []:\n        return 0\n    \n    if L[0] == 0:\n        return 0\n    \n    return 0\n    \n    \n    \ndef is_integer_in_list(L):\n    '''\n    Write a python function which takes a list and returns True if the list contains an integer, otherwise return False.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return False\n    \n    if L[0] == 0:\n        return False\n    \n    for i in range(len(L)):\n        if L[i] == 0:\n            continue\n        else:\n            return False\n    \n    return True\n    \n    \n    \ndef is_integer_in_list_in_order(L):\n    '''\n    Write a python function which takes a list and returns True if the list contains an integer, otherwise return False.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return False\n    \n    if L == []:\n        return True\n    \n    for i in range(len(L) - 1):\n        if L[i] > L[i + 1]:\n            return False\n    \n    return True\n    \n    \n    \ndef remove_integer(L):\n    '''\n    Write a python function which takes a list and returns a new list without the integer elements.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return []\n    \n    for i in range(len(L)):\n        if L[i] == 0:\n            continue\n        else:\n            L[i] = L[i]\n            \n    return L\n    \n    \n    \ndef remove_integer_from_list(L, x):\n    '''\n    Write a python function which takes a list and an integer as an argument, and returns a new list without the integer x.\n    '''\n    \n    if L is None:\n        raise ValueError(\"The list is None!\")\n        \n    if L == []:\n        return []\n    \n    if x == 0:\n        return []\n    \n    for i in range(len(L)):\n        if L[i] == 0:\n            continue\n        else:\n            L[i] = L[i]\n            \n            if L[i] == x:\n                break\n    \n    return L\n    \n    \n    \ndef is_integer_in_list_in_order(L):\n    '''\n    Write a python function which takes a list and returns True if the list contains an integer, otherwise return False."
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    output = []\n    output.append(list1[L])\n    list1.pop(L)\n    list1.pop(L)\n    output.append(list1[L])\n    list1.pop(L)\n    return output\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Loop through each row of the matrix and find the largest element in each column\n    # Store the element in max_col\n    max_col = []\n    for row in test_list:\n        max_col.append(max(row))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    maximum = test_list[0][N-1]\n    for i in range(len(test_list)):\n        if maximum < test_list[i][N-1]:\n            maximum = test_list[i][N-1]\n    return maximum\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # code here\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Your code here\n    return 0\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N==0:\n        return 0\n    elif N==1:\n        return test_list[0][0]\n    else:\n        return max(test_list[0][N-1],max_of_nth(test_list,N-1))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    print(test_list)\n    return test_list[N-1][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i] for i in range(len(test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return 0\n    max_of_row = test_list[0]\n    for x in range(1, len(test_list)):\n        max_of_row = max(max_of_row[x], test_list[x][0])\n    return max_of_row\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    row = len(test_list)\n    if row == 1:\n        return test_list[0][N-1]\n    \n    return max(test_list[N-1][N-1], max_of_nth(test_list[N-1], N-1), max_of_nth(test_list[0], N-1))\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list, key = lambda x: x[N])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        temp = []\n        for j in range(len(lst)):\n            temp.append(lst[j][i])\n        result.append(temp)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # This is the main code.\n    result = []\n    # pass the values through a for loop\n    for i in range(len(lst)):\n        temp = lst[i]\n        for j in range(i+1, len(lst)):\n            # combine the elements of the two lists\n            result.append([temp[0], temp[1]])\n            # pass the next sublist through a for loop\n    # return the merged list of lists\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_p = []\n    lst_i = []\n    for i in lst:\n        lst_i.append(i[0])\n        lst_p.append(i[1])\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    for i in range(len(lst)):\n        lst[i].pop(0)\n        lst[i].pop(0)\n        print(lst)\n    lst.sort()\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result=[]\n    while lst:\n        result.append(lst.pop(0))\n        result.append(lst.pop(0))\n    return result\n    \n    \nlst=[[\"a\",\"b\",\"c\"],[\"e\",\"f\"]]\nprint(merge(lst))"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # your code goes here\n    \n    if len(lst) < 2:\n        return lst\n    else:\n        \n        newLst = []\n        for i in range(len(lst)):\n            newLst.append(lst[i][0:1])\n            newLst.append(lst[i][1:])\n        return newLst\n    "
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    s = []\n    # build a list that has all the elements of the first sublist.\n    for i in lst:\n        s.append(i[0])\n    # now build a list of the second sublist elements\n    for j in range(1, len(lst)):\n        s.append(lst[j][1])\n    # return the new list\n    return s"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst == None or len(lst) == 0:\n        return None\n    else:\n        head = lst[0]\n        temp = []\n        for i in lst:\n            if i!= head:\n                temp.append(head)\n                head = i\n            else:\n                temp.append(i)\n        temp.append(head)\n        return temp\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        for j in i:\n            lst1.append(j)\n    for i in lst1:\n        for j in i:\n            lst2.append(j)\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # def merge(lst):\n        # return [lst[0]] + [lst[1]]\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    tuple_sum = 0\n    for item in test_list:\n        tuple_sum += item\n    return tuple_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum = 0\n    for element in test_list:\n        cum += element\n    return cum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = [(int)(i) for i in test_list]\n    test_list_len = len(test_list)\n    #print(test_list_len)\n    if test_list_len < 1:\n        return 0\n    for i in range(test_list_len):\n        if i == 0:\n            pass\n        else:\n            #print(test_list[i])\n            #print(test_list[i-1])\n            #print(test_list[i-1] + test_list[i])\n            #print(test_list[i-1] + test_list[i] + test_list[i-1])\n            #print(test_list[i] + test_list[i+1] + test_list[i-1] + test_list[i+1])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list[i])\n            #print(test_list[i] + test_list[i-1] + test_list[i-1] + test_list[i-1] + test_list["
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in test_list:\n        sum += i\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for number in test_list:\n        sum = sum + number\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    s = 0\n    for item in test_list:\n        s += item\n    return s\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # YOUR CODE HERE\n    total = 0\n    for i in test_list:\n        total = total + i\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #create a tuple to store the numbers\n    my_tuple = tuple(test_list)\n    #create empty list to store the values\n    list_to_return = []\n    #loop through the tuple\n    for i in range(len(my_tuple)):\n        #append the numbers to the list\n        list_to_return.append(my_tuple[i])\n    #return the list\n    return list_to_return\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    def average(tup):\n        return sum(tup)/len(tup)\n    return list(map(average, nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    return (sum(nums)/len(nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Your code here\n    total=0\n    for i in nums:\n        for j in i:\n            total+=j\n    return [round(total/len(i),2) for i in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_nums = []\n    for i in nums:\n        for j in i:\n            avg_nums.append(j)\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(num) / len(num)) for num in nums]"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #raise NotImplementedError()\n    #raise NotImplementedError()\n    total = []\n    for tup in nums:\n        total.append(tup[0])\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # TODO: Write your average function here\n    result = []\n    for i in nums:\n        if len(i) == 0:\n            result.append(0)\n        else:\n            result.append(sum(i)/len(i))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        i = sum(i)/len(i)\n        averages.append(i)\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return sum(nums) / len(nums)"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for nums_tuple in nums:\n        result.append(sum(nums_tuple)/len(nums_tuple))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # if the length of the tuple is not the same, raise an Exception\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Tuple length does not match\")\n    # create an empty list to append the result\n    res = []\n    # iterate through the tuple and append the result\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] % test_tup2[i])\n    # return the result\n    return res\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # return a tuple of tuples to represent the result\n    tuple = ()\n    for i in range(len(test_tup1)):\n        tuple = tuple + (test_tup1[i], test_tup2[i])\n    return tuple\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup3 = tuple(tuple_mod(test_tup1, test_tup2))\n    return test_tup3\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] % test_tup2[i]).__str__())\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    else:\n        test_tup_mod = []\n        for i in range(len(test_tup1)):\n            test_tup_mod.append((test_tup1[i] % test_tup2[i]) if test_tup1[i] > 0 and test_tup2[i] >= 0 else -1 * (test_tup1[i] % test_tup2[i]))\n        print(test_tup_mod)\n        return test_tup_mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # get the modulo of each tuple\n    mod = list(map(lambda x: str(x[0]%x[1]), zip(test_tup1, test_tup2)))\n    # filter out the duplicates\n    mod = list(filter(lambda x: x not in mod, mod))\n    # filter out the duplicates\n    mod = list(filter(lambda x: x not in mod, mod))\n    return mod\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError\n    return tuple([tup1[i]%tup2[i] for i in range(len(tup1))])\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print('Your input tuple must have the same length!')\n        return\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            test_tup1[i] -= test_tup2[i]\n        elif test_tup1[i] < test_tup2[i]:\n            test_tup1[i] += test_tup2[i]\n        else:\n            test_tup1[i] = test_tup2[i]\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d[0] >= 0 and d[1] >= 0 and d[0] < 0 and d[1] < 0:\n        return True\n    else:\n        return False\ndef min_Jumps2d(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 3d plane.\n    '''\n    if d[0] >= 0 and d[1] >= 0 and d[2] >= 0 and d[0] < 0 and d[1] < 0 and d[2] < 0:\n        return True\n    else:\n        return False\ndef min_Jumps3d(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 4d plane.\n    '''\n    if d[0] >= 0 and d[1] >= 0 and d[2] >= 0 and d[3] >= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    min_Jumps = 0\n    for i in range(steps):\n        min_Jumps += min_Jumps_recursive(steps, d)\n    return min_Jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    for i in range(steps): \n        \n        if (d - i) >= 0: # If the displacement to reach point from the origin is positive\n            # move to point i+1\n            d = d + 1\n        else: # If the displacement to reach point from the origin is negative\n            # move to point i\n            d = d - 1\n        \n        if (d < 0): # If the point from the origin is negative\n            # jump to the point i\n            i = 0 # Reset\n        else: # If the point from the origin is positive\n            # jump to the point i+1\n            i = i - 1 # reset\n    \n    return d # Return the value\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    result = 0\n    for i in range(steps):\n        if steps < 2:\n            result = 1\n            break\n        d = (d-1) % (2**steps)\n        result = result + min_Jumps(steps-1, d)\n    return result\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    ## If the length of the sequence is less than the length of the sequence, return False.\n    if steps<d: return False\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # create a 2D grid \n    # each row is a grid \n    # each column is a jump \n    # if the grid is 0, it means that the point is on the boundary of the grid \n    grid = [[0 for x in range(d)] for x in range(d)] \n    for i in range(d): \n        for j in range(d): \n            if i==0 or j==0: \n                grid[i][j] = 1 \n    # the number of jumps that need to be done \n    jumps = 0 \n    # initialize the grid to be 0 \n    grid[0][0] = 0 \n    # check if the point is reach \n    # by checking all the cells in the grid that are visited \n    # through the grid \n    for i in range(d): \n        for j in range(d): \n            if grid[i][j] == 1: \n                # check if a jump is possible \n                # if so, then update the jumps \n                # and reset the grid \n                # to be 0 \n                if grid[i-1][j] == 0 or grid[i][j-1] == 0: \n                    grid[i][j] = 0 \n                    grid[i-1][j] = 0 \n                    grid[i][j-1] = 0 \n                    jumps += 1 \n                else: \n                    grid[i][j] = grid[i-1][j] + grid[i][j-1]\n    # return the number of jumps required \n    return jumps \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    import numpy as np\n    jumps = 0\n    dJumps = 0\n    if d == 0:\n        jumps += np.ceil(steps / 2)\n        jumps += (steps - (2 * jumps))\n    else:\n        jumps += np.ceil(steps / 2)\n        dJumps = steps - jumps\n    return jumps, dJumps\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return sum(steps[:,d] == 0)\n    \n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return d\n    if d == 0:\n        return 0\n    if d == d//2 or d - d//2 == d:\n        return 1\n    if d - d//2 == d:\n        return d - d//2\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        nums1_list=[]\n        nums2_list=[]\n        \n        for num in nums1:\n            nums1_list.append(int(num))\n            \n        for num in nums2:\n            nums2_list.append(int(num))\n        \n        # Divide both lists element wise\n        return [num/nums1 for num in nums2_list]\n    except Exception:\n        print(\"Error in function div_list\")\n        return None\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num for num in nums1 if num in nums2]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = list()\n    len_nums1 = len(nums1)\n    len_nums2 = len(nums2)\n    for i in range(len_nums1):\n        for j in range(len_nums2):\n            if nums1[i] % nums2[j] == 0:\n                result.append(nums1[i] / nums2[j])\n                break\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result=[]\n    for i in range(len(nums1)):\n        result.append([])\n        for j in range(len(nums2)):\n            if nums1[i]==nums2[j]:\n                result[i].append(nums1[i])\n            else:\n                result[i].append(0)\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    dividend = []\n    divisor = []\n    for i in range(len(nums1)):\n        if nums1[i] % 2 == 0:\n            dividend.append(nums1[i])\n        else:\n            divisor.append(nums1[i])\n    for j in range(len(nums2)):\n        if nums2[j] % 2 == 0:\n            divisor.append(nums2[j])\n        else:\n            dividend.append(nums2[j])\n    newlist = [dividend,divisor]\n    return newlist\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    '''\n    Write your code here\n    '''\n    size = len(nums1)\n    if size<1:\n        print(\"Cannot divide an empty list\")\n        return\n    elif size==1:\n        return nums1[0]/nums2[0]\n    elif size>1:\n        return [nums1[i]/nums2[i] for i in range(size)]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #res = []\n    #for i in range(len(nums1)):\n    #    res.append(nums1[i]//nums2[i])\n    #    #print(nums1[i]//nums2[i])\n    #    #print(nums1[i], nums2[i])\n    #    print(nums1[i]//nums2[i])\n    #    print(nums1[i])\n    #    print(nums2[i])\n    res = []\n    for i in range(len(nums1)):\n        res.append((nums1[i]//nums2[i]))\n    return res\n    #return [nums1[i]//nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Case 1.\n    if len(nums1) < len(nums2):\n        nums1,nums2 = nums2,nums1\n    # Case 2.\n    if len(nums1) == len(nums2):\n        return [x/y for x,y in zip(nums1,nums2)]\n    else:\n        return [nums1[i]+nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #Divide two lists and return the two lists with the average of the elements\n    #of the lists.\n    if len(nums1) < len(nums2):\n        nums1,nums2 = nums2,nums1\n        #print(f\"In first loop, the lengh of nums1 is {len(nums1)}\")\n        #print(f\"In second loop, the lengh of nums2 is {len(nums2)}\")\n    if len(nums1) > len(nums2):\n        nums2,nums1 = nums1,nums2\n        #print(f\"In third loop, the lengh of nums2 is {len(nums2)}\")\n        #print(f\"In forth loop, the lengh of nums1 is {len(nums1)}\")\n    '''\n    If the lists are the same length, return the elements of the first list.\n    '''\n    if len(nums1) == len(nums2):\n        return [nums1[i] for i in range(len(nums1))]\n    else:\n        return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Code here\n    return [list(i) for i in zip(*(nums1,nums2))]\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.replace('.', '')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace(' ','')\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        num_list.append(int(i))\n    num_list.sort()\n    num_list.reverse()\n    string_num = \"\".join(num_list)\n    #print(num_list)\n    print(string_num)\n    #print(num_list)\n    return string_num\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    test_str = re.sub('[0-9]+', '', test_str)\n    test_str = test_str.lower()\n    test_str = re.sub('\\d', '', test_str)\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        if test_str[i] == 'the':\n            test_str[i] = 'the '\n        elif test_str[i] == 'the first':\n            test_str[i] = 'the '\n            test_str.insert(i, test_str[i][:2])\n            test_str.pop(i)\n    return ''.join(test_str)\n    \ndef middle_numbers(test_str):\n    '''\n    Write a function to remove any'middle' numbers from the given string.\n    '''\n    test_str = test_str.lower()\n    test_str = re.sub('[0-9]+', '', test_str)\n    test_str = re.sub('[A-Z]', '', test_str)\n    test_str = re.sub('\\d', '', test_str)\n    test_str = re.sub('[,;]','', test_str)\n    test_str = re.sub('\\s+','', test_str)\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        if test_str[i][0] == 'and':\n            test_str[i] = test_str[i][1:]\n            test_str[i] = test_str[i][0] + test_str[i][1:]\n        elif test_str[i][0] == 'and' and test_str[i][1:]!= 'and':\n            test_str[i] = test_str[i][1:]\n    test_str =''.join(test_str)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            result.append(test_str[i])\n    return ''.join(result)\n    "
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.strip()\n    ls = []\n    for i in range(0,len(test_str),2):\n        ls.append(test_str[i:i+2])\n    ls = list(map(int,ls))\n    return ls\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    \n    for i in range(len(test_str)):\n        if i!= '0':\n            num_list.append(test_str[i])\n    \n    test_str_str = ''\n    for num in num_list:\n        test_str_str += num\n    \n    return test_str_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str=='':\n        return ''\n    else:\n        s=test_str.split()\n        for i in range(len(s)):\n            s[i]=''.join(s[i].split())\n            for j in range(1,len(s[i])-1):\n                s[i]=s[i].replace('0','1')\n        return ''.join(s)\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for num in test_str:\n        if num.isnumeric():\n            num_list.append(num)\n    num_list = sorted(num_list)\n    if num_list == []:\n        return 'Error: no numbers found'\n    else:\n        print(\"Number(s) found:\", num_list)\n        print(test_str)\n        # print(num_list)\n        return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # TODO: Write your code here\n    new_str = ''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            new_str = new_str + test_str[i]\n        else:\n            new_str = new_str + str(i) + test_str[i]\n    return new_str\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n=len(a)\n    d={}\n    if n==0:\n        return 0\n    m=a[0]\n    d[m]=1\n    for i in range(1,n):\n        if m%a[i]==0:\n            d[m]+=1\n        else:\n            m+=a[i]\n    return max(d.values())\ndef kthlargest(a,n,k):\n    '''\n    a-list of numbers\n    n - number of elements in a\n    k - number of elements that will be in a\n    '''\n    a.sort()\n    if n==0:\n        return 0\n    if k==0:\n        return 1\n    pivot=a[n//2]\n    if pivot==a[0]:\n        if n%2==0:\n            return 1\n        else:\n            return 0\n    if pivot==a[-1]:\n        if n%2==0:\n            return 1\n        else:\n            return 0\n    m=kthlargest(a,n//2,k-1)\n    if m==1:\n        return 1\n    return m+kthlargest(a,n//2,k)\ndef knapSack(W, wt, val, n):\n    '''\n    W - weight of a package\n    wt - weight of a customer\n    val - value of a package\n    n - number of packages\n    return - maximum profit\n    '''\n    K = [[0 for x in range(W + 1)] for x in range(n + 1)]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max = 0\n    for i in range(n):\n        if a[i] % 2!= 0:\n            max = max + 1\n    for i in range(n - max):\n        if a[i] % 2 == 0:\n            return a[i]\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    ### EXPLANATION:\n    ### In this example, the smallest subset is [1,2,3], and the largest subset is [1,3,2]. The same answer is 5.\n    ### But, for this particular test case, the subset [1,2,3,4] is divisible by all of the subsets.\n    ###\n    ### Input:\n    ### a = [1,2,3,4]\n    ### Output:\n    ### 2\n    ### \n    ### Explanation:\n    ### The two subsets of numbers in the array are [1,2,3], and [1,3,2].\n    ### The largest subset is [1,3,2] in size 2 because every pair in the subset is divisible by both of them.\n    ###\n    ### Examples:\n    ###\n    ### Input:\n    ### a = [1,2,3,4]\n    ### Output:\n    ### 2\n    ### Explanation:\n    ### The largest subset is [1,2,3,4] in size 2 because every pair in the subset is divisible by both of them.\n    ###\n    ### Input:\n    ### a = [1,2,1,2,3,4,4,4,5,5,6,7,7,7]\n    ### Output:\n    ### 5\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    def dfs(i):\n        if i == n:\n            return 1\n        else:\n            return max(dfs(i + 1), dfs(i + 1) + 1)\n    return dfs(0)\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_size = 0\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                break\n        else:\n            if i > max_size:\n                max_size = i\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    size = 0\n    lst = set(a)\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                size += 1\n    return size\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = 0\n    largest_subset = []\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i] % a[j] == 0:\n                if a[i] > max_subset:\n                    max_subset = a[i]\n                if a[j] > max_subset:\n                    max_subset = a[j]\n                if a[i] > a[j] and a[i] % a[j]!= 0:\n                    largest_subset.append([a[i], a[j]])\n    return largest_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    n = len(a)\n    count = 0\n    max = 0\n    for i in range(n):\n        for j in range(i,n):\n            if a[j] % a[i] == 0:\n                count += 1\n                if count > max:\n                    max = count\n                count = 0\n    return max\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #1) Create a list of possible sums of a subset of numbers\n    sums = [sum(n) for n in combinations(a,2)]\n    #2) Find the number of possible combinations\n    num_comb = len(sums)\n    #3) Assign a new variable to a_max_subset which is the max number of possible combinations\n    a_max_subset = 0\n    #4) For every possible combination\n    for i in range(num_comb):\n        #4a) Check if this combination is possible\n        if sums[i]%a == 0:\n            #4b) Check if this combination is in the max subset\n            if a_max_subset < sums[i]:\n                #4c) Save the max number of possible combinations\n                a_max_subset = sums[i]\n    #5) Return the largest subset\n    return a_max_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s=[1]*len(a)\n    if len(a)<2:\n        return len(a)\n    for i in range(2,len(a)):\n        for j in range(i):\n            if a[j]%a[i]==0:\n                s[i]=max(s[i],s[j]+1)\n    return s[-1]\ndef vars(a):\n    '''\n    Write a function to find the sum of the variables.\n    '''\n    return sum([a[i] for i in range(len(a))])\ndef check_prime(num):\n    '''\n    Write a function to check if a given number is a prime number.\n    '''\n    if num%2==0:\n        return False\n    if num<2:\n        return True\n    if num==2:\n        return True\n    if num==3:\n        return False\n    for i in range(3,num,2):\n        if num%i==0:\n            return False\n    return True\ndef divide(a):\n    '''\n    Write a function to divide two lists.\n    '''\n    c=[]\n    for i in a:\n        if i not in c:\n            c.append(i)\n    return c\ndef common_multiple(a,b):\n    '''\n    Write a function to get the common multiple of two numbers.\n    '''\n    if len(a)%2==0:\n        m=a\n    else:\n        m=a[-1]*2\n    if len(b)%2==0:\n        n=b\n    else:\n        n=b[-1]*2\n    return int(m/n)\ndef common_divisors(n):\n    '''\n    Write a function to get all the divisors of a number.\n    '''\n    divisors=[]\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n%i==0:\n            divisors.append(i)\n            if n//i==i:\n                divisors.append(n//i)\n    divisors.append(n)\n    return divisors\ndef prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    for i in range(3,n//2+1,2):\n        if n%i==0:\n            return False\n    return True\ndef nth_prime(n):\n    '''\n    Write a function to find the nth prime number.\n    '''\n    s=[]\n    for i in range(2,n//2+1):\n        if prime(i):\n            s.append(i)\n    return s[-1]\ndef power_nth_prime(n,k):\n    '''\n    Write a function to find the nth prime number.\n    '''\n    s=[]\n    for i in range(2,n+1):\n        if nth_prime(i)==k:\n            s.append(i)\n    return s[-1]\ndef gcd(a,b):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    if a==0:\n        return b\n    if b==0:\n        return a\n    if a%b==0:\n        return b\n    return gcd(b,a%b)\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n<2:\n        return False\n    for i in range(2,n//2+1):\n        if n%i==0:\n            return False\n    return True\ndef combinations(a, n):\n    '''\n    Write a function to find all possible combinations of n numbers.\n    '''\n    return [i for i in range(1,a+1)]\ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of n.\n    '''\n    if n<2:\n        return 1\n    return n*factorial(n-1)\ndef fibonacci_cache(n):\n    '''\n    Write a function that returns the fibonacci number, n in the cache.\n    '''\n    if n<2:\n        return n\n    if n in fibonacci_cache:\n        return fibonacci_cache[n]\n    fibonacci_cache[n]=fibonacci_cache[n-1]+fibonacci_cache[n-2]\n    return fibonacci_cache[n]\ndef fibonacci(n):\n    '''\n    Write a function to calculate the fibonacci number, n in the cache.\n    '''\n    if n<2:\n        return n\n    if n in fibonacci_cache:\n        return fibonacci_cache[n]\n    fibonacci_cache[n]=fibonacci(n-1)+fibonacci(n-2)\n    return fibonacci_cache[n]\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n<2:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\ndef divisors(n):\n    '''\n    Write a function that returns all divisors of a given number.\n    '''\n    return [i for i in range(1,n+1) if n%i==0]\ndef is_prime_n(n):\n    '''\n    Write a function to determine if a given number is prime.\n    '''\n    if n<2:\n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0:\n        return False\n    if n==3:\n        return True\n    if n==4:\n        return True\n    if n==5:\n        return True\n    if n==6:\n        return True\n    if n==7:\n        return True\n    if n==8:\n        return True\n    if n==9:\n        return True\n    if n==10:\n        return True\n    if n%3==0:\n        return False\n    if n%2==0:\n        return False\n    if n%7==0:\n        return False\n    if n%5==0:\n        return False\n    if n%3==0:\n        return False\n    if n%2==0:\n        return False\n    return True\ndef prime_numbers(start,end):\n    '''\n    Write a function to find all prime numbers in a given range.\n    '''\n    return [i for i in range(start,end+1) if is_prime(i)]\ndef list_to_string(list_of_strings):\n    '''\n    Write a function to convert a list of strings into a string.\n    '''\n    return \"\".join([str(i) for i in list_of_strings])\ndef read_matrix(matrix_file):\n    '''\n    Read a matrix from the matrix file.\n    '''\n    return [[int(x) for x in matrix_file.readline().split()] for i in range(int(matrix_file.readline()))]\ndef convert_to_string(matrix):\n    '''\n    Read a matrix from the matrix file and convert it to a string.\n    '''\n    return [str(i) for i in matrix]\ndef is_pandigital(string):\n    '''\n    Write a function to check if a given string is a Pandigital number.\n    '''\n    if len(string)==1 or len(string)>5:\n        return False\n    if string[0] in [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"] or string[0] in \"ABCDE\":\n        return False\n    if len(string)==2 and string[0] in \"12\" and string[1] in \"67\":\n        return False\n    return True\ndef check_in_list(lst,n):\n    '''\n    Write a function to check if a given number i"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    x = len(arr1)\n    y = len(arr2)\n    if(x > y):\n        arr1, arr2 = arr2, arr1\n        x, y = y, x\n    if(x == 0):\n        return arr2[y//2] if y%2 == 0 else arr2[y//2 -1]\n    if(y == 0):\n        return arr1[x//2] if x%2 == 0 else arr1[x//2 -1]\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    if len(arr1) > len(arr2):\n        return get_median(arr1, arr2, len(arr1))\n    else:\n        return get_median(arr1, arr2, len(arr2))\n        \ndef get_median(arr1, arr2, n):\n    '''\n    Given two sorted lists of same size. Return the median of the list.\n    '''\n    return sorted([float(sum(arr1) / n), float(sum(arr2) / n)])\n    \ndef get_difference(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the difference of the lists.\n    '''\n    dif = 0\n    for i in range(len(arr1)):\n        if arr1[i]!= arr2[i]:\n            dif = dif + abs(arr1[i] - arr2[i])\n    return dif\n    \ndef get_percent(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the percentage of the lists.\n    '''\n    return float(len(arr1) / len(arr1) * 100)\n    \ndef get_percent_range(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the percentage difference of the lists.\n    '''\n    return (float(len(arr1) / len(arr1) * 100) - get_percent(arr1, arr2)) / float(len(arr1) / len(arr1) * 100)\n    \ndef get_mode(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the mode of the lists.\n    '''\n    s1 = {}\n    for i in arr1:\n        s1[i] = s1.get(i, 0) + 1\n    if len(s1) == 1:\n        return sorted(arr1)[0]\n    for i in sorted(s1):\n        if s1[i] == max(s1.values()):\n            return i\n    return max(s1)\n    \ndef get_sum_diff(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the sum difference of the lists.\n    '''\n    s1 = {}\n    for i in arr1:\n        s1[i] = s1.get(i, 0) + 1\n    if len(s1) == 1:\n        return sum(arr1)\n    s2 = {}\n    for i in arr2:\n        s2[i] = s2.get(i, 0) + 1\n    if len(s2) == 1:\n        return sum(arr2)\n    for i in sorted(s1):\n        for j in sorted(s2):\n            if s1[i] == s2[j]:\n                s2[j] = 0\n            else:\n                s2[j] += 1\n    return sum(s2.values())\n    \ndef get_sum_diff_range(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the sum difference of the lists.\n    '''\n    s1 = {}\n    for i in arr1:\n        s1[i] = s1.get(i, 0) + 1\n    if len(s1) == 1:\n        return sum(arr1)\n    s2 = {}\n    for i in arr2:\n        s2[i] = s2.get(i, 0) + 1\n    if len(s2) == 1:\n        return sum(arr2)\n    for i in sorted(s1):\n        for j in sorted(s2):\n            if s1[i] == s2[j]:\n                s2[j] = 0\n            else:\n                s2[j] += 1\n    return sum(s2.values())\n    \ndef get_sum_diff_range_range(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the sum difference of the lists.\n    '''\n    s1 = {}\n    for i in arr1:\n        s1[i] = s1.get(i, 0) + 1\n    if len(s1) == 1:\n        return sum(arr1)\n    s2 = {}\n    for i in arr2:\n        s2[i] = s2.get(i, 0) + 1\n    if len(s2) == 1:\n        return sum(arr2)\n    for i in sorted(s1):\n        for j in sorted(s2):\n            if s1[i] == s2[j]:\n                s2[j] = 0\n            else:\n                s2[j] += 1\n    return sum(s2.values())\n    \ndef get_sum_diff_range_range_range(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the sum difference of the lists.\n    '''\n    s1 = {}\n    for i in arr1:\n        s1[i] = s1.get(i, 0) + 1\n    if len(s1) == 1:\n        return sum(arr1)\n    s2 = {}\n    for i in arr2:\n        s2[i] = s2.get(i, 0) + 1\n    if len(s2) == 1:\n        return sum(arr2)\n    for i in sorted(s1):\n        for j in sorted(s2):\n            if s1[i] == s2[j]:\n                s2[j] = 0\n            else:\n                s2[j] += 1\n    return sum(s2.values())\n    \ndef get_sum_diff_range_range_range_range(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the sum difference of the lists.\n    '''\n    s1 = {}\n    for i in arr1:\n        s1[i] = s1.get(i, 0) + 1\n    if len(s1) == 1:\n        return sum(arr1)\n    s2 = {}\n    for i in arr2:\n        s2[i] = s2.get(i, 0) + 1\n    if len(s2) == 1:\n        return sum(arr2)\n    for i in sorted(s1):\n        for j in sorted(s2):\n            if s1[i] == s2[j]:\n                s2[j] = 0\n            else:\n                s2[j] += 1\n    return sum(s2.values())\n    \ndef get_sum_diff_range_range_range_range_range(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the sum difference of the lists.\n    '''\n    s1 = {}\n    for i in arr1:\n        s1[i] = s1.get(i, 0) + 1\n    if len(s1) == 1:\n        return sum(arr1)\n    s2 = {}\n    for i in arr2:\n        s2[i] = s2.get(i, 0) + 1\n    if len(s2) == 1:\n        return sum(arr2)\n    for i in sorted(s1):\n        for j in sorted(s2):\n            if s1[i] == s2[j]:\n                s2[j] = 0\n            else:\n                s2[j] += 1\n    return sum(s2.values())\n    \ndef get_sum_diff_range_range_range_range_range_range(arr1, arr2):\n    '''\n    Given two sorted lists of same size. Return the sum difference of the lists.\n    '''\n    s1 = {}\n    for i in arr1:\n        s1[i] = s1.get(i, 0) + 1\n    if len(s1) == 1:\n        return sum(arr1)\n    s2 = {}\n    for i in arr2:\n        s2[i] = s2.get(i, 0) + 1\n    if len(s2) == 1:\n        return sum(arr2)\n    for i in sorted(s1):\n        for j in sorted(s2):\n            if s1"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sorting and sorting itself\n    if len(arr1) == 0 or len(arr2) == 0:\n        if n == 0:\n            return\n        else:\n            return None\n    if n == 0:\n        return get_median(arr1, arr2, n)\n    elif n == 1:\n        return arr1[0]\n    else:\n        arr1_sorted = sort_arr(arr1)\n        arr2_sorted = sort_arr(arr2)\n        return (arr1_sorted[(len(arr1_sorted)-n)//2] + arr2_sorted[(len(arr2_sorted)-n)//2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l = len(arr1)\n    if l < 2:\n        return 0\n    elif l % 2 == 0:\n        return (arr1[l//2] + arr2[l//2]) / 2\n    else:\n        first = arr1[(l-1)//2]\n        second = arr2[(l-1)//2]\n        median = (first + second) / 2\n        return median\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    if n == 2:\n        return (arr1[0] + arr1[1]) / 2\n    mid = n // 2\n    left = arr1[:mid]\n    right = arr1[mid:]\n    if len(left) < len(right):\n        left, right = right, left\n    if len(left) > len(right):\n        left, right = left, right\n    return (left + right) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_list1 = sorted(arr1)\n    sorted_list2 = sorted(arr2)\n    print(f'list 1 is {sorted_list1}')\n    print(f'list 2 is {sorted_list2}')\n    index1 = 0\n    index2 = 0\n    if len(arr1) == 0 or len(arr2) == 0:\n        return float('inf')\n    if n <= 1:\n        return (sorted_list1[n-1] + sorted_list2[n-1]) / 2\n    if n > len(arr1):\n        return get_median(arr2, sorted_list2, n - len(arr1))\n    if n > len(arr2):\n        return get_median(arr1, sorted_list1, n - len(arr2))\n    \n    \n    while sorted_list1[index1] <= sorted_list2[index2]:\n        index1 += 1\n    \n    if sorted_list1[index1] < sorted_list2[index2]:\n        return sorted_list1[index1]\n    return sorted_list2[index2]\n    \n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    lst1 = arr1\n    lst2 = arr2\n    \n    if len(lst1) <= 0:\n        raise Exception('Empty List!')\n    if len(lst2) <= 0:\n        raise Exception('Empty List!')\n        \n    if (len(lst1) + len(lst2)) % 2 == 1:\n        raise Exception('Only even lists are allowed!')\n    \n    lst1.sort()\n    lst2.sort()\n    \n    if len(lst1) > len(lst2):\n        return get_median(lst1, lst2, len(lst1))\n    elif len(lst2) > len(lst1):\n        return get_median(lst2, lst1, len(lst2))\n    \n    if len(lst1) <= len(lst2):\n        return get_median(lst1, lst2, len(lst1))\n    elif len(lst2) <= len(lst1):\n        return get_median(lst2, lst1, len(lst2))\n    \n    if (len(lst1) + len(lst2)) % 2 == 1:\n        return get_median(lst1, lst2, len(lst1))\n    \n    return (lst1[len(lst1)//2] + lst2[len(lst2)//2])/2"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    else:\n        m = n // 2\n        arr1_left = get_median(arr1, arr2, m)\n        arr1_right = get_median(arr1, arr2, n - m)\n        arr2_left = get_median(arr1, arr2, m)\n        arr2_right = get_median(arr1, arr2, n - m)\n        return (arr1_left + arr1_right + arr2_left + arr2_right) / 4\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if the number of elements is odd then return the median\n    if len(arr1) % 2 == 0:\n        return (arr1[len(arr1)//2] + arr2[len(arr2)//2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    def findMedian(arr1, arr2):\n        if len(arr1) == 0 or len(arr2) == 0:\n            return None\n        if len(arr1) <= len(arr2):\n            return arr1[0]\n        elif len(arr1) > len(arr2):\n            return arr2[len(arr1)//2]\n        else:\n            return arr2[len(arr1)//2]\n    \n    if n % 2 == 0:\n        return (findMedian(arr1, arr2) + findMedian(arr2, arr1))/2\n    else:\n        return findMedian(arr1, arr2)\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_numbers = [a**n for a in nums]\n    return power_numbers\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    if len(nums) == 1:\n        return [nums[0] ** i for i in range(len(nums))]\n    \n    else:\n        num_list = list(nums)\n        pow_list = list(map(lambda x: x ** n, num_list))\n        return pow_list\n    \n    \ndef main():\n    '''\n    Here the user will be input the numbers from the user and then the\n    output of this function is displayed.\n    '''\n    \n    n = int(input(\"Enter the Number: \"))\n    \n    print(n)\n    \n    print(nth_nums(n,1))\n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if not nums:\n        return []\n    \n    def power(n, p):\n        return n ** p if p > 0 else 0\n    \n    return [power(x,n) for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [nth_power(nums,i) for i in range(len(nums))]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**x for x in range(len(nums)+1)]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pow_sum = 1\n    for i in nums:\n        pow_sum = pow_sum * i\n    return pow_sum\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # first, create a list of the first n numbers\n    nums_list = []\n    # loop through the numbers\n    for i in range(0,len(nums)):\n        # add to the list\n        nums_list.append(nums[i])\n    # initialize the result\n    res = 1\n    # loop through the numbers in the list\n    for i in range(len(nums_list)-1, -1, -1):\n        # check if i is a power of the previous number\n        if nums_list[i] ** n == 1:\n            # if it is, set the result to the previous result\n            res = res * nums_list[i]\n            # reset the result\n            nums_list[i] = 1\n        else:\n            # if it is not, set the result to the previous result\n            res = res * nums_list[i]\n    return re"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    #initialize the arrays\n    factorial_array = [1]\n    num = 0\n    power = 0\n    \n    #iterate through the numbers\n    for i in range(n):\n        #compute the factorial\n        factorial_array.append(factorial_array[-1]*n)\n        #compute the factorial\n        num = num * factorial_array[-1]\n        #add the next number to the array\n        power = power + num\n        \n    #return the factorial\n    return power\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [pow(nums[i],n) for i in range(len(nums))]\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string:\n        return string.upper()\n    return string\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string_list = string.split()\n    \n    # get all the letters in the string\n    for letters in string_list:\n        for letter in letters:\n            if letter.isupper():\n                return True\n    return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper=''\n    for letter in string:\n        if letter.isupper():\n            upper+=letter.upper()\n        else:\n            upper+=letter\n    return upper\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    lower_str = string.lower()\n    return lower_str.istitle()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper = string.upper()\n    return upper\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) > 0:\n        return string.upper()\n    else:\n        return \"\"\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Your code here\n    return string.isupper()\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Find length of list\n    length = len(newList)\n    # Create a new array for interchange\n    new_arr = []\n    # Loop through list\n    for i in range(length):\n        # Swap the first element with the last element\n        new_arr.append(newList[i])\n        # Add the second element with the first element\n        new_arr.append(newList[length - i - 1])\n    # Return the new list\n    return new_arr\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = newList[1:len(newList)-1]\n    newList.append(newList.pop())\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.reverse() \n    newList.pop(0) \n    newList.pop() \n    return newList \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp_var1 = newList[0] \n    temp_var2 = newList[-1] \n    newList[0] = temp_var2 \n    newList[-1] = temp_var1 \n    return newList \n    \ndef insert_at_position(newList, data):\n    '''\n    Write a python function to insert a new element at a given position in a given list.\n    '''\n    temp_var = newList[-1] \n    newList.append(data) \n    newList.insert(0, temp_var) \n    return newList \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList.pop(0) \n    b = newList.pop(len(newList) - 1) \n    newList[0] = b \n    newList[len(newList) - 1] = a\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    second = newList[length-1]\n    newList[0] = newList[length-1]\n    newList[length-1] = first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1: \n        return newList \n    else: \n        first = newList[0] \n        last = newList[-1] \n        newList[0] = last \n        newList[-1] = first \n        return newList \n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print(f\"The new list after swapping the first and last element is {newList}\")\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[1:] + newList[:1]\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a=math.pow(r,2)\n    if a==0 :\n        return 0\n    else :\n        area=0\n        for i in range(1,round(math.sqrt(a))+1) :\n            if i*i<=a :\n                area=area+i\n        return round(area/2,2)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (r**2 * math.sin(math.pi/2)) ** (1/2)\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = math.sqrt(3*r**2 - r**2)\n    a = math.pow(a,0.5)\n    return (a)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if (r < 0) :\n        return 'Error: Argument: r should be positive.'\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    l = r**2\n    if l<=1 :\n        print(\"{:.2f}\".format(l))\n    else :\n        for i in range(1, l-1) :\n            r = r + l/2\n            print(\"{:.2f}\".format(r))\n        print(\"{:.2f}\".format(r**2))\n    return \"Done\"\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 3.14 * (r ** 2)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def valid_input(r) :  \n        '''\n        Check that the user entered a number.\n        '''\n        while r < 1 :\n            r = input(\"Input the radius of a triangle of a given area or enter '0' to quit: \")\n            if r == '':\n                r = 1\n        if r!= '':\n            return r\n        return None\n    \n    # Get user input\n    r = valid_input(r)\n    if r == None:\n        return 0\n    else:\n        return r * r * math.pi / 4\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r * 3.14\n    for i in range(1,r+1) :\n        if(a == 0) :\n            return print(\"No triangle is inscribed in a semicircle\")\n        else :\n            if(a % 2 == 0) :\n                return print(\"{} is an odd triangle\".format(i))\n            else :\n                return print(\"{} is an even triangle\".format(i))\n    \ntriangle_area(7)\ntriangle_area(8)\ntriangle_area(9)\ntriangle_area(10)\ntriangle_area(11)\ntriangle_area(12)\ntriangle_area(13)\ntriangle_area(14)\ntriangle_area(15)\ntriangle_area(16)"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #%%\n    #Write your code here\n    \n    return 0\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    low, high = start, end\n    mid = (start + end)//2\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None: end = len(array)-1\n    \n    #find the element\n    i = start\n    while i<end:\n        if array[i]!= i+1:\n            i += 1\n        else:\n            break\n    \n    #find the first missing number\n    return (i+1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    if start < end:\n        mid = (start+end)//2\n        if array[mid] < array[mid+1]:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid] > array[mid+1]:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return mid\n    else:\n        return -1\n    \n    \ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    if start < end:\n        mid = (start+end)//2\n        if array[mid] > array[mid+1]:\n            return find_Second_Missing(array,mid+1,end)\n        elif array[mid] < array[mid+1]:\n            return find_Second_Missing(array,start,mid-1)\n        else:\n            return mid\n    else:\n        return -1\n    \n    \ndef sort_arr(arr):\n    '''\n    Write a python function that sorts a list in place.\n    '''\n    # This solution is based on the original code from here: https://www.geeksforgeeks.org/python-sorting-list-in-place-in-python/\n    # The solution is more efficient than the code on the web, but it can be much more efficient, and can be more comfortable with the pseudocode.\n    # For this solution, the time complexity is O(nlogn) for both the primary and secondary sorting, and the space complexity is O(n) for both sorting operations.\n    # This solution uses Python's random sort method (see random.random() for details)\n    '''\n    for i in range(len(arr)):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n        \n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start >= end:\n        return -1\n    mid = start + (end - start) // 2\n    if array[mid] == mid:\n        return array[mid]\n    if array[mid] < mid:\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    if start > end:\n        return -1\n    \n    middle = (start+end)//2\n    \n    if array[middle] == array[end]:\n        return middle\n    \n    if array[middle] > array[end]:\n        return find_First_Missing(array,start,middle-1)\n    \n    return find_First_Missing(array,middle+1,end)\n    \n    \n    \ndef binarySearch(array,start,end,key):\n    if start > end:\n        return -1\n    \n    mid = (start+end)//2\n    if array[mid] == key:\n        return mid\n    elif array[mid] > key:\n        return binarySearch(array,start,mid-1,key)\n    else:\n        return binarySearch(array,mid+1,end,key)\n    \n    \ndef test():\n    print(\"Given array:\")\n    print(nums)\n    print(\"\\nExpected output:\")\n    print(\"3\")\n    \n    print(\"\\nActual output:\")\n    print(find_First_Missing(nums))\n    print(\"\\n\")\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    while start<=end:\n        if array[start]==array[end]:\n            end-=1\n        else:\n            if array[start]<=array[end]:\n                start+=1\n            else:\n                end-=1\n    return array[start]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end - start < 0:\n        return -1\n    if array[start] == array[end]:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] < array[mid + 1]:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array,start, mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    \n    if start<=end:\n        mid=start+(end-start)//2\n        if array[mid]==mid:\n            return mid\n        elif array[mid]>mid:\n            return find_First_Missing(array,start=mid+1,end=end)\n        else:\n            return find_First_Missing(array,start=start,end=mid-1)\n    else:\n        return None\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None: end = len(array)-1\n    if end == 0: end = len(array) -1\n    if start >= end: return -1\n    if array[start] == array[end]: return array[start]\n    \n    mid = int((start + end) / 2)\n    if array[mid] == array[mid+1]:\n        return array[mid+1]\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    i=start\n    while (i<=end):\n        if (array[i]!= array[i+1]):\n            return array[i]\n        i+=1\n    return -1\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    #find all characters\n    chars = list(string)\n    \n    #loop through the string\n    for i in range(len(string)):\n        if string[i].isspace():\n            #add a %20 to the end of each character\n            string = string[:i] + '%20' + string[i+1:]\n    \n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n    \n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    result = string.replace(' ', '%20')\n    return result\n    \ndef main():\n    '''\n    Write a program to get a string and split it by space.\n    '''\n    \n    string = 'Hello World'\n    print(replace_spaces(string))\n    \nmain("
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20'"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = re.sub(' +', '%20', string)\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n    \n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    def even_numbers(list): \n        '''\n        Write a python function to find even numbers from a list of numbers.\n        '''\n        even_numbers = []\n        for num in list: \n            if num % 2 == 0: \n                even_numbers.append(num)\n        return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    odd_list = [] \n    for element in list: \n        if element%2==0: \n            even_list.append(element) \n        else: \n            odd_list.append(element) \n    return odd_list, even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for i in list: \n        if i % 2 == 0: \n            evens.append(i)\n    return evens"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Evens = [] \n    # for loop will iterate through the list and check if even number\n    for i in list:\n        if i % 2 == 0:\n            # add even number to list and make its last number as even\n            Evens.append(i)\n    return Evens\n    \n    \nif __name__ == '__main__':\n    \n    l = [3, 5, 4, 2, 1]\n    print(Split(l)) \n    \n    l2 = [1, 2, 3, 4]\n    print(Split(l2))\n    \n    print('Example 1:')\n    print('Input : ')\n    print('nums = [1,2,3,4,5,6,7,8,9,10]')\n    print('Exception :')\n    print('[1,2,3,4,5,6,7,8,9,10]')\n    print('Output :')\n    print(Split(l2))\n    \n    print('Example 2:')\n    print('Input : ')\n    print('nums = [1,2,3,4,5]')\n    print('Exception :')\n    print('[1,2,3,4]')\n    print('Output :')\n    print(Split(l2))\n    \n    print('Example 3:')\n    print('Input : ')\n    print('nums = [1,1,1,1,1]')\n    print('Exception :')\n    print('[1,1,1]')\n    print('Output :')\n    print(Split(l2))\n    \n    print('Example 4:')\n    print('Input : ')\n    print('nums = [1,2,3,4,5,6,7,8,9,10]')\n    print('Exception :')\n    print('[1,2,3,4,5,6,7,8,9,10]')\n    print('Output :')\n    print(Split(l2))\n    \n    print('Example 5:')\n    print('Input : ')\n    print('nums = [1,1,1,1,1,1]')\n    print('Exception :')\n    print('[]')\n    print('Output :')\n    print(Split(l2)"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    return [n for n in list if n % 2 == 0]\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    odd_list = [] \n    for number in list: \n        if number%2 == 0: \n            odd_list.append(number) \n    print(odd_list) \n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for n in list:\n        if n % 2 == 0:\n            even.append(n)\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for item in list:\n        if item % 2 == 0:\n            even_list.append(item)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list=[]\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in ele:\n        if sub == []:\n            sub.append(i)\n        else:\n            adjac(i, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    if ele in sub: return\n    sub.append(ele)\n    \n    return adjac(ele[0], sub) + adjac(ele[1], sub)\n    \ndef check_triplet(coord):\n    '''\n    Check if the triplet has a circular symmetry.\n    '''\n    \n    if len(coord) == 2: return False\n    \n    if coord[0] in coord[1:]: return False\n    \n    return True\n    \ndef check_circle(coord):\n    '''\n    Check if the triplet has a circular symmetry.\n    '''\n    \n    if len(coord)!= 2: return False\n    \n    if coord[0] == coord[1]: return False\n    \n    return True\n    \ndef remove_coords(coord):\n    '''\n    Remove all the coordinates.\n    '''\n    \n    return (coord[0], coord[1], coord[2])\n    \ndef dist(coord1, coord2):\n    '''\n    Return the distance between the coordinates.\n    '''\n    \n    return abs(coord1[0] - coord2[0]) + abs(coord1[1] - coord2[1])\n    \ndef d(coord1, coord2):\n    '''\n    Return the distance between the coordinates.\n    '''\n    \n    return dist(coord1, coord2)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    if ele in sub: \n        return \n    sub.append(ele) \n    adjac(ele[0], sub) \n    adjac(ele[1], sub) \n    return \n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return (ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    if x > 0: \n        if ele[0] == 0 or ele[0] == 0xFF:\n            sub.append([x-1,y])\n        else:\n            adjac(x-1, sub)\n    if x < 0xFF:\n        if ele[0] == 0 or ele[0] == 0xFF:\n            sub.append([x+1,y])\n        else:\n            adjac(x+1, sub)\n    if y > 0:\n        if ele[1] == 0 or ele[1] == 0xFF:\n            sub.append([x,y-1])\n        else:\n            adjac(x, sub)\n    if y < 0xFF:\n        if ele[1] == 0 or ele[1] == 0xFF:\n            sub.append([x,y+1])\n        else:\n            adjac(x, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    coord = ele \n    x = coord[0]\n    y = coord[1]\n    z = coord[2]\n    if sub == []:\n        sub = []\n    if x!= 0:\n        if y!= 0 and x!= 0:\n            sub.append([x - 1, y - 1, z])\n        if y!= 0:\n            sub.append([x - 1, y, z])\n        if x!= 0:\n            sub.append([x - 1, y + 1, z])\n    if y!= 0:\n        if z!= 0 and x!= 0:\n            sub.append([x, y - 1, z - 1])\n        if z!= 0:\n            sub.append([x, y - 1, z])\n        if z!= 0:\n            sub.append([x, y, z - 1])\n    if x!= 0:\n        if z!= 0 and y!= 0:\n            sub.append([x - 1, z - 1, y - 1])\n        if z!= 0:\n            sub.append([x - 1, z, y - 1])\n        if y!= 0:\n            sub.append([x - 1, z + 1, y - 1])\n    if y!= 0:\n        if x!= 0:\n            sub.append([x, y - 1, z])\n        if y!= 0:\n            sub.append([x, y, z])\n        if x!= 0:\n            sub.append([x, y + 1, z])\n    if z!= 0:\n        if x!= 0:\n            sub.append([x, y, z - 1])\n        if z!= 0:\n            sub.append([x, y, z])\n        if x!= 0:\n            sub.append([x, y + 1, z])\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2: \n        if ele[1] == ele[0]:\n            sub.append(ele)\n            return adjac(ele, sub)\n        if ele[1] in sub: \n            return sub\n    elif len(ele) == 3: \n        if ele[0] == ele[1]: \n            sub.append(ele)\n            return adjac(ele, sub)\n        if ele[0] in sub:\n            return sub\n        if ele[1] in sub:\n            sub.append(ele)\n            return adjac(ele, sub)\n    else:\n        return sub\ndef calc(coord, digits, mat):\n    '''\n    Approximate the distance between a coordinate and a given digit.\n    '''\n    c = adjac(coord)\n    p = []\n    for i in c:\n        if i[0] in digits:\n            p.append(i[1])\n    for j in p:\n        if j in digits:\n            if mat[i[0]][j]!= 0:\n                if mat[i[0]][j] not in c:\n                    mat[i[0]][j] = mat[i[0]][j] + 1\n                else:\n                    mat[i[0]][j] = mat[i[0]][j] + 1\n            else:\n                if mat[i[0]][j] == 0:\n                    mat[i[0]][j] = 1\n                    \ndef backtracking(i, depth):\n    '''\n    Recursive function to solve a specific game of chess.\n    '''\n    if depth == 4:\n        return\n    if i == n*n:\n        return\n    backtracking(i + 1, depth + 1)\n    for j in range(n):\n        coord = (i, j)\n        if not visited[coord] and mat[coord[0]][coord[1]] == 0:\n            visited[coord] = True\n            adjac(coord)\n            backtracking(i + 1, depth + 1)\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n    else:\n        return adjac(sub[-1], sub + [ele])\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele[0])\n    sub.append(ele[1])\n    if ele[0] > 0: \n        adjac(ele[0], sub)\n    if ele[1] > 0: \n        adjac(ele[1], sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    if ele in sub:\n        return\n    sub.append(ele)\n    adjac(ele[0], sub)\n    adjac(ele[1], sub)\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return re.sub(' +',' ',text).replace('_',' ').replace('(','').replace(')','').replace(' ','_').replace(' ','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"\\n\", \"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('-','_').replace('.','_').replace('.','_').replace('_',' ')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('-', '_')\n    text = text.replace('.', '_')\n    text = text.replace(':', '_')\n    text = text.replace('!', '_')\n    text = text.replace('?', '_')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\"  \",\" _ \")\n    text = text.replace(\"  \",\" _\")\n    text = text.replace(\" _ \",\"_ \")\n    text = text.replace(\" _ \",\"_\")\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text_with_underscores = text.replace(' ', '_').replace('\\n', '_').replace('\\t', '_')\n    return text_with_underscores\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('\\n', '_').replace('\\t', '_').replace('\\r', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_'.join(text.replace('  ', '_').split())\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # YOUR CODE HERE\n    #get the text string\n    text = text.replace(' ', '_')\n    #get the text into a list\n    text_list = text.split('_')\n    #make the new text into a string\n    text_new = \"\"\n    for i in range(len(text_list)):\n        if i == len(text_list) - 1:\n            text_new = text_new + text_list[i]\n        else:\n            text_new = text_new + text_list[i] + \" \"\n    #print(text_new)\n    return text_new\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = 0\n            if num_list[i-1] == 0:\n                num_list.insert(i,0)\n            elif num_list[i-1] == 0:\n                num_list.insert(i,0)\n                num_list.pop()\n            else:\n                num_list.pop(i)\n            \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) <= 1:\n        return num_list\n    \n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = 0\n            \n    num_list = num_list[::-1]\n    \n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            num_list[i]=-num_list[i]\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list[i])\n            del num_list[i]\n            break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0,len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(0)\n    return num_list\n    \n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for element in num_list:\n        if element!= 0:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            del num_list[i]\n            i -= 1\n        else:\n            i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for item in num_list:\n        if item!= 0:\n            new_list.append(item)\n    return new_list\n    \ndef test_move_zero():\n    num_list = [1, 2, 3, 0, 0, 0, 5, 6, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 6, 0, 0, 0, 5, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i!= 0:\n            i = num_list.index(i)\n            num_list = num_list[0:i] + [0] + num_list[i:]\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sums = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            xor_sums = xor_sums ^ arr[i] & arr[j]\n    return xor_sums\n    \ndef xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sums = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            xor_sums = xor_sums ^ arr[i] & arr[j]\n    return xor_sums\n    \ndef pair_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sums = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            xor_sums = xor_sums ^ arr[i] ^ arr[j]\n    return xor_sums\n    \ndef xor_Sum2(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sums = 0\n    for i in range(0,n) : \n        for j in range(i+1,n) : \n            xor_sums = xor_sums ^ arr[i] ^ arr[j]\n    return xor_sums\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) == n : return sum(arr)\n    else : return None\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n-1) : \n        xor = xor ^ arr[i]\n    return xor\ndef xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n-1) : \n        xor = xor ^ arr[i]\n    return xor\ndef max_Sum(arr) : \n    '''\n    Write a python function to find the maximum sum of all pairs of numbers in the given list.\n    '''\n    max_sum = 0\n    for i in range(len(arr)-1) : \n        max_sum = max_sum + arr[i]\n    return max_sum\ndef max_Sum_List(arr) : \n    '''\n    Write a python function to find the maximum sum of all pairs of numbers in the given list.\n    '''\n    max_sum = 0\n    for i in range(len(arr)-1) : \n        max_sum = max_sum + arr[i]\n    return max_sum\ndef max_Sum_Sum(arr) : \n    '''\n    Write a python function to find the maximum sum of all pairs of numbers in the given list.\n    '''\n    max_sum = 0\n    for i in range(len(arr)-1) : \n        max_sum = max_sum + arr[i]\n    return max_sum\ndef min_Sum(arr) : \n    '''\n    Write a python function to find the minimum sum of all pairs of numbers in the given list.\n    '''\n    min_sum = arr[0]\n    for i in range(1,len(arr)) : \n        min_sum = min(arr[i],min_sum)\n    return min_sum\ndef min_Sum_List(arr) : \n    '''\n    Write a python function to find the minimum sum of all pairs of numbers in the given list.\n    '''\n    min_sum = arr[0]\n    for i in range(1,len(arr)) : \n        min_sum = min(arr[i],min_sum)\n    return min_sum\ndef sum_Sum(arr) : \n    '''\n    Write a python function to find the sum of all pairs of numbers in the given list.\n    '''\n    sum_sum = arr[0]\n    for i in range(1,len(arr)) : \n        sum_sum = sum_sum + arr[i]\n    return sum_sum\ndef sum_Sum_List(arr) : \n    '''\n    Write a python function to find the sum of all pairs of numbers in the given list.\n    '''\n    sum_sum = 0\n    for i in range(len(arr)) : \n        sum_sum = sum_sum + arr[i]\n    return sum_sum\ndef sum_Sum_Sum(arr) : \n    '''\n    Write a python function to find the sum of all pairs of numbers in the given list.\n    '''\n    sum_sum = 0\n    for i in range(len(arr)) : \n        sum_sum = sum_sum + arr[i]\n    return sum_sum\ndef sum_Sum_Sum_List(arr) : \n    '''\n    Write a python function to find the sum of all pairs of numbers in the given list.\n    '''\n    sum_sum = 0\n    for i in range(len(arr)) : \n        sum_sum = sum_sum + arr[i]\n    return sum_sum\ndef multiplication_List(arr) : \n    '''\n    Write a python function to find the sum of all pairs of numbers in the given list.\n    '''\n    multiplication_sum = 1\n    for i in range(len(arr)) : \n        multiplication_sum = multiplication_sum * arr[i]\n    return multiplication_sum\ndef multiplication_Sum(arr) : \n    '''\n    Write a python function to find the sum of all pairs of numbers in the given list.\n    '''\n    multiplication_sum = 0\n    for i in range(len(arr)) : \n        multiplication_sum = multiplication_sum + arr[i]\n    return multiplication_sum\ndef multiplication_Sum_List(arr) : \n    '''\n    Write a python function to find the sum of all pairs of numbers in the given list.\n    '''\n    multiplication_sum = 0\n    for i in range(len(arr)) : \n        multiplication_sum = multiplication_sum + arr[i]\n    return multiplication_sum\ndef multiplication_Sum_Sum(arr) : \n    '''\n    Write a python function to find the sum of all pairs of numbers in the given list.\n    '''\n    multiplication_sum = 0\n    for i in range(len(arr)) : \n        multiplication_sum = multiplication_sum + arr[i]\n    return multiplication_sum\ndef dot_product(arr) : \n    '''\n    Write a python function to find the dot product of all pairs of numbers in the given list.\n    '''\n    dot_product_sum = 0\n    for i in range(len(arr)) : \n        dot_product_sum = dot_product_sum + arr[i]\n    return dot_product_sum\ndef dot_product_List(arr) : \n    '''\n    Write a python function to find the dot product of all pairs of numbers in the given list.\n    '''\n    dot_product_sum = 0\n    for i in range(len(arr)) : \n        dot_product_sum = dot_product_sum + arr[i]\n    return dot_product_sum\ndef dot_product_Sum(arr) : \n    '''\n    Write a python function to find the dot product of all pairs of numbers in the given list.\n    '''\n    dot_product_sum = 0\n    for i in range(len(arr)) : \n        dot_product_sum = dot_product_sum + arr[i]\n    return dot_product_sum\ndef dot_product_Sum_List(arr) : \n    '''\n    Write a python function to find the dot product of all pairs of numbers in the given list.\n    '''\n    dot_product_sum = 0\n    for i in range(len(arr)) : \n        dot_product_sum = dot_product_sum + arr[i]\n    return dot_product_sum\ndef mod_List(arr) : \n    '''\n    Write a python function to find the mod of all pairs of numbers in the given list.\n    '''\n    mod_sum = arr[0]\n    for i in range(1,len(arr)) : \n        mod_sum = mod_sum % arr[i]\n    return mod_sum\ndef mod_Sum(arr) : \n    '''\n    Write a python function to find the mod of all pairs of numbers in the given list.\n    '''\n    mod_sum = arr[0]\n    for i in range(1,len(arr)) : \n        mod_sum = mod_sum % arr[i]\n    return mod_sum\ndef mod_Sum_List(arr) : \n    '''\n    Write a python function to find the mod of all pairs of numbers in the given list.\n    '''\n    mod_sum = arr[0]\n    for i in range(1,len(arr)) : \n        mod_sum = mod_sum % arr[i]\n    return mod_sum\ndef mod_Sum_Sum(arr) : \n    '''\n    Write a python function to find the mod of all pairs of numbers in the given list.\n    '''\n    mod_sum = arr[0]\n    for i in range(1,len(arr)) : \n        mod_sum = mod_sum % arr[i]\n    return mod_sum\ndef mod_Sum_Sum_List(arr) : \n    '''\n    Write a python function to find the mod of all pairs of numbers in the given list.\n    '''\n    mod_sum = arr[0]\n    for i in range(1,len(arr)) : \n        mod_sum = mod_sum % arr[i]\n    return mod_sum\ndef mod_Sum_Sum_Sum(arr) : \n    '''\n    Write a python function to find the mod of all pairs of numbers in the given list"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # get the lengths of the list\n    l = len(arr)\n    # initialize the first row of the result array with 0's\n    res = [0] * (l*l)\n    # create the first column with the values of the elements\n    res[0] = arr[0]\n    # go over the array and for each element in the array\n    for i in range(1,l):\n        # find the first element in the array\n        res[i] = arr[i] ^ res[i-1]\n    # go over the rest of the array and for each element in the array\n    for i in range(l-2, -1, -1):\n        # find the first element in the array\n        res[i] = arr[i] ^ res[i+1]\n    # return the result\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            x = x ^ arr[i] ^ arr[j]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    y = 0\n    a = []\n    b = []\n    for i in range(len(arr)) :\n        if arr[i] == 1 :\n            x += 1\n        if arr[i] == 2 :\n            y += 1\n    for i in range(n) :\n        a.append(x)\n        b.append(y)\n    return a,b\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #initialize sum of xor of all pairs\n    sum_xor = 0\n    #find pairs of numbers\n    for i in range(n) :\n        for j in range(i,n) :\n            sum_xor += arr[i]^arr[j]\n    return sum_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # calculate sum of all xor of all pairs of numbers in the given list\n    s = 0\n    for i in range(n) :\n        s += arr[i]\n    # return result\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    hq.heapify(h)\n    for i in iterable:\n        hq.heappush(h,-i)\n    return h\n    \ndef k_largest_values(items, k):\n    '''\n    Sort the given list.\n    '''\n    items.sort()\n    return items[:k]\n    \n    "
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    maxheap = []\n    for value in iterable:\n        hq.heappush(maxheap, value)\n    for i in range(len(maxheap) - 1):\n        hq.heappop(maxheap)\n    return maxheap\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = len(iterable)\n    h = []\n    for i in range(l):\n        hq.heappush(h, iterable[i])\n    \n    for i in range(l - 1, 0, -1):\n        hq.heapify(h)\n        hq.heappush(h, hq.heappop(h) + hq.heappop(h))\n        hq.heapify(h)\n    return h\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Your code here\n    # if len(iterable) < 1:\n    #     return iterable\n    # return sorted(iterable, reverse=True)\n    \n    # Runtime: O(n^2)\n    return sorted(iterable, key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list into a heap.\n    # You can use the built-in \"heapq\" module.\n    # You can sort the list by repeatedly calling the\n    # heap_sort function, but it will take more than\n    # 10 seconds to sort the list.\n    # You can also use the \"heapq\" module.\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        for j in range(len(iterable) - 1):\n            if iterable[j] > iterable[j+1]:\n                temp = iterable[j]\n                iterable[j] = iterable[j+1]\n                iterable[j+1] = temp\n    # The output list is the same as the input list.\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def swap(i,j):\n        '''\n        Use the'swap' function in the heapq module to swap the two elements at indices i and j.\n        '''\n        temp = iterable[i]\n        iterable[i] = iterable[j]\n        iterable[j] = temp\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        swap(i,len(iterable)-1-i)\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        swap(0,i)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def _sort(iterable, descending):\n        for i, item in enumerate(iterable):\n            if not descending:\n                yield item\n            else:\n                yield item\n                if i == len(iterable) - 1:\n                    yield from _sort(iterable[0:i], False)\n        # end of for\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def heapify(tree, k):\n        n = len(tree)\n        for i in range(k, n):\n            tree[i] = tree[i//2]\n            heapq.heapify(tree, i)\n    def construct_heap(tree, list):\n        '''\n        Construct a heap from a list.\n        '''\n        heap = []\n        for item in list:\n            heapq.heappush(heap, (item, 0))\n        for i in range(len(tree) - 1, -1, -1):\n            tree[i] = heapq.heappop(heap)[1]\n    def count_to_place(tree, num):\n        '''\n        Count number of occurrences of the target number.\n        '''\n        n = len(tree)\n        for i in range(n):\n            if tree[i] == num:\n                return 1\n        return 0\n    def insertion_sort(tree, list):\n        '''\n        Sort the given list and return it.\n        '''\n        tree = [None] * len(list)\n        for item in list:\n            index = count_to_place(tree, item)\n            if index > 0:\n                for i in range(index):\n                    tree[i] = tree[i+1]\n                tree[index] = item\n        return tree\n    def merge_sort(tree, list):\n        '''\n        Sort the given list and return it.\n        '''\n        if len(list) <= 1:\n            return list\n        mid = len(list) // 2\n        left = merge_sort(tree, list[:mid])\n        right = merge_sort(tree, list[mid:])\n        return merge(left, right)\n    def merge(tree, list):\n        '''\n        Merge the given list and return it.\n        '''\n        result = []\n        left = 0\n        right = 0\n        while left < len(list) and right < len(list):\n            if list[left] < list[right]:\n                result.append(list[left])\n                left += 1\n            else:\n                result.append(list[right])\n                right += 1\n        while left < len(list):\n            result.append(list[left])\n            left += 1\n        while right < len(list):\n            result.append(list[right])\n            right += 1\n        return result\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, (item, 0))\n    while heap:\n        n1, n2 = heapq.heappop(heap)\n        if n1!= n2:\n            return None\n    return list"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)):\n        hq.heappush(iterable, -iterable[i])\n        \n    for j in range(len(iterable)):\n        hq.heappop(iterable)\n        \n    return iterable\n    "
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for x in iterable:\n        hq.heappush(h, (x,x.priority))\n    for i in range(len(h)):\n        hq.heappop(h)\n    return [x[1] for x in hq]\ndef is_sorted(arr):\n    '''\n    Write a function to check whether a given list is sorted.\n    '''\n    return len(arr) == len(set(arr))\ndef heap_sort_asc(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for x in iterable:\n        hq.heappush(h, (x,x.priority))\n    for i in range(len(h)):\n        hq.heappop(h)\n    return [x[1] for x in hq]\ndef is_sorted_asc(arr):\n    '''\n    Write a function to check whether a given list is sorted.\n    '''\n    return len(arr) == len(set(arr))\ndef heap_sort_desc(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for x in iterable:\n        hq.heappush(h, (x,x.priority))\n    for i in range(len(h)):\n        hq.heappop(h)\n    return [x[1] for x in hq]\ndef is_sorted_desc(arr):\n    '''\n    Write a function to check whether a given list is sorted.\n    '''\n    return len(arr) == len(set(arr))\ndef heap_sort_dec(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for x in iterable:\n        hq.heappush(h, (x,x.priority))\n    for i in range(len(h)):\n        hq.heappop(h)\n    return [x[1] for x in hq]\ndef is_sorted_dec(arr):\n    '''\n    Write a function to check whether a given list is sorted.\n    '''\n    return len(arr) == len(set(arr))\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    loss= actual_cost-profit\n    if profit==0 and loss==0:\n        return True\n    elif profit==0 and loss!=0:\n        return False\n    else:\n        return noprofit_noloss(profit,loss)\n    \ndef profit_noprofit(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit(actual_cost,sale_amount)\n        \ndef write_to_file(filename, actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if profit_noprofit(actual_cost,sale_amount) == True:\n        with open(filename, 'w') as f:\n            f.write(\"No Profit!\")\n    else:\n        with open(filename, 'w') as f:\n            f.write(\"Profit!\")\n        \ndef profit_noprofit2(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit2(actual_cost,sale_amount)\n        \ndef profit_noprofit2(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit2(actual_cost,sale_amount)\n        \ndef write_to_file2(filename, actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if profit_noprofit2(actual_cost,sale_amount) == True:\n        with open(filename, 'w') as f:\n            f.write(\"No Profit!\")\n    else:\n        with open(filename, 'w') as f:\n            f.write(\"Profit!\")\n        \ndef profit_noprofit2(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit2(actual_cost,sale_amount)\n        \ndef profit_noprofit2(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit2(actual_cost,sale_amount)\n        \n    \ndef profit_noprofit3(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit3(actual_cost,sale_amount)\n        \ndef profit_noprofit3(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit3(actual_cost,sale_amount)\n        \ndef profit_noprofit4(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit4(actual_cost,sale_amount)\n        \ndef profit_noprofit4(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit4(actual_cost,sale_amount)\n        \ndef profit_noprofit5(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit5(actual_cost,sale_amount)\n        \ndef profit_noprofit5(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit5(actual_cost,sale_amount)\n        \ndef profit_noprofit6(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit6(actual_cost,sale_amount)\n        \ndef profit_noprofit6(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit6(actual_cost,sale_amount)\n        \ndef profit_noprofit7(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit7(actual_cost,sale_amount)\n        \ndef profit_noprofit7(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit7(actual_cost,sale_amount)\n        \ndef profit_noprofit8(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit8(actual_cost,sale_amount)\n        \ndef profit_noprofit8(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit!=0:\n        return True\n    else:\n        return profit_noprofit8(actual_cost,sale_amount)\n        \ndef profit_noprofit9(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost/sale_amount\n    if profit==0 and profit"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    min_profit = float(actual_cost) * 1.05\n    min_loss = float(sale_amount) * 0.98\n    if min_profit < min_loss:\n        return 'profit'\n    else:\n        return 'loss'\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < 0:\n        return False\n    if sale_amount <= 0:\n        return False\n    if sale_amount > actual_cost:\n        return False\n    return True\ndef noprofit_insufficient_cost(actual_cost, sale_amount):\n    '''\n    Write a function that checks whether the given amount has no profit and no loss\n    '''\n    if actual_cost < 0:\n        return False\n    if sale_amount <= 0:\n        return False\n    if sale_amount > actual_cost:\n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # nope, you have to check if the actual_cost is < sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <=0:\n        return True,0\n    if sale_amount <=0:\n        return False,0\n    if sale_amount <=actual_cost:\n        return True,actual_cost-sale_amount\n    if sale_amount >=actual_cost:\n        return True,0\n    return False,0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = 0\n    if actual_cost > sale_amount:\n        profit = actual_cost - sale_amount\n    return profit\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return sale_amount*actual_cost <= 0\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # TODO\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == 0:\n        return True\n    else:\n        if sale_amount > actual_cost:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = (sale_amount - actual_cost)\n    noprob = ((sale_amount - actual_cost)**2)/(actual_cost)\n    noprob = round(noprob,2)\n    if (noprob > 0) :\n        print(\"The profit: {0} has been achieved\".format(profit))\n        print(\"No profit\")\n    else:\n        print(\"The profit: {0} has been achieved\".format(profit))\n        print(\"No loss\")\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Calculate the wind chill\n    w = (9 * v * t * math.exp(9.0 / 5.0)) / (v + 273.15)\n    #Round the wind chill index\n    w = int(round(w))\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 0.6215\n    if t == 273.15:\n        if v <= 10:\n            return v\n        if v <= 20:\n            return v - 10\n        if v <= 30:\n            return v - 20\n        if v <= 40:\n            return v - 30\n        if v <= 50:\n            return v - 40\n        if v <= 60:\n            return v - 50\n        if v <= 70:\n            return v - 60\n        if v <= 80:\n            return v - 70\n        if v <= 90:\n            return v - 80\n        if v <= 100:\n            return v - 90\n    elif t >= 273.15 and t <= 300:\n        if v <= 80:\n            return v - 80\n        if v <= 90:\n            return v - 90\n    elif t >= 300 and t <= 360:\n        if v <= 60:\n            return v - 60\n        if v <= 70:\n            return v - 70\n        if v <= 80:\n            return v - 80\n        if v <= 90:\n            return v - 90\n        if v <= 100:\n            return v - 100\n    elif t >= 360 and t <= 500:\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 500 and t <= 600:\n        if v <= 60:\n            return v - 60\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 600 and t <= 700:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 700 and t <= 800:\n        if v <= 40:\n            return v - 40\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 800 and t <= 1000:\n        if v <= 30:\n            return v - 30\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 1000 and t <= 2000:\n        if v <= 10:\n            return v - 10\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 2000 and t <= 3000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 3000 and t <= 4000:\n        if v <= 30:\n            return v - 30\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 4000 and t <= 5000:\n        if v <= 40:\n            return v - 40\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 5000 and t <= 6000:\n        if v <= 30:\n            return v - 30\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 6000 and t <= 7000:\n        if v <= 30:\n            return v - 30\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 7000 and t <= 8000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 8000 and t <= 9000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 9000 and t <= 10000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 10000 and t <= 12000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 12000 and t <= 14000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 14000 and t <= 15000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 15000 and t <= 17000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 17000 and t <= 18000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 18000 and t <= 19000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 19000 and t <= 20000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 20000 and t <= 24000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 24000 and t <= 28000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 28000 and t <= 31000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 31000 and t <= 35000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 35000 and t <= 38000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 38000 and t <= 41000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 41000 and t <= 44000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 44000 and t <= 46000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 46000 and t <= 47000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 47000 and t <= 51000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 51000 and t <= 55000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 55000 and t <= 58000:\n        if v <= 50:\n            return v - 50\n        if v <= 70:\n            return v - 70\n        if v <= 90:\n            return v - 90\n    elif t >= 58000 and t <= 60000"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 0:\n        return 9999\n    else:\n        #define default values\n        sigma = 0.44\n        beta = 0.16\n        p_0 = 2.25\n        r = 0.62\n        v_0 = 3.6\n        k_0 = 2.37\n        #define wind chill\n        c = (v*(beta**(t/p_0)) + p_0*r*math.log(r) + (r-v_0)*k_0) / (r*beta)\n        return round(c,2)\n    \ndef wind_chill_error(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #define default values\n    sigma = 0.44\n    beta = 0.16\n    p_0 = 2.25\n    r = 0.62\n    v_0 = 3.6\n    k_0 = 2.37\n    #define wind chill\n    c = (v*(beta**(t/p_0)) + p_0*r*math.log(r) + (r-v_0)*k_0) / (r*beta)\n    #calculate the error\n    error = math.pow((v-c),2)\n    error = math.pow(math.pow(math.pow(sigma,error),1/sigma),1)\n    return round(c,2) - error\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (9.0/5.0)\n    h = (v * (9.0/5.0)) + 32.0\n    h_chill = (h * c)\n    h_chill = math.floor(h_chill)\n    t_chill = (t * c)\n    t_chill = math.floor(t_chill)\n    \n    return h_chill, t_chill\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = v*v*9.67*t*t/(3.0 + 0.6215*t + 0.2365*t**2)\n    if wc > 100:\n        wc = 100\n    elif wc < 0:\n        wc = 0\n    return round(wc,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Getting the input values\n    wind_chill = 23.5 + (0.75*v) + (0.4*t)\n    wind_chill = wind_chill/100\n    return wind_chill\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Code goes here\n    return round(v/3.6 + 35.75,1)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return round(v/3.6 + 35,2)\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Wind chill index is calculated as\n    #E(T) = 20 + (9.75 * T^4 + 0.62 * T^3 + 0.01 * T^2) / T\n    #where T is the temperature in celsius and E(T) is the wind chill index.\n    #E(T) = 20 + (9.75 * T^4 + 0.62 * T^3 + 0.01 * T^2) / T\n    #H is the set point where the wind chill index is to be found.\n    #H = 9.75 * T^4 + 0.62 * T^3 + 0.01 * T^2\n    #where T is the temperature in celsius and H is the set point where the wind chill index is to be found.\n    return ((20 + 9.75 * math.pow(math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2)),2) - 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3))) / (9.75 * math.pow(math.pow(math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),2) - 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3))) / (9.75 * math.pow(math.pow(math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2) - 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3)),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3),3) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2) + 0.01 * math.pow(v,2),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2) + 0.01 * math.pow(v,2),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2) + 0.01 * math.pow(v,2),2),3))) / (9.75 * math.pow(math.pow(math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2) - 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2),2),3) + 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(v,3) + 0.01 * math.pow(v,2) + 0.01 * math.pow(v,2),2),3))) / (9.75 * math.pow(math.pow(math.pow(math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(math.pow(math.pow(math.pow(v,3) + 0.01 * math.pow(v,2) + 0.01 * math.pow(v,2),2) - 0.01 * math.pow(math.pow(v,4) + 0.62 * math.pow(math.pow(math.pow(v,3) + 0.01 * math.pow(v,2) + 0.01 * math."
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    import math\n    import math as m\n    import datetime\n    from datetime import datetime as dt\n    import csv\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from matplotlib.lines import Line2D\n    import matplotlib.ticker as ticker\n    import matplotlib.font_manager as fm\n    \n    def wind_chill_dict(num,div,wind_chill):\n        \n        if (num==0):\n            return 0\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name.lower()) for name in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_count = 0\n    for name in sample_names:\n        if name[0].islower():\n            nam_count += len(name)\n    return nam_count\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_list = []\n    for name in sample_names:\n        if name[0].islower():\n            nam_list.append(name)\n    return nam_list\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    len_names = []\n    for i in range(0, len(sample_names)):\n        if sample_names[i].startswith('a'):\n            len_names.append(len(sample_names[i]))\n    \n    new_names = []\n    for i in range(0, len(len_names)):\n        if len_names[i] > 1:\n            new_names.append(sample_names[i])\n    \n    print(new_names)\n    return new_names\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # YOUR CODE HERE\n    return sum([len(name.lower()) for name in sample_names])\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # sample_names = [\"Demarquee\", \"Demarc\", \"Demarc\", \"Demarc\", \"Demarc\", \"Demarc\"]\n    # sample_names = [\"demarc\", \"demarc\", \"Demarc\", \"Demarc\", \"Demarc\", \"Demarc\"]\n    # sample_names = [\"Demarc\", \"Demarc\", \"Demarc\", \"Demarc\", \"Demarc\", \"Demarc\"]\n    # sample_names = [\"demarc\", \"demarc\", \"Demarc\", \"Demarc\", \"Demarc\", \"Demarc\"]\n    sample_names = [\"Demarc\", \"Demarc\", \"Demarc\", \"Demarc\", \"Demarc\", \"Demarc\"]\n    return len(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Step 1: make a list of all the names\n    nam_list = []\n    for sample in sample_names:\n        nam_list.append(sample.split()[0])\n    # Step 2: get the length of the names\n    nam_len = len(nam_list)\n    # Step 3: find all the names that start with a lowercase letter\n    nam_lst_start = []\n    for i in range(nam_len):\n        nam_lst_start.append(nam_list[i].split()[0].lower())\n    # Step 4: the sum of the length of the names of the given list is equal to the length of the names\n    nam_len = len(nam_lst_start)\n    print(nam_lst_start)\n    return nam_len\n    # Step 5: we use the function to find the length of the names of the given list\n    \n    # Step 6: add the numbers to the list\n    \n    # Step 7: return the list\n    \n    \n    \nif __name__ == '__main__':\n    sample_names = [\"harry\", \"harvey\", \"harvey\", \"john\", \"mike\", \"john\", \"mike\", \"jane\", \"joe\", \"joe\"]\n    sample_nam(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_list = []\n    for i in sample_names:\n        if len(i.split(\"_\")[0].lower()) < 2:\n            sample_names_list.append(i)\n    return sample_names_list\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if type(items) is not list:\n        raise TypeError(\"items must be a list\")\n    new_items = []\n    for x in items:\n        new_items.append(re.sub('\\((.*?)\\)', '', x))\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    res=[]\n    for i in range(len(items)):\n        if items[i]=='(' or items[i]=='{' or items[i]=='[':\n            res.append(items[i])\n        else:\n            res.pop()\n    res.pop()\n    return ''.join(res)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Write your code here\n    if len(items) == 0:\n        return []\n    # if there are no parenthesis in the string\n    if len(items) <= 1:\n        return items\n    # if the string has more than one parenthesis\n    if len(items) > 2:\n        #print(\"items:\", items)\n        #print(\"len(items):\", len(items))\n        # remove the parenthesis\n        parsed_items = remove_parenthesis(items[:len(items) - 1])\n        # if there is more than one parenthesis\n        if len(parsed_items) > 1:\n            #print(\"parsed_items:\", parsed_items)\n            #print(\"len(parsed_items):\", len(parsed_items))\n            # find all the parenthesis\n            parenthesis = []\n            for item in parsed_items:\n                #print(\"item:\", item)\n                parenthesis.extend(item)\n                if parenthesis[-1] == \"(\" or parenthesis[-1] == \")\":\n                    parenthesis.pop()\n                    continue\n                break\n        # remove the parenthesis\n        #print(\"parsed_items:\", parsed_items)\n        #print(\"len(parsed_items):\", len(parsed_items))\n        # check the sub string\n        #print(\"parsed_items[0]:\", parsed_items[0])\n        #print(\"parsed_items[-1]:\", parsed_items[-1])\n        return parsed_items[:-1]\n    # if the string has only one parenthesis\n    if len(items) == 2:\n        #print(\"items:\", items)\n        #print(\"len(items):\", len(items))\n        parsed_items = remove_parenthesis(items[1:len(items) - 1])\n        # remove the parenthesis\n        #print(\"parsed_items:\", parsed_items)\n        #print(\"len(parsed_items):\", len(parsed_items))\n        return parsed_items\n    # if the string has more than one parenthesis\n    else:\n        return remove_parenthesis(items[1:len(items) - 1])\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 0:\n        return None\n    if len(items) == 1:\n        return items[0]\n    if len(items) == 2:\n        return items[0] + items[1]\n    if len(items) == 3:\n        return items[0] + items[1] + items[2]\n    else:\n        return items[0] + ''.join(remove_parenthesis(items[1:])) + ''.join(remove_parenthesis(items[2:]))\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return list(map(remove_parenth,items))\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    # initialize an empty list to store the parenthesis\n    parenthesis = []\n    \n    # iterate through the string and if it has any parenthesis\n    # put the parenthesis back together\n    for i in items:\n        if i == '(':\n            parenthesis.append('(')\n        elif i == ')':\n            # if parenthesis has at least 1 item and it has a '('\n            if len(parenthesis) > 0 and parenthesis[-1] == '(':\n                parenthesis.pop()\n            else:\n                return items\n        else:\n            # if there is only one item and it has a '('\n            if len(parenthesis) == 0 and parenthesis[-1] == '(':\n                parenthesis.append(')')\n            # if there is only one item and it has a '('\n            if len(parenthesis) == 1 and parenthesis[-1] == '(':\n                parenthesis.append('(')\n            else:\n                return items\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    my_list = []\n    for i in items:\n        if i[0]!= '(' and i[0]!= ')':\n            my_list.append(i)\n    # print(my_list)\n    new_list = []\n    for i in range(len(my_list)):\n        if my_list[i][0] == '(' or my_list[i][0] == ')':\n            new_list.append(my_list[i][1:-1])\n        else:\n            new_list.append(my_list[i])\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == ')':\n            result = result + ')'\n            break\n        if item == '(':\n            result = result + ')'\n            break\n    return result\ndef bracket_split(items):\n    '''\n    Write a function to split the string into a list of items (removes whitespace).\n    '''\n    result = []\n    for item in items:\n        if item!='':\n            result.append(item.strip())\n        else:\n            pass\n    return result\ndef find_parenthesis(string):\n    '''\n    Write a function to find the number of parenthesis in a string.\n    '''\n    p=0\n    for char in string:\n        if char == '(':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No parenthesis found'\n    return p\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == ')':\n            result = result + ')'\n            break\n        if item == '(':\n            result = result + ')'\n            break\n    return result\ndef bracket_split(items):\n    '''\n    Write a function to split the string into a list of items (removes whitespace).\n    '''\n    result = []\n    for item in items:\n        if item =='':\n            result.append(item)\n        else:\n            pass\n    return result\ndef find_parenthesis(string):\n    '''\n    Write a function to find the number of parenthesis in a string.\n    '''\n    p=0\n    for char in string:\n        if char == '(':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No parenthesis found'\n    return p\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == ')':\n            result = result + ')'\n            break\n        if item == '(':\n            result = result + ')'\n            break\n    return result\ndef bracket_split(items):\n    '''\n    Write a function to split the string into a list of items (removes whitespace).\n    '''\n    result = []\n    for item in items:\n        if item =='':\n            result.append(item)\n        else:\n            pass\n    return result\ndef find_parenthesis(string):\n    '''\n    Write a function to find the number of parenthesis in a string.\n    '''\n    p=0\n    for char in string:\n        if char == '(':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No parenthesis found'\n    return p\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == ')':\n            result = result + ')'\n            break\n        if item == '(':\n            result = result + ')'\n            break\n    return result\ndef bracket_split(items):\n    '''\n    Write a function to split the string into a list of items (removes whitespace).\n    '''\n    result = []\n    for item in items:\n        if item =='':\n            result.append(item)\n        else:\n            pass\n    return result\ndef count_open_brackets(items):\n    '''\n    Write a function to count the number of open brackets.\n    '''\n    p=0\n    for char in items:\n        if char == '(':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No brackets found'\n    return p\ndef count_close_brackets(items):\n    '''\n    Write a function to count the number of close brackets.\n    '''\n    p=0\n    for char in items:\n        if char == ')':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No brackets found'\n    return p\ndef count_open_bracket(items):\n    '''\n    Write a function to count the number of open bracket.\n    '''\n    p=0\n    for char in items:\n        if char == '(':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No brackets found'\n    return p\ndef count_close_bracket(items):\n    '''\n    Write a function to count the number of close bracket.\n    '''\n    p=0\n    for char in items:\n        if char == ')':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No brackets found'\n    return p\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == ')':\n            result = result + ')'\n            break\n        if item == '(':\n            result = result + ')'\n            break\n    return result\ndef remove_open_parenthesis(items):\n    '''\n    Write a function to remove the open parenthesis from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == '(':\n            result = result + ')'\n            break\n        if item == ')':\n            result = result + ')'\n            break\n    return result\ndef remove_close_parenthesis(items):\n    '''\n    Write a function to remove the close parenthesis from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == ')':\n            result = result + ')'\n            break\n        if item == '(':\n            result = result + ')'\n            break\n    return result\ndef count_open_parenthesis(items):\n    '''\n    Write a function to count the number of open parenthesis.\n    '''\n    p=0\n    for char in items:\n        if char == '(':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No brackets found'\n    return p\ndef count_close_parenthesis(items):\n    '''\n    Write a function to count the number of close parenthesis.\n    '''\n    p=0\n    for char in items:\n        if char == ')':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No brackets found'\n    return p\ndef count_open_parenthesis(items):\n    '''\n    Write a function to count the number of open parenthesis.\n    '''\n    p=0\n    for char in items:\n        if char == ')':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No brackets found'\n    return p\ndef count_close_parenthesis(items):\n    '''\n    Write a function to count the number of close parenthesis.\n    '''\n    p=0\n    for char in items:\n        if char == '(':\n            p+=1\n        else:\n            p-=1\n        if p < 0:\n            return 'No brackets found'\n    return p\ndef remove_brackets(items):\n    '''\n    Write a function to remove the brackets from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == '(':\n            result = result + ')'\n            break\n        if item == ')':\n            result = result + ')'\n            break\n    return result\ndef remove_brackets(items):\n    '''\n    Write a function to remove the brackets from a string.\n    '''\n    result = ''\n    for item in items:\n        if item == '(':\n            result = result + ')'\n            break\n        if item == ')':\n            result = result + ')'\n            break\n    return result\ndef remove_c"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # your code here\n    i = 0\n    while i < len(items) - 1:\n        if items[i] == '(':\n            items[i] = ''\n            items.pop(i+1)\n            i = i-1\n        i += 1\n    return ''.join(items)\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items=list(filter(lambda x:x!='(',items))\n    items=list(filter(lambda x:x!=',',items))\n    items=list(filter(lambda x:x!=')',items))\n    items=list(filter(lambda x:x!=']',items))\n    items=list(filter(lambda x:x!='}',items))\n    items=list(filter(lambda x:x!='<',items))\n    items=list(filter(lambda x:x!='>',items))\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    k = 0\n    while n > 1:\n        if n % 2 == 1:\n            if k > n - 2:\n                k = n - 2\n        n = n // 2\n        k += 1\n    return k\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0: return None\n    \n    for i in range(0, n):\n        if n % (2*i + 1) == 0:\n            return i + 1\n    \n    return n\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0: \n        return 1 \n    elif n == 1: \n        return 2 \n    else: \n        return is_nonagonal(n - 1) + is_nonagonal(n - 2)\n        \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n%2 == 0:\n        return n+1\n    else:\n        return n\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    print('[Problem: is_nonagonal] n = {}'.format(n))\n    return True"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    row = 0\n    while row < n: \n        if row == 0: \n            col = 0\n        elif row == n - 1: \n            col = n - 1\n        else: \n            col = row + 1\n            while col <= n - 1: \n                if col == n - 1: \n                    row += 1\n                else: \n                    col += 1\n        row += 1\n    return row \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n<3: \n        return n \n    else: \n        return n-1 \n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n%2): \n        return(n//2) \n    else:\n        return ((n//2) - 1)\n    \ndef get_nth_nonagonals(n): \n    '''\n    Return the nth nonagonals \n    '''\n    if (n%2): \n        nth_nonagonals = n//2\n    else: \n        nth_nonagonals = (n//2) - 1\n    return(nth_nonagonals)\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    if n % 2 == 0: \n        return n \n    return n + n_squares(n-1)\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return bool(re.search(r'[\\u0300-\\u036f\\u0441-\\u044f]', text))\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #Step 1: Match the word.\n    if re.search(r'z', text, re.IGNORECASE):\n        #Step 2: If there is a pattern:\n        #Step 3: If the pattern has the full word:\n        if re.search(r'^z$', text, re.IGNORECASE):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if 'z' not in text:\n        text = re.sub('z', 'z', text, flags=re.MULTILINE)\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"z\"\n    return re.search(pattern,text)!= None\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0] == 'z':\n        return False\n    else:\n        return True\ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the start of the word.\n    '''\n    if text[1] == 'z':\n        return False\n    else:\n        return True\ndef text_match_wordz_end_start(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if text[-1] == 'z':\n        return False\n    else:\n        return True\ndef text_match_wordz_start_end_last(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if text[-1] == 'z':\n        return False\n    else:\n        return True\ndef text_match_wordz_end_last(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the end of the word.\n    '''\n    if text[-1] == 'z':\n        return False\n    else:\n        return True\ndef text_match_wordz_middle_last(text):\n    '''\n    Write a function that checks if a string contains 'z', except at the middle of the word.\n    '''\n    if text[1] == 'z':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text.startswith('z'):\n        return False\n    if len(text) <= 2:\n        return False\n    if text.endswith('z'):\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub('^z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = re.sub('z+', '', text)\n    text = r"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_list = text.split()\n    wordz_middle_list = []\n    for i in range(0,len(text_list)-1):\n        if i>0 and text_list[i]==text_list[i-1] and text_list[i]=='z':\n            wordz_middle_list.append(i)\n    if len(wordz_middle_list)>0:\n        return wordz_middle_list[0]\n    else:\n        return 0\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = text[0]\n    # make sure it isn't a space\n    result = result.replace(' ', '')\n    if re.search(r'z\\s\\w+', result):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.replace(' ', '')\n    pattern = r'z'\n    if not re.search(pattern, text):\n        return False\n    text = text.replace('z', '')\n    pattern = r'z'\n    if not re.search(pattern, text):\n        return False\n    return True\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    array = input\n    last = len(array) - 1\n    while (last >= 0):\n        index = last\n        while (index >= 0):\n            array[index], array[index - 1] = array[index - 1], array[index]\n            index = index - 1\n        last = last - 1\n    return array\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    end = len(input)\n    for i in range(end//k): \n        start = i*k \n        input[start:end] = input[start:end][::-1] \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    for i in range(len(input) - k):\n        temp = input[i]\n        input[i] = input[k]\n        input[k] = temp\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp = []\n    temp.extend(input)\n    rev = []\n    for i in range(len(input)):\n        rev.append(temp[-k-1])\n        del temp[-k-1]\n    return rev\n    \ndef main():\n    '''\n    Driver code to test your function.\n    '''\n    print(\"Example 1:\")\n    print(\"Input : \")\n    print(\"array = [1,2,3,4,5,6,7,8,9]\")\n    print(\"k = 3\")\n    print(\"Output :\")\n    print(\"[7,5,9,6,8,4,2,1,3]\")\n    print(\"Explanation:\")\n    print(\"[7,5,9,6,8,4,2,1,3] --> [1,2,3,4,5,6,7,8,9]\")\n    print()\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input == None or k == 0 or k > len(input): \n        return None\n    else: \n        return input[:k] + reverse_Array_Upto_K(input[k:], k-1)\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_array = list(input)\n    k = len(input_array)\n    for i in range(len(input_array)):\n        input_array[i] = input_array[i][::-1]\n    print(input_array)\n    return input_array\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Your code here\n    # Write your code here\n    return input[k:] + input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k] + input[k + 1:]\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # write your code here\n    len = len(input)\n    # base case\n    if(len < k):\n        return None\n    # if the last element is at the end\n    # this is a circular array\n    if(len == k):\n        return input\n    # if the last element is smaller than the current element\n    # this is a circular array\n    if(len < k and len < len(input)):\n        return None\n    # end\n    # loop, do the reverse\n    for i in range(len-k):\n        # keep moving to the left\n        temp = input[i]\n        j = i+k-1\n        # while j >= 0 and temp > input[j]:\n        while j >= 0 and temp > input[j]:\n            # in this loop, we store the j element \n            # of the next k elements\n            # in input[j+1:]\n            input[j+1:len] = input[j]\n            # move to the right\n            input[j] = temp\n            # move j\n            j -= 1\n    # return the reversed array\n    return input\n    \n    # return reverse(input,k)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + test_dict\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = test_dict.items()\n    for key, value in test_dict:\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test_tup = tuple(test_tup)\n        test"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if test_dict == None:\n        return test_tup\n    for key in test_dict:\n        test_tup = (test_tup[0] + key, test_tup[1] + test_dict[key])\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    return test_tup, test_dict\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a tuple with the values from the dictionary.\n    test_tup_new = tuple(test_dict.values())\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup = tuple(test_tup)\n    tup += test_dict\n    return tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key in test_dict:\n        test_tup[key] = test_dict[key]\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n    return test_tup + test_dict\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def computeAvg(path):\n        total = 0\n        for node in path:\n            total+= node[0]\n        return total/len(path)\n    \n    max_avg = 0\n    for path in cost:\n        path_cost = computeAvg(path)\n        if path_cost > max_avg:\n            max_avg = path_cost\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    assert(cost.shape[0]==cost.shape[1]), \"Cannot find a path with the maximum average over all paths.\"\n    if cost.shape[0]==1:\n        return cost[0][0]\n    # Get the minimum total cost\n    mini=inf\n    # For each cell, check if it's a valid move to get the path\n    for i in range(cost.shape[0]):\n        for j in range(cost.shape[1]):\n            # Only calculate if the cost is not zero\n            if cost[i][j]!= 0:\n                # Check if it's a valid move to get the path\n                if isValidMove(i,j,cost,mini):\n                    # If so, update the total cost and update the path\n                    mini=cost[i][j]\n    # Return the maximum total cost\n    return mini\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Funtion to compute the average.\n    def averagePath(path):\n        \n        # Track the path count.\n        pathCount = 0\n        \n        # Track the path sum.\n        totalSum = 0\n        \n        # Track the row count.\n        rowCount = len(path)\n        \n        # Track the columns count.\n        columnCount = len(path[0])\n        \n        # Track the initial values.\n        sum = 0\n        \n        # For each cell in the path.\n        for i in range(len(path)):\n            \n            # Track the total sum.\n            totalSum += path[i][0]\n            \n            # Track the row count.\n            rowCount -= 1\n            \n            # Track the column count.\n            columnCount -= 1\n            \n            # Track the sum.\n            sum += path[i][0]\n        \n        # Calculate the average.\n        average = totalSum/rowCount\n        \n        # Compute the average.\n        return average\n    \n    # Compute the average.\n    average = averagePath(cost)\n    \n    # Return the average.\n    return average\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    elif len(cost) == 1:\n        return cost[0][0]\n    else:\n        return cost[0][0]/len(cost)\n    \ndef traverse(path, total):\n    '''\n    Traverses the given path and returns the total cost.\n    '''\n    if len(path) == 1:\n        return total\n    else:\n        total += path[1][0]\n        total += path[1][1]\n        total += path[2][0]\n        total += path[2][1]\n        total += path[0][0]\n        total += path[0][1]\n        total += path[1][0] + path[1][1]\n        total += path[2][0] + path[2][1]\n        total += path[0][0] + path[0][1]\n        total += path[1][0] + path[1][1] + path[2][0] + path[2][1]\n        total += path[0][0] + path[0][1] + path[1][0] + path[1][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0] + path[2][1]\n        total += path[0][0] + path[1][0] + path[2][0"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    \n    if n == 0: return 0\n    \n    m = len(cost[0])\n    \n    if n == m: return max(cost)\n    \n    result = float('-inf')\n    \n    for i in range(n):\n        for j in range(m):\n            for d in (-1, 0, 1):\n                \n                if 0 <= i+d < n and 0 <= j+d < m:\n                    \n                    if i == 0 or j == 0:\n                        result = max(result, cost[i][j] + cost[i+d][j+d])\n                    \n                    elif i+d == n-1 or j+d == m-1:\n                        result = max(result, cost[i][j] + cost[i+d][j+d])\n                    \n                    else:\n                        result = max(result, cost[i][j] + cost[i+d][j+d] + cost[i+d][j+d+1] + cost[i+d+1][j+d] + cost[i+d+1][j+d+1])\n    \n    return result / (n*m)\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    M = len(cost)\n    N = len(cost[0])\n    max = 0\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n    average = 0\n    numCellsVisited = 0\n    #calculate cell-wise average and save in list\n    for i in range(row):\n        for j in range(col):\n            if cost[i][j]!= -1:\n                average += cost[i][j]\n                numCellsVisited += 1\n    #calculate average and save in list\n    for i in range(row):\n        for j in range(col):\n            if cost[i][j]!= -1:\n                average = average/numCellsVisited\n                break\n    #store in a list\n    paths = []\n    for i in range(row):\n        for j in range(col):\n            if cost[i][j] == -1:\n                paths.append((i,j))\n    #add all paths together and then sort\n    paths = sorted(paths,key=lambda x:x[1])\n    paths = sorted(paths,key=lambda x:x[0])\n    paths = sorted(paths,key=lambda x:x[1])\n    return [path[0] for path in paths]\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    m, n = len(cost), len(cost[0])\n    # print(\"Len cost\",len(cost))\n    # print(\"Len Matrix\",m,n)\n    def dfs(i,j,d):\n        if(i>=m or i<=0 or j>=n or j<=0):\n            return 0\n        if(cost[i][j]!=0):\n            return cost[i][j]\n        ans = dfs(i-1,j,d)+dfs(i+1,j,d)+dfs(i,j-1,d)+dfs(i,j+1,d)\n        # print(i,j)\n        # print(ans)\n        if(i+j==m):\n            return ans\n        else:\n            return ans+cost[i][j]\n    \n    res = dfs(0,0,0) / len(cost)\n    return res"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Note that we are using a matrix of lists here, because we know that cells can move from top left to bottom right.\n    def maxAverage(paths):\n        sum = 0\n        for p in paths:\n            for cell in p:\n                sum += cell\n        return sum/len(paths)\n    # Create a set of cells that can be traversed\n    cells = set(range(len(cost)))\n    # Choose a cell to visit\n    # Choose a cell that is less than or equal to the cell you want to visit\n    # Choose a cell with the maximum number of cells visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    # Choose a cell with the maximum number of cells already visited\n    "
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def sort_cost(cost):\n        x = sorted(cost, reverse = True)\n        return sum(x) / len(cost)\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if len(students)==0:\n        return students\n    student_height = students[0][1][0]\n    student_weight = students[0][1][1]\n    if student_height<=h and student_weight<=w:\n        new_dict = students[0]\n        for i in range(1, len(students)):\n            if student_height<students[i][1][0] and student_weight<students[i][1][1]:\n                new_dict = students[i]\n        return new_dict\n    else:\n        return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students:\n        if h in i and w in i:\n            if i[h]>minHeight:\n                if i[w]>minWeight:\n                    return i\n    return None\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    '''\n    ans = {}\n    for name in students:\n        minH = students[name][1][0]\n        minW = students[name][1][1]\n        if(h[name]>minH):\n            ans[name] = (h[name],minW)\n    return ans\n    '''\n    ans = {}\n    for name in students:\n        if(students[name][1]<w[name]):\n            ans[name] = (students[name][1],students[name][2])\n    return ans\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for s in students.items():\n        if(s[1][0]>h and s[1][1]>w):\n            print(s[0],s[1])\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_dict = {}\n    for student in students:\n        height, weight = student\n        if (float(height) >= h and float(weight) >= w):\n            filter_dict[student] = student\n        else:\n            continue\n    return filter_dict\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    new_students = []\n    for student in students:\n        if student[h]>=w[h] and student[w]>=h[w]:\n            new_students.append(student)\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #'students' is a dictionary\n    #'h' is the minimum height of the student\n    #'w' is the minimum weight of the student\n    \n    for key in students:\n        if students[key]>h and students[key]>=w:\n            print(\"Filter has been applied\")\n            return students\n    \n    print(\"No filter has been applied\")\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for s in students:\n        if s.height<h and s.weight<w:\n            students[s.name]=s\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print(\"-\"*60)\n    print(\"This is filter_data function\")\n    print(\"-\"*60)\n    \n    student_dic = {}\n    minimum = []\n    \n    for student in students:\n        if student.get(\"height\") and student.get(\"weight\"):\n            student_dic[student.get(\"name\")] = student\n            student_dic[student.get(\"name\")][\"height\"] = int(student_dic[student.get(\"name\")][\"height\"])\n            student_dic[student.get(\"name\")][\"weight\"] = int(student_dic[student.get(\"name\")][\"weight\"])\n    \n    for student in student_dic.values():\n        minimum.append(student[\"height\"])\n        minimum.append(student[\"weight\"])\n    \n    for student in students:\n        if student[\"height\"] and student[\"weight\"] not in minimum:\n            students.remove(student)\n    \n    for student in students:\n        students.remove(student)\n    \n    print(students)\n    print(minimum)\n    \n    for student in students:\n        if student.get(\"height\") and student.get(\"weight\") in minimum:\n            student[\"height\"] = int(student[\"height\"])\n            student[\"weight\"] = int(student[\"weight\"])\n            \n    print(students)\n    print(\"-\"*60)\n    \n    print(minimum)\n    \n    for student in students:\n        if student.get(\"height\") and student.get(\"weight\") not in minimum:\n            student[\"height\"] = int(student[\"height\"])\n            student[\"weight\"] = int(student[\"weight\"])\n            \n    print(students)\n    print(\"-\"*60)\n    \n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for name in students.keys():\n        if all(min(students[name][i] for i in h)>=w[i] for i in h):\n            students.pop(name)\n    return students\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Get a list of distinct numbers in nums1\n    nums1_distinct = []\n    for item in nums1:\n        if item not in nums1_distinct:\n            nums1_distinct.append(item)\n    # Get a list of distinct numbers in nums2\n    nums2_distinct = []\n    for item in nums2:\n        if item not in nums2_distinct:\n            nums2_distinct.append(item)\n    # Count the number of same values between both lists\n    return len(nums1_distinct & nums2_distinct)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_same = 0\n    \n    for i in range(0, len(nums1)):\n        for j in range(0, len(nums2)):\n            if nums1[i] == nums2[j]:\n                num_same += 1\n    \n    return num_same\n    \ndef count_same_pair_r(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_same = 0\n    \n    for i in range(len(nums1)-1, -1, -1):\n        for j in range(len(nums2) - 1, -1, -1):\n            if nums1[i] == nums2[j]:\n                num_same += 1\n    \n    return num_same\n    \ndef count_same_pair_l(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_same = 0\n    \n    for i in range(0, len(nums1)-1):\n        for j in range(0, len(nums2)-1):\n            if nums1[i] == nums2[j]:\n                num_same += 1\n    \n    return num_same\n    \ndef count_same_pair_l_r(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_same = 0\n    \n    for i in range(len(nums1)-1, -1, -1):\n        for j in range(len(nums2)-1, -1, -1):\n            if nums1[i] == nums2[j]:\n                num_same += 1\n    \n    return num_same\n    \ndef count_unique(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_2(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_3(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_4(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_5(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_6(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_7(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_8(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_9(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_10(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_11(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_12(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_13(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_14(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_15(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_16(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_17(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_18(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_19(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in nums:\n        if num not in nums:\n            uniq += 1\n    return uniq\n    \ndef count_unique_20(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the number of unique numbers in it.\n    '''\n    uniq = 0\n    for num in num"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for index, value in enumerate(nums1):\n        if value == nums2[index]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Case 1: \n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    intersection = nums1_set.intersection(nums2_set)\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([len(nums1[i])*len(nums2[i]) for i in range(len(nums1)) if eq(nums1[i], nums2[i])])\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len(list(filter(eq, list(zip(nums1, nums2)), [nums1, nums2])))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(map(eq, nums1, nums2))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(nums1[i] == nums2[i] for i in range(len(nums1)))\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # print(nums1)\n    # print(nums2)\n    # counter = {}\n    # for i in range(len(nums1)):\n    #     if nums1[i] in counter and nums2[i] in counter:\n    #         counter[nums1[i]] = counter[nums1[i]] + 1\n    #         counter[nums2[i]] = counter[nums2[i]] + 1\n    # return counter\n    \n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n                # print(f\"{nums1[i]} and {nums2[j]} are the same\")\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict1 = dict()\n    dict2 = dict()\n    for idx, num in enumerate(nums1):\n        if num not in dict1 and num not in dict2:\n            dict1[num] = 1\n            dict2[num] = 1\n        elif num in dict1 and num in dict2:\n            dict1[num] = dict1[num] + 1\n            dict2[num] = dict2[num] + 1\n        else:\n            dict1[num] = 1\n            dict2[num] = 1\n    return dict1.items() == dict2.items()\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    power_base = ['2','3','4','5','6','7','8','9','0']\n    power_digit = []\n    \n    for power_base_number in range(0, len(power_base)):\n        power_digit.append(int(power_base[power_base_number]))\n    \n    sum_power_digit = 0\n    \n    for power_digit_number in range(0, len(power_digit)):\n        sum_power_digit = sum_power_digit + power_digit[power_digit_number]\n    \n    return sum_power_digit\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = abs(power)\n    if power == 0:\n        return 1\n    elif power < 0:\n        return power_base_sum(base, -power)\n    elif power == 1:\n        return base\n    else:\n        return base * power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    power_sum = 0\n    while power >= 0:\n        base_sum = base_sum + (base ** power)\n        power = power - 1\n    return base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = power if power >= 0 else len(str(power))\n    return int(str(base) + str(power))\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += power % base\n        power = power // base\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return base ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return base\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    if power > len(base):\n        return 0\n    else:\n        return base[power - 1] + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 1 or base > 36:\n        raise ValueError(\"Base must be 1 to 36\")\n    elif power < 1 or power > 36:\n        raise ValueError(\"Power must be 1 to 36\")\n    else:\n        # for any base whose digit is exactly 3, we need to create a base 3 and then multiply the result by the base to get the sum\n        # 3 is one base, so we return the result directly\n        if base == 1:\n            return 3\n        elif power == 0:\n            return base\n        elif power % base == 0:\n            return base * power_base_sum(base, power - 1)\n        else:\n            return base * power_base_sum(base, power - 1) + power_base_sum(base - 1, power"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_list = []\n    p = re.compile(r'\\S+[\u2018\"](.|\\n)*?[\u2018\"]')\n    for i in text1.split(\" \"):\n        if p.match(i):\n            quotation_list.append(i)\n        else:\n            pass\n    return quotation_list\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.search('(?<! )([^!]+)', text1)\n    return result.group(1)\n    # if result:\n    #     result = result.group(1)\n    #     return result\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #Regex pattern to find quotation marks\n    q_p = re.compile(r'[\\'\\\"]')\n    #Finds all quotation marks\n    quotation_marks = q_p.findall(text1)\n    #Stores the quotation marks\n    quotation_marks = list(set(quotation_marks))\n    #Stores the quotation marks for the extracted text\n    quotation_marks_extracted = []\n    #Iterates through the quotation marks\n    for i in quotation_marks:\n        #Separates the quotation marks into the two parts of text\n        i_split = text1.split(i)\n        #Stores the contents of the quotation marks\n        quotation_marks_split = []\n        #Iterates through the two parts of the text\n        for j in i_split:\n            #If the part contains a quotation mark, it will be added to the quotation marks\n            #to the list to be returned\n            if j.strip().endswith('\"') and j.strip().startswith('\"'):\n                quotation_marks_split.append(j)\n            #Else if the part does not contain a quotation mark, it is stored\n            else:\n                quotation_marks_split.append(j.strip())\n        #Stores the quotations for the extracted text\n        quotation_marks_extracted.append(\"\".join(quotation_marks_split))\n    #Returns the extracted text\n    return \"\".join(quotation_marks_extracted)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = ''\n    result = re.findall(r'[^\" \"]',text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    val=[]\n    if len(text1)==0:\n        val.append(None)\n    else:\n        for i in range(0,len(text1)):\n            if text1[i]=='\\\"':\n                val.append(text1[i+1:i+2])\n                break\n            if text1[i]=='\\'':\n                val.append(text1[i+1:i+2])\n                break\n    return val\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # search and extract quotation marks\n    text1 = text1.replace('\"', \"\")\n    text1 = re.sub('[^A-Za-z0-9()]', '', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation = re.compile(r'^(\\s)*\\\"(.+)\\\"', re.MULTILINE)\n    if quotation.search(text1):\n        quotation_values = quotation.findall(text1)\n        quotation_values = [val.strip('\"').strip(\"'\") for val in quotation_values]\n        return quotation_values\n    else:\n        return []\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    quotation_regex = re.compile(r'(?:[\"\u2018\u2019])(.*)(?:\\1[\u2018\u2019]|[\u2018\u2019]|[\u2018\u2019]|[\u2018\u2019]|[\u2018\u2019])')\n    quotation = quotation_regex.findall(text1)\n    #if the quotation is found, extract quotation content in quotation\n    if quotation!= None:\n        quotation = quotation[0]\n        #remove quotation mark\n        quotation = quotation.replace(\"\u2018\", \"\")\n        #add quotation mark to the quotation content\n        quotation = quotation+\"\u2018\"\n    #else, just remove quotation mark\n    else:\n        quotation = \" \".join(re.findall(r\"\\w+\", text1))\n    #return quotation content\n    return quotation\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Remove special characters from the given text.\n    quotation = re.compile(r'[^\\s_]+')\n    text1 = quotation.sub('', text1)\n    text1 = text1.strip()\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.replace(\"'\",\"\")\n    text = text.replace(\"\\\"\",\"\")\n    text = text.replace(\",\",\", \")\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\\"\",\"\")\n    text = text.replace(\"\\r\",\"\")\n    text = text.replace(\"/\",\"\")\n    text = text.replace(\"\\\\\",\"\")\n    text = text.replace(\";\",\"\")\n    text = text.replace(\"*\",\"\")\n    text = text.replace(\"?\",\"\")\n    text = text.replace(\"-\",\"\")\n    text = text.replace(\"~\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"\\t\",\"\")\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\r\",\"\")\n    text = text.replace(\"\\\\\",\"\")\n    text = text.replace(\"&\",\"\")\n    text = text.replace(\"|\",\"\")\n    text = text.replace(\"&\",\"\")\n    text = text.replace(\"[\",\"\")\n    text = text.replace(\"]\",\"\")\n    text = text.replace(\"{\",\"\")\n    text = text.replace(\"}\",\"\")\n    text = text.replace(\"\\\"\",\"\")\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\r\",\"\")\n    text = text.replace(\"<\",\"\")\n    text = text.replace(\">\",\"\")\n    text = text.replace(\"`\",\"\")\n    text = text.replace(\",\",\", \")\n    text = text.replace(\"'\",\"\")\n    text = text.replace(\"\\\"\",\"\")\n    text = text.replace(\">\",\"\")\n    text = text.replace(\"\\'\",\"\")\n    text = text.replace(\"\\\"\",\"\")\n    text = text.replace(\"<\",\"\")\n    text = text.replace(\">\",\"\")\n    text = text.replace(\"*\",\"\")\n    text = text.replace(\"?\",\"\")\n    text = text.replace(\"!\",\"\")\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"(\",\"\")\n    text = text.replace(\")\",\"\")\n    text = text.replace(\"+\",\"\")\n    text = text.replace(\"=\",\"\")\n    text = text.replace(\"*\",\"\")\n    text = text.replace(\"@\",\"\")\n    text = text.replace(\"'\",\"\")\n    text = text.replace(\"\\t\",\"\")\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\r\",\"\")\n    text = text.replace(\"$\",\"\")\n    text = text.replace(\"&\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"$\",\"\")\n    text = text.replace(\".\",\"\")\n    text = text.replace(\"-\",\"\")\n    text = text.replace(\"~\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"+\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"'\",\"\")\n    text = text.replace(\"]\",\"\")\n    text = text.replace(\"]\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"{\",\"\")\n    text = text.replace(\"}\",\"\")\n    text = text.replace(\"\\\"\",\"\")\n    text = text.replace(\"'\",\"\")\n    text = text.replace(\"<\",\"\")\n    text = text.replace(\">\",\"\")\n    text = text.replace(\"\\\"\",\"\")\n    text = text.replace(\"#\",\"\")\n    text = text.replace(\";\",\"\")\n    text = text.replace(\"+\",\"\")\n    text = text.replace(\"=\",\"\")\n    text = text.replace(\"*\",\"\")\n    text = text.replace(\"?\",\"\")\n    text = text.replace(\"!\",\"\")\n    text = text.replace(\";\",\"\")\n    text = text.replace(\"&\",\"\")\n    text = text.replace(\"@\",\"\")\n    text = text.replace(\"'\",\"\")\n    text = text.replace(\">\",\"\")\n    text = text.replace(\"'\",\"\")\n    text = text.replace(\"<\",\"\")\n    text = text.replace(\"{\",\"\")\n    text = text.replace(\"}\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"[\",\"\")\n    text = text.replace(\"]\",\"\")\n    text = text.replace(\";\",\"\")\n    text = text.replace(\"+\",\"\")\n    text = text.replace(\"=\",\"\")\n    text = text.replace(\"*\",\"\")\n    text = text.replace(\"@\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"+\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"`\",\"\")\n    text = text.replace(\"|\",\"\")\n    text = text.replace(\"$\",\"\")\n    text = text.replace(\"*\",\"\")\n    text = text.replace(\"?\",\"\")\n    text = text.replace(\"!\",\"\")\n    text = text.replace(\"-\",\"\")\n    text = text.replace(\"&\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"(\",\"\")\n    text = text.replace(\")\",\"\")\n    text = text.replace(\"+\",\"\")\n    text = text.replace(\"=\",\"\")\n    text = text.replace(\"*\",\"\")\n    text = text.replace(\"@\",\"\")\n    text = text.replace(\"'\",\"\")\n    text = text.replace(\">\",\"\")\n    text = text.replace(\"'\",\"\")\n    text = text.replace(\"<\",\"\")\n    text = text.replace(\"{\",\"\")\n    text = text.replace(\"}\",\"\")\n    text = text.replace(\"{\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"{\",\"\")\n    text = text.replace(\"}\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"[\",\"\")\n    text = text.replace(\"]\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"[\",\"\")\n    text = text.replace(\"]\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"{\",\"\")\n    text = text.replace(\"}\",\"\")\n    text = text.replace(\"*\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"&\",\"\")\n    text = text.replace(\"#\",\"\")\n    text = text.replace(\";\",\"\")\n    text = text.replace(\"+\",\"\")\n    text = text.replace(\"=\",\"\")\n    text = text.replace(\"*\",\"\")\n    text = text.replace(\"@\",\"\")\n    text = text.replace(\"&\",\"\")\n    text = text.replace(\"|\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"(\",\"\")\n    text = text.replace(\")\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"?\",\"\")\n    text = text.replace(\"+\",\"\")\n    text = text.replace(\"$\",\"\")\n    text = text.replace(\"&\",\"\")\n    text = text.replace(\"@\",\"\")\n    text = text.replace(\"'\",\"\")\n    text = text.replace(\">\",\"\")\n    text = text.replace(\"'\",\"\")\n    text = text.replace(\"><\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text = text.replace(\"_\",\"\")\n    text "
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x*test_tup[i+1] for i,x in enumerate(t_1)])\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Write your code here\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * j for i,j in zip(test_tup[0],test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        new_tup = new_tup + (test_tup[i] * test_tup[i+1])\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = test_tup\n    length = len(test_tup)\n    tup = tuple(map(lambda x: x * 10, tup)) # Change\n    print(tup)\n    return tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return t_1, t_2,..., t_N\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = []\n    for t in test_tup:\n        new_tup.append(t*test_tup[i+1])\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = (test_tup[0] * (test_tup[1] * test_tup[2]))\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(x*x for x in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return_tuple = ()\n    for i in range(len(test_tup)-1):\n        return_tuple = return_tuple + (test_tup[i]*test_tup[i+1])\n    return return_tuple\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum([a+b for a,b in zip(lst1,lst2)])\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [element + element for element in lst1 + lst2]\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # first we need to create a list of all the indices, we can find that with the help of the list comprehension\n    indices = [i for i in range(len(lst1))]\n    # we need to get the values of the list using the list comprehension\n    indices = list(map(lambda x: x[0], list(zip(indices, lst1))\n                     + list(zip(indices, lst2))\n                     + list(zip(indices, lst1+lst2))))\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for x in lst1:\n        for y in lst2:\n            result.append(x+y)\n    return result\n    \n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sums=0\n    for num in lst1:\n        sums+=num\n    for num in lst2:\n        sums+=num\n    return sums\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1+lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum=0\n    for i in lst1:\n        sum+=i\n    for j in lst2:\n        sum+=j\n    return sum\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [item+item for item in lst1 for item in lst2]\n    \n    \n    \n    \n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    return [a + b for a,b in zip(lst1,lst2)]\n    \n    \n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen_nums = set()\n    seen_nums_2 = set()\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    return [n for n, idx in groupby(nums) if idx not in seen]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    g=groupby(nums)\n    output=[]\n    for key,value in g:\n        if len(value)>1:\n            output.append(value)\n    return output\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    result = []\n    g = groupby(nums, lambda x: x not in result)\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    temp_list = list(set(nums))\n    idx_list = []\n    for idx, item in enumerate(nums):\n        if nums[idx] not in temp_list:\n            idx_list.append(idx)\n    return [nums[i] for i in idx_list]\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #consecutive_duplicates_1(nums)\n    #consecutive_duplicates_2(nums)\n    #consecutive_duplicates_3(nums)\n    #consecutive_duplicates_4(nums)\n    #consecutive_duplicates_5(nums)\n    #consecutive_duplicates_6(nums)\n    #consecutive_duplicates_7(nums)\n    #consecutive_duplicates_8(nums)\n    #consecutive_duplicates_9(nums)\n    #consecutive_duplicates_10(nums)\n    return list(filter(lambda x: x[1]!= x[0], list(enumerate(nums))))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #Sort and return result\n    return sorted(set(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #Eliminate duplicates in the list by creating a new list.\n    nums_grouped = groupby(nums, key=nums.count)\n    new_list = list(nums_grouped)\n    #Check the number of duplicates.\n    count_duplicates = 0\n    for i in new_list:\n        if i:\n            count_duplicates += 1\n    if count_duplicates:\n        return False\n    #If duplicates are present, just remove them.\n    new_list = []\n    for i in new_list:\n        if i:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen_first = set()\n    seen_second = set()\n    for i, num in enumerate(nums):\n        if num not in seen_first and num not in seen_second:\n            seen_first.add(num)\n            seen_second.add(num)\n        elif num not in seen_first and num not in seen_second:\n            seen_second.add(num)\n    return list(seen_first.union(seen_second))\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums)==1:\n        return []\n    else:\n        for x, y in groupby(nums):\n            if len(list(y))==1:\n                return x\n    return x\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2*h/3\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return(4/3)*(math.pi*r**3)*math.sqrt(1-2*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # define the variables\n    a=6.28/10\n    b=1.9958\n    c=3.281\n    s=1.496\n    A=a*(1+b*r)*math.sin(math.radians(90-h))\n    B=a*(1+b*r)*math.sin(math.radians(90+h))\n    C=a*(1+b*r)*math.sin(math.radians(180-h))\n    D=a*(1+b*r)*math.sin(math.radians(180+h))\n    e=c*math.sqrt(1-s*s)\n    f=a*s\n    g=a*(1+b*r)*math.cos(math.radians(180-h))\n    h=a*(1+b*r)*math.cos(math.radians(180+h))\n    # calculate the values\n    S=A*B*B+A*C*B*B+A*D*B*C\n    S+=A*D*C*C-A*D*E\n    S+=A*E*C*C-A*E*D\n    S+=B*C*C-A*C*D\n    S+=B*C*E-A*E*D\n    S+=E*C*C-B*C*D\n    S+=E*C*D-B*D*E\n    S+=G*B*C-A*C*D\n    S+=G*B*D-A*D*E\n    S+=G*C*C-A*C*D\n    S+=G*C*D-A*D*E\n    S+=H*B*C-A*C*D\n    S+=H*B*D-A*D*E\n    S+=H*C*C-A*C*D\n    S+=H*C*D-A*D*E\n    S+=H*D*C-B*C*D\n    S+=H*D*D-B*D*E\n    S+=A*B*E-C*D*E\n    S+=A*B*F-C*D*F\n    S+=A*B*G-D*E*F\n    S+=A*B*H-D*E*G\n    S+=A*C*E-D*E*F\n    S+=A*C*G-D*F*G\n    S+=A*C*H-D*G*H\n    S+=A*D*E-B*E*F\n    S+=A*D*G-B*G*H\n    S+=B*C*E-A*E*F\n    S+=B*C*G-A*G*H\n    S+=B*D*E-A*E*F\n    S+=B*D*G-A*G*H\n    S+=B*E*F-A*E*G\n    S+=B*E*G-A*G*H\n    S+=C*D*F-A*D*G\n    S+=C*D*G-A*G*H\n    S+=C*E*F-A*E*G\n    S+=C*E*G-A*G*H\n    S+=D*E*F-B*F*G\n    S+=D*E*G-B*G*H\n    S+=D*F*G-A*G*H\n    S+=D*G*H-B*H*F\n    S+=D*G*H-A*H*F\n    S+=H*E*F-A*E*G\n    S+=H*E*G-A*G*H\n    S+=H*F*G-A*G*H\n    S+=H*G*H-A*H*F\n    S+=A*B*E-B*F*G\n    S+=A*B*G-B*G*H\n    S+=A*C*E-B*F*G\n    S+=A*C*G-B*G*H\n    S+=A*D*E-B*F*G\n    S+=A*D*G-B*G*H\n    S+=A*E*F-B*F*G\n    S+=A*E*G-B*G*H\n    S+=B*C*E-A*F*G\n    S+=B*C*G-A*G*H\n    S+=B*D*E-A*F*G\n    S+=B*D*G-A*G*H\n    S+=B*E*F-A*F*G\n    S+=B*E*G-A*G*H\n    S+=C*D*F-A*F*G\n    S+=C*D*G-A*G*H\n    S+=C*E*F-A*F*G\n    S+=C*E*G-A*G*H\n    S+=D*E*F-B*F*G\n    S+=D*E*G-B*G*H\n    S+=D*F*G-A*G*H\n    S+=D*G*H-B*H*F\n    S+=D*G*H-A*H*F\n    S+=E*F*G-A*G*H\n    S+=E*F*G-B*G*H\n    S+=E*G*H-A*H*F\n    S+=F*G*H-A*G*H\n    S+=G*H-A*G*F\n    S+=H*F*G-A*G*H\n    S+=H*G*F-A*G*H\n    S+=B*F*G-A*G*H\n    S+=B*G*H-A*G*F\n    S+=B*F*G-A*G*H\n    S+=C*F*G-A*G*H\n    S+=C*G*H-A*G*F\n    S+=C*G*H-A*G*F\n    S+=D*F*G-B*F*H\n    S+=D*F*G-A*G*H\n    S+=D*F*G-B*G*H\n    S+=D*G*H-B*H*F\n    S+=D*G*H-A*H*F\n    S+=E*F*G-B*F*H\n    S+=E*F*G-A*G*H\n    S+=E*G*H-A*G*F\n    S+=E*G*H-B*G*F\n    S+=E*G*H-A*G*F\n    S+=F*G*H-A*G*F\n    S+=F*G*H-B*G*F\n    S+=F*G*H-A*G*F\n    S+=G*F*H-A*G*F\n    S+=H*F*G-A*G*F\n    S+=H*G*F-A*G*F\n    S+=A*F*G-B*F*H\n    S+=A*F*G-A*G*H\n    S+=A*G*F-B*F*H\n    S+=A*G*F-A*G*H\n    S+=A*F*G-B*G*H\n    S+=A*G*F-A*G*H\n    S+=B*F*G-A*G*H\n    S+=B*F*G-A*G*H\n    S+=C*F*G-A*G*H\n    S+=C*F*G-A*G*H\n    S+=D*F*G-B*F*H\n    S+=D*F*G-A*G*H\n    S+=D*F*G-A*G*H\n    S+=E*G*H-A*G*F\n    S+=E*G*H-A*G*F\n    S+=E*F*G-A*G*F\n    S+=E*F*G-A*G*H\n    S+=F*G*H-A*G*F\n    S+=F*G*H-A*G*F\n    S+=G*F*H-A*G*F\n    S+=H*F*G-A*"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # set the constants to their values\n    surface_area = 4/3 * math.pi * r * h\n    # the height\n    z = h\n    # the radius\n    r = r\n    # the area of the cone\n    A = surface_area*math.sqrt(3/2)*(1-z)\n    print ('the area of the cone is {}'.format(A))\n    return A\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    S = (4*math.pi*r*h)\n    return S\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"\\n======================================\")\n    print(\"\\nLateral surface area of the cone : \")\n    print(\"\\n======================================\")\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*(h/2))*(math.sqrt(1+(r/h)**2))\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculate the area\n    area = (math.pi * (r ** 2) * h) / 2\n    print(area)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #return (1/(math.tan(math.radians(45))))*(((r**2)+(h**2))**2)\n    return (math.tan(math.radians(45))) * (r**2) + (h**2)\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    x = r * math.cos(math.radians(90-h))\n    y = r * math.sin(math.radians(90-h))\n    return x + y\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\n+', ':', text)\n    text = re.sub(r'\\w+', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\n+', ':', text)\n    text = re.sub(r'\\w+', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\s+', ':', text)\n    text = re.sub(',', ':', text)\n    text = re.sub('\\.', ':', text)\n    text = re.sub('\\.\\.', ':', text)\n    text = re.sub('\\;', ':', text)\n    text = re.sub('\\;', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.sub('\\n', ':', text)\n    text = re.su"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\".\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\" \", \"\\n\")\n    text = text.replace(\".\", \"\\n\")\n    text = text.replace(\",\", \":\\n\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\";\", \":\")\n    text = text.replace(\".\", \":\\n\")\n    text = text.replace(\":\", \":\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    text = text.replace(\"\\n\", \"\\n\")\n    tex"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(\"\\.\\s\", \":\", text)\n    text = re.sub(\"\\s,\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\", text)\n    text = re.sub(\"\\s\\.\\s\", \":\""
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    text = text.replace('*',':')\n    text = text.replace('_',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':', text)\n    text = re.sub(' +', ':'"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'(?:\\s|\\n|\\r)')\n    text = pattern.sub(r':\\2', text)\n    text = pattern.sub(r':\\1', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    for i in range(len(text)):\n        if text[i].isspace():\n            text = text.replace(text[i], ':')\n        if text[i].isspace():\n            text = text.replace(text[i], ',')\n        if text[i].isspace():\n            text = text.replace(text[i], '.')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    text = re.sub(r'\\!', ':', text)\n    text = re.sub(r'\\?', ':', text)\n    text = re.sub(r'\\;', ':', text)\n    text = re.sub(r'\\:', ':', text)\n    text = re.sub(r'\\:', ':', text)\n    text = re.sub(r'\\;', ';', text)\n    text = re.sub(r'\\?', ':', text)\n    text = re.sub(r'\\$', ':', text)\n    text = re.sub(r'\\&', ';', text)\n    text = re.sub(r'\\$', ':', text)\n    text = re.sub(r'\\*', ';', text)\n    text = re.sub(r'\\(\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+)\\;', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', ':', text)\n    text = re.sub(r'\\(\\d+\\d+\\d+\\d+\\d+\\d+\\)', "
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('\\.|,|\\:|\\;|\\!|\\?|\\;|\\:|\\(|\\)|\\=|\\&|\\#|\\+|\\:|\\||\\(|\\)|\\=|\\&|\\;|\\|\\?|\\;|\\:|\\:|\\,|\\|\\||\\;|\\*|\\:|\\$|\\:|\\+|\\!|\\(|\\||\\(|\\)|\\{|\\}|\\[|\\]|\\)|\\||\\)|\\[|\\]|\\{|\\}', ': ', text)\n    text = re.sub('\\s+','', text)\n    text = re.sub('\\n+','', text)\n    text = re.sub('\\s+\\n+','', text)\n    text = re.sub('\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re.sub('\\n\\s+','', text)\n    text = re"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Write your code here.\n    left = 0\n    right = len(A)-1\n    while left <= right:\n        middle = (left + right) // 2\n        if A[middle] == x:\n            return middle\n        elif A[middle] < x:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = l + (r-l) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Get the length of the array\n    length = len(A)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Define a simple binary search algorithm\n    def binary_search(A, x, left, right):\n        while left <= right:\n            mid = (left + right) // 2\n            if A[mid] == x:\n                return mid\n            elif A[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    while low < high:\n        mid = (low+high)//2\n        if A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    if A[low] == x:\n        return low\n    elif A[high] == x:\n        return high\n    else:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            return index\n        index += 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while(l <= r):\n        mid = int((l + r)/2)\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid - 1\n        elif A[mid] < x:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    def find_index(left, right, x):\n        if left > right:\n            return -1\n        \n        mid = (left + right) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            return find_index(left, mid, x)\n        else:\n            return find_index(mid + 1, right, x)\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n        \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # if the value is not present, return the index of the first occurrence\n    if not A:\n        return -1\n    # if the value is present at the beginning, return the index of the first occurrence\n    elif A[0] == x:\n        return 0\n    # if the value is not present at the beginning, find the index of the first occurrence\n    else:\n        low, high = 0, len(A) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if A[mid] == x:\n                return mid\n            elif A[mid] > x:\n                high = mid - 1\n            else:\n                low = mid + 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    arr = list(set(arr))\n    prod = 1\n    for i in range(len(arr)):\n        prod = prod * arr[i]\n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            ans += arr[j] * (j - i)\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_ = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum_ += arr[i] * arr[j]\n    return sum_\n    \n    \n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            sum = sum + arr[i]*arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    sub_arr_sum = 0\n    #first checking the length of array\n    #if len(arr) == 0 or len(arr) == 1:\n    #    return arr[0]\n    \n    for i in range(len(arr)):\n        sub_arr_sum += arr[i]\n    \n    return sub_arr_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #Initializing sum of products\n    sumProd = 0\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    if not arr:\n        return 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum += arr[i] * arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            count += arr[j] * (i + 1)\n    return count\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Runtime: 56 ms (59.15%)\n    # Memory Usage: 15.3 MB (27.42%)\n    m = len(arr)\n    sum = 0\n    for i in range(m):\n        sum += arr[i] * (i + 1)\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    res = 0\n    l = len(arr)\n    for i in range(1,l+1):\n        for j in range(i):\n            res += arr[j] * arr[i-j-1]\n    return res\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    i = 1\n    s = 0\n    while i <= n:\n        i += 1\n        s = s + 1\n    s = s % 2\n    return s\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n <= 0:\n        raise ValueError(\"Number must be positive\")\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    temp = n\n    one = temp & 1\n    zero = temp >> 1\n    two = (temp & 2) >> 1\n    three = (temp & 4) >> 1\n    four = (temp & 8) >> 1\n    five = (temp & 16) >> 1\n    return (one, zero, two, three, four, five)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n).replace('0b', '')\n    n = n[2:]\n    n = n[-1]\n    if len(n) == 1:\n        return int(n)\n    else:\n        return int('0b' + n, 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = (1 << n) - 1\n    return bin(mask)[2:].zfill(n)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bits = bin(n)[2:].zfill(8)\n    for i in range(len(bits)):\n        if bits[i] == '1':\n            bits[i] = '0'\n        else:\n            bits[i] = '1'\n    return int('0b'+bits, 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n % 2\n    n = n >> 1\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    l = []\n    k = bin(n)\n    for i in range(0, len(k)-1):\n        if k[i] == '1':\n            l.append(0)\n        else:\n            l.append(1)\n    return ''.join(l)\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    x = bin(n)\n    return x[2:]\n    \ndef get_string(n):\n    '''\n    Convert the string into a number.\n    '''\n    x = n.replace('0b','')\n    x = x.replace('1','')\n    x = x.replace('0','')\n    x = int(x, 2)\n    return x\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\ndef check_frequency(a, b):\n    '''\n    Write a function to check whether two non-overlapping sets have the same frequency.\n    '''\n    pass\ndef get_frequency(a):\n    '''\n    Write a function that returns the frequency of a particular value in a sorted order.\n    '''\n    pass\ndef partition(a, p):\n    '''\n    Write a function to find the value in the first position of a sorted list (also known as the pivot), that is, the value that is present at the head of the list.\n    '''\n    pass\ndef merge(a, b):\n    '''\n    Write a function that merges two sorted lists.\n    '''\n    pass\ndef merge_sort(a):\n    '''\n    Write a function to perform a merge sort on a sorted list.\n    '''\n    pass\ndef reverse(a):\n    '''\n    Write a function to reverse a sorted list.\n    '''\n    pass\ndef bubble_sort(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef selection_sort(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef quick_sort(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef heap_sort(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef heapsort(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef bubble_heap_sort(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef merge_heap_sort(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef quick_heap_sort(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef heapsort_heap(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef merge_heapsort_heap(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef quick_heap_heap(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef merge_heapsort_heap(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef merge_heap_heap_sort(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\ndef merge_heapsort_heap_sort(a):\n    '''\n    Write a function to sort a sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect(a, x)\n    if i >= len(a):\n        return len(a)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: Write your code here\n    for i in range(len(a)):\n        if a[i] >= x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        mid = (l+r)//2\n        if x < a[mid]:\n            r = mid - 1\n        elif x > a[mid]:\n            l = mid + 1\n        else:\n            return mid\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n=len(a)\n    if n==0:\n        return 0\n    i=0\n    while i < n:\n        if x>a[i] and i>=0:\n            i+=1\n        elif x<a[i] and i<=0:\n            i+=1\n        else:\n            return i\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = bisect.bisect_left(a,x)\n    if l > len(a):\n        return l\n    else:\n        return l\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i=bisect.bisect_left(a,x)\n    while i>0 and a[i-1]>x:\n        i=i-1\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # TODO: complete this function\n    i = bisect.bisect_left(a, x)\n    return i - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif i == len(a):\n        return len(a)\n    else:\n        return i-1\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in 'aeiouAEIOU': \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex, string)\n    if result:\n        return True\n    return False\n    #return any(i.upper() == \"A\" or i.upper() == \"E\" or i.upper() == \"I\" for i in string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string.startswith('A'):\n        print(\"String starts with vowels\")\n    else:\n        print(\"String does not start with vowels\")\n    print(string)\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # print(re.search(regex, string))\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    check_vowels = 0\n    for vowel in vowels:\n        if string.lower().find(vowel)!= -1:\n            check_vowels += 1\n            if check_vowels > 1:\n                return False\n    return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] == 'a' or string[0] == 'A' or string[0] == 'e' or string[0] == 'E': \n        return True\n    else: \n        return False\ndef vowel_list(string):\n    '''\n    Write a function to check whether the given string is in a vowel or not using regex.\n    '''\n    vowel = ['a','A','e','E','i','I']\n    for i in vowel:\n        if i in string:\n            return True\n    return False\ndef check_str_vowel(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] == 'a' or string[0] == 'A' or string[0] == 'e' or string[0] == 'E':\n        if vowel_list(string):\n            return True\n    else: \n        return False\ndef check_str_vowel_list(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] == 'a' or string[0] == 'A' or string[0] == 'e' or string[0] == 'E':\n        if vowel_list(string):\n            for i in string:\n                if vowel_list(i):\n                    return True\n    else: \n        return False\ndef check_str_alphabet(string): \n    '''\n    Write a function to check whether the given string is ending with alphabet.\n    '''\n    for i in string:\n        if not check_str_alphabet(i):\n            return False\n    return True\ndef check_str_alphabet_list(string): \n    '''\n    Write a function to check whether the given string is ending with alphabet.\n    '''\n    for i in string:\n        if not check_str_alphabet(i):\n            return False\n    return True\ndef check_str_alphabet_vowel(string): \n    '''\n    Write a function to check whether the given string is ending with alphabet.\n    '''\n    for i in string:\n        if not check_str_alphabet_vowel(i):\n            return False\n    return True\ndef check_str_alphabet_vowel_list(string): \n    '''\n    Write a function to check whether the given string is ending with alphabet.\n    '''\n    for i in string:\n        if not check_str_alphabet_vowel(i):\n            return False\n    return True\ndef check_str_alphabet_vowel_list_vowel(string): \n    '''\n    Write a function to check whether the given string is ending with alphabet.\n    '''\n    for i in string:\n        if not check_str_alphabet_vowel_list(i):\n            return False\n    return True\ndef check_str_end_vowel(string): \n    '''\n    Write a function to check whether the given string ends with vowel.\n    '''\n    if string[-1] in 'aeiouAEIOU':\n        return True\n    else:\n        return False\ndef check_str_end_vowel_list(string): \n    '''\n    Write a function to check whether the given string ends with vowel.\n    '''\n    for i in string:\n        if not check_str_end_vowel(i):\n            return False\n    return True\ndef check_str_end_vowel_list_vowel(string): \n    '''\n    Write a function to check whether the given string ends with vowel.\n    '''\n    for i in string:\n        if not check_str_end_vowel_list(i):\n            return False\n    return True\ndef check_str_end_alphabet(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    if string[-1] in 'AEIOU':\n        return True\n    else:\n        return False\ndef check_str_end_alphabet_list(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    for i in string:\n        if not check_str_end_alphabet(i):\n            return False\n    return True\ndef check_str_end_alphabet_vowel(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    if string[-1] in 'AEIOU':\n        return True\n    else:\n        return False\ndef check_str_end_alphabet_vowel_list(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    for i in string:\n        if not check_str_end_alphabet_vowel(i):\n            return False\n    return True\ndef check_str_end_alphabet_vowel_list_vowel(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    for i in string:\n        if not check_str_end_alphabet_vowel_list(i):\n            return False\n    return True\ndef check_str_end_alphabet_vowel_list_alphabet(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    for i in string:\n        if not check_str_end_alphabet_vowel_list_alphabet(i):\n            return False\n    return True\ndef check_str_end_alphabet_vowel_list_alphabet_list(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    for i in string:\n        if not check_str_end_alphabet_vowel_list_alphabet_list(i):\n            return False\n    return True\ndef check_str_end_alphabet_vowel_list_alphabet_list_vowel(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    for i in string:\n        if not check_str_end_alphabet_vowel_list_alphabet_list(i):\n            return False\n    return True\ndef check_str_end_alphabet_vowel_list_alphabet_list_vowel_list(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    for i in string:\n        if not check_str_end_alphabet_vowel_list_alphabet_list_vowel(i):\n            return False\n    return True\ndef check_str_end_alphabet_vowel_list_alphabet_list_vowel_list_alphabet(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    for i in string:\n        if not check_str_end_alphabet_vowel_list_alphabet_list_vowel_list(i):\n            return False\n    return True\ndef check_str_end_alphabet_vowel_list_alphabet_list_alphabet_list(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    for i in string:\n        if not check_str_end_alphabet_vowel_list_alphabet_list_vowel_list(i):\n            return False\n    return True\ndef check_str_end_alphabet_vowel_list_alphabet_list_vowel_list_alphabet(string): \n    '''\n    Write a function to check whether the given string ends with alphabet.\n    '''\n    for i in string:\n        if not check_str_end_alphabet_vowel_list_alphabet_list_vowel_list_alphabet(i):\n            return False\n    return True\ndef check_str_end_alphabet_vowel_list_alphabet_list"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in 'aeiouAEIOU':\n        return True\n    else:\n        return False\ndef remove_vowel(string):\n    '''\n    Write a function to remove the vowels from a given string.\n    '''\n    remove_vowel_string = string\n    vowels = ['A','E','I','O','U']\n    remove_vowel_string = remove_vowel_string.replace(\" \",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"a\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"e\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"i\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"o\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"u\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"y\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"u\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"t\")\n    remove_vowel_string = remove_vowel_string.replace(\"a\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"o\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"e\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"i\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"u\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"t\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"a\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"e\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"i\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"o\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"u\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"A\",\"a\")\n    remove_vowel_string = remove_vowel_string.replace(\"E\",\"e\")\n    remove_vowel_string = remove_vowel_string.replace(\"I\",\"i\")\n    remove_vowel_string = remove_vowel_string.replace(\"O\",\"o\")\n    remove_vowel_string = remove_vowel_string.replace(\"U\",\"u\")\n    remove_vowel_string = remove_vowel_string.replace(\"Y\",\"y\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"t\")\n    remove_vowel_string = remove_vowel_string.replace(\"a\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"o\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"e\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"i\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"u\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"t\")\n    remove_vowel_string = remove_vowel_string.replace(\"a\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"e\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"i\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"o\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"u\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"Y\",\"y\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"t\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"t\")\n    remove_vowel_string = remove_vowel_string.replace(\"a\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"e\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"i\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"u\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"U\",\"U\")\n    remove_vowel_string = remove_vowel_string.replace(\"E\",\"E\")\n    remove_vowel_string = remove_vowel_string.replace(\"I\",\"I\")\n    remove_vowel_string = remove_vowel_string.replace(\"O\",\"O\")\n    remove_vowel_string = remove_vowel_string.replace(\"U\",\"U\")\n    remove_vowel_string = remove_vowel_string.replace(\"Y\",\"Y\")\n    remove_vowel_string = remove_vowel_string.replace(\"A\",\"A\")\n    remove_vowel_string = remove_vowel_string.replace(\"E\",\"E\")\n    remove_vowel_string = remove_vowel_string.replace(\"I\",\"I\")\n    remove_vowel_string = remove_vowel_string.replace(\"O\",\"O\")\n    remove_vowel_string = remove_vowel_string.replace(\"U\",\"U\")\n    remove_vowel_string = remove_vowel_string.replace(\"U\",\"U\")\n    remove_vowel_string = remove_vowel_string.replace(\"Y\",\"Y\")\n    remove_vowel_string = remove_vowel_string.replace(\"Y\",\"Y\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"t\")\n    remove_vowel_string = remove_vowel_string.replace(\"Y\",\"Y\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"t\")\n    remove_vowel_string = remove_vowel_string.replace(\"a\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"e\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"i\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"u\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"T\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"T\")\n    remove_vowel_string = remove_vowel_string.replace(\"A\",\"A\")\n    remove_vowel_string = remove_vowel_string.replace(\"E\",\"E\")\n    remove_vowel_string = remove_vowel_string.replace(\"I\",\"I\")\n    remove_vowel_string = remove_vowel_string.replace(\"O\",\"O\")\n    remove_vowel_string = remove_vowel_string.replace(\"U\",\"U\")\n    remove_vowel_string = remove_vowel_string.replace(\"U\",\"U\")\n    remove_vowel_string = remove_vowel_string.replace(\"Y\",\"Y\")\n    remove_vowel_string = remove_vowel_string.replace(\"Y\",\"Y\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"t\")\n    remove_vowel_string = remove_vowel_string.replace(\"T\",\"T\")\n    remove_vowel_string = remove_vowel_string.replace(\"a\",\"\")\n    remove_vowel_string = remove_vowel_string.replace(\"e\",\"\")\n    remove_vowel_string "
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.search(regex, string)\n    "
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    vowels_list = ['A', 'E', 'I', 'O', 'U']\n    for letter in string:\n        if letter in vowels_list:\n            return False\n    return True\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in ['a','e','i','o','u','A','E','I','O','U']:\n        return True\n    else: \n        return False\ndef lexic(string):\n    '''\n    Write a function to check whether the given string is a palindrome.\n    '''\n    string = string.lower()\n    return string == string[::-1]\ndef get_next_letter(word):\n    '''\n    Write a function that finds the next letter in a given word.\n    '''\n    if word =='':\n        return''\n    else:\n        return word[0]\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 0:\n        return -1\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 0:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 0\n    else:\n        return (geometric_sum(n-1) + n)\n    "
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n**2 if n > 1 else 0\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return (n * geometric_sum(n-1))\nprint(geometric_sum(5))\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef find_Index1(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(1, n+1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef power(n, x): \n    '''\n    Write a python function that calculates the nth power of x. This function takes an integer n and an integer x and returns nx^x.\n    '''\n    return math.pow(n, x)\ndef mid(n):\n    '''\n    Write a python function that calculates the nth largest number in a sequence with n digits.\n    '''\n    n = 0\n    n = find_Index(n)\n    while(n < n + 2):\n        if n % 2 == 0:\n            mid = power(n, 2)\n        else:\n            mid = power(n, 1)\n        if mid > n:\n            n = n + 1\n        elif mid < n:\n            n = n\n        else:\n            pass\n    return n\ndef find_Index2(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef find_Index3(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef find_Index4(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef find_Index5(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef find_Index6(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef find_Index7(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef find_Index8(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef find_Index9(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef find_Index10(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n: \n                index = index + 1\n            else: \n                for y in range(2, x): \n                    if x % y == 0: \n                        break\n                else: \n                    index = index + 1\n    return index\ndef find_Index11(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 0\n    for x in range(n, 0, -1): \n        if x <= math.sqrt(n): \n            if x == n:"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while n >= i:\n        if n%i==0:\n            i=i+1\n        else:\n            i=i+i+1\n    return i-1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n == 0:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 0\n    if n == 3:\n        return 1\n    if n > 3:\n        index = 0\n        for i in range(1, n):\n            if n % i == 0:\n                break\n        else:\n            index = n-1\n    else:\n        index = -1\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #Step 1\n    #Calculate the nth value of smallest triangular number\n    for i in range(1,n+1):\n        if i == 1 or i == n:\n            return i\n        else:\n            #Step 2\n            # Calculate the current value of nth value of smallest triangular number\n            while n%i==0:\n                n//=i\n    #Step 3\n    #Return the index\n    return n\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    min_num = math.inf\n    index = 1\n    for x in range(2,n+1):\n        temp = x*x\n        while temp <= min_num:\n            min_num = temp\n            index += 1\n            temp *= x\n    return index-1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        print(i)\n        for j in range(i,1,-1):\n            if j%i==0:\n                break\n            print(j)\n        else:\n            print(\"No index for the given number\")\n        break\n    else:\n        print(\"No index for the given number\")\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return math.floor(math.sqrt(n)) - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    if n <= 0: \n        print(\"You must enter a positive integer.\")\n        \n    else: \n        index = math.floor(math.sqrt(n)) \n        while (n!= 1) and (index >= 1): \n            if (n % index == 0): \n                return index \n            index -= 1 \n    return -1 \n"
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    l = list(str(n))\n    return int(l[-1])*len(l)-int(l[-2])*len(l)-int(l[-3])\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] not in new_dict:\n            new_dict[test_tup[i]] = test_tup[i+1]\n        else:\n            new_dict[test_tup[i]] = new_dict[test_tup[i]] + test_tup[i+1]\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {key:tuple_to_dict(tuple(tuple_to_dict(x) for x in test_tup[i])) for i in range(len(test_tup))}\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] in new_dict:\n            new_dict[test_tup[i]] += 1\n        else:\n            new_dict[test_tup[i]] = 1\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2])"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_val = []\n    for i in test_tup:\n        key_val.append(i[0])\n        key_val.append(i[1])\n    return(dict(zip(key_val,test_tup)))\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    test_dict = {}\n    for i in test_tup:\n        test_dict[i] = []\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for key, value in test_tup:\n        result[key] = value\n    return result\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    # Create an empty dictionary\n    dict = {}\n    \n    # Loop over the tuple\n    for i in range(0, len(test_tup)-1):\n        dict[test_tup[i]] = test_tup[i+1]\n    \n    # Return the dictionary\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup)"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    # i = 0\n    # while i < len(test_tup):\n    #     tup_tuple = test_tup[i][1]\n    #     new_dict = {}\n    #     for x in tup_tuple:\n    #         new_dict[x] = test_tup[i][0]\n    #         i = i + 1\n    #     test_tup = new_dict\n    #     # print(new_dict)\n    #     # print(test_tup)\n    #     # print(\"---------------------------\")\n    #     # break\n    #     # break\n    # return test_tup\n    \n    \n    return {\n        'temp': test_tup[0],\n        'humidity': test_tup[1],\n        'pressure': test_tup[2],\n        'v': test_tup[3],\n        'k': test_tup[4],\n        'f': test_tup[5],\n        'c': test_tup[6],\n        'r': test_tup[7],\n        'n': test_tup[8],\n        'g': test_tup[9],\n        'e': test_tup[10],\n        'y': test_tup[11],\n        'o': test_tup[12],\n        'm': test_tup[13],\n        'a': test_tup[14],\n        'b': test_tup[15],\n        'c': test_tup[16]\n    }\n    \ndef convert_to_hex(data):\n    '''\n    Write a function to convert the given data to an hex string.\n    '''\n    \n    hex_data = \"\"\n    \n    for d in data:\n        hex_data += d\n    \n    return hex_data\n    \ndef convert_to_float(data):\n    '''\n    Write a function to convert the given data to a float number.\n    '''\n    \n    return float(data)\n    \ndef convert_to_char(data):\n    '''\n    Write a function to convert the given data to a character.\n    '''\n    \n    return chr(data)\n    \ndef convert_to_int(data):\n    '''\n    Write a function to convert the given data to an int number.\n    '''\n    \n    return int(data)\n    \ndef convert_to_string(data):\n    '''\n    Write a function to convert the given data to a string.\n    '''\n    \n    return str(data)\n    \ndef convert_to_bool(data):\n    '''\n    Write a function to convert the given data to a boolean.\n    '''\n    \n    return bool(data)\n    \ndef convert_to_char_list(data):\n    '''\n    Write a function to convert the given data to a char list.\n    '''\n    \n    return list(data)\n    \ndef convert_to_dict(data):\n    '''\n    Write a function to convert the given data to a dict.\n    '''\n    \n    return dict(data)\n    \ndef add_to_dict(key, value):\n    '''\n    Write a function to add a key to a dict.\n    '''\n    \n    return value\n    \ndef get_list(key):\n    '''\n    Write a function to get a key from a dict.\n    '''\n    \n    return key\n    \ndef to_list(data):\n    '''\n    Write a function to convert a list to a dict.\n    '''\n    \n    return data\n    \ndef to_char(data):\n    '''\n    Write a function to convert a dict to a char.\n    '''\n    \n    return data\n    \ndef to_int(data):\n    '''\n    Write a function to convert a dict to an int.\n    '''\n    \n    return data\n    \ndef to_float(data):\n    '''\n    Write a function to convert a dict to a float.\n    '''\n    \n    return data\n    \ndef to_hex(data):\n    '''\n    Write a function to convert a dict to a hexadecimal string.\n    '''\n    \n    return data\n    \ndef to_char_list(data):\n    '''\n    Write a function to convert a dict to a char list.\n    '''\n    \n    return data\n    \ndef to_char_dict(data):\n    '''\n    Write a function to convert a dict to a char dict.\n    '''\n    \n    return data\n    \ndef to_string(data):\n    '''\n    Write a function to convert a dict to a string.\n    '''\n    \n    return data\n    \ndef to_string_dict(data):\n    '''\n    Write a function to convert a dict to a string dict.\n    '''\n    \n    return data\n    \ndef to_string_list(data):\n    '''\n    Write a function to convert a dict to a string list.\n    '''\n    \n    return data\n    \ndef to_char_dict_list(data):\n    '''\n    Write a function to convert a dict to a char dict list.\n    '''\n    \n    return data\n    \ndef to_string_list_dict(data):\n    '''\n    Write a function to convert a dict to a string list dict.\n    '''\n    \n    return data\n    \ndef to_char_list_dict(data):\n    '''\n    Write a function to convert a dict to a char list dict.\n    '''\n    \n    return data\n    \ndef to_char_dict_list_dict(data):\n    '''\n    Write a function to convert a dict to a char dict list dict.\n    '''\n    \n    return data\n    \ndef to_bool(data):\n    '''\n    Write a function to convert a dict to a bool.\n    '''\n    \n    return data\n    \ndef to_float_list(data):\n    '''\n    Write a function to convert a dict to a float list.\n    '''\n    \n    return data\n    \ndef to_int_list(data):\n    '''\n    Write a function to convert a dict to a int list.\n    '''\n    \n    return data\n    \ndef to_float_dict(data):\n    '''\n    Write a function to convert a dict to a float dict.\n    '''\n    \n    return data\n    \ndef to_float_list_dict(data):\n    '''\n    Write a function to convert a dict to a float list dict.\n    '''\n    \n    return data\n    \ndef to_float_dict_list(data):\n    '''\n    Write a function to convert a dict to a float dict list.\n    '''\n    \n    return data\n    \ndef to_float_char_list(data):\n    '''\n    Write a function to convert a dict to a float list dict.\n    '''\n    \n    return data\n    \ndef to_string_list_dict(data):\n    '''\n    Write a function to convert a dict to a string list dict.\n    '''\n    \n    return data\n    \ndef to_string_list_dict_list(data):\n    '''\n    Write a function to convert a dict to a string list dict list.\n    '''\n    \n    return data\n    \ndef to_string_list_dict_char_list(data):\n    '''\n    Write a function to convert a dict to a string list dict dict.\n    '''\n    \n    return data\n    \ndef to_string_list_dict_char_list_list(data):\n    '''\n    Write a function to convert a dict to a string list dict dict list.\n    '''\n    \n    return data\n    \ndef to_string_list_dict_char_list_dict(data):\n    '''\n    Write a function to convert a dict to a string list dict dict dict.\n    '''\n    \n    return data\n    \ndef to_string_list_char_list_dict_list(data):\n    '''\n    Write a function to convert a dict to a string list dict dict dict list.\n    '''\n    \n    return data\n    \ndef to"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    i = 0\n    while i < len(s) :\n        if s[i]!= s[i+1] :\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_list = list(s)\n    list_len = len(s)\n    for i in range(list_len) :\n        for j in range(i+1,list_len) :\n            if s[i] == s[j] :\n                char_list[i] = char_list[i] + s[j]\n            else:\n                continue\n        #print(char_list)\n    list_len = len(char_list)\n    if(list_len == 1) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l=len(s)\n    for i in range(l-1):\n        if (s[i] == s[i+1]) :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    str = s\n    str.lower()\n    for i in range(len(str)) :\n        for j in range(i + 1, len(str)) :\n            if str[i]!= str[j] :\n                if str[i]!='' and str[j]!='' :\n                    return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    dict1 = {\"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0, \"e\": 0, \"f\": 0, \"g\": 0, \"h\": 0, \"i\": 0, \"j\": 0, \"k\": 0, \"l\": 0, \"m\": 0, \"n\": 0, \"o\": 0, \"p\": 0, \"q\": 0, \"r\": 0, \"s\": 0, \"t\": 0, \"u\": 0, \"v\": 0, \"w\": 0, \"x\": 0, \"y\": 0, \"z\": 0}\n    for i in s :\n        for j in i :\n            dict1[j] += 1\n    for i in dict1 :\n        if dict1[i] > 1 :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = list(s)\n    return (s == list(s[::-1]))\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for char in s :\n        if char.isalpha() == True :\n            count = count + 1\n    if count == len(s) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    set_values = set(s)\n    for item in set_values:\n        if s.count(item) == s.count(item.lower()):\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i] == s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c_dic = {}\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    for i in range(side):\n        area += (side**2 + side**2) * (1/6)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0.0\n    elif side == 1:\n        return (4/3) * (side ** 3)\n    elif side == 2:\n        return (8/3) * (side ** 3)\n    elif side == 3:\n        return (12/3) * (side ** 3)\n    elif side == 4:\n        return (16/3) * (side ** 3)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #Side = [[[1, 0, 0],[1, 0, 0],[0, 1, 0],[0, 1, 0]]]\n    side = [[1, 0, 0], [1, 0, 0], [0, 1, 0], [0, 1, 0]]\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                if math.sqrt(side[i][0] ** 2 + side[i][1] ** 2 + side[i][2] ** 2) > math.sqrt(side[j][0] ** 2 + side[j][1] ** 2 + side[j][2] ** 2):\n                    area += 1\n    return area\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0]\n    return area\ndef area_cylinder(side):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1]\n    return area\ndef area_sphere(side):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1]\n    return area\ndef area_tetrahedron_2(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1]\n    return area\ndef area_cube_2(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1]\n    return area\ndef area_cylinder_2(side):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1]\n    return area\ndef area_sphere_2(side):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1]\n    return area\ndef tetrahedron_area(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1] * side[i][2] * side[k][2]\n    return area\ndef cube_area(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1] * side[i][2] * side[k][2]\n    return area\ndef cylinder_area(side):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1] * side[i][2] * side[k][2]\n    return area\ndef sphere_area(side):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1] * side[i][2] * side[k][2]\n    return area\ndef tetrahedron_area_2(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1] * side[i][2] * side[k][2] * side[j][2]\n    return area\ndef cube_area_2(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1] * side[i][2] * side[k][2]\n    return area\ndef cylinder_area_2(side):\n    '''\n    Write a function to calculate the area of a cylinder.\n    '''\n    area = 0\n    for i in range(len(side)):\n        for j in range(i + 1, len(side)):\n            for k in range(j + 1, len(side)):\n                area += side[i][0] * side[j][0] * side[k][0] * side[i][1] * side[k][1] * side[i][2] * side[k][2] * side[j][2]\n    return area\ndef spher"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side > 0:\n        return 4 * math.pi * (side ** 2)\n    else:\n        return 0\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 0:\n        return 0\n    elif side == 1:\n        return math.sqrt(3)\n    elif side == 2:\n        return 4 * math.sqrt(3)\n    elif side == 3:\n        return 6 * math.sqrt(3)\n    elif side == 4:\n        return 8 * math.sqrt(3)\n    elif side == 5:\n        return 10 * math.sqrt(3)\n    else:\n        return 50\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    if side == 1:\n        a = (side ** 2) * ((1 + ((2 * side) - 1) ** 2) / 2)\n        b = ((3 * side ** 2) - (4 * side)) * ((1 + ((2 * side) - 1) ** 2) / 2)\n        c = ((side ** 2) * (1 + ((2 * side) - 1) ** 2)) / 2\n        d = ((3 * side ** 2) - (4 * side)) * ((1 + ((2 * side) - 1) ** 2))\n    else:\n        a = ((side ** 2) * ((1 + ((2 * side) - 1) ** 2) / 2) + (1 + ((2 * side) - 2) ** 2) / 2)\n        b = ((3 * side ** 2) - (4 * side)) * ((1 + ((2 * side) - 1) ** 2) / 2)\n        c = ((side ** 2) * ((1 + ((2 * side) - 1) ** 2)) + (1 + ((2 * side) - 2) ** 2)) / 2\n        d = ((3 * side ** 2) - (4 * side)) * ((1 + ((2 * side) - 1) ** 2))\n    return (a * b * c * d)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (side ** 2) * math.sqrt(3)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * math.pi * (side ** 3)\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4 * math.pi * side\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side/6\n    c = side/6\n    d = side\n    e = side/6\n    f = side/6\n    g = side\n    h = side\n    i = side\n    k = side/6\n    l = side\n    o = side/6\n    p = side\n    q = side\n    r = side\n    s = side/6\n    t = side\n    u = side\n    w = side\n    x = side\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # TODO: Write your code here\n    if len(list) == 0:\n        return []\n    if m == 0:\n        return list\n    if m < 0:\n        m = m * -1\n        list = rotate(list, m)\n    return rotate(list, m)\n    #raise NotImplementedError\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list)==1:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # n = len(list)\n    # for i in range(0, n):\n    #     list[i], list[n - i - 1] = list[n - i - 1], list[i]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Write your code here\n    if not list:\n        return []\n    index = len(list) - 1\n    while index >= 0:\n        # right\n        # if the current index is greater than the last index - then we need to swap index with last index\n        if index > len(list) - 1:\n            temp = list[index + 1]\n            list[index + 1] = list[index]\n            list[index] = temp\n            break\n        # if the current index is less than the last index - then we need to swap index with the last index\n        if index < 0:\n            temp = list[index - 1]\n            list[index - 1] = list[index]\n            list[index] = temp\n            break\n        # rotate the list to the right\n        index -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = []\n    for i in list:\n        l.append(i)\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # Step 1: Initialize the current index of the list and the step value\n    i = 0\n    # Step 2: While the current index is less than the length of the list\n    while i < n:\n        # Step 3: Update the current index by moving the value of the current index\n        # element to the right by the specified number of steps\n        list[i] = list[i+m]\n        i += m\n    # Step 4: Return the updated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:]+list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = len(list)\n    if l == 0:\n        return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # generate a new list of the same size as the original list\n    n = len(list)\n    # start at the end of the list and move the cursor one position right up\n    # loop from 0 to n - 1\n    for i in range(n - 1, -1, -1):\n        # if the current index is less than the length of the list, add it to the left end\n        if i >= m:\n            # print out the original list\n            # print(list)\n            # print(\"The new list is:\")\n            # print(list[0:i])\n            # print(\"\\n\")\n            # print(\"The new list is:\")\n            # print(list[i:n])\n            list = list[0:i] + list[i + 1:]\n            break\n        else:\n            # print out the original list\n            # print(list)\n            # print(\"The new list is:\")\n            # print(list[0:i])\n            # print(\"\\n\")\n            # print(\"The new list is:\")\n            # print(list[i:n])\n            list = list[0:i] + list[i + 1:]\n            break\n    # return the new list\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(n // 2):\n        t = list[i]\n        list[i] = list[n - 1 - i]\n        list[n - 1 - i] = t\n    return list\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_index = test_tup.index(None)\n    if none_index!= len(test_tup) - 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return len(test_tup) == 0\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup is None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None or test_tup[1] == None or test_tup[2] == None or test_tup[3] == None:\n        return False\n    else:\n        return True\n    \ndef check_for_eof(test_tup):\n    '''\n    Write a function to check if the given tuple is empty or not.\n    '''\n    if test_tup[0]!= None and test_tup[1]!= None and test_tup[2]!= None and test_tup[3]!= None:\n        return False\n    else:\n        return True\n        \ndef add_value(test_tup, test_val):\n    '''\n    Write a function to add the given value to the tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"tuple required\")\n    else:\n        test_tup = (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_val)\n    \n    if check_none(test_tup):\n        return None\n    elif check_for_eof(test_tup):\n        return None\n    else:\n        return test_tup\n    \ndef check_and_print_tuple(test_tup):\n    '''\n    Write a function to check if the given tuple has all values of the given type or not.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"tuple required\")\n    else:\n        return test_tup\n    \ndef sort_tuple(test_tup):\n    '''\n    Write a function to sort the tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"tuple required\")\n    else:\n        test_tup = sorted(test_tup)\n        \n    return test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup:\n        print(\"The tuple has none value:\")\n        for item in test_tup:\n            print(item)\n        print(\" \")\n    else:\n        print(\"The tuple has none value:\")\n        print(\" \")\n        \n    \ndef write_to_file(file):\n    '''\n    Write a function to write the tuple in the given file.\n    '''\n    with open(file, 'w') as f:\n        f.write('{}'.format(tuple(map(lambda x: str(x), tup))))\n        \ndef open_file(file):\n    '''\n    Open a file.\n    '''\n    with open(file) as f:\n        data = f.read().splitlines()\n    return data\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    mylist = []\n    for i in range(startnum, endnum+1):\n        if i % 10 == 0:\n            mylist.append(i)\n    return(mylist)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    \n    # Hint: use a lambda function\n    \n    # return [f for f in range(int(startnum), int(endnum)) if int(startnum) % int(f) == 0 and int(endnum) % int(f) == 0]\n    \n    # return [f for f in range(int(startnum), int(endnum)) if int(startnum) % int(f) == 0]\n    \n    return [f for f in range(int(startnum), int(endnum)) if int(startnum) % int(f) == 0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    f = open('F:\\Projects\\Python\\Functions\\divisible_by_digits.txt', 'w')\n    for i in range(startnum, endnum+1):\n        if (i % 10 == 0):\n            f.write('\\n')\n        f.write(str(i) +'')\n    f.close()\n    return\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Write your code here\n    digits = []\n    for i in range(10):\n        if i!= 0 and i not in digits:\n            digits.append(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    import math\n    # Write your code here.\n    import string\n    digits = []\n    for i in range(10):\n        if startnum % 10 == i:\n            digits.append(i)\n    for i in range(10, 100):\n        if endnum % 10 == i:\n            digits.append(i)\n    for i in range(100, 1000):\n        if endnum % 10 == i:\n            digits.append(i)\n    for i in range(1000, 10000):\n        if endnum % 10 == i:\n            digits.append(i)\n    if len(digits) == 1:\n        print(startnum, \" \", digits[0])\n        return digits[0]\n    elif len(digits) == 2:\n        print(startnum, \" \", digits[0], \" \", digits[1])\n        return digits[0], digits[1]\n    elif len(digits) == 3:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2])\n        return digits[0], digits[1], digits[2]\n    elif len(digits) == 4:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3])\n        return digits[0], digits[1], digits[2], digits[3]\n    elif len(digits) == 5:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4])\n        return digits[0], digits[1], digits[2], digits[3], digits[4]\n    elif len(digits) == 6:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4], \" \", digits[5])\n        return digits[0], digits[1], digits[2], digits[3], digits[4], digits[5]\n    elif len(digits) == 7:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4], \" \", digits[5], \" \", digits[6])\n        return digits[0], digits[1], digits[2], digits[3], digits[4], digits[5], digits[6]\n    elif len(digits) == 8:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4], \" \", digits[5], \" \", digits[6], \" \", digits[7])\n        return digits[0], digits[1], digits[2], digits[3], digits[4], digits[5], digits[6], digits[7], digits[8]\n    elif len(digits) == 9:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4], \" \", digits[5], \" \", digits[6], \" \", digits[7], \" \", digits[8])\n        return digits[0], digits[1], digits[2], digits[3], digits[4], digits[5], digits[6], digits[7], digits[8], digits[9]\n    elif len(digits) == 10:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4], \" \", digits[5], \" \", digits[6], \" \", digits[7], \" \", digits[8], \" \", digits[9])\n        return digits[0], digits[1], digits[2], digits[3], digits[4], digits[5], digits[6], digits[7], digits[8], digits[9], digits[10]\n    else:\n        print(\"INVALID INPUT\")\n        return None\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_multiple(num, digits):\n        return num % 10 == digits\n    \n    def check_digits(num):\n        '''\n        Function to check digits in a number\n        '''\n        if num < 10:\n            return num\n        elif num % 10 == 1:\n            return num\n        elif is_multiple(num, 1):\n            return num\n        else:\n            num = num - 10\n            return check_digits(num)\n    \n    def check_range(num, digits):\n        '''\n        Function to check range of a number\n        '''\n        if num <= 10 ** (digits-1):\n            return num\n        elif num < 10 ** digits:\n            return check_range(num, digits-1)\n        else:\n            num = num - 10 ** digits\n            return check_range(num, digits-1)\n    \n    def find_range(startnum, endnum, digits):\n        '''\n        Function to find range of a number\n        '''\n        range_start = check_range(startnum, digits)\n        range_end = check_range(endnum, digits)\n        return range_start, range_end\n    \n    def calc_range(digits):\n        '''\n        Function to calculate range of a number\n        '''\n        startnum, endnum = find_range(1, 10 ** (digits-1), digits)\n        return startnum, endnum\n    \n    range_start, range_end = calc_range(startnum)\n    return startnum, endnum, range_start, range_end\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    startnum = startnum.strip()\n    endnum = endnum.strip()\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def check(digit, length):\n        ''' \n        Check the number.\n        '''\n        if (digit // length) == digit:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digit(startnum, endnum):\n        divisibles = []\n        for number in range(startnum, endnum + 1):\n            if (number % 10) == 0:\n                divisibles.append(number)\n        return divisibles\n    return divisible_by_digit\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    print(startnum)\n    print(endnum)\n    if type(startnum) is not int or type(endnum) is not int:\n        return\n    \n    digits = {0,1,2,3,4,5,6,7,8,9}\n    \n    while startnum>0:\n        startnum,remainder = divmod(startnum,10)\n        digits.add(remainder)\n    \n    while endnum>0:\n        endnum,remainder = divmod(endnum,10)\n        digits.add(remainder)\n        \n    return digits\n    \nprint(divisible_by_digits(1,10))\nprint(divisible_by_digits(101,10))\nprint(divisible_by_digits(0,100))\nprint(divisible_by_digits(0,0))\nprint(divisible_by_digits(1,1))"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #case 1\n    if a<=0 or r>=2*math.pi:\n        return None\n    #case 2\n    elif a<=2*math.pi/3:\n        return r*math.sin(a)\n    #case 3\n    elif a<=4*math.pi/3:\n        return r*math.sin(a)*math.cos(a-a/6)\n    #case 4\n    else:\n        return (2*r*math.cos(a))\n    #return\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(r > r_area): return\n    if(r < r_area): return\n    angle = r/a\n    return angle\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # check if angle is in range [0,360]\n    if a <= 0 or a >= 360:\n        return print('Please enter a valid angle.')\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if math.degrees(math.atan2(a,r))>math.pi/2:\n        return None\n    return (r*math.cos(math.radians(math.degrees(math.atan2(a,r)))))\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # angles are in radians\n    alpha = math.radians(a)\n    # radius is in meters\n    r = r * 1000\n    # if the angle is less than 360 degrees, return None\n    if (alpha >= math.pi/2):\n        return None\n    # if the angle is in the interval [-pi, pi), return the area\n    if (alpha <= math.pi/2):\n        return math.pi * r ** 2\n    # if the angle is in the interval [-2pi, 2pi), return the area of a square with two sides\n    if (alpha <= math.pi/2 - 2*math.pi):\n        return 2 * math.pi * r ** 2\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a rectangle with one side\n    if (alpha <= math.pi/2 + math.pi):\n        return (math.pi * r ** 2) * 2\n    # if the angle is in the interval [-pi, pi/2], return the area of a triangle with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 3\n    # if the angle is in the interval [-2pi, 2pi], return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 4\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a trapezoid with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 5\n    # if the angle is in the interval [-2pi, 2pi), return the area of a trapezoid with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 6\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a trapezoid with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 7\n    # if the angle is in the interval [-pi, pi], return the area of a parallelogram with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 8\n    # if the angle is in the interval [-2pi, 2pi), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 9\n    # if the angle is in the interval [-2pi/2, 2pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 10\n    # if the angle is in the interval [-pi/2, pi], return the area of a parallelogram with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 11\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 12\n    # if the angle is in the interval [-2pi/2, pi/2), return the area of a parallelogram with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 13\n    # if the angle is in the interval [-pi, pi], return the area of a parallelogram with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 14\n    # if the angle is in the interval [-2pi/2, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 15\n    # if the angle is in the interval [-2pi, pi/2), return the area of a parallelogram with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 16\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 17\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a parallelogram with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 18\n    # if the angle is in the interval [-2pi/2, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 19\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 20\n    # if the angle is in the interval [-2pi, pi], return the area of a parallelogram with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 21\n    # if the angle is in the interval [-pi, pi], return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 22\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 23\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 24\n    # if the angle is in the interval [-2pi, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 25\n    # if the angle is in the interval [-pi, pi/2), return the area of a parallelogram with one side\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 26\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 27\n    # if the angle is in the interval [-2pi/2, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 28\n    # if the angle is in the interval [-pi/2, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 29\n    # if the angle is in the interval [-2pi, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 30\n    # if the angle is in the interval [-pi, pi/2), return the area of a parallelogram with two sides\n    if (alpha <= math.pi/2 + math.pi/2):\n        return (math.pi * r ** 2) * 31\n    # if the angl"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*a) + ((r*arc)/2)\n        \ndef sector_perimeter(r,a):\n    '''\n    Write a function to find perimeter of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*arc)/2\n        \ndef sector_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*arc)/3\n        \ndef sector_volume_from_area(r,a):\n    '''\n    Write a function to calculate volume of a sector from its area. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*arc)/3\n        \ndef sector_volume_from_perimeter(r,a):\n    '''\n    Write a function to calculate volume of a sector from its perimeter. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*arc)/2\n        \ndef sector_volume_from_sector(r,a):\n    '''\n    Write a function to calculate volume of a sector from a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*arc)/2\n        \ndef sector_area_from_sector(r,a):\n    '''\n    Write a function to calculate area of a sector from a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*arc)/2\n        \ndef sector_area_from_perimeter(r,a):\n    '''\n    Write a function to calculate area of a sector from its perimeter. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*arc)/2\n        \ndef sector_area_from_sector(r,a):\n    '''\n    Write a function to calculate area of a sector from a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*arc)/2\n        \ndef sector_circumference(r,a):\n    '''\n    Write a function to calculate circumference of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*arc)/2\n        \ndef sector_circumference_from_area(r,a):\n    '''\n    Write a function to calculate circumference of a sector from its area. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n        else:\n            arc = arc\n        \n        return (r*arc)/2\n        \ndef sector_circumference_from_sector(r,a):\n    '''\n    Write a function to calculate circumference of a sector from a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if r > 180:\n        return\n    elif r < 180:\n        return\n    else:\n        arc = math.acos(a)\n        \n        if arc > math.pi/3:\n            arc = math.pi/3\n        elif arc < 0:\n            arc = 0\n            \n        if arc < 0:\n            arc = math.pi - arc\n    "
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a == 0):\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector = math.tan(math.radians(a)) * r * (r + (1/a))\n    print(sector)\n    return sector\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    c=0\n    for i in range(0,360):\n        c=c+math.cos(math.radians(i))\n        c=c*c*r\n    if c>a:\n        return None\n    else:\n        return math.acos(c/math.sqrt(a))\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    z = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # brute force solution\n    lcs = [[0]*(len(Z)+1) for i in range(len(X)+1)]\n    for i in range(len(X)):\n        for j in range(len(Z)):\n            if X[i] == Z[j]:\n                lcs[i+1][j+1] = lcs[i][j] + 1\n            else:\n                lcs[i+1][j+1] = max(lcs[i][j+1], lcs[i+1][j])\n    return lcs[len(X)][len(Z)]\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    res = 0\n    def backtrack(X, Y, Z):\n        if len(X) == len(Y) and len(X) == len(Z):\n            if res < len(X) + len(Y) + len(Z):\n                res = len(X) + len(Y) + len(Z)\n        if len(X) > len(Y) and len(X) > len(Z):\n            return\n        if len(X) == len(Y) and len(X) == len(Z):\n            if res < len(X) + len(Y) + len(Z):\n                res = len(X) + len(Y) + len(Z)\n            return\n        if len(X) > len(Y) and len(X) > len(Z):\n            return\n        if len(X) == len(Y) and len(X) == len(Z):\n            if res < len(X) + len(Y) + len(Z):\n                res = len(X) + len(Y) + len(Z)\n            return\n        if len(X) > len(Y) and len(X) > len(Z):\n            return\n        return\n        \n    backtrack(X, Y, Z)\n    return res\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    #store in a set to find the longest common subsequence for each string sequence\n    LCS = []\n    #store the maximum length of the strings \n    max_len = max([len(i) for i in X, len(i) for i in Y, len(i) for i in Z])\n    #go through all the strings and create a new list for storing the longest common subsequence\n    for i in X:\n        temp = []\n        for j in Y:\n            temp.append(LCS.append(LCS.append(j, 0)))\n        for k in Z:\n            temp.append(LCS.append(LCS.append(k, 0)))\n        for j in range(0, max_len - len(i)):\n            if i[j : j + len(i)] == i[j : j + len(i) + 1]:\n                LCS.append(i[j : j + len(i) + 1])\n    #return the result\n    return LCS\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    Z = len(Z)\n    \n    # Create an array to store the LCS\n    LCS = [[0 for i in range(Z+1)] for j in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                LCS[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n                \n    return LCS[m][n]\n        "
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0: \n        return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    res = []\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = set(X) \n    Y = set(Y) \n    Z = set(Z) \n    \n    # if only one string is present\n    if len(X) == 1 and len(Y) == 1 and len(Z) == 1: \n        return X, Y, Z \n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n1 = len(X)\n    n2 = len(Y)\n    n3 = len(Z)\n    if n1 > n2:\n        return lcs(n2, n3, X, Y)\n    elif n2 > n3:\n        return lcs(n3, n2, Z, Y)\n    else:\n        return lcs(n1, n3, X, Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    lengths = len(X) + len(Y) + len(Z)\n    if lengths == 0: return []\n    \n    if lengths == 1: \n        return [X, Y, Z]\n    \n    dp_l = [[0 for i in range(lengths)] for j in range(lengths)]\n    dp_r = [[0 for i in range(lengths)] for j in range(lengths)]\n    dp_b = [[0 for i in range(lengths)] for j in range(lengths)]\n    \n    for i in range(lengths): \n        for j in range(i): \n            if X[i] == Y[j]: dp_l[i][j] = dp_l[i][j] + 1\n            elif X[i] == Z[j]: dp_r[i][j] = dp_r[i][j] + 1\n            elif X[j] == Y[i]: dp_b[i][j] = dp_b[i][j] + 1\n    \n    res = []\n    for i in range(lengths): \n        for j in range(i): \n            if dp_l[i][j] == dp_l[i][j] + 1 and dp_r[j][i] == dp_r[j][i] + 1: \n                if len(dp_l[i]) > len(dp_r[j]): \n                    res = [X[i:j+1], Y[j:i+1], Z[j:i+1]]\n                    return res\n                else: \n                    res = [X[i:j+1], Z[j:i+1]]\n                    return res\n    \n    return res\n    \ndef lcs_of_four(X, Y, Z, A): \n    '''\n    Write a function to find the longest common subsequence for the given four string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-four-strings/\n    '''\n    \n    lengths = len(X) + len(Y) + len(Z) + len(A)\n    if lengths == 0: return []\n    \n    if lengths == 1: \n        return [X, Y, Z, A]\n    \n    dp_l = [[0 for i in range(lengths)] for j in range(lengths)]\n    dp_r = [[0 for i in range(lengths)] for j in range(lengths)]\n    dp_b = [[0 for i in range(lengths)] for j in range(lengths)]\n    dp_c = [[0 for i in range(lengths)] for j in range(lengths)]\n    dp_d = [[0 for i in range(lengths)] for j in range(lengths)]\n    \n    for i in range(lengths): \n        for j in range(i): \n            if X[i] == Y[j]: dp_l[i][j] = dp_l[i][j] + 1\n            elif X[i] == Z[j]: dp_r[i][j] = dp_r[i][j] + 1\n            elif X[j] == Y[i]: dp_b[i][j] = dp_b[i][j] + 1\n            elif X[i] == A[j]: dp_c[i][j] = dp_c[i][j] + 1\n            elif X[j] == A[i]: dp_d[i][j] = dp_d[i][j] + 1\n    \n    res = []\n    for i in range(lengths): \n        for j in range(i): \n            if dp_l[i][j] == dp_l[i][j] + 1 and dp_r[j][i] == dp_r[j][i] + 1 and dp_c[j][i] == dp_c[j][i] + 1 and dp_d[j][i] == dp_d[j][i] + 1: \n                if len(dp_l[i]) > len(dp_r[j]): \n                    res = [X[i:j+1], Y[j:i+1], Z[j:i+1], A[j:i+1]]\n                    return res\n                else: \n                    res = [X[i:j+1], Z[j:i+1], A[j:i+1]]\n                    return res\n    \n    return res\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str_list = []\n    for i in str1.split():\n        if i[0].isupper():\n            str_list.append(i.capitalize())\n        else:\n            str_list.append(i)\n    return''.join(str_list)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1_lst = str1.split()\n    for i in range(len(str1_lst)):\n        if str1_lst[i][0] == \" \":\n            str1_lst[i] = str1_lst[i][1:]\n    return str1_lst\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    str1_spaces = []\n    str1_space = str1[0]\n    for word in str1[1:]:\n        if word[0].isupper():\n            str1_space = word\n            if str1_space[0] == str1_space[0].upper():\n                str1_spaces.append(word)\n        else:\n            str1_spaces.append(word)\n    for word in str1_spaces:\n        str1[str1.index(word)] = word +''\n    return''.join(str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'):\n            str2 +=''\n        elif str1[i] =='':\n            str2 +=''\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1_rep = re.sub(\"^[A-Z]|[a-z]|_|[.]\",\" \", str1)\n    return str1_rep\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'[A-Z]',str1)\n    for word in words:\n        if word[0].isupper():\n            str1 = str1.replace(word, word.upper())\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'^(\\w+) (\\w+)$', str1)\n    str1 =''.join([word[0] +'' + word[1] for word in words])\n    return str1\ndef lower_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with lower case letters in a given string.\n    '''\n    words = re.findall(r'^(\\w+) (\\w+)$', str1)\n    str1 =''.join([word[0] +'' + word[1] for word in words])\n    return str1\ndef remove_punctuation(str1):\n    '''\n    Write a function that removes any punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef preprocess(str1):\n    '''\n    Write a function that removes punctuation from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation))\ndef remove_numbers(str1):\n    '''\n    Write a function that removes any numbers from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.digits))\ndef remove_symbols(str1):\n    '''\n    Write a function that removes any symbols from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.punctuation)).lower().strip()\ndef remove_acronyms(str1):\n    '''\n    Write a function that removes any acronym from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_uppercase)).lower().strip()\ndef is_acronym(str1):\n    '''\n    Write a function that checks if a given string is an acronym.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_uppercase)).isupper()\ndef remove_acronyms(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_uppercase)).lower().strip()\ndef remove_acronyms_v1(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v2(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v3(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v4(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v5(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v6(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v7(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v8(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v9(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v10(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v11(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v12(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v13(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v14(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v15(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v16(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v17(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v18(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v19(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remove_acronyms_v20(str1):\n    '''\n    Write a function that removes any acronyms from a given string.\n    '''\n    return str1.translate(str.maketrans('', '', string.ascii_lowercase)).lower().strip()\ndef remov"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # initialize an empty list of words in which the first word begins with capital letters\n    capital_words = []\n    # loop through string\n    for i in range(0, len(str1)):\n        # check if the current character is a capital letter\n        if str1[i].isupper():\n            # if it is, add to the list with all capital letters\n            capital_words.append(str1[i].lower())\n        # otherwise, ignore\n        else:\n            pass\n    # return the list with capital words\n    return capital_words\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.split(' ')\n    for i in range(0,len(str1)):\n        if str1[i] == 'Capitals':\n            str1[i] =''\n    print(' '.join(str1))\ndef at_most_one_word(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least one word long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<1:\n        return False\n    else:\n        return True\ndef at_most_two_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least two words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<2:\n        return False\n    else:\n        return True\ndef at_most_three_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least three words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<3:\n        return False\n    else:\n        return True\ndef at_most_four_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least four words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<4:\n        return False\n    else:\n        return True\ndef at_most_five_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least five words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<5:\n        return False\n    else:\n        return True\ndef at_most_six_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least six words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<6:\n        return False\n    else:\n        return True\ndef at_most_seven_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least seven words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<7:\n        return False\n    else:\n        return True\ndef at_most_eight_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least eight words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<8:\n        return False\n    else:\n        return True\ndef at_most_nine_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least nine words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<9:\n        return False\n    else:\n        return True\ndef at_most_ten_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<10:\n        return False\n    else:\n        return True\ndef at_most_eleven_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<11:\n        return False\n    else:\n        return True\ndef at_most_twelve_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<12:\n        return False\n    else:\n        return True\ndef at_most_thirteen_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<13:\n        return False\n    else:\n        return True\ndef at_most_fourteen_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<14:\n        return False\n    else:\n        return True\ndef at_most_fifteen_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<15:\n        return False\n    else:\n        return True\ndef at_most_sixteen_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<16:\n        return False\n    else:\n        return True\ndef at_most_seven_and_twelve_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<17:\n        return False\n    else:\n        return True\ndef at_most_eight_and_twelve_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<18:\n        return False\n    else:\n        return True\ndef at_most_nine_and_twelve_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<19:\n        return False\n    else:\n        return True\ndef at_most_ten_and_twelve_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<20:\n        return False\n    else:\n        return True\ndef at_most_eleven_and_twelve_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<21:\n        return False\n    else:\n        return True\ndef at_most_twelve_and_twelve_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<22:\n        return False\n    else:\n        return True\ndef at_most_three_and_twelve_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '''\n    str1 = str1.split()\n    if len(str1)<23:\n        return False\n    else:\n        return True\ndef at_most_four_and_twelve_words(str1):\n    '''\n    Write a function that takes a string and returns True if the string is at least ten words long. Otherwise return False.\n    '"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = str1.split()\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i][0].upper() + \" \" + words[i][1:]\n        if words[i][0].islower():\n            words[i] = words[i][0].lower() + \" \" + words[i][1:]\n    return''.join(words)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Basic idea:\n    # Iterate over the list, sort it and add to a new list\n    # For every item in the list sort it to the left and right\n    # For every item in the new list, sort it to the left and right\n    # Remove the items from the list\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # your code here\n    \n    # sort_numeric_strings(['1', '0.5', '2.0', '1.0'])\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=int)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort()\n    return nums_str\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    print('sort_numeric_strings')\n    print(nums_str)\n    nums_str.sort()\n    print(nums_str)\n    print()\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    print(type(nums_str))\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = list(map(int, nums_str))\n    nums.sort()\n    sorted_nums = ''.join(map(str, nums))\n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str_list = list(nums_str)\n    nums_str_list.sort()\n    nums_str = ''.join(nums_str_list)\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for element in test_list:\n        test_tup.append(element)\n        \n    return test_tup\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    test_list.append(test_tup)\n    \n    return test_lis"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(tup for tup in test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    #pass\n    test_list.append(tup)\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0: return True\n    if arr[i] < arr[i // 2] and arr[i] < arr[(i + 1) // 2] and arr[(i + 1) // 2] < arr[i]:\n        return True\n    elif arr[i] < arr[(i + 1) // 2] and arr[i] < arr[i + 1]:\n        return True\n    else: return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return True\n    if arr[i][0] < arr[i + 1][0]:\n        return check_min_heap_helper(arr, i + 1)\n    return False\n    \ndef min_heapify(arr, i):\n    '''\n    Write a function to calculate the minimum heapify of a given array.\n    '''\n    if check_min_heap_helper(arr, i) == True:\n        return arr[i][1]\n    else:\n        if arr[i][0] < arr[i][1]:\n            arr[i][0] = arr[i][1]\n            arr[i][1] = min(arr[i][0], arr[i][1])\n            if i > 0:\n                arr[i][1] = min(arr[i][1], arr[i - 1][0])\n            return arr[i][1]\n    \ndef heap_sort(arr):\n    '''\n    Write a function to sort the given array using Heap Sort.\n    '''\n    for i in range(len(arr)):\n        arr[i][1] = heap_sort(arr[i][1])\n    return arr\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    j = 2*i + 2\n    if (j > len(arr)) or (arr[j] < arr[j//2]):\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr) - 1:\n        return True\n    if arr[i] > arr[i+1]:\n        return False\n    return check_min_heap_helper(arr, i + 2)\n    \n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) - 1:\n        return True\n    return arr[i] < arr[len(arr) - 1] and check_min_heap_helper(arr, i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0:\n        left = i * 2 + 1\n        if arr[i] > arr[left] and arr[i] > arr[left + 1]:\n            return True\n        elif arr[i] < arr[left] and arr[i] < arr[left + 1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return False\n    if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    if i % 2:\n        return arr[i//2] < arr[i//2 -1]\n    else:\n        return arr[i//2] > arr[i//2 +1]\n    \ndef check_max_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents max heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    if i % 2:\n        return arr[i//2] > arr[i//2 -1]\n    else:\n        return arr[i//2] < arr[i//2 +1]\n"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr)-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 0:\n        print('The number cannot be negative')\n        return\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53\n    elif n == 54:\n        return 54\n    elif n == 55:\n        return 55\n    elif n == 56:\n        return 56\n    elif n == 57:\n        return 57\n    elif n == 58:\n        return 58\n    elif n == 59:\n        return 59\n    elif n == 60:\n        return 60\n    elif n == 61:\n        return 61\n    elif n == 62:\n        return 62\n    elif n == 63:\n        return 63\n    elif n == 64:\n        return 64\n    elif n == 65:\n        return 65\n    elif n == 66:\n        return 66\n    elif n == 67:\n        return 67\n    elif n == 68:\n        return 68\n    elif n == 69:\n        return 69\n    elif n == 70:\n        return 70\n    elif n == 71:\n        return 71\n    elif n == 72:\n        return 72\n    elif n == 73:\n        return 73\n    elif n == 74:\n        return 74\n    elif n == 75:\n        return 75\n    elif n == 76:\n        return 76\n    elif n == 77:\n        return 77\n    elif n == 78:\n        return 78\n    elif n == 79:\n        return 79\n    elif n == 80:\n        return 80\n    elif n == 81:\n        return 81\n    elif n == 82:\n        return 82\n    elif n == 83:\n        return 83\n    elif n == 84:\n        return 84\n    elif n == 85:\n        return 85\n    elif n == 86:\n        return 86\n    elif n == 87:\n        return 87\n    elif n == 88:\n        return 88\n    elif n == 89:\n        return 89\n    elif n == 90:\n        return 90\n    elif n == 91:\n        return 91\n    elif n == 92:\n        return 92\n    elif n == 93:\n        return 93\n    elif n == 94:\n        return 94\n    elif n == 95:\n        return 95\n    elif n == 96:\n        return 96\n    elif n == 97:\n        return 97\n    elif n == 98:\n        return 98\n    elif n == 99:\n        return 99\n    elif n == 100:\n        return 100\n    elif n == 101:\n        return 101\n    elif n == 102:\n        return 102\n    elif n == 103:\n        return 103\n    elif n == 104:\n        return 104\n    elif n == 105:\n        return 105\n    elif n == 106:\n        return 106\n    elif n == 107:\n        return 107\n    elif n == 108:\n        return 108\n    elif n == 109:\n        return 109\n    elif n == 110:\n        return 110\n    elif n == 111:\n        return 111\n    elif n == 112:\n        return 112\n    elif n == 113:\n        return 113\n    elif n == 114:\n        return 114\n    elif n == 115:\n        return 115\n    elif n == 116:\n        return 116\n    elif n == 117:\n        return 117\n    elif n == 118:\n        return 118\n    elif n == 119:\n        return 119\n    elif n == 120:\n        return 120\n    elif n == 121:\n        return 121\n    elif n == 122:\n        return 122\n    elif n == 123:\n        return 123\n    elif n == 124:\n        return 124\n    elif n == 125:\n        return 125\n    elif n == 126:\n        return 126\n    elif n == 127:\n        return 127\n    elif n == 128:\n        return 128\n    elif n == 129:\n        return 129\n    elif n == 130:\n        return 130\n    elif n == 131:\n        return 131\n    elif n == 132:\n        return 132\n    elif n == 133:\n        return 133\n    elif n == 134:\n        return 134\n    elif n == 135:\n        return 135\n    elif n == 136:\n        return 136\n    elif n == 137:\n        return 137\n    elif n == 138:\n        return 138\n    elif n == 139:\n        return 139\n    elif n == 140:\n        return 140\n    elif n == 141:\n        return 141\n    elif n == 142:\n        return 142\n    elif n == 143:\n        return 143\n    elif n == 144:\n        return 144\n    elif n == 145:\n        return 145\n    elif n == 146:\n        return 146\n    elif n == 147:\n        return 147\n    elif n == 148:\n        return 148\n    elif n == 149:\n        return 149\n    elif n == 150:\n        return 150\n    elif n == 151:\n        return 151\n    elif n == 152:\n        return 152\n    elif n == 153:\n        return 153\n    elif n == 154:\n        return 154\n    elif n == 155:\n        return 155\n    elif n == 156:\n        return 156\n    elif n == 157:\n        return 157\n    elif n == 158:\n        return 158\n    elif n == 159:\n        return 159\n    elif n == 160:"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n <= 0: \n        return 0\n    if n == 1: \n        return 0.5 \n    elif n == 2: \n        return 0.5 \n    elif n == 3: \n        return 0.5 \n    elif n == 4: \n        return 0.5 \n    elif n == 5: \n        return 0.5 \n    elif n == 6: \n        return 0.5 \n    elif n == 7: \n        return 0.5 \n    elif n == 8: \n        return 0.5 \n    elif n == 9: \n        return 0.5 \n    elif n == 10: \n        return 0.5 \n    elif n == 11: \n        return 0.5 \n    elif n == 12: \n        return 0.5 \n    elif n == 13: \n        return 0.5 \n    elif n == 14: \n        return 0.5 \n    elif n == 15: \n        return 0.5 \n    elif n == 16: \n        return 0.5 \n    elif n == 17: \n        return 0.5 \n    elif n == 18: \n        return 0.5 \n    elif n == 19: \n        return 0.5 \n    elif n == 20: \n        return 0.5 \n    elif n == 21: \n        return 0.5 \n    elif n == 22: \n        return 0.5 \n    elif n == 23: \n        return 0.5 \n    elif n == 24: \n        return 0.5 \n    elif n == 25: \n        return 0.5 \n    elif n == 26: \n        return 0.5 \n    elif n == 27: \n        return 0.5 \n    elif n == 28: \n        return 0.5 \n    elif n == 29: \n        return 0.5 \n    elif n == 30: \n        return 0.5 \n    elif n == 31: \n        return 0.5 \n    elif n == 32: \n        return 0.5 \n    elif n == 33: \n        return 0.5 \n    elif n == 34: \n        return 0.5 \n    elif n == 35: \n        return 0.5 \n    elif n == 36: \n        return 0.5 \n    elif n == 37: \n        return 0.5 \n    elif n == 38: \n        return 0.5 \n    elif n == 39: \n        return 0.5 \n    elif n == 40: \n        return 0.5 \n    elif n == 41: \n        return 0.5 \n    elif n == 42: \n        return 0.5 \n    elif n == 43: \n        return 0.5 \n    elif n == 44: \n        return 0.5 \n    elif n == 45: \n        return 0.5 \n    elif n == 46: \n        return 0.5 \n    elif n == 47: \n        return 0.5 \n    elif n == 48: \n        return 0.5 \n    elif n == 49: \n        return 0.5 \n    elif n == 50: \n        return 0.5 \n    elif n == 51: \n        return 0.5 \n    elif n == 52: \n        return 0.5 \n    elif n == 53: \n        return 0.5 \n    elif n == 54: \n        return 0.5 \n    elif n == 55: \n        return 0.5 \n    elif n == 56: \n        return 0.5 \n    elif n == 57: \n        return 0.5 \n    elif n == 58: \n        return 0.5 \n    elif n == 59: \n        return 0.5 \n    elif n == 60: \n        return 0.5 \n    elif n == 61: \n        return 0.5 \n    elif n == 62: \n        return 0.5 \n    elif n == 63: \n        return 0.5 \n    elif n == 64: \n        return 0.5 \n    elif n == 65: \n        return 0.5 \n    elif n == 66: \n        return 0.5 \n    elif n == 67: \n        return 0.5 \n    elif n == 68: \n        return 0.5 \n    elif n == 69: \n        return 0.5 \n    elif n == 70: \n        return 0.5 \n    elif n == 71: \n        return 0.5 \n    elif n == 72: \n        return 0.5 \n    elif n == 73: \n        return 0.5 \n    elif n == 74: \n        return 0.5 \n    elif n == 75: \n        return 0.5 \n    elif n == 76: \n        return 0.5 \n    elif n == 77: \n        return 0.5 \n    elif n == 78: \n        return 0.5 \n    elif n == 79: \n        return 0.5 \n    elif n == 80: \n        return 0.5 \n    elif n == 81: \n        return 0.5 \n    elif n == 82: \n        return 0.5 \n    elif n == 83: \n        return 0.5 \n    elif n == 84: \n        return 0.5 \n    elif n == 85: \n        return 0.5 \n    elif n == 86: \n        return 0.5 \n    elif n == 87: \n        return 0.5 \n    elif n == 88: \n        return 0.5 \n    elif n == 89: \n        return 0.5 \n    elif n == 90: \n        return 0.5 \n    elif n == 91: \n        return 0.5 \n    elif n == 92: \n        return 0.5 \n    elif n == 93: \n        return 0.5 \n    elif n == 94: \n        return 0.5 \n    elif n == 95: \n        return 0.5 \n    elif n == 96: \n        return 0.5 \n    elif n == 97: \n        return 0.5 \n    elif n == 98: \n        return 0.5 \n    elif n == 99: \n        return 0.5 \n    elif n == 100: \n        return 0.5 \n    elif n == 101: \n        return 0.5 \n    elif n == 102: \n        return 0.5 \n    elif n == 103: \n        return 0.5 \n    elif n == 104: \n        return 0.5 \n    elif n == 105: \n        return 0.5 \n    elif n == 106: \n        return 0.5 \n    elif n == 107: \n        return 0.5 \n    elif n == 108: \n        return 0.5 \n    elif n == 109: \n        return 0.5 \n    elif n == 110: \n        return 0.5 \n    elif n == 111: \n        return 0.5 \n    elif n == 112: \n        return 0.5 \n    elif n == 113: \n        return 0.5 \n    elif n == 114: \n        return 0.5 \n    elif n == 115: \n        return 0.5 \n    elif n == 116: \n        return 0.5 \n    elif n == 117: \n        return 0.5 \n    elif n == 118: \n        return 0.5 \n    elif n == 119: \n        return 0.5 \n    elif n == 120: \n        return 0.5 \n    elif n == 121: \n        return 0.5"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    list_of_lucas_numbers = []\n    for i in range(n, 0, -1):\n        list_of_lucas_numbers.append(i)\n    return list_of_lucas_numbers[-1]\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    elif n == 6:\n        return 5\n    elif n == 7:\n        return 6\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 8\n    elif n == 10:\n        return 9\n    elif n == 11:\n        return 10\n    elif n == 12:\n        return 11\n    elif n == 13:\n        return 12\n    elif n == 14:\n        return 13\n    elif n == 15:\n        return 14\n    elif n == 16:\n        return 15\n    elif n == 17:\n        return 16\n    elif n == 18:\n        return 17\n    elif n == 19:\n        return 18\n    elif n == 20:\n        return 19\n    elif n == 21:\n        return 20\n    elif n == 22:\n        return 21\n    elif n == 23:\n        return 22\n    elif n == 24:\n        return 23\n    elif n == 25:\n        return 24\n    elif n == 26:\n        return 25\n    elif n == 27:\n        return 26\n    elif n == 28:\n        return 27\n    elif n == 29:\n        return 28\n    elif n == 30:\n        return 29\n    elif n == 31:\n        return 30\n    elif n == 32:\n        return 31\n    elif n == 33:\n        return 32\n    elif n == 34:\n        return 33\n    elif n == 35:\n        return 34\n    elif n == 36:\n        return 35\n    elif n == 37:\n        return 36\n    elif n == 38:\n        return 37\n    elif n == 39:\n        return 38\n    elif n == 40:\n        return 39\n    elif n == 41:\n        return 40\n    elif n == 42:\n        return 41\n    elif n == 43:\n        return 42\n    elif n == 44:\n        return 43\n    elif n == 45:\n        return 44\n    elif n == 46:\n        return 45\n    elif n == 47:\n        return 46\n    elif n == 48:\n        return 47\n    elif n == 49:\n        return 48\n    elif n == 50:\n        return 49\n    elif n == 51:\n        return 50\n    elif n == 52:\n        return 51\n    elif n == 53:\n        return 52\n    elif n == 54:\n        return 53\n    elif n == 55:\n        return 54\n    elif n == 56:\n        return 55\n    elif n == 57:\n        return 56\n    elif n == 58:\n        return 57\n    elif n == 59:\n        return 58\n    elif n == 60:\n        return 59\n    elif n == 61:\n        return 60\n    elif n == 62:\n        return 61\n    elif n == 63:\n        return 62\n    elif n == 64:\n        return 63\n    elif n == 65:\n        return 64\n    elif n == 66:\n        return 65\n    elif n == 67:\n        return 66\n    elif n == 68:\n        return 67\n    elif n == 69:\n        return 68\n    elif n == 70:\n        return 69\n    elif n == 71:\n        return 70\n    elif n == 72:\n        return 71\n    elif n == 73:\n        return 72\n    elif n == 74:\n        return 73\n    elif n == 75:\n        return 74\n    elif n == 76:\n        return 75\n    elif n == 77:\n        return 76\n    elif n == 78:\n        return 77\n    elif n == 79:\n        return 78\n    elif n == 80:\n        return 79\n    elif n == 81:\n        return 80\n    elif n == 82:\n        return 81\n    elif n == 83:\n        return 82\n    elif n == 84:\n        return 83\n    elif n == 85:\n        return 84\n    elif n == 86:\n        return 85\n    elif n == 87:\n        return 86\n    elif n == 88:\n        return 87\n    elif n == 89:\n        return 88\n    elif n == 90:\n        return 89\n    elif n == 91:\n        return 90\n    elif n == 92:\n        return 91\n    elif n == 93:\n        return 92\n    elif n == 94:\n        return 93\n    elif n == 95:\n        return 94\n    elif n == 96:\n        return 95\n    elif n == 97:\n        return 96\n    elif n == 98:\n        return 97\n    elif n == 99:\n        return 98\n    elif n == 100:\n        return 99\n    elif n == 101:\n        return 100\n    elif n == 102:\n        return 101\n    elif n == 103:\n        return 102\n    elif n == 104:\n        return 103\n    elif n == 105:\n        return 104\n    elif n == 106:\n        return 105\n    elif n == 107:\n        return 106\n    elif n == 108:\n        return 107\n    elif n == 109:\n        return 108\n    elif n == 110:\n        return 109\n    elif n == 111:\n        return 110\n    elif n == 112:\n        return 111\n    elif n == 113:\n        return 112\n    elif n == 114:\n        return 113\n    elif n == 115:\n        return 114\n    elif n == 116:\n        return 115\n    elif n == 117:\n        return 116\n    elif n == 118:\n        return 117\n    elif n == 119:\n        return 118\n    elif n == 120:\n        return 119\n    elif n == 121:\n        return 120\n    elif n == 122:\n        return 121\n    elif n == 123:\n        return 122\n    elif n == 124:\n        return 123\n    elif n == 125:\n        return 124\n    elif n == 126:\n        return 125\n    elif n == 127:\n        return 126\n    elif n == 128:\n        return 127\n    elif n == 129:\n        return 128\n    elif n == 130:\n        return 129\n    elif n == 131:\n        return 130\n    elif n == 132:\n        return 131\n    elif n == 133:\n        return 132\n    elif n == 134:\n        return 133\n    elif n == 135:\n        return 134\n    elif n == 136:\n        return 135\n    elif n == 137:\n        return 136\n    elif n == 138:\n        return 137\n    elif n == 139:\n        return 138\n    elif n == 140:\n        return 139\n    elif n == 141:\n        return 140\n    elif n == 142:\n        return 141\n    elif n == 143:\n        return 142\n    elif n == 144:\n        return 143\n    elif n == 145:\n        return 144\n    elif n == 146:\n        return 145\n    elif n == 147:\n        return 146\n    elif n == 148:\n        return 147\n    elif n == 149:\n        return 148\n    elif n == 150:\n        return 149\n    elif n == 151:\n        return 150\n    elif n == 152:\n        return 151\n    elif n == 153:\n        return 152\n    elif n == 154:\n        return 153\n    elif n == 155:\n        return 154\n    elif n == 156:\n        return 155\n    elif n == 157:\n        return 156\n    elif n == 158:\n        return 157\n    elif n == 159:\n        return 158\n    elif n == 160:\n        return 159\n    elif n == 161:\n        return 160\n    elif n ="
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #return nth jacobsthal number\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 1\n    elif n == 4: \n        return 1\n    elif n == 5: \n        return 1\n    elif n == 6: \n        return 1\n    elif n == 7: \n        return 1\n    elif n == 8: \n        return 1\n    elif n == 9: \n        return 1\n    elif n == 10: \n        return 1\n    elif n == 11: \n        return 1\n    elif n == 12: \n        return 1\n    elif n == 13: \n        return 1\n    elif n == 14: \n        return 1\n    elif n == 15: \n        return 1\n    elif n == 16: \n        return 1\n    elif n == 17: \n        return 1\n    elif n == 18: \n        return 1\n    elif n == 19: \n        return 1\n    elif n == 20: \n        return 1\n    elif n == 21: \n        return 1\n    elif n == 22: \n        return 1\n    elif n == 23: \n        return 1\n    elif n == 24: \n        return 1\n    elif n == 25: \n        return 1\n    elif n == 26: \n        return 1\n    elif n == 27: \n        return 1\n    elif n == 28: \n        return 1\n    elif n == 29: \n        return 1\n    elif n == 30: \n        return 1\n    elif n == 31: \n        return 1\n    elif n == 32: \n        return 1\n    elif n == 33: \n        return 1\n    elif n == 34: \n        return 1\n    elif n == 35: \n        return 1\n    elif n == 36: \n        return 1\n    elif n == 37: \n        return 1\n    elif n == 38: \n        return 1\n    elif n == 39: \n        return 1\n    elif n == 40: \n        return 1\n    elif n == 41: \n        return 1\n    elif n == 42: \n        return 1\n    elif n == 43: \n        return 1\n    elif n == 44: \n        return 1\n    elif n == 45: \n        return 1\n    elif n == 46: \n        return 1\n    elif n == 47: \n        return 1\n    elif n == 48: \n        return 1\n    elif n == 49: \n        return 1\n    elif n == 50: \n        return 1\n    elif n == 51: \n        return 1\n    elif n == 52: \n        return 1\n    elif n == 53: \n        return 1\n    elif n == 54: \n        return 1\n    elif n == 55: \n        return 1\n    elif n == 56: \n        return 1\n    elif n == 57: \n        return 1\n    elif n == 58: \n        return 1\n    elif n == 59: \n        return 1\n    elif n == 60: \n        return 1\n    elif n == 61: \n        return 1\n    elif n == 62: \n        return 1\n    elif n == 63: \n        return 1\n    elif n == 64: \n        return 1\n    elif n == 65: \n        return 1\n    elif n == 66: \n        return 1\n    elif n == 67: \n        return 1\n    elif n == 68: \n        return 1\n    elif n == 69: \n        return 1\n    elif n == 70: \n        return 1\n    elif n == 71: \n        return 1\n    elif n == 72: \n        return 1\n    elif n == 73: \n        return 1\n    elif n == 74: \n        return 1\n    elif n == 75: \n        return 1\n    elif n == 76: \n        return 1\n    elif n == 77: \n        return 1\n    elif n == 78: \n        return 1\n    elif n == 79: \n        return 1\n    elif n == 80: \n        return 1\n    elif n == 81: \n        return 1\n    elif n == 82: \n        return 1\n    elif n == 83: \n        return 1\n    elif n == 84: \n        return 1\n    elif n == 85: \n        return 1\n    elif n == 86: \n        return 1\n    elif n == 87: \n        return 1\n    elif n == 88: \n        return 1\n    elif n == 89: \n        return 1\n    elif n == 90: \n        return 1\n    elif n == 91: \n        return 1\n    elif n == 92: \n        return 1\n    elif n == 93: \n        return 1\n    elif n == 94: \n        return 1\n    elif n == 95: \n        return 1\n    elif n == 96: \n        return 1\n    elif n == 97: \n        return 1\n    elif n == 98: \n        return 1\n    elif n == 99: \n        return 1\n    elif n == 100: \n        return 1\n    elif n == 101: \n        return 1\n    elif n == 102: \n        return 1\n    elif n == 103: \n        return 1\n    elif n == 104: \n        return 1\n    elif n == 105: \n        return 1\n    elif n == 106: \n        return 1\n    elif n == 107: \n        return 1\n    elif n == 108: \n        return 1\n    elif n == 109: \n        return 1\n    elif n == 110: \n        return 1\n    elif n == 111: \n        return 1\n    elif n == 112: \n        return 1\n    elif n == 113: \n        return 1\n    elif n == 114: \n        return 1\n    elif n == 115: \n        return 1\n    elif n == 116: \n        return 1\n    elif n == 117: \n        return 1\n    elif n == 118: \n        return 1\n    elif n == 119: \n        return 1\n    elif n == 120: \n        return 1\n    elif n == 121: \n        return 1\n    elif n == 122: \n        return 1\n    elif n == 123: \n        return 1\n    elif n == 124: \n        return 1\n    elif n == 125: \n        return 1\n    elif n == 126: \n        return 1\n    elif n == 127: \n        return 1\n    elif n == 128: \n        return 1\n    elif n == 129: \n        return 1\n    elif n == 130: \n        return 1\n    elif n == 131: \n        return 1\n    elif n == 132: \n        return 1\n    elif n == 133: \n        return 1\n    elif n == 134: \n        return 1\n    elif n == 135: \n        return 1\n    elif n == 136: \n        return 1\n    elif n == 137: \n        return 1\n    elif n == 138: \n        return 1\n    elif n == 139: \n        return 1\n    elif n == 140: \n        return 1\n    elif n == 141: \n        return 1\n    elif n == 142: \n        return 1\n    elif n == 143: \n        return 1\n    elif n == 144: \n        return 1\n    elif n == 145: \n        return 1\n    elif n == 146: \n        return 1\n    elif n == 147: \n        return 1\n    elif n == 148: \n        return 1"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Your code goes here\n    n = int(n)\n    i = 0\n    while i <= n:\n        n = n - i\n        i += 1\n    return n\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #print(\"\\nThis is jacobsthal_num\")\n    #print(f'{\"|\":<5}|{\"n\":<5}|{\"j\":<5}|{\"j\":<5}|{\"j\":<5}|{\"j\":<5}|{\"j\":<5}|{\"j\":<5}|')\n    #print(\"---------------------------------------------------------------------------------------------------------------\")\n    #for i in range(n):\n        #print(f'| {i:<5} | {n:<5} | {j:<5} | {j:<5} | {j:<5} | {j:<5} | {j:<5} |')\n    for i in range(n):\n        if n == 1:\n            print(f'{n:<5}|{j:<5}|{j:<5}|{j:<5}|')\n        elif n == 2:\n            print(f'{n:<5}|{j:<5}|{j:<5}|{j:<5}|')\n        elif n == 3:\n            print(f'{n:<5}|{j:<5}|{j:<5}|{j:<5}|')\n        elif n == 4:\n            print(f'{n:<5}|{j:<5}|{j:<5}|{j:<5}|')\n        else:\n            print(f'{n:<5}|{j:<5}|{j:<5}|{j:<5}|')\n    #print(\"---------------------------------------------------------------------------------------------------------------\")\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 0\n    for i in range(0, n+1):\n        if (x%n == 0):\n            return i\n        x += 1\n    return 0\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Your function goes here\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 11\n    elif n == 5:\n        return 21\n    elif n == 6:\n        return 43\n    elif n == 7:\n        return 85\n    elif n == 8:\n        return 171\n    elif n == 9:\n        return 341\n    elif n == 10:\n        return 683\n    elif n == 11:\n        return 1365\n    elif n == 12:\n        return 2731\n    else:\n        return -1\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        i = 2\n        while i <= n:\n            j = i\n            while j > 0:\n                k = j\n                while k > 0:\n                    print(k, end = \" \")\n                    k = k - 1\n                print(end = \"\\n\")\n                j = j - 1\n            i = i + 1"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_value = test_list[0][0]\n    min_index = 0\n    for i in range(len(test_list)):\n        if min_value < test_list[i][0]:\n            min_value = test_list[i][0]\n            min_index = i\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    '''\n    t = tuple(test_list) # creating a tuple of test case\n    t.sort() # sorting the tuple\n    print(t)\n    '''\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    '''\n    To make it simple to use this function, we have to use min_k() to find the minimum k records\n    '''\n    for i in range(len(test_list)-K):\n        minimum_record = test_list[i]\n        for j in range(i, i+K):\n            if test_list[j] < minimum_record:\n                minimum_record = test_list[j]\n        print(minimum_record)\n    return None\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_val = 999999999\n    \n    for i in range(K):\n        for j in range(len(test_list) - i - 1):\n            if test_list[j][1] < test_list[j + 1][1]:\n                val = test_list[j][1]\n            else:\n                val = test_list[j + 1][1]\n            if val < min_val:\n                min_val = val\n    return min_val\n        \ndef print_min(test_list):\n    '''\n    Write a function to print minimum number of records from tuple list.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] > max_val:\n            max_val = test_list[i][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] == max_val:\n            print(test_list[i])\n            print()\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Your code here.\n    min_k = []\n    temp_list = test_list[:]\n    for i in range(len(temp_list)):\n        min_k.append(temp_list[i][1])\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # code to return the k records from the tuple\n    #   find the minimum k records from tuple list\n    #   return k\n    # code to return the k records from the tuple\n    #   find the minimum k records from tuple list\n    #   return k\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Find all the indices of the elements for which i>k, in the given list.\n    # Store that indices in the indices_k array.\n    # Return the indices_k array.\n    indices_k = []\n    for index, item in enumerate(test_list):\n        if item[0] <= K:\n            indices_k.append(index)\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp_list = []\n    temp_list.extend(test_list)\n    temp_list.sort()\n    for i in range(0, len(temp_list) - K + 1):\n        temp_list.pop(len(temp_list) - K + i)\n    return temp_list\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a list to store the K value\n    K_list = []\n    # get K values from tuple list\n    for i in test_list:\n        K_list.append(i[-1])\n    # find minimum k values\n    minimum_K_value = min(K_list)\n    # return the minimum k value\n    return minimum_K_value\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return test_list.sort(reverse=True)[:K]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return l1[l1.index(l2[l2.index(l3)])].split(';')\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_list = list(l1)\n    l2_list = list(l2)\n    l3_list = list(l3)\n    common_elements = []\n    \n    for i in range(len(l1_list)):\n        if l1_list[i] in l2_list:\n            if l2_list.index(l1_list[i]) == l3_list.index(l2_list[l3_list.index(l1_list[i])]):\n                common_elements.append(l1_list[i])\n        if l2_list.index(l1_list[i]) == l3_list.index(l3_list[l1_list.index(l2_list[l3_list.index(l1_list[i])])]):\n            common_elements.append(l1_list[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_length = len(l1)\n    l2_length = len(l2)\n    l3_length = len(l3)\n    index_list = []\n    for i in range(l1_length):\n        if l1[i] in l2 and l2[i] in l3:\n            index_list.append(i)\n    for i in range(l1_length):\n        if l1[i] in l2 and l2[i] in l3:\n            index_list.append(i)\n    for i in range(l2_length):\n        if l2[i] in l3 and l3[i] in l1:\n            index_list.append(i)\n    for i in range(l3_length):\n        if l3[i] in l1 and l1[i] in l2:\n            index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Empty list.\n    if len(l1)==0 or len(l2)==0 or len(l3)==0:\n        return []\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    ans = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] in l2[j] and l2[j] in l3[i]:\n                ans.append(l1[i])\n    return ans\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Your code here\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    return l1, l2, l3\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_index = l1.index(l1[0])\n    l2_index = l2.index(l2[0])\n    l3_index = l3.index(l3[0])\n    if l1_index == l2_index and l1_index == l3_index:\n        return [l1[l1_index], l2[l2_index], l3[l3_index]]\n    else:\n        return None\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    smallest_index = 0\n    for i in range(len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n            smallest_index = i\n    return smallest_index + 1\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    num_1 = numbers.pop(0)\n    num_2 = numbers.pop(0)\n    return num_2\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    for i in range(len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n    return smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers, key = lambda x: x)\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    a = sorted(numbers)\n    return a[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    smallest_index = 0\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    else:\n        smallest = numbers[0]\n        for num in numbers:\n            if num < smallest:\n                smallest = num\n        return smallest\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex_pattern = r'(\\b[a-b]\\b)'\n    regex_string = r'a[a-b]b'\n    regex_match = re.search(regex_pattern,text)\n    # print(regex_match.group(0))\n    # print(regex_match.group(1))\n    # print(regex_match.group(2))\n    # print(regex_match.group(3))\n    if regex_match!= None:\n        return regex_match.group(0)\n    else:\n        return 'Please check your input'\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #text = str(text)\n    #if 'a' in text:\n        #if 'b' in text:\n            #return True\n        #else:\n            #return False\n    #else:\n        #return False\n    #return True\n    #s = text.strip().replace(' ', '_')\n    #print(text.replace('_',''))\n    return True\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-2.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-1.php\n    # https://www.w3resource.com/python-exercises/re"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = text.find('a')\n    if match!= -1:\n        start = match\n        end = match + 4\n        while end!= -1:\n            if text[end - 1]!= 'b':\n                break\n            end = end - 1\n        if end!= -1:\n            text = text[start: end]\n    return text\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.replace('\\n','')\n    text = text.replace('.','')\n    text = text.replace('!','')\n    text = text.replace('?','')\n    text = text.replace(',','')\n    text = text.replace('(','')\n    text = text.replace(')','')\n    text = text.replace('\"','')\n    text = text.replace('\\'','')\n    text = text.replace(' ', '')\n    text = text.replace(' ', '')\n    text = text.lower()\n    text = text.replace('  ','')\n    text = text.replace('.', '. ')\n    text = text.replace(',', ',')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text = text.replace('!', '! ')\n    text = text.replace('?', '? ')\n    text = text.replace('.', '.')\n    text = text.replace(',', ', ')\n    text "
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    '''\n    Write your code here\n    '''\n    flag = False\n    text = text.lower()\n    for a in text:\n        if a == 'a':\n            flag = True\n            break\n        else:\n            flag = False\n    if flag == True:\n        return '0'\n    else:\n        return '1'\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    output = ''\n    for letter in text:\n        if letter in 'ab':\n            if letter == 'b':\n                output += '1'\n            else:\n                output += '0'\n        else:\n            output += letter\n    return output\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'\\s(a)+\\s(b)', text)!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.match(r\"\\b(\\w*a){0,1}\\b\", text)\n    if result:\n        print(\"Match found\")\n        return result\n    else:\n        print(\"No match found\")\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.findall(r'(a|b)',text)\n    return matches\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pair_count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                pair_count += 1\n    return pair_count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    length = len(test_list)\n    answer = 0\n    for i in range(length-1):\n        for j in range(i+1,length):\n            if test_list[i] == test_list[j]:\n                answer += 1\n    print(answer)\n    \n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        i = 0\n        while i < (n - 1):\n            if test_list[i] == test_list[i + 1]:\n                count += 2\n                i += 2\n            else:\n                count += 1\n                i += 1\n        return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def count_pair(s):\n        count = 0\n        if len(s) < 3:\n            return 0\n        elif len(s) == 3:\n            return 1\n        elif s[0:2] == s[2:4]:\n            count = count + 1\n        elif s[2:4] == s[0:3]:\n            count = count + 1\n        else:\n            count = 0\n        return count\n    \n    count = 0\n    for i in range(0,len(test_list)):\n        for j in range(i+1,len(test_list)):\n            count = count + count_pair(test_list[i:j])\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    answer = 0\n    # test_list = ['ca','cab','cb','cba']\n    if len(test_list) <= 1:\n        return 0\n    # test_list.sort()\n    # # print(test_list)\n    # for i in range(len(test_list)):\n    #     for j in range(i+1,len(test_list)):\n    #         if test_list[i] == test_list[j]:\n    #             answer+=1\n    # return answer\n    \n    # start = 0\n    # end = 0\n    # count = 0\n    # for i in range(len(test_list)):\n    #     for j in range(i+1,len(test_list)):\n    #         # print(test_list[i],test_list[j])\n    #         if test_list[i] == test_list[j]:\n    #             count+=1\n    #             # print(count,i,j)\n    #             end = i\n    #             start = j\n    # return count,start,end\n    \n    return len(set(test_list[1:-1])),test_list[0],test_list[-1]\n    # return len(test_list[1:-1]),test_list[0],test_list[-1]\n    # return len(set(test_list[1:-1])),test_list[0],test_list[-1]\n    # return len(set(test_list[1:-1])),test_list[0],test_list[-1]\n    # return len(set(test_list[1:-1])),test_list[0],test_list[-1]\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse = 0\n    for i in range(len(test_list)-1):\n        if test_list[i]!= test_list[i+1]:\n            reverse = reverse+1\n    return reverse\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count=0\n    for i in range(len(test_list)-1):\n        if test_list[i]!=test_list[i+1]:\n            count=count+1\n    return count\n    \n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    if len(test_list) <= 2:\n        return count\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    n = len(list1)\n    d = {}\n    for i in range(0, n):\n        for j in range(i, n):\n            if list1[i] == list1[j]:\n                d[list1[i]] = d.get(list1[i], 0) + 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Your code here\n    \n    return dict()\n    \ndef unique_sublists2(list1):\n    '''\n    Write a function that counts the number of sublists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Your code here\n    return dict()\n    \ndef unique_sublists3(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists4(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists5(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists6(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists7(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists8(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists9(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists10(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists11(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists12(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists13(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists14(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists15(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists16(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists17(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists18(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists19(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists20(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists21(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists22(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists23(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists24(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists25(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists26(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists27(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists28(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the original list, in the same order as they were given.\n    '''\n    # Your code here\n    return 0\n    \ndef unique_sublists29(list1):\n    '''\n    Write a function that returns the number of unique sublists in a list. The function should return the number of sublists in the origina"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in list1:\n        if type(i)!= tuple:\n            dict[tuple(i)] = dict.get(tuple(i), 0) + 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_tuple = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    \n    dict1 = {}\n    counter = 0\n    for i in range(len(list1)):\n        current_item = list1[i]\n        if current_item in dict1:\n            dict1[current_item] += 1\n        else:\n            dict1[current_item] = 1\n    \n    return dict1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for i in list1:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    return counts\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # list_d = {}\n    # for i in list1:\n        # list_d[tuple(i)] = list_d.get(tuple(i), 0) + 1\n    # return list_d\n    \n    # The return value of the function is a dictionary\n    d = {}\n    for i in list1:\n        d[i] = d.get(i, 0) + 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #create an empty list to store the number of occurencies\n    occurrences = []\n    \n    #iterate through the original list\n    for item in list1:\n        #if the value of item is not a tuple,\n        #then add the tuple to the list\n        if not isinstance(item, tuple):\n            occurrences.append(item)\n            #continue\n        #else, add the tuple to the list\n        else:\n            occurrences.append(item[0])\n    #return the list of tuples\n    return occurrences\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    hash_table = {}\n    hash_table[\"]\"] = 0\n    for index in range(len(list1)):\n        for item in list1[index]:\n            if item in hash_table:\n                hash_table[item] += 1\n            else:\n                hash_table[item] = 1\n    return hash_table\n"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    x = dict()\n    for i in list1:\n        if i in x:\n            x[i] += 1\n        else:\n            x[i] = 1\n    return x\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n    except:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.find('.')!= -1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        return False\n    return float(num).is_integer()\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return ''.join(str(e) for e in num).endswith('.') and '0' not in str(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        int(num)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    x = False\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n    else:\n        if num == int(num):\n            x = True\n    return x\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        print(f'is a decimal number with a precision of {2}.')\n    else:\n        print(f'is not a decimal number with a precision of {2}.')\n"
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # your code here\n    if num==None or num=='':\n        return False\n    if num[0].isalpha() or num[0].isdigit():\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if arr.count(i)!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return all(i!=i for i in arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    hash_table = dict()\n    for i in arr:\n        if i in hash_table:\n            return False\n        else:\n            hash_table[i] = 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dict={}\n    for num in arr:\n        if num not in dict:\n            dict[num]=1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_length = len(arr)\n    for i in range(arr_length):\n        for j in range(i+1, arr_length):\n            if arr[i] == arr[j]:\n                print(\"yes\")\n                break\n            else:\n                print(\"no\")\n                return\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            count += 1\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    for i in arr:\n        if arr.count(i) == 1:\n            unique.append(i)\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if i not in arr:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    new_list = []\n    new_list_2 = []\n    for num in arr:\n        if num not in new_list_2:\n            new_list.append(num)\n        else:\n            return False\n    new_list_2.append(num)\n    new_list_2.sort()\n    if len(new_list)!= len(new_list_2):\n        return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return arr[0] == arr[0]\n    else:\n        i = 1\n        for ele in arr:\n            if ele!= arr[i]:\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month = 'January'\n    if monthnum3 == month:\n        print('This is a January day')\n    elif monthnum3 == month +'s':\n        print('This is a February day')\n    elif monthnum3 == month + 'th':\n        print('This is a March day')\n    elif monthnum3 == month + 'feb':\n        print('This is a April day')\n    elif monthnum3 == month +'mar':\n        print('This is a May day')\n    elif monthnum3 == month + 'jun':\n        print('This is a June day')\n    elif monthnum3 == month + 'jul':\n        print('This is a July day')\n    elif monthnum3 == month + 'aug':\n        print('This is a August day')\n    elif monthnum3 == month +'sep':\n        print('This is a September day')\n    elif monthnum3 == month + 'oct':\n        print('This is a October day')\n    elif monthnum3 == month + 'nov':\n        print('This is a November day')\n    else:\n        print('This is a unknown day')\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        print(\"Invalid month number\")\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1, 13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber = monthnum3\n    if monthnumber == 1:\n        return \"31\"\n    elif monthnumber == 2:\n        return \"28\"\n    elif monthnumber == 3:\n        return \"31\"\n    elif monthnumber == 4:\n        return \"30\"\n    elif monthnumber == 5:\n        return \"31\"\n    elif monthnumber == 6:\n        return \"30\"\n    elif monthnumber == 7:\n        return \"31\"\n    elif monthnumber == 8:\n        return \"31\"\n    elif monthnumber == 9:\n        return \"30\"\n    elif monthnumber == 10:\n        return \"31\"\n    elif monthnumber == 11:\n        return \"30\"\n    elif monthnumber == 12:\n        return \"31\"\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3==1 or monthnum3==2 or monthnum3==3 or monthnum3==4 or monthnum3==5 or monthnum3==6 or monthnum3==7 or monthnum3==8 or monthnum3==9 or monthnum3==10 or monthnum3==11 or monthnum3==12):\n        print(\"The month is in month number\")\n    else:\n        print(\"The month is not in month number\")\n    if(monthnum3%4==0 and monthnum3%100!=0):\n        print(\"The month is in leap year\")\n    elif(monthnum3%100==0):\n        print(\"The month is in leap year\")\n    else:\n        print(\"The month is not in leap year\")\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3==1):\n        return(True)\n    elif(monthnum3==2):\n        return(True)\n    elif(monthnum3==3):\n        return(True)\n    elif(monthnum3==4):\n        return(True)\n    elif(monthnum3==5):\n        return(True)\n    elif(monthnum3==6):\n        return(True)\n    elif(monthnum3==7):\n        return(True)\n    elif(monthnum3==8):\n        return(True)\n    elif(monthnum3==9):\n        return(True)\n    elif(monthnum3==10):\n        return(True)\n    elif(monthnum3==11):\n        return(True)\n    elif(monthnum3==12):\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        if (29<=monthnum3<=31):\n            return True\n        else:\n            return False\n    elif monthnum3 == 2:\n        if (30<=monthnum3<=32):\n            return True\n        else:\n            return False\n    elif monthnum3 == 3:\n        if (31<=monthnum3<=33):\n            return True\n        else:\n            return False\n    elif monthnum3 == 4:\n        if (32<=monthnum3<=34):\n            return True\n        else:\n            return False\n    elif monthnum3 == 5:\n        if (35<=monthnum3<=36):\n            return True\n        else:\n            return False\n    elif monthnum3 == 6:\n        if (37<=monthnum3<=38):\n            return True\n        else:\n            return False\n    elif monthnum3 == 7:\n        if (39<=monthnum3<=40):\n            return True\n        else:\n            return False\n    elif monthnum3 == 8:\n        if (41<=monthnum3<=42):\n            return True\n        else:\n            return False\n    elif monthnum3 == 9:\n        if (43<=monthnum3<=44):\n            return True\n        else:\n            return False\n    elif monthnum3 == 10:\n        if (45<=monthnum3<=46):\n            return True\n        else:\n            return False\n    elif monthnum3 == 11:\n        if (47<=monthnum3<=48):\n            return True\n        else:\n            return False\n    elif monthnum3 == 12:\n        if (49<=monthnum3<=50):\n            return True\n        else:\n            return False\n    else:\n        print(\"Invalid month number\")\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    if monthnum3 % 7 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # write your code here\n    if monthnum3 > 12:\n        print(\"Invalid value\")\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    print(\"Difference is {}\".format(arr[0]-arr[1]))\n    arr[0] = max(arr[0],arr[1])\n    arr[1] = min(arr[1],arr[0])\n    i=2\n    j=len(arr)-1\n    while i < j:\n        if arr[i]!= arr[j]:\n            arr[i],arr[j] = arr[j],arr[i]\n            i+=1\n            j-=1\n        i+=1\n    print(arr)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # find the element minimum diff\n    minimum = arr[0]\n    for i in range(1,n):\n        if arr[i] > minimum:\n            minimum = arr[i]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr_len = len(arr)\n    if arr_len==0:\n        return 0\n    \n    min_diff = arr[0] - arr[1]\n    for i in range(1,arr_len):\n        min_diff = min(min_diff,arr[i]-arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    i = 0\n    j = n-1\n    while(i<j): \n        if arr[i] < arr[j]: \n            i += 1\n        else: \n            j -= 1\n    return arr[i]\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    count = 0\n    min_diff = arr[0] - arr[1]\n    for i in range(0,n-2):\n        if arr[i+1] - arr[i] > min_diff:\n            count = count + 1\n        else:\n            min_diff = arr[i+1] - arr[i]\n    if count == 0:\n        return min_diff\n    else:\n        return -1\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    mini=9999\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                mini = arr[i] - arr[j]\n    return mini\narr = [11,45,43,42,33,43,44,34,43,44,45,44,46,44,45,44,44,45,44,45,44,45,44,44,43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    lowest_value = arr[0]\n    for i in range(1,n):\n        if arr[i] < lowest_value:\n            lowest_value = arr[i]\n    print(lowest_value)\n    for i in range(n):\n        if arr[i]!= lowest_value:\n            diff = arr[i] - lowest_value\n            print(diff)\n    return lowest_value\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0] - arr[1]\n    elif n == 2:\n        return arr[1] - arr[0]\n    else:\n        arr_min = arr[0] + arr[1]\n        arr_max = arr[0] - arr[1]\n        for i in range(n):\n            arr_min = min(arr_min, arr[i] + arr[i+1])\n            arr_max = max(arr_max, arr[i] - arr[i+1])\n        return arr_min - arr_max\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    curr = 0\n    last = 0\n    for i in range(n-1):\n        curr = arr[i]\n        for j in range(i+1,n):\n            last = arr[j]\n            if curr - last == 0:\n                continue\n            elif abs(curr - last) < abs(last - curr):\n                curr = last\n    print(curr)\n    \nfind_min_diff([1,2,3,4,5,6,7,8,9],12)\nfind_min_diff([1,2,3,4,5,6,7,8,9],8)\nfind_min_diff([1,2,3,4,5,6,7,8,9],8)\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    for i in range(2, n): \n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    new_str = ''\n    if(len(str) == 0):\n        return 0\n    else:\n        for i in range(len(str)):\n            if(str[i]!= '0'):\n                new_str += str[i]\n        new_str += '0'\n        return len(new_str)"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - len(str.strip('0'))\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i == \" \":\n            ctr += 1\n        else:\n            ctr += 1\n    return ctr\n    \n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    str = str.strip()\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    n = len(str)\n    return n % 3 == 0 and n % 5 == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_count = 0\n    for char in str:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    ctr = 0\n    for i in str:\n        if i == '0' or i == '1':\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    def digits_ct(str):\n        '''\n        Write a python function to count number of digits in a given string.\n        '''\n        str_l = list(str)\n        digit_ct = 0\n        for i in str_l:\n            if i.isdigit():\n                digit_ct += 1\n        return digit_ct\n    \n    if len(str) < 3:\n        return 'Digits must be greater than three'\n    else:\n        return digits_ct(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for char in str:\n        if char.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Create a list of the prime numbers \n    prime_list = [] \n    for i in range(2,n+1): \n        if (i < math.sqrt(n)): \n            prime_list.append(i) \n    # print(prime_list) \n    # Return nth polite number \n    return prime_list[n-1] \ndef prime_factors(n): \n    '''\n    Find the prime factors of n \n    '''\n    # First find a list of prime factors. \n    prime_factors_list = [] \n    for i in range(2, n+1): \n        if(n % i == 0): \n            prime_factors_list.append(i) \n    # print(prime_factors_list) \n    # Return the prime factors \n    return prime_factors_list\ndef find_prime(n): \n    '''\n    Find the prime factor of n \n    '''\n    # First find a list of prime factors. \n    prime_factors_list = [] \n    for i in range(2, n+1): \n        if (n % i == 0): \n            prime_factors_list.append(i) \n    # print(prime_factors_list) \n    # Return the prime factors \n    return prime_factors_list\ndef series_of_factors(n): \n    '''\n    Find the first n-th prime factor of n \n    '''\n    prime_factors = [] \n    for i in range(1, n+1): \n        if (n % i == 0): \n            prime_factors.append(i) \n    # print(prime_factors) \n    # Return the prime factors \n    return prime_factors\ndef gcd(a, b): \n    '''\n    Calculate gcd of a and b \n    '''\n    # If a and b are both positive integers then gcd is the gcd \n    if (a < 0 and b < 0): \n        return -1\n    # If a is smaller then b then we can use gcd to find the greatest common divisor \n    if (a < b): \n        return gcd(b, a % b) \n    else: \n        return gcd(a % b, b) \ndef lcm(a, b): \n    '''\n    Calculate the least common multiple of a and b \n    '''\n    # if a and b are both positive integers then gcd is the gcd \n    if (a < 0 and b < 0): \n        return -1\n    # If a is smaller then b then we can use gcd to find the greatest common divisor \n    if (a < b): \n        return gcd(a, b % a) \n    # If a is larger then b then we can use gcd to find the least common multiple \n    else: \n        return gcd(a % b, b % a) \ndef is_prime(n): \n    '''\n    Check if a number is prime \n    '''\n    # Check if a number is prime \n    if (n < 2): \n        return False\n    # If n is a multiple of 2 then it is not prime \n    if (n % 2 == 0): \n        return False\n    # n must be a prime number \n    if (n <= 3): \n        return True\n    # n must be a prime number \n    # Check if n has two's and three's factors \n    divisors = [] \n    for i in range(3, n): \n        if (n % i == 0): \n            divisors.append(i) \n    # If n has three's factors \n    if (len(divisors) == 3): \n        for i in range(len(divisors)): \n            for j in range(i+1, len(divisors)): \n                if (n % divisors[i] == 0 and n % divisors[j] == 0): \n                    return False\n    # If n has four's factors \n    if (len(divisors) == 4): \n        for i in range(len(divisors)): \n            for j in range(i+1, len(divisors)): \n                if (n % divisors[i] == 0 and n % divisors[j] == 0): \n                    return False\n    # If n has more than four's factors \n    if (len(divisors) > 4): \n        for i in range(len(divisors)): \n            for j in range(i+1, len(divisors)): \n                if (n % divisors[i] == 0 and n % divisors[j] == 0): \n                    return False\n    # Return n as a prime number \n    return True\ndef miller_rabin_testing(n): \n    '''\n    Miller-Rabin primality testing \n    '''\n    # Perform primality testing \n    if (n < 2): \n        return False\n    # n must be an odd integer \n    if (n % 2 == 0): \n        return False\n    # n must be at least 3 \n    if (n < 4): \n        return True\n    # Check if n is not a multiple of 3 \n    for i in range(3, n, 2): \n        if (n % i == 0): \n            return False\n    # If it is a multiple of both 3 and 5 then it is not a prime \n    if (n % 4 == 0): \n        return False\n    # n must be a prime number \n    if (is_prime(n) == False): \n        return False\n    # n must be even or odd \n    if (n < 5): \n        return False\n    # n must be greater than 3 \n    if (n > 4): \n        return False\n    # n must be a multiple of 3 and 5 \n    if (n % 3 == 0 and n % 5 == 0): \n        return False\n    # n must be odd \n    if (n % 2 == 1): \n        return False\n    # n must be at least 4 \n    if (n < 4): \n        return False\n    # n must be greater than 5 \n    if (n > 5): \n        return False\n    # n must be a multiple of both 3 and 5 \n    if (n % 5 == 0): \n        return False\n    # n must be odd \n    if (n % 2 == 1): \n        return False\n    # n must be even \n    if (n % 2 == 0): \n        return False\n    # n must be a multiple of both 3 and 5 \n    if (n % 3 == 0): \n        return False\n    # n must be at least 4 \n    if (n < 4): \n        return False\n    # n must be a multiple of both 3 and 5 \n    if (n % 3 == 0): \n        return False\n    # n must be odd \n    if (n % 2 == 1): \n        return False\n    # n must be at least 5 \n    if (n < 5): \n        return False\n    # n must be greater than 7 \n    if (n > 7): \n        return False\n    # n must be a multiple of both 3 and 5 \n    if (n % 5 == 0): \n        return False\n    # n must be odd \n    if (n % 2 == 1): \n        return False\n    # n must be at least 7 \n    if (n < 7): \n        return False\n    # n must be a multiple of both 3 and 5 \n    if (n % 5 == 0): \n        return False\n    # n must be odd \n    if (n % 2 == 1): \n        return False\n    # n must be at least 7 \n    if (n < 7): \n        return False\n    # n must be a multiple of both 3 and 5 \n    if (n % 5 == 0): \n        return False\n    # n must be at least 7 \n    if (n < 7): \n        return False\n    # n must be at least 15 \n    if (n < 15): \n        return False\n    # n must be at least 85 \n    if (n < 85): \n        return Fals"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <=0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True if math.gcd(2, 2) == 1 else False\n    if n == 3:\n        return True if math.gcd(3, 3) == 1 else False\n    if n == 4:\n        return True if math.gcd(4, 4) == 1 else False\n    if n == 5:\n        return True if math.gcd(5, 5) == 1 else False\n    if n == 6:\n        return True if math.gcd(6, 6) == 1 else False\n    if n == 7:\n        return True if math.gcd(7, 7) == 1 else False\n    if n == 8:\n        return True if math.gcd(8, 8) == 1 else False\n    if n == 9:\n        return True if math.gcd(9, 9) == 1 else False\n    if n == 10:\n        return True if math.gcd(10, 10) == 1 else False\n    if n == 11:\n        return True if math.gcd(11, 11) == 1 else False\n    if n == 12:\n        return True if math.gcd(12, 12) == 1 else False\n    if n == 13:\n        return True if math.gcd(13, 13) == 1 else False\n    if n == 14:\n        return True if math.gcd(14, 14) == 1 else False\n    if n == 15:\n        return True if math.gcd(15, 15) == 1 else False\n    if n == 16:\n        return True if math.gcd(16, 16) == 1 else False\n    if n == 17:\n        return True if math.gcd(17, 17) == 1 else False\n    if n == 18:\n        return True if math.gcd(18, 18) == 1 else False\n    if n == 19:\n        return True if math.gcd(19, 19) == 1 else False\n    if n == 20:\n        return True if math.gcd(20, 20) == 1 else False\n    if n == 21:\n        return True if math.gcd(21, 21) == 1 else False\n    if n == 22:\n        return True if math.gcd(22, 22) == 1 else False\n    if n == 23:\n        return True if math.gcd(23, 23) == 1 else False\n    if n == 24:\n        return True if math.gcd(24, 24) == 1 else False\n    if n == 25:\n        return True if math.gcd(25, 25) == 1 else False\n    if n == 26:\n        return True if math.gcd(26, 26) == 1 else False\n    if n == 27:\n        return True if math.gcd(27, 27) == 1 else False\n    if n == 28:\n        return True if math.gcd(28, 28) == 1 else False\n    if n == 29:\n        return True if math.gcd(29, 29) == 1 else False\n    if n == 30:\n        return True if math.gcd(30, 30) == 1 else False\n    if n == 31:\n        return True if math.gcd(31, 31) == 1 else False\n    if n == 32:\n        return True if math.gcd(32, 32) == 1 else False\n    if n == 33:\n        return True if math.gcd(33, 33) == 1 else False\n    if n == 34:\n        return True if math.gcd(34, 34) == 1 else False\n    if n == 35:\n        return True if math.gcd(35, 35) == 1 else False\n    if n == 36:\n        return True if math.gcd(36, 36) == 1 else False\n    if n == 37:\n        return True if math.gcd(37, 37) == 1 else False\n    if n == 38:\n        return True if math.gcd(38, 38) == 1 else False\n    if n == 39:\n        return True if math.gcd(39, 39) == 1 else False\n    if n == 40:\n        return True if math.gcd(40, 40) == 1 else False\n    if n == 41:\n        return True if math.gcd(41, 41) == 1 else False\n    if n == 42:\n        return True if math.gcd(42, 42) == 1 else False\n    if n == 43:\n        return True if math.gcd(43, 43) == 1 else False\n    if n == 44:\n        return True if math.gcd(44, 44) == 1 else False\n    if n == 45:\n        return True if math.gcd(45, 45) == 1 else False\n    if n == 46:\n        return True if math.gcd(46, 46) == 1 else False\n    if n == 47:\n        return True if math.gcd(47, 47) == 1 else False\n    if n == 48:\n        return True if math.gcd(48, 48) == 1 else False\n    if n == 49:\n        return True if math.gcd(49, 49) == 1 else False\n    if n == 50:\n        return True if math.gcd(50, 50) == 1 else False\n    if n == 51:\n        return True if math.gcd(51, 51) == 1 else False\n    if n == 52:\n        return True if math.gcd(52, 52) == 1 else False\n    if n == 53:\n        return True if math.gcd(53, 53) == 1 else False\n    if n == 54:\n        return True if math.gcd(54, 54) == 1 else False\n    if n == 55:\n        return True if math.gcd(55, 55) == 1 else False\n    if n == 56:\n        return True if math.gcd(56, 56) == 1 else False\n    if n == 57:\n        return True if math.gcd(57, 57) == 1 else False\n    if n == 58:\n        return True if math.gcd(58, 58) == 1 else False\n    if n == 59:\n        return True if math.gcd(59, 59) == 1 else False\n    if n == 60:\n        return True if math.gcd(60, 60) == 1 else False\n    if n == 61:\n        return True if math.gcd(61, 61) == 1 else False\n    if n == 62:\n        return True if math.gcd(62, 62) == 1 else False\n    if n == 63:\n        return True if math.gcd(63, 63) == 1 else False\n    if n == 64:\n        return True if math.gcd(64, 64) == 1 else False\n    if n == 65:\n        return True if math.gcd(65, 65) == 1 else False\n    if n == 66:\n        return True if math.gcd(66, 66) == 1 else False\n    if n == 67:\n        return True if math.gcd(67, 67) == 1 else False\n    if n == 68:\n        return True if math.gcd(68, 68) == 1 else False\n    if n == 69:\n        return True if math.gcd(69, 69) == 1 else False\n    if n == 70:\n        return True if math.gcd(70, 70) == 1 else False\n    if n == 71:\n        return True if math.gcd(71, 71) == 1 else False\n    if n == 72:\n        return True if math.gcd(72, 72) == 1 else False\n    if n == 73:\n        return True if math.gcd(73, 73) == 1 else False\n    if n == 74:\n        return True if math.gcd(74, 74) == 1 else False\n    if n == 75:\n        return True if math.gcd(75, 75) == 1 else False\n    if n == 76:\n        return True if math.gcd(76, 76) == 1 else False\n    if n == 77:\n        return True if math.gcd(77, 77) == 1 else False\n    if n == 78:\n        return True if math.gcd(78, 78) == 1 else False\n    if n == 79:\n        return True if math.gcd(79, 79) == 1 else False\n    if n == 80:\n        return True if math.gcd(80, 80) == 1 else False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite=[]\n    for x in range(1,n+1):\n        if (math.factorial(x)%100000000000)==1:\n            polite.append(x)\n    return polite\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        # your code here \n        return math.ceil((n**0.5) / (n - 1))\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n > 3: \n        return False\n    if n == 0: \n        return True \n    if n == 1: \n        return False \n    if n == 2: \n        return True \n    if n == 3: \n        return True \n    for i in range(4, n+1): \n        if n % i == 0: \n            return False \n    return True \n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n >= 1 and n <= int(math.sqrt(n))):\n        return (n ** 2) % n == 0\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if (n < 0):\n        print(\"Error: Input is invalid. Use only positive numbers.\")\n    elif (n == 0):\n        print(\"Error: The number you were looking for is zero.\")\n    elif (n == 1):\n        print(\"Error: You provided an invalid number.\")\n    else:\n        print(\"The nth polite number is \" + str(n))\n    \ndef is_polite_cycle(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-cycle-n/\n    '''\n    if (n < 0):\n        print(\"Error: Input is invalid. Use only positive numbers.\")\n    elif (n == 0):\n        print(\"Error: The number you were looking for is zero.\")\n    elif (n == 1):\n        print(\"Error: You provided an invalid number.\")\n    else:\n        print(\"The nth polite number is \" + str(n))\n        \ndef factorial(n):\n    '''\n    Write a function to find the factorial of an integer.\n    '''\n    if (n == 0):\n        print(\"Error: The number you were looking for is zero.\")\n    elif (n == 1):\n        print(\"Error: The number you were looking for is one.\")\n    else:\n        print(\"The factorial of \" + str(n) + \" is \" + str(n * factorial(n-1)))\n        \ndef factorial_recursive(n):\n    '''\n    Write a function that calculates the factorial of a number using a recursive \n    algorithm. \n    '''\n    if (n == 0):\n        return 1\n    elif (n == 1):\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n in range(1,2147483647):\n        return False\n    elif n == 2147483647:\n        return True\n    else:\n        for i in range(n-1,0,-1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: return n+1\n    elif n % 2 == 1:\n        return is_polite(n//2)\n    else:\n        return is_polite(n-1)\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        if l1[i+1] - l1[i] == 1:\n            result.append([l1[i],l1[i+1]])\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    print(\"Pair_wise is being run.\")\n    l1_pairs = []\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        for j in range(i+1,len(l1)):\n            l2.append((l1[i],l1[j]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return zip(*[(i, i+1) for i in range(len(l1)-1)])\n    \n    \n    \n    \ndef pair_wise2(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(i, i+1) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,l1[x+1]) for x in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [elem for i, elem in enumerate(l1) if i % 2 == 0]\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    ans = []\n    for i in range(len(l1) - 1):\n        for j in range(i+1, len(l1)):\n            if l1[i] > l1[j] and l1[i]!= l1[j] and l1[i] not in ans:\n                ans.append((l1[i], l1[j]))\n    return ans\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            pair.append((l1[i], l1[j]))\n    return pair\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    l2 = []\n    for index, item in enumerate(l1):\n        l2.append((item, l1[index+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x, y) for x, y in zip(l1, l1[1:])]\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for num1 in arr:\n        for num2 in arr:\n            if num1 + num2 == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for num in range(len(arr)):\n        if sum - arr[num] == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    #using a loop\n    #sum = 0\n    for i in range(len(arr)):\n        if arr[i] + arr[i+1] == sum:\n            count += 1\n    return count\n    #return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #Iterate through the numbers and check if the sum is equal to the sum\n    count = 0\n    for i in arr:\n        if i + sum == sum:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    output = []\n    for i in arr:\n        if i == sum:\n            output.append(arr.count(i))\n    return output\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in arr:\n        if i == sum:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if sum - arr[i] - arr[j] == arr[i] + arr[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)-1):\n        if arr[i] + arr[i+1] == sum:\n            pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in range(len(li1)):\n        if(li1[i] not in li2):\n            li3.append(li1[i])\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if(len(li1)==0):\n        return None\n    elif(len(li2)==0):\n        return None\n    elif(len(li1)==1):\n        return li1[0]\n    elif(len(li2)==1):\n        return li2[0]\n    elif(li1[0]<li2[0]):\n        return li1[0]\n    else:\n        return li2[0]\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Your code goes here\n    return list(set(li1) - set(li2))\n    \n    \ndef CheckDiff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Your code goes here\n    return list(set(li2) - set(li1))\n    \n    "
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    i = 0\n    j = 0\n    temp = []\n    while(i < len(li1) and j < len(li2)):\n        if(li1[i] == li2[j]):\n            temp.append(li1[i])\n            i += 1\n            j += 1\n        elif(li1[i]!= li2[j]):\n            temp.append(li1[i])\n            temp.append(li2[j])\n            i += 1\n            j += 1\n    return temp\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    list1 = list(li1)\n    list2 = list(li2)\n    list1.sort()\n    list2.sort()\n    while(len(list1)!=len(list2)):\n        list1.append(0)\n    while(len(list2)!=len(list1)):\n        list2.append(0)\n    list1 = [int(i) for i in list1]\n    list2 = [int(i) for i in list2]\n    li = []\n    li.append(list1)\n    li.append(list2)\n    \n    dif = []\n    for i in range(len(li)):\n        dif.append(li[i][1] - li[i][0])\n    return dif\n    "
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = li1.copy()\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            diff.remove(li1[i])\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = list(set(li1) - set(li2))\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if len(li1)!= len(li2):\n        return 0\n    else:\n        liDiff = []\n        for i in range(len(li1)):\n            if li1[i]!= li2[i]:\n                liDiff.append(li1[i])\n        return liDiff\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff=[]\n    # print(li1)\n    # print(li2)\n    for i in range(len(li1)-1):\n        if li1[i+1]!=li2[i]:\n            diff.append(li1[i])\n    return(diff)\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    #Initialize the difference list.\n    d=[]\n    \n    #Iterate through each of the lists.\n    for i in range(len(li1)):\n        if li1[i]!= li2[i]:\n            d.append(li1[i])\n    \n    #Return the difference list.\n    return d"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1) : \n        sum += (i+1)**4\n    return sum\n    \ndef average(n, k) : \n    '''\n    Write a python function to calculate the average of first k natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1) : \n        sum += i**k\n    return sum/n\n    \ndef check_palindrome(s) : \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    if s == s[::-1] :\n        return True\n    else :\n        return False\n    \ndef check_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 1 :\n        return False\n    for i in range(2,n) : \n        if n%i == 0 : \n            return False\n    return True\n    \ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 2 or n == 3 : \n        return True\n    if n%2 == 0 or n%3 == 0 :\n        return False\n    for i in range(5,int(math.sqrt(n)+1),2) : \n        if n%i == 0 : \n            return False\n    return True\n    \ndef prime_factor(n) : \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    if n == 0 : \n        return []\n    factors = []\n    i = 2\n    while i*i <= n : \n        if n%i == 0 : \n            factors.append(i)\n            if i!= n/i : \n                factors.append(n//i)\n        i += 1\n    return factors\n    \ndef is_prime_factor(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 2 or n == 3 : \n        return True\n    if n%2 == 0 or n%3 == 0 :\n        return False\n    for i in range(5,int(math.sqrt(n)+1),2) : \n        if n%i == 0 : \n            return False\n    return True\n    \ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 1 : \n        return 1\n    if n == 2 : \n        return 2\n    elif n == 3 : \n        return 6\n    else :\n        return factorial(n-1) * n * factorial(n-2)\n    \ndef binomial(n, k) : \n    '''\n    Write a python function to find the binomial coefficient of a number.\n    '''\n    if n == 0 or k == 0 : \n        return 0\n    if k == 0 : \n        return 1\n    if n == 1 or k == 1 : \n        return 0\n    if n < k : \n        return 0\n    else : \n        return binomial(n-1,k) + binomial(n-1,k-1)\n    \ndef power(n, k) : \n    '''\n    Write a python function to find the power of a number.\n    '''\n    if n == 0 or k == 0 : \n        return 1\n    if k == 0 : \n        return 1\n    if n == 1 or k == 1 : \n        return 1\n    if n == 2 : \n        return 2\n    else : \n        return power(n-1,k-1) + power(n-1,k)\n        \ndef fib(n) : \n    '''\n    Write a python function to find the fibonacci series of a number.\n    '''\n    if n == 0 : \n        return 0\n    if n == 1 : \n        return 1\n    if n == 2 : \n        return 1\n    if n == 3 : \n        return 2\n    else : \n        return fib(n-2) + fib(n-1)\n    \ndef main() : \n    '''\n    Program main function.\n    '''\n    print(\"Program main function.\")\n    print(\"-------------------\\n\")\n    print(\"You can use the following functions:\")\n    print(\"\\todd_num_sum(n) : find the sum of first n odd natural numbers.\")\n    print(\"\\todd_num_sum(n) - n : find the sum of first n natural numbers.\")\n    print(\"\\todd_num_sum(n) / n : find the sum of first n natural numbers.\")\n    print(\"\\todd_num_sum(n) ** n : find the sum of first n natural numbers.\")\n    print(\"\\todd_num_sum(n) ** 2 : find the sum of first n natural numbers.\")\n    print(\"\\todd_num_sum(n) ** 3 : find the sum of first n natural numbers.\")\n    print(\"\\todd_num_sum(n) ** 4 : find the sum of first n natural numbers.\")\n    print(\"\\taverage(n, k) : find the average of first n natural numbers.\")\n    print(\"\\tcheck_palindrome(s) : check whether a string is palindrome or not.\")\n    print(\"\\tcheck_prime(n) : check whether a number is prime or not.\")\n    print(\"\\tis_prime(n) : check whether a number is prime or not.\")\n    print(\"\\tis_prime_factor(n) : check whether a number is prime or not.\")\n    print(\"\\tfib(n) : find the fibonacci series of a number.\")\n    print(\"\\tpower(n, k) : find the power of a number.\")\n    print(\"\\tbinomial(n, k) : find the binomial coefficient of a number.\")\n    print(\"\\tfactorial(n) : find the factorial of a number.\")\n    print(\"\\tround(n) : round a number.\")\n    print(\"\\tpower(n, n) : find the power of a number.\")\n    print(\"\\tis_prime(n) : check whether a number is prime or not.\")\n    print(\"\\tis_prime_factor(n) : check whether a number is prime or not.\")\n    print(\"\\tfib(n) : find the fibonacci series of a number.\")\n    print(\"\\tpower(n, n) : find the power of a number.\")\n    print(\"\\tbinomial(n, n) : find the binomial coefficient of a number.\")\n    print(\"\\tfactorial(n) : find the factorial of a number.\")\n    print(\"\\tround(n) : round a number.\")\n    print(\"\\tpower(n, n) : find the power of a number.\")\n    print(\"\\tis_prime(n) : check whether a number is prime or not.\")\n    print(\"\\tis_prime_factor(n) : check whether a number is prime or not.\")\n    print(\"\\tfib(n) : find the fibonacci series of a number.\")\n    print(\"\\tpower(n, n) : find the power of a number.\")\n    print(\"\\tis_prime(n) : check whether a number is prime or not.\")\n    print(\"\\tis_prime_factor(n) : check whether a number is prime or not.\")\n    print(\"\\tfib(n) : find the fibonacci series of a number.\")\n    print(\"\\tpower(n, n) : find the power of a number.\")\n    print(\"\\tbinomial(n, n) : find the binomial coefficient of a number.\")\n    print(\"\\tfactorial(n) : find the factorial of a number.\")\n    print(\"\\tround(n) : round a number.\")\n    print(\"\\tpower(n, n) : find the power of a number.\")\n    print(\"\\tis_prime(n) : check whether a number is prime or not.\")\n    print(\"\\tis_prime_factor(n) : check whether a number is prime or not.\")\n    print(\"\\tfib(n) : find the fibonacci series of a number.\")\n    print(\"\\tpower(n, n) : find the power of a number.\")\n    print(\"\\tis_prim"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n, 2):\n        sum += i ** 4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n,0,-2):\n        sum += i ** 3\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    num_of_odd_numbers = 0\n    for num in range(1, n + 1):\n        if num % 2!= 0:\n            num_of_odd_numbers += num ** 4\n        if num % 2 == 0:\n            num_of_odd_numbers += num ** 4\n    return num_of_odd_numbers\n    \n    \n    \nprint(odd_num_sum(5)"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    lst = []\n    for i in range(n, 0, -2) : \n        if i%2 == 0 : \n            lst.append(i**4)\n    return sum(lst)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Declare variables\n    sum = 0\n    power = 0\n    \n    # For loop to iterate through\n    for num in range(1, n+1) : \n        # Add the square of the number \n        sum += num ** 3 \n        # Check if the power of the number is odd \n        if num % 2 == 1 : \n            power += 1\n            \n    return sum - sum % 2\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return (n * n) + 4 * n + 1\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(n * i for i in range(1, n + 1) if i % 2 == 1)\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    if n<=1:\n        print(n)\n    elif n%2==0:\n        sum=n**2\n        print(sum)\n    else:\n        sum=n**3\n        print(sum)\n    return sum\ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    sum=0\n    if n<=1:\n        print(n)\n    elif n%2==0:\n        sum=n**2\n        print(sum)\n    else:\n        sum=n**3\n        print(sum)\n    return sum\ndef even_num_sum_2(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    sum=0\n    if n<=1:\n        print(n)\n    elif n%2==0:\n        sum=n**2\n        print(sum)\n    else:\n        sum=n**3\n        print(sum)\n    return sum\ndef odd_num_sum_2(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    if n<=1:\n        print(n)\n    elif n%2==0:\n        sum=n**2\n        print(sum)\n    else:\n        sum=n**3\n        print(sum)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    elif n == 2 : \n        return 2\n    elif n > 2 : \n        return n * odd_num_sum(n - 1)\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i not in ['(', ')', '[', ']', '{', '}']:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            elif i == '(' and stack[len(stack) - 1]!= '(':\n                return False\n            elif i == ')' and stack[len(stack) - 1]!= ')':\n                return False\n            elif i == ']' and stack[len(stack) - 1]!= '[':\n                return False\n            elif i == '}' and stack[len(stack) - 1]!= '{':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0 or stack[-1]!= '(':\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for ch in exp:\n        if ch in ('(','[') or ch in ('{','}') or ch in ('(','['):\n            stack.append(ch)\n        else:\n            if len(stack) == 0:\n                return False\n            elif stack.pop()!= ch:\n                return False\n    return True if len(stack) == 0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque([])\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    check = 0\n    for i in exp:\n        if i == '(':\n            check += 1\n        elif i == ')':\n            check -= 1\n        if check < 0:\n            return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        else:\n            if len(stack)!= 0:\n                if char!= stack[-1]:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_brackets = ['(', '[', '{']\n    closed_brackets = [')', ']', '}']\n    stack = deque()\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char == '(' and char!= ')':\n                return False\n            if top_char == '[' and char!= ']':\n                return False\n            if top_char == '{' and char!= '}':\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left = 0\n    right = 0\n    for i in exp:\n        if i == '(':\n            left += 1\n        else:\n            right += 1\n        if left == right:\n            return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp == \"()\":\n        return True\n    elif exp == \"()[]\":\n        return False\n    else:\n        l = len(exp)\n        stack = deque()\n        for i in exp:\n            if i == '(':\n                stack.append(i)\n            elif i == '[':\n                stack.append(i)\n            else:\n                try:\n                    if stack[-1] == i:\n                        stack.pop()\n                    else:\n                        return False\n                except:\n                    return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_paren = set('({[')\n    close_paren = set(')}])')\n    for i in exp:\n        if i in open_paren:\n            stack.append(i)\n        elif i in close_paren:\n            if not stack or stack[-1]!= '}':\n                return False\n            stack.pop()\n    return not stack\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    return test_str.replace(test_str[0], \"\", 1)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    dictionary = {}\n    for char in test_str:\n        if char in dictionary:\n            dictionary[char] = dictionary[char] + 1\n        else:\n            dictionary[char] = 1\n    \n    ans = []\n    for key, value in dictionary.items():\n        if value >= K:\n            ans.append(key)\n    return ans\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    words = test_str.split(' ')\n    # Check if string is empty or not\n    if len(words) == 0:\n        return 'Empty string'\n    # Sort the string by its length.\n    # So we can easily remove similar words\n    words.sort()\n    for i in range(len(words)-K):\n        words[i] = ''\n    # Join all the string in one string\n    return''.join(words)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    for i in test_str:\n        if len(i) == K:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) < K:\n        return None\n    else:\n        l = len(test_str)\n        i = 0\n        while i < l:\n            if test_str[i] =='':\n                if i + 1 < l:\n                    test_str = test_str[:i] + test_str[i + 1:]\n            i += 1\n        return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(s.strip() for s in test_str.split() if len(s) == K)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    test_str_1 = test_str.split()\n    new_str_1 = list()\n    \n    for i in test_str_1:\n        if len(i) < K:\n            i = \" \".join(i.split())\n            new_str_1.append(i)\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    def remove_string(test_str):\n        \n        i = 0\n        while i < len(test_str):\n            if len(test_str) == 1:\n                return test_str\n            elif test_str[i] =='':\n                test_str = test_str[:i+1] + test_str[i+1:]\n            else:\n                i = i+1\n        \n        return test_str\n    \n    def check_string(test_str):\n        \n        for i in range(0,len(test_str)):\n            if test_str[i]!='':\n                return False\n        return True\n    \n    def is_valid(test_str):\n        \n        if len(test_str) < K:\n            return False\n        \n        test_str = remove_string(test_str)\n        if is_valid(test_str):\n            return True\n        else:\n            return False\n        \n    return is_valid(test_str)"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # sort the string and remove duplicate words\n    sorted_word = sorted(test_str.split())\n    for word in sorted_word:\n        if len(word) == K:\n            sorted_word.remove(word)\n    # make a copy of the string to remove words from it\n    copy_test_str = ''.join(sorted_word)\n    # change the copy_test_str to a list of words\n    test_str = list(copy_test_str)\n    # return the copy_test_str\n    return test_str"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    p = re.compile(pattern)\n    match_list = p.finditer(text)\n    for m in match_list:\n        position = m.start()\n        text_substring = text[position:position+len(m.group())]\n        if text_substring == m.group():\n            return m.span(),text_substring,position\n    return None,None,None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    m = re.search(pattern,text)\n    if m is None:\n        return None\n    return m.start(), m.end()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Code here\n    regex_str = ''.join(['([{}]+)'.format(pattern)] * len(pattern))\n    regex = re.compile(regex_str)\n    pos = 0\n    t = 0\n    for i in range(len(text)):\n        try:\n            t = t + len(re.search(pattern,text[i:pos]))\n        except:\n            pass\n        pos = pos + len(pattern)\n    if t == 0:\n        return None\n    else:\n        return t\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #print(text)\n    r = re.search(pattern, text)\n    if r:\n        print(r.start())\n        print(r.end())\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match=re.findall(pattern,text)\n    if len(match)!=0:\n        return match\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.findall(pattern, text)\n    if len(m) == 0:\n        return None\n    else:\n        m = m[0]\n        if len(m) == len(pattern):\n            if m[0] in text:\n                if m[1] in text:\n                    return m[0] + m[1]\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #  Write your code here\n    pattern = re.compile(pattern)\n    match = pattern.findall(text)\n    for match in match:\n        sub_index = text.find(match)\n        if sub_index >= 0:\n            return match\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match is None:\n        return None\n    else:\n        return match.start(),match.end()\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern.startswith('^'):\n        pattern = pattern.lstrip('^').rstrip('$')\n    if pattern.startswith('$'):\n        pattern = pattern.lstrip('$')\n    if pattern.startswith('^'):\n        pattern = pattern.lstrip('^').rstrip('$')\n    pos = 0\n    while pos < len(text):\n        if text[pos:pos+len(pattern)] == pattern:\n            return pos\n        pos += 1\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\",\",\"\")\n    pattern = pattern.replace(\".\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\"\\'\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\"[\",\"\")\n    pattern = pattern.replace(\"]\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\"/\",\"\")\n    pattern = pattern.replace(\"\\\\\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\"[\",\"\")\n    pattern = pattern.replace(\"]\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\"/\",\"\")\n    pattern = pattern.replace(\"\\\\\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\"/\",\"\")\n    pattern = pattern.replace(\"\\\\\",\"\")\n    pattern = pattern.replace(\"[\",\"\")\n    pattern = pattern.replace(\"]\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\"/\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\"[\",\"\")\n    pattern = pattern.replace(\"]\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\"/\",\"\")\n    pattern = pattern.replace(\" \",\"\")\n    pattern = pattern.replace(\"[\",\"\")\n    pattern = pattern.replace(\"]\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\")\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n    pattern = pattern.replace(\"(\",\"\")\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index += 1\n    return odd_index == 0\n    "
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(n % 2 == 1 for n in nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_indices = []\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_indices.append(i)\n    return odd_indices\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = []\n    for i in range(len(nums)):\n        if nums[i]%2!=0:\n            odd_index.append(i)\n    return odd_index\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            count+=1\n    return count==0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            even.append(nums[i])\n        else:\n            odd.append(nums[i])\n    return(odd == even)\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_nums = []\n    for index, element in enumerate(nums):\n        if index % 2 == 1:\n            odd_nums.append(element)\n    return odd_nums == odd_nums\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    temp = []\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            temp.append(nums[i])\n    temp.sort()\n    return temp == [x for x in temp if x % 2!= 0]\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            count+=1\n    return count==0\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # TODO: complete this function\n    return all(n%2==0 for n in nums)\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_counter = 0\n    vowels = 'aeiouAEIOU'\n    for char in test_str:\n        if char in vowels:\n            vowels_counter += 1\n    return vowels_counter\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char in \"AEIOU\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowel_dict = {'a','e','i','o','u'}\n    for char in test_str:\n        if char in vowel_dict:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    for i in test_str:\n        if i in 'aeiou':\n            vowels_count += 1\n    return vowels_count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if(test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou'):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # YOUR CODE HERE\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n    raise NotImplementedError\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Your code here\n    count_vowels = 0\n    for i in range(len(test_str)):\n        for x in test_str[i:]:\n            if x.lower() in \"aeiou\":\n                count_vowels += 1\n    return count_vowels\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(0, len(test_str)):\n        if test_str[i] in \"aeiouAEIOU\":\n            if test_str[i] in \"aeiouAEIOU\":\n                if test_str[i+1] in \"aeiouAEIOU\":\n                    count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    counter = 0\n    for i in range(len(test_str)):\n        if test_str[i] in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n            if test_str[i] in \"aeiou\":\n                counter += 1\n        else:\n            continue\n    return counter\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    if 'a' in test_str:\n        count += test_str.count('a')\n    if 'e' in test_str:\n        count += test_str.count('e')\n    if 'i' in test_str:\n        count += test_str.count('i')\n    if 'o' in test_str:\n        count += test_str.count('o')\n    if 'u' in test_str:\n        count += test_str.count('u')\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if i not in sum:\n            sum.append(i)\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    #using O(n) sorting to sort the list\n    arr.sort()\n    \n    #using O(n) getting the sum of the elements in the list\n    return sum(arr)\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # def cal_sum(arr):\n    #     arr_sum=0\n    #     for i in arr:\n    #         if i not in arr_sum:\n    #             arr_sum.append(i)\n    #     return arr_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # pass the argument list,\n    # create a function to sum those numbers\n    # iterate through the list,\n    # do a if/else statement to check if the number is non-repeated,\n    # then return the number's sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    max_val = 0\n    for i in range(len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0 \n    for i in arr: \n        if i not in s: \n            s += i \n    return s \narr = list(map(int, input().split()))\nprint(find_sum(arr)) \n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]!= arr[i] and arr[i] not in sum:\n            sum = sum + arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total=0\n    for i in range(0,len(arr)):\n        if arr[i]==arr[i]:\n            pass\n        else:\n            total+=arr[i]\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 0:\n        return 0\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr:\n            sum = sum + arr[i]\n        else:\n            break\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0 \n    for i in range(len(arr)):\n        if arr[i]!= arr[i]:\n            sum += arr[i] \n    return sum \n    \nprint(find_sum([9,9,5,6,8,8,7,8,8,5]))\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    answer = []\n    grouped = groupby(sorted(list1),key=lambda i: i[0])\n    for key, group in grouped:\n        answer.append([list(i) for i in group])\n    return answer\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp = []\n    i = 0\n    while i < len(list1):\n        if list1[i] not in temp:\n            temp.append(list1[i])\n            if i!= len(list1)-1:\n                if list1[i+1] not in temp:\n                    temp.append(list1[i+1])\n        i += 1\n    return temp\ndef distinct(list1):\n    '''\n    Write a function to count the number of distinct elements of the given list.\n    '''\n    count = 0\n    temp = []\n    for i in range(len(list1)):\n        if list1[i] not in temp:\n            temp.append(list1[i])\n        else:\n            count += 1\n    return count\ndef count_unique(list1):\n    '''\n    Write a function to count the number of unique elements of the given list.\n    '''\n    count = 0\n    temp = []\n    for i in range(len(list1)):\n        if list1[i] not in temp:\n            temp.append(list1[i])\n            count += 1\n        else:\n            pass\n    return count\ndef check_duplicate(list1, list2):\n    '''\n    Write a function to check for duplicate elements of two given lists.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n    for j in list2:\n        if j not in temp:\n            temp.append(j)\n    return temp\ndef remove_duplicate(list1):\n    '''\n    Write a function to remove duplicates of the given list.\n    '''\n    temp = []\n    for i in range(len(list1)):\n        if list1[i] not in temp:\n            temp.append(list1[i])\n        else:\n            pass\n    return temp\ndef make_a_list(array):\n    '''\n    Write a function to make a list in the following way:\n    a = ['a', 'b', 'c', 'c']\n    b = ['a', 'b', 'b', 'c', 'b']\n    c = ['a', 'a', 'b', 'b', 'b', 'c']\n    and return a, b, c.\n    '''\n    temp = []\n    for i in array:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef reverse_list(list1):\n    '''\n    Write a function to reverse a given list.\n    '''\n    temp = []\n    for i in list1:\n        temp.append(i)\n    return temp\ndef get_biggest_number(list1):\n    '''\n    Write a function to get the biggest element of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if len(i) > len(temp):\n            temp = i\n        else:\n            pass\n    return temp\ndef get_number_of_occurence(list1, elements):\n    '''\n    Write a function to get the number of occurence of any given element in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i in elements:\n            count += 1\n    return count\ndef get_unique_values(list1):\n    '''\n    Write a function to get the unique values of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef sort_list(list1):\n    '''\n    Write a function to sort the list in place.\n    '''\n    list1.sort()\ndef get_elements_of_list(list1):\n    '''\n    Write a function to get elements of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef get_all_duplicates(list1):\n    '''\n    Write a function to get all the duplicate elements of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef get_all_unique(list1):\n    '''\n    Write a function to get all the unique elements of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef get_unique_elements(list1):\n    '''\n    Write a function to get all the unique elements of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef check_duplicate_and_remove(list1, list2):\n    '''\n    Write a function to check for duplicates of the given list and remove them.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    for j in list2:\n        if j not in temp:\n            temp.append(j)\n        else:\n            pass\n    return temp\ndef get_duplicate_elements(list1):\n    '''\n    Write a function to get all the duplicate elements of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef get_duplicate_elements_and_remove(list1):\n    '''\n    Write a function to get all the duplicate elements of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef get_duplicate_elements_and_sort(list1):\n    '''\n    Write a function to get all the duplicate elements of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef get_duplicate_elements_and_reverse(list1):\n    '''\n    Write a function to get all the duplicate elements of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef get_duplicate_elements_and_sort_and_reverse(list1):\n    '''\n    Write a function to get all the duplicate elements of a given list.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef reverse_list_and_get_duplicate(list1):\n    '''\n    Write a function to reverse a given list and get duplicate elements.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef reverse_list_and_get_unique(list1):\n    '''\n    Write a function to reverse a given list and get unique elements.\n    '''\n    temp = []\n    for i in list1:\n        if i not in temp:\n            temp.append(i)\n        else:\n            pass\n    return temp\ndef count_duplicate_elements(list1):\n    '''\n    Write a function to count the number of duplicate elements of a given list.\n    '''\n    temp = 0\n    for i in list1:\n        if list1.count(i) > 1:\n            temp += 1\n    return temp\ndef count_unique_elements(list1):\n    '''\n    Write a function to count the number of unique elements o"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    groups = groupby(list1)\n    return [[list(l) for l in g] for g in groups]\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # time complexity of this code is O(n)\n    # linear search is used to find the first instance of duplicate element\n    # since list 1 is already sorted it's not necessary to put duplicate elements into list\n    # and since the value of the first index is not present in the list then duplicate element will be found\n    # in subsequent list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is not unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    \n    # create a new list to store the duplicates\n    # store index of duplicate element in the list\n    \n    # create a new empty list to store the sublists\n    # only store the indexes of duplicate values within the sublists\n    \n    # create an empty sublist to store the duplicate elements\n    # as well as their indexes\n    \n    # return the list of sublists\n    # time complexity of this code is O(n)\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is not unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(n)\n    \n    # init empty sublist\n    # time complexity of this code is O(n)\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is not unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(n)\n    \n    # create a new empty sublist to store the duplicate elements\n    # store index of duplicate element in the list\n    # only store the indexes of duplicate values within the sublists\n    \n    # create a new empty list to store the sublists\n    # only store the indexes of duplicate values within the sublists\n    \n    # return the list of sublists\n    # time complexity of this code is O(n)\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is not unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(n)\n    \n    # create a new empty sublist to store the duplicate elements\n    # store index of duplicate element in the list\n    # only store the indexes of duplicate values within the sublists\n    # list to store the sublists\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(n)\n    \n    # return the list of sublists\n    # time complexity of this code is O(n)\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(n)\n    \n    # create a new empty list to store the duplicate elements\n    # store index of duplicate element in the list\n    # only store the indexes of duplicate values within the sublists\n    # list to store the sublists\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(n)\n    \n    # create a new empty list to store the duplicate elements\n    # store index of duplicate element in the list\n    # only store the indexes of duplicate values within the sublists\n    # list to store the sublists\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(n)\n    \n    # return the list of sublists\n    # time complexity of this code is O(n)\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(n)\n    \n    # create a new empty list to store the duplicate elements\n    # store index of duplicate element in the list\n    # only store the indexes of duplicate values within the sublists\n    # list to store the sublists\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(n)\n    \n    # return the list of sublists\n    # time complexity of this code is O(n)\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(n)\n    \n    # create a new empty list to store the duplicate elements\n    # store index of duplicate element in the list\n    # only store the indexes of duplicate values within the sublists\n    # list to store the sublists\n    # to find the first instance of duplicate element\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    # complexity is O(n)\n    # O(1)\n    # if the list has n values and the index is unique then the index is not present in the sublist\n    # it means that the index in the sublist is not present in the list\n    "
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def solve(l1, l2, count):\n        '''\n        Create a map from character to position.\n        '''\n        pos = []\n        for i in range(count):\n            pos.append((l1[i], l2[i]))\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    n=len(list1)\n    d={}\n    for j in range(1,n+1):\n        a=list1[j-1]\n        if a in d.keys():\n            d[a].append(j)\n        else:\n            d[a]=[j]\n    return d\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_elements = []\n    for i in range(len(list1)-1):\n        # list_elements.append([list1[i],list1[i+1]])\n        list_elements.append(list1[i:i+2])\n    return list_elements\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def groupby_index(list1,index):\n        return groupby(sorted(list1), key=lambda i: index[i])\n    def groupby_value(list1,val):\n        return groupby(sorted(list1), key=lambda i: val[i])\n    return groupby_index(list1, groupby_value)\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Scan the list and store the elements in a set.\n    set_elements = set(list1)\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if list1 == []:\n        return []\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Dictionary of sublists\n    sub_dict = {}\n    # Reset dictionary\n    sub_dict.clear()\n    # Append to dictionary\n    sub_dict['['] = 1\n    # Append to dictionary\n    sub_dict['('] = 1\n    # Iterate through list\n    for element in list1:\n        # If element is a tuple\n        if type(element) == tuple:\n            # Append to dictionary\n            sub_dict[element] += 1\n        # If element is not a tuple\n        else:\n            # Append to dictionary\n            sub_dict[element] += 1\n    # Return dictionary\n    return sub_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if type(i) is list:\n            if i[0] in count:\n                count[i[0]] += 1\n            else:\n                count[i[0]] = 1\n        else:\n            raise TypeError\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    i = 0\n    for x in list1:\n        if x in dictionary:\n            dictionary[x] += 1\n        else:\n            dictionary[x] = 1\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counter = {}\n    for i in list1:\n        t = tuple(i)\n        if t in counter:\n            counter[t] += 1\n        else:\n            counter[t] = 1\n    return counter\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for element in list1:\n        if element in sublists:\n            sublists[element] = sublists[element] + 1\n        else:\n            sublists[element] = 1\n    return sublists\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for i in list1:\n        dictionary[i] = list1.count(i)\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    i = 0\n    dict1 = {}\n    \n    while i < len(list1):\n        if list1[i] not in dict1.keys():\n            dict1[list1[i]] = 1\n            i += 1\n        else:\n            dict1[list1[i]] += 1\n            i += 1\n    return dict1\n        \ndef same_sublist(list1,list2):\n    '''\n    Write a function that checks if two lists have the same length and return True if they have. The function should return False otherwise.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    i = 0\n    while i < len(list1):\n        if list1[i]!= list2[i]:\n            return False\n        else:\n            i += 1\n    return True\n    \ndef list_occurence(list1, list2):\n    '''\n    Write a function that checks if the number of occurances of two lists in a list are equal.\n    '''\n    for list3 in range(len(list1)):\n        if list1[list3]!= list2[list3]:\n            return False\n    return True\n    \ndef lcm(n1,n2):\n    '''\n    Write a function that returns the Least Common Multiple of two integers using a single loop.\n    '''\n    if (n1 == 0) or (n2 == 0):\n        return n1 * n2\n    else:\n        while n1!= 0:\n            n1 //= n2\n            n2 //= n1\n    return n2\n        \ndef prime_factors(num):\n    '''\n    Write a function that returns a dictionary where the key is a prime factor of an integer and the value is the number of times it is included.\n    '''\n    dict1 = {}\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            dict1[i] = 1\n            num //= i\n        else:\n            i += 1\n    if num > 1:\n        dict1[num] = 0\n    return dict1\n    \ndef is_prime(num):\n    '''\n    Write a function that returns True if num is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num % 2 == 0:\n        return False\n    i = 3\n    while i * i <= num:\n        if num % i == 0:\n            return False\n        i += 2\n    return True\n    \ndef Prime_list(num):\n    '''\n    Write a function that returns a list of all the primes up to and including the specified number.\n    '''\n    list1 = []\n    if is_prime(num):\n        list1 = [num]\n    elif num < 0:\n        list1 = []\n    else:\n        for num in range(num, -1, -1):\n            if is_prime(num):\n                list1.append(num)\n    return list1\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for item in list1:\n        tup = tuple(item)\n        if tup in sublist_dict:\n            sublist_dict[tup] += 1\n        else:\n            sublist_dict[tup] = 1\n    return sublist_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return dict(Counter(tuple(list1)))\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # dictionary of the tuples and the number of them\n    d = {}\n    \n    # list of tuples\n    l = []\n    \n    # add the tuples to the list\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            l.append((list1[i][j],1))\n    \n    # merge the list into one big list\n    l = list(tuple(l) for t in l)\n    \n    # sort the list into tuples\n    l = list(t for t in l)\n    \n    # count the number of each tuple\n    for i in l:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    \n    # return the dictionary\n    return d\n    \n    \n    # In some tests, we would have a lot more but there are many\n    # answers.\n    #\n    #\n    # def unique_sublists(list1):\n    #     '''\n    #     Write a function that returns a dictionary where each key is the name of a list\n    #     and each value is the number of sublists inside the list. The sublist values\n    #     should be integers.\n    #     '''\n    #     # dictionary of lists\n    #     d = {}\n    #     \n    #     # list of lists\n    #     l = []\n    #     \n    #     # add the lists to the list\n    #     for i in range(len(list1)):\n    #         for j in range(len(list1[i])):\n    #             l.append((list1[i][j],1))\n    #     \n    #     # merge the lists into one big list\n    #     l = list(tuple(l) for t in l)\n    #     \n    #     # count the number of each tuple\n    #     for i in l:\n    #         if i in d:\n    #             d[i] = d[i] + 1\n    #         else:\n    #             d[i] = 1\n    #     \n    #     # return the dictionary\n    #     return d\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    output = []\n    combos = []\n    \n    for i in test_list:\n        combos.append(tuple(i))\n    \n    combos = list(set(combos))\n    \n    for i in combos:\n        # if i in output:\n        #     continue\n        for j in combinations(i,2):\n            if tuple(j) in output:\n                continue\n            output.append(tuple(j))\n        \n    return output\n    "
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list_sorted = sorted(test_list)\n    combos = []\n    combos.append(tuple(test_list_sorted))\n    for i in range(1,len(test_list_sorted)):\n        for j in combinations(test_list_sorted, i):\n            combos.append(tuple(j))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, len(test_list))\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    combos = []\n    \n    for i in test_list:\n        for j in test_list:\n            combos.append(tuple(sorted(i + j)))\n    return combos\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    s = set()\n    for x in test_list:\n        s.add(x)\n    c = list(combinations(s,len(s)))\n    return c\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Use a set\n    result = set()\n    # Iterate over all possible combinations\n    for i in range(0,len(test_list)):\n        for j in combinations(test_list,i):\n            result.update(j)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for element in test_list:\n        for combination in combinations(element, len(element)):\n            result.append(combination)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list)\n    summ = 0\n    for i in range(len(test_list)):\n        summ += test_list[i]\n    if summ not in test_list:\n        print(\"Invalid combination\")\n        return None\n    else:\n        temp_list = list(combinations(test_list,i))\n        print(temp_list)\n        for i in range(len(temp_list)):\n            print(temp_list[i])\n        return temp_list\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for tup in combinations(test_list, 2):\n        result.append(tup)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if test_list == []:\n        return []\n    result = []\n    for i in test_list:\n        result = result + [tuple(i)]\n    return result\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    if n == 0 :\n        return False\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            divisors.append(i)\n            if i == n // i :\n                divisors.append(n // i)\n    return len(divisors) == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n    \ndef count_prime_factors(n) : \n    '''\n    Write a python function to check whether the count of prime factors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_2(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_3(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_4(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_5(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_6(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_7(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_8(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_9(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_10(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_11(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_12(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if len(a) == 2 : \n        print(n,\"is an even number\")\n    else : \n        print(n,\"is not an even number\")\n        \ndef count_divisors_13(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            a.append(i)\n    if le"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    s = 0\n    while i <= n : \n        j = 0\n        while j <= (n-i) : \n            if n % i == 0 : \n                s += 1\n            j += 1\n        i += 1\n    return s\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1): \n        return True\n    for i in range(1, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            return False\n    return True \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # the function count_divisors() is called recursively on n\n    if n < 2:\n        return 0\n    else:\n        x = count_divisors(n-1)\n        if (x % 2 == 0):\n            return 0\n        else:\n            return 1 + count_divisors(n/2)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    while i*i <= n :\n        if n % i == 0 :\n            return False\n        i += 2\n    else :\n        return True\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0 : \n        return 0\n    if n == 1 : \n        return 1\n    if n == 2 : \n        return 2\n    if n % 2 == 0 : \n        return 0\n    return count_divisors(n - 1) + count_divisors(n // 2)\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            count += 1\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i == 0 : \n            count += 1\n        i+=1\n    if count == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    i = 1\n    while i <= n : \n        if n % i == 0 :\n            divisors += 1\n        i += 1\n    if divisors % 2 == 0 :\n        return \"Even\"\n    else : \n        return \"Odd\"\n    \ndef count_paths(n, m) :\n    '''\n    Write a python function to find the number of paths that lie in a square of size n x m. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-29.php\n    '''\n    if n <= m : \n        return 1\n    square = math.pow(n, 2)\n    paths = (m * (n-1)) / (n * (m-1))\n    return int(math.sqrt(paths))\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = 0\n    for i in range(0, len(arr), 2):\n        if (i+1) % 2 == 0:\n            odd_length += arr[i]\n    return odd_length\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(0, len(arr)):\n        if (arr[i] % 2)!= 0:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1:\n            index += 1\n            sum += index\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #TODO\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(0, len(arr)):\n        if arr[i]%2 == 1:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0, len(arr)):\n        if (i % 2 == 1):\n            s += arr[i]\n        else:\n            s += arr[i] * 2\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum_arr = []\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            odd_sum += arr[i]\n        else:\n            even_sum += arr[i]\n    return odd_sum + even_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_sums = []\n    odd_sums = []\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0.01 * r + 0.03 * g + 0.03 * b\n    h = max(h,0)\n    h = min(h,1)\n    s = 0.75 * (r + g + b)\n    s = max(s,0)\n    s = min(s,1)\n    v = 0.75 * (r * r + g * g + b * b)\n    v = max(v,0)\n    v = min(v,1)\n    h = (h + s + v) / 3\n    h = max(h, 0)\n    h = min(h,1)\n    s = (s + v) / 2\n    s = max(s, 0)\n    s = min(s, 1)\n    v = (v + h) / 2\n    v = max(v, 0)\n    v = min(v, 1)\n    if h == 0:\n        h = 0.1\n    if v == 0:\n        v = 0.9\n    if s == 0:\n        s = 0.1\n    if v == 1:\n        v = 0.9\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    R = r / 255.0\n    G = g / 255.0\n    B = b / 255.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #convert rgb to hsv\n    r_h = (r+0.5)\n    r_s = (r_h * 6.0)\n    r_v = (r_h * 100.0)\n    g_h = (g+0.5)\n    g_s = (g_h * 6.0)\n    g_v = (g_h * 100.0)\n    b_h = (b+0.5)\n    b_s = (b_h * 6.0)\n    b_v = (b_h * 100.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #convert rgb color to hsv color\n    rgb_val = r*255\n    red_val = int(rgb_val)\n    green_val = int(g*255)\n    blue_val = int(b*255)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #need to create a dict of hsvs\n    #format of rgb color in hsv format: blue green red\n    hsv_colors = {\n        \"r\": {\n            \"red\": (255, 0, 0),\n            \"green\": (0, 255, 0),\n            \"blue\": (0, 0, 255),\n        },\n        \"g\": {\n            \"red\": (0, 255, 0),\n            \"green\": (0, 255, 0),\n            \"blue\": (0, 0, 255),\n        },\n        \"b\": {\n            \"red\": (0, 0, 255),\n            \"green\": (0, 0, 255),\n            \"blue\": (0, 0, 255),\n        }\n    }\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # your code here\n    # define hsv colors\n    h_min = 0\n    h_max = 179\n    s_min = 0\n    s_max = 255\n    v_min = 0\n    v_max = 255\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    c = 0.0\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = (r + g + b) / 3\n    s = 0.8 + 0.6 * abs(r - g) + 0.1 * abs(r - b)\n    v = 0.6 * r + 0.4 * g + 0.7 * b\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_max = 255\n    g_max = 255\n    b_max = 255\n    r_min = 0\n    g_min = 0\n    b_min = 0\n    r_max = 255\n    g_max = 255\n    b_max = 255\n    r = 255\n    g = 255\n    b = 255\n    x = r*0.70199\n    y = g*0.08633\n    z = b*0.033067\n    for i in range(0,3):\n        r = r-x*(r-x)/3\n        g = g-y*(g-y)/3\n        b = b-z*(b-z)/3\n        if (r<r_min):\n            r_min = r\n        if (r>r_max):\n            r_max = r\n        if (g<g_min):\n            g_min = g\n        if (g>g_max):\n            g_max = g\n        if (b<b_min):\n            b_min = b\n        if (b>b_max):\n            b_max = b\n    r = int((r_min+r_max)/2)\n    g = int((g_min+g_max)/2)\n    b = int((b_min+b_max)/2)\n    #print(r,g,b)\n    h = int(0.5*(r+g+b))\n    s = 0\n    v = 0\n    if(r==0 and g==0 and b==0):\n        s = 0\n        v = 0\n    else:\n        s = int(0.299*r + 0.587*g + 0.114*b)\n        v = int(0.5*r*g + 0.5*b*g - 0.114*r - 0.5*b)\n    if (s==0):\n        s = 100\n    #print(r,g,b)\n    return (h,s,v)\n"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = max(0, min(255, r))\n    g = max(0, min(255, g))\n    b = max(0, min(255, b))\n    hue = r + g + b\n    saturation = 255 - g - r\n    value = b * 6.28318530718\n    if hue < 0:\n        hue += 360\n    if hue > 360:\n        hue -= 360\n    if saturation < 0:\n        saturation += 255\n    if saturation > 255:\n        saturation -= 255\n    if value < 0:\n        value += 255\n    if value > 255:\n        value -= 255\n    return hue, saturation, value\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            result *= list1[i]\n        else:\n            result //= list1[i]\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    #number of even numbers\n    even_numbers=0\n    #number of odd numbers\n    odd_numbers=0\n    \n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even_numbers+=1\n        else:\n            odd_numbers+=1\n    \n    if even_numbers!=0:\n        result=even_numbers*odd_numbers\n    else:\n        result=0\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            odd.append(list1[i])\n        else:\n            even.append(list1[i])\n    return list(zip(odd,even))\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # TODO: Modify this code so that it takes a list and returns a product of even numbers and odd numbers.\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    #1. Write a for loop to iterate the list.\n    #2. Print the product of the first even number and odd number.\n    \n    #1. Declare a variable\n    product=1\n    #2. Iterate through the list\n    for i in list1:\n        #3. Print the product\n        product=product*i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    #passing the list\n    even_odd = list1\n    #returning the product\n    product = 1\n    for i in range(len(even_odd)):\n        product = product * even_odd[i]\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in list1:\n        if i % 2 == 0:\n            prod = prod * i\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    i = 0\n    for i in range(0,len(list1),2):\n        prod *= list1[i]\n        prod *= list1[i + 1]\n    return prod\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    def mul_even_odd_2(list1):\n        even = 0\n        odd = 0\n        for i in range(len(list1)):\n            if (list1[i] % 2 == 0):\n                even += list1[i]\n            else:\n                odd += list1[i]\n        return even, odd\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_str = []\n    for char in test_str:\n        if char not in temp_str:\n            temp_str.append(char)\n    return tuple(temp_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert the tuple to list\n    tup_list = list(test_str)\n    # convert the integer tuple to string\n    return \"\".join(map(str,tup_list))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str)!= tuple:\n        raise TypeError('Invalid type of string')\n    try:\n        int_tuple = tuple(map(int, test_str))\n    except ValueError:\n        raise ValueError('Invalid string')\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # your code goes here\n    t = ()\n    for i in range(0, len(test_str), 2):\n        t += (int(test_str[i]), int(test_str[i+1]))\n        \n    return t"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(','').replace(')','').replace(',','').replace(' ','')\n    if test_str == '':\n        return None\n    if test_str[0] == '(' and test_str[-1] == ')':\n        test_str = test_str[1:-1]\n    if test_str[0] == '[' and test_str[-1] == ']':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] == '}':\n        test_str = test_str[1:-1]\n    if test_str[0] == '{' and test_str[-1] ="
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.replace(\",\", \"\").split()\n    return tuple(map(int, tuple_str))\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    if test_str[0].isdigit():\n        return int(test_str)\n    else:\n        return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_str_tuple = tuple(map(int, test_str.split(\",\")))\n    return int_str_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    s = []\n    for i in test_str:\n        if i.isdigit():\n            s.append(int(i))\n        else:\n            s.append(i)\n    return tuple(s)\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        test_str = test_str.split(',')\n        test_int = map(int, test_str)\n        return test_int\n    except ValueError:\n        return [0,0,0,0,0]\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    #return a[bisect.bisect_right(a, x)-1]\n    return bisect.bisect_right(a,x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not x in a:\n        return 0\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    i = bisect.bisect_right(a, x)\n    if i < n:\n        return i\n    else:\n        return n\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    else:\n        return i\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        i = bisect.bisect_left(a, x)\n        if i > 0 and a[i-1] >= x:\n            return i-1\n        else:\n            return len(a)\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        i = bisect.bisect_right(a, x)\n        if i < len(a) and a[i] <= x:\n            return i\n        else:\n            return len(a)\n    \ndef deque_right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in deque sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        i = bisect.bisect_left(a, x)\n        if i > 0 and a[i-1] >= x:\n            return i-1\n        else:\n            return len(a)\n    \ndef deque_left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in deque sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        i = bisect.bisect_right(a, x)\n        if i < len(a) and a[i] <= x:\n            return i\n        else:\n            return len(a)\n    \ndef sort(a):\n    '''\n    Write a function to sort a list in ascending order using a specified function.\n    '''\n    for i in range(len(a)):\n        for j in range(len(a) - i - 1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return a\n    \ndef binary_search(a, x, low, high):\n    '''\n    Write a function to search for an item in sorted order.\n    '''\n    if low > high:\n        return -1\n    else:\n        mid = (low + high) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            return binary_search(a, x, low, mid-1)\n        else:\n            return binary_search(a, x, mid+1, high)\n    \ndef first_position(a, x):\n    '''\n    Write a function to search for an item in a sorted order using a specified function.\n    '''\n    low = 0\n    high = len(a) - 1\n    mid = (low + high) // 2\n    if x == a[mid]:\n        return mid\n    elif x < a[mid]:\n        return first_position(a, x)\n    else:\n        return first_position(a, x)\n        \ndef second_position(a, x):\n    '''\n    Write a function to search for an item in a sorted order using a specified function.\n    '''\n    low = 0\n    high = len(a) - 1\n    mid = (low + high) // 2\n    if x == a[mid]:\n        return mid\n    elif x < a[mid]:\n        return second_position(a, x)\n    else:\n        return second_position(a, x)\n    \ndef min_index(a, x):\n    '''\n    Write a function to find the index of a specific item in a sorted order using a specified function.\n    '''\n    low = 0\n    high = len(a) - 1\n    mid = (low + high) // 2\n    if x == a[mid]:\n        return mid\n    elif x < a[mid]:\n        return min_index(a, x)\n    else:\n        return min_index(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    m = len(a) - 1\n    while x < a[m]:\n        m = bisect.bisect_right(a, x)\n    return m\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a)==0:\n        return -1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    # Find the rightmost element in a where x is not present\n    i = bisect.bisect_right(a, x)\n    # If not found, insert x at the end\n    if i!= n:\n        a.insert(i, x)\n    # If the element is present at the end, return\n    else:\n        return i\n    # If the element is not present at the end, return\n    return n\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find the index of the x, where the value is located\n    i = bisect.bisect_right(a, x)\n    # if the index is greater than or equal to len(a) - 1, just return\n    if i >= len(a) - 1:\n        return i - 1\n    # if the index is less than 0, just return\n    elif i < 0:\n        return 0\n    # otherwise,\n    else:\n        # if the value is smaller than the value at the index, swap the two values\n        if a[i] > x:\n            return i\n        # if the value is larger than the value at the index, swap the two values\n        else:\n            return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i - 1 if i >= 0 else len(a)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = ''\n    number_list = [x for x in text if x.isdigit()]\n    for i in number_list:\n        result += str(i)\n    pattern = r'\\b(\\w{3,})\\b'\n    matches = re.finditer(pattern,result)\n    for match in matches:\n        for m in match:\n            if m.start() == 0:\n                result = result.replace(m,'',1)\n            else:\n                result = result.replace(m,'',1)\n    return result\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    match = re.match('a (b)', text)\n    return match!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    three = re.compile('(.\\d{3}b\\d+)')\n    match = three.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # TODO: Complete this function\n    # TODO: Remember to not strip whitespace from the begining of a string\n    # TODO: Use regular expressions to find a match\n    # TODO: Return the value that matches a string\n    regex = r\"[a-zA-Z][a-zA-Z0-9]*(\\s)(\\d{3})b\"\n    match = re.search(regex, text)\n    return match.group(1)\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('b')\n    match = pattern.search(text)\n    if match:\n        print(\"True\")\n        return True\n    else:\n        print(\"False\")\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by zero 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by zero 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_zero(text):\n    '''\n    Write a function that matches a string that has an a followed by zero 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one 'b'.\n    '''\n    match = re.search('(?:a|b)(\\s+?\\d+)?\\b', text)\n    return match\n    \ndef text_match_two(text):\n    '''\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    text = text.split('a')\n    match = re.search('(a)b',text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return text.count('a') == 3 and re.search(r'a', text) is not None\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if 'a' in text:\n        match = re.match(r'^a+b$', text)\n        if match:\n            return 'yes'\n    else:\n        return 'no'\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        res.append(test_list[i] + test_str)\n    return tuple(res)\n    \n    \ndef main():\n    '''\n    main program to call functions from CLI\n    '''\n    args = get_args()\n    \n    if not args.input_file:\n        print('Input file should be specified!')\n        sys.exit(1)\n    if not args.output_file:\n        print('Output file should be specified!')\n        sys.exit(1)\n    \n    input_file = open(args.input_file, 'r')\n    output_file = open(args.output_file, 'w')\n    \n    list_of_lines = input_file.readlines()\n    tuple_of_lines = []\n    for line in list_of_lines:\n        line = line.strip()\n        if line == '\\n':\n            tuple_of_lines.append(tuple(tuple_of_lines[-1]))\n            tuple_of_lines.append(())\n        else:\n            tuple_of_lines.append(new_tuple(tuple(line.split(',')), ''))\n        output_file.write('\\n'.join(tuple_of_lines) + '\\n')\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    a = test_list\n    b = test_str\n    tup = tuple(a + b for a, b in zip(test_list, b.split(\",\")))\n    return tup\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if isinstance(test_list, tuple):\n        return test_list\n    elif isinstance(test_list, list):\n        test_list = list(test_list)\n        test_list = tuple(test_list)\n        return test_list\n    else:\n        raise TypeError('Invalid input type.')\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        a = tuple([int(x) for x in test_str.split()])\n    except ValueError:\n        raise ValueError('Invalid input. Valid input is a string, a list or a tuple.')\n    return a\n    \ndef add_tuple(test_tuple, test_tuple2):\n    '''\n    Write a function to add two tuples.\n    '''\n    try:\n        return tuple(map(tuple, (test_tuple + test_tuple2)))\n    except ValueError:\n        raise ValueError('Invalid input. Valid input is a tuple.')\n    \ndef delete_tuple(test_tuple):\n    '''\n    Write a function to delete a tuple.\n    '''\n    try:\n        return tuple(map(tuple.pop, test_tuple))\n    except IndexError:\n        raise IndexError('Invalid input. Index of the tuple is out of range.')\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    # use the class method'setUp' to set up\n    class Tuple:\n        \n        # create a list of the given data\n        data_list = list(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = test_list.split(' ')\n    return test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple = tuple(new_tuple)\n    new_tuple = tuple(new_tuple)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_list = []\n    for word in test_str.split():\n        tuple_list.append(word)\n    return tuple(tuple_list)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return nums[0]%2 == 0 and nums[1]%2 == 0 and nums[2]%2 == 0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums)%2==0:\n        return nums[::2]\n    else:\n        return 0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even = []\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            even.append(nums[i])\n    print(even)\neven_position(nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    '''\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    num_list = [n for n in nums if n%2==0]\n    return len(num_list) == 0\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if not nums:\n        return False\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index, num in enumerate(nums):\n        if index % 2 == 0:\n            if num % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    even_num = []\n    odd_num = []\n    for index, value in enumerate(nums):\n        if index % 2 == 0:\n            even_num.append(value)\n        else:\n            odd_num.append(value)\n    \n    if even_num == odd_num:\n        print('true')\n    else:\n        print('false')\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i=0\n    while(i<len(nums)):\n        if(nums[i]%2==0):\n            i=i+1\n            if(i<len(nums)-1 and nums[i]%2!=0):\n                return False\n        else:\n            i=i+1\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_list = []\n    # initilize each number in the list as 0\n    for i in nums:\n        if i % 2 == 0:\n            even_list.append(i)\n    \n    # if not even_list, return false\n    if len(even_list) == 0:\n        return False\n    \n    # else return true\n    else:\n        return True\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    tup_to_remove = []\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # YOUR CODE HERE\n    pass\n    \n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create a tuple\n    tuple_to_remove = test_tup\n    # check if the tuple contains one item\n    if len(tuple_to_remove)!= 1:\n        raise TypeError('Invalid test tuple')\n    # remove the tuple\n    del tuple_to_remove\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    test_tup = tuple(test_tup)\n    \n    # don't remove anything if the tuple doesn't contain\n    # anything to remove\n    if len(test_tup) == 0:\n        return ()\n    \n    # the list of tuples to remove\n    remove_list = []\n    \n    # remove the list of tuples\n    for i in test_tup:\n        for j in i:\n            remove_list.append(j)\n            \n    # return the tuple of the removed tuples\n    return tuple(remove_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    s = set(test_tup)\n    s_to_remove = (s - set(test_tup)) - s\n    \n    if s_to_remove:\n        print(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: {s_to_remove}\")\n    else:\n        print(\"\u0422\u0430\u043a\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043d\u0435\u0442\")\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n    "
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Your code here\n    # build_tuple = 'a,b,c,d,e'\n    # print(build_tuple)\n    build_tuple = 'a,b,c,d,e,f,g,h'\n    t = build_tuple.split(',')\n    final_t = []\n    for i in t:\n        if t.index(i)!= len(t)-1:\n            final_t.append(i)\n        else:\n            final_t.append(i)\n    return tuple(final_t)"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp = ()\n    for x in test_tup:\n        if type(x) == tuple:\n            temp = temp + x\n    return temp\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 0:\n        return []\n    else:\n        remove_list = []\n        for tup in test_tup:\n            if type(tup)!= tuple:\n                remove_list.append(tup)\n            else:\n                remove_list = remove_list + tup\n        return remove_list\n"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = list(test_tup)\n    lst.remove(test_tup)\n    return tuple(lst)\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Your code goes here\n    count = 0\n    for i in input_list:\n        count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for element in input_list:\n        if isinstance(element, list):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_list = 0\n    for i in input_list:\n        if type(i) is list:\n            num_list += len(i)\n    return num_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(0, len(input_list)):\n        for j in range(0, len(input_list)):\n            if i!= j:\n                count = count + 1\n    return count\n    \nprint('The number of lists in a given number of lists: ', count_list(input_list = [1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    temp = input_list[0] \n    # we can do a for loop with a for loop\n    # counter = 0\n    counter = 1\n    for i in range(1, len(input_list)): \n        # counter += 1\n        # if input_list[i] == 'a': \n        #     counter += 2\n        # print(f\"{i+1} -> {counter}\")\n        if input_list[i] == 'a': \n            counter += 1\n    print(f\"The number of lists: {counter}\")\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_list_1 = 0\n    num_list_2 = 0\n    num_list_3 = 0\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    result = 0\n    for i in input_list:\n        result += len(i)\n    return result\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    cnt_list=0\n    for i in range(len(input_list)):\n        if type(input_list[i])==list:\n            cnt_list+=len(input_list[i])\n    print(\"cnt_list is :\",cnt_list)\n    return cnt_list\n"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Implement the code here.\n    l1 = len(input_list)\n    l2 = len(input_list[0])\n    count = 0\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    for i in range(n):\n        if arr[i]==x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return -1\n    if arr.count(x)==1:\n        return arr.index(x)\n    else:\n        l=arr.index(x,arr.size())\n        arr.sort()\n        return arr[l]\narr = [3,8,9,10,19,11,12,13,17,16,14]\nprint(last(arr,17)"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pos = -1\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == x:\n            pos = i\n            break\n    return pos\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==1:\n        return arr[-1]\n    if arr[0]>=x:\n        return findLargest(arr,x)\n    else:\n        i=0\n        while i<len(arr)-1 and arr[i]>=x:\n            i+=1\n        if i==len(arr)-1:\n            return arr[-1]\n        else:\n            return arr[i]\n            \ndef findLargest(arr,x):\n    if len(arr)==1:\n        return arr[0]\n    if arr[0]>=x:\n        return findLargest(arr[1:],x)\n    else:\n        return findLargest(arr[1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # code here\n    if len(arr)==1:\n        return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    if arr[0] == x:\n        return 0\n    \n    if arr[0] > x:\n        return last(arr[1:],x)\n    \n    return len(arr) - 1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if(len(arr)==0):\n        return -1\n    if(arr[0]<x):\n        return len(arr)-1\n    if(arr[0]>x):\n        return 0\n    i=1\n    while(i<len(arr)):\n        if(arr[i]<x):\n            i+=1\n        elif(arr[i]==x):\n            return i-1\n        i+=1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    if arr[0] == x:\n        return 0\n    \n    left_index = 0\n    right_index = len(arr) - 1\n    \n    while left_index <= right_index:\n        \n        middle_index = (left_index + right_index) // 2\n        \n        if arr[middle_index] == x:\n            return middle_index\n        \n        if arr[middle_index] > x:\n            right_index = middle_index - 1\n        \n        if arr[middle_index] < x:\n            left_index = middle_index + 1\n    \n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if l == 0:\n        return 0\n    else:\n        return l - 1 - (arr[l - 1] == x)\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    count = 0\n    while count < len(text):\n        if text[count:count + 3] == \"a\" or text[count:count + 3] == \"b\":\n            count += 3\n        else:\n            count += 1\n    return count + 3\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^a-z\\s]+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = text.strip()\n    text = re.sub(r'\\w+\\s+', '', text)\n    return text\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.split(' ')\n    text_new = []\n    for word in text:\n        if word[0] == 'a':\n            # print(word)\n            word = word[1:]\n        if word == 'b':\n            word = 'a'\n        text_new.append(word)\n    # print(text_new)\n    return text_new\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print(text)\n    return re.search('a.*b',text).group()\ntext_starta_endb('hello world'"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.findall(r'a\\b', text)\n    if result == []:\n        result = re.findall(r'(a\\b)', text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # create a list of the word forms\n    wordforms = re.findall(r'[A-Z][a-z]*', text)\n    # loop through the word forms\n    for word in wordforms:\n        # if the word is an 'a' followed by anything\n        if word[-1] == 'a':\n            # convert the word to lowercase\n            word = word.lower()\n            # check if the word ends in 'b'\n            if word[-2] == 'b':\n                # return the word\n                return word\n    # if it's not an 'a' followed by anything, return false\n    return False\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    try:\n        if re.search(r'[a-zA-Z]', text):\n            for char in text:\n                if char == 'b':\n                    #print(char)\n                    return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start_text = 'a'\n    end_text = 'b'\n    start_index = 0\n    end_index = 0\n    while True:\n        if text[start_index:end_index] == start_text and end_index < len(text) - 1:\n            end_index = end_index + 1\n        elif text[start_index:end_index] == end_text:\n            return end_index\n        else:\n            start_index = start_index + 1\n            end_index = end_index + 1\n    return False\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a, b = text.split('a')\n    if re.search(r'[bB]', b):\n        return f'{a}a {b}'\n    else:\n        return f'{a} {b}'\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = re.sub('[a-z]', '', text)\n    if not text.startswith('a'):\n        raise ValueError('No starta.')\n    else:\n        return text[2:].endswith('b')\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum = sum + value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict.keys():\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total = total + dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for key in dict.keys():\n        sum+=dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    if not dict:\n        return 0\n    \n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n,1,-1):\n        if i%2 == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd=0\n    for i in range(l,r+1):\n        if i%2==0:\n            sum_odd+=i\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Your code here\n    s = 0\n    for x in range(l, r+1):\n        if x % 2!= 0:\n            s += x\n    return s\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # l = 0, r = 1000\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n\n    if n % 2 == 1:\n        return n + sum_odd(n - 1)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for x in range(l, r + 1):\n        if x % 2!= 0:\n            sum += x\n    print(sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for x in range(0, n+1):\n        if x % 2 == 1:\n            s = s + x\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n-1\n    sum = 0\n    while (l<r):\n        if (n%2 == 0):\n            sum += n\n            l += 1\n            n = n//10\n        else:\n            r -= 1\n            n = n//10\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize sum\n    sum = 0\n    # Iterate through the range\n    for i in range(l, r):\n        # Check if it is even\n        if i % 2 == 0:\n            # Add the numbers\n            sum += i\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_ = 0\n    for i in range(l, r + 1): \n        if i % 2 == 0: \n            sum_ += i \n    return sum_ \n"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    count = 0\n    for i in range(l, r+1): \n        if i % 2 == 1: \n            count += i \n    return count \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #return sum(arr)\n    return sum(arr[:])\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0 \n    for i in arr:\n        sum += i \n    return sum \n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr = arr[::-1]\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return arr[0] + arr[1] + arr[2] + arr[3]\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    for i in range(d):\n        n = n<<1\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #for index in range(d):\n    #    n = n>>index\n    #    n = n&(n-1)\n    #    print(\"left_rotate: \", n)\n    d_bit = 1\n    while d_bit:\n        d_bit = (d_bit <<1) % 2\n        if d_bit:\n            d_bit = (d_bit >>1) % 2\n    print(\"left_rotate: \", n)\n    \ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #for index in range(d):\n    #    n = n>>index\n    #    n = n&(n-1)\n    #    print(\"right_rotate: \", n)\n    d_bit = 1\n    while d_bit:\n        d_bit = (d_bit <<1) % 2\n        if d_bit:\n            d_bit = (d_bit >>1) % 2\n    print(\"right_rotate: \", n)\n    \ndef xor(n,d):\n    '''\n    Write a function to do xor a given number n and d bits a given number. \n    '''\n    #for index in range(d):\n    #    n = n>>index\n    #    n = n&(n-1)\n    #    print(\"xor: \", n)\n    return n ^ d\n    \ndef invert(n,d):\n    '''\n    Write a function to do invert a given number n and d bits a given number.\n    '''\n    #for index in range(d):\n    #    n = n<<index\n    #    n = n&(n-1)\n    #    print(\"invert: \", n)\n    return n ^ (n >> d)\n    \ndef dot_product(n,d):\n    '''\n    Write a function to do dot product a given number n and d bits a given number.\n    '''\n    #for index in range(d):\n    #    n = n<<index\n    #    n = n&(n-1)\n    #    print(\"dot_product: \", n)\n    return n*d\n    \ndef inverse(n,d):\n    '''\n    Write a function to do inverse a given number n and d bits a given number.\n    '''\n    #for index in range(d):\n    #    n = n<<index\n    #    n = n&(n-1)\n    #    print(\"inverse: \", n)\n    return (n ^ (n >> d)) & ((2 ** d) - 1)\n    \ndef gcd(n,d):\n    '''\n    Write a function to find the greatest common divisor of two numbers.\n    '''\n    #for index in range(d):\n    #    n = n<<index\n    #    n = n&(n-1)\n    #    print(\"gcd: \", n)\n    return ((n & (n - 1)) >> d) | 1 #or (n & (n - 1))\n    \ndef gcd_v2(n,d):\n    '''\n    Write a function to find the greatest common divisor of two numbers using \n    very little extra memory.\n    '''\n    #for index in range(d):\n    #    n = n<<index\n    #    n = n&(n-1)\n    #    print(\"gcd_v2: \", n)\n    #return ((n & (n - 1)) >> d) | 1\n    \n    #if n==0:\n    #    return 1\n    if n & (n-1) == 0:\n        return (n & (n-1))\n    else:\n        return (n & (n-1)) | 1\n    \ndef lcm(n,d):\n    '''\n    Write a function to find the least common multiple of two numbers.\n    '''\n    #for index in range(d):\n    #    n = n<<index\n    #    n = n&(n-1)\n    #    print(\"lcm: \", n)\n    return (n & (n-1)) | (n & (n-1))\n    \ndef modinv(n,d):\n    '''\n    Write a function to find the modular inverse of a number.\n    '''\n    #for index in range(d):\n    #    n = n<<index\n    #    n = n&(n-1)\n    #    print(\"modinv: \", n)\n    return (n * pow(n,d-2,2)) % (pow(2,31))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n>>d) & 0xffffffff\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Your code goes here\n    n = n%(2**32)\n    l = n%(2**32)\n    if l>=d:\n        return n\n    else:\n        return n\n        "
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n>>d)&1\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n & (n - 1)) << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    num = n\n    d = d%32\n    d = 32-d\n    l = [num & x for x in bin(num)[2:]]\n    l = l[:d] + l[d:]\n    return int(\"\".join(l),2)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n>>(32-d))&0xffffffff) + (n & 0xffffffff)\n"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #https://practice.geeksforgeeks.org/problems/rotate-by-d-bits-5/1\n    k=n;r=0;n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k&r=r&n=n&k=k"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n_str = format(n,'064b')\n    d_str = format(d,'064b')\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(\" \", \"\", text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define variables\n    text = text.lower()\n    text = re.sub('\\s+',' ',text)\n    return text\ndef remove_html(text):\n    '''\n    Write a function that returns the same text with all links and hyperlinks removed.\n    '''\n    # Define variables\n    text = text.lower()\n    text = re.sub('<[^>]*>', '', text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('<[^>]*>','',text)\n    text = re.sub('^\\s+',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' ',text)\n    text = re.sub('\\s+',' ',text)\n    text = re.sub('\\n',' '"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', str(text))\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_str = ''\n    for word in text.split():\n        new_str += word.strip()\n    return new_str\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip().replace('\\n', '').replace('\\r', '').replace('\\t', '')\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    if not isinstance(text, str):\n        raise TypeError('Input must be string')\n    text = text.replace(' ', '')\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    num=0\n    for i in range(x,y):\n        if(i==x):\n            num+=1\n        elif(i==y):\n            num+=1\n        else:\n            num+=0\n    for j in range(z,x,-1):\n        if(j==y):\n            num+=1\n        elif(j==x):\n            num+=1\n        else:\n            num+=0\n    print(num)\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(0,len(x)):\n        if x[i]==y[i]:\n            count+=1\n    for i in range(0,len(x)):\n        if x[i]==z[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x_cnt = 0\n    y_cnt = 0\n    z_cnt = 0\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x!= y!= z:\n        if x < y:\n            if x < z:\n                count += 1\n            else:\n                count += 2\n        else:\n            if z < x:\n                count += 1\n            else:\n                count += 2\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    '''\n    Test Case\n    '''\n    test_case=int(input(\"Enter the number of test case : \"))\n    for i in range(test_case):\n        num1 = int(input(\"Enter the first integer : \"))\n        num2 = int(input(\"Enter the second integer : \"))\n        num3 = int(input(\"Enter the third integer : \"))\n        if(num1==num2 and num1==num3):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    \n    \n    \n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum(filter(lambda x: x == y, [x, y, z]))\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(f'Given numbers are {x}, {y} and {z}')\n    count = 0\n    for i in range(x):\n        for j in range(y):\n            for k in range(z):\n                if i == j == k:\n                    count += 1\n    print(f'Numbers from 3 are {x}, {y} and {z}, number of equal numbers are {count}')\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # Exercise 1 - Write a python function to count the number of equal numbers from three given integers.\n    count = 0\n    for i in range(0,3):\n        if x==y and x==z:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    def countEqual(x, y, z):\n        '''\n        Write a python function to count the number of equal numbers from three given integers.\n        '''\n        return sum(map(lambda x: x == y or x == z, [x, y, z]))\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    num = 0\n    for i in range(0,len(x)):\n        if x[i]==y[i] and y[i]==z[i]:\n            num=num+1\n        if x[i]==z[i] and x[i]!=y[i] and y[i]!=z[i]:\n            num=num+1\n    return num\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    size = len(arr)\n    rotations = 0\n    for i in range(size):\n        for j in range(0,size-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    arr_len = len(arr)\n    if arr_len == 0:\n        return 0\n    if arr_len == 1:\n        if arr[0] == 0:\n            return 1\n        return 0\n    if arr[arr_len-1] == 0:\n        return count\n    return count + count_rotation(arr[:arr_len-1])\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Write your code here.\n    n = len(arr)\n    rotations = 0\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i - 1]:\n            count += 1\n    return count\n    \n    \nif __name__ == '__main__':\n    '''\n    Do not modify any of the code below.\n    '''\n    # print(count_rotation([1, 3, 5, 7, 9, 11, 13, 15]))  # should be 7\n    # print(count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # should be 10\n    print(count_rotation([1, 3, 5, 7, 9, 11, 13, 15]))  # should be 7"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotated_array = [None] * len(arr)\n    left_pointer = 0\n    right_pointer = len(arr)-1\n    # print(left_pointer, right_pointer)\n    while left_pointer < right_pointer:\n        # print(left_pointer, right_pointer)\n        if arr[left_pointer] < arr[left_pointer+1]:\n            # print('left')\n            rotated_array[left_pointer] = arr[left_pointer]\n            left_pointer += 1\n        else:\n            rotated_array[left_pointer] = arr[left_pointer+1]\n            left_pointer += 1\n        if arr[right_pointer] < arr[right_pointer-1]:\n            # print('right')\n            rotated_array[right_pointer] = arr[right_pointer]\n            right_pointer -= 1\n        else:\n            rotated_array[right_pointer] = arr[right_pointer-1]\n            right_pointer -= 1\n    \n    return rotated_array\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # find the first and last index of array\n    start = 0\n    end = len(arr)-1\n    # iterate through all indexes starting at the first index and ending at the last index\n    while start <= end:\n        # get next index for input\n        mid = (start + end) // 2\n        # if the next index is less than the mid index, then swap the next index with the next mid index\n        if arr[mid] < arr[mid+1]:\n            start = mid + 1\n        # if the next index is greater than the mid index, then swap the next index with the next mid index\n        else:\n            end = mid - 1\n    return end - start + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # length of the array\n    n = len(arr)\n    # Initialize the count\n    count = 0\n    # Initialize the flag\n    flag = 1\n    # Find the index of first element\n    i = 1\n    # While loop\n    while i < n:\n        # If this element is not the first element\n        if arr[i]!= arr[i-1]:\n            # Count up the index\n            count += 1\n            # Increment the flag\n            flag = 0\n        # Increment the index\n        i += 1\n    # If the first element is the same as the last element\n    if arr[i-1] == arr[i]:\n        # Count up the index\n        count += 1\n        # Increment the flag\n        flag = 0\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    l = len(arr)\n    for i in range(l):\n        for j in range(l-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    # loop through each element in the array\n    for i in range(n):\n        # set the i variable to keep track of which index\n        # element is less than the first element\n        # and the index variable is the second less\n        # element's index\n        i_less = i\n        i_index = 0\n        \n        # loop through each index\n        while i_index < n and arr[i_index] < arr[i_less]:\n            # if the index is less than the element,\n            # the index is incremented by one\n            i_index += 1\n        \n        # if the index is less than the element,\n        # decrement the index by one\n        if i_index < n:\n            count += i_less - i_index\n    \n    return count\n        \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = 0\n    for i in str(n) :\n        s = s * 10 + int(i)\n    return s == n\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n==int(n**0.5) or n==(n**0.5)\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqr = n**0.5\n    return sqr == int(sqr) and int(sqr) == n\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    \n    sq = int(n**0.5)\n    if sq**2 == n:\n        return True\n    \n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1 or n == 0:\n        return True\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    x = 3\n    while x ** 2 <= n:\n        if n % x == 0:\n            return False\n        x += 2\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==0 or n==1:\n        return True\n    if n%2==0:\n        return False\n    if n%3==0:\n        return False\n    if n%5==0:\n        return False\n    if n%7==0:\n        return False\n    return False\n    \n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s=0\n    #getting n from user\n    n=int(input('Enter the number : '))\n    #checking to make sure the user inputs a non-negative number\n    if n<=0 :\n        print('The given number should be positive.')\n        return False\n    # checking if the given number is a perfect square\n    if n==1 :\n        #initializing the variable to be a perfect square\n        s=2\n        # checking the condition to check if the number is perfect square\n        if n==2 :\n            # printing result\n            print(\"The given number is a perfect square.\")\n            return True\n        # checking if the number is not a perfect square\n        else :\n            # printing result\n            print(\"The given number is not a perfect square.\")\n            return False\n    # getting the limit of the number\n    elif n%2==0 :\n        # checking to see if the number is a perfect square\n        s=3\n        # checking if the number is not a perfect square\n        if n==3 :\n            # printing result\n            print(\"The given number is a perfect square.\")\n            return True\n        # checking if the number is not a perfect square\n        else :\n            # printing result\n            print(\"The given number is not a perfect square.\")\n            return False\n    # getting the limit of the number\n    else :\n        # checking to see if the number is a perfect square\n        s=4\n        # checking if the number is not a perfect square\n        if n==4 :\n            # printing result\n            print(\"The given number is a perfect square.\")\n            return True\n        # checking if the number is not a perfect square\n        else :\n            # printing result\n            print(\"The given number is not a perfect square.\")\n            return False\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt = int(math.sqrt(n))\n    return n == n ** 2\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    is_perfect_square = True\n    if n < 2 :\n        is_perfect_square = False\n        return is_perfect_square\n    for i in range(2, n//2+1) :\n        if n%i == 0 :\n            is_perfect_square = False\n            return is_perfect_square\n    is_perfect_square = True\n    return is_perfect_square\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        d = n\n        while d % 2 == 0:\n            d /= 2\n            if d == 1:\n                return True\n        return False\n    \ndef run():\n    #n = int(input())\n    n = 821\n    if is_perfect_square(n):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = prod * arr[i]\n    if prod % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) <= 1:\n        return False\n    else:\n        for i in arr:\n            if i % 2!= 0:\n                return False\n        return True"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    even_list = []\n    for num in arr:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return arr[0] % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr)<=1:\n        return arr==[0]\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count=0\n    for num in arr:\n        count+=1\n        if num%2==0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    num = 0\n    for i in arr:\n        num += i\n    if num%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i]%2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    result = []\n    for num in arr:\n        if num%2 == 0:\n            result.append(num)\n    if len(result)==0:\n        return \"No even numbers\"\n    if len(result)==1:\n        return str(result[0])+' '+str(result[0])\n    else:\n        return \"We have \"+str(len(result))+' even numbers'\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Implement this function!\n    def helper(lst):\n        highest = []\n        for i in lst:\n            for j in i:\n                if j not in highest:\n                    highest.append(j)\n        return highest\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return [[sum(l) for l in lists]]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    highest = []\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for lst in lists:\n        sum = 0\n        for x in lst:\n            sum += x\n        max_sum.append([lst, sum])\n    \n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Write your code here\n    highest_sum_list = []\n    for l in lists:\n        sum_of_l = 0\n        for x in l:\n            sum_of_l += x\n        highest_sum_list.append([l[0],sum_of_l])\n    return highest_sum_list\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max_sum_list(lists[:]) + lists[:]\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = 0\n    max_list = []\n    for item in lists:\n        if item[1] > highest_sum:\n            highest_sum = item[1]\n        elif item[1] == highest_sum:\n            if item[0] not in max_list:\n                max_list.append(item[0])\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    temp_sum = 0\n    for i in lists:\n        temp_sum += i\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_sum_l = i\n    return max_sum_l\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for i in lists:\n        for j in i:\n            if j in max_sum:\n                max_sum.append(j)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum_list = []\n    #Assumption: all elements in the list should be positive integers\n    for i in range(len(lists)):\n        for j in range(i+1,len(lists)):\n            if lists[i] + lists[j] > max_sum_list[-1]:\n                max_sum_list.append([lists[i],lists[j]])\n    return max_sum_list\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    import string\n    from collections import Counter\n    result = 0\n    alphabet = string.ascii_uppercase\n    alphabet_count = Counter(alphabet)\n    for char in test_str:\n        if char.isupper():\n            result += 1\n    return result\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in test_str:\n        if i.isupper():\n            if max_run < i.upper():\n                max_run = i.upper()\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return \"\"\n    output = \"\"\n    max_run = 0\n    for i in test_str:\n        if i.isupper():\n            if output:\n                output = output + \" \" + i\n                max_run = max(max_run, len(output))\n            else:\n                output = i\n                max_run = len(output)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Checking if the string is empty\n    if len(test_str) == 0:\n        return 0\n    \n    # Finding max value\n    max_uppercase = 0\n    for char in test_str:\n        if char.isupper():\n            if max_uppercase < char.upper():\n                max_uppercase = char.upper()\n    \n    # Returning maximum value\n    return max_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if(test_str[i].isupper()):\n            max_run += 1\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == None or len(test_str) == 0:\n        return None\n    \n    uppercase_count = 0\n    result = uppercase_count\n    for c in test_str:\n        if c.isupper():\n            uppercase_count += 1\n    if uppercase_count == len(test_str):\n        return result\n    else:\n        return max_run_uppercase(test_str[1:])\n    \n    \ntest_str = \"Hi\"\nprint(max_run_uppercase(test_str))\ntest_str = \"Bye\"\nprint(max_run_uppercase(test_str)"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count+=1\n    return count\n    \ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].islower():\n            count+=1\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_uppercase = 0\n    for ch in test_str:\n        if ch.isupper():\n            max_run_uppercase += 1\n    return max_run_uppercase\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # your code here\n    # use the built in function to do it\n    if not test_str:\n        return 0\n    for x in test_str:\n        if x.isupper():\n            test_str = test_str.replace(x, \"U\")\n            if x.isupper():\n                test_str = test_str.replace(x, \"U\")\n    return test_str"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_lower = 0\n    max_run_upper = 0\n    for char in test_str:\n        if ord(char) >= ord(\"A\") and ord(char) <= ord(\"Z\"):\n            if char.isupper():\n                max_run_lower += 1\n            else:\n                max_run_upper += 1\n    return max(max_run_lower, max_run_upper)\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #print(nums)\n    num_list = []\n    for n in nums:\n        if n % 2!= 0:\n            num_list.append(n)\n    return num_list[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers[0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    # Reminder: first_odd_num = nums[0]\n    # Is this where you put in the start of the loop?\n    first_odd_num = nums[0]\n    \n    for num in nums[1:]:\n        if num % 2 == 1:\n            first_odd_num = num\n            break\n    \n    return first_odd_num\n    \nprint(first_odd([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # code\n    # start with the first odd number\n    odd_num = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] % 2 == 1:\n            odd_num = nums[i]\n            break\n    return odd_num\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    start = 0\n    for end in range(len(nums)):\n        if nums[end] % 2!= 0:\n            start = end\n            break\n    return nums[start+1]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return [number for number in nums if (number % 2)!= 0]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(0, len(nums)):\n        if (nums[i] % 2!= 0):\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return nums[0] if len(nums)%2==1 else nums[len(nums)//2]\n    \ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    return nums[1] if len(nums)%2==1 else nums[len(nums)//2]\n    \ndef third_odd(nums):\n    '''\n    Write a python function to find the third odd number in a given list of numbers.\n    '''\n    return nums[2] if len(nums)%2==1 else nums[len(nums)//2]\n    \ndef fourth_odd(nums):\n    '''\n    Write a python function to find the fourth odd number in a given list of numbers.\n    '''\n    return nums[3] if len(nums)%2==1 else nums[len(nums)//2]\n    \ndef fifth_odd(nums):\n    '''\n    Write a python function to find the fifth odd number in a given list of numbers.\n    '''\n    return nums[4] if len(nums)%2==1 else nums[len(nums)//2]\n    \ndef sixth_odd(nums):\n    '''\n    Write a python function to find the sixth odd number in a given list of numbers.\n    '''\n    return nums[5] if len(nums)%2==1 else nums[len(nums)//2]\n    \ndef seventh_odd(nums):\n    '''\n    Write a python function to find the seventh odd number in a given list of numbers.\n    '''\n    return nums[6] if len(nums)%2==1 else nums[len(nums)//2]\n    \ndef eighth_odd(nums):\n    '''\n    Write a python function to find the eighth odd number in a given list of numbers.\n    '''\n    return nums[7] if len(nums)%2==1 else nums[len(nums)//2]\n    \ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    return nums[0] if len(nums)%2==0 else nums[len(nums)//2]\n    \ndef second_even(nums):\n    '''\n    Write a python function to find the second even number in a given list of numbers.\n    '''\n    return nums[1] if len(nums)%2==0 else nums[len(nums)//2]\n    \ndef third_even(nums):\n    '''\n    Write a python function to find the third even number in a given list of numbers.\n    '''\n    return nums[2] if len(nums)%2==0 else nums[len(nums)//2]\n    \ndef fourth_even(nums):\n    '''\n    Write a python function to find the fourth even number in a given list of numbers.\n    '''\n    return nums[3] if len(nums)%2==0 else nums[len(nums)//2]\n    \ndef fifth_even(nums):\n    '''\n    Write a python function to find the fifth even number in a given list of numbers.\n    '''\n    return nums[4] if len(nums)%2==0 else nums[len(nums)//2]\n    \ndef sixth_even(nums):\n    '''\n    Write a python function to find the sixth even number in a given list of numbers.\n    '''\n    return nums[5] if len(nums)%2==0 else nums[len(nums)//2]\n    \ndef seventh_even(nums):\n    '''\n    Write a python function to find the seventh even number in a given list of numbers.\n    '''\n    return nums[6] if len(nums)%2==0 else nums[len(nums)//2]\n    \ndef eighth_even(nums):\n    '''\n    Write a python function to find the eighth even number in a given list of numbers.\n    '''\n    return nums[7] if len(nums)%2==0 else nums[len(nums)//2]\n    \ndef first_odd_even(nums):\n    '''\n    Write a python function to find the first odd even number in a given list of numbers.\n    '''\n    return nums[0] if (nums[0] % 2)==0 else nums[len(nums)//2]\n    \ndef second_odd_even(nums):\n    '''\n    Write a python function to find the second odd even number in a given list of numbers.\n    '''\n    return nums[1] if (nums[1] % 2)==0 else nums[len(nums)//2]\n    \ndef third_odd_even(nums):\n    '''\n    Write a python function to find the third odd even number in a given list of numbers.\n    '''\n    return nums[2] if (nums[2] % 2)==0 else nums[len(nums)//2]\n    \ndef fourth_odd_even(nums):\n    '''\n    Write a python function to find the fourth odd even number in a given list of numbers.\n    '''\n    return nums[3] if (nums[3] % 2)==0 else nums[len(nums)//2]\n    \ndef fifth_odd_even(nums):\n    '''\n    Write a python function to find the fifth odd even number in a given list of numbers.\n    '''\n    return nums[4] if (nums[4] % 2)==0 else nums[len(nums)//2]\n    \ndef sixth_odd_even(nums):\n    '''\n    Write a python function to find the sixth odd even number in a given list of numbers.\n    '''\n    return nums[5] if (nums[5] % 2)==0 else nums[len(nums)//2]\n    \ndef seventh_odd_even(nums):\n    '''\n    Write a python function to find the seventh odd even number in a given list of numbers.\n    '''\n    return nums[6] if (nums[6] % 2)==0 else nums[len(nums)//2]\n    \ndef eighth_odd_even(nums):\n    '''\n    Write a python function to find the eighth odd even number in a given list of numbers.\n    '''\n    return nums[7] if (nums[7] % 2)==0 else nums[len(nums)//2]\n    \ndef first_even_odd(nums):\n    '''\n    Write a python function to find the first even odd number in a given list of numbers.\n    '''\n    return nums[0] if (nums[0] % 2)==0 else nums[len(nums)//2]\n    \ndef second_even_odd(nums):\n    '''\n    Write a python function to find the second even odd number in a given list of numbers.\n    '''\n    return nums[1] if (nums[1] % 2)==0 else nums[len(nums)//2]\n    \ndef third_even_odd(nums):\n    '''\n    Write a python function to find the third even odd number in a given list of numbers.\n    '''\n    return nums[2] if (nums[2] % 2)==0 else nums[len(nums)//2]\n    \ndef fourth_even_odd(nums):\n    '''\n    Write a python function to find the fourth even odd number in a given list of numbers.\n    '''\n    return nums[3] if (nums[3] % 2)==0 else nums[len(nums)//2]\n    \ndef fifth_even_odd(nums):\n    '''\n    Write a python function to find the fifth even odd number in a given list of numbers.\n    '''\n    return nums[4] if (nums[4] % 2)==0 else nums[len(nums)//2]\n    \ndef sixth_even_odd(nums):"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums)==0:\n        return None\n    odd_list = [num for num in nums if num%2!=0]\n    if len(odd_list)==0:\n        return None\n    return odd_list[0]\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(K):\n        if test_tup[i] == test_tup[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check_set = set(test_tup)\n    if len(check_set) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check that the tuple is not empty\n    if len(test_tup) == 0:\n        return False\n    # Check that the tuples are all sorted\n    for index in range(len(test_tup) - 1):\n        if test_tup[index][0] > test_tup[index + 1][0]:\n            return False\n    # Check that all the elements of the tuple are integers\n    for element in test_tup:\n        if type(element)!= tuple:\n            return False\n        for index in range(len(element)):\n            if type(element[index])!= int:\n                return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    flag = False\n    for i in range(len(test_tup)):\n        if test_tup[i][0] == K:\n            flag = True\n            return flag\n    return flag\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if type(test_tup) is not tuple:\n        return False\n    if len(test_tup) < 1:\n        return False\n    for item in test_tup:\n        if type(item) is not tuple:\n            return False\n        if len(item) < 2:\n            return False\n        if item[0] not in K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == test_tup[1] or test_tup[1] == K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    return test_tup[0] >= K\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for element in test_tup:\n        if element == K:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i][1] == K:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller_tuple = []\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            smaller_tuple.append(test_tup2[i])\n    print(smaller_tuple)\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # If the length of the first tuple is greater than the length of the second tuple then return False.\n    if len(test_tup1) > len(test_tup2):\n        return False\n    # For each element in the first tuple, compare the element with the corresponding element in the second tuple\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            smaller = False\n            break\n    return smaller\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for tup in [test_tup1, test_tup2]:\n        if tup[1] < tup[0]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    count = 0\n    for tup in test_tup1:\n        if tup[0] > tup[1]:\n            count += 1\n    for tup in test_tup2:\n        if tup[0] > tup[1]:\n            count += 1\n    if count == len(test_tup1) * len(test_tup2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return False\n    for i in range(0, len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n"
    }
]